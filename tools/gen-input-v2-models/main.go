// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/sacloud/usacloud/tools"
)

var (
	destination = "src/github.com/sacloud/usacloud/cmdv2/params"
	ctx         = tools.NewGenerateContext()
)

// Usage is a replacement usage function for the flags package.
func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of %s:\n", os.Args[0])
	fmt.Fprintf(os.Stderr, "\tgen-input-v2-models\n")
	os.Exit(2)
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("gen-input-v2-models: ")

	for _, resource := range ctx.Resources {
		// schema validation
		var errors []error
		for _, c := range resource.Commands {
			errs := c.Validate()
			errors = append(errors, errs...)
		}
		if len(errors) > 0 {
			log.Println("*** Schema validation error ***")
			log.SetPrefix("\t")
			for _, e := range errors {
				log.Println(e.Error())
			}
			os.Exit(2)
		}

		src, err := generateResource(resource)
		if err != nil {
			log.Fatalf("writing output: %s", err)
		}

		// Write to file.
		baseName := resource.ParameterSourceFileName()
		filePath := filepath.Join(destination, strings.ToLower(baseName))
		fileFullPath := filepath.Join(ctx.Gopath(), filePath)

		err = ioutil.WriteFile(fileFullPath, tools.Sformat([]byte(src)), 0644)
		if err != nil {
			log.Fatalf("writing output: %s", err)
		}
		fmt.Printf("generated: %s\n", filePath)
	}
}

func generateResource(resource *tools.Resource) (string, error) {
	buf := bytes.NewBufferString("")
	t := template.New("t")
	template.Must(t.Parse(srcTemplate))
	err := t.Execute(buf, resource)
	if err != nil {
		return "", err
	}
	return buf.String(), nil
}

var srcTemplate = `// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	v0params "github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/schema"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
)

{{ range .Commands -}}

// {{.InputParameterTypeName}} is input parameters for the sacloud API
type {{.InputParameterTypeName}} struct {
	{{ range .Params -}}
	{{.FieldName}} {{.FieldTypeName}} {{.FieldTag}}
	{{ end }}
	input Input
}

// New{{.InputParameterTypeName}} return new {{.InputParameterTypeName}}
func New{{.InputParameterTypeName}}() *{{.InputParameterTypeName}}{
	return &{{.InputParameterTypeName}} {
		{{ range .Params }}{{ if .DefaultValue }}{{.FieldName}}: {{.DefaultValueOnSource}},{{ end }}{{ end -}}
	}
}

// Initialize init {{.InputParameterTypeName}}
func (p *{{.InputParameterTypeName}}) Initialize(in Input, args []string) error {
	p.input = in
	{{ if .SingleArgToIdParam }}
	if len(args) == 0 {
		return fmt.Errorf("argument <ID> is required")
	}
	p.Id = sacloud.StringID(args[0])
	if p.Id.IsEmpty() {
		return fmt.Errorf("argument <ID> is required")
	}
	{{ end -}}
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *{{.InputParameterTypeName}}) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *{{.InputParameterTypeName}}) FillValueToSkeleton() {
	{{ range .Params -}}
	if utils.IsEmpty(p.{{.FieldName}}){
		p.{{.FieldName}} = {{.SetEmptyStatement}}
	}
	{{ end }}
}

func (p *{{.InputParameterTypeName}}) validate() error {
	var errors []error
	{{ range .Params }}
	{{.ValidatorStatements}}
	{{ end -}}
	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors , errs...)
		}
	}
	{{ if .HasOutputOption }}
	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type" , p.OutputType )
		if errs != nil {
			errors = append(errors , errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors , errs...)
		}
	}
	{{ end -}}
	return utils.FlattenErrors(errors)
}

func (p *{{.InputParameterTypeName}}) ResourceDef() *schema.Resource {
	return define.Resources["{{.Resource.Name}}"]
}

func (p *{{.InputParameterTypeName}}) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["{{.Name}}"]
}

func (p *{{.InputParameterTypeName}}) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *{{.InputParameterTypeName}}) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *{{.InputParameterTypeName}}) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *{{.InputParameterTypeName}}) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}


/*
 * v0系との互換性維持のための実装
 */
func (p *{{.InputParameterTypeName}}) GetResourceDef() *schema.Resource {
	return define.Resources["{{.Resource.Name}}"]
}

func (p *{{.InputParameterTypeName}}) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["{{.Name}}"]
}

func (p *{{.InputParameterTypeName}}) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *{{.InputParameterTypeName}}) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *{{.InputParameterTypeName}}) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *{{.InputParameterTypeName}}) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

{{ range .Params -}}
func (p *{{.Command.InputParameterTypeName}}) Set{{.FieldName}}(v {{.FieldTypeName}}) {
	p.{{.FieldName}} = v
}

func (p *{{.Command.InputParameterTypeName}}) Get{{.FieldName}}() {{.FieldTypeName}} {
	return p.{{.FieldName}}
}
{{ end }}

// Changed usacloud v0系との互換性維持のための実装
func (p *{{.InputParameterTypeName}}) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *{{.InputParameterTypeName }}) ToV0() *v0params.{{.InputParameterTypeName}} {
	return &v0params.{{.InputParameterTypeName}}{
{{ range .Params -}}
		{{.FieldName}}: p.{{.FieldName}},
{{ end }}
	}
}
{{ end }}
`

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"text/template"

	"github.com/sacloud/usacloud/tools"
)

var (
	destination = "src/github.com/sacloud/usacloud/cmdv2/commands"
	ctx         = tools.NewGenerateContext()
)

// Usage is a replacement usage function for the flags package.
func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of %s:\n", os.Args[0])
	fmt.Fprint(os.Stderr, "\tgen-cli-v2-commands\n")
	os.Exit(2)
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("gen-cli-v2-commands: ")

	for _, resource := range ctx.Resources {
		filePath := filepath.Join(destination, resource.CLISourceFileName())
		fileFullPath := filepath.Join(ctx.Gopath(), filePath)

		src, err := generateSource(resource)
		if err != nil {
			log.Fatalf("writing output: %s", err)
		}

		err = ioutil.WriteFile(fileFullPath, tools.Sformat([]byte(src)), 0644)
		if err != nil {
			log.Fatalf("writing output: %s", err)
		}
		fmt.Printf("generated: %s\n", filePath)
	}
}

func generateSource(resource *tools.Resource) (string, error) {
	buf := bytes.NewBufferString("")
	t := template.New("t")
	template.Must(t.Parse(srcTemplate))
	err := t.Execute(buf, resource)
	return buf.String(), err
}

var srcTemplate = `// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/spf13/cobra"
)

var (
{{ range .Commands -}}
	{{ .InputParameterVariable }} = params.New{{ .InputParameterTypeName }}()
{{ end }}
)

// {{ .CLIVariableName }} represents the command to manage SAKURAÂ Cloud {{ .Name }}
var {{ .CLIVariableName }} = &cobra.Command{
	Use:   "{{ .CLIName }}",
	Short: "{{ .Usage }}",
	Long: ` + "`{{.Usage}}`" + `,
	Run: func(cmd *cobra.Command, args []string) {
		{{ if .DefaultCommand }}// TODO not implements: call {{.DefaultCommand}} func as default{{ else }}cmd.HelpFunc()(cmd,args){{ end }}
	},
}

{{ range .Commands -}}
var {{ .CLIVariableName }} = &cobra.Command{
	Use:   "{{ .Name }}",
	{{ if .Aliases }}Aliases: []string{ {{ .AliasesLiteral }} },{{ end }}
	Short: "{{ .Usage }}",
	Long: ` + "`{{ .Usage }}`" + `,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := {{ .InputParameterVariable }}.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("{{.Name}} parameter: \n%s\n", debugMarshalIndent({{.InputParameterVariable}}))
		return err
	},
}

func {{ .CLIVariableName }}Init() {
{{ if .Params -}}
	fs := {{ .CLIVariableName }}.Flags()
{{ range .Params -}}
	fs.{{ .FlagDefinitionStatement }}
{{ end -}}
{{ end -}}
}
{{ end }}

func init() {
	parent := {{ .CLIVariableName }}
{{ range .Commands }}
	{{ .CLIVariableName }}Init()
	parent.AddCommand({{ .CLIVariableName }})
{{ end }}
	rootCmd.AddCommand(parent)
}

`

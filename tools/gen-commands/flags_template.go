// Copyright 2017-2022 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

var flagsTemplate = `// Code generated by 'github.com/sacloud/usacloud/tools/gen-commands'; DO NOT EDIT

package {{ .PackageName }}

import (
	"github.com/sacloud/iaas-api-go/types"
	"github.com/sacloud/usacloud/pkg/core"
	"github.com/sacloud/usacloud/pkg/util"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
)

func (p *{{.CLICommandParameterTypeName}}) CleanupEmptyValue(fs *pflag.FlagSet) {
	{{ .CLIFlagCleanupEmptyStatement "p" "fs" }} 
}

func (p *{{.CLICommandParameterTypeName}}) buildFlags(fs *pflag.FlagSet) {
	{{ .CLIFlagInitializePointerStatement "p" "fs" }}
	{{ .CLIFlagDefinitionStatements "p" "fs" }} 
	fs.SetNormalizeFunc(p.normalizeFlagName)
}

func (p *{{.CLICommandParameterTypeName}}) normalizeFlagName(_ *pflag.FlagSet, name string) pflag.NormalizedName {
{{ if .HasAliases -}}
	switch name {
{{ range .Fields }}{{ $name := .FlagName }}{{ range .Aliases -}}
	case "{{.}}":
		name = "{{ $name }}"
{{ end }}{{ end -}}
	}
{{ end -}}
	return pflag.NormalizedName(name)
}

func (p *{{.CLICommandParameterTypeName}}) buildFlagsUsage(cmd *cobra.Command) {
	var sets []*core.FlagSet
	{{ range .CategorizedParameterFields -}}
	{
		var fs *pflag.FlagSet
		fs = pflag.NewFlagSet("{{.Key}}", pflag.ContinueOnError)
		fs.SortFlags = false
		{{ range .Fields -}}
		fs.AddFlag(cmd.LocalFlags().Lookup("{{ .FlagName }}"))
		{{ end -}}
		sets = append(sets, &core.FlagSet{
			Title: "{{.DisplayName}}",
			Flags: fs,
		})
	}
	{{ end }}
	core.BuildFlagsUsage(cmd, sets)
}

func (p *{{.CLICommandParameterTypeName}}) setCompletionFunc(cmd *cobra.Command) {
	{{ range .Fields -}}
	{{ if .Options -}}
	cmd.RegisterFlagCompletionFunc("{{ .FlagName }}", util.FlagCompletionFunc({{ range .Options }}"{{ . }}",{{ end }}))
	{{ end -}}
	{{ end }}
}

func (p *{{.CLICommandParameterTypeName}}) SetupCobraCommandFlags(cmd *cobra.Command) {
	p.buildFlags(cmd.Flags())
	p.buildFlagsUsage(cmd)
	p.setCompletionFunc(cmd)
}
`

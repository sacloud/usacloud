// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-commands'; DO NOT EDIT

package cmd

import (
	"errors"
	"sync"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/pkg/cli"
	"github.com/sacloud/usacloud/pkg/funcs"
	"github.com/sacloud/usacloud/pkg/params"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/spf13/cobra"
)

// internetCmd represents the command to manage SAKURA Cloud Internet
func internetCmd() *cobra.Command {
	return &cobra.Command{
		Use: "internet",

		Short: "A manage commands of Internet",
		Long:  `A manage commands of Internet`,
		RunE: func(cmd *cobra.Command, args []string) error {
			cmd.HelpFunc()(cmd, args)
			return nil
		},
	}
}

func internetListCmd() *cobra.Command {
	internetListParam := params.NewListInternetParam()
	cmd := &cobra.Command{
		Use:          "list",
		Aliases:      []string{"ls", "find", "select"},
		Short:        "List Internet",
		Long:         `List Internet`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return internetListParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext(globalFlags(), args, internetListParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if internetListParam.GenerateSkeleton {
				return generateSkeleton(ctx, internetListParam)
			}

			return funcs.InternetList(ctx, internetListParam)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&internetListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &internetListParam.Id), "id", "", "set filter by id(s)")
	fs.StringSliceVarP(&internetListParam.Tags, "tags", "", []string{}, "set filter by tags(AND) (aliases: selector)")
	fs.IntVarP(&internetListParam.From, "from", "", 0, "set offset (aliases: offset)")
	fs.IntVarP(&internetListParam.Max, "max", "", 0, "set limit (aliases: limit)")
	fs.StringSliceVarP(&internetListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringVarP(&internetListParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&internetListParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&internetListParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&internetListParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&internetListParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&internetListParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&internetListParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&internetListParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&internetListParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&internetListParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&internetListParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&internetListParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.SetNormalizeFunc(internetListNormalizeFlagNames)
	buildFlagsUsage(cmd, internetListFlagOrder(cmd))
	return cmd
}

func internetCreateCmd() *cobra.Command {
	internetCreateParam := params.NewCreateInternetParam()
	cmd := &cobra.Command{
		Use: "create",

		Short:        "Create Internet",
		Long:         `Create Internet`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return internetCreateParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext(globalFlags(), args, internetCreateParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if internetCreateParam.GenerateSkeleton {
				return generateSkeleton(ctx, internetCreateParam)
			}

			// confirm
			if !internetCreateParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("create", ctx.IO().In(), ctx.IO().Out())
				if err != nil || !result {
					return err
				}
			}

			return funcs.InternetCreate(ctx, internetCreateParam)

		},
	}

	fs := cmd.Flags()
	fs.IntVarP(&internetCreateParam.NwMasklen, "nw-masklen", "", 28, "set Global-IPAddress prefix (aliases: network-masklen)")
	fs.IntVarP(&internetCreateParam.BandWidth, "band-width", "", 100, "set band-width(Mbpm)")
	fs.StringVarP(&internetCreateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&internetCreateParam.Description, "description", "", "", "set resource description (aliases: desc)")
	fs.StringSliceVarP(&internetCreateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &internetCreateParam.IconId), "icon-id", "", "set Icon ID")
	fs.BoolVarP(&internetCreateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&internetCreateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&internetCreateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&internetCreateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&internetCreateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&internetCreateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&internetCreateParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&internetCreateParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&internetCreateParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&internetCreateParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&internetCreateParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&internetCreateParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&internetCreateParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.SetNormalizeFunc(internetCreateNormalizeFlagNames)
	buildFlagsUsage(cmd, internetCreateFlagOrder(cmd))
	return cmd
}

func internetReadCmd() *cobra.Command {
	internetReadParam := params.NewReadInternetParam()
	cmd := &cobra.Command{
		Use: "read",

		Short:        "Read Internet",
		Long:         `Read Internet`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return internetReadParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext(globalFlags(), args, internetReadParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if internetReadParam.GenerateSkeleton {
				return generateSkeleton(ctx, internetReadParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findInternetReadTargets(ctx, internetReadParam)
			if err != nil {
				return err
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				internetReadParam.SetId(id)
				go func(p *params.ReadInternetParam) {
					err := funcs.InternetRead(ctx, p)
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(internetReadParam)
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&internetReadParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&internetReadParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&internetReadParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&internetReadParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&internetReadParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&internetReadParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&internetReadParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&internetReadParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&internetReadParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&internetReadParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&internetReadParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&internetReadParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&internetReadParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &internetReadParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(internetReadNormalizeFlagNames)
	buildFlagsUsage(cmd, internetReadFlagOrder(cmd))
	return cmd
}

func internetUpdateCmd() *cobra.Command {
	internetUpdateParam := params.NewUpdateInternetParam()
	cmd := &cobra.Command{
		Use: "update",

		Short:        "Update Internet",
		Long:         `Update Internet`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return internetUpdateParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext(globalFlags(), args, internetUpdateParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if internetUpdateParam.GenerateSkeleton {
				return generateSkeleton(ctx, internetUpdateParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findInternetUpdateTargets(ctx, internetUpdateParam)
			if err != nil {
				return err
			}

			// confirm
			if !internetUpdateParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("update", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				internetUpdateParam.SetId(id)
				go func(p *params.UpdateInternetParam) {
					err := funcs.InternetUpdate(ctx, p)
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(internetUpdateParam)
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.IntVarP(&internetUpdateParam.BandWidth, "band-width", "", 0, "set band-width(Mbpm)")
	fs.StringSliceVarP(&internetUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&internetUpdateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&internetUpdateParam.Description, "description", "", "", "set resource description (aliases: desc)")
	fs.StringSliceVarP(&internetUpdateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &internetUpdateParam.IconId), "icon-id", "", "set Icon ID")
	fs.BoolVarP(&internetUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&internetUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&internetUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&internetUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&internetUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&internetUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&internetUpdateParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&internetUpdateParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&internetUpdateParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&internetUpdateParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&internetUpdateParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&internetUpdateParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&internetUpdateParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &internetUpdateParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(internetUpdateNormalizeFlagNames)
	buildFlagsUsage(cmd, internetUpdateFlagOrder(cmd))
	return cmd
}

func internetDeleteCmd() *cobra.Command {
	internetDeleteParam := params.NewDeleteInternetParam()
	cmd := &cobra.Command{
		Use:          "delete",
		Aliases:      []string{"rm"},
		Short:        "Delete Internet",
		Long:         `Delete Internet`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return internetDeleteParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext(globalFlags(), args, internetDeleteParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if internetDeleteParam.GenerateSkeleton {
				return generateSkeleton(ctx, internetDeleteParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findInternetDeleteTargets(ctx, internetDeleteParam)
			if err != nil {
				return err
			}

			// confirm
			if !internetDeleteParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("delete", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				internetDeleteParam.SetId(id)
				go func(p *params.DeleteInternetParam) {
					err := funcs.InternetDelete(ctx, p)
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(internetDeleteParam)
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&internetDeleteParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&internetDeleteParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&internetDeleteParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&internetDeleteParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&internetDeleteParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&internetDeleteParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&internetDeleteParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&internetDeleteParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&internetDeleteParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&internetDeleteParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&internetDeleteParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&internetDeleteParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&internetDeleteParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&internetDeleteParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &internetDeleteParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(internetDeleteNormalizeFlagNames)
	buildFlagsUsage(cmd, internetDeleteFlagOrder(cmd))
	return cmd
}

func internetUpdateBandwidthCmd() *cobra.Command {
	internetUpdateBandwidthParam := params.NewUpdateBandwidthInternetParam()
	cmd := &cobra.Command{
		Use: "update-bandwidth",

		Short:        "UpdateBandwidth Internet",
		Long:         `UpdateBandwidth Internet`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return internetUpdateBandwidthParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext(globalFlags(), args, internetUpdateBandwidthParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if internetUpdateBandwidthParam.GenerateSkeleton {
				return generateSkeleton(ctx, internetUpdateBandwidthParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findInternetUpdateBandwidthTargets(ctx, internetUpdateBandwidthParam)
			if err != nil {
				return err
			}

			// confirm
			if !internetUpdateBandwidthParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("update-bandwidth", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				internetUpdateBandwidthParam.SetId(id)
				go func(p *params.UpdateBandwidthInternetParam) {
					err := funcs.InternetUpdateBandwidth(ctx, p)
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(internetUpdateBandwidthParam)
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.IntVarP(&internetUpdateBandwidthParam.BandWidth, "band-width", "", 100, "set band-width(Mbpm)")
	fs.StringSliceVarP(&internetUpdateBandwidthParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&internetUpdateBandwidthParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&internetUpdateBandwidthParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&internetUpdateBandwidthParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&internetUpdateBandwidthParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&internetUpdateBandwidthParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&internetUpdateBandwidthParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&internetUpdateBandwidthParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&internetUpdateBandwidthParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&internetUpdateBandwidthParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&internetUpdateBandwidthParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&internetUpdateBandwidthParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&internetUpdateBandwidthParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&internetUpdateBandwidthParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &internetUpdateBandwidthParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(internetUpdateBandwidthNormalizeFlagNames)
	buildFlagsUsage(cmd, internetUpdateBandwidthFlagOrder(cmd))
	return cmd
}

func internetSubnetInfoCmd() *cobra.Command {
	internetSubnetInfoParam := params.NewSubnetInfoInternetParam()
	cmd := &cobra.Command{
		Use: "subnet-info",

		Short:        "SubnetInfo Internet",
		Long:         `SubnetInfo Internet`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return internetSubnetInfoParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext(globalFlags(), args, internetSubnetInfoParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if internetSubnetInfoParam.GenerateSkeleton {
				return generateSkeleton(ctx, internetSubnetInfoParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findInternetSubnetInfoTargets(ctx, internetSubnetInfoParam)
			if err != nil {
				return err
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				internetSubnetInfoParam.SetId(id)
				go func(p *params.SubnetInfoInternetParam) {
					err := funcs.InternetSubnetInfo(ctx, p)
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(internetSubnetInfoParam)
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&internetSubnetInfoParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&internetSubnetInfoParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&internetSubnetInfoParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&internetSubnetInfoParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&internetSubnetInfoParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&internetSubnetInfoParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&internetSubnetInfoParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&internetSubnetInfoParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&internetSubnetInfoParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&internetSubnetInfoParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&internetSubnetInfoParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&internetSubnetInfoParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&internetSubnetInfoParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &internetSubnetInfoParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(internetSubnetInfoNormalizeFlagNames)
	buildFlagsUsage(cmd, internetSubnetInfoFlagOrder(cmd))
	return cmd
}

func internetSubnetAddCmd() *cobra.Command {
	internetSubnetAddParam := params.NewSubnetAddInternetParam()
	cmd := &cobra.Command{
		Use: "subnet-add",

		Short:        "SubnetAdd Internet",
		Long:         `SubnetAdd Internet`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return internetSubnetAddParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext(globalFlags(), args, internetSubnetAddParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if internetSubnetAddParam.GenerateSkeleton {
				return generateSkeleton(ctx, internetSubnetAddParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findInternetSubnetAddTargets(ctx, internetSubnetAddParam)
			if err != nil {
				return err
			}

			// confirm
			if !internetSubnetAddParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("subnet-add", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				internetSubnetAddParam.SetId(id)
				go func(p *params.SubnetAddInternetParam) {
					err := funcs.InternetSubnetAdd(ctx, p)
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(internetSubnetAddParam)
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringVarP(&internetSubnetAddParam.NextHop, "next-hop", "", "", "set NextHop IPAddress")
	fs.IntVarP(&internetSubnetAddParam.NwMasklen, "nw-masklen", "", 28, "set Global-IPAddress(subnet) prefix (aliases: network-masklen)")
	fs.StringSliceVarP(&internetSubnetAddParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&internetSubnetAddParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&internetSubnetAddParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&internetSubnetAddParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&internetSubnetAddParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&internetSubnetAddParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&internetSubnetAddParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&internetSubnetAddParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&internetSubnetAddParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&internetSubnetAddParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&internetSubnetAddParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&internetSubnetAddParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&internetSubnetAddParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&internetSubnetAddParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &internetSubnetAddParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(internetSubnetAddNormalizeFlagNames)
	buildFlagsUsage(cmd, internetSubnetAddFlagOrder(cmd))
	return cmd
}

func internetSubnetDeleteCmd() *cobra.Command {
	internetSubnetDeleteParam := params.NewSubnetDeleteInternetParam()
	cmd := &cobra.Command{
		Use: "subnet-delete",

		Short:        "SubnetDelete Internet",
		Long:         `SubnetDelete Internet`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return internetSubnetDeleteParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext(globalFlags(), args, internetSubnetDeleteParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if internetSubnetDeleteParam.GenerateSkeleton {
				return generateSkeleton(ctx, internetSubnetDeleteParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findInternetSubnetDeleteTargets(ctx, internetSubnetDeleteParam)
			if err != nil {
				return err
			}

			// confirm
			if !internetSubnetDeleteParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("subnet-delete", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				internetSubnetDeleteParam.SetId(id)
				go func(p *params.SubnetDeleteInternetParam) {
					err := funcs.InternetSubnetDelete(ctx, p)
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(internetSubnetDeleteParam)
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.VarP(newIDValue(0, &internetSubnetDeleteParam.SubnetId), "subnet-id", "", "set Target Subnet ID")
	fs.StringSliceVarP(&internetSubnetDeleteParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&internetSubnetDeleteParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&internetSubnetDeleteParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&internetSubnetDeleteParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&internetSubnetDeleteParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&internetSubnetDeleteParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&internetSubnetDeleteParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &internetSubnetDeleteParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(internetSubnetDeleteNormalizeFlagNames)
	buildFlagsUsage(cmd, internetSubnetDeleteFlagOrder(cmd))
	return cmd
}

func internetSubnetUpdateCmd() *cobra.Command {
	internetSubnetUpdateParam := params.NewSubnetUpdateInternetParam()
	cmd := &cobra.Command{
		Use: "subnet-update",

		Short:        "SubnetUpdate Internet",
		Long:         `SubnetUpdate Internet`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return internetSubnetUpdateParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext(globalFlags(), args, internetSubnetUpdateParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if internetSubnetUpdateParam.GenerateSkeleton {
				return generateSkeleton(ctx, internetSubnetUpdateParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findInternetSubnetUpdateTargets(ctx, internetSubnetUpdateParam)
			if err != nil {
				return err
			}

			// confirm
			if !internetSubnetUpdateParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("subnet-update", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				internetSubnetUpdateParam.SetId(id)
				go func(p *params.SubnetUpdateInternetParam) {
					err := funcs.InternetSubnetUpdate(ctx, p)
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(internetSubnetUpdateParam)
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringVarP(&internetSubnetUpdateParam.NextHop, "next-hop", "", "", "set NextHop IPAddress")
	fs.VarP(newIDValue(0, &internetSubnetUpdateParam.SubnetId), "subnet-id", "", "set Target Subnet ID")
	fs.StringSliceVarP(&internetSubnetUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&internetSubnetUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&internetSubnetUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&internetSubnetUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&internetSubnetUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&internetSubnetUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&internetSubnetUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&internetSubnetUpdateParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&internetSubnetUpdateParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&internetSubnetUpdateParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&internetSubnetUpdateParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&internetSubnetUpdateParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&internetSubnetUpdateParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&internetSubnetUpdateParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &internetSubnetUpdateParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(internetSubnetUpdateNormalizeFlagNames)
	buildFlagsUsage(cmd, internetSubnetUpdateFlagOrder(cmd))
	return cmd
}

func internetIPv6InfoCmd() *cobra.Command {
	internetIPv6InfoParam := params.NewIPv6InfoInternetParam()
	cmd := &cobra.Command{
		Use: "ipv6-info",

		Short:        "IPv6Info Internet",
		Long:         `IPv6Info Internet`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return internetIPv6InfoParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext(globalFlags(), args, internetIPv6InfoParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if internetIPv6InfoParam.GenerateSkeleton {
				return generateSkeleton(ctx, internetIPv6InfoParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findInternetIPv6InfoTargets(ctx, internetIPv6InfoParam)
			if err != nil {
				return err
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				internetIPv6InfoParam.SetId(id)
				go func(p *params.IPv6InfoInternetParam) {
					err := funcs.InternetIPv6Info(ctx, p)
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(internetIPv6InfoParam)
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&internetIPv6InfoParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&internetIPv6InfoParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&internetIPv6InfoParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&internetIPv6InfoParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&internetIPv6InfoParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&internetIPv6InfoParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&internetIPv6InfoParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&internetIPv6InfoParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&internetIPv6InfoParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&internetIPv6InfoParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&internetIPv6InfoParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&internetIPv6InfoParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&internetIPv6InfoParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &internetIPv6InfoParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(internetIPv6InfoNormalizeFlagNames)
	buildFlagsUsage(cmd, internetIPv6InfoFlagOrder(cmd))
	return cmd
}

func internetIPv6EnableCmd() *cobra.Command {
	internetIPv6EnableParam := params.NewIPv6EnableInternetParam()
	cmd := &cobra.Command{
		Use: "ipv6-enable",

		Short:        "IPv6Enable Internet",
		Long:         `IPv6Enable Internet`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return internetIPv6EnableParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext(globalFlags(), args, internetIPv6EnableParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if internetIPv6EnableParam.GenerateSkeleton {
				return generateSkeleton(ctx, internetIPv6EnableParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findInternetIPv6EnableTargets(ctx, internetIPv6EnableParam)
			if err != nil {
				return err
			}

			// confirm
			if !internetIPv6EnableParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("ipv6-enable", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				internetIPv6EnableParam.SetId(id)
				go func(p *params.IPv6EnableInternetParam) {
					err := funcs.InternetIPv6Enable(ctx, p)
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(internetIPv6EnableParam)
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&internetIPv6EnableParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&internetIPv6EnableParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&internetIPv6EnableParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&internetIPv6EnableParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&internetIPv6EnableParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&internetIPv6EnableParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&internetIPv6EnableParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&internetIPv6EnableParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&internetIPv6EnableParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&internetIPv6EnableParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&internetIPv6EnableParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&internetIPv6EnableParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&internetIPv6EnableParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&internetIPv6EnableParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &internetIPv6EnableParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(internetIPv6EnableNormalizeFlagNames)
	buildFlagsUsage(cmd, internetIPv6EnableFlagOrder(cmd))
	return cmd
}

func internetIPv6DisableCmd() *cobra.Command {
	internetIPv6DisableParam := params.NewIPv6DisableInternetParam()
	cmd := &cobra.Command{
		Use: "ipv6-disable",

		Short:        "IPv6Disable Internet",
		Long:         `IPv6Disable Internet`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return internetIPv6DisableParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext(globalFlags(), args, internetIPv6DisableParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if internetIPv6DisableParam.GenerateSkeleton {
				return generateSkeleton(ctx, internetIPv6DisableParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findInternetIPv6DisableTargets(ctx, internetIPv6DisableParam)
			if err != nil {
				return err
			}

			// confirm
			if !internetIPv6DisableParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("ipv6-disable", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				internetIPv6DisableParam.SetId(id)
				go func(p *params.IPv6DisableInternetParam) {
					err := funcs.InternetIPv6Disable(ctx, p)
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(internetIPv6DisableParam)
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&internetIPv6DisableParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&internetIPv6DisableParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&internetIPv6DisableParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&internetIPv6DisableParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&internetIPv6DisableParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&internetIPv6DisableParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&internetIPv6DisableParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &internetIPv6DisableParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(internetIPv6DisableNormalizeFlagNames)
	buildFlagsUsage(cmd, internetIPv6DisableFlagOrder(cmd))
	return cmd
}

func internetMonitorCmd() *cobra.Command {
	internetMonitorParam := params.NewMonitorInternetParam()
	cmd := &cobra.Command{
		Use: "monitor",

		Short:        "Monitor Internet",
		Long:         `Monitor Internet`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return internetMonitorParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext(globalFlags(), args, internetMonitorParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if internetMonitorParam.GenerateSkeleton {
				return generateSkeleton(ctx, internetMonitorParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findInternetMonitorTargets(ctx, internetMonitorParam)
			if err != nil {
				return err
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				internetMonitorParam.SetId(id)
				go func(p *params.MonitorInternetParam) {
					err := funcs.InternetMonitor(ctx, p)
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(internetMonitorParam)
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringVarP(&internetMonitorParam.Start, "start", "", "", "set start-time")
	fs.StringVarP(&internetMonitorParam.End, "end", "", "", "set end-time")
	fs.StringVarP(&internetMonitorParam.KeyFormat, "key-format", "", "sakuracloud.internet.{{.ID}}.nic", "set monitoring value key-format")
	fs.StringSliceVarP(&internetMonitorParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&internetMonitorParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&internetMonitorParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&internetMonitorParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&internetMonitorParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&internetMonitorParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&internetMonitorParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&internetMonitorParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&internetMonitorParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&internetMonitorParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&internetMonitorParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&internetMonitorParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&internetMonitorParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &internetMonitorParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(internetMonitorNormalizeFlagNames)
	buildFlagsUsage(cmd, internetMonitorFlagOrder(cmd))
	return cmd
}

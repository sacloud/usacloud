// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-commands'; DO NOT EDIT

package cmd

import (
	"errors"
	"sync"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/pkg/cli"
	"github.com/sacloud/usacloud/pkg/funcs"
	"github.com/sacloud/usacloud/pkg/params"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/spf13/cobra"
)

// simpleMonitorCmd represents the command to manage SAKURAÂ Cloud SimpleMonitor
func simpleMonitorCmd() *cobra.Command {
	return &cobra.Command{
		Use: "simple-monitor",

		Short: "A manage commands of SimpleMonitor",
		Long:  `A manage commands of SimpleMonitor`,
		RunE: func(cmd *cobra.Command, args []string) error {
			cmd.HelpFunc()(cmd, args)
			return nil
		},
	}
}

func simpleMonitorListCmd() *cobra.Command {
	simpleMonitorListParam := params.NewListSimpleMonitorParam()
	cmd := &cobra.Command{
		Use:          "list",
		Aliases:      []string{"ls", "find", "select"},
		Short:        "List SimpleMonitor",
		Long:         `List SimpleMonitor`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return simpleMonitorListParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext(globalFlags(), args, simpleMonitorListParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if simpleMonitorListParam.GenerateSkeleton {
				return generateSkeleton(ctx, simpleMonitorListParam)
			}

			return funcs.SimpleMonitorList(ctx, simpleMonitorListParam)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&simpleMonitorListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &simpleMonitorListParam.Id), "id", "", "set filter by id(s)")
	fs.StringSliceVarP(&simpleMonitorListParam.Tags, "tags", "", []string{}, "set filter by tags(AND) (aliases: selector)")
	fs.StringVarP(&simpleMonitorListParam.Health, "health", "", "", "set filter by HealthCheck Status('up' or 'down' or 'unknown')")
	fs.IntVarP(&simpleMonitorListParam.From, "from", "", 0, "set offset (aliases: offset)")
	fs.IntVarP(&simpleMonitorListParam.Max, "max", "", 0, "set limit (aliases: limit)")
	fs.StringSliceVarP(&simpleMonitorListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringVarP(&simpleMonitorListParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&simpleMonitorListParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&simpleMonitorListParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&simpleMonitorListParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&simpleMonitorListParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&simpleMonitorListParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&simpleMonitorListParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&simpleMonitorListParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&simpleMonitorListParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&simpleMonitorListParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&simpleMonitorListParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&simpleMonitorListParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.SetNormalizeFunc(simpleMonitorListNormalizeFlagNames)
	buildFlagsUsage(cmd, simpleMonitorListFlagOrder(cmd))
	return cmd
}

func simpleMonitorCreateCmd() *cobra.Command {
	simpleMonitorCreateParam := params.NewCreateSimpleMonitorParam()
	cmd := &cobra.Command{
		Use: "create",

		Short:        "Create SimpleMonitor",
		Long:         `Create SimpleMonitor`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return simpleMonitorCreateParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext(globalFlags(), args, simpleMonitorCreateParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if simpleMonitorCreateParam.GenerateSkeleton {
				return generateSkeleton(ctx, simpleMonitorCreateParam)
			}

			// confirm
			if !simpleMonitorCreateParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("create", ctx.IO().In(), ctx.IO().Out())
				if err != nil || !result {
					return err
				}
			}

			return funcs.SimpleMonitorCreate(ctx, simpleMonitorCreateParam)

		},
	}

	fs := cmd.Flags()
	fs.StringVarP(&simpleMonitorCreateParam.Target, "target", "", "", "set monitoring target IP or Hostname")
	fs.StringVarP(&simpleMonitorCreateParam.Protocol, "protocol", "", "ping", "set monitoring protocol[http/https/ping/tcp/dns/ssh/smtp/pop3/ssl-certificate]")
	fs.IntVarP(&simpleMonitorCreateParam.Port, "port", "", 0, "set port of tcp monitoring")
	fs.IntVarP(&simpleMonitorCreateParam.DelayLoop, "delay-loop", "", 1, "set delay-loop of monitoring(minute)")
	fs.BoolVarP(&simpleMonitorCreateParam.Disabled, "disabled", "", false, "set monitoring disable")
	fs.StringVarP(&simpleMonitorCreateParam.HostHeader, "host-header", "", "", "set host header of http/https monitoring request")
	fs.StringVarP(&simpleMonitorCreateParam.Path, "path", "", "", "set path of http/https monitoring request")
	fs.IntVarP(&simpleMonitorCreateParam.ResponseCode, "response-code", "", 0, "set response-code of http/https monitoring request")
	fs.BoolVarP(&simpleMonitorCreateParam.Sni, "sni", "", false, "enable SNI support for https monitoring")
	fs.StringVarP(&simpleMonitorCreateParam.Username, "username", "", "", "set Basic Auth user name (aliases: user)")
	fs.StringVarP(&simpleMonitorCreateParam.Password, "password", "", "", "set Basic Auth password (aliases: pass)")
	fs.StringVarP(&simpleMonitorCreateParam.DNSQname, "dns-qname", "", "", "set DNS query target name")
	fs.StringVarP(&simpleMonitorCreateParam.DNSExcepted, "dns-excepted", "", "", "set DNS query excepted value")
	fs.IntVarP(&simpleMonitorCreateParam.RemainingDays, "remaining-days", "", 30, "set SSL-Certificate remaining days")
	fs.BoolVarP(&simpleMonitorCreateParam.NotifyEmail, "notify-email", "", true, "enable e-mail notification")
	fs.StringVarP(&simpleMonitorCreateParam.EmailType, "email-type", "", "text", "set e-mail type")
	fs.StringVarP(&simpleMonitorCreateParam.SlackWebhook, "slack-webhook", "", "", "set slack-webhook URL")
	fs.IntVarP(&simpleMonitorCreateParam.NotifyInterval, "notify-interval", "", 2, "set notify-interval(hours)")
	fs.StringVarP(&simpleMonitorCreateParam.Description, "description", "", "", "set resource description (aliases: desc)")
	fs.StringSliceVarP(&simpleMonitorCreateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &simpleMonitorCreateParam.IconId), "icon-id", "", "set Icon ID")
	fs.BoolVarP(&simpleMonitorCreateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&simpleMonitorCreateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&simpleMonitorCreateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&simpleMonitorCreateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&simpleMonitorCreateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&simpleMonitorCreateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&simpleMonitorCreateParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&simpleMonitorCreateParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&simpleMonitorCreateParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&simpleMonitorCreateParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&simpleMonitorCreateParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&simpleMonitorCreateParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&simpleMonitorCreateParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.SetNormalizeFunc(simpleMonitorCreateNormalizeFlagNames)
	buildFlagsUsage(cmd, simpleMonitorCreateFlagOrder(cmd))
	return cmd
}

func simpleMonitorReadCmd() *cobra.Command {
	simpleMonitorReadParam := params.NewReadSimpleMonitorParam()
	cmd := &cobra.Command{
		Use: "read",

		Short:        "Read SimpleMonitor",
		Long:         `Read SimpleMonitor`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return simpleMonitorReadParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext(globalFlags(), args, simpleMonitorReadParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if simpleMonitorReadParam.GenerateSkeleton {
				return generateSkeleton(ctx, simpleMonitorReadParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findSimpleMonitorReadTargets(ctx, simpleMonitorReadParam)
			if err != nil {
				return err
			}

			// TODO v1ã§ç½®ãæããã¾ã§ã®æ«å®å®è£
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				simpleMonitorReadParam.SetId(id)
				go func(p *params.ReadSimpleMonitorParam) {
					err := funcs.SimpleMonitorRead(ctx, p)
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(simpleMonitorReadParam)
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&simpleMonitorReadParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&simpleMonitorReadParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&simpleMonitorReadParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&simpleMonitorReadParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&simpleMonitorReadParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&simpleMonitorReadParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&simpleMonitorReadParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&simpleMonitorReadParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&simpleMonitorReadParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&simpleMonitorReadParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&simpleMonitorReadParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&simpleMonitorReadParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&simpleMonitorReadParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &simpleMonitorReadParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(simpleMonitorReadNormalizeFlagNames)
	buildFlagsUsage(cmd, simpleMonitorReadFlagOrder(cmd))
	return cmd
}

func simpleMonitorUpdateCmd() *cobra.Command {
	simpleMonitorUpdateParam := params.NewUpdateSimpleMonitorParam()
	cmd := &cobra.Command{
		Use: "update",

		Short:        "Update SimpleMonitor",
		Long:         `Update SimpleMonitor`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return simpleMonitorUpdateParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext(globalFlags(), args, simpleMonitorUpdateParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if simpleMonitorUpdateParam.GenerateSkeleton {
				return generateSkeleton(ctx, simpleMonitorUpdateParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findSimpleMonitorUpdateTargets(ctx, simpleMonitorUpdateParam)
			if err != nil {
				return err
			}

			// confirm
			if !simpleMonitorUpdateParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("update", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1ã§ç½®ãæããã¾ã§ã®æ«å®å®è£
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				simpleMonitorUpdateParam.SetId(id)
				go func(p *params.UpdateSimpleMonitorParam) {
					err := funcs.SimpleMonitorUpdate(ctx, p)
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(simpleMonitorUpdateParam)
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringVarP(&simpleMonitorUpdateParam.Protocol, "protocol", "", "", "set monitoring protocol[http/https/ping/tcp/dns/ssh/smtp/pop3/ssl-certificate]")
	fs.IntVarP(&simpleMonitorUpdateParam.Port, "port", "", 0, "set port of tcp monitoring")
	fs.IntVarP(&simpleMonitorUpdateParam.DelayLoop, "delay-loop", "", 0, "set delay-loop of monitoring(minute)")
	fs.BoolVarP(&simpleMonitorUpdateParam.Disabled, "disabled", "", false, "set monitoring enable/disable")
	fs.StringVarP(&simpleMonitorUpdateParam.HostHeader, "host-header", "", "", "set host header of http/https monitoring request")
	fs.StringVarP(&simpleMonitorUpdateParam.Path, "path", "", "", "set path of http/https monitoring request")
	fs.IntVarP(&simpleMonitorUpdateParam.ResponseCode, "response-code", "", 0, "set response-code of http/https monitoring request")
	fs.BoolVarP(&simpleMonitorUpdateParam.Sni, "sni", "", false, "enable SNI support for https monitoring")
	fs.StringVarP(&simpleMonitorUpdateParam.Username, "username", "", "", "set Basic Auth user name (aliases: user)")
	fs.StringVarP(&simpleMonitorUpdateParam.Password, "password", "", "", "set Basic Auth password (aliases: pass)")
	fs.StringVarP(&simpleMonitorUpdateParam.DNSQname, "dns-qname", "", "", "set DNS query target name")
	fs.StringVarP(&simpleMonitorUpdateParam.DNSExcepted, "dns-excepted", "", "", "set DNS query excepted value")
	fs.IntVarP(&simpleMonitorUpdateParam.RemainingDays, "remaining-days", "", 0, "set SSL-Certificate remaining days")
	fs.BoolVarP(&simpleMonitorUpdateParam.NotifyEmail, "notify-email", "", false, "enable e-mail notification")
	fs.StringVarP(&simpleMonitorUpdateParam.EmailType, "email-type", "", "", "set e-mail type")
	fs.StringVarP(&simpleMonitorUpdateParam.SlackWebhook, "slack-webhook", "", "", "set slack-webhook URL")
	fs.IntVarP(&simpleMonitorUpdateParam.NotifyInterval, "notify-interval", "", 2, "set notify-interval(hours)")
	fs.StringSliceVarP(&simpleMonitorUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&simpleMonitorUpdateParam.Description, "description", "", "", "set resource description (aliases: desc)")
	fs.StringSliceVarP(&simpleMonitorUpdateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &simpleMonitorUpdateParam.IconId), "icon-id", "", "set Icon ID")
	fs.BoolVarP(&simpleMonitorUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&simpleMonitorUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&simpleMonitorUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&simpleMonitorUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&simpleMonitorUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&simpleMonitorUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&simpleMonitorUpdateParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&simpleMonitorUpdateParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&simpleMonitorUpdateParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&simpleMonitorUpdateParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&simpleMonitorUpdateParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&simpleMonitorUpdateParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&simpleMonitorUpdateParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &simpleMonitorUpdateParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(simpleMonitorUpdateNormalizeFlagNames)
	buildFlagsUsage(cmd, simpleMonitorUpdateFlagOrder(cmd))
	return cmd
}

func simpleMonitorDeleteCmd() *cobra.Command {
	simpleMonitorDeleteParam := params.NewDeleteSimpleMonitorParam()
	cmd := &cobra.Command{
		Use:          "delete",
		Aliases:      []string{"rm"},
		Short:        "Delete SimpleMonitor",
		Long:         `Delete SimpleMonitor`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return simpleMonitorDeleteParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext(globalFlags(), args, simpleMonitorDeleteParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if simpleMonitorDeleteParam.GenerateSkeleton {
				return generateSkeleton(ctx, simpleMonitorDeleteParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findSimpleMonitorDeleteTargets(ctx, simpleMonitorDeleteParam)
			if err != nil {
				return err
			}

			// confirm
			if !simpleMonitorDeleteParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("delete", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1ã§ç½®ãæããã¾ã§ã®æ«å®å®è£
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				simpleMonitorDeleteParam.SetId(id)
				go func(p *params.DeleteSimpleMonitorParam) {
					err := funcs.SimpleMonitorDelete(ctx, p)
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(simpleMonitorDeleteParam)
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&simpleMonitorDeleteParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&simpleMonitorDeleteParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&simpleMonitorDeleteParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&simpleMonitorDeleteParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&simpleMonitorDeleteParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&simpleMonitorDeleteParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&simpleMonitorDeleteParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&simpleMonitorDeleteParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&simpleMonitorDeleteParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&simpleMonitorDeleteParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&simpleMonitorDeleteParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&simpleMonitorDeleteParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&simpleMonitorDeleteParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&simpleMonitorDeleteParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &simpleMonitorDeleteParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(simpleMonitorDeleteNormalizeFlagNames)
	buildFlagsUsage(cmd, simpleMonitorDeleteFlagOrder(cmd))
	return cmd
}

func simpleMonitorHealthCmd() *cobra.Command {
	simpleMonitorHealthParam := params.NewHealthSimpleMonitorParam()
	cmd := &cobra.Command{
		Use: "health",

		Short:        "Health SimpleMonitor",
		Long:         `Health SimpleMonitor`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return simpleMonitorHealthParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := cli.NewCLIContext(globalFlags(), args, simpleMonitorHealthParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if simpleMonitorHealthParam.GenerateSkeleton {
				return generateSkeleton(ctx, simpleMonitorHealthParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findSimpleMonitorHealthTargets(ctx, simpleMonitorHealthParam)
			if err != nil {
				return err
			}

			// TODO v1ã§ç½®ãæããã¾ã§ã®æ«å®å®è£
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				simpleMonitorHealthParam.SetId(id)
				go func(p *params.HealthSimpleMonitorParam) {
					err := funcs.SimpleMonitorHealth(ctx, p)
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(simpleMonitorHealthParam)
			}
			wg.Wait()
			return cli.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&simpleMonitorHealthParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&simpleMonitorHealthParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&simpleMonitorHealthParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&simpleMonitorHealthParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&simpleMonitorHealthParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&simpleMonitorHealthParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&simpleMonitorHealthParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv] (aliases: out)")
	fs.StringSliceVarP(&simpleMonitorHealthParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only) (aliases: col)")
	fs.BoolVarP(&simpleMonitorHealthParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&simpleMonitorHealthParam.Format, "format", "", "", "Output format(see text/template package document for detail) (aliases: fmt)")
	fs.StringVarP(&simpleMonitorHealthParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&simpleMonitorHealthParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&simpleMonitorHealthParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &simpleMonitorHealthParam.Id), "id", "", "Set target ID")
	fs.SetNormalizeFunc(simpleMonitorHealthNormalizeFlagNames)
	buildFlagsUsage(cmd, simpleMonitorHealthFlagOrder(cmd))
	return cmd
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-params'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/pkg/define"
	"github.com/sacloud/usacloud/pkg/output"
	"github.com/sacloud/usacloud/pkg/schema"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
)

// ListStartupScriptParam is input parameters for the sacloud API
type ListStartupScriptParam struct {
	Name              []string
	Id                []sacloud.ID
	Scope             string
	Tags              []string
	Class             []string
	From              int
	Max               int
	Sort              []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string

	input Input
}

// NewListStartupScriptParam return new ListStartupScriptParam
func NewListStartupScriptParam() *ListStartupScriptParam {
	return &ListStartupScriptParam{}
}

// Initialize init ListStartupScriptParam
func (p *ListStartupScriptParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListStartupScriptParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ListStartupScriptParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Scope) {
		p.Scope = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Class) {
		p.Class = []string{""}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListStartupScriptParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["StartupScript"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["StartupScript"].Commands["list"].Params["scope"].ValidateFunc
		errs := validator("--scope", p.Scope)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["StartupScript"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ListStartupScriptParam) ResourceDef() *schema.Resource {
	return define.Resources["StartupScript"]
}

func (p *ListStartupScriptParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListStartupScriptParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListStartupScriptParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListStartupScriptParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListStartupScriptParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ListStartupScriptParam) GetResourceDef() *schema.Resource {
	return define.Resources["StartupScript"]
}

func (p *ListStartupScriptParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListStartupScriptParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListStartupScriptParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListStartupScriptParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListStartupScriptParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListStartupScriptParam) SetName(v []string) {
	p.Name = v
}

func (p *ListStartupScriptParam) GetName() []string {
	return p.Name
}
func (p *ListStartupScriptParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListStartupScriptParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListStartupScriptParam) SetScope(v string) {
	p.Scope = v
}

func (p *ListStartupScriptParam) GetScope() string {
	return p.Scope
}
func (p *ListStartupScriptParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListStartupScriptParam) GetTags() []string {
	return p.Tags
}
func (p *ListStartupScriptParam) SetClass(v []string) {
	p.Class = v
}

func (p *ListStartupScriptParam) GetClass() []string {
	return p.Class
}
func (p *ListStartupScriptParam) SetFrom(v int) {
	p.From = v
}

func (p *ListStartupScriptParam) GetFrom() int {
	return p.From
}
func (p *ListStartupScriptParam) SetMax(v int) {
	p.Max = v
}

func (p *ListStartupScriptParam) GetMax() int {
	return p.Max
}
func (p *ListStartupScriptParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListStartupScriptParam) GetSort() []string {
	return p.Sort
}
func (p *ListStartupScriptParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListStartupScriptParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListStartupScriptParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListStartupScriptParam) GetParameters() string {
	return p.Parameters
}
func (p *ListStartupScriptParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListStartupScriptParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListStartupScriptParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListStartupScriptParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListStartupScriptParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListStartupScriptParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListStartupScriptParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListStartupScriptParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListStartupScriptParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListStartupScriptParam) GetColumn() []string {
	return p.Column
}
func (p *ListStartupScriptParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListStartupScriptParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListStartupScriptParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListStartupScriptParam) GetFormat() string {
	return p.Format
}
func (p *ListStartupScriptParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListStartupScriptParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListStartupScriptParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListStartupScriptParam) GetQuery() string {
	return p.Query
}
func (p *ListStartupScriptParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListStartupScriptParam) GetQueryFile() string {
	return p.QueryFile
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ListStartupScriptParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// CreateStartupScriptParam is input parameters for the sacloud API
type CreateStartupScriptParam struct {
	Script            string
	ScriptContent     string
	Class             string
	Name              string
	Tags              []string
	IconId            sacloud.ID
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string

	input Input
}

// NewCreateStartupScriptParam return new CreateStartupScriptParam
func NewCreateStartupScriptParam() *CreateStartupScriptParam {
	return &CreateStartupScriptParam{
		Class: "shell"}
}

// Initialize init CreateStartupScriptParam
func (p *CreateStartupScriptParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateStartupScriptParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *CreateStartupScriptParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Script) {
		p.Script = ""
	}
	if utils.IsEmpty(p.ScriptContent) {
		p.ScriptContent = ""
	}
	if utils.IsEmpty(p.Class) {
		p.Class = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *CreateStartupScriptParam) validate() error {
	var errors []error

	{
		validator := define.Resources["StartupScript"].Commands["create"].Params["script"].ValidateFunc
		errs := validator("--script", p.Script)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--script-content", p.ScriptContent, map[string]interface{}{

			"--script": p.Script,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--class", p.Class)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["StartupScript"].Commands["create"].Params["class"].ValidateFunc
		errs := validator("--class", p.Class)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["StartupScript"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["StartupScript"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["StartupScript"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *CreateStartupScriptParam) ResourceDef() *schema.Resource {
	return define.Resources["StartupScript"]
}

func (p *CreateStartupScriptParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateStartupScriptParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateStartupScriptParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateStartupScriptParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateStartupScriptParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *CreateStartupScriptParam) GetResourceDef() *schema.Resource {
	return define.Resources["StartupScript"]
}

func (p *CreateStartupScriptParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateStartupScriptParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateStartupScriptParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateStartupScriptParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateStartupScriptParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateStartupScriptParam) SetScript(v string) {
	p.Script = v
}

func (p *CreateStartupScriptParam) GetScript() string {
	return p.Script
}
func (p *CreateStartupScriptParam) SetScriptContent(v string) {
	p.ScriptContent = v
}

func (p *CreateStartupScriptParam) GetScriptContent() string {
	return p.ScriptContent
}
func (p *CreateStartupScriptParam) SetClass(v string) {
	p.Class = v
}

func (p *CreateStartupScriptParam) GetClass() string {
	return p.Class
}
func (p *CreateStartupScriptParam) SetName(v string) {
	p.Name = v
}

func (p *CreateStartupScriptParam) GetName() string {
	return p.Name
}
func (p *CreateStartupScriptParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateStartupScriptParam) GetTags() []string {
	return p.Tags
}
func (p *CreateStartupScriptParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateStartupScriptParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateStartupScriptParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateStartupScriptParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateStartupScriptParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateStartupScriptParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateStartupScriptParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateStartupScriptParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateStartupScriptParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateStartupScriptParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateStartupScriptParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateStartupScriptParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateStartupScriptParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateStartupScriptParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateStartupScriptParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateStartupScriptParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateStartupScriptParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateStartupScriptParam) GetColumn() []string {
	return p.Column
}
func (p *CreateStartupScriptParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateStartupScriptParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateStartupScriptParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateStartupScriptParam) GetFormat() string {
	return p.Format
}
func (p *CreateStartupScriptParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateStartupScriptParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateStartupScriptParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateStartupScriptParam) GetQuery() string {
	return p.Query
}
func (p *CreateStartupScriptParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateStartupScriptParam) GetQueryFile() string {
	return p.QueryFile
}

// Changed usacloud v0系との互換性維持のための実装
func (p *CreateStartupScriptParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// ReadStartupScriptParam is input parameters for the sacloud API
type ReadStartupScriptParam struct {
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewReadStartupScriptParam return new ReadStartupScriptParam
func NewReadStartupScriptParam() *ReadStartupScriptParam {
	return &ReadStartupScriptParam{}
}

// Initialize init ReadStartupScriptParam
func (p *ReadStartupScriptParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadStartupScriptParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ReadStartupScriptParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReadStartupScriptParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ReadStartupScriptParam) ResourceDef() *schema.Resource {
	return define.Resources["StartupScript"]
}

func (p *ReadStartupScriptParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadStartupScriptParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadStartupScriptParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadStartupScriptParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadStartupScriptParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ReadStartupScriptParam) GetResourceDef() *schema.Resource {
	return define.Resources["StartupScript"]
}

func (p *ReadStartupScriptParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadStartupScriptParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadStartupScriptParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadStartupScriptParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadStartupScriptParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReadStartupScriptParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadStartupScriptParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadStartupScriptParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadStartupScriptParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadStartupScriptParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadStartupScriptParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadStartupScriptParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadStartupScriptParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadStartupScriptParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadStartupScriptParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadStartupScriptParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadStartupScriptParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadStartupScriptParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadStartupScriptParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadStartupScriptParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadStartupScriptParam) GetColumn() []string {
	return p.Column
}
func (p *ReadStartupScriptParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadStartupScriptParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadStartupScriptParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadStartupScriptParam) GetFormat() string {
	return p.Format
}
func (p *ReadStartupScriptParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadStartupScriptParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadStartupScriptParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadStartupScriptParam) GetQuery() string {
	return p.Query
}
func (p *ReadStartupScriptParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadStartupScriptParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadStartupScriptParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadStartupScriptParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ReadStartupScriptParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// UpdateStartupScriptParam is input parameters for the sacloud API
type UpdateStartupScriptParam struct {
	Script            string
	ScriptContent     string
	Class             string
	Selector          []string
	Name              string
	Tags              []string
	IconId            sacloud.ID
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewUpdateStartupScriptParam return new UpdateStartupScriptParam
func NewUpdateStartupScriptParam() *UpdateStartupScriptParam {
	return &UpdateStartupScriptParam{}
}

// Initialize init UpdateStartupScriptParam
func (p *UpdateStartupScriptParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateStartupScriptParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *UpdateStartupScriptParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Script) {
		p.Script = ""
	}
	if utils.IsEmpty(p.ScriptContent) {
		p.ScriptContent = ""
	}
	if utils.IsEmpty(p.Class) {
		p.Class = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UpdateStartupScriptParam) validate() error {
	var errors []error

	{
		validator := define.Resources["StartupScript"].Commands["update"].Params["script"].ValidateFunc
		errs := validator("--script", p.Script)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--script-content", p.ScriptContent, map[string]interface{}{

			"--script": p.Script,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["StartupScript"].Commands["update"].Params["class"].ValidateFunc
		errs := validator("--class", p.Class)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["StartupScript"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["StartupScript"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["StartupScript"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *UpdateStartupScriptParam) ResourceDef() *schema.Resource {
	return define.Resources["StartupScript"]
}

func (p *UpdateStartupScriptParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateStartupScriptParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateStartupScriptParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateStartupScriptParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateStartupScriptParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *UpdateStartupScriptParam) GetResourceDef() *schema.Resource {
	return define.Resources["StartupScript"]
}

func (p *UpdateStartupScriptParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateStartupScriptParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateStartupScriptParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateStartupScriptParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateStartupScriptParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateStartupScriptParam) SetScript(v string) {
	p.Script = v
}

func (p *UpdateStartupScriptParam) GetScript() string {
	return p.Script
}
func (p *UpdateStartupScriptParam) SetScriptContent(v string) {
	p.ScriptContent = v
}

func (p *UpdateStartupScriptParam) GetScriptContent() string {
	return p.ScriptContent
}
func (p *UpdateStartupScriptParam) SetClass(v string) {
	p.Class = v
}

func (p *UpdateStartupScriptParam) GetClass() string {
	return p.Class
}
func (p *UpdateStartupScriptParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateStartupScriptParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateStartupScriptParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateStartupScriptParam) GetName() string {
	return p.Name
}
func (p *UpdateStartupScriptParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateStartupScriptParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateStartupScriptParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateStartupScriptParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateStartupScriptParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateStartupScriptParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateStartupScriptParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateStartupScriptParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateStartupScriptParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateStartupScriptParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateStartupScriptParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateStartupScriptParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateStartupScriptParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateStartupScriptParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateStartupScriptParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateStartupScriptParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateStartupScriptParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateStartupScriptParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateStartupScriptParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateStartupScriptParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateStartupScriptParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateStartupScriptParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateStartupScriptParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateStartupScriptParam) GetFormat() string {
	return p.Format
}
func (p *UpdateStartupScriptParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateStartupScriptParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateStartupScriptParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateStartupScriptParam) GetQuery() string {
	return p.Query
}
func (p *UpdateStartupScriptParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateStartupScriptParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateStartupScriptParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateStartupScriptParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *UpdateStartupScriptParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// DeleteStartupScriptParam is input parameters for the sacloud API
type DeleteStartupScriptParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewDeleteStartupScriptParam return new DeleteStartupScriptParam
func NewDeleteStartupScriptParam() *DeleteStartupScriptParam {
	return &DeleteStartupScriptParam{}
}

// Initialize init DeleteStartupScriptParam
func (p *DeleteStartupScriptParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteStartupScriptParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *DeleteStartupScriptParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DeleteStartupScriptParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *DeleteStartupScriptParam) ResourceDef() *schema.Resource {
	return define.Resources["StartupScript"]
}

func (p *DeleteStartupScriptParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteStartupScriptParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteStartupScriptParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteStartupScriptParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteStartupScriptParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *DeleteStartupScriptParam) GetResourceDef() *schema.Resource {
	return define.Resources["StartupScript"]
}

func (p *DeleteStartupScriptParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteStartupScriptParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteStartupScriptParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteStartupScriptParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteStartupScriptParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteStartupScriptParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteStartupScriptParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteStartupScriptParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteStartupScriptParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteStartupScriptParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteStartupScriptParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteStartupScriptParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteStartupScriptParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteStartupScriptParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteStartupScriptParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteStartupScriptParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteStartupScriptParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteStartupScriptParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteStartupScriptParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteStartupScriptParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteStartupScriptParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteStartupScriptParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteStartupScriptParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteStartupScriptParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteStartupScriptParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteStartupScriptParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteStartupScriptParam) GetFormat() string {
	return p.Format
}
func (p *DeleteStartupScriptParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteStartupScriptParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteStartupScriptParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteStartupScriptParam) GetQuery() string {
	return p.Query
}
func (p *DeleteStartupScriptParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteStartupScriptParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteStartupScriptParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteStartupScriptParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *DeleteStartupScriptParam) Changed(name string) bool {
	return p.input.Changed(name)
}

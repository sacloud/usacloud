// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-params'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/pkg/define"
	"github.com/sacloud/usacloud/pkg/output"
	"github.com/sacloud/usacloud/pkg/schema"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
)

// ListSSHKeyParam is input parameters for the sacloud API
type ListSSHKeyParam struct {
	Name              []string
	Id                []sacloud.ID
	From              int
	Max               int
	Sort              []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string

	input Input
}

// NewListSSHKeyParam return new ListSSHKeyParam
func NewListSSHKeyParam() *ListSSHKeyParam {
	return &ListSSHKeyParam{}
}

// Initialize init ListSSHKeyParam
func (p *ListSSHKeyParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListSSHKeyParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ListSSHKeyParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListSSHKeyParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SSHKey"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ListSSHKeyParam) ResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *ListSSHKeyParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListSSHKeyParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListSSHKeyParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListSSHKeyParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListSSHKeyParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ListSSHKeyParam) GetResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *ListSSHKeyParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListSSHKeyParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListSSHKeyParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListSSHKeyParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListSSHKeyParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListSSHKeyParam) SetName(v []string) {
	p.Name = v
}

func (p *ListSSHKeyParam) GetName() []string {
	return p.Name
}
func (p *ListSSHKeyParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListSSHKeyParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListSSHKeyParam) SetFrom(v int) {
	p.From = v
}

func (p *ListSSHKeyParam) GetFrom() int {
	return p.From
}
func (p *ListSSHKeyParam) SetMax(v int) {
	p.Max = v
}

func (p *ListSSHKeyParam) GetMax() int {
	return p.Max
}
func (p *ListSSHKeyParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListSSHKeyParam) GetSort() []string {
	return p.Sort
}
func (p *ListSSHKeyParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListSSHKeyParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListSSHKeyParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListSSHKeyParam) GetParameters() string {
	return p.Parameters
}
func (p *ListSSHKeyParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListSSHKeyParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListSSHKeyParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListSSHKeyParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListSSHKeyParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListSSHKeyParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListSSHKeyParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListSSHKeyParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListSSHKeyParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListSSHKeyParam) GetColumn() []string {
	return p.Column
}
func (p *ListSSHKeyParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListSSHKeyParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListSSHKeyParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListSSHKeyParam) GetFormat() string {
	return p.Format
}
func (p *ListSSHKeyParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListSSHKeyParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListSSHKeyParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListSSHKeyParam) GetQuery() string {
	return p.Query
}
func (p *ListSSHKeyParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListSSHKeyParam) GetQueryFile() string {
	return p.QueryFile
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ListSSHKeyParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// CreateSSHKeyParam is input parameters for the sacloud API
type CreateSSHKeyParam struct {
	PublicKey         string
	Name              string
	Description       string
	Assumeyes         bool
	PublicKeyContent  string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string

	input Input
}

// NewCreateSSHKeyParam return new CreateSSHKeyParam
func NewCreateSSHKeyParam() *CreateSSHKeyParam {
	return &CreateSSHKeyParam{}
}

// Initialize init CreateSSHKeyParam
func (p *CreateSSHKeyParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateSSHKeyParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *CreateSSHKeyParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.PublicKey) {
		p.PublicKey = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.PublicKeyContent) {
		p.PublicKeyContent = ""
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *CreateSSHKeyParam) validate() error {
	var errors []error

	{
		validator := define.Resources["SSHKey"].Commands["create"].Params["public-key"].ValidateFunc
		errs := validator("--public-key", p.PublicKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SSHKey"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SSHKey"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--public-key-content", p.PublicKeyContent, map[string]interface{}{

			"--public-key": p.PublicKey,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *CreateSSHKeyParam) ResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *CreateSSHKeyParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateSSHKeyParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateSSHKeyParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateSSHKeyParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateSSHKeyParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *CreateSSHKeyParam) GetResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *CreateSSHKeyParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateSSHKeyParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateSSHKeyParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateSSHKeyParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateSSHKeyParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateSSHKeyParam) SetPublicKey(v string) {
	p.PublicKey = v
}

func (p *CreateSSHKeyParam) GetPublicKey() string {
	return p.PublicKey
}
func (p *CreateSSHKeyParam) SetName(v string) {
	p.Name = v
}

func (p *CreateSSHKeyParam) GetName() string {
	return p.Name
}
func (p *CreateSSHKeyParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateSSHKeyParam) GetDescription() string {
	return p.Description
}
func (p *CreateSSHKeyParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateSSHKeyParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateSSHKeyParam) SetPublicKeyContent(v string) {
	p.PublicKeyContent = v
}

func (p *CreateSSHKeyParam) GetPublicKeyContent() string {
	return p.PublicKeyContent
}
func (p *CreateSSHKeyParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateSSHKeyParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateSSHKeyParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateSSHKeyParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateSSHKeyParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateSSHKeyParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateSSHKeyParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateSSHKeyParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateSSHKeyParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateSSHKeyParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateSSHKeyParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateSSHKeyParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateSSHKeyParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateSSHKeyParam) GetColumn() []string {
	return p.Column
}
func (p *CreateSSHKeyParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateSSHKeyParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateSSHKeyParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateSSHKeyParam) GetFormat() string {
	return p.Format
}
func (p *CreateSSHKeyParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateSSHKeyParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateSSHKeyParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateSSHKeyParam) GetQuery() string {
	return p.Query
}
func (p *CreateSSHKeyParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateSSHKeyParam) GetQueryFile() string {
	return p.QueryFile
}

// Changed usacloud v0系との互換性維持のための実装
func (p *CreateSSHKeyParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// ReadSSHKeyParam is input parameters for the sacloud API
type ReadSSHKeyParam struct {
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewReadSSHKeyParam return new ReadSSHKeyParam
func NewReadSSHKeyParam() *ReadSSHKeyParam {
	return &ReadSSHKeyParam{}
}

// Initialize init ReadSSHKeyParam
func (p *ReadSSHKeyParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadSSHKeyParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ReadSSHKeyParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReadSSHKeyParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ReadSSHKeyParam) ResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *ReadSSHKeyParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadSSHKeyParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadSSHKeyParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadSSHKeyParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadSSHKeyParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ReadSSHKeyParam) GetResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *ReadSSHKeyParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadSSHKeyParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadSSHKeyParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadSSHKeyParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadSSHKeyParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReadSSHKeyParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadSSHKeyParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadSSHKeyParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadSSHKeyParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadSSHKeyParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadSSHKeyParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadSSHKeyParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadSSHKeyParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadSSHKeyParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadSSHKeyParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadSSHKeyParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadSSHKeyParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadSSHKeyParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadSSHKeyParam) GetColumn() []string {
	return p.Column
}
func (p *ReadSSHKeyParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadSSHKeyParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadSSHKeyParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadSSHKeyParam) GetFormat() string {
	return p.Format
}
func (p *ReadSSHKeyParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadSSHKeyParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadSSHKeyParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadSSHKeyParam) GetQuery() string {
	return p.Query
}
func (p *ReadSSHKeyParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadSSHKeyParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadSSHKeyParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadSSHKeyParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ReadSSHKeyParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// UpdateSSHKeyParam is input parameters for the sacloud API
type UpdateSSHKeyParam struct {
	Name              string
	Description       string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewUpdateSSHKeyParam return new UpdateSSHKeyParam
func NewUpdateSSHKeyParam() *UpdateSSHKeyParam {
	return &UpdateSSHKeyParam{}
}

// Initialize init UpdateSSHKeyParam
func (p *UpdateSSHKeyParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateSSHKeyParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *UpdateSSHKeyParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UpdateSSHKeyParam) validate() error {
	var errors []error

	{
		validator := define.Resources["SSHKey"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SSHKey"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *UpdateSSHKeyParam) ResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *UpdateSSHKeyParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateSSHKeyParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateSSHKeyParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateSSHKeyParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateSSHKeyParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *UpdateSSHKeyParam) GetResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *UpdateSSHKeyParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateSSHKeyParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateSSHKeyParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateSSHKeyParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateSSHKeyParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateSSHKeyParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateSSHKeyParam) GetName() string {
	return p.Name
}
func (p *UpdateSSHKeyParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateSSHKeyParam) GetDescription() string {
	return p.Description
}
func (p *UpdateSSHKeyParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateSSHKeyParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateSSHKeyParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateSSHKeyParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateSSHKeyParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateSSHKeyParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateSSHKeyParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateSSHKeyParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateSSHKeyParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateSSHKeyParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateSSHKeyParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateSSHKeyParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateSSHKeyParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateSSHKeyParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateSSHKeyParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateSSHKeyParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateSSHKeyParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateSSHKeyParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateSSHKeyParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateSSHKeyParam) GetFormat() string {
	return p.Format
}
func (p *UpdateSSHKeyParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateSSHKeyParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateSSHKeyParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateSSHKeyParam) GetQuery() string {
	return p.Query
}
func (p *UpdateSSHKeyParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateSSHKeyParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateSSHKeyParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateSSHKeyParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *UpdateSSHKeyParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// DeleteSSHKeyParam is input parameters for the sacloud API
type DeleteSSHKeyParam struct {
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewDeleteSSHKeyParam return new DeleteSSHKeyParam
func NewDeleteSSHKeyParam() *DeleteSSHKeyParam {
	return &DeleteSSHKeyParam{}
}

// Initialize init DeleteSSHKeyParam
func (p *DeleteSSHKeyParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteSSHKeyParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *DeleteSSHKeyParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DeleteSSHKeyParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *DeleteSSHKeyParam) ResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *DeleteSSHKeyParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteSSHKeyParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteSSHKeyParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteSSHKeyParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteSSHKeyParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *DeleteSSHKeyParam) GetResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *DeleteSSHKeyParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteSSHKeyParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteSSHKeyParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteSSHKeyParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteSSHKeyParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteSSHKeyParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteSSHKeyParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteSSHKeyParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteSSHKeyParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteSSHKeyParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteSSHKeyParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteSSHKeyParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteSSHKeyParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteSSHKeyParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteSSHKeyParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteSSHKeyParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteSSHKeyParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteSSHKeyParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteSSHKeyParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteSSHKeyParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteSSHKeyParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteSSHKeyParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteSSHKeyParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteSSHKeyParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteSSHKeyParam) GetFormat() string {
	return p.Format
}
func (p *DeleteSSHKeyParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteSSHKeyParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteSSHKeyParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteSSHKeyParam) GetQuery() string {
	return p.Query
}
func (p *DeleteSSHKeyParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteSSHKeyParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteSSHKeyParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteSSHKeyParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *DeleteSSHKeyParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// GenerateSSHKeyParam is input parameters for the sacloud API
type GenerateSSHKeyParam struct {
	PassPhrase        string
	Name              string
	Description       string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	PrivateKeyOutput  string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string

	input Input
}

// NewGenerateSSHKeyParam return new GenerateSSHKeyParam
func NewGenerateSSHKeyParam() *GenerateSSHKeyParam {
	return &GenerateSSHKeyParam{}
}

// Initialize init GenerateSSHKeyParam
func (p *GenerateSSHKeyParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *GenerateSSHKeyParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *GenerateSSHKeyParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.PassPhrase) {
		p.PassPhrase = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.PrivateKeyOutput) {
		p.PrivateKeyOutput = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *GenerateSSHKeyParam) validate() error {
	var errors []error

	{
		validator := define.Resources["SSHKey"].Commands["generate"].Params["pass-phrase"].ValidateFunc
		errs := validator("--pass-phrase", p.PassPhrase)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SSHKey"].Commands["generate"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SSHKey"].Commands["generate"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *GenerateSSHKeyParam) ResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *GenerateSSHKeyParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["generate"]
}

func (p *GenerateSSHKeyParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *GenerateSSHKeyParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *GenerateSSHKeyParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *GenerateSSHKeyParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *GenerateSSHKeyParam) GetResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *GenerateSSHKeyParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["generate"]
}

func (p *GenerateSSHKeyParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *GenerateSSHKeyParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *GenerateSSHKeyParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *GenerateSSHKeyParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *GenerateSSHKeyParam) SetPassPhrase(v string) {
	p.PassPhrase = v
}

func (p *GenerateSSHKeyParam) GetPassPhrase() string {
	return p.PassPhrase
}
func (p *GenerateSSHKeyParam) SetName(v string) {
	p.Name = v
}

func (p *GenerateSSHKeyParam) GetName() string {
	return p.Name
}
func (p *GenerateSSHKeyParam) SetDescription(v string) {
	p.Description = v
}

func (p *GenerateSSHKeyParam) GetDescription() string {
	return p.Description
}
func (p *GenerateSSHKeyParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *GenerateSSHKeyParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *GenerateSSHKeyParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *GenerateSSHKeyParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *GenerateSSHKeyParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *GenerateSSHKeyParam) GetParameters() string {
	return p.Parameters
}
func (p *GenerateSSHKeyParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *GenerateSSHKeyParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *GenerateSSHKeyParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *GenerateSSHKeyParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *GenerateSSHKeyParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *GenerateSSHKeyParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *GenerateSSHKeyParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *GenerateSSHKeyParam) GetOutputType() string {
	return p.OutputType
}
func (p *GenerateSSHKeyParam) SetPrivateKeyOutput(v string) {
	p.PrivateKeyOutput = v
}

func (p *GenerateSSHKeyParam) GetPrivateKeyOutput() string {
	return p.PrivateKeyOutput
}
func (p *GenerateSSHKeyParam) SetColumn(v []string) {
	p.Column = v
}

func (p *GenerateSSHKeyParam) GetColumn() []string {
	return p.Column
}
func (p *GenerateSSHKeyParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *GenerateSSHKeyParam) GetQuiet() bool {
	return p.Quiet
}
func (p *GenerateSSHKeyParam) SetFormat(v string) {
	p.Format = v
}

func (p *GenerateSSHKeyParam) GetFormat() string {
	return p.Format
}
func (p *GenerateSSHKeyParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *GenerateSSHKeyParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *GenerateSSHKeyParam) SetQuery(v string) {
	p.Query = v
}

func (p *GenerateSSHKeyParam) GetQuery() string {
	return p.Query
}
func (p *GenerateSSHKeyParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *GenerateSSHKeyParam) GetQueryFile() string {
	return p.QueryFile
}

// Changed usacloud v0系との互換性維持のための実装
func (p *GenerateSSHKeyParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-params'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/pkg/define"
	"github.com/sacloud/usacloud/pkg/output"
	"github.com/sacloud/usacloud/pkg/schema"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
)

// ListISOImageParam is input parameters for the sacloud API
type ListISOImageParam struct {
	Name              []string
	Id                []sacloud.ID
	Scope             string
	Tags              []string
	From              int
	Max               int
	Sort              []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string

	input Input
}

// NewListISOImageParam return new ListISOImageParam
func NewListISOImageParam() *ListISOImageParam {
	return &ListISOImageParam{}
}

// Initialize init ListISOImageParam
func (p *ListISOImageParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListISOImageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ListISOImageParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Scope) {
		p.Scope = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListISOImageParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ISOImage"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ISOImage"].Commands["list"].Params["scope"].ValidateFunc
		errs := validator("--scope", p.Scope)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ISOImage"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ListISOImageParam) ResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *ListISOImageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListISOImageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListISOImageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListISOImageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListISOImageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ListISOImageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *ListISOImageParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListISOImageParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListISOImageParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListISOImageParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListISOImageParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListISOImageParam) SetName(v []string) {
	p.Name = v
}

func (p *ListISOImageParam) GetName() []string {
	return p.Name
}
func (p *ListISOImageParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListISOImageParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListISOImageParam) SetScope(v string) {
	p.Scope = v
}

func (p *ListISOImageParam) GetScope() string {
	return p.Scope
}
func (p *ListISOImageParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListISOImageParam) GetTags() []string {
	return p.Tags
}
func (p *ListISOImageParam) SetFrom(v int) {
	p.From = v
}

func (p *ListISOImageParam) GetFrom() int {
	return p.From
}
func (p *ListISOImageParam) SetMax(v int) {
	p.Max = v
}

func (p *ListISOImageParam) GetMax() int {
	return p.Max
}
func (p *ListISOImageParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListISOImageParam) GetSort() []string {
	return p.Sort
}
func (p *ListISOImageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListISOImageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListISOImageParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListISOImageParam) GetParameters() string {
	return p.Parameters
}
func (p *ListISOImageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListISOImageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListISOImageParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListISOImageParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListISOImageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListISOImageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListISOImageParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListISOImageParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListISOImageParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListISOImageParam) GetColumn() []string {
	return p.Column
}
func (p *ListISOImageParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListISOImageParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListISOImageParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListISOImageParam) GetFormat() string {
	return p.Format
}
func (p *ListISOImageParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListISOImageParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListISOImageParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListISOImageParam) GetQuery() string {
	return p.Query
}
func (p *ListISOImageParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListISOImageParam) GetQueryFile() string {
	return p.QueryFile
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ListISOImageParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// CreateISOImageParam is input parameters for the sacloud API
type CreateISOImageParam struct {
	Size              int
	ISOFile           string
	Name              string
	Description       string
	Tags              []string
	IconId            sacloud.ID
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string

	input Input
}

// NewCreateISOImageParam return new CreateISOImageParam
func NewCreateISOImageParam() *CreateISOImageParam {
	return &CreateISOImageParam{
		Size: 5}
}

// Initialize init CreateISOImageParam
func (p *CreateISOImageParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateISOImageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *CreateISOImageParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Size) {
		p.Size = 0
	}
	if utils.IsEmpty(p.ISOFile) {
		p.ISOFile = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *CreateISOImageParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["size"].ValidateFunc
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["iso-file"].ValidateFunc
		errs := validator("--iso-file", p.ISOFile)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *CreateISOImageParam) ResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *CreateISOImageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateISOImageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateISOImageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateISOImageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateISOImageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *CreateISOImageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *CreateISOImageParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateISOImageParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateISOImageParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateISOImageParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateISOImageParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateISOImageParam) SetSize(v int) {
	p.Size = v
}

func (p *CreateISOImageParam) GetSize() int {
	return p.Size
}
func (p *CreateISOImageParam) SetISOFile(v string) {
	p.ISOFile = v
}

func (p *CreateISOImageParam) GetISOFile() string {
	return p.ISOFile
}
func (p *CreateISOImageParam) SetName(v string) {
	p.Name = v
}

func (p *CreateISOImageParam) GetName() string {
	return p.Name
}
func (p *CreateISOImageParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateISOImageParam) GetDescription() string {
	return p.Description
}
func (p *CreateISOImageParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateISOImageParam) GetTags() []string {
	return p.Tags
}
func (p *CreateISOImageParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateISOImageParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateISOImageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateISOImageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateISOImageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateISOImageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateISOImageParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateISOImageParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateISOImageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateISOImageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateISOImageParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateISOImageParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateISOImageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateISOImageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateISOImageParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateISOImageParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateISOImageParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateISOImageParam) GetColumn() []string {
	return p.Column
}
func (p *CreateISOImageParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateISOImageParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateISOImageParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateISOImageParam) GetFormat() string {
	return p.Format
}
func (p *CreateISOImageParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateISOImageParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateISOImageParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateISOImageParam) GetQuery() string {
	return p.Query
}
func (p *CreateISOImageParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateISOImageParam) GetQueryFile() string {
	return p.QueryFile
}

// Changed usacloud v0系との互換性維持のための実装
func (p *CreateISOImageParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// ReadISOImageParam is input parameters for the sacloud API
type ReadISOImageParam struct {
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewReadISOImageParam return new ReadISOImageParam
func NewReadISOImageParam() *ReadISOImageParam {
	return &ReadISOImageParam{}
}

// Initialize init ReadISOImageParam
func (p *ReadISOImageParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadISOImageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ReadISOImageParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReadISOImageParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ReadISOImageParam) ResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *ReadISOImageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadISOImageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadISOImageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadISOImageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadISOImageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ReadISOImageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *ReadISOImageParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadISOImageParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadISOImageParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadISOImageParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadISOImageParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReadISOImageParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadISOImageParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadISOImageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadISOImageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadISOImageParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadISOImageParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadISOImageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadISOImageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadISOImageParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadISOImageParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadISOImageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadISOImageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadISOImageParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadISOImageParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadISOImageParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadISOImageParam) GetColumn() []string {
	return p.Column
}
func (p *ReadISOImageParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadISOImageParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadISOImageParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadISOImageParam) GetFormat() string {
	return p.Format
}
func (p *ReadISOImageParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadISOImageParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadISOImageParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadISOImageParam) GetQuery() string {
	return p.Query
}
func (p *ReadISOImageParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadISOImageParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadISOImageParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadISOImageParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ReadISOImageParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// UpdateISOImageParam is input parameters for the sacloud API
type UpdateISOImageParam struct {
	Selector          []string
	Name              string
	Description       string
	Tags              []string
	IconId            sacloud.ID
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewUpdateISOImageParam return new UpdateISOImageParam
func NewUpdateISOImageParam() *UpdateISOImageParam {
	return &UpdateISOImageParam{}
}

// Initialize init UpdateISOImageParam
func (p *UpdateISOImageParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateISOImageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *UpdateISOImageParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UpdateISOImageParam) validate() error {
	var errors []error

	{
		validator := define.Resources["ISOImage"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ISOImage"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ISOImage"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ISOImage"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *UpdateISOImageParam) ResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *UpdateISOImageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateISOImageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateISOImageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateISOImageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateISOImageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *UpdateISOImageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *UpdateISOImageParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateISOImageParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateISOImageParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateISOImageParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateISOImageParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateISOImageParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateISOImageParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateISOImageParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateISOImageParam) GetName() string {
	return p.Name
}
func (p *UpdateISOImageParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateISOImageParam) GetDescription() string {
	return p.Description
}
func (p *UpdateISOImageParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateISOImageParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateISOImageParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateISOImageParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateISOImageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateISOImageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateISOImageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateISOImageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateISOImageParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateISOImageParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateISOImageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateISOImageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateISOImageParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateISOImageParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateISOImageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateISOImageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateISOImageParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateISOImageParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateISOImageParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateISOImageParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateISOImageParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateISOImageParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateISOImageParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateISOImageParam) GetFormat() string {
	return p.Format
}
func (p *UpdateISOImageParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateISOImageParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateISOImageParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateISOImageParam) GetQuery() string {
	return p.Query
}
func (p *UpdateISOImageParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateISOImageParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateISOImageParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateISOImageParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *UpdateISOImageParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// DeleteISOImageParam is input parameters for the sacloud API
type DeleteISOImageParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewDeleteISOImageParam return new DeleteISOImageParam
func NewDeleteISOImageParam() *DeleteISOImageParam {
	return &DeleteISOImageParam{}
}

// Initialize init DeleteISOImageParam
func (p *DeleteISOImageParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteISOImageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *DeleteISOImageParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DeleteISOImageParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *DeleteISOImageParam) ResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *DeleteISOImageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteISOImageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteISOImageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteISOImageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteISOImageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *DeleteISOImageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *DeleteISOImageParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteISOImageParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteISOImageParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteISOImageParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteISOImageParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteISOImageParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteISOImageParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteISOImageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteISOImageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteISOImageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteISOImageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteISOImageParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteISOImageParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteISOImageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteISOImageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteISOImageParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteISOImageParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteISOImageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteISOImageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteISOImageParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteISOImageParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteISOImageParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteISOImageParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteISOImageParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteISOImageParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteISOImageParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteISOImageParam) GetFormat() string {
	return p.Format
}
func (p *DeleteISOImageParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteISOImageParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteISOImageParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteISOImageParam) GetQuery() string {
	return p.Query
}
func (p *DeleteISOImageParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteISOImageParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteISOImageParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteISOImageParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *DeleteISOImageParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// UploadISOImageParam is input parameters for the sacloud API
type UploadISOImageParam struct {
	ISOFile           string
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewUploadISOImageParam return new UploadISOImageParam
func NewUploadISOImageParam() *UploadISOImageParam {
	return &UploadISOImageParam{}
}

// Initialize init UploadISOImageParam
func (p *UploadISOImageParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UploadISOImageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *UploadISOImageParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.ISOFile) {
		p.ISOFile = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UploadISOImageParam) validate() error {
	var errors []error

	{
		validator := define.Resources["ISOImage"].Commands["upload"].Params["iso-file"].ValidateFunc
		errs := validator("--iso-file", p.ISOFile)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *UploadISOImageParam) ResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *UploadISOImageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["upload"]
}

func (p *UploadISOImageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UploadISOImageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UploadISOImageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UploadISOImageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *UploadISOImageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *UploadISOImageParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["upload"]
}

func (p *UploadISOImageParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UploadISOImageParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UploadISOImageParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UploadISOImageParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UploadISOImageParam) SetISOFile(v string) {
	p.ISOFile = v
}

func (p *UploadISOImageParam) GetISOFile() string {
	return p.ISOFile
}
func (p *UploadISOImageParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UploadISOImageParam) GetSelector() []string {
	return p.Selector
}
func (p *UploadISOImageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UploadISOImageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UploadISOImageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UploadISOImageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UploadISOImageParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UploadISOImageParam) GetParameters() string {
	return p.Parameters
}
func (p *UploadISOImageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UploadISOImageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UploadISOImageParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UploadISOImageParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UploadISOImageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UploadISOImageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UploadISOImageParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UploadISOImageParam) GetOutputType() string {
	return p.OutputType
}
func (p *UploadISOImageParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UploadISOImageParam) GetColumn() []string {
	return p.Column
}
func (p *UploadISOImageParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UploadISOImageParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UploadISOImageParam) SetFormat(v string) {
	p.Format = v
}

func (p *UploadISOImageParam) GetFormat() string {
	return p.Format
}
func (p *UploadISOImageParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UploadISOImageParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UploadISOImageParam) SetQuery(v string) {
	p.Query = v
}

func (p *UploadISOImageParam) GetQuery() string {
	return p.Query
}
func (p *UploadISOImageParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UploadISOImageParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UploadISOImageParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UploadISOImageParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *UploadISOImageParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// DownloadISOImageParam is input parameters for the sacloud API
type DownloadISOImageParam struct {
	FileDestination   string
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewDownloadISOImageParam return new DownloadISOImageParam
func NewDownloadISOImageParam() *DownloadISOImageParam {
	return &DownloadISOImageParam{}
}

// Initialize init DownloadISOImageParam
func (p *DownloadISOImageParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DownloadISOImageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *DownloadISOImageParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.FileDestination) {
		p.FileDestination = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DownloadISOImageParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *DownloadISOImageParam) ResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *DownloadISOImageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["download"]
}

func (p *DownloadISOImageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DownloadISOImageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DownloadISOImageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DownloadISOImageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *DownloadISOImageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *DownloadISOImageParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["download"]
}

func (p *DownloadISOImageParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DownloadISOImageParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DownloadISOImageParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DownloadISOImageParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DownloadISOImageParam) SetFileDestination(v string) {
	p.FileDestination = v
}

func (p *DownloadISOImageParam) GetFileDestination() string {
	return p.FileDestination
}
func (p *DownloadISOImageParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DownloadISOImageParam) GetSelector() []string {
	return p.Selector
}
func (p *DownloadISOImageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DownloadISOImageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DownloadISOImageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DownloadISOImageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DownloadISOImageParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DownloadISOImageParam) GetParameters() string {
	return p.Parameters
}
func (p *DownloadISOImageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DownloadISOImageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DownloadISOImageParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DownloadISOImageParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DownloadISOImageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DownloadISOImageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DownloadISOImageParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DownloadISOImageParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *DownloadISOImageParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// FTPOpenISOImageParam is input parameters for the sacloud API
type FTPOpenISOImageParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewFTPOpenISOImageParam return new FTPOpenISOImageParam
func NewFTPOpenISOImageParam() *FTPOpenISOImageParam {
	return &FTPOpenISOImageParam{}
}

// Initialize init FTPOpenISOImageParam
func (p *FTPOpenISOImageParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *FTPOpenISOImageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *FTPOpenISOImageParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *FTPOpenISOImageParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *FTPOpenISOImageParam) ResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *FTPOpenISOImageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ftp-open"]
}

func (p *FTPOpenISOImageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *FTPOpenISOImageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *FTPOpenISOImageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *FTPOpenISOImageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *FTPOpenISOImageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *FTPOpenISOImageParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["ftp-open"]
}

func (p *FTPOpenISOImageParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *FTPOpenISOImageParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *FTPOpenISOImageParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *FTPOpenISOImageParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *FTPOpenISOImageParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *FTPOpenISOImageParam) GetSelector() []string {
	return p.Selector
}
func (p *FTPOpenISOImageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *FTPOpenISOImageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *FTPOpenISOImageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *FTPOpenISOImageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *FTPOpenISOImageParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *FTPOpenISOImageParam) GetParameters() string {
	return p.Parameters
}
func (p *FTPOpenISOImageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *FTPOpenISOImageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *FTPOpenISOImageParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *FTPOpenISOImageParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *FTPOpenISOImageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *FTPOpenISOImageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *FTPOpenISOImageParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *FTPOpenISOImageParam) GetOutputType() string {
	return p.OutputType
}
func (p *FTPOpenISOImageParam) SetColumn(v []string) {
	p.Column = v
}

func (p *FTPOpenISOImageParam) GetColumn() []string {
	return p.Column
}
func (p *FTPOpenISOImageParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *FTPOpenISOImageParam) GetQuiet() bool {
	return p.Quiet
}
func (p *FTPOpenISOImageParam) SetFormat(v string) {
	p.Format = v
}

func (p *FTPOpenISOImageParam) GetFormat() string {
	return p.Format
}
func (p *FTPOpenISOImageParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *FTPOpenISOImageParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *FTPOpenISOImageParam) SetQuery(v string) {
	p.Query = v
}

func (p *FTPOpenISOImageParam) GetQuery() string {
	return p.Query
}
func (p *FTPOpenISOImageParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *FTPOpenISOImageParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *FTPOpenISOImageParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *FTPOpenISOImageParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *FTPOpenISOImageParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// FTPCloseISOImageParam is input parameters for the sacloud API
type FTPCloseISOImageParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewFTPCloseISOImageParam return new FTPCloseISOImageParam
func NewFTPCloseISOImageParam() *FTPCloseISOImageParam {
	return &FTPCloseISOImageParam{}
}

// Initialize init FTPCloseISOImageParam
func (p *FTPCloseISOImageParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *FTPCloseISOImageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *FTPCloseISOImageParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *FTPCloseISOImageParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *FTPCloseISOImageParam) ResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *FTPCloseISOImageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ftp-close"]
}

func (p *FTPCloseISOImageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *FTPCloseISOImageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *FTPCloseISOImageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *FTPCloseISOImageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *FTPCloseISOImageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *FTPCloseISOImageParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["ftp-close"]
}

func (p *FTPCloseISOImageParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *FTPCloseISOImageParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *FTPCloseISOImageParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *FTPCloseISOImageParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *FTPCloseISOImageParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *FTPCloseISOImageParam) GetSelector() []string {
	return p.Selector
}
func (p *FTPCloseISOImageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *FTPCloseISOImageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *FTPCloseISOImageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *FTPCloseISOImageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *FTPCloseISOImageParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *FTPCloseISOImageParam) GetParameters() string {
	return p.Parameters
}
func (p *FTPCloseISOImageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *FTPCloseISOImageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *FTPCloseISOImageParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *FTPCloseISOImageParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *FTPCloseISOImageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *FTPCloseISOImageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *FTPCloseISOImageParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *FTPCloseISOImageParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *FTPCloseISOImageParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-params'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/pkg/define"
	"github.com/sacloud/usacloud/pkg/output"
	"github.com/sacloud/usacloud/pkg/schema"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
)

// ListDiskParam is input parameters for the sacloud API
type ListDiskParam struct {
	Name              []string
	Id                []sacloud.ID
	Scope             string
	Tags              []string
	SourceArchiveId   sacloud.ID
	SourceDiskId      sacloud.ID
	Storage           string
	From              int
	Max               int
	Sort              []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string

	input Input
}

// NewListDiskParam return new ListDiskParam
func NewListDiskParam() *ListDiskParam {
	return &ListDiskParam{}
}

// Initialize init ListDiskParam
func (p *ListDiskParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListDiskParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ListDiskParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Scope) {
		p.Scope = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.SourceArchiveId) {
		p.SourceArchiveId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.SourceDiskId) {
		p.SourceDiskId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Storage) {
		p.Storage = ""
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListDiskParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Disk"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Disk"].Commands["list"].Params["scope"].ValidateFunc
		errs := validator("--scope", p.Scope)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Disk"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Disk"].Commands["list"].Params["source-archive-id"].ValidateFunc
		errs := validator("--source-archive-id", p.SourceArchiveId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Disk"].Commands["list"].Params["source-disk-id"].ValidateFunc
		errs := validator("--source-disk-id", p.SourceDiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ListDiskParam) ResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ListDiskParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListDiskParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListDiskParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListDiskParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListDiskParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ListDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ListDiskParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListDiskParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListDiskParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListDiskParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListDiskParam) SetName(v []string) {
	p.Name = v
}

func (p *ListDiskParam) GetName() []string {
	return p.Name
}
func (p *ListDiskParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListDiskParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListDiskParam) SetScope(v string) {
	p.Scope = v
}

func (p *ListDiskParam) GetScope() string {
	return p.Scope
}
func (p *ListDiskParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListDiskParam) GetTags() []string {
	return p.Tags
}
func (p *ListDiskParam) SetSourceArchiveId(v sacloud.ID) {
	p.SourceArchiveId = v
}

func (p *ListDiskParam) GetSourceArchiveId() sacloud.ID {
	return p.SourceArchiveId
}
func (p *ListDiskParam) SetSourceDiskId(v sacloud.ID) {
	p.SourceDiskId = v
}

func (p *ListDiskParam) GetSourceDiskId() sacloud.ID {
	return p.SourceDiskId
}
func (p *ListDiskParam) SetStorage(v string) {
	p.Storage = v
}

func (p *ListDiskParam) GetStorage() string {
	return p.Storage
}
func (p *ListDiskParam) SetFrom(v int) {
	p.From = v
}

func (p *ListDiskParam) GetFrom() int {
	return p.From
}
func (p *ListDiskParam) SetMax(v int) {
	p.Max = v
}

func (p *ListDiskParam) GetMax() int {
	return p.Max
}
func (p *ListDiskParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListDiskParam) GetSort() []string {
	return p.Sort
}
func (p *ListDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListDiskParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListDiskParam) GetParameters() string {
	return p.Parameters
}
func (p *ListDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListDiskParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListDiskParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListDiskParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListDiskParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListDiskParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListDiskParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListDiskParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListDiskParam) GetColumn() []string {
	return p.Column
}
func (p *ListDiskParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListDiskParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListDiskParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListDiskParam) GetFormat() string {
	return p.Format
}
func (p *ListDiskParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListDiskParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListDiskParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListDiskParam) GetQuery() string {
	return p.Query
}
func (p *ListDiskParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListDiskParam) GetQueryFile() string {
	return p.QueryFile
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ListDiskParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// CreateDiskParam is input parameters for the sacloud API
type CreateDiskParam struct {
	Plan              string
	Connection        string
	SourceArchiveId   sacloud.ID
	SourceDiskId      sacloud.ID
	Size              int
	DistantFrom       []sacloud.ID
	Name              string
	Description       string
	Tags              []string
	IconId            sacloud.ID
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string

	input Input
}

// NewCreateDiskParam return new CreateDiskParam
func NewCreateDiskParam() *CreateDiskParam {
	return &CreateDiskParam{
		Plan: "ssd", Connection: "virtio", Size: 20}
}

// Initialize init CreateDiskParam
func (p *CreateDiskParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateDiskParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *CreateDiskParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Plan) {
		p.Plan = ""
	}
	if utils.IsEmpty(p.Connection) {
		p.Connection = ""
	}
	if utils.IsEmpty(p.SourceArchiveId) {
		p.SourceArchiveId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.SourceDiskId) {
		p.SourceDiskId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Size) {
		p.Size = 0
	}
	if utils.IsEmpty(p.DistantFrom) {
		p.DistantFrom = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *CreateDiskParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["create"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--connection", p.Connection)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["create"].Params["connection"].ValidateFunc
		errs := validator("--connection", p.Connection)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Disk"].Commands["create"].Params["source-archive-id"].ValidateFunc
		errs := validator("--source-archive-id", p.SourceArchiveId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--source-archive-id", p.SourceArchiveId, map[string]interface{}{

			"--source-disk-id": p.SourceDiskId,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Disk"].Commands["create"].Params["source-disk-id"].ValidateFunc
		errs := validator("--source-disk-id", p.SourceDiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--source-disk-id", p.SourceDiskId, map[string]interface{}{

			"--source-archive-id": p.SourceArchiveId,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["create"].Params["size"].ValidateFunc
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Disk"].Commands["create"].Params["distant-from"].ValidateFunc
		errs := validator("--distant-from", p.DistantFrom)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Disk"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Disk"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Disk"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *CreateDiskParam) ResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *CreateDiskParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateDiskParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateDiskParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateDiskParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateDiskParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *CreateDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *CreateDiskParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateDiskParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateDiskParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateDiskParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateDiskParam) SetPlan(v string) {
	p.Plan = v
}

func (p *CreateDiskParam) GetPlan() string {
	return p.Plan
}
func (p *CreateDiskParam) SetConnection(v string) {
	p.Connection = v
}

func (p *CreateDiskParam) GetConnection() string {
	return p.Connection
}
func (p *CreateDiskParam) SetSourceArchiveId(v sacloud.ID) {
	p.SourceArchiveId = v
}

func (p *CreateDiskParam) GetSourceArchiveId() sacloud.ID {
	return p.SourceArchiveId
}
func (p *CreateDiskParam) SetSourceDiskId(v sacloud.ID) {
	p.SourceDiskId = v
}

func (p *CreateDiskParam) GetSourceDiskId() sacloud.ID {
	return p.SourceDiskId
}
func (p *CreateDiskParam) SetSize(v int) {
	p.Size = v
}

func (p *CreateDiskParam) GetSize() int {
	return p.Size
}
func (p *CreateDiskParam) SetDistantFrom(v []sacloud.ID) {
	p.DistantFrom = v
}

func (p *CreateDiskParam) GetDistantFrom() []sacloud.ID {
	return p.DistantFrom
}
func (p *CreateDiskParam) SetName(v string) {
	p.Name = v
}

func (p *CreateDiskParam) GetName() string {
	return p.Name
}
func (p *CreateDiskParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateDiskParam) GetDescription() string {
	return p.Description
}
func (p *CreateDiskParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateDiskParam) GetTags() []string {
	return p.Tags
}
func (p *CreateDiskParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateDiskParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateDiskParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateDiskParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateDiskParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateDiskParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateDiskParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateDiskParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateDiskParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateDiskParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateDiskParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateDiskParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateDiskParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateDiskParam) GetColumn() []string {
	return p.Column
}
func (p *CreateDiskParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateDiskParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateDiskParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateDiskParam) GetFormat() string {
	return p.Format
}
func (p *CreateDiskParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateDiskParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateDiskParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateDiskParam) GetQuery() string {
	return p.Query
}
func (p *CreateDiskParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateDiskParam) GetQueryFile() string {
	return p.QueryFile
}

// Changed usacloud v0系との互換性維持のための実装
func (p *CreateDiskParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// ReadDiskParam is input parameters for the sacloud API
type ReadDiskParam struct {
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewReadDiskParam return new ReadDiskParam
func NewReadDiskParam() *ReadDiskParam {
	return &ReadDiskParam{}
}

// Initialize init ReadDiskParam
func (p *ReadDiskParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadDiskParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ReadDiskParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReadDiskParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ReadDiskParam) ResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ReadDiskParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadDiskParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadDiskParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadDiskParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadDiskParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ReadDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ReadDiskParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadDiskParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadDiskParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadDiskParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReadDiskParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadDiskParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadDiskParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadDiskParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadDiskParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadDiskParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadDiskParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadDiskParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadDiskParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadDiskParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadDiskParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadDiskParam) GetColumn() []string {
	return p.Column
}
func (p *ReadDiskParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadDiskParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadDiskParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadDiskParam) GetFormat() string {
	return p.Format
}
func (p *ReadDiskParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadDiskParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadDiskParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadDiskParam) GetQuery() string {
	return p.Query
}
func (p *ReadDiskParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadDiskParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadDiskParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadDiskParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ReadDiskParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// UpdateDiskParam is input parameters for the sacloud API
type UpdateDiskParam struct {
	Connection        string
	Selector          []string
	Name              string
	Description       string
	Tags              []string
	IconId            sacloud.ID
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewUpdateDiskParam return new UpdateDiskParam
func NewUpdateDiskParam() *UpdateDiskParam {
	return &UpdateDiskParam{}
}

// Initialize init UpdateDiskParam
func (p *UpdateDiskParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateDiskParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *UpdateDiskParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Connection) {
		p.Connection = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UpdateDiskParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Disk"].Commands["update"].Params["connection"].ValidateFunc
		errs := validator("--connection", p.Connection)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Disk"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Disk"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Disk"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Disk"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *UpdateDiskParam) ResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *UpdateDiskParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateDiskParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateDiskParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateDiskParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateDiskParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *UpdateDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *UpdateDiskParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateDiskParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateDiskParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateDiskParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateDiskParam) SetConnection(v string) {
	p.Connection = v
}

func (p *UpdateDiskParam) GetConnection() string {
	return p.Connection
}
func (p *UpdateDiskParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateDiskParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateDiskParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateDiskParam) GetName() string {
	return p.Name
}
func (p *UpdateDiskParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateDiskParam) GetDescription() string {
	return p.Description
}
func (p *UpdateDiskParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateDiskParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateDiskParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateDiskParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateDiskParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateDiskParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateDiskParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateDiskParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateDiskParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateDiskParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateDiskParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateDiskParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateDiskParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateDiskParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateDiskParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateDiskParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateDiskParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateDiskParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateDiskParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateDiskParam) GetFormat() string {
	return p.Format
}
func (p *UpdateDiskParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateDiskParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateDiskParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateDiskParam) GetQuery() string {
	return p.Query
}
func (p *UpdateDiskParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateDiskParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateDiskParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateDiskParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *UpdateDiskParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// DeleteDiskParam is input parameters for the sacloud API
type DeleteDiskParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewDeleteDiskParam return new DeleteDiskParam
func NewDeleteDiskParam() *DeleteDiskParam {
	return &DeleteDiskParam{}
}

// Initialize init DeleteDiskParam
func (p *DeleteDiskParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteDiskParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *DeleteDiskParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DeleteDiskParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *DeleteDiskParam) ResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *DeleteDiskParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteDiskParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteDiskParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteDiskParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteDiskParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *DeleteDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *DeleteDiskParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteDiskParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteDiskParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteDiskParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteDiskParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteDiskParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteDiskParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteDiskParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteDiskParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteDiskParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteDiskParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteDiskParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteDiskParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteDiskParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteDiskParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteDiskParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteDiskParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteDiskParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteDiskParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteDiskParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteDiskParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteDiskParam) GetFormat() string {
	return p.Format
}
func (p *DeleteDiskParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteDiskParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteDiskParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteDiskParam) GetQuery() string {
	return p.Query
}
func (p *DeleteDiskParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteDiskParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteDiskParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteDiskParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *DeleteDiskParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// EditDiskParam is input parameters for the sacloud API
type EditDiskParam struct {
	Hostname            string
	Password            string
	SSHKeyIds           []sacloud.ID
	DisablePasswordAuth bool
	Ipaddress           string
	DefaultRoute        string
	NwMasklen           int
	StartupScriptIds    []sacloud.ID
	Selector            []string
	Assumeyes           bool
	ParamTemplate       string
	Parameters          string
	ParamTemplateFile   string
	ParameterFile       string
	GenerateSkeleton    bool
	OutputType          string
	Column              []string
	Quiet               bool
	Format              string
	FormatFile          string
	Query               string
	QueryFile           string
	Id                  sacloud.ID

	input Input
}

// NewEditDiskParam return new EditDiskParam
func NewEditDiskParam() *EditDiskParam {
	return &EditDiskParam{
		NwMasklen: 24}
}

// Initialize init EditDiskParam
func (p *EditDiskParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *EditDiskParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *EditDiskParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Hostname) {
		p.Hostname = ""
	}
	if utils.IsEmpty(p.Password) {
		p.Password = ""
	}
	if utils.IsEmpty(p.SSHKeyIds) {
		p.SSHKeyIds = []sacloud.ID{}
	}
	if utils.IsEmpty(p.DisablePasswordAuth) {
		p.DisablePasswordAuth = false
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.DefaultRoute) {
		p.DefaultRoute = ""
	}
	if utils.IsEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}
	if utils.IsEmpty(p.StartupScriptIds) {
		p.StartupScriptIds = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *EditDiskParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Disk"].Commands["edit"].Params["ssh-key-ids"].ValidateFunc
		errs := validator("--ssh-key-ids", p.SSHKeyIds)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Disk"].Commands["edit"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Disk"].Commands["edit"].Params["startup-script-ids"].ValidateFunc
		errs := validator("--startup-script-ids", p.StartupScriptIds)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *EditDiskParam) ResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *EditDiskParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["edit"]
}

func (p *EditDiskParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *EditDiskParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *EditDiskParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *EditDiskParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *EditDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *EditDiskParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["edit"]
}

func (p *EditDiskParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *EditDiskParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *EditDiskParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *EditDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *EditDiskParam) SetHostname(v string) {
	p.Hostname = v
}

func (p *EditDiskParam) GetHostname() string {
	return p.Hostname
}
func (p *EditDiskParam) SetPassword(v string) {
	p.Password = v
}

func (p *EditDiskParam) GetPassword() string {
	return p.Password
}
func (p *EditDiskParam) SetSSHKeyIds(v []sacloud.ID) {
	p.SSHKeyIds = v
}

func (p *EditDiskParam) GetSSHKeyIds() []sacloud.ID {
	return p.SSHKeyIds
}
func (p *EditDiskParam) SetDisablePasswordAuth(v bool) {
	p.DisablePasswordAuth = v
}

func (p *EditDiskParam) GetDisablePasswordAuth() bool {
	return p.DisablePasswordAuth
}
func (p *EditDiskParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *EditDiskParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *EditDiskParam) SetDefaultRoute(v string) {
	p.DefaultRoute = v
}

func (p *EditDiskParam) GetDefaultRoute() string {
	return p.DefaultRoute
}
func (p *EditDiskParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *EditDiskParam) GetNwMasklen() int {
	return p.NwMasklen
}
func (p *EditDiskParam) SetStartupScriptIds(v []sacloud.ID) {
	p.StartupScriptIds = v
}

func (p *EditDiskParam) GetStartupScriptIds() []sacloud.ID {
	return p.StartupScriptIds
}
func (p *EditDiskParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *EditDiskParam) GetSelector() []string {
	return p.Selector
}
func (p *EditDiskParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *EditDiskParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *EditDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *EditDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *EditDiskParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *EditDiskParam) GetParameters() string {
	return p.Parameters
}
func (p *EditDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *EditDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *EditDiskParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *EditDiskParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *EditDiskParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *EditDiskParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *EditDiskParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *EditDiskParam) GetOutputType() string {
	return p.OutputType
}
func (p *EditDiskParam) SetColumn(v []string) {
	p.Column = v
}

func (p *EditDiskParam) GetColumn() []string {
	return p.Column
}
func (p *EditDiskParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *EditDiskParam) GetQuiet() bool {
	return p.Quiet
}
func (p *EditDiskParam) SetFormat(v string) {
	p.Format = v
}

func (p *EditDiskParam) GetFormat() string {
	return p.Format
}
func (p *EditDiskParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *EditDiskParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *EditDiskParam) SetQuery(v string) {
	p.Query = v
}

func (p *EditDiskParam) GetQuery() string {
	return p.Query
}
func (p *EditDiskParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *EditDiskParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *EditDiskParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *EditDiskParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *EditDiskParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// ResizePartitionDiskParam is input parameters for the sacloud API
type ResizePartitionDiskParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewResizePartitionDiskParam return new ResizePartitionDiskParam
func NewResizePartitionDiskParam() *ResizePartitionDiskParam {
	return &ResizePartitionDiskParam{}
}

// Initialize init ResizePartitionDiskParam
func (p *ResizePartitionDiskParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResizePartitionDiskParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ResizePartitionDiskParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ResizePartitionDiskParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ResizePartitionDiskParam) ResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ResizePartitionDiskParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["resize-partition"]
}

func (p *ResizePartitionDiskParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResizePartitionDiskParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResizePartitionDiskParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResizePartitionDiskParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ResizePartitionDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ResizePartitionDiskParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["resize-partition"]
}

func (p *ResizePartitionDiskParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResizePartitionDiskParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResizePartitionDiskParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResizePartitionDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ResizePartitionDiskParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ResizePartitionDiskParam) GetSelector() []string {
	return p.Selector
}
func (p *ResizePartitionDiskParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ResizePartitionDiskParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ResizePartitionDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ResizePartitionDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ResizePartitionDiskParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ResizePartitionDiskParam) GetParameters() string {
	return p.Parameters
}
func (p *ResizePartitionDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ResizePartitionDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ResizePartitionDiskParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ResizePartitionDiskParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ResizePartitionDiskParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ResizePartitionDiskParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ResizePartitionDiskParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ResizePartitionDiskParam) GetOutputType() string {
	return p.OutputType
}
func (p *ResizePartitionDiskParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ResizePartitionDiskParam) GetColumn() []string {
	return p.Column
}
func (p *ResizePartitionDiskParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ResizePartitionDiskParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ResizePartitionDiskParam) SetFormat(v string) {
	p.Format = v
}

func (p *ResizePartitionDiskParam) GetFormat() string {
	return p.Format
}
func (p *ResizePartitionDiskParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ResizePartitionDiskParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ResizePartitionDiskParam) SetQuery(v string) {
	p.Query = v
}

func (p *ResizePartitionDiskParam) GetQuery() string {
	return p.Query
}
func (p *ResizePartitionDiskParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ResizePartitionDiskParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ResizePartitionDiskParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ResizePartitionDiskParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ResizePartitionDiskParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// ReinstallFromArchiveDiskParam is input parameters for the sacloud API
type ReinstallFromArchiveDiskParam struct {
	SourceArchiveId   sacloud.ID
	DistantFrom       []sacloud.ID
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewReinstallFromArchiveDiskParam return new ReinstallFromArchiveDiskParam
func NewReinstallFromArchiveDiskParam() *ReinstallFromArchiveDiskParam {
	return &ReinstallFromArchiveDiskParam{}
}

// Initialize init ReinstallFromArchiveDiskParam
func (p *ReinstallFromArchiveDiskParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReinstallFromArchiveDiskParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ReinstallFromArchiveDiskParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.SourceArchiveId) {
		p.SourceArchiveId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.DistantFrom) {
		p.DistantFrom = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReinstallFromArchiveDiskParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--source-archive-id", p.SourceArchiveId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["reinstall-from-archive"].Params["source-archive-id"].ValidateFunc
		errs := validator("--source-archive-id", p.SourceArchiveId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Disk"].Commands["reinstall-from-archive"].Params["distant-from"].ValidateFunc
		errs := validator("--distant-from", p.DistantFrom)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ReinstallFromArchiveDiskParam) ResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ReinstallFromArchiveDiskParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["reinstall-from-archive"]
}

func (p *ReinstallFromArchiveDiskParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReinstallFromArchiveDiskParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReinstallFromArchiveDiskParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReinstallFromArchiveDiskParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ReinstallFromArchiveDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ReinstallFromArchiveDiskParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["reinstall-from-archive"]
}

func (p *ReinstallFromArchiveDiskParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReinstallFromArchiveDiskParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReinstallFromArchiveDiskParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReinstallFromArchiveDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReinstallFromArchiveDiskParam) SetSourceArchiveId(v sacloud.ID) {
	p.SourceArchiveId = v
}

func (p *ReinstallFromArchiveDiskParam) GetSourceArchiveId() sacloud.ID {
	return p.SourceArchiveId
}
func (p *ReinstallFromArchiveDiskParam) SetDistantFrom(v []sacloud.ID) {
	p.DistantFrom = v
}

func (p *ReinstallFromArchiveDiskParam) GetDistantFrom() []sacloud.ID {
	return p.DistantFrom
}
func (p *ReinstallFromArchiveDiskParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReinstallFromArchiveDiskParam) GetSelector() []string {
	return p.Selector
}
func (p *ReinstallFromArchiveDiskParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ReinstallFromArchiveDiskParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ReinstallFromArchiveDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReinstallFromArchiveDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReinstallFromArchiveDiskParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReinstallFromArchiveDiskParam) GetParameters() string {
	return p.Parameters
}
func (p *ReinstallFromArchiveDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReinstallFromArchiveDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReinstallFromArchiveDiskParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReinstallFromArchiveDiskParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReinstallFromArchiveDiskParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReinstallFromArchiveDiskParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReinstallFromArchiveDiskParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReinstallFromArchiveDiskParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ReinstallFromArchiveDiskParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// ReinstallFromDiskDiskParam is input parameters for the sacloud API
type ReinstallFromDiskDiskParam struct {
	SourceDiskId      sacloud.ID
	DistantFrom       []sacloud.ID
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewReinstallFromDiskDiskParam return new ReinstallFromDiskDiskParam
func NewReinstallFromDiskDiskParam() *ReinstallFromDiskDiskParam {
	return &ReinstallFromDiskDiskParam{}
}

// Initialize init ReinstallFromDiskDiskParam
func (p *ReinstallFromDiskDiskParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReinstallFromDiskDiskParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ReinstallFromDiskDiskParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.SourceDiskId) {
		p.SourceDiskId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.DistantFrom) {
		p.DistantFrom = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReinstallFromDiskDiskParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--source-disk-id", p.SourceDiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["reinstall-from-disk"].Params["source-disk-id"].ValidateFunc
		errs := validator("--source-disk-id", p.SourceDiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Disk"].Commands["reinstall-from-disk"].Params["distant-from"].ValidateFunc
		errs := validator("--distant-from", p.DistantFrom)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ReinstallFromDiskDiskParam) ResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ReinstallFromDiskDiskParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["reinstall-from-disk"]
}

func (p *ReinstallFromDiskDiskParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReinstallFromDiskDiskParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReinstallFromDiskDiskParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReinstallFromDiskDiskParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ReinstallFromDiskDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ReinstallFromDiskDiskParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["reinstall-from-disk"]
}

func (p *ReinstallFromDiskDiskParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReinstallFromDiskDiskParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReinstallFromDiskDiskParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReinstallFromDiskDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReinstallFromDiskDiskParam) SetSourceDiskId(v sacloud.ID) {
	p.SourceDiskId = v
}

func (p *ReinstallFromDiskDiskParam) GetSourceDiskId() sacloud.ID {
	return p.SourceDiskId
}
func (p *ReinstallFromDiskDiskParam) SetDistantFrom(v []sacloud.ID) {
	p.DistantFrom = v
}

func (p *ReinstallFromDiskDiskParam) GetDistantFrom() []sacloud.ID {
	return p.DistantFrom
}
func (p *ReinstallFromDiskDiskParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReinstallFromDiskDiskParam) GetSelector() []string {
	return p.Selector
}
func (p *ReinstallFromDiskDiskParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ReinstallFromDiskDiskParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ReinstallFromDiskDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReinstallFromDiskDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReinstallFromDiskDiskParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReinstallFromDiskDiskParam) GetParameters() string {
	return p.Parameters
}
func (p *ReinstallFromDiskDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReinstallFromDiskDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReinstallFromDiskDiskParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReinstallFromDiskDiskParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReinstallFromDiskDiskParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReinstallFromDiskDiskParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReinstallFromDiskDiskParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReinstallFromDiskDiskParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ReinstallFromDiskDiskParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// ReinstallToBlankDiskParam is input parameters for the sacloud API
type ReinstallToBlankDiskParam struct {
	DistantFrom       []sacloud.ID
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewReinstallToBlankDiskParam return new ReinstallToBlankDiskParam
func NewReinstallToBlankDiskParam() *ReinstallToBlankDiskParam {
	return &ReinstallToBlankDiskParam{}
}

// Initialize init ReinstallToBlankDiskParam
func (p *ReinstallToBlankDiskParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReinstallToBlankDiskParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ReinstallToBlankDiskParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.DistantFrom) {
		p.DistantFrom = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReinstallToBlankDiskParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Disk"].Commands["reinstall-to-blank"].Params["distant-from"].ValidateFunc
		errs := validator("--distant-from", p.DistantFrom)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ReinstallToBlankDiskParam) ResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ReinstallToBlankDiskParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["reinstall-to-blank"]
}

func (p *ReinstallToBlankDiskParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReinstallToBlankDiskParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReinstallToBlankDiskParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReinstallToBlankDiskParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ReinstallToBlankDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ReinstallToBlankDiskParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["reinstall-to-blank"]
}

func (p *ReinstallToBlankDiskParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReinstallToBlankDiskParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReinstallToBlankDiskParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReinstallToBlankDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReinstallToBlankDiskParam) SetDistantFrom(v []sacloud.ID) {
	p.DistantFrom = v
}

func (p *ReinstallToBlankDiskParam) GetDistantFrom() []sacloud.ID {
	return p.DistantFrom
}
func (p *ReinstallToBlankDiskParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReinstallToBlankDiskParam) GetSelector() []string {
	return p.Selector
}
func (p *ReinstallToBlankDiskParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ReinstallToBlankDiskParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ReinstallToBlankDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReinstallToBlankDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReinstallToBlankDiskParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReinstallToBlankDiskParam) GetParameters() string {
	return p.Parameters
}
func (p *ReinstallToBlankDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReinstallToBlankDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReinstallToBlankDiskParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReinstallToBlankDiskParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReinstallToBlankDiskParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReinstallToBlankDiskParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReinstallToBlankDiskParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReinstallToBlankDiskParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ReinstallToBlankDiskParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// ServerConnectDiskParam is input parameters for the sacloud API
type ServerConnectDiskParam struct {
	ServerId          sacloud.ID
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewServerConnectDiskParam return new ServerConnectDiskParam
func NewServerConnectDiskParam() *ServerConnectDiskParam {
	return &ServerConnectDiskParam{}
}

// Initialize init ServerConnectDiskParam
func (p *ServerConnectDiskParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerConnectDiskParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ServerConnectDiskParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.ServerId) {
		p.ServerId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ServerConnectDiskParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--server-id", p.ServerId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["server-connect"].Params["server-id"].ValidateFunc
		errs := validator("--server-id", p.ServerId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ServerConnectDiskParam) ResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ServerConnectDiskParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-connect"]
}

func (p *ServerConnectDiskParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerConnectDiskParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerConnectDiskParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerConnectDiskParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ServerConnectDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ServerConnectDiskParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-connect"]
}

func (p *ServerConnectDiskParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerConnectDiskParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerConnectDiskParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerConnectDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerConnectDiskParam) SetServerId(v sacloud.ID) {
	p.ServerId = v
}

func (p *ServerConnectDiskParam) GetServerId() sacloud.ID {
	return p.ServerId
}
func (p *ServerConnectDiskParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerConnectDiskParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerConnectDiskParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerConnectDiskParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerConnectDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerConnectDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerConnectDiskParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerConnectDiskParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerConnectDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerConnectDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerConnectDiskParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerConnectDiskParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerConnectDiskParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerConnectDiskParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerConnectDiskParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerConnectDiskParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ServerConnectDiskParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// ServerDisconnectDiskParam is input parameters for the sacloud API
type ServerDisconnectDiskParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewServerDisconnectDiskParam return new ServerDisconnectDiskParam
func NewServerDisconnectDiskParam() *ServerDisconnectDiskParam {
	return &ServerDisconnectDiskParam{}
}

// Initialize init ServerDisconnectDiskParam
func (p *ServerDisconnectDiskParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerDisconnectDiskParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ServerDisconnectDiskParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ServerDisconnectDiskParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ServerDisconnectDiskParam) ResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ServerDisconnectDiskParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-disconnect"]
}

func (p *ServerDisconnectDiskParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerDisconnectDiskParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerDisconnectDiskParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerDisconnectDiskParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ServerDisconnectDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ServerDisconnectDiskParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-disconnect"]
}

func (p *ServerDisconnectDiskParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerDisconnectDiskParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerDisconnectDiskParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerDisconnectDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerDisconnectDiskParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerDisconnectDiskParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerDisconnectDiskParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerDisconnectDiskParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerDisconnectDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerDisconnectDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerDisconnectDiskParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerDisconnectDiskParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerDisconnectDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerDisconnectDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerDisconnectDiskParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerDisconnectDiskParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerDisconnectDiskParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerDisconnectDiskParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerDisconnectDiskParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerDisconnectDiskParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ServerDisconnectDiskParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// MonitorDiskParam is input parameters for the sacloud API
type MonitorDiskParam struct {
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	End               string
	Id                sacloud.ID
	KeyFormat         string
	Start             string

	input Input
}

// NewMonitorDiskParam return new MonitorDiskParam
func NewMonitorDiskParam() *MonitorDiskParam {
	return &MonitorDiskParam{
		KeyFormat: "sakuracloud.disk.{{.ID}}.disk"}
}

// Initialize init MonitorDiskParam
func (p *MonitorDiskParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorDiskParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *MonitorDiskParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}

}

func (p *MonitorDiskParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Disk"].Commands["monitor"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Disk"].Commands["monitor"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *MonitorDiskParam) ResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *MonitorDiskParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor"]
}

func (p *MonitorDiskParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorDiskParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorDiskParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorDiskParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *MonitorDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *MonitorDiskParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor"]
}

func (p *MonitorDiskParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorDiskParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorDiskParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorDiskParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *MonitorDiskParam) GetSelector() []string {
	return p.Selector
}
func (p *MonitorDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *MonitorDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *MonitorDiskParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *MonitorDiskParam) GetParameters() string {
	return p.Parameters
}
func (p *MonitorDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *MonitorDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *MonitorDiskParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *MonitorDiskParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *MonitorDiskParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *MonitorDiskParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *MonitorDiskParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *MonitorDiskParam) GetOutputType() string {
	return p.OutputType
}
func (p *MonitorDiskParam) SetColumn(v []string) {
	p.Column = v
}

func (p *MonitorDiskParam) GetColumn() []string {
	return p.Column
}
func (p *MonitorDiskParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *MonitorDiskParam) GetQuiet() bool {
	return p.Quiet
}
func (p *MonitorDiskParam) SetFormat(v string) {
	p.Format = v
}

func (p *MonitorDiskParam) GetFormat() string {
	return p.Format
}
func (p *MonitorDiskParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *MonitorDiskParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *MonitorDiskParam) SetQuery(v string) {
	p.Query = v
}

func (p *MonitorDiskParam) GetQuery() string {
	return p.Query
}
func (p *MonitorDiskParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *MonitorDiskParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *MonitorDiskParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorDiskParam) GetEnd() string {
	return p.End
}
func (p *MonitorDiskParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *MonitorDiskParam) GetId() sacloud.ID {
	return p.Id
}
func (p *MonitorDiskParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorDiskParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorDiskParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorDiskParam) GetStart() string {
	return p.Start
}

// Changed usacloud v0系との互換性維持のための実装
func (p *MonitorDiskParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// WaitForCopyDiskParam is input parameters for the sacloud API
type WaitForCopyDiskParam struct {
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewWaitForCopyDiskParam return new WaitForCopyDiskParam
func NewWaitForCopyDiskParam() *WaitForCopyDiskParam {
	return &WaitForCopyDiskParam{}
}

// Initialize init WaitForCopyDiskParam
func (p *WaitForCopyDiskParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForCopyDiskParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *WaitForCopyDiskParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *WaitForCopyDiskParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *WaitForCopyDiskParam) ResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *WaitForCopyDiskParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-copy"]
}

func (p *WaitForCopyDiskParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForCopyDiskParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForCopyDiskParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForCopyDiskParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *WaitForCopyDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *WaitForCopyDiskParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-copy"]
}

func (p *WaitForCopyDiskParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForCopyDiskParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForCopyDiskParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForCopyDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *WaitForCopyDiskParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *WaitForCopyDiskParam) GetSelector() []string {
	return p.Selector
}
func (p *WaitForCopyDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForCopyDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForCopyDiskParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *WaitForCopyDiskParam) GetParameters() string {
	return p.Parameters
}
func (p *WaitForCopyDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForCopyDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForCopyDiskParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *WaitForCopyDiskParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *WaitForCopyDiskParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForCopyDiskParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForCopyDiskParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *WaitForCopyDiskParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *WaitForCopyDiskParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-params'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/pkg/define"
	"github.com/sacloud/usacloud/pkg/output"
	"github.com/sacloud/usacloud/pkg/schema"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
)

// ListInternetParam is input parameters for the sacloud API
type ListInternetParam struct {
	Name              []string
	Id                []sacloud.ID
	Tags              []string
	From              int
	Max               int
	Sort              []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string

	input Input
}

// NewListInternetParam return new ListInternetParam
func NewListInternetParam() *ListInternetParam {
	return &ListInternetParam{}
}

// Initialize init ListInternetParam
func (p *ListInternetParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListInternetParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ListInternetParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListInternetParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Internet"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Internet"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ListInternetParam) ResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *ListInternetParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListInternetParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListInternetParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListInternetParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListInternetParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ListInternetParam) GetResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *ListInternetParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListInternetParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListInternetParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListInternetParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListInternetParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListInternetParam) SetName(v []string) {
	p.Name = v
}

func (p *ListInternetParam) GetName() []string {
	return p.Name
}
func (p *ListInternetParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListInternetParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListInternetParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListInternetParam) GetTags() []string {
	return p.Tags
}
func (p *ListInternetParam) SetFrom(v int) {
	p.From = v
}

func (p *ListInternetParam) GetFrom() int {
	return p.From
}
func (p *ListInternetParam) SetMax(v int) {
	p.Max = v
}

func (p *ListInternetParam) GetMax() int {
	return p.Max
}
func (p *ListInternetParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListInternetParam) GetSort() []string {
	return p.Sort
}
func (p *ListInternetParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListInternetParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListInternetParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListInternetParam) GetParameters() string {
	return p.Parameters
}
func (p *ListInternetParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListInternetParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListInternetParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListInternetParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListInternetParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListInternetParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListInternetParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListInternetParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListInternetParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListInternetParam) GetColumn() []string {
	return p.Column
}
func (p *ListInternetParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListInternetParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListInternetParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListInternetParam) GetFormat() string {
	return p.Format
}
func (p *ListInternetParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListInternetParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListInternetParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListInternetParam) GetQuery() string {
	return p.Query
}
func (p *ListInternetParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListInternetParam) GetQueryFile() string {
	return p.QueryFile
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ListInternetParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// CreateInternetParam is input parameters for the sacloud API
type CreateInternetParam struct {
	NwMasklen         int
	BandWidth         int
	Name              string
	Description       string
	Tags              []string
	IconId            sacloud.ID
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string

	input Input
}

// NewCreateInternetParam return new CreateInternetParam
func NewCreateInternetParam() *CreateInternetParam {
	return &CreateInternetParam{
		NwMasklen: 28, BandWidth: 100}
}

// Initialize init CreateInternetParam
func (p *CreateInternetParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateInternetParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *CreateInternetParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}
	if utils.IsEmpty(p.BandWidth) {
		p.BandWidth = 0
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *CreateInternetParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Internet"].Commands["create"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--band-width", p.BandWidth)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Internet"].Commands["create"].Params["band-width"].ValidateFunc
		errs := validator("--band-width", p.BandWidth)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Internet"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Internet"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Internet"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Internet"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *CreateInternetParam) ResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *CreateInternetParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateInternetParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateInternetParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateInternetParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateInternetParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *CreateInternetParam) GetResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *CreateInternetParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateInternetParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateInternetParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateInternetParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateInternetParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateInternetParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *CreateInternetParam) GetNwMasklen() int {
	return p.NwMasklen
}
func (p *CreateInternetParam) SetBandWidth(v int) {
	p.BandWidth = v
}

func (p *CreateInternetParam) GetBandWidth() int {
	return p.BandWidth
}
func (p *CreateInternetParam) SetName(v string) {
	p.Name = v
}

func (p *CreateInternetParam) GetName() string {
	return p.Name
}
func (p *CreateInternetParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateInternetParam) GetDescription() string {
	return p.Description
}
func (p *CreateInternetParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateInternetParam) GetTags() []string {
	return p.Tags
}
func (p *CreateInternetParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateInternetParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateInternetParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateInternetParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateInternetParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateInternetParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateInternetParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateInternetParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateInternetParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateInternetParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateInternetParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateInternetParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateInternetParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateInternetParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateInternetParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateInternetParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateInternetParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateInternetParam) GetColumn() []string {
	return p.Column
}
func (p *CreateInternetParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateInternetParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateInternetParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateInternetParam) GetFormat() string {
	return p.Format
}
func (p *CreateInternetParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateInternetParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateInternetParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateInternetParam) GetQuery() string {
	return p.Query
}
func (p *CreateInternetParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateInternetParam) GetQueryFile() string {
	return p.QueryFile
}

// Changed usacloud v0系との互換性維持のための実装
func (p *CreateInternetParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// ReadInternetParam is input parameters for the sacloud API
type ReadInternetParam struct {
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewReadInternetParam return new ReadInternetParam
func NewReadInternetParam() *ReadInternetParam {
	return &ReadInternetParam{}
}

// Initialize init ReadInternetParam
func (p *ReadInternetParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadInternetParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ReadInternetParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReadInternetParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ReadInternetParam) ResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *ReadInternetParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadInternetParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadInternetParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadInternetParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadInternetParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ReadInternetParam) GetResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *ReadInternetParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadInternetParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadInternetParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadInternetParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadInternetParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReadInternetParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadInternetParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadInternetParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadInternetParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadInternetParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadInternetParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadInternetParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadInternetParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadInternetParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadInternetParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadInternetParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadInternetParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadInternetParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadInternetParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadInternetParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadInternetParam) GetColumn() []string {
	return p.Column
}
func (p *ReadInternetParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadInternetParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadInternetParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadInternetParam) GetFormat() string {
	return p.Format
}
func (p *ReadInternetParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadInternetParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadInternetParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadInternetParam) GetQuery() string {
	return p.Query
}
func (p *ReadInternetParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadInternetParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadInternetParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadInternetParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ReadInternetParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// UpdateInternetParam is input parameters for the sacloud API
type UpdateInternetParam struct {
	BandWidth         int
	Selector          []string
	Name              string
	Description       string
	Tags              []string
	IconId            sacloud.ID
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewUpdateInternetParam return new UpdateInternetParam
func NewUpdateInternetParam() *UpdateInternetParam {
	return &UpdateInternetParam{}
}

// Initialize init UpdateInternetParam
func (p *UpdateInternetParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateInternetParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *UpdateInternetParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.BandWidth) {
		p.BandWidth = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UpdateInternetParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Internet"].Commands["update"].Params["band-width"].ValidateFunc
		errs := validator("--band-width", p.BandWidth)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Internet"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Internet"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Internet"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Internet"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *UpdateInternetParam) ResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *UpdateInternetParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateInternetParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateInternetParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateInternetParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateInternetParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *UpdateInternetParam) GetResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *UpdateInternetParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateInternetParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateInternetParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateInternetParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateInternetParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateInternetParam) SetBandWidth(v int) {
	p.BandWidth = v
}

func (p *UpdateInternetParam) GetBandWidth() int {
	return p.BandWidth
}
func (p *UpdateInternetParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateInternetParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateInternetParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateInternetParam) GetName() string {
	return p.Name
}
func (p *UpdateInternetParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateInternetParam) GetDescription() string {
	return p.Description
}
func (p *UpdateInternetParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateInternetParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateInternetParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateInternetParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateInternetParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateInternetParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateInternetParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateInternetParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateInternetParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateInternetParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateInternetParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateInternetParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateInternetParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateInternetParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateInternetParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateInternetParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateInternetParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateInternetParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateInternetParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateInternetParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateInternetParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateInternetParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateInternetParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateInternetParam) GetFormat() string {
	return p.Format
}
func (p *UpdateInternetParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateInternetParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateInternetParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateInternetParam) GetQuery() string {
	return p.Query
}
func (p *UpdateInternetParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateInternetParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateInternetParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateInternetParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *UpdateInternetParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// DeleteInternetParam is input parameters for the sacloud API
type DeleteInternetParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewDeleteInternetParam return new DeleteInternetParam
func NewDeleteInternetParam() *DeleteInternetParam {
	return &DeleteInternetParam{}
}

// Initialize init DeleteInternetParam
func (p *DeleteInternetParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteInternetParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *DeleteInternetParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DeleteInternetParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *DeleteInternetParam) ResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *DeleteInternetParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteInternetParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteInternetParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteInternetParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteInternetParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *DeleteInternetParam) GetResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *DeleteInternetParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteInternetParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteInternetParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteInternetParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteInternetParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteInternetParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteInternetParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteInternetParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteInternetParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteInternetParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteInternetParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteInternetParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteInternetParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteInternetParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteInternetParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteInternetParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteInternetParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteInternetParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteInternetParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteInternetParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteInternetParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteInternetParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteInternetParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteInternetParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteInternetParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteInternetParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteInternetParam) GetFormat() string {
	return p.Format
}
func (p *DeleteInternetParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteInternetParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteInternetParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteInternetParam) GetQuery() string {
	return p.Query
}
func (p *DeleteInternetParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteInternetParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteInternetParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteInternetParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *DeleteInternetParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// UpdateBandwidthInternetParam is input parameters for the sacloud API
type UpdateBandwidthInternetParam struct {
	BandWidth         int
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewUpdateBandwidthInternetParam return new UpdateBandwidthInternetParam
func NewUpdateBandwidthInternetParam() *UpdateBandwidthInternetParam {
	return &UpdateBandwidthInternetParam{
		BandWidth: 100}
}

// Initialize init UpdateBandwidthInternetParam
func (p *UpdateBandwidthInternetParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateBandwidthInternetParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *UpdateBandwidthInternetParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.BandWidth) {
		p.BandWidth = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UpdateBandwidthInternetParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--band-width", p.BandWidth)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Internet"].Commands["update-bandwidth"].Params["band-width"].ValidateFunc
		errs := validator("--band-width", p.BandWidth)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *UpdateBandwidthInternetParam) ResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *UpdateBandwidthInternetParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update-bandwidth"]
}

func (p *UpdateBandwidthInternetParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateBandwidthInternetParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateBandwidthInternetParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateBandwidthInternetParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *UpdateBandwidthInternetParam) GetResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *UpdateBandwidthInternetParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["update-bandwidth"]
}

func (p *UpdateBandwidthInternetParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateBandwidthInternetParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateBandwidthInternetParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateBandwidthInternetParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateBandwidthInternetParam) SetBandWidth(v int) {
	p.BandWidth = v
}

func (p *UpdateBandwidthInternetParam) GetBandWidth() int {
	return p.BandWidth
}
func (p *UpdateBandwidthInternetParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateBandwidthInternetParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateBandwidthInternetParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateBandwidthInternetParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateBandwidthInternetParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateBandwidthInternetParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateBandwidthInternetParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateBandwidthInternetParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateBandwidthInternetParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateBandwidthInternetParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateBandwidthInternetParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateBandwidthInternetParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateBandwidthInternetParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateBandwidthInternetParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateBandwidthInternetParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateBandwidthInternetParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateBandwidthInternetParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateBandwidthInternetParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateBandwidthInternetParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateBandwidthInternetParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateBandwidthInternetParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateBandwidthInternetParam) GetFormat() string {
	return p.Format
}
func (p *UpdateBandwidthInternetParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateBandwidthInternetParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateBandwidthInternetParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateBandwidthInternetParam) GetQuery() string {
	return p.Query
}
func (p *UpdateBandwidthInternetParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateBandwidthInternetParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateBandwidthInternetParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateBandwidthInternetParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *UpdateBandwidthInternetParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// SubnetInfoInternetParam is input parameters for the sacloud API
type SubnetInfoInternetParam struct {
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewSubnetInfoInternetParam return new SubnetInfoInternetParam
func NewSubnetInfoInternetParam() *SubnetInfoInternetParam {
	return &SubnetInfoInternetParam{}
}

// Initialize init SubnetInfoInternetParam
func (p *SubnetInfoInternetParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SubnetInfoInternetParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *SubnetInfoInternetParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *SubnetInfoInternetParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *SubnetInfoInternetParam) ResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *SubnetInfoInternetParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["subnet-info"]
}

func (p *SubnetInfoInternetParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SubnetInfoInternetParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SubnetInfoInternetParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SubnetInfoInternetParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *SubnetInfoInternetParam) GetResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *SubnetInfoInternetParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["subnet-info"]
}

func (p *SubnetInfoInternetParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SubnetInfoInternetParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SubnetInfoInternetParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SubnetInfoInternetParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SubnetInfoInternetParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SubnetInfoInternetParam) GetSelector() []string {
	return p.Selector
}
func (p *SubnetInfoInternetParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SubnetInfoInternetParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SubnetInfoInternetParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SubnetInfoInternetParam) GetParameters() string {
	return p.Parameters
}
func (p *SubnetInfoInternetParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SubnetInfoInternetParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SubnetInfoInternetParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SubnetInfoInternetParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SubnetInfoInternetParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SubnetInfoInternetParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SubnetInfoInternetParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *SubnetInfoInternetParam) GetOutputType() string {
	return p.OutputType
}
func (p *SubnetInfoInternetParam) SetColumn(v []string) {
	p.Column = v
}

func (p *SubnetInfoInternetParam) GetColumn() []string {
	return p.Column
}
func (p *SubnetInfoInternetParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *SubnetInfoInternetParam) GetQuiet() bool {
	return p.Quiet
}
func (p *SubnetInfoInternetParam) SetFormat(v string) {
	p.Format = v
}

func (p *SubnetInfoInternetParam) GetFormat() string {
	return p.Format
}
func (p *SubnetInfoInternetParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *SubnetInfoInternetParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *SubnetInfoInternetParam) SetQuery(v string) {
	p.Query = v
}

func (p *SubnetInfoInternetParam) GetQuery() string {
	return p.Query
}
func (p *SubnetInfoInternetParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *SubnetInfoInternetParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *SubnetInfoInternetParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SubnetInfoInternetParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *SubnetInfoInternetParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// SubnetAddInternetParam is input parameters for the sacloud API
type SubnetAddInternetParam struct {
	NextHop           string
	NwMasklen         int
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewSubnetAddInternetParam return new SubnetAddInternetParam
func NewSubnetAddInternetParam() *SubnetAddInternetParam {
	return &SubnetAddInternetParam{
		NwMasklen: 28}
}

// Initialize init SubnetAddInternetParam
func (p *SubnetAddInternetParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SubnetAddInternetParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *SubnetAddInternetParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.NextHop) {
		p.NextHop = ""
	}
	if utils.IsEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *SubnetAddInternetParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Internet"].Commands["subnet-add"].Params["next-hop"].ValidateFunc
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Internet"].Commands["subnet-add"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *SubnetAddInternetParam) ResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *SubnetAddInternetParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["subnet-add"]
}

func (p *SubnetAddInternetParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SubnetAddInternetParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SubnetAddInternetParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SubnetAddInternetParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *SubnetAddInternetParam) GetResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *SubnetAddInternetParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["subnet-add"]
}

func (p *SubnetAddInternetParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SubnetAddInternetParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SubnetAddInternetParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SubnetAddInternetParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SubnetAddInternetParam) SetNextHop(v string) {
	p.NextHop = v
}

func (p *SubnetAddInternetParam) GetNextHop() string {
	return p.NextHop
}
func (p *SubnetAddInternetParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *SubnetAddInternetParam) GetNwMasklen() int {
	return p.NwMasklen
}
func (p *SubnetAddInternetParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SubnetAddInternetParam) GetSelector() []string {
	return p.Selector
}
func (p *SubnetAddInternetParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SubnetAddInternetParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SubnetAddInternetParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SubnetAddInternetParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SubnetAddInternetParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SubnetAddInternetParam) GetParameters() string {
	return p.Parameters
}
func (p *SubnetAddInternetParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SubnetAddInternetParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SubnetAddInternetParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SubnetAddInternetParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SubnetAddInternetParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SubnetAddInternetParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SubnetAddInternetParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *SubnetAddInternetParam) GetOutputType() string {
	return p.OutputType
}
func (p *SubnetAddInternetParam) SetColumn(v []string) {
	p.Column = v
}

func (p *SubnetAddInternetParam) GetColumn() []string {
	return p.Column
}
func (p *SubnetAddInternetParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *SubnetAddInternetParam) GetQuiet() bool {
	return p.Quiet
}
func (p *SubnetAddInternetParam) SetFormat(v string) {
	p.Format = v
}

func (p *SubnetAddInternetParam) GetFormat() string {
	return p.Format
}
func (p *SubnetAddInternetParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *SubnetAddInternetParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *SubnetAddInternetParam) SetQuery(v string) {
	p.Query = v
}

func (p *SubnetAddInternetParam) GetQuery() string {
	return p.Query
}
func (p *SubnetAddInternetParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *SubnetAddInternetParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *SubnetAddInternetParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SubnetAddInternetParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *SubnetAddInternetParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// SubnetDeleteInternetParam is input parameters for the sacloud API
type SubnetDeleteInternetParam struct {
	SubnetId          sacloud.ID
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewSubnetDeleteInternetParam return new SubnetDeleteInternetParam
func NewSubnetDeleteInternetParam() *SubnetDeleteInternetParam {
	return &SubnetDeleteInternetParam{}
}

// Initialize init SubnetDeleteInternetParam
func (p *SubnetDeleteInternetParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SubnetDeleteInternetParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *SubnetDeleteInternetParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.SubnetId) {
		p.SubnetId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *SubnetDeleteInternetParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Internet"].Commands["subnet-delete"].Params["subnet-id"].ValidateFunc
		errs := validator("--subnet-id", p.SubnetId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *SubnetDeleteInternetParam) ResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *SubnetDeleteInternetParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["subnet-delete"]
}

func (p *SubnetDeleteInternetParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SubnetDeleteInternetParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SubnetDeleteInternetParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SubnetDeleteInternetParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *SubnetDeleteInternetParam) GetResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *SubnetDeleteInternetParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["subnet-delete"]
}

func (p *SubnetDeleteInternetParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SubnetDeleteInternetParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SubnetDeleteInternetParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SubnetDeleteInternetParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SubnetDeleteInternetParam) SetSubnetId(v sacloud.ID) {
	p.SubnetId = v
}

func (p *SubnetDeleteInternetParam) GetSubnetId() sacloud.ID {
	return p.SubnetId
}
func (p *SubnetDeleteInternetParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SubnetDeleteInternetParam) GetSelector() []string {
	return p.Selector
}
func (p *SubnetDeleteInternetParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SubnetDeleteInternetParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SubnetDeleteInternetParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SubnetDeleteInternetParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SubnetDeleteInternetParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SubnetDeleteInternetParam) GetParameters() string {
	return p.Parameters
}
func (p *SubnetDeleteInternetParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SubnetDeleteInternetParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SubnetDeleteInternetParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SubnetDeleteInternetParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SubnetDeleteInternetParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SubnetDeleteInternetParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SubnetDeleteInternetParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SubnetDeleteInternetParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *SubnetDeleteInternetParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// SubnetUpdateInternetParam is input parameters for the sacloud API
type SubnetUpdateInternetParam struct {
	NextHop           string
	SubnetId          sacloud.ID
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewSubnetUpdateInternetParam return new SubnetUpdateInternetParam
func NewSubnetUpdateInternetParam() *SubnetUpdateInternetParam {
	return &SubnetUpdateInternetParam{}
}

// Initialize init SubnetUpdateInternetParam
func (p *SubnetUpdateInternetParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SubnetUpdateInternetParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *SubnetUpdateInternetParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.NextHop) {
		p.NextHop = ""
	}
	if utils.IsEmpty(p.SubnetId) {
		p.SubnetId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *SubnetUpdateInternetParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Internet"].Commands["subnet-update"].Params["next-hop"].ValidateFunc
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Internet"].Commands["subnet-update"].Params["subnet-id"].ValidateFunc
		errs := validator("--subnet-id", p.SubnetId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *SubnetUpdateInternetParam) ResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *SubnetUpdateInternetParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["subnet-update"]
}

func (p *SubnetUpdateInternetParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SubnetUpdateInternetParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SubnetUpdateInternetParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SubnetUpdateInternetParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *SubnetUpdateInternetParam) GetResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *SubnetUpdateInternetParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["subnet-update"]
}

func (p *SubnetUpdateInternetParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SubnetUpdateInternetParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SubnetUpdateInternetParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SubnetUpdateInternetParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SubnetUpdateInternetParam) SetNextHop(v string) {
	p.NextHop = v
}

func (p *SubnetUpdateInternetParam) GetNextHop() string {
	return p.NextHop
}
func (p *SubnetUpdateInternetParam) SetSubnetId(v sacloud.ID) {
	p.SubnetId = v
}

func (p *SubnetUpdateInternetParam) GetSubnetId() sacloud.ID {
	return p.SubnetId
}
func (p *SubnetUpdateInternetParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SubnetUpdateInternetParam) GetSelector() []string {
	return p.Selector
}
func (p *SubnetUpdateInternetParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SubnetUpdateInternetParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SubnetUpdateInternetParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SubnetUpdateInternetParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SubnetUpdateInternetParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SubnetUpdateInternetParam) GetParameters() string {
	return p.Parameters
}
func (p *SubnetUpdateInternetParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SubnetUpdateInternetParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SubnetUpdateInternetParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SubnetUpdateInternetParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SubnetUpdateInternetParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SubnetUpdateInternetParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SubnetUpdateInternetParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *SubnetUpdateInternetParam) GetOutputType() string {
	return p.OutputType
}
func (p *SubnetUpdateInternetParam) SetColumn(v []string) {
	p.Column = v
}

func (p *SubnetUpdateInternetParam) GetColumn() []string {
	return p.Column
}
func (p *SubnetUpdateInternetParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *SubnetUpdateInternetParam) GetQuiet() bool {
	return p.Quiet
}
func (p *SubnetUpdateInternetParam) SetFormat(v string) {
	p.Format = v
}

func (p *SubnetUpdateInternetParam) GetFormat() string {
	return p.Format
}
func (p *SubnetUpdateInternetParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *SubnetUpdateInternetParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *SubnetUpdateInternetParam) SetQuery(v string) {
	p.Query = v
}

func (p *SubnetUpdateInternetParam) GetQuery() string {
	return p.Query
}
func (p *SubnetUpdateInternetParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *SubnetUpdateInternetParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *SubnetUpdateInternetParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SubnetUpdateInternetParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *SubnetUpdateInternetParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// IPv6InfoInternetParam is input parameters for the sacloud API
type IPv6InfoInternetParam struct {
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewIPv6InfoInternetParam return new IPv6InfoInternetParam
func NewIPv6InfoInternetParam() *IPv6InfoInternetParam {
	return &IPv6InfoInternetParam{}
}

// Initialize init IPv6InfoInternetParam
func (p *IPv6InfoInternetParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *IPv6InfoInternetParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *IPv6InfoInternetParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *IPv6InfoInternetParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *IPv6InfoInternetParam) ResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *IPv6InfoInternetParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ipv6-info"]
}

func (p *IPv6InfoInternetParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *IPv6InfoInternetParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *IPv6InfoInternetParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *IPv6InfoInternetParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *IPv6InfoInternetParam) GetResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *IPv6InfoInternetParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["ipv6-info"]
}

func (p *IPv6InfoInternetParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *IPv6InfoInternetParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *IPv6InfoInternetParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *IPv6InfoInternetParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *IPv6InfoInternetParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *IPv6InfoInternetParam) GetSelector() []string {
	return p.Selector
}
func (p *IPv6InfoInternetParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *IPv6InfoInternetParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *IPv6InfoInternetParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *IPv6InfoInternetParam) GetParameters() string {
	return p.Parameters
}
func (p *IPv6InfoInternetParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *IPv6InfoInternetParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *IPv6InfoInternetParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *IPv6InfoInternetParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *IPv6InfoInternetParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *IPv6InfoInternetParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *IPv6InfoInternetParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *IPv6InfoInternetParam) GetOutputType() string {
	return p.OutputType
}
func (p *IPv6InfoInternetParam) SetColumn(v []string) {
	p.Column = v
}

func (p *IPv6InfoInternetParam) GetColumn() []string {
	return p.Column
}
func (p *IPv6InfoInternetParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *IPv6InfoInternetParam) GetQuiet() bool {
	return p.Quiet
}
func (p *IPv6InfoInternetParam) SetFormat(v string) {
	p.Format = v
}

func (p *IPv6InfoInternetParam) GetFormat() string {
	return p.Format
}
func (p *IPv6InfoInternetParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *IPv6InfoInternetParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *IPv6InfoInternetParam) SetQuery(v string) {
	p.Query = v
}

func (p *IPv6InfoInternetParam) GetQuery() string {
	return p.Query
}
func (p *IPv6InfoInternetParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *IPv6InfoInternetParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *IPv6InfoInternetParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *IPv6InfoInternetParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *IPv6InfoInternetParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// IPv6EnableInternetParam is input parameters for the sacloud API
type IPv6EnableInternetParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewIPv6EnableInternetParam return new IPv6EnableInternetParam
func NewIPv6EnableInternetParam() *IPv6EnableInternetParam {
	return &IPv6EnableInternetParam{}
}

// Initialize init IPv6EnableInternetParam
func (p *IPv6EnableInternetParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *IPv6EnableInternetParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *IPv6EnableInternetParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *IPv6EnableInternetParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *IPv6EnableInternetParam) ResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *IPv6EnableInternetParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ipv6-enable"]
}

func (p *IPv6EnableInternetParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *IPv6EnableInternetParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *IPv6EnableInternetParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *IPv6EnableInternetParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *IPv6EnableInternetParam) GetResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *IPv6EnableInternetParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["ipv6-enable"]
}

func (p *IPv6EnableInternetParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *IPv6EnableInternetParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *IPv6EnableInternetParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *IPv6EnableInternetParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *IPv6EnableInternetParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *IPv6EnableInternetParam) GetSelector() []string {
	return p.Selector
}
func (p *IPv6EnableInternetParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *IPv6EnableInternetParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *IPv6EnableInternetParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *IPv6EnableInternetParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *IPv6EnableInternetParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *IPv6EnableInternetParam) GetParameters() string {
	return p.Parameters
}
func (p *IPv6EnableInternetParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *IPv6EnableInternetParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *IPv6EnableInternetParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *IPv6EnableInternetParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *IPv6EnableInternetParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *IPv6EnableInternetParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *IPv6EnableInternetParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *IPv6EnableInternetParam) GetOutputType() string {
	return p.OutputType
}
func (p *IPv6EnableInternetParam) SetColumn(v []string) {
	p.Column = v
}

func (p *IPv6EnableInternetParam) GetColumn() []string {
	return p.Column
}
func (p *IPv6EnableInternetParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *IPv6EnableInternetParam) GetQuiet() bool {
	return p.Quiet
}
func (p *IPv6EnableInternetParam) SetFormat(v string) {
	p.Format = v
}

func (p *IPv6EnableInternetParam) GetFormat() string {
	return p.Format
}
func (p *IPv6EnableInternetParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *IPv6EnableInternetParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *IPv6EnableInternetParam) SetQuery(v string) {
	p.Query = v
}

func (p *IPv6EnableInternetParam) GetQuery() string {
	return p.Query
}
func (p *IPv6EnableInternetParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *IPv6EnableInternetParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *IPv6EnableInternetParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *IPv6EnableInternetParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *IPv6EnableInternetParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// IPv6DisableInternetParam is input parameters for the sacloud API
type IPv6DisableInternetParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewIPv6DisableInternetParam return new IPv6DisableInternetParam
func NewIPv6DisableInternetParam() *IPv6DisableInternetParam {
	return &IPv6DisableInternetParam{}
}

// Initialize init IPv6DisableInternetParam
func (p *IPv6DisableInternetParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *IPv6DisableInternetParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *IPv6DisableInternetParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *IPv6DisableInternetParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *IPv6DisableInternetParam) ResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *IPv6DisableInternetParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ipv6-disable"]
}

func (p *IPv6DisableInternetParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *IPv6DisableInternetParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *IPv6DisableInternetParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *IPv6DisableInternetParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *IPv6DisableInternetParam) GetResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *IPv6DisableInternetParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["ipv6-disable"]
}

func (p *IPv6DisableInternetParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *IPv6DisableInternetParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *IPv6DisableInternetParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *IPv6DisableInternetParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *IPv6DisableInternetParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *IPv6DisableInternetParam) GetSelector() []string {
	return p.Selector
}
func (p *IPv6DisableInternetParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *IPv6DisableInternetParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *IPv6DisableInternetParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *IPv6DisableInternetParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *IPv6DisableInternetParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *IPv6DisableInternetParam) GetParameters() string {
	return p.Parameters
}
func (p *IPv6DisableInternetParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *IPv6DisableInternetParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *IPv6DisableInternetParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *IPv6DisableInternetParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *IPv6DisableInternetParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *IPv6DisableInternetParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *IPv6DisableInternetParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *IPv6DisableInternetParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *IPv6DisableInternetParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// MonitorInternetParam is input parameters for the sacloud API
type MonitorInternetParam struct {
	Start             string
	End               string
	KeyFormat         string
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewMonitorInternetParam return new MonitorInternetParam
func NewMonitorInternetParam() *MonitorInternetParam {
	return &MonitorInternetParam{
		KeyFormat: "sakuracloud.internet.{{.ID}}.nic"}
}

// Initialize init MonitorInternetParam
func (p *MonitorInternetParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorInternetParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *MonitorInternetParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *MonitorInternetParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Internet"].Commands["monitor"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Internet"].Commands["monitor"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *MonitorInternetParam) ResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *MonitorInternetParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor"]
}

func (p *MonitorInternetParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorInternetParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorInternetParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorInternetParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *MonitorInternetParam) GetResourceDef() *schema.Resource {
	return define.Resources["Internet"]
}

func (p *MonitorInternetParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor"]
}

func (p *MonitorInternetParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorInternetParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorInternetParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorInternetParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorInternetParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorInternetParam) GetStart() string {
	return p.Start
}
func (p *MonitorInternetParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorInternetParam) GetEnd() string {
	return p.End
}
func (p *MonitorInternetParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorInternetParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorInternetParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *MonitorInternetParam) GetSelector() []string {
	return p.Selector
}
func (p *MonitorInternetParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *MonitorInternetParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *MonitorInternetParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *MonitorInternetParam) GetParameters() string {
	return p.Parameters
}
func (p *MonitorInternetParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *MonitorInternetParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *MonitorInternetParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *MonitorInternetParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *MonitorInternetParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *MonitorInternetParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *MonitorInternetParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *MonitorInternetParam) GetOutputType() string {
	return p.OutputType
}
func (p *MonitorInternetParam) SetColumn(v []string) {
	p.Column = v
}

func (p *MonitorInternetParam) GetColumn() []string {
	return p.Column
}
func (p *MonitorInternetParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *MonitorInternetParam) GetQuiet() bool {
	return p.Quiet
}
func (p *MonitorInternetParam) SetFormat(v string) {
	p.Format = v
}

func (p *MonitorInternetParam) GetFormat() string {
	return p.Format
}
func (p *MonitorInternetParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *MonitorInternetParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *MonitorInternetParam) SetQuery(v string) {
	p.Query = v
}

func (p *MonitorInternetParam) GetQuery() string {
	return p.Query
}
func (p *MonitorInternetParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *MonitorInternetParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *MonitorInternetParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *MonitorInternetParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *MonitorInternetParam) Changed(name string) bool {
	return p.input.Changed(name)
}

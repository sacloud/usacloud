// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-params'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/pkg/define"
	"github.com/sacloud/usacloud/pkg/output"
	"github.com/sacloud/usacloud/pkg/schema"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
)

// ListSIMParam is input parameters for the sacloud API
type ListSIMParam struct {
	Name              []string
	Id                []sacloud.ID
	Tags              []string
	From              int
	Max               int
	Sort              []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string

	input Input
}

// NewListSIMParam return new ListSIMParam
func NewListSIMParam() *ListSIMParam {
	return &ListSIMParam{}
}

// Initialize init ListSIMParam
func (p *ListSIMParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ListSIMParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListSIMParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ListSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ListSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ListSIMParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ListSIMParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListSIMParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListSIMParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListSIMParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListSIMParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListSIMParam) SetName(v []string) {
	p.Name = v
}

func (p *ListSIMParam) GetName() []string {
	return p.Name
}
func (p *ListSIMParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListSIMParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListSIMParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListSIMParam) GetTags() []string {
	return p.Tags
}
func (p *ListSIMParam) SetFrom(v int) {
	p.From = v
}

func (p *ListSIMParam) GetFrom() int {
	return p.From
}
func (p *ListSIMParam) SetMax(v int) {
	p.Max = v
}

func (p *ListSIMParam) GetMax() int {
	return p.Max
}
func (p *ListSIMParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListSIMParam) GetSort() []string {
	return p.Sort
}
func (p *ListSIMParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListSIMParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListSIMParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListSIMParam) GetParameters() string {
	return p.Parameters
}
func (p *ListSIMParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListSIMParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListSIMParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListSIMParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListSIMParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListSIMParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListSIMParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListSIMParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListSIMParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListSIMParam) GetColumn() []string {
	return p.Column
}
func (p *ListSIMParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListSIMParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListSIMParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListSIMParam) GetFormat() string {
	return p.Format
}
func (p *ListSIMParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListSIMParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListSIMParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListSIMParam) GetQuery() string {
	return p.Query
}
func (p *ListSIMParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListSIMParam) GetQueryFile() string {
	return p.QueryFile
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ListSIMParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// CreateSIMParam is input parameters for the sacloud API
type CreateSIMParam struct {
	Iccid             string
	Passcode          string
	Disabled          bool
	Imei              string
	Carrier           []string
	Name              string
	Description       string
	Tags              []string
	IconId            sacloud.ID
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string

	input Input
}

// NewCreateSIMParam return new CreateSIMParam
func NewCreateSIMParam() *CreateSIMParam {
	return &CreateSIMParam{}
}

// Initialize init CreateSIMParam
func (p *CreateSIMParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *CreateSIMParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Iccid) {
		p.Iccid = ""
	}
	if utils.IsEmpty(p.Passcode) {
		p.Passcode = ""
	}
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.Imei) {
		p.Imei = ""
	}
	if utils.IsEmpty(p.Carrier) {
		p.Carrier = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *CreateSIMParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--iccid", p.Iccid)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--passcode", p.Passcode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--carrier", p.Carrier)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["create"].Params["carrier"].ValidateFunc
		errs := validator("--carrier", p.Carrier)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.SliceLenBetween("--carrier", p.Carrier, 1, 3)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *CreateSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *CreateSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *CreateSIMParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *CreateSIMParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateSIMParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateSIMParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateSIMParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateSIMParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateSIMParam) SetIccid(v string) {
	p.Iccid = v
}

func (p *CreateSIMParam) GetIccid() string {
	return p.Iccid
}
func (p *CreateSIMParam) SetPasscode(v string) {
	p.Passcode = v
}

func (p *CreateSIMParam) GetPasscode() string {
	return p.Passcode
}
func (p *CreateSIMParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *CreateSIMParam) GetDisabled() bool {
	return p.Disabled
}
func (p *CreateSIMParam) SetImei(v string) {
	p.Imei = v
}

func (p *CreateSIMParam) GetImei() string {
	return p.Imei
}
func (p *CreateSIMParam) SetCarrier(v []string) {
	p.Carrier = v
}

func (p *CreateSIMParam) GetCarrier() []string {
	return p.Carrier
}
func (p *CreateSIMParam) SetName(v string) {
	p.Name = v
}

func (p *CreateSIMParam) GetName() string {
	return p.Name
}
func (p *CreateSIMParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateSIMParam) GetDescription() string {
	return p.Description
}
func (p *CreateSIMParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateSIMParam) GetTags() []string {
	return p.Tags
}
func (p *CreateSIMParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateSIMParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateSIMParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateSIMParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateSIMParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateSIMParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateSIMParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateSIMParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateSIMParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateSIMParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateSIMParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateSIMParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateSIMParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateSIMParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateSIMParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateSIMParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateSIMParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateSIMParam) GetColumn() []string {
	return p.Column
}
func (p *CreateSIMParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateSIMParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateSIMParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateSIMParam) GetFormat() string {
	return p.Format
}
func (p *CreateSIMParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateSIMParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateSIMParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateSIMParam) GetQuery() string {
	return p.Query
}
func (p *CreateSIMParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateSIMParam) GetQueryFile() string {
	return p.QueryFile
}

// Changed usacloud v0系との互換性維持のための実装
func (p *CreateSIMParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// ReadSIMParam is input parameters for the sacloud API
type ReadSIMParam struct {
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewReadSIMParam return new ReadSIMParam
func NewReadSIMParam() *ReadSIMParam {
	return &ReadSIMParam{}
}

// Initialize init ReadSIMParam
func (p *ReadSIMParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ReadSIMParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReadSIMParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ReadSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ReadSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ReadSIMParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ReadSIMParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadSIMParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadSIMParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadSIMParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadSIMParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReadSIMParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadSIMParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadSIMParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadSIMParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadSIMParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadSIMParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadSIMParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadSIMParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadSIMParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadSIMParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadSIMParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadSIMParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadSIMParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadSIMParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadSIMParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadSIMParam) GetColumn() []string {
	return p.Column
}
func (p *ReadSIMParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadSIMParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadSIMParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadSIMParam) GetFormat() string {
	return p.Format
}
func (p *ReadSIMParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadSIMParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadSIMParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadSIMParam) GetQuery() string {
	return p.Query
}
func (p *ReadSIMParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadSIMParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadSIMParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadSIMParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ReadSIMParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// UpdateSIMParam is input parameters for the sacloud API
type UpdateSIMParam struct {
	Selector          []string
	Name              string
	Description       string
	Tags              []string
	IconId            sacloud.ID
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewUpdateSIMParam return new UpdateSIMParam
func NewUpdateSIMParam() *UpdateSIMParam {
	return &UpdateSIMParam{}
}

// Initialize init UpdateSIMParam
func (p *UpdateSIMParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *UpdateSIMParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UpdateSIMParam) validate() error {
	var errors []error

	{
		validator := define.Resources["SIM"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *UpdateSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *UpdateSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *UpdateSIMParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *UpdateSIMParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateSIMParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateSIMParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateSIMParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateSIMParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateSIMParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateSIMParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateSIMParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateSIMParam) GetName() string {
	return p.Name
}
func (p *UpdateSIMParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateSIMParam) GetDescription() string {
	return p.Description
}
func (p *UpdateSIMParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateSIMParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateSIMParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateSIMParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateSIMParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateSIMParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateSIMParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateSIMParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateSIMParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateSIMParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateSIMParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateSIMParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateSIMParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateSIMParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateSIMParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateSIMParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateSIMParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateSIMParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateSIMParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateSIMParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateSIMParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateSIMParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateSIMParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateSIMParam) GetFormat() string {
	return p.Format
}
func (p *UpdateSIMParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateSIMParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateSIMParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateSIMParam) GetQuery() string {
	return p.Query
}
func (p *UpdateSIMParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateSIMParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateSIMParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateSIMParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *UpdateSIMParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// DeleteSIMParam is input parameters for the sacloud API
type DeleteSIMParam struct {
	Force             bool
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewDeleteSIMParam return new DeleteSIMParam
func NewDeleteSIMParam() *DeleteSIMParam {
	return &DeleteSIMParam{}
}

// Initialize init DeleteSIMParam
func (p *DeleteSIMParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *DeleteSIMParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Force) {
		p.Force = false
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DeleteSIMParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *DeleteSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *DeleteSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *DeleteSIMParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *DeleteSIMParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteSIMParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteSIMParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteSIMParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteSIMParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteSIMParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteSIMParam) GetForce() bool {
	return p.Force
}
func (p *DeleteSIMParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteSIMParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteSIMParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteSIMParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteSIMParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteSIMParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteSIMParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteSIMParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteSIMParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteSIMParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteSIMParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteSIMParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteSIMParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteSIMParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteSIMParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteSIMParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *DeleteSIMParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// CarrierInfoSIMParam is input parameters for the sacloud API
type CarrierInfoSIMParam struct {
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewCarrierInfoSIMParam return new CarrierInfoSIMParam
func NewCarrierInfoSIMParam() *CarrierInfoSIMParam {
	return &CarrierInfoSIMParam{}
}

// Initialize init CarrierInfoSIMParam
func (p *CarrierInfoSIMParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CarrierInfoSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *CarrierInfoSIMParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *CarrierInfoSIMParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *CarrierInfoSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *CarrierInfoSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["carrier-info"]
}

func (p *CarrierInfoSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CarrierInfoSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CarrierInfoSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CarrierInfoSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *CarrierInfoSIMParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *CarrierInfoSIMParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["carrier-info"]
}

func (p *CarrierInfoSIMParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CarrierInfoSIMParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CarrierInfoSIMParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CarrierInfoSIMParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CarrierInfoSIMParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *CarrierInfoSIMParam) GetSelector() []string {
	return p.Selector
}
func (p *CarrierInfoSIMParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CarrierInfoSIMParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CarrierInfoSIMParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CarrierInfoSIMParam) GetParameters() string {
	return p.Parameters
}
func (p *CarrierInfoSIMParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CarrierInfoSIMParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CarrierInfoSIMParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CarrierInfoSIMParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CarrierInfoSIMParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CarrierInfoSIMParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CarrierInfoSIMParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CarrierInfoSIMParam) GetOutputType() string {
	return p.OutputType
}
func (p *CarrierInfoSIMParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CarrierInfoSIMParam) GetColumn() []string {
	return p.Column
}
func (p *CarrierInfoSIMParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CarrierInfoSIMParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CarrierInfoSIMParam) SetFormat(v string) {
	p.Format = v
}

func (p *CarrierInfoSIMParam) GetFormat() string {
	return p.Format
}
func (p *CarrierInfoSIMParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CarrierInfoSIMParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CarrierInfoSIMParam) SetQuery(v string) {
	p.Query = v
}

func (p *CarrierInfoSIMParam) GetQuery() string {
	return p.Query
}
func (p *CarrierInfoSIMParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CarrierInfoSIMParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *CarrierInfoSIMParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *CarrierInfoSIMParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *CarrierInfoSIMParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// CarrierUpdateSIMParam is input parameters for the sacloud API
type CarrierUpdateSIMParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID
	Carrier           []string

	input Input
}

// NewCarrierUpdateSIMParam return new CarrierUpdateSIMParam
func NewCarrierUpdateSIMParam() *CarrierUpdateSIMParam {
	return &CarrierUpdateSIMParam{}
}

// Initialize init CarrierUpdateSIMParam
func (p *CarrierUpdateSIMParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CarrierUpdateSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *CarrierUpdateSIMParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Carrier) {
		p.Carrier = []string{""}
	}

}

func (p *CarrierUpdateSIMParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--carrier", p.Carrier)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["carrier-update"].Params["carrier"].ValidateFunc
		errs := validator("--carrier", p.Carrier)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.SliceLenBetween("--carrier", p.Carrier, 1, 3)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *CarrierUpdateSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *CarrierUpdateSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["carrier-update"]
}

func (p *CarrierUpdateSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CarrierUpdateSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CarrierUpdateSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CarrierUpdateSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *CarrierUpdateSIMParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *CarrierUpdateSIMParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["carrier-update"]
}

func (p *CarrierUpdateSIMParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CarrierUpdateSIMParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CarrierUpdateSIMParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CarrierUpdateSIMParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CarrierUpdateSIMParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *CarrierUpdateSIMParam) GetSelector() []string {
	return p.Selector
}
func (p *CarrierUpdateSIMParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CarrierUpdateSIMParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CarrierUpdateSIMParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CarrierUpdateSIMParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CarrierUpdateSIMParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CarrierUpdateSIMParam) GetParameters() string {
	return p.Parameters
}
func (p *CarrierUpdateSIMParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CarrierUpdateSIMParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CarrierUpdateSIMParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CarrierUpdateSIMParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CarrierUpdateSIMParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CarrierUpdateSIMParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CarrierUpdateSIMParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *CarrierUpdateSIMParam) GetId() sacloud.ID {
	return p.Id
}
func (p *CarrierUpdateSIMParam) SetCarrier(v []string) {
	p.Carrier = v
}

func (p *CarrierUpdateSIMParam) GetCarrier() []string {
	return p.Carrier
}

// Changed usacloud v0系との互換性維持のための実装
func (p *CarrierUpdateSIMParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// ActivateSIMParam is input parameters for the sacloud API
type ActivateSIMParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewActivateSIMParam return new ActivateSIMParam
func NewActivateSIMParam() *ActivateSIMParam {
	return &ActivateSIMParam{}
}

// Initialize init ActivateSIMParam
func (p *ActivateSIMParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ActivateSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ActivateSIMParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ActivateSIMParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ActivateSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ActivateSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["activate"]
}

func (p *ActivateSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ActivateSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ActivateSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ActivateSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ActivateSIMParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ActivateSIMParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["activate"]
}

func (p *ActivateSIMParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ActivateSIMParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ActivateSIMParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ActivateSIMParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ActivateSIMParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ActivateSIMParam) GetSelector() []string {
	return p.Selector
}
func (p *ActivateSIMParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ActivateSIMParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ActivateSIMParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ActivateSIMParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ActivateSIMParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ActivateSIMParam) GetParameters() string {
	return p.Parameters
}
func (p *ActivateSIMParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ActivateSIMParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ActivateSIMParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ActivateSIMParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ActivateSIMParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ActivateSIMParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ActivateSIMParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ActivateSIMParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ActivateSIMParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// DeactivateSIMParam is input parameters for the sacloud API
type DeactivateSIMParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewDeactivateSIMParam return new DeactivateSIMParam
func NewDeactivateSIMParam() *DeactivateSIMParam {
	return &DeactivateSIMParam{}
}

// Initialize init DeactivateSIMParam
func (p *DeactivateSIMParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeactivateSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *DeactivateSIMParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DeactivateSIMParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *DeactivateSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *DeactivateSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["deactivate"]
}

func (p *DeactivateSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeactivateSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeactivateSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeactivateSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *DeactivateSIMParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *DeactivateSIMParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["deactivate"]
}

func (p *DeactivateSIMParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeactivateSIMParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeactivateSIMParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeactivateSIMParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeactivateSIMParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeactivateSIMParam) GetSelector() []string {
	return p.Selector
}
func (p *DeactivateSIMParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeactivateSIMParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeactivateSIMParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeactivateSIMParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeactivateSIMParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeactivateSIMParam) GetParameters() string {
	return p.Parameters
}
func (p *DeactivateSIMParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeactivateSIMParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeactivateSIMParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeactivateSIMParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeactivateSIMParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeactivateSIMParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeactivateSIMParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeactivateSIMParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *DeactivateSIMParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// ImeiLockSIMParam is input parameters for the sacloud API
type ImeiLockSIMParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID
	Imei              string

	input Input
}

// NewImeiLockSIMParam return new ImeiLockSIMParam
func NewImeiLockSIMParam() *ImeiLockSIMParam {
	return &ImeiLockSIMParam{}
}

// Initialize init ImeiLockSIMParam
func (p *ImeiLockSIMParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ImeiLockSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ImeiLockSIMParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Imei) {
		p.Imei = ""
	}

}

func (p *ImeiLockSIMParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--imei", p.Imei)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ImeiLockSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ImeiLockSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["imei-lock"]
}

func (p *ImeiLockSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ImeiLockSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ImeiLockSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ImeiLockSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ImeiLockSIMParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ImeiLockSIMParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["imei-lock"]
}

func (p *ImeiLockSIMParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ImeiLockSIMParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ImeiLockSIMParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ImeiLockSIMParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ImeiLockSIMParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ImeiLockSIMParam) GetSelector() []string {
	return p.Selector
}
func (p *ImeiLockSIMParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ImeiLockSIMParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ImeiLockSIMParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ImeiLockSIMParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ImeiLockSIMParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ImeiLockSIMParam) GetParameters() string {
	return p.Parameters
}
func (p *ImeiLockSIMParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ImeiLockSIMParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ImeiLockSIMParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ImeiLockSIMParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ImeiLockSIMParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ImeiLockSIMParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ImeiLockSIMParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ImeiLockSIMParam) GetId() sacloud.ID {
	return p.Id
}
func (p *ImeiLockSIMParam) SetImei(v string) {
	p.Imei = v
}

func (p *ImeiLockSIMParam) GetImei() string {
	return p.Imei
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ImeiLockSIMParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// IpAddSIMParam is input parameters for the sacloud API
type IpAddSIMParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID
	Ip                string

	input Input
}

// NewIpAddSIMParam return new IpAddSIMParam
func NewIpAddSIMParam() *IpAddSIMParam {
	return &IpAddSIMParam{}
}

// Initialize init IpAddSIMParam
func (p *IpAddSIMParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *IpAddSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *IpAddSIMParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Ip) {
		p.Ip = ""
	}

}

func (p *IpAddSIMParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--ip", p.Ip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["ip-add"].Params["ip"].ValidateFunc
		errs := validator("--ip", p.Ip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *IpAddSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *IpAddSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ip-add"]
}

func (p *IpAddSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *IpAddSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *IpAddSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *IpAddSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *IpAddSIMParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *IpAddSIMParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["ip-add"]
}

func (p *IpAddSIMParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *IpAddSIMParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *IpAddSIMParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *IpAddSIMParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *IpAddSIMParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *IpAddSIMParam) GetSelector() []string {
	return p.Selector
}
func (p *IpAddSIMParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *IpAddSIMParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *IpAddSIMParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *IpAddSIMParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *IpAddSIMParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *IpAddSIMParam) GetParameters() string {
	return p.Parameters
}
func (p *IpAddSIMParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *IpAddSIMParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *IpAddSIMParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *IpAddSIMParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *IpAddSIMParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *IpAddSIMParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *IpAddSIMParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *IpAddSIMParam) GetId() sacloud.ID {
	return p.Id
}
func (p *IpAddSIMParam) SetIp(v string) {
	p.Ip = v
}

func (p *IpAddSIMParam) GetIp() string {
	return p.Ip
}

// Changed usacloud v0系との互換性維持のための実装
func (p *IpAddSIMParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// ImeiUnlockSIMParam is input parameters for the sacloud API
type ImeiUnlockSIMParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewImeiUnlockSIMParam return new ImeiUnlockSIMParam
func NewImeiUnlockSIMParam() *ImeiUnlockSIMParam {
	return &ImeiUnlockSIMParam{}
}

// Initialize init ImeiUnlockSIMParam
func (p *ImeiUnlockSIMParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ImeiUnlockSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ImeiUnlockSIMParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ImeiUnlockSIMParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ImeiUnlockSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ImeiUnlockSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["imei-unlock"]
}

func (p *ImeiUnlockSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ImeiUnlockSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ImeiUnlockSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ImeiUnlockSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ImeiUnlockSIMParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ImeiUnlockSIMParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["imei-unlock"]
}

func (p *ImeiUnlockSIMParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ImeiUnlockSIMParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ImeiUnlockSIMParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ImeiUnlockSIMParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ImeiUnlockSIMParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ImeiUnlockSIMParam) GetSelector() []string {
	return p.Selector
}
func (p *ImeiUnlockSIMParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ImeiUnlockSIMParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ImeiUnlockSIMParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ImeiUnlockSIMParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ImeiUnlockSIMParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ImeiUnlockSIMParam) GetParameters() string {
	return p.Parameters
}
func (p *ImeiUnlockSIMParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ImeiUnlockSIMParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ImeiUnlockSIMParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ImeiUnlockSIMParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ImeiUnlockSIMParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ImeiUnlockSIMParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ImeiUnlockSIMParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ImeiUnlockSIMParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ImeiUnlockSIMParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// IpDeleteSIMParam is input parameters for the sacloud API
type IpDeleteSIMParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewIpDeleteSIMParam return new IpDeleteSIMParam
func NewIpDeleteSIMParam() *IpDeleteSIMParam {
	return &IpDeleteSIMParam{}
}

// Initialize init IpDeleteSIMParam
func (p *IpDeleteSIMParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *IpDeleteSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *IpDeleteSIMParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *IpDeleteSIMParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *IpDeleteSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *IpDeleteSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ip-delete"]
}

func (p *IpDeleteSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *IpDeleteSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *IpDeleteSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *IpDeleteSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *IpDeleteSIMParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *IpDeleteSIMParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["ip-delete"]
}

func (p *IpDeleteSIMParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *IpDeleteSIMParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *IpDeleteSIMParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *IpDeleteSIMParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *IpDeleteSIMParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *IpDeleteSIMParam) GetSelector() []string {
	return p.Selector
}
func (p *IpDeleteSIMParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *IpDeleteSIMParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *IpDeleteSIMParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *IpDeleteSIMParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *IpDeleteSIMParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *IpDeleteSIMParam) GetParameters() string {
	return p.Parameters
}
func (p *IpDeleteSIMParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *IpDeleteSIMParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *IpDeleteSIMParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *IpDeleteSIMParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *IpDeleteSIMParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *IpDeleteSIMParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *IpDeleteSIMParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *IpDeleteSIMParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *IpDeleteSIMParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// LogsSIMParam is input parameters for the sacloud API
type LogsSIMParam struct {
	Follow            bool
	RefreshInterval   int64
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewLogsSIMParam return new LogsSIMParam
func NewLogsSIMParam() *LogsSIMParam {
	return &LogsSIMParam{
		RefreshInterval: 3}
}

// Initialize init LogsSIMParam
func (p *LogsSIMParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *LogsSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *LogsSIMParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Follow) {
		p.Follow = false
	}
	if utils.IsEmpty(p.RefreshInterval) {
		p.RefreshInterval = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *LogsSIMParam) validate() error {
	var errors []error

	{
		validator := define.Resources["SIM"].Commands["logs"].Params["refresh-interval"].ValidateFunc
		errs := validator("--refresh-interval", p.RefreshInterval)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *LogsSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *LogsSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["logs"]
}

func (p *LogsSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *LogsSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *LogsSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *LogsSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *LogsSIMParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *LogsSIMParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["logs"]
}

func (p *LogsSIMParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *LogsSIMParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *LogsSIMParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *LogsSIMParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *LogsSIMParam) SetFollow(v bool) {
	p.Follow = v
}

func (p *LogsSIMParam) GetFollow() bool {
	return p.Follow
}
func (p *LogsSIMParam) SetRefreshInterval(v int64) {
	p.RefreshInterval = v
}

func (p *LogsSIMParam) GetRefreshInterval() int64 {
	return p.RefreshInterval
}
func (p *LogsSIMParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *LogsSIMParam) GetSelector() []string {
	return p.Selector
}
func (p *LogsSIMParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *LogsSIMParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *LogsSIMParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *LogsSIMParam) GetParameters() string {
	return p.Parameters
}
func (p *LogsSIMParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *LogsSIMParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *LogsSIMParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *LogsSIMParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *LogsSIMParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *LogsSIMParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *LogsSIMParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *LogsSIMParam) GetOutputType() string {
	return p.OutputType
}
func (p *LogsSIMParam) SetColumn(v []string) {
	p.Column = v
}

func (p *LogsSIMParam) GetColumn() []string {
	return p.Column
}
func (p *LogsSIMParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *LogsSIMParam) GetQuiet() bool {
	return p.Quiet
}
func (p *LogsSIMParam) SetFormat(v string) {
	p.Format = v
}

func (p *LogsSIMParam) GetFormat() string {
	return p.Format
}
func (p *LogsSIMParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *LogsSIMParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *LogsSIMParam) SetQuery(v string) {
	p.Query = v
}

func (p *LogsSIMParam) GetQuery() string {
	return p.Query
}
func (p *LogsSIMParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *LogsSIMParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *LogsSIMParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *LogsSIMParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *LogsSIMParam) Changed(name string) bool {
	return p.input.Changed(name)
}

// MonitorSIMParam is input parameters for the sacloud API
type MonitorSIMParam struct {
	Start             string
	End               string
	KeyFormat         string
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewMonitorSIMParam return new MonitorSIMParam
func NewMonitorSIMParam() *MonitorSIMParam {
	return &MonitorSIMParam{
		KeyFormat: "sakuracloud.sim.{{.ID}}"}
}

// Initialize init MonitorSIMParam
func (p *MonitorSIMParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *MonitorSIMParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *MonitorSIMParam) validate() error {
	var errors []error

	{
		validator := define.Resources["SIM"].Commands["monitor"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["monitor"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *MonitorSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *MonitorSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor"]
}

func (p *MonitorSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *MonitorSIMParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *MonitorSIMParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor"]
}

func (p *MonitorSIMParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorSIMParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorSIMParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorSIMParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorSIMParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorSIMParam) GetStart() string {
	return p.Start
}
func (p *MonitorSIMParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorSIMParam) GetEnd() string {
	return p.End
}
func (p *MonitorSIMParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorSIMParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorSIMParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *MonitorSIMParam) GetSelector() []string {
	return p.Selector
}
func (p *MonitorSIMParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *MonitorSIMParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *MonitorSIMParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *MonitorSIMParam) GetParameters() string {
	return p.Parameters
}
func (p *MonitorSIMParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *MonitorSIMParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *MonitorSIMParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *MonitorSIMParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *MonitorSIMParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *MonitorSIMParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *MonitorSIMParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *MonitorSIMParam) GetOutputType() string {
	return p.OutputType
}
func (p *MonitorSIMParam) SetColumn(v []string) {
	p.Column = v
}

func (p *MonitorSIMParam) GetColumn() []string {
	return p.Column
}
func (p *MonitorSIMParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *MonitorSIMParam) GetQuiet() bool {
	return p.Quiet
}
func (p *MonitorSIMParam) SetFormat(v string) {
	p.Format = v
}

func (p *MonitorSIMParam) GetFormat() string {
	return p.Format
}
func (p *MonitorSIMParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *MonitorSIMParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *MonitorSIMParam) SetQuery(v string) {
	p.Query = v
}

func (p *MonitorSIMParam) GetQuery() string {
	return p.Query
}
func (p *MonitorSIMParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *MonitorSIMParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *MonitorSIMParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *MonitorSIMParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *MonitorSIMParam) Changed(name string) bool {
	return p.input.Changed(name)
}

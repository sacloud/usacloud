// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListSimParam is input parameters for the sacloud API
type ListSimParam struct {
	From int
	Max  int
	Sort []string
	Name []string
	Id   []sacloud.ID
	Tags []string

	input Input
}

// NewListSimParam return new ListSimParam
func NewListSimParam() *ListSimParam {
	return &ListSimParam{}
}

// Initialize init ListSimParam
func (p *ListSimParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}

}

func (p *ListSimParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ListSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListSimParam) SetFrom(v int) {
	p.From = v
}

func (p *ListSimParam) GetFrom() int {
	return p.From
}
func (p *ListSimParam) SetMax(v int) {
	p.Max = v
}

func (p *ListSimParam) GetMax() int {
	return p.Max
}
func (p *ListSimParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListSimParam) GetSort() []string {
	return p.Sort
}
func (p *ListSimParam) SetName(v []string) {
	p.Name = v
}

func (p *ListSimParam) GetName() []string {
	return p.Name
}
func (p *ListSimParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListSimParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListSimParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListSimParam) GetTags() []string {
	return p.Tags
}

// CreateSimParam is input parameters for the sacloud API
type CreateSimParam struct {
	Passcode    string
	Carrier     []string
	Description string
	IconId      sacloud.ID
	Iccid       string
	Disabled    bool
	Imei        string
	Name        string
	Tags        []string

	input Input
}

// NewCreateSimParam return new CreateSimParam
func NewCreateSimParam() *CreateSimParam {
	return &CreateSimParam{}
}

// Initialize init CreateSimParam
func (p *CreateSimParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Passcode) {
		p.Passcode = ""
	}
	if utils.IsEmpty(p.Carrier) {
		p.Carrier = []string{""}
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Iccid) {
		p.Iccid = ""
	}
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.Imei) {
		p.Imei = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}

}

func (p *CreateSimParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--passcode", p.Passcode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--carrier", p.Carrier)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["create"].Params["carrier"].ValidateFunc
		errs := validator("--carrier", p.Carrier)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.SliceLenBetween("--carrier", p.Carrier, 1, 3)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--iccid", p.Iccid)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *CreateSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateSimParam) SetPasscode(v string) {
	p.Passcode = v
}

func (p *CreateSimParam) GetPasscode() string {
	return p.Passcode
}
func (p *CreateSimParam) SetCarrier(v []string) {
	p.Carrier = v
}

func (p *CreateSimParam) GetCarrier() []string {
	return p.Carrier
}
func (p *CreateSimParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateSimParam) GetDescription() string {
	return p.Description
}
func (p *CreateSimParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateSimParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateSimParam) SetIccid(v string) {
	p.Iccid = v
}

func (p *CreateSimParam) GetIccid() string {
	return p.Iccid
}
func (p *CreateSimParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *CreateSimParam) GetDisabled() bool {
	return p.Disabled
}
func (p *CreateSimParam) SetImei(v string) {
	p.Imei = v
}

func (p *CreateSimParam) GetImei() string {
	return p.Imei
}
func (p *CreateSimParam) SetName(v string) {
	p.Name = v
}

func (p *CreateSimParam) GetName() string {
	return p.Name
}
func (p *CreateSimParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateSimParam) GetTags() []string {
	return p.Tags
}

// ReadSimParam is input parameters for the sacloud API
type ReadSimParam struct {
	input Input
}

// NewReadSimParam return new ReadSimParam
func NewReadSimParam() *ReadSimParam {
	return &ReadSimParam{}
}

// Initialize init ReadSimParam
func (p *ReadSimParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadSimParam) fillValueToSkeleton() {

}

func (p *ReadSimParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ReadSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdateSimParam is input parameters for the sacloud API
type UpdateSimParam struct {
	Name        string
	Description string
	Tags        []string
	IconId      sacloud.ID

	input Input
}

// NewUpdateSimParam return new UpdateSimParam
func NewUpdateSimParam() *UpdateSimParam {
	return &UpdateSimParam{}
}

// Initialize init UpdateSimParam
func (p *UpdateSimParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}

}

func (p *UpdateSimParam) validate() error {
	var errors []error

	{
		validator := define.Resources["SIM"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *UpdateSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateSimParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateSimParam) GetName() string {
	return p.Name
}
func (p *UpdateSimParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateSimParam) GetDescription() string {
	return p.Description
}
func (p *UpdateSimParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateSimParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateSimParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateSimParam) GetIconId() sacloud.ID {
	return p.IconId
}

// DeleteSimParam is input parameters for the sacloud API
type DeleteSimParam struct {
	Force bool

	input Input
}

// NewDeleteSimParam return new DeleteSimParam
func NewDeleteSimParam() *DeleteSimParam {
	return &DeleteSimParam{}
}

// Initialize init DeleteSimParam
func (p *DeleteSimParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Force) {
		p.Force = false
	}

}

func (p *DeleteSimParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *DeleteSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteSimParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteSimParam) GetForce() bool {
	return p.Force
}

// CarrierInfoSimParam is input parameters for the sacloud API
type CarrierInfoSimParam struct {
	input Input
}

// NewCarrierInfoSimParam return new CarrierInfoSimParam
func NewCarrierInfoSimParam() *CarrierInfoSimParam {
	return &CarrierInfoSimParam{}
}

// Initialize init CarrierInfoSimParam
func (p *CarrierInfoSimParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CarrierInfoSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CarrierInfoSimParam) fillValueToSkeleton() {

}

func (p *CarrierInfoSimParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *CarrierInfoSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *CarrierInfoSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["carrier-info"]
}

func (p *CarrierInfoSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CarrierInfoSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CarrierInfoSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CarrierInfoSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// CarrierUpdateSimParam is input parameters for the sacloud API
type CarrierUpdateSimParam struct {
	Carrier []string

	input Input
}

// NewCarrierUpdateSimParam return new CarrierUpdateSimParam
func NewCarrierUpdateSimParam() *CarrierUpdateSimParam {
	return &CarrierUpdateSimParam{}
}

// Initialize init CarrierUpdateSimParam
func (p *CarrierUpdateSimParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CarrierUpdateSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CarrierUpdateSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Carrier) {
		p.Carrier = []string{""}
	}

}

func (p *CarrierUpdateSimParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--carrier", p.Carrier)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["carrier-update"].Params["carrier"].ValidateFunc
		errs := validator("--carrier", p.Carrier)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.SliceLenBetween("--carrier", p.Carrier, 1, 3)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CarrierUpdateSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *CarrierUpdateSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["carrier-update"]
}

func (p *CarrierUpdateSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CarrierUpdateSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CarrierUpdateSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CarrierUpdateSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CarrierUpdateSimParam) SetCarrier(v []string) {
	p.Carrier = v
}

func (p *CarrierUpdateSimParam) GetCarrier() []string {
	return p.Carrier
}

// ActivateSimParam is input parameters for the sacloud API
type ActivateSimParam struct {
	input Input
}

// NewActivateSimParam return new ActivateSimParam
func NewActivateSimParam() *ActivateSimParam {
	return &ActivateSimParam{}
}

// Initialize init ActivateSimParam
func (p *ActivateSimParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ActivateSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ActivateSimParam) fillValueToSkeleton() {

}

func (p *ActivateSimParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ActivateSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ActivateSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["activate"]
}

func (p *ActivateSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ActivateSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ActivateSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ActivateSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// DeactivateSimParam is input parameters for the sacloud API
type DeactivateSimParam struct {
	input Input
}

// NewDeactivateSimParam return new DeactivateSimParam
func NewDeactivateSimParam() *DeactivateSimParam {
	return &DeactivateSimParam{}
}

// Initialize init DeactivateSimParam
func (p *DeactivateSimParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeactivateSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeactivateSimParam) fillValueToSkeleton() {

}

func (p *DeactivateSimParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeactivateSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *DeactivateSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["deactivate"]
}

func (p *DeactivateSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeactivateSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeactivateSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeactivateSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ImeiLockSimParam is input parameters for the sacloud API
type ImeiLockSimParam struct {
	Imei string

	input Input
}

// NewImeiLockSimParam return new ImeiLockSimParam
func NewImeiLockSimParam() *ImeiLockSimParam {
	return &ImeiLockSimParam{}
}

// Initialize init ImeiLockSimParam
func (p *ImeiLockSimParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ImeiLockSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ImeiLockSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Imei) {
		p.Imei = ""
	}

}

func (p *ImeiLockSimParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--imei", p.Imei)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ImeiLockSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ImeiLockSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["imei-lock"]
}

func (p *ImeiLockSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ImeiLockSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ImeiLockSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ImeiLockSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ImeiLockSimParam) SetImei(v string) {
	p.Imei = v
}

func (p *ImeiLockSimParam) GetImei() string {
	return p.Imei
}

// IpAddSimParam is input parameters for the sacloud API
type IpAddSimParam struct {
	Ip string

	input Input
}

// NewIpAddSimParam return new IpAddSimParam
func NewIpAddSimParam() *IpAddSimParam {
	return &IpAddSimParam{}
}

// Initialize init IpAddSimParam
func (p *IpAddSimParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *IpAddSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *IpAddSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Ip) {
		p.Ip = ""
	}

}

func (p *IpAddSimParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--ip", p.Ip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["ip-add"].Params["ip"].ValidateFunc
		errs := validator("--ip", p.Ip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *IpAddSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *IpAddSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ip-add"]
}

func (p *IpAddSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *IpAddSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *IpAddSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *IpAddSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *IpAddSimParam) SetIp(v string) {
	p.Ip = v
}

func (p *IpAddSimParam) GetIp() string {
	return p.Ip
}

// ImeiUnlockSimParam is input parameters for the sacloud API
type ImeiUnlockSimParam struct {
	input Input
}

// NewImeiUnlockSimParam return new ImeiUnlockSimParam
func NewImeiUnlockSimParam() *ImeiUnlockSimParam {
	return &ImeiUnlockSimParam{}
}

// Initialize init ImeiUnlockSimParam
func (p *ImeiUnlockSimParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ImeiUnlockSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ImeiUnlockSimParam) fillValueToSkeleton() {

}

func (p *ImeiUnlockSimParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ImeiUnlockSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ImeiUnlockSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["imei-unlock"]
}

func (p *ImeiUnlockSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ImeiUnlockSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ImeiUnlockSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ImeiUnlockSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// IpDeleteSimParam is input parameters for the sacloud API
type IpDeleteSimParam struct {
	input Input
}

// NewIpDeleteSimParam return new IpDeleteSimParam
func NewIpDeleteSimParam() *IpDeleteSimParam {
	return &IpDeleteSimParam{}
}

// Initialize init IpDeleteSimParam
func (p *IpDeleteSimParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *IpDeleteSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *IpDeleteSimParam) fillValueToSkeleton() {

}

func (p *IpDeleteSimParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *IpDeleteSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *IpDeleteSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ip-delete"]
}

func (p *IpDeleteSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *IpDeleteSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *IpDeleteSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *IpDeleteSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// LogsSimParam is input parameters for the sacloud API
type LogsSimParam struct {
	Follow          bool
	RefreshInterval int64

	input Input
}

// NewLogsSimParam return new LogsSimParam
func NewLogsSimParam() *LogsSimParam {
	return &LogsSimParam{
		RefreshInterval: 3}
}

// Initialize init LogsSimParam
func (p *LogsSimParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *LogsSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *LogsSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Follow) {
		p.Follow = false
	}
	if utils.IsEmpty(p.RefreshInterval) {
		p.RefreshInterval = 0
	}

}

func (p *LogsSimParam) validate() error {
	var errors []error

	{
		validator := define.Resources["SIM"].Commands["logs"].Params["refresh-interval"].ValidateFunc
		errs := validator("--refresh-interval", p.RefreshInterval)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *LogsSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *LogsSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["logs"]
}

func (p *LogsSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *LogsSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *LogsSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *LogsSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *LogsSimParam) SetFollow(v bool) {
	p.Follow = v
}

func (p *LogsSimParam) GetFollow() bool {
	return p.Follow
}
func (p *LogsSimParam) SetRefreshInterval(v int64) {
	p.RefreshInterval = v
}

func (p *LogsSimParam) GetRefreshInterval() int64 {
	return p.RefreshInterval
}

// MonitorSimParam is input parameters for the sacloud API
type MonitorSimParam struct {
	Start     string
	End       string
	KeyFormat string

	input Input
}

// NewMonitorSimParam return new MonitorSimParam
func NewMonitorSimParam() *MonitorSimParam {
	return &MonitorSimParam{
		KeyFormat: "sakuracloud.sim.{{.ID}}"}
}

// Initialize init MonitorSimParam
func (p *MonitorSimParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}

}

func (p *MonitorSimParam) validate() error {
	var errors []error

	{
		validator := define.Resources["SIM"].Commands["monitor"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["monitor"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *MonitorSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor"]
}

func (p *MonitorSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorSimParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorSimParam) GetStart() string {
	return p.Start
}
func (p *MonitorSimParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorSimParam) GetEnd() string {
	return p.End
}
func (p *MonitorSimParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorSimParam) GetKeyFormat() string {
	return p.KeyFormat
}

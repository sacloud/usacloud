// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	v0params "github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListMobileGatewayParam is input parameters for the sacloud API
type ListMobileGatewayParam struct {
	Name              []string
	Id                []sacloud.ID
	Tags              []string
	From              int
	Max               int
	Sort              []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string

	input Input
}

// NewListMobileGatewayParam return new ListMobileGatewayParam
func NewListMobileGatewayParam() *ListMobileGatewayParam {
	return &ListMobileGatewayParam{}
}

// Initialize init ListMobileGatewayParam
func (p *ListMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ListMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListMobileGatewayParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ListMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *ListMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ListMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *ListMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListMobileGatewayParam) SetName(v []string) {
	p.Name = v
}

func (p *ListMobileGatewayParam) GetName() []string {
	return p.Name
}
func (p *ListMobileGatewayParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListMobileGatewayParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListMobileGatewayParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListMobileGatewayParam) GetTags() []string {
	return p.Tags
}
func (p *ListMobileGatewayParam) SetFrom(v int) {
	p.From = v
}

func (p *ListMobileGatewayParam) GetFrom() int {
	return p.From
}
func (p *ListMobileGatewayParam) SetMax(v int) {
	p.Max = v
}

func (p *ListMobileGatewayParam) GetMax() int {
	return p.Max
}
func (p *ListMobileGatewayParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListMobileGatewayParam) GetSort() []string {
	return p.Sort
}
func (p *ListMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *ListMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListMobileGatewayParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListMobileGatewayParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListMobileGatewayParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListMobileGatewayParam) GetColumn() []string {
	return p.Column
}
func (p *ListMobileGatewayParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListMobileGatewayParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListMobileGatewayParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListMobileGatewayParam) GetFormat() string {
	return p.Format
}
func (p *ListMobileGatewayParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListMobileGatewayParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListMobileGatewayParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListMobileGatewayParam) GetQuery() string {
	return p.Query
}
func (p *ListMobileGatewayParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListMobileGatewayParam) GetQueryFile() string {
	return p.QueryFile
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ListMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *ListMobileGatewayParam) ToV0() *v0params.ListMobileGatewayParam {
	return &v0params.ListMobileGatewayParam{
		Name:              p.Name,
		Id:                p.Id,
		Tags:              p.Tags,
		From:              p.From,
		Max:               p.Max,
		Sort:              p.Sort,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		OutputType:        p.OutputType,
		Column:            p.Column,
		Quiet:             p.Quiet,
		Format:            p.Format,
		FormatFile:        p.FormatFile,
		Query:             p.Query,
		QueryFile:         p.QueryFile,
	}
}

// CreateMobileGatewayParam is input parameters for the sacloud API
type CreateMobileGatewayParam struct {
	InternetConnection bool
	Name               string
	Description        string
	Tags               []string
	IconId             sacloud.ID
	Assumeyes          bool
	ParamTemplate      string
	Parameters         string
	ParamTemplateFile  string
	ParameterFile      string
	GenerateSkeleton   bool
	OutputType         string
	Column             []string
	Quiet              bool
	Format             string
	FormatFile         string
	Query              string
	QueryFile          string

	input Input
}

// NewCreateMobileGatewayParam return new CreateMobileGatewayParam
func NewCreateMobileGatewayParam() *CreateMobileGatewayParam {
	return &CreateMobileGatewayParam{}
}

// Initialize init CreateMobileGatewayParam
func (p *CreateMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *CreateMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.InternetConnection) {
		p.InternetConnection = false
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *CreateMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *CreateMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *CreateMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *CreateMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *CreateMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateMobileGatewayParam) SetInternetConnection(v bool) {
	p.InternetConnection = v
}

func (p *CreateMobileGatewayParam) GetInternetConnection() bool {
	return p.InternetConnection
}
func (p *CreateMobileGatewayParam) SetName(v string) {
	p.Name = v
}

func (p *CreateMobileGatewayParam) GetName() string {
	return p.Name
}
func (p *CreateMobileGatewayParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateMobileGatewayParam) GetDescription() string {
	return p.Description
}
func (p *CreateMobileGatewayParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateMobileGatewayParam) GetTags() []string {
	return p.Tags
}
func (p *CreateMobileGatewayParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateMobileGatewayParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateMobileGatewayParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateMobileGatewayParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateMobileGatewayParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateMobileGatewayParam) GetColumn() []string {
	return p.Column
}
func (p *CreateMobileGatewayParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateMobileGatewayParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateMobileGatewayParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateMobileGatewayParam) GetFormat() string {
	return p.Format
}
func (p *CreateMobileGatewayParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateMobileGatewayParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateMobileGatewayParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateMobileGatewayParam) GetQuery() string {
	return p.Query
}
func (p *CreateMobileGatewayParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateMobileGatewayParam) GetQueryFile() string {
	return p.QueryFile
}

// Changed usacloud v0系との互換性維持のための実装
func (p *CreateMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *CreateMobileGatewayParam) ToV0() *v0params.CreateMobileGatewayParam {
	return &v0params.CreateMobileGatewayParam{
		InternetConnection: p.InternetConnection,
		Name:               p.Name,
		Description:        p.Description,
		Tags:               p.Tags,
		IconId:             p.IconId,
		Assumeyes:          p.Assumeyes,
		ParamTemplate:      p.ParamTemplate,
		Parameters:         p.Parameters,
		ParamTemplateFile:  p.ParamTemplateFile,
		ParameterFile:      p.ParameterFile,
		GenerateSkeleton:   p.GenerateSkeleton,
		OutputType:         p.OutputType,
		Column:             p.Column,
		Quiet:              p.Quiet,
		Format:             p.Format,
		FormatFile:         p.FormatFile,
		Query:              p.Query,
		QueryFile:          p.QueryFile,
	}
}

// ReadMobileGatewayParam is input parameters for the sacloud API
type ReadMobileGatewayParam struct {
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewReadMobileGatewayParam return new ReadMobileGatewayParam
func NewReadMobileGatewayParam() *ReadMobileGatewayParam {
	return &ReadMobileGatewayParam{}
}

// Initialize init ReadMobileGatewayParam
func (p *ReadMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ReadMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReadMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ReadMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *ReadMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ReadMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *ReadMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReadMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadMobileGatewayParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadMobileGatewayParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadMobileGatewayParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadMobileGatewayParam) GetColumn() []string {
	return p.Column
}
func (p *ReadMobileGatewayParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadMobileGatewayParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadMobileGatewayParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadMobileGatewayParam) GetFormat() string {
	return p.Format
}
func (p *ReadMobileGatewayParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadMobileGatewayParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadMobileGatewayParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadMobileGatewayParam) GetQuery() string {
	return p.Query
}
func (p *ReadMobileGatewayParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadMobileGatewayParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ReadMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *ReadMobileGatewayParam) ToV0() *v0params.ReadMobileGatewayParam {
	return &v0params.ReadMobileGatewayParam{
		Selector:          p.Selector,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		OutputType:        p.OutputType,
		Column:            p.Column,
		Quiet:             p.Quiet,
		Format:            p.Format,
		FormatFile:        p.FormatFile,
		Query:             p.Query,
		QueryFile:         p.QueryFile,
		Id:                p.Id,
	}
}

// UpdateMobileGatewayParam is input parameters for the sacloud API
type UpdateMobileGatewayParam struct {
	InternetConnection bool
	Selector           []string
	Name               string
	Description        string
	Tags               []string
	IconId             sacloud.ID
	Assumeyes          bool
	ParamTemplate      string
	Parameters         string
	ParamTemplateFile  string
	ParameterFile      string
	GenerateSkeleton   bool
	OutputType         string
	Column             []string
	Quiet              bool
	Format             string
	FormatFile         string
	Query              string
	QueryFile          string
	Id                 sacloud.ID

	input Input
}

// NewUpdateMobileGatewayParam return new UpdateMobileGatewayParam
func NewUpdateMobileGatewayParam() *UpdateMobileGatewayParam {
	return &UpdateMobileGatewayParam{}
}

// Initialize init UpdateMobileGatewayParam
func (p *UpdateMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *UpdateMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.InternetConnection) {
		p.InternetConnection = false
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UpdateMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := define.Resources["MobileGateway"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *UpdateMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *UpdateMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *UpdateMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *UpdateMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateMobileGatewayParam) SetInternetConnection(v bool) {
	p.InternetConnection = v
}

func (p *UpdateMobileGatewayParam) GetInternetConnection() bool {
	return p.InternetConnection
}
func (p *UpdateMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateMobileGatewayParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateMobileGatewayParam) GetName() string {
	return p.Name
}
func (p *UpdateMobileGatewayParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateMobileGatewayParam) GetDescription() string {
	return p.Description
}
func (p *UpdateMobileGatewayParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateMobileGatewayParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateMobileGatewayParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateMobileGatewayParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateMobileGatewayParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateMobileGatewayParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateMobileGatewayParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateMobileGatewayParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateMobileGatewayParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateMobileGatewayParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateMobileGatewayParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateMobileGatewayParam) GetFormat() string {
	return p.Format
}
func (p *UpdateMobileGatewayParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateMobileGatewayParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateMobileGatewayParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateMobileGatewayParam) GetQuery() string {
	return p.Query
}
func (p *UpdateMobileGatewayParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateMobileGatewayParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *UpdateMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *UpdateMobileGatewayParam) ToV0() *v0params.UpdateMobileGatewayParam {
	return &v0params.UpdateMobileGatewayParam{
		InternetConnection: p.InternetConnection,
		Selector:           p.Selector,
		Name:               p.Name,
		Description:        p.Description,
		Tags:               p.Tags,
		IconId:             p.IconId,
		Assumeyes:          p.Assumeyes,
		ParamTemplate:      p.ParamTemplate,
		Parameters:         p.Parameters,
		ParamTemplateFile:  p.ParamTemplateFile,
		ParameterFile:      p.ParameterFile,
		GenerateSkeleton:   p.GenerateSkeleton,
		OutputType:         p.OutputType,
		Column:             p.Column,
		Quiet:              p.Quiet,
		Format:             p.Format,
		FormatFile:         p.FormatFile,
		Query:              p.Query,
		QueryFile:          p.QueryFile,
		Id:                 p.Id,
	}
}

// DeleteMobileGatewayParam is input parameters for the sacloud API
type DeleteMobileGatewayParam struct {
	Force             bool
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewDeleteMobileGatewayParam return new DeleteMobileGatewayParam
func NewDeleteMobileGatewayParam() *DeleteMobileGatewayParam {
	return &DeleteMobileGatewayParam{}
}

// Initialize init DeleteMobileGatewayParam
func (p *DeleteMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *DeleteMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Force) {
		p.Force = false
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DeleteMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *DeleteMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *DeleteMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *DeleteMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *DeleteMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteMobileGatewayParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteMobileGatewayParam) GetForce() bool {
	return p.Force
}
func (p *DeleteMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteMobileGatewayParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteMobileGatewayParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteMobileGatewayParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteMobileGatewayParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteMobileGatewayParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteMobileGatewayParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteMobileGatewayParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteMobileGatewayParam) GetFormat() string {
	return p.Format
}
func (p *DeleteMobileGatewayParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteMobileGatewayParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteMobileGatewayParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteMobileGatewayParam) GetQuery() string {
	return p.Query
}
func (p *DeleteMobileGatewayParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteMobileGatewayParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *DeleteMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *DeleteMobileGatewayParam) ToV0() *v0params.DeleteMobileGatewayParam {
	return &v0params.DeleteMobileGatewayParam{
		Force:             p.Force,
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		OutputType:        p.OutputType,
		Column:            p.Column,
		Quiet:             p.Quiet,
		Format:            p.Format,
		FormatFile:        p.FormatFile,
		Query:             p.Query,
		QueryFile:         p.QueryFile,
		Id:                p.Id,
	}
}

// BootMobileGatewayParam is input parameters for the sacloud API
type BootMobileGatewayParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewBootMobileGatewayParam return new BootMobileGatewayParam
func NewBootMobileGatewayParam() *BootMobileGatewayParam {
	return &BootMobileGatewayParam{}
}

// Initialize init BootMobileGatewayParam
func (p *BootMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BootMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *BootMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *BootMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *BootMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *BootMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["boot"]
}

func (p *BootMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BootMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BootMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BootMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *BootMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *BootMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["boot"]
}

func (p *BootMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BootMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BootMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BootMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *BootMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *BootMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *BootMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BootMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BootMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BootMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BootMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *BootMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *BootMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BootMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BootMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *BootMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *BootMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BootMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BootMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *BootMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *BootMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *BootMobileGatewayParam) ToV0() *v0params.BootMobileGatewayParam {
	return &v0params.BootMobileGatewayParam{
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// ShutdownMobileGatewayParam is input parameters for the sacloud API
type ShutdownMobileGatewayParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewShutdownMobileGatewayParam return new ShutdownMobileGatewayParam
func NewShutdownMobileGatewayParam() *ShutdownMobileGatewayParam {
	return &ShutdownMobileGatewayParam{}
}

// Initialize init ShutdownMobileGatewayParam
func (p *ShutdownMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ShutdownMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ShutdownMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ShutdownMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *ShutdownMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown"]
}

func (p *ShutdownMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ShutdownMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *ShutdownMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown"]
}

func (p *ShutdownMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ShutdownMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ShutdownMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *ShutdownMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ShutdownMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ShutdownMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ShutdownMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ShutdownMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ShutdownMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *ShutdownMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ShutdownMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ShutdownMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ShutdownMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ShutdownMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ShutdownMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ShutdownMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ShutdownMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ShutdownMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *ShutdownMobileGatewayParam) ToV0() *v0params.ShutdownMobileGatewayParam {
	return &v0params.ShutdownMobileGatewayParam{
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// ShutdownForceMobileGatewayParam is input parameters for the sacloud API
type ShutdownForceMobileGatewayParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewShutdownForceMobileGatewayParam return new ShutdownForceMobileGatewayParam
func NewShutdownForceMobileGatewayParam() *ShutdownForceMobileGatewayParam {
	return &ShutdownForceMobileGatewayParam{}
}

// Initialize init ShutdownForceMobileGatewayParam
func (p *ShutdownForceMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownForceMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ShutdownForceMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ShutdownForceMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ShutdownForceMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *ShutdownForceMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown-force"]
}

func (p *ShutdownForceMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownForceMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownForceMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownForceMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ShutdownForceMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *ShutdownForceMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown-force"]
}

func (p *ShutdownForceMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownForceMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownForceMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownForceMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ShutdownForceMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ShutdownForceMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *ShutdownForceMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ShutdownForceMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ShutdownForceMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ShutdownForceMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ShutdownForceMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ShutdownForceMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *ShutdownForceMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ShutdownForceMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ShutdownForceMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ShutdownForceMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ShutdownForceMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ShutdownForceMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ShutdownForceMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ShutdownForceMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ShutdownForceMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *ShutdownForceMobileGatewayParam) ToV0() *v0params.ShutdownForceMobileGatewayParam {
	return &v0params.ShutdownForceMobileGatewayParam{
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// ResetMobileGatewayParam is input parameters for the sacloud API
type ResetMobileGatewayParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewResetMobileGatewayParam return new ResetMobileGatewayParam
func NewResetMobileGatewayParam() *ResetMobileGatewayParam {
	return &ResetMobileGatewayParam{}
}

// Initialize init ResetMobileGatewayParam
func (p *ResetMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResetMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ResetMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ResetMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ResetMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *ResetMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["reset"]
}

func (p *ResetMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResetMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResetMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResetMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ResetMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *ResetMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["reset"]
}

func (p *ResetMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResetMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResetMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResetMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ResetMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ResetMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *ResetMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ResetMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ResetMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ResetMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ResetMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ResetMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *ResetMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ResetMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ResetMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ResetMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ResetMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ResetMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ResetMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ResetMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ResetMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *ResetMobileGatewayParam) ToV0() *v0params.ResetMobileGatewayParam {
	return &v0params.ResetMobileGatewayParam{
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// WaitForBootMobileGatewayParam is input parameters for the sacloud API
type WaitForBootMobileGatewayParam struct {
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewWaitForBootMobileGatewayParam return new WaitForBootMobileGatewayParam
func NewWaitForBootMobileGatewayParam() *WaitForBootMobileGatewayParam {
	return &WaitForBootMobileGatewayParam{}
}

// Initialize init WaitForBootMobileGatewayParam
func (p *WaitForBootMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForBootMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *WaitForBootMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *WaitForBootMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *WaitForBootMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *WaitForBootMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-boot"]
}

func (p *WaitForBootMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForBootMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForBootMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForBootMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *WaitForBootMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *WaitForBootMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-boot"]
}

func (p *WaitForBootMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForBootMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForBootMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForBootMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *WaitForBootMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *WaitForBootMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *WaitForBootMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForBootMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForBootMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *WaitForBootMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *WaitForBootMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForBootMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForBootMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *WaitForBootMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *WaitForBootMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForBootMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForBootMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *WaitForBootMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *WaitForBootMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *WaitForBootMobileGatewayParam) ToV0() *v0params.WaitForBootMobileGatewayParam {
	return &v0params.WaitForBootMobileGatewayParam{
		Selector:          p.Selector,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// WaitForDownMobileGatewayParam is input parameters for the sacloud API
type WaitForDownMobileGatewayParam struct {
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewWaitForDownMobileGatewayParam return new WaitForDownMobileGatewayParam
func NewWaitForDownMobileGatewayParam() *WaitForDownMobileGatewayParam {
	return &WaitForDownMobileGatewayParam{}
}

// Initialize init WaitForDownMobileGatewayParam
func (p *WaitForDownMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForDownMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *WaitForDownMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *WaitForDownMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *WaitForDownMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *WaitForDownMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-down"]
}

func (p *WaitForDownMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForDownMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForDownMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForDownMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *WaitForDownMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *WaitForDownMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-down"]
}

func (p *WaitForDownMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForDownMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForDownMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForDownMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *WaitForDownMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *WaitForDownMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *WaitForDownMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForDownMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForDownMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *WaitForDownMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *WaitForDownMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForDownMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForDownMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *WaitForDownMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *WaitForDownMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForDownMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForDownMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *WaitForDownMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *WaitForDownMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *WaitForDownMobileGatewayParam) ToV0() *v0params.WaitForDownMobileGatewayParam {
	return &v0params.WaitForDownMobileGatewayParam{
		Selector:          p.Selector,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// InterfaceInfoMobileGatewayParam is input parameters for the sacloud API
type InterfaceInfoMobileGatewayParam struct {
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewInterfaceInfoMobileGatewayParam return new InterfaceInfoMobileGatewayParam
func NewInterfaceInfoMobileGatewayParam() *InterfaceInfoMobileGatewayParam {
	return &InterfaceInfoMobileGatewayParam{}
}

// Initialize init InterfaceInfoMobileGatewayParam
func (p *InterfaceInfoMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceInfoMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *InterfaceInfoMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *InterfaceInfoMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *InterfaceInfoMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *InterfaceInfoMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-info"]
}

func (p *InterfaceInfoMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceInfoMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceInfoMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceInfoMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *InterfaceInfoMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *InterfaceInfoMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-info"]
}

func (p *InterfaceInfoMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceInfoMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceInfoMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceInfoMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceInfoMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *InterfaceInfoMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *InterfaceInfoMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceInfoMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceInfoMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *InterfaceInfoMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *InterfaceInfoMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceInfoMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceInfoMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *InterfaceInfoMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *InterfaceInfoMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceInfoMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceInfoMobileGatewayParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *InterfaceInfoMobileGatewayParam) GetOutputType() string {
	return p.OutputType
}
func (p *InterfaceInfoMobileGatewayParam) SetColumn(v []string) {
	p.Column = v
}

func (p *InterfaceInfoMobileGatewayParam) GetColumn() []string {
	return p.Column
}
func (p *InterfaceInfoMobileGatewayParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *InterfaceInfoMobileGatewayParam) GetQuiet() bool {
	return p.Quiet
}
func (p *InterfaceInfoMobileGatewayParam) SetFormat(v string) {
	p.Format = v
}

func (p *InterfaceInfoMobileGatewayParam) GetFormat() string {
	return p.Format
}
func (p *InterfaceInfoMobileGatewayParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *InterfaceInfoMobileGatewayParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *InterfaceInfoMobileGatewayParam) SetQuery(v string) {
	p.Query = v
}

func (p *InterfaceInfoMobileGatewayParam) GetQuery() string {
	return p.Query
}
func (p *InterfaceInfoMobileGatewayParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *InterfaceInfoMobileGatewayParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *InterfaceInfoMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *InterfaceInfoMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *InterfaceInfoMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *InterfaceInfoMobileGatewayParam) ToV0() *v0params.InterfaceInfoMobileGatewayParam {
	return &v0params.InterfaceInfoMobileGatewayParam{
		Selector:          p.Selector,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		OutputType:        p.OutputType,
		Column:            p.Column,
		Quiet:             p.Quiet,
		Format:            p.Format,
		FormatFile:        p.FormatFile,
		Query:             p.Query,
		QueryFile:         p.QueryFile,
		Id:                p.Id,
	}
}

// InterfaceConnectMobileGatewayParam is input parameters for the sacloud API
type InterfaceConnectMobileGatewayParam struct {
	Ipaddress         string
	SwitchId          sacloud.ID
	NwMasklen         int
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewInterfaceConnectMobileGatewayParam return new InterfaceConnectMobileGatewayParam
func NewInterfaceConnectMobileGatewayParam() *InterfaceConnectMobileGatewayParam {
	return &InterfaceConnectMobileGatewayParam{
		NwMasklen: 24}
}

// Initialize init InterfaceConnectMobileGatewayParam
func (p *InterfaceConnectMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceConnectMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *InterfaceConnectMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *InterfaceConnectMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["interface-connect"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["interface-connect"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["interface-connect"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *InterfaceConnectMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *InterfaceConnectMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-connect"]
}

func (p *InterfaceConnectMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceConnectMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceConnectMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceConnectMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *InterfaceConnectMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *InterfaceConnectMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-connect"]
}

func (p *InterfaceConnectMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceConnectMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceConnectMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceConnectMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceConnectMobileGatewayParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *InterfaceConnectMobileGatewayParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *InterfaceConnectMobileGatewayParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *InterfaceConnectMobileGatewayParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *InterfaceConnectMobileGatewayParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *InterfaceConnectMobileGatewayParam) GetNwMasklen() int {
	return p.NwMasklen
}
func (p *InterfaceConnectMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *InterfaceConnectMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *InterfaceConnectMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceConnectMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceConnectMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceConnectMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceConnectMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *InterfaceConnectMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *InterfaceConnectMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceConnectMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceConnectMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *InterfaceConnectMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *InterfaceConnectMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceConnectMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceConnectMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *InterfaceConnectMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *InterfaceConnectMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *InterfaceConnectMobileGatewayParam) ToV0() *v0params.InterfaceConnectMobileGatewayParam {
	return &v0params.InterfaceConnectMobileGatewayParam{
		Ipaddress:         p.Ipaddress,
		SwitchId:          p.SwitchId,
		NwMasklen:         p.NwMasklen,
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// InterfaceUpdateMobileGatewayParam is input parameters for the sacloud API
type InterfaceUpdateMobileGatewayParam struct {
	Ipaddress         string
	NwMasklen         int
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewInterfaceUpdateMobileGatewayParam return new InterfaceUpdateMobileGatewayParam
func NewInterfaceUpdateMobileGatewayParam() *InterfaceUpdateMobileGatewayParam {
	return &InterfaceUpdateMobileGatewayParam{
		NwMasklen: 24}
}

// Initialize init InterfaceUpdateMobileGatewayParam
func (p *InterfaceUpdateMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceUpdateMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *InterfaceUpdateMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *InterfaceUpdateMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := define.Resources["MobileGateway"].Commands["interface-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["interface-update"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *InterfaceUpdateMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *InterfaceUpdateMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-update"]
}

func (p *InterfaceUpdateMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceUpdateMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceUpdateMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceUpdateMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *InterfaceUpdateMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *InterfaceUpdateMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-update"]
}

func (p *InterfaceUpdateMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceUpdateMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceUpdateMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceUpdateMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceUpdateMobileGatewayParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *InterfaceUpdateMobileGatewayParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *InterfaceUpdateMobileGatewayParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *InterfaceUpdateMobileGatewayParam) GetNwMasklen() int {
	return p.NwMasklen
}
func (p *InterfaceUpdateMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *InterfaceUpdateMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *InterfaceUpdateMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceUpdateMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceUpdateMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceUpdateMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceUpdateMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *InterfaceUpdateMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *InterfaceUpdateMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceUpdateMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceUpdateMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *InterfaceUpdateMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *InterfaceUpdateMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceUpdateMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceUpdateMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *InterfaceUpdateMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *InterfaceUpdateMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *InterfaceUpdateMobileGatewayParam) ToV0() *v0params.InterfaceUpdateMobileGatewayParam {
	return &v0params.InterfaceUpdateMobileGatewayParam{
		Ipaddress:         p.Ipaddress,
		NwMasklen:         p.NwMasklen,
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// InterfaceDisconnectMobileGatewayParam is input parameters for the sacloud API
type InterfaceDisconnectMobileGatewayParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewInterfaceDisconnectMobileGatewayParam return new InterfaceDisconnectMobileGatewayParam
func NewInterfaceDisconnectMobileGatewayParam() *InterfaceDisconnectMobileGatewayParam {
	return &InterfaceDisconnectMobileGatewayParam{}
}

// Initialize init InterfaceDisconnectMobileGatewayParam
func (p *InterfaceDisconnectMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceDisconnectMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *InterfaceDisconnectMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *InterfaceDisconnectMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *InterfaceDisconnectMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *InterfaceDisconnectMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-disconnect"]
}

func (p *InterfaceDisconnectMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceDisconnectMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceDisconnectMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceDisconnectMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *InterfaceDisconnectMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *InterfaceDisconnectMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-disconnect"]
}

func (p *InterfaceDisconnectMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceDisconnectMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceDisconnectMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceDisconnectMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceDisconnectMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *InterfaceDisconnectMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *InterfaceDisconnectMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceDisconnectMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceDisconnectMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceDisconnectMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceDisconnectMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *InterfaceDisconnectMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *InterfaceDisconnectMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceDisconnectMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceDisconnectMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *InterfaceDisconnectMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *InterfaceDisconnectMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceDisconnectMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceDisconnectMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *InterfaceDisconnectMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *InterfaceDisconnectMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *InterfaceDisconnectMobileGatewayParam) ToV0() *v0params.InterfaceDisconnectMobileGatewayParam {
	return &v0params.InterfaceDisconnectMobileGatewayParam{
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// TrafficControlInfoMobileGatewayParam is input parameters for the sacloud API
type TrafficControlInfoMobileGatewayParam struct {
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewTrafficControlInfoMobileGatewayParam return new TrafficControlInfoMobileGatewayParam
func NewTrafficControlInfoMobileGatewayParam() *TrafficControlInfoMobileGatewayParam {
	return &TrafficControlInfoMobileGatewayParam{}
}

// Initialize init TrafficControlInfoMobileGatewayParam
func (p *TrafficControlInfoMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *TrafficControlInfoMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *TrafficControlInfoMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *TrafficControlInfoMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *TrafficControlInfoMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *TrafficControlInfoMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["traffic-control-info"]
}

func (p *TrafficControlInfoMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *TrafficControlInfoMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *TrafficControlInfoMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *TrafficControlInfoMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *TrafficControlInfoMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *TrafficControlInfoMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["traffic-control-info"]
}

func (p *TrafficControlInfoMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *TrafficControlInfoMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *TrafficControlInfoMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *TrafficControlInfoMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *TrafficControlInfoMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *TrafficControlInfoMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *TrafficControlInfoMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *TrafficControlInfoMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *TrafficControlInfoMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *TrafficControlInfoMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *TrafficControlInfoMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *TrafficControlInfoMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *TrafficControlInfoMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *TrafficControlInfoMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *TrafficControlInfoMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *TrafficControlInfoMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *TrafficControlInfoMobileGatewayParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *TrafficControlInfoMobileGatewayParam) GetOutputType() string {
	return p.OutputType
}
func (p *TrafficControlInfoMobileGatewayParam) SetColumn(v []string) {
	p.Column = v
}

func (p *TrafficControlInfoMobileGatewayParam) GetColumn() []string {
	return p.Column
}
func (p *TrafficControlInfoMobileGatewayParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *TrafficControlInfoMobileGatewayParam) GetQuiet() bool {
	return p.Quiet
}
func (p *TrafficControlInfoMobileGatewayParam) SetFormat(v string) {
	p.Format = v
}

func (p *TrafficControlInfoMobileGatewayParam) GetFormat() string {
	return p.Format
}
func (p *TrafficControlInfoMobileGatewayParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *TrafficControlInfoMobileGatewayParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *TrafficControlInfoMobileGatewayParam) SetQuery(v string) {
	p.Query = v
}

func (p *TrafficControlInfoMobileGatewayParam) GetQuery() string {
	return p.Query
}
func (p *TrafficControlInfoMobileGatewayParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *TrafficControlInfoMobileGatewayParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *TrafficControlInfoMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *TrafficControlInfoMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *TrafficControlInfoMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *TrafficControlInfoMobileGatewayParam) ToV0() *v0params.TrafficControlInfoMobileGatewayParam {
	return &v0params.TrafficControlInfoMobileGatewayParam{
		Selector:          p.Selector,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		OutputType:        p.OutputType,
		Column:            p.Column,
		Quiet:             p.Quiet,
		Format:            p.Format,
		FormatFile:        p.FormatFile,
		Query:             p.Query,
		QueryFile:         p.QueryFile,
		Id:                p.Id,
	}
}

// TrafficControlEnableMobileGatewayParam is input parameters for the sacloud API
type TrafficControlEnableMobileGatewayParam struct {
	Quota              int
	BandWidthLimit     int
	EnableEmail        bool
	SlackWebhookUrl    string
	AutoTrafficShaping bool
	Selector           []string
	Assumeyes          bool
	ParamTemplate      string
	Parameters         string
	ParamTemplateFile  string
	ParameterFile      string
	GenerateSkeleton   bool
	Id                 sacloud.ID

	input Input
}

// NewTrafficControlEnableMobileGatewayParam return new TrafficControlEnableMobileGatewayParam
func NewTrafficControlEnableMobileGatewayParam() *TrafficControlEnableMobileGatewayParam {
	return &TrafficControlEnableMobileGatewayParam{
		Quota: 512}
}

// Initialize init TrafficControlEnableMobileGatewayParam
func (p *TrafficControlEnableMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *TrafficControlEnableMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *TrafficControlEnableMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Quota) {
		p.Quota = 0
	}
	if utils.IsEmpty(p.BandWidthLimit) {
		p.BandWidthLimit = 0
	}
	if utils.IsEmpty(p.EnableEmail) {
		p.EnableEmail = false
	}
	if utils.IsEmpty(p.SlackWebhookUrl) {
		p.SlackWebhookUrl = ""
	}
	if utils.IsEmpty(p.AutoTrafficShaping) {
		p.AutoTrafficShaping = false
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *TrafficControlEnableMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--quota", p.Quota)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["traffic-control-enable"].Params["quota"].ValidateFunc
		errs := validator("--quota", p.Quota)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["traffic-control-enable"].Params["band-width-limit"].ValidateFunc
		errs := validator("--band-width-limit", p.BandWidthLimit)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["traffic-control-enable"].Params["slack-webhook-url"].ValidateFunc
		errs := validator("--slack-webhook-url", p.SlackWebhookUrl)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *TrafficControlEnableMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *TrafficControlEnableMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["traffic-control-enable"]
}

func (p *TrafficControlEnableMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *TrafficControlEnableMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *TrafficControlEnableMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *TrafficControlEnableMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *TrafficControlEnableMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *TrafficControlEnableMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["traffic-control-enable"]
}

func (p *TrafficControlEnableMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *TrafficControlEnableMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *TrafficControlEnableMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *TrafficControlEnableMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *TrafficControlEnableMobileGatewayParam) SetQuota(v int) {
	p.Quota = v
}

func (p *TrafficControlEnableMobileGatewayParam) GetQuota() int {
	return p.Quota
}
func (p *TrafficControlEnableMobileGatewayParam) SetBandWidthLimit(v int) {
	p.BandWidthLimit = v
}

func (p *TrafficControlEnableMobileGatewayParam) GetBandWidthLimit() int {
	return p.BandWidthLimit
}
func (p *TrafficControlEnableMobileGatewayParam) SetEnableEmail(v bool) {
	p.EnableEmail = v
}

func (p *TrafficControlEnableMobileGatewayParam) GetEnableEmail() bool {
	return p.EnableEmail
}
func (p *TrafficControlEnableMobileGatewayParam) SetSlackWebhookUrl(v string) {
	p.SlackWebhookUrl = v
}

func (p *TrafficControlEnableMobileGatewayParam) GetSlackWebhookUrl() string {
	return p.SlackWebhookUrl
}
func (p *TrafficControlEnableMobileGatewayParam) SetAutoTrafficShaping(v bool) {
	p.AutoTrafficShaping = v
}

func (p *TrafficControlEnableMobileGatewayParam) GetAutoTrafficShaping() bool {
	return p.AutoTrafficShaping
}
func (p *TrafficControlEnableMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *TrafficControlEnableMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *TrafficControlEnableMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *TrafficControlEnableMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *TrafficControlEnableMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *TrafficControlEnableMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *TrafficControlEnableMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *TrafficControlEnableMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *TrafficControlEnableMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *TrafficControlEnableMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *TrafficControlEnableMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *TrafficControlEnableMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *TrafficControlEnableMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *TrafficControlEnableMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *TrafficControlEnableMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *TrafficControlEnableMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *TrafficControlEnableMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *TrafficControlEnableMobileGatewayParam) ToV0() *v0params.TrafficControlEnableMobileGatewayParam {
	return &v0params.TrafficControlEnableMobileGatewayParam{
		Quota:              p.Quota,
		BandWidthLimit:     p.BandWidthLimit,
		EnableEmail:        p.EnableEmail,
		SlackWebhookUrl:    p.SlackWebhookUrl,
		AutoTrafficShaping: p.AutoTrafficShaping,
		Selector:           p.Selector,
		Assumeyes:          p.Assumeyes,
		ParamTemplate:      p.ParamTemplate,
		Parameters:         p.Parameters,
		ParamTemplateFile:  p.ParamTemplateFile,
		ParameterFile:      p.ParameterFile,
		GenerateSkeleton:   p.GenerateSkeleton,
		Id:                 p.Id,
	}
}

// TrafficControlUpdateMobileGatewayParam is input parameters for the sacloud API
type TrafficControlUpdateMobileGatewayParam struct {
	Quota              int
	BandWidthLimit     int
	EnableEmail        bool
	SlackWebhookUrl    string
	AutoTrafficShaping bool
	Selector           []string
	Assumeyes          bool
	ParamTemplate      string
	Parameters         string
	ParamTemplateFile  string
	ParameterFile      string
	GenerateSkeleton   bool
	Id                 sacloud.ID

	input Input
}

// NewTrafficControlUpdateMobileGatewayParam return new TrafficControlUpdateMobileGatewayParam
func NewTrafficControlUpdateMobileGatewayParam() *TrafficControlUpdateMobileGatewayParam {
	return &TrafficControlUpdateMobileGatewayParam{}
}

// Initialize init TrafficControlUpdateMobileGatewayParam
func (p *TrafficControlUpdateMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *TrafficControlUpdateMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *TrafficControlUpdateMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Quota) {
		p.Quota = 0
	}
	if utils.IsEmpty(p.BandWidthLimit) {
		p.BandWidthLimit = 0
	}
	if utils.IsEmpty(p.EnableEmail) {
		p.EnableEmail = false
	}
	if utils.IsEmpty(p.SlackWebhookUrl) {
		p.SlackWebhookUrl = ""
	}
	if utils.IsEmpty(p.AutoTrafficShaping) {
		p.AutoTrafficShaping = false
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *TrafficControlUpdateMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := define.Resources["MobileGateway"].Commands["traffic-control-update"].Params["quota"].ValidateFunc
		errs := validator("--quota", p.Quota)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["traffic-control-update"].Params["band-width-limit"].ValidateFunc
		errs := validator("--band-width-limit", p.BandWidthLimit)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["traffic-control-update"].Params["slack-webhook-url"].ValidateFunc
		errs := validator("--slack-webhook-url", p.SlackWebhookUrl)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *TrafficControlUpdateMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *TrafficControlUpdateMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["traffic-control-update"]
}

func (p *TrafficControlUpdateMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *TrafficControlUpdateMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *TrafficControlUpdateMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *TrafficControlUpdateMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *TrafficControlUpdateMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *TrafficControlUpdateMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["traffic-control-update"]
}

func (p *TrafficControlUpdateMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *TrafficControlUpdateMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *TrafficControlUpdateMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *TrafficControlUpdateMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *TrafficControlUpdateMobileGatewayParam) SetQuota(v int) {
	p.Quota = v
}

func (p *TrafficControlUpdateMobileGatewayParam) GetQuota() int {
	return p.Quota
}
func (p *TrafficControlUpdateMobileGatewayParam) SetBandWidthLimit(v int) {
	p.BandWidthLimit = v
}

func (p *TrafficControlUpdateMobileGatewayParam) GetBandWidthLimit() int {
	return p.BandWidthLimit
}
func (p *TrafficControlUpdateMobileGatewayParam) SetEnableEmail(v bool) {
	p.EnableEmail = v
}

func (p *TrafficControlUpdateMobileGatewayParam) GetEnableEmail() bool {
	return p.EnableEmail
}
func (p *TrafficControlUpdateMobileGatewayParam) SetSlackWebhookUrl(v string) {
	p.SlackWebhookUrl = v
}

func (p *TrafficControlUpdateMobileGatewayParam) GetSlackWebhookUrl() string {
	return p.SlackWebhookUrl
}
func (p *TrafficControlUpdateMobileGatewayParam) SetAutoTrafficShaping(v bool) {
	p.AutoTrafficShaping = v
}

func (p *TrafficControlUpdateMobileGatewayParam) GetAutoTrafficShaping() bool {
	return p.AutoTrafficShaping
}
func (p *TrafficControlUpdateMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *TrafficControlUpdateMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *TrafficControlUpdateMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *TrafficControlUpdateMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *TrafficControlUpdateMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *TrafficControlUpdateMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *TrafficControlUpdateMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *TrafficControlUpdateMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *TrafficControlUpdateMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *TrafficControlUpdateMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *TrafficControlUpdateMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *TrafficControlUpdateMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *TrafficControlUpdateMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *TrafficControlUpdateMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *TrafficControlUpdateMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *TrafficControlUpdateMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *TrafficControlUpdateMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *TrafficControlUpdateMobileGatewayParam) ToV0() *v0params.TrafficControlUpdateMobileGatewayParam {
	return &v0params.TrafficControlUpdateMobileGatewayParam{
		Quota:              p.Quota,
		BandWidthLimit:     p.BandWidthLimit,
		EnableEmail:        p.EnableEmail,
		SlackWebhookUrl:    p.SlackWebhookUrl,
		AutoTrafficShaping: p.AutoTrafficShaping,
		Selector:           p.Selector,
		Assumeyes:          p.Assumeyes,
		ParamTemplate:      p.ParamTemplate,
		Parameters:         p.Parameters,
		ParamTemplateFile:  p.ParamTemplateFile,
		ParameterFile:      p.ParameterFile,
		GenerateSkeleton:   p.GenerateSkeleton,
		Id:                 p.Id,
	}
}

// TrafficControlDisableMobileGatewayParam is input parameters for the sacloud API
type TrafficControlDisableMobileGatewayParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewTrafficControlDisableMobileGatewayParam return new TrafficControlDisableMobileGatewayParam
func NewTrafficControlDisableMobileGatewayParam() *TrafficControlDisableMobileGatewayParam {
	return &TrafficControlDisableMobileGatewayParam{}
}

// Initialize init TrafficControlDisableMobileGatewayParam
func (p *TrafficControlDisableMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *TrafficControlDisableMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *TrafficControlDisableMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *TrafficControlDisableMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *TrafficControlDisableMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *TrafficControlDisableMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["traffic-control-disable"]
}

func (p *TrafficControlDisableMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *TrafficControlDisableMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *TrafficControlDisableMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *TrafficControlDisableMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *TrafficControlDisableMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *TrafficControlDisableMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["traffic-control-disable"]
}

func (p *TrafficControlDisableMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *TrafficControlDisableMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *TrafficControlDisableMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *TrafficControlDisableMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *TrafficControlDisableMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *TrafficControlDisableMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *TrafficControlDisableMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *TrafficControlDisableMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *TrafficControlDisableMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *TrafficControlDisableMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *TrafficControlDisableMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *TrafficControlDisableMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *TrafficControlDisableMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *TrafficControlDisableMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *TrafficControlDisableMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *TrafficControlDisableMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *TrafficControlDisableMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *TrafficControlDisableMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *TrafficControlDisableMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *TrafficControlDisableMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *TrafficControlDisableMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *TrafficControlDisableMobileGatewayParam) ToV0() *v0params.TrafficControlDisableMobileGatewayParam {
	return &v0params.TrafficControlDisableMobileGatewayParam{
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// StaticRouteInfoMobileGatewayParam is input parameters for the sacloud API
type StaticRouteInfoMobileGatewayParam struct {
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewStaticRouteInfoMobileGatewayParam return new StaticRouteInfoMobileGatewayParam
func NewStaticRouteInfoMobileGatewayParam() *StaticRouteInfoMobileGatewayParam {
	return &StaticRouteInfoMobileGatewayParam{}
}

// Initialize init StaticRouteInfoMobileGatewayParam
func (p *StaticRouteInfoMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticRouteInfoMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *StaticRouteInfoMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *StaticRouteInfoMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *StaticRouteInfoMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *StaticRouteInfoMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-info"]
}

func (p *StaticRouteInfoMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteInfoMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteInfoMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteInfoMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *StaticRouteInfoMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *StaticRouteInfoMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-info"]
}

func (p *StaticRouteInfoMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteInfoMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteInfoMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteInfoMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticRouteInfoMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticRouteInfoMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticRouteInfoMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticRouteInfoMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticRouteInfoMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticRouteInfoMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticRouteInfoMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticRouteInfoMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticRouteInfoMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticRouteInfoMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticRouteInfoMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticRouteInfoMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticRouteInfoMobileGatewayParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *StaticRouteInfoMobileGatewayParam) GetOutputType() string {
	return p.OutputType
}
func (p *StaticRouteInfoMobileGatewayParam) SetColumn(v []string) {
	p.Column = v
}

func (p *StaticRouteInfoMobileGatewayParam) GetColumn() []string {
	return p.Column
}
func (p *StaticRouteInfoMobileGatewayParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *StaticRouteInfoMobileGatewayParam) GetQuiet() bool {
	return p.Quiet
}
func (p *StaticRouteInfoMobileGatewayParam) SetFormat(v string) {
	p.Format = v
}

func (p *StaticRouteInfoMobileGatewayParam) GetFormat() string {
	return p.Format
}
func (p *StaticRouteInfoMobileGatewayParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *StaticRouteInfoMobileGatewayParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *StaticRouteInfoMobileGatewayParam) SetQuery(v string) {
	p.Query = v
}

func (p *StaticRouteInfoMobileGatewayParam) GetQuery() string {
	return p.Query
}
func (p *StaticRouteInfoMobileGatewayParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *StaticRouteInfoMobileGatewayParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *StaticRouteInfoMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticRouteInfoMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *StaticRouteInfoMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *StaticRouteInfoMobileGatewayParam) ToV0() *v0params.StaticRouteInfoMobileGatewayParam {
	return &v0params.StaticRouteInfoMobileGatewayParam{
		Selector:          p.Selector,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		OutputType:        p.OutputType,
		Column:            p.Column,
		Quiet:             p.Quiet,
		Format:            p.Format,
		FormatFile:        p.FormatFile,
		Query:             p.Query,
		QueryFile:         p.QueryFile,
		Id:                p.Id,
	}
}

// StaticRouteAddMobileGatewayParam is input parameters for the sacloud API
type StaticRouteAddMobileGatewayParam struct {
	Prefix            string
	NextHop           string
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewStaticRouteAddMobileGatewayParam return new StaticRouteAddMobileGatewayParam
func NewStaticRouteAddMobileGatewayParam() *StaticRouteAddMobileGatewayParam {
	return &StaticRouteAddMobileGatewayParam{}
}

// Initialize init StaticRouteAddMobileGatewayParam
func (p *StaticRouteAddMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticRouteAddMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *StaticRouteAddMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Prefix) {
		p.Prefix = ""
	}
	if utils.IsEmpty(p.NextHop) {
		p.NextHop = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *StaticRouteAddMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["static-route-add"].Params["prefix"].ValidateFunc
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["static-route-add"].Params["next-hop"].ValidateFunc
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *StaticRouteAddMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *StaticRouteAddMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-add"]
}

func (p *StaticRouteAddMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteAddMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteAddMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteAddMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *StaticRouteAddMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *StaticRouteAddMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-add"]
}

func (p *StaticRouteAddMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteAddMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteAddMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteAddMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticRouteAddMobileGatewayParam) SetPrefix(v string) {
	p.Prefix = v
}

func (p *StaticRouteAddMobileGatewayParam) GetPrefix() string {
	return p.Prefix
}
func (p *StaticRouteAddMobileGatewayParam) SetNextHop(v string) {
	p.NextHop = v
}

func (p *StaticRouteAddMobileGatewayParam) GetNextHop() string {
	return p.NextHop
}
func (p *StaticRouteAddMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticRouteAddMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticRouteAddMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticRouteAddMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticRouteAddMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticRouteAddMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticRouteAddMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticRouteAddMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticRouteAddMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticRouteAddMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticRouteAddMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticRouteAddMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticRouteAddMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticRouteAddMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticRouteAddMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticRouteAddMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *StaticRouteAddMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *StaticRouteAddMobileGatewayParam) ToV0() *v0params.StaticRouteAddMobileGatewayParam {
	return &v0params.StaticRouteAddMobileGatewayParam{
		Prefix:            p.Prefix,
		NextHop:           p.NextHop,
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// StaticRouteUpdateMobileGatewayParam is input parameters for the sacloud API
type StaticRouteUpdateMobileGatewayParam struct {
	Index             int
	Prefix            string
	NextHop           string
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewStaticRouteUpdateMobileGatewayParam return new StaticRouteUpdateMobileGatewayParam
func NewStaticRouteUpdateMobileGatewayParam() *StaticRouteUpdateMobileGatewayParam {
	return &StaticRouteUpdateMobileGatewayParam{}
}

// Initialize init StaticRouteUpdateMobileGatewayParam
func (p *StaticRouteUpdateMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticRouteUpdateMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *StaticRouteUpdateMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Prefix) {
		p.Prefix = ""
	}
	if utils.IsEmpty(p.NextHop) {
		p.NextHop = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *StaticRouteUpdateMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["static-route-update"].Params["prefix"].ValidateFunc
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["static-route-update"].Params["next-hop"].ValidateFunc
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *StaticRouteUpdateMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *StaticRouteUpdateMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-update"]
}

func (p *StaticRouteUpdateMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteUpdateMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteUpdateMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteUpdateMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *StaticRouteUpdateMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *StaticRouteUpdateMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-update"]
}

func (p *StaticRouteUpdateMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteUpdateMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteUpdateMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteUpdateMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticRouteUpdateMobileGatewayParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticRouteUpdateMobileGatewayParam) GetIndex() int {
	return p.Index
}
func (p *StaticRouteUpdateMobileGatewayParam) SetPrefix(v string) {
	p.Prefix = v
}

func (p *StaticRouteUpdateMobileGatewayParam) GetPrefix() string {
	return p.Prefix
}
func (p *StaticRouteUpdateMobileGatewayParam) SetNextHop(v string) {
	p.NextHop = v
}

func (p *StaticRouteUpdateMobileGatewayParam) GetNextHop() string {
	return p.NextHop
}
func (p *StaticRouteUpdateMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticRouteUpdateMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticRouteUpdateMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticRouteUpdateMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticRouteUpdateMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticRouteUpdateMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticRouteUpdateMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticRouteUpdateMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticRouteUpdateMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticRouteUpdateMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticRouteUpdateMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticRouteUpdateMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticRouteUpdateMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticRouteUpdateMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticRouteUpdateMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticRouteUpdateMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *StaticRouteUpdateMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *StaticRouteUpdateMobileGatewayParam) ToV0() *v0params.StaticRouteUpdateMobileGatewayParam {
	return &v0params.StaticRouteUpdateMobileGatewayParam{
		Index:             p.Index,
		Prefix:            p.Prefix,
		NextHop:           p.NextHop,
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// StaticRouteDeleteMobileGatewayParam is input parameters for the sacloud API
type StaticRouteDeleteMobileGatewayParam struct {
	Index             int
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewStaticRouteDeleteMobileGatewayParam return new StaticRouteDeleteMobileGatewayParam
func NewStaticRouteDeleteMobileGatewayParam() *StaticRouteDeleteMobileGatewayParam {
	return &StaticRouteDeleteMobileGatewayParam{}
}

// Initialize init StaticRouteDeleteMobileGatewayParam
func (p *StaticRouteDeleteMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticRouteDeleteMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *StaticRouteDeleteMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *StaticRouteDeleteMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *StaticRouteDeleteMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *StaticRouteDeleteMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-delete"]
}

func (p *StaticRouteDeleteMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteDeleteMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteDeleteMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteDeleteMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *StaticRouteDeleteMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *StaticRouteDeleteMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-delete"]
}

func (p *StaticRouteDeleteMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteDeleteMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteDeleteMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteDeleteMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticRouteDeleteMobileGatewayParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticRouteDeleteMobileGatewayParam) GetIndex() int {
	return p.Index
}
func (p *StaticRouteDeleteMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticRouteDeleteMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticRouteDeleteMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticRouteDeleteMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticRouteDeleteMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticRouteDeleteMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticRouteDeleteMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticRouteDeleteMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticRouteDeleteMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticRouteDeleteMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticRouteDeleteMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticRouteDeleteMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticRouteDeleteMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticRouteDeleteMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticRouteDeleteMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticRouteDeleteMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *StaticRouteDeleteMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *StaticRouteDeleteMobileGatewayParam) ToV0() *v0params.StaticRouteDeleteMobileGatewayParam {
	return &v0params.StaticRouteDeleteMobileGatewayParam{
		Index:             p.Index,
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// SIMInfoMobileGatewayParam is input parameters for the sacloud API
type SIMInfoMobileGatewayParam struct {
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewSIMInfoMobileGatewayParam return new SIMInfoMobileGatewayParam
func NewSIMInfoMobileGatewayParam() *SIMInfoMobileGatewayParam {
	return &SIMInfoMobileGatewayParam{}
}

// Initialize init SIMInfoMobileGatewayParam
func (p *SIMInfoMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SIMInfoMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *SIMInfoMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *SIMInfoMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *SIMInfoMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SIMInfoMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-info"]
}

func (p *SIMInfoMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SIMInfoMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SIMInfoMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SIMInfoMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *SIMInfoMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SIMInfoMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-info"]
}

func (p *SIMInfoMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SIMInfoMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SIMInfoMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SIMInfoMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SIMInfoMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SIMInfoMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *SIMInfoMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SIMInfoMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SIMInfoMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SIMInfoMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *SIMInfoMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SIMInfoMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SIMInfoMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SIMInfoMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SIMInfoMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SIMInfoMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SIMInfoMobileGatewayParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *SIMInfoMobileGatewayParam) GetOutputType() string {
	return p.OutputType
}
func (p *SIMInfoMobileGatewayParam) SetColumn(v []string) {
	p.Column = v
}

func (p *SIMInfoMobileGatewayParam) GetColumn() []string {
	return p.Column
}
func (p *SIMInfoMobileGatewayParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *SIMInfoMobileGatewayParam) GetQuiet() bool {
	return p.Quiet
}
func (p *SIMInfoMobileGatewayParam) SetFormat(v string) {
	p.Format = v
}

func (p *SIMInfoMobileGatewayParam) GetFormat() string {
	return p.Format
}
func (p *SIMInfoMobileGatewayParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *SIMInfoMobileGatewayParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *SIMInfoMobileGatewayParam) SetQuery(v string) {
	p.Query = v
}

func (p *SIMInfoMobileGatewayParam) GetQuery() string {
	return p.Query
}
func (p *SIMInfoMobileGatewayParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *SIMInfoMobileGatewayParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *SIMInfoMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SIMInfoMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *SIMInfoMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *SIMInfoMobileGatewayParam) ToV0() *v0params.SIMInfoMobileGatewayParam {
	return &v0params.SIMInfoMobileGatewayParam{
		Selector:          p.Selector,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		OutputType:        p.OutputType,
		Column:            p.Column,
		Quiet:             p.Quiet,
		Format:            p.Format,
		FormatFile:        p.FormatFile,
		Query:             p.Query,
		QueryFile:         p.QueryFile,
		Id:                p.Id,
	}
}

// SIMAddMobileGatewayParam is input parameters for the sacloud API
type SIMAddMobileGatewayParam struct {
	Ipaddress         string
	SIMId             sacloud.ID
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewSIMAddMobileGatewayParam return new SIMAddMobileGatewayParam
func NewSIMAddMobileGatewayParam() *SIMAddMobileGatewayParam {
	return &SIMAddMobileGatewayParam{}
}

// Initialize init SIMAddMobileGatewayParam
func (p *SIMAddMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SIMAddMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *SIMAddMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.SIMId) {
		p.SIMId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *SIMAddMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["sim-add"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--sim-id", p.SIMId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["sim-add"].Params["sim-id"].ValidateFunc
		errs := validator("--sim-id", p.SIMId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *SIMAddMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SIMAddMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-add"]
}

func (p *SIMAddMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SIMAddMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SIMAddMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SIMAddMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *SIMAddMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SIMAddMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-add"]
}

func (p *SIMAddMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SIMAddMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SIMAddMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SIMAddMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SIMAddMobileGatewayParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *SIMAddMobileGatewayParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *SIMAddMobileGatewayParam) SetSIMId(v sacloud.ID) {
	p.SIMId = v
}

func (p *SIMAddMobileGatewayParam) GetSIMId() sacloud.ID {
	return p.SIMId
}
func (p *SIMAddMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SIMAddMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *SIMAddMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SIMAddMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SIMAddMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SIMAddMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SIMAddMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SIMAddMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *SIMAddMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SIMAddMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SIMAddMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SIMAddMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SIMAddMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SIMAddMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SIMAddMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SIMAddMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *SIMAddMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *SIMAddMobileGatewayParam) ToV0() *v0params.SIMAddMobileGatewayParam {
	return &v0params.SIMAddMobileGatewayParam{
		Ipaddress:         p.Ipaddress,
		SIMId:             p.SIMId,
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// SIMUpdateMobileGatewayParam is input parameters for the sacloud API
type SIMUpdateMobileGatewayParam struct {
	Ipaddress         string
	SIMId             sacloud.ID
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewSIMUpdateMobileGatewayParam return new SIMUpdateMobileGatewayParam
func NewSIMUpdateMobileGatewayParam() *SIMUpdateMobileGatewayParam {
	return &SIMUpdateMobileGatewayParam{}
}

// Initialize init SIMUpdateMobileGatewayParam
func (p *SIMUpdateMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SIMUpdateMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *SIMUpdateMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.SIMId) {
		p.SIMId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *SIMUpdateMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := define.Resources["MobileGateway"].Commands["sim-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--sim-id", p.SIMId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["sim-update"].Params["sim-id"].ValidateFunc
		errs := validator("--sim-id", p.SIMId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *SIMUpdateMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SIMUpdateMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-update"]
}

func (p *SIMUpdateMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SIMUpdateMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SIMUpdateMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SIMUpdateMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *SIMUpdateMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SIMUpdateMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-update"]
}

func (p *SIMUpdateMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SIMUpdateMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SIMUpdateMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SIMUpdateMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SIMUpdateMobileGatewayParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *SIMUpdateMobileGatewayParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *SIMUpdateMobileGatewayParam) SetSIMId(v sacloud.ID) {
	p.SIMId = v
}

func (p *SIMUpdateMobileGatewayParam) GetSIMId() sacloud.ID {
	return p.SIMId
}
func (p *SIMUpdateMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SIMUpdateMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *SIMUpdateMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SIMUpdateMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SIMUpdateMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SIMUpdateMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SIMUpdateMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SIMUpdateMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *SIMUpdateMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SIMUpdateMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SIMUpdateMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SIMUpdateMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SIMUpdateMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SIMUpdateMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SIMUpdateMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SIMUpdateMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *SIMUpdateMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *SIMUpdateMobileGatewayParam) ToV0() *v0params.SIMUpdateMobileGatewayParam {
	return &v0params.SIMUpdateMobileGatewayParam{
		Ipaddress:         p.Ipaddress,
		SIMId:             p.SIMId,
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// SIMDeleteMobileGatewayParam is input parameters for the sacloud API
type SIMDeleteMobileGatewayParam struct {
	SIMId             sacloud.ID
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewSIMDeleteMobileGatewayParam return new SIMDeleteMobileGatewayParam
func NewSIMDeleteMobileGatewayParam() *SIMDeleteMobileGatewayParam {
	return &SIMDeleteMobileGatewayParam{}
}

// Initialize init SIMDeleteMobileGatewayParam
func (p *SIMDeleteMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SIMDeleteMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *SIMDeleteMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.SIMId) {
		p.SIMId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *SIMDeleteMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--sim-id", p.SIMId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["sim-delete"].Params["sim-id"].ValidateFunc
		errs := validator("--sim-id", p.SIMId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *SIMDeleteMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SIMDeleteMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-delete"]
}

func (p *SIMDeleteMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SIMDeleteMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SIMDeleteMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SIMDeleteMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *SIMDeleteMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SIMDeleteMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-delete"]
}

func (p *SIMDeleteMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SIMDeleteMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SIMDeleteMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SIMDeleteMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SIMDeleteMobileGatewayParam) SetSIMId(v sacloud.ID) {
	p.SIMId = v
}

func (p *SIMDeleteMobileGatewayParam) GetSIMId() sacloud.ID {
	return p.SIMId
}
func (p *SIMDeleteMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SIMDeleteMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *SIMDeleteMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SIMDeleteMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SIMDeleteMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SIMDeleteMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SIMDeleteMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SIMDeleteMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *SIMDeleteMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SIMDeleteMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SIMDeleteMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SIMDeleteMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SIMDeleteMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SIMDeleteMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SIMDeleteMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SIMDeleteMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *SIMDeleteMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *SIMDeleteMobileGatewayParam) ToV0() *v0params.SIMDeleteMobileGatewayParam {
	return &v0params.SIMDeleteMobileGatewayParam{
		SIMId:             p.SIMId,
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// SIMRouteInfoMobileGatewayParam is input parameters for the sacloud API
type SIMRouteInfoMobileGatewayParam struct {
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewSIMRouteInfoMobileGatewayParam return new SIMRouteInfoMobileGatewayParam
func NewSIMRouteInfoMobileGatewayParam() *SIMRouteInfoMobileGatewayParam {
	return &SIMRouteInfoMobileGatewayParam{}
}

// Initialize init SIMRouteInfoMobileGatewayParam
func (p *SIMRouteInfoMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SIMRouteInfoMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *SIMRouteInfoMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *SIMRouteInfoMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *SIMRouteInfoMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SIMRouteInfoMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-route-info"]
}

func (p *SIMRouteInfoMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SIMRouteInfoMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SIMRouteInfoMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SIMRouteInfoMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *SIMRouteInfoMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SIMRouteInfoMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-route-info"]
}

func (p *SIMRouteInfoMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SIMRouteInfoMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SIMRouteInfoMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SIMRouteInfoMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SIMRouteInfoMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SIMRouteInfoMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *SIMRouteInfoMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SIMRouteInfoMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SIMRouteInfoMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SIMRouteInfoMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *SIMRouteInfoMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SIMRouteInfoMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SIMRouteInfoMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SIMRouteInfoMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SIMRouteInfoMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SIMRouteInfoMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SIMRouteInfoMobileGatewayParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *SIMRouteInfoMobileGatewayParam) GetOutputType() string {
	return p.OutputType
}
func (p *SIMRouteInfoMobileGatewayParam) SetColumn(v []string) {
	p.Column = v
}

func (p *SIMRouteInfoMobileGatewayParam) GetColumn() []string {
	return p.Column
}
func (p *SIMRouteInfoMobileGatewayParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *SIMRouteInfoMobileGatewayParam) GetQuiet() bool {
	return p.Quiet
}
func (p *SIMRouteInfoMobileGatewayParam) SetFormat(v string) {
	p.Format = v
}

func (p *SIMRouteInfoMobileGatewayParam) GetFormat() string {
	return p.Format
}
func (p *SIMRouteInfoMobileGatewayParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *SIMRouteInfoMobileGatewayParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *SIMRouteInfoMobileGatewayParam) SetQuery(v string) {
	p.Query = v
}

func (p *SIMRouteInfoMobileGatewayParam) GetQuery() string {
	return p.Query
}
func (p *SIMRouteInfoMobileGatewayParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *SIMRouteInfoMobileGatewayParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *SIMRouteInfoMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SIMRouteInfoMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *SIMRouteInfoMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *SIMRouteInfoMobileGatewayParam) ToV0() *v0params.SIMRouteInfoMobileGatewayParam {
	return &v0params.SIMRouteInfoMobileGatewayParam{
		Selector:          p.Selector,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		OutputType:        p.OutputType,
		Column:            p.Column,
		Quiet:             p.Quiet,
		Format:            p.Format,
		FormatFile:        p.FormatFile,
		Query:             p.Query,
		QueryFile:         p.QueryFile,
		Id:                p.Id,
	}
}

// SIMRouteAddMobileGatewayParam is input parameters for the sacloud API
type SIMRouteAddMobileGatewayParam struct {
	Prefix            string
	SIM               sacloud.ID
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewSIMRouteAddMobileGatewayParam return new SIMRouteAddMobileGatewayParam
func NewSIMRouteAddMobileGatewayParam() *SIMRouteAddMobileGatewayParam {
	return &SIMRouteAddMobileGatewayParam{}
}

// Initialize init SIMRouteAddMobileGatewayParam
func (p *SIMRouteAddMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SIMRouteAddMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *SIMRouteAddMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Prefix) {
		p.Prefix = ""
	}
	if utils.IsEmpty(p.SIM) {
		p.SIM = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *SIMRouteAddMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["sim-route-add"].Params["prefix"].ValidateFunc
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--sim", p.SIM)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["sim-route-add"].Params["sim"].ValidateFunc
		errs := validator("--sim", p.SIM)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *SIMRouteAddMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SIMRouteAddMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-route-add"]
}

func (p *SIMRouteAddMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SIMRouteAddMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SIMRouteAddMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SIMRouteAddMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *SIMRouteAddMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SIMRouteAddMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-route-add"]
}

func (p *SIMRouteAddMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SIMRouteAddMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SIMRouteAddMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SIMRouteAddMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SIMRouteAddMobileGatewayParam) SetPrefix(v string) {
	p.Prefix = v
}

func (p *SIMRouteAddMobileGatewayParam) GetPrefix() string {
	return p.Prefix
}
func (p *SIMRouteAddMobileGatewayParam) SetSIM(v sacloud.ID) {
	p.SIM = v
}

func (p *SIMRouteAddMobileGatewayParam) GetSIM() sacloud.ID {
	return p.SIM
}
func (p *SIMRouteAddMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SIMRouteAddMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *SIMRouteAddMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SIMRouteAddMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SIMRouteAddMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SIMRouteAddMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SIMRouteAddMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SIMRouteAddMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *SIMRouteAddMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SIMRouteAddMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SIMRouteAddMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SIMRouteAddMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SIMRouteAddMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SIMRouteAddMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SIMRouteAddMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SIMRouteAddMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *SIMRouteAddMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *SIMRouteAddMobileGatewayParam) ToV0() *v0params.SIMRouteAddMobileGatewayParam {
	return &v0params.SIMRouteAddMobileGatewayParam{
		Prefix:            p.Prefix,
		SIM:               p.SIM,
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// SIMRouteUpdateMobileGatewayParam is input parameters for the sacloud API
type SIMRouteUpdateMobileGatewayParam struct {
	Index             int
	Prefix            string
	SIM               sacloud.ID
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewSIMRouteUpdateMobileGatewayParam return new SIMRouteUpdateMobileGatewayParam
func NewSIMRouteUpdateMobileGatewayParam() *SIMRouteUpdateMobileGatewayParam {
	return &SIMRouteUpdateMobileGatewayParam{}
}

// Initialize init SIMRouteUpdateMobileGatewayParam
func (p *SIMRouteUpdateMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SIMRouteUpdateMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *SIMRouteUpdateMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Prefix) {
		p.Prefix = ""
	}
	if utils.IsEmpty(p.SIM) {
		p.SIM = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *SIMRouteUpdateMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["sim-route-update"].Params["prefix"].ValidateFunc
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["sim-route-update"].Params["sim"].ValidateFunc
		errs := validator("--sim", p.SIM)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *SIMRouteUpdateMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SIMRouteUpdateMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-route-update"]
}

func (p *SIMRouteUpdateMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SIMRouteUpdateMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SIMRouteUpdateMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SIMRouteUpdateMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *SIMRouteUpdateMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SIMRouteUpdateMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-route-update"]
}

func (p *SIMRouteUpdateMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SIMRouteUpdateMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SIMRouteUpdateMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SIMRouteUpdateMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SIMRouteUpdateMobileGatewayParam) SetIndex(v int) {
	p.Index = v
}

func (p *SIMRouteUpdateMobileGatewayParam) GetIndex() int {
	return p.Index
}
func (p *SIMRouteUpdateMobileGatewayParam) SetPrefix(v string) {
	p.Prefix = v
}

func (p *SIMRouteUpdateMobileGatewayParam) GetPrefix() string {
	return p.Prefix
}
func (p *SIMRouteUpdateMobileGatewayParam) SetSIM(v sacloud.ID) {
	p.SIM = v
}

func (p *SIMRouteUpdateMobileGatewayParam) GetSIM() sacloud.ID {
	return p.SIM
}
func (p *SIMRouteUpdateMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SIMRouteUpdateMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *SIMRouteUpdateMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SIMRouteUpdateMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SIMRouteUpdateMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SIMRouteUpdateMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SIMRouteUpdateMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SIMRouteUpdateMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *SIMRouteUpdateMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SIMRouteUpdateMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SIMRouteUpdateMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SIMRouteUpdateMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SIMRouteUpdateMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SIMRouteUpdateMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SIMRouteUpdateMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SIMRouteUpdateMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *SIMRouteUpdateMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *SIMRouteUpdateMobileGatewayParam) ToV0() *v0params.SIMRouteUpdateMobileGatewayParam {
	return &v0params.SIMRouteUpdateMobileGatewayParam{
		Index:             p.Index,
		Prefix:            p.Prefix,
		SIM:               p.SIM,
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// SIMRouteDeleteMobileGatewayParam is input parameters for the sacloud API
type SIMRouteDeleteMobileGatewayParam struct {
	Index             int
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewSIMRouteDeleteMobileGatewayParam return new SIMRouteDeleteMobileGatewayParam
func NewSIMRouteDeleteMobileGatewayParam() *SIMRouteDeleteMobileGatewayParam {
	return &SIMRouteDeleteMobileGatewayParam{}
}

// Initialize init SIMRouteDeleteMobileGatewayParam
func (p *SIMRouteDeleteMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SIMRouteDeleteMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *SIMRouteDeleteMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *SIMRouteDeleteMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *SIMRouteDeleteMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SIMRouteDeleteMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-route-delete"]
}

func (p *SIMRouteDeleteMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SIMRouteDeleteMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SIMRouteDeleteMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SIMRouteDeleteMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *SIMRouteDeleteMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SIMRouteDeleteMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-route-delete"]
}

func (p *SIMRouteDeleteMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SIMRouteDeleteMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SIMRouteDeleteMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SIMRouteDeleteMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SIMRouteDeleteMobileGatewayParam) SetIndex(v int) {
	p.Index = v
}

func (p *SIMRouteDeleteMobileGatewayParam) GetIndex() int {
	return p.Index
}
func (p *SIMRouteDeleteMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SIMRouteDeleteMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *SIMRouteDeleteMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SIMRouteDeleteMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SIMRouteDeleteMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SIMRouteDeleteMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SIMRouteDeleteMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SIMRouteDeleteMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *SIMRouteDeleteMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SIMRouteDeleteMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SIMRouteDeleteMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SIMRouteDeleteMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SIMRouteDeleteMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SIMRouteDeleteMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SIMRouteDeleteMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SIMRouteDeleteMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *SIMRouteDeleteMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *SIMRouteDeleteMobileGatewayParam) ToV0() *v0params.SIMRouteDeleteMobileGatewayParam {
	return &v0params.SIMRouteDeleteMobileGatewayParam{
		Index:             p.Index,
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// DNSUpdateMobileGatewayParam is input parameters for the sacloud API
type DNSUpdateMobileGatewayParam struct {
	DNS1              string
	DNS2              string
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewDNSUpdateMobileGatewayParam return new DNSUpdateMobileGatewayParam
func NewDNSUpdateMobileGatewayParam() *DNSUpdateMobileGatewayParam {
	return &DNSUpdateMobileGatewayParam{}
}

// Initialize init DNSUpdateMobileGatewayParam
func (p *DNSUpdateMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DNSUpdateMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *DNSUpdateMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.DNS1) {
		p.DNS1 = ""
	}
	if utils.IsEmpty(p.DNS2) {
		p.DNS2 = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DNSUpdateMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--dns-1", p.DNS1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["dns-update"].Params["dns1"].ValidateFunc
		errs := validator("--dns-1", p.DNS1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--dns-2", p.DNS2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["dns-update"].Params["dns2"].ValidateFunc
		errs := validator("--dns-2", p.DNS2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *DNSUpdateMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *DNSUpdateMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["dns-update"]
}

func (p *DNSUpdateMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DNSUpdateMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DNSUpdateMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DNSUpdateMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *DNSUpdateMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *DNSUpdateMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["dns-update"]
}

func (p *DNSUpdateMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DNSUpdateMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DNSUpdateMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DNSUpdateMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DNSUpdateMobileGatewayParam) SetDNS1(v string) {
	p.DNS1 = v
}

func (p *DNSUpdateMobileGatewayParam) GetDNS1() string {
	return p.DNS1
}
func (p *DNSUpdateMobileGatewayParam) SetDNS2(v string) {
	p.DNS2 = v
}

func (p *DNSUpdateMobileGatewayParam) GetDNS2() string {
	return p.DNS2
}
func (p *DNSUpdateMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DNSUpdateMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *DNSUpdateMobileGatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DNSUpdateMobileGatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DNSUpdateMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DNSUpdateMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DNSUpdateMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DNSUpdateMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *DNSUpdateMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DNSUpdateMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DNSUpdateMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DNSUpdateMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DNSUpdateMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DNSUpdateMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DNSUpdateMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DNSUpdateMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *DNSUpdateMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *DNSUpdateMobileGatewayParam) ToV0() *v0params.DNSUpdateMobileGatewayParam {
	return &v0params.DNSUpdateMobileGatewayParam{
		DNS1:              p.DNS1,
		DNS2:              p.DNS2,
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// LogsMobileGatewayParam is input parameters for the sacloud API
type LogsMobileGatewayParam struct {
	Follow            bool
	RefreshInterval   int64
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewLogsMobileGatewayParam return new LogsMobileGatewayParam
func NewLogsMobileGatewayParam() *LogsMobileGatewayParam {
	return &LogsMobileGatewayParam{
		RefreshInterval: 3}
}

// Initialize init LogsMobileGatewayParam
func (p *LogsMobileGatewayParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *LogsMobileGatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *LogsMobileGatewayParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Follow) {
		p.Follow = false
	}
	if utils.IsEmpty(p.RefreshInterval) {
		p.RefreshInterval = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *LogsMobileGatewayParam) validate() error {
	var errors []error

	{
		validator := define.Resources["MobileGateway"].Commands["logs"].Params["refresh-interval"].ValidateFunc
		errs := validator("--refresh-interval", p.RefreshInterval)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *LogsMobileGatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *LogsMobileGatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["logs"]
}

func (p *LogsMobileGatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *LogsMobileGatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *LogsMobileGatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *LogsMobileGatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *LogsMobileGatewayParam) GetResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *LogsMobileGatewayParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["logs"]
}

func (p *LogsMobileGatewayParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *LogsMobileGatewayParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *LogsMobileGatewayParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *LogsMobileGatewayParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *LogsMobileGatewayParam) SetFollow(v bool) {
	p.Follow = v
}

func (p *LogsMobileGatewayParam) GetFollow() bool {
	return p.Follow
}
func (p *LogsMobileGatewayParam) SetRefreshInterval(v int64) {
	p.RefreshInterval = v
}

func (p *LogsMobileGatewayParam) GetRefreshInterval() int64 {
	return p.RefreshInterval
}
func (p *LogsMobileGatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *LogsMobileGatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *LogsMobileGatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *LogsMobileGatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *LogsMobileGatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *LogsMobileGatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *LogsMobileGatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *LogsMobileGatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *LogsMobileGatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *LogsMobileGatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *LogsMobileGatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *LogsMobileGatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *LogsMobileGatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *LogsMobileGatewayParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *LogsMobileGatewayParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *LogsMobileGatewayParam) ToV0() *v0params.LogsMobileGatewayParam {
	return &v0params.LogsMobileGatewayParam{
		Follow:            p.Follow,
		RefreshInterval:   p.RefreshInterval,
		Selector:          p.Selector,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

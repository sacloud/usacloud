// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListMobilegatewayParam is input parameters for the sacloud API
type ListMobilegatewayParam struct {
	Max  int
	Sort []string
	Name []string
	Id   []sacloud.ID
	From int
	Tags []string

	input Input
}

// NewListMobilegatewayParam return new ListMobilegatewayParam
func NewListMobilegatewayParam() *ListMobilegatewayParam {
	return &ListMobilegatewayParam{}
}

// Initialize init ListMobilegatewayParam
func (p *ListMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}

}

func (p *ListMobilegatewayParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *ListMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListMobilegatewayParam) SetMax(v int) {
	p.Max = v
}

func (p *ListMobilegatewayParam) GetMax() int {
	return p.Max
}
func (p *ListMobilegatewayParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListMobilegatewayParam) GetSort() []string {
	return p.Sort
}
func (p *ListMobilegatewayParam) SetName(v []string) {
	p.Name = v
}

func (p *ListMobilegatewayParam) GetName() []string {
	return p.Name
}
func (p *ListMobilegatewayParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListMobilegatewayParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListMobilegatewayParam) SetFrom(v int) {
	p.From = v
}

func (p *ListMobilegatewayParam) GetFrom() int {
	return p.From
}
func (p *ListMobilegatewayParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListMobilegatewayParam) GetTags() []string {
	return p.Tags
}

// CreateMobilegatewayParam is input parameters for the sacloud API
type CreateMobilegatewayParam struct {
	Name               string
	Description        string
	Tags               []string
	IconId             sacloud.ID
	InternetConnection bool

	input Input
}

// NewCreateMobilegatewayParam return new CreateMobilegatewayParam
func NewCreateMobilegatewayParam() *CreateMobilegatewayParam {
	return &CreateMobilegatewayParam{}
}

// Initialize init CreateMobilegatewayParam
func (p *CreateMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.InternetConnection) {
		p.InternetConnection = false
	}

}

func (p *CreateMobilegatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *CreateMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateMobilegatewayParam) SetName(v string) {
	p.Name = v
}

func (p *CreateMobilegatewayParam) GetName() string {
	return p.Name
}
func (p *CreateMobilegatewayParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateMobilegatewayParam) GetDescription() string {
	return p.Description
}
func (p *CreateMobilegatewayParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateMobilegatewayParam) GetTags() []string {
	return p.Tags
}
func (p *CreateMobilegatewayParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateMobilegatewayParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateMobilegatewayParam) SetInternetConnection(v bool) {
	p.InternetConnection = v
}

func (p *CreateMobilegatewayParam) GetInternetConnection() bool {
	return p.InternetConnection
}

// ReadMobilegatewayParam is input parameters for the sacloud API
type ReadMobilegatewayParam struct {
	input Input
}

// NewReadMobilegatewayParam return new ReadMobilegatewayParam
func NewReadMobilegatewayParam() *ReadMobilegatewayParam {
	return &ReadMobilegatewayParam{}
}

// Initialize init ReadMobilegatewayParam
func (p *ReadMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadMobilegatewayParam) fillValueToSkeleton() {

}

func (p *ReadMobilegatewayParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *ReadMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdateMobilegatewayParam is input parameters for the sacloud API
type UpdateMobilegatewayParam struct {
	InternetConnection bool
	Name               string
	Description        string
	Tags               []string
	IconId             sacloud.ID

	input Input
}

// NewUpdateMobilegatewayParam return new UpdateMobilegatewayParam
func NewUpdateMobilegatewayParam() *UpdateMobilegatewayParam {
	return &UpdateMobilegatewayParam{}
}

// Initialize init UpdateMobilegatewayParam
func (p *UpdateMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.InternetConnection) {
		p.InternetConnection = false
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}

}

func (p *UpdateMobilegatewayParam) validate() error {
	var errors []error

	{
		validator := define.Resources["MobileGateway"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *UpdateMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateMobilegatewayParam) SetInternetConnection(v bool) {
	p.InternetConnection = v
}

func (p *UpdateMobilegatewayParam) GetInternetConnection() bool {
	return p.InternetConnection
}
func (p *UpdateMobilegatewayParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateMobilegatewayParam) GetName() string {
	return p.Name
}
func (p *UpdateMobilegatewayParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateMobilegatewayParam) GetDescription() string {
	return p.Description
}
func (p *UpdateMobilegatewayParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateMobilegatewayParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateMobilegatewayParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateMobilegatewayParam) GetIconId() sacloud.ID {
	return p.IconId
}

// DeleteMobilegatewayParam is input parameters for the sacloud API
type DeleteMobilegatewayParam struct {
	Force bool

	input Input
}

// NewDeleteMobilegatewayParam return new DeleteMobilegatewayParam
func NewDeleteMobilegatewayParam() *DeleteMobilegatewayParam {
	return &DeleteMobilegatewayParam{}
}

// Initialize init DeleteMobilegatewayParam
func (p *DeleteMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Force) {
		p.Force = false
	}

}

func (p *DeleteMobilegatewayParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *DeleteMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteMobilegatewayParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteMobilegatewayParam) GetForce() bool {
	return p.Force
}

// BootMobilegatewayParam is input parameters for the sacloud API
type BootMobilegatewayParam struct {
	input Input
}

// NewBootMobilegatewayParam return new BootMobilegatewayParam
func NewBootMobilegatewayParam() *BootMobilegatewayParam {
	return &BootMobilegatewayParam{}
}

// Initialize init BootMobilegatewayParam
func (p *BootMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BootMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BootMobilegatewayParam) fillValueToSkeleton() {

}

func (p *BootMobilegatewayParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *BootMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *BootMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["boot"]
}

func (p *BootMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BootMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BootMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BootMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ShutdownMobilegatewayParam is input parameters for the sacloud API
type ShutdownMobilegatewayParam struct {
	input Input
}

// NewShutdownMobilegatewayParam return new ShutdownMobilegatewayParam
func NewShutdownMobilegatewayParam() *ShutdownMobilegatewayParam {
	return &ShutdownMobilegatewayParam{}
}

// Initialize init ShutdownMobilegatewayParam
func (p *ShutdownMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShutdownMobilegatewayParam) fillValueToSkeleton() {

}

func (p *ShutdownMobilegatewayParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ShutdownMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *ShutdownMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown"]
}

func (p *ShutdownMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ShutdownForceMobilegatewayParam is input parameters for the sacloud API
type ShutdownForceMobilegatewayParam struct {
	input Input
}

// NewShutdownForceMobilegatewayParam return new ShutdownForceMobilegatewayParam
func NewShutdownForceMobilegatewayParam() *ShutdownForceMobilegatewayParam {
	return &ShutdownForceMobilegatewayParam{}
}

// Initialize init ShutdownForceMobilegatewayParam
func (p *ShutdownForceMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownForceMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShutdownForceMobilegatewayParam) fillValueToSkeleton() {

}

func (p *ShutdownForceMobilegatewayParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ShutdownForceMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *ShutdownForceMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown-force"]
}

func (p *ShutdownForceMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownForceMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownForceMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownForceMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ResetMobilegatewayParam is input parameters for the sacloud API
type ResetMobilegatewayParam struct {
	input Input
}

// NewResetMobilegatewayParam return new ResetMobilegatewayParam
func NewResetMobilegatewayParam() *ResetMobilegatewayParam {
	return &ResetMobilegatewayParam{}
}

// Initialize init ResetMobilegatewayParam
func (p *ResetMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResetMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResetMobilegatewayParam) fillValueToSkeleton() {

}

func (p *ResetMobilegatewayParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ResetMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *ResetMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["reset"]
}

func (p *ResetMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResetMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResetMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResetMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// WaitForBootMobilegatewayParam is input parameters for the sacloud API
type WaitForBootMobilegatewayParam struct {
	input Input
}

// NewWaitForBootMobilegatewayParam return new WaitForBootMobilegatewayParam
func NewWaitForBootMobilegatewayParam() *WaitForBootMobilegatewayParam {
	return &WaitForBootMobilegatewayParam{}
}

// Initialize init WaitForBootMobilegatewayParam
func (p *WaitForBootMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForBootMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForBootMobilegatewayParam) fillValueToSkeleton() {

}

func (p *WaitForBootMobilegatewayParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *WaitForBootMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *WaitForBootMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-boot"]
}

func (p *WaitForBootMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForBootMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForBootMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForBootMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// WaitForDownMobilegatewayParam is input parameters for the sacloud API
type WaitForDownMobilegatewayParam struct {
	input Input
}

// NewWaitForDownMobilegatewayParam return new WaitForDownMobilegatewayParam
func NewWaitForDownMobilegatewayParam() *WaitForDownMobilegatewayParam {
	return &WaitForDownMobilegatewayParam{}
}

// Initialize init WaitForDownMobilegatewayParam
func (p *WaitForDownMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForDownMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForDownMobilegatewayParam) fillValueToSkeleton() {

}

func (p *WaitForDownMobilegatewayParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *WaitForDownMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *WaitForDownMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-down"]
}

func (p *WaitForDownMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForDownMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForDownMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForDownMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// InterfaceInfoMobilegatewayParam is input parameters for the sacloud API
type InterfaceInfoMobilegatewayParam struct {
	input Input
}

// NewInterfaceInfoMobilegatewayParam return new InterfaceInfoMobilegatewayParam
func NewInterfaceInfoMobilegatewayParam() *InterfaceInfoMobilegatewayParam {
	return &InterfaceInfoMobilegatewayParam{}
}

// Initialize init InterfaceInfoMobilegatewayParam
func (p *InterfaceInfoMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceInfoMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceInfoMobilegatewayParam) fillValueToSkeleton() {

}

func (p *InterfaceInfoMobilegatewayParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *InterfaceInfoMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *InterfaceInfoMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-info"]
}

func (p *InterfaceInfoMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceInfoMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceInfoMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceInfoMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// InterfaceConnectMobilegatewayParam is input parameters for the sacloud API
type InterfaceConnectMobilegatewayParam struct {
	SwitchId  sacloud.ID
	Ipaddress string
	NwMasklen int

	input Input
}

// NewInterfaceConnectMobilegatewayParam return new InterfaceConnectMobilegatewayParam
func NewInterfaceConnectMobilegatewayParam() *InterfaceConnectMobilegatewayParam {
	return &InterfaceConnectMobilegatewayParam{
		NwMasklen: 24}
}

// Initialize init InterfaceConnectMobilegatewayParam
func (p *InterfaceConnectMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceConnectMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceConnectMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}

}

func (p *InterfaceConnectMobilegatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["interface-connect"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["interface-connect"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["interface-connect"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *InterfaceConnectMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *InterfaceConnectMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-connect"]
}

func (p *InterfaceConnectMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceConnectMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceConnectMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceConnectMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceConnectMobilegatewayParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *InterfaceConnectMobilegatewayParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *InterfaceConnectMobilegatewayParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *InterfaceConnectMobilegatewayParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *InterfaceConnectMobilegatewayParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *InterfaceConnectMobilegatewayParam) GetNwMasklen() int {
	return p.NwMasklen
}

// InterfaceUpdateMobilegatewayParam is input parameters for the sacloud API
type InterfaceUpdateMobilegatewayParam struct {
	Ipaddress string
	NwMasklen int

	input Input
}

// NewInterfaceUpdateMobilegatewayParam return new InterfaceUpdateMobilegatewayParam
func NewInterfaceUpdateMobilegatewayParam() *InterfaceUpdateMobilegatewayParam {
	return &InterfaceUpdateMobilegatewayParam{
		NwMasklen: 24}
}

// Initialize init InterfaceUpdateMobilegatewayParam
func (p *InterfaceUpdateMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceUpdateMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceUpdateMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}

}

func (p *InterfaceUpdateMobilegatewayParam) validate() error {
	var errors []error

	{
		validator := define.Resources["MobileGateway"].Commands["interface-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["interface-update"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *InterfaceUpdateMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *InterfaceUpdateMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-update"]
}

func (p *InterfaceUpdateMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceUpdateMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceUpdateMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceUpdateMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceUpdateMobilegatewayParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *InterfaceUpdateMobilegatewayParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *InterfaceUpdateMobilegatewayParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *InterfaceUpdateMobilegatewayParam) GetNwMasklen() int {
	return p.NwMasklen
}

// InterfaceDisconnectMobilegatewayParam is input parameters for the sacloud API
type InterfaceDisconnectMobilegatewayParam struct {
	input Input
}

// NewInterfaceDisconnectMobilegatewayParam return new InterfaceDisconnectMobilegatewayParam
func NewInterfaceDisconnectMobilegatewayParam() *InterfaceDisconnectMobilegatewayParam {
	return &InterfaceDisconnectMobilegatewayParam{}
}

// Initialize init InterfaceDisconnectMobilegatewayParam
func (p *InterfaceDisconnectMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceDisconnectMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceDisconnectMobilegatewayParam) fillValueToSkeleton() {

}

func (p *InterfaceDisconnectMobilegatewayParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *InterfaceDisconnectMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *InterfaceDisconnectMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-disconnect"]
}

func (p *InterfaceDisconnectMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceDisconnectMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceDisconnectMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceDisconnectMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// TrafficControlInfoMobilegatewayParam is input parameters for the sacloud API
type TrafficControlInfoMobilegatewayParam struct {
	input Input
}

// NewTrafficControlInfoMobilegatewayParam return new TrafficControlInfoMobilegatewayParam
func NewTrafficControlInfoMobilegatewayParam() *TrafficControlInfoMobilegatewayParam {
	return &TrafficControlInfoMobilegatewayParam{}
}

// Initialize init TrafficControlInfoMobilegatewayParam
func (p *TrafficControlInfoMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *TrafficControlInfoMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *TrafficControlInfoMobilegatewayParam) fillValueToSkeleton() {

}

func (p *TrafficControlInfoMobilegatewayParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *TrafficControlInfoMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *TrafficControlInfoMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["traffic-control-info"]
}

func (p *TrafficControlInfoMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *TrafficControlInfoMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *TrafficControlInfoMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *TrafficControlInfoMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// TrafficControlEnableMobilegatewayParam is input parameters for the sacloud API
type TrafficControlEnableMobilegatewayParam struct {
	Quota              int
	BandWidthLimit     int
	EnableEmail        bool
	SlackWebhookUrl    string
	AutoTrafficShaping bool

	input Input
}

// NewTrafficControlEnableMobilegatewayParam return new TrafficControlEnableMobilegatewayParam
func NewTrafficControlEnableMobilegatewayParam() *TrafficControlEnableMobilegatewayParam {
	return &TrafficControlEnableMobilegatewayParam{
		Quota: 512}
}

// Initialize init TrafficControlEnableMobilegatewayParam
func (p *TrafficControlEnableMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *TrafficControlEnableMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *TrafficControlEnableMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Quota) {
		p.Quota = 0
	}
	if utils.IsEmpty(p.BandWidthLimit) {
		p.BandWidthLimit = 0
	}
	if utils.IsEmpty(p.EnableEmail) {
		p.EnableEmail = false
	}
	if utils.IsEmpty(p.SlackWebhookUrl) {
		p.SlackWebhookUrl = ""
	}
	if utils.IsEmpty(p.AutoTrafficShaping) {
		p.AutoTrafficShaping = false
	}

}

func (p *TrafficControlEnableMobilegatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--quota", p.Quota)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["traffic-control-enable"].Params["quota"].ValidateFunc
		errs := validator("--quota", p.Quota)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["traffic-control-enable"].Params["band-width-limit"].ValidateFunc
		errs := validator("--band-width-limit", p.BandWidthLimit)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["traffic-control-enable"].Params["slack-webhook-url"].ValidateFunc
		errs := validator("--slack-webhook-url", p.SlackWebhookUrl)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *TrafficControlEnableMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *TrafficControlEnableMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["traffic-control-enable"]
}

func (p *TrafficControlEnableMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *TrafficControlEnableMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *TrafficControlEnableMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *TrafficControlEnableMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *TrafficControlEnableMobilegatewayParam) SetQuota(v int) {
	p.Quota = v
}

func (p *TrafficControlEnableMobilegatewayParam) GetQuota() int {
	return p.Quota
}
func (p *TrafficControlEnableMobilegatewayParam) SetBandWidthLimit(v int) {
	p.BandWidthLimit = v
}

func (p *TrafficControlEnableMobilegatewayParam) GetBandWidthLimit() int {
	return p.BandWidthLimit
}
func (p *TrafficControlEnableMobilegatewayParam) SetEnableEmail(v bool) {
	p.EnableEmail = v
}

func (p *TrafficControlEnableMobilegatewayParam) GetEnableEmail() bool {
	return p.EnableEmail
}
func (p *TrafficControlEnableMobilegatewayParam) SetSlackWebhookUrl(v string) {
	p.SlackWebhookUrl = v
}

func (p *TrafficControlEnableMobilegatewayParam) GetSlackWebhookUrl() string {
	return p.SlackWebhookUrl
}
func (p *TrafficControlEnableMobilegatewayParam) SetAutoTrafficShaping(v bool) {
	p.AutoTrafficShaping = v
}

func (p *TrafficControlEnableMobilegatewayParam) GetAutoTrafficShaping() bool {
	return p.AutoTrafficShaping
}

// TrafficControlUpdateMobilegatewayParam is input parameters for the sacloud API
type TrafficControlUpdateMobilegatewayParam struct {
	SlackWebhookUrl    string
	AutoTrafficShaping bool
	Quota              int
	BandWidthLimit     int
	EnableEmail        bool

	input Input
}

// NewTrafficControlUpdateMobilegatewayParam return new TrafficControlUpdateMobilegatewayParam
func NewTrafficControlUpdateMobilegatewayParam() *TrafficControlUpdateMobilegatewayParam {
	return &TrafficControlUpdateMobilegatewayParam{}
}

// Initialize init TrafficControlUpdateMobilegatewayParam
func (p *TrafficControlUpdateMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *TrafficControlUpdateMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *TrafficControlUpdateMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.SlackWebhookUrl) {
		p.SlackWebhookUrl = ""
	}
	if utils.IsEmpty(p.AutoTrafficShaping) {
		p.AutoTrafficShaping = false
	}
	if utils.IsEmpty(p.Quota) {
		p.Quota = 0
	}
	if utils.IsEmpty(p.BandWidthLimit) {
		p.BandWidthLimit = 0
	}
	if utils.IsEmpty(p.EnableEmail) {
		p.EnableEmail = false
	}

}

func (p *TrafficControlUpdateMobilegatewayParam) validate() error {
	var errors []error

	{
		validator := define.Resources["MobileGateway"].Commands["traffic-control-update"].Params["slack-webhook-url"].ValidateFunc
		errs := validator("--slack-webhook-url", p.SlackWebhookUrl)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["traffic-control-update"].Params["quota"].ValidateFunc
		errs := validator("--quota", p.Quota)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["traffic-control-update"].Params["band-width-limit"].ValidateFunc
		errs := validator("--band-width-limit", p.BandWidthLimit)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *TrafficControlUpdateMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *TrafficControlUpdateMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["traffic-control-update"]
}

func (p *TrafficControlUpdateMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *TrafficControlUpdateMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *TrafficControlUpdateMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *TrafficControlUpdateMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *TrafficControlUpdateMobilegatewayParam) SetSlackWebhookUrl(v string) {
	p.SlackWebhookUrl = v
}

func (p *TrafficControlUpdateMobilegatewayParam) GetSlackWebhookUrl() string {
	return p.SlackWebhookUrl
}
func (p *TrafficControlUpdateMobilegatewayParam) SetAutoTrafficShaping(v bool) {
	p.AutoTrafficShaping = v
}

func (p *TrafficControlUpdateMobilegatewayParam) GetAutoTrafficShaping() bool {
	return p.AutoTrafficShaping
}
func (p *TrafficControlUpdateMobilegatewayParam) SetQuota(v int) {
	p.Quota = v
}

func (p *TrafficControlUpdateMobilegatewayParam) GetQuota() int {
	return p.Quota
}
func (p *TrafficControlUpdateMobilegatewayParam) SetBandWidthLimit(v int) {
	p.BandWidthLimit = v
}

func (p *TrafficControlUpdateMobilegatewayParam) GetBandWidthLimit() int {
	return p.BandWidthLimit
}
func (p *TrafficControlUpdateMobilegatewayParam) SetEnableEmail(v bool) {
	p.EnableEmail = v
}

func (p *TrafficControlUpdateMobilegatewayParam) GetEnableEmail() bool {
	return p.EnableEmail
}

// TrafficControlDisableMobilegatewayParam is input parameters for the sacloud API
type TrafficControlDisableMobilegatewayParam struct {
	input Input
}

// NewTrafficControlDisableMobilegatewayParam return new TrafficControlDisableMobilegatewayParam
func NewTrafficControlDisableMobilegatewayParam() *TrafficControlDisableMobilegatewayParam {
	return &TrafficControlDisableMobilegatewayParam{}
}

// Initialize init TrafficControlDisableMobilegatewayParam
func (p *TrafficControlDisableMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *TrafficControlDisableMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *TrafficControlDisableMobilegatewayParam) fillValueToSkeleton() {

}

func (p *TrafficControlDisableMobilegatewayParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *TrafficControlDisableMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *TrafficControlDisableMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["traffic-control-disable"]
}

func (p *TrafficControlDisableMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *TrafficControlDisableMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *TrafficControlDisableMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *TrafficControlDisableMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// StaticRouteInfoMobilegatewayParam is input parameters for the sacloud API
type StaticRouteInfoMobilegatewayParam struct {
	input Input
}

// NewStaticRouteInfoMobilegatewayParam return new StaticRouteInfoMobilegatewayParam
func NewStaticRouteInfoMobilegatewayParam() *StaticRouteInfoMobilegatewayParam {
	return &StaticRouteInfoMobilegatewayParam{}
}

// Initialize init StaticRouteInfoMobilegatewayParam
func (p *StaticRouteInfoMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticRouteInfoMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticRouteInfoMobilegatewayParam) fillValueToSkeleton() {

}

func (p *StaticRouteInfoMobilegatewayParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *StaticRouteInfoMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *StaticRouteInfoMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-info"]
}

func (p *StaticRouteInfoMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteInfoMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteInfoMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteInfoMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// StaticRouteAddMobilegatewayParam is input parameters for the sacloud API
type StaticRouteAddMobilegatewayParam struct {
	Prefix  string
	NextHop string

	input Input
}

// NewStaticRouteAddMobilegatewayParam return new StaticRouteAddMobilegatewayParam
func NewStaticRouteAddMobilegatewayParam() *StaticRouteAddMobilegatewayParam {
	return &StaticRouteAddMobilegatewayParam{}
}

// Initialize init StaticRouteAddMobilegatewayParam
func (p *StaticRouteAddMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticRouteAddMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticRouteAddMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Prefix) {
		p.Prefix = ""
	}
	if utils.IsEmpty(p.NextHop) {
		p.NextHop = ""
	}

}

func (p *StaticRouteAddMobilegatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["static-route-add"].Params["prefix"].ValidateFunc
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["static-route-add"].Params["next-hop"].ValidateFunc
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *StaticRouteAddMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *StaticRouteAddMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-add"]
}

func (p *StaticRouteAddMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteAddMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteAddMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteAddMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticRouteAddMobilegatewayParam) SetPrefix(v string) {
	p.Prefix = v
}

func (p *StaticRouteAddMobilegatewayParam) GetPrefix() string {
	return p.Prefix
}
func (p *StaticRouteAddMobilegatewayParam) SetNextHop(v string) {
	p.NextHop = v
}

func (p *StaticRouteAddMobilegatewayParam) GetNextHop() string {
	return p.NextHop
}

// StaticRouteUpdateMobilegatewayParam is input parameters for the sacloud API
type StaticRouteUpdateMobilegatewayParam struct {
	Index   int
	Prefix  string
	NextHop string

	input Input
}

// NewStaticRouteUpdateMobilegatewayParam return new StaticRouteUpdateMobilegatewayParam
func NewStaticRouteUpdateMobilegatewayParam() *StaticRouteUpdateMobilegatewayParam {
	return &StaticRouteUpdateMobilegatewayParam{}
}

// Initialize init StaticRouteUpdateMobilegatewayParam
func (p *StaticRouteUpdateMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticRouteUpdateMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticRouteUpdateMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Prefix) {
		p.Prefix = ""
	}
	if utils.IsEmpty(p.NextHop) {
		p.NextHop = ""
	}

}

func (p *StaticRouteUpdateMobilegatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["static-route-update"].Params["prefix"].ValidateFunc
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["static-route-update"].Params["next-hop"].ValidateFunc
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *StaticRouteUpdateMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *StaticRouteUpdateMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-update"]
}

func (p *StaticRouteUpdateMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteUpdateMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteUpdateMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteUpdateMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticRouteUpdateMobilegatewayParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticRouteUpdateMobilegatewayParam) GetIndex() int {
	return p.Index
}
func (p *StaticRouteUpdateMobilegatewayParam) SetPrefix(v string) {
	p.Prefix = v
}

func (p *StaticRouteUpdateMobilegatewayParam) GetPrefix() string {
	return p.Prefix
}
func (p *StaticRouteUpdateMobilegatewayParam) SetNextHop(v string) {
	p.NextHop = v
}

func (p *StaticRouteUpdateMobilegatewayParam) GetNextHop() string {
	return p.NextHop
}

// StaticRouteDeleteMobilegatewayParam is input parameters for the sacloud API
type StaticRouteDeleteMobilegatewayParam struct {
	Index int

	input Input
}

// NewStaticRouteDeleteMobilegatewayParam return new StaticRouteDeleteMobilegatewayParam
func NewStaticRouteDeleteMobilegatewayParam() *StaticRouteDeleteMobilegatewayParam {
	return &StaticRouteDeleteMobilegatewayParam{}
}

// Initialize init StaticRouteDeleteMobilegatewayParam
func (p *StaticRouteDeleteMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticRouteDeleteMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticRouteDeleteMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *StaticRouteDeleteMobilegatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *StaticRouteDeleteMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *StaticRouteDeleteMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-delete"]
}

func (p *StaticRouteDeleteMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteDeleteMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteDeleteMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteDeleteMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticRouteDeleteMobilegatewayParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticRouteDeleteMobilegatewayParam) GetIndex() int {
	return p.Index
}

// SimInfoMobilegatewayParam is input parameters for the sacloud API
type SimInfoMobilegatewayParam struct {
	input Input
}

// NewSimInfoMobilegatewayParam return new SimInfoMobilegatewayParam
func NewSimInfoMobilegatewayParam() *SimInfoMobilegatewayParam {
	return &SimInfoMobilegatewayParam{}
}

// Initialize init SimInfoMobilegatewayParam
func (p *SimInfoMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SimInfoMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SimInfoMobilegatewayParam) fillValueToSkeleton() {

}

func (p *SimInfoMobilegatewayParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *SimInfoMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SimInfoMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-info"]
}

func (p *SimInfoMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SimInfoMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SimInfoMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SimInfoMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// SimAddMobilegatewayParam is input parameters for the sacloud API
type SimAddMobilegatewayParam struct {
	Ipaddress string
	SimId     sacloud.ID

	input Input
}

// NewSimAddMobilegatewayParam return new SimAddMobilegatewayParam
func NewSimAddMobilegatewayParam() *SimAddMobilegatewayParam {
	return &SimAddMobilegatewayParam{}
}

// Initialize init SimAddMobilegatewayParam
func (p *SimAddMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SimAddMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SimAddMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.SimId) {
		p.SimId = sacloud.ID(0)
	}

}

func (p *SimAddMobilegatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["sim-add"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--sim-id", p.SimId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["sim-add"].Params["sim-id"].ValidateFunc
		errs := validator("--sim-id", p.SimId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *SimAddMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SimAddMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-add"]
}

func (p *SimAddMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SimAddMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SimAddMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SimAddMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SimAddMobilegatewayParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *SimAddMobilegatewayParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *SimAddMobilegatewayParam) SetSimId(v sacloud.ID) {
	p.SimId = v
}

func (p *SimAddMobilegatewayParam) GetSimId() sacloud.ID {
	return p.SimId
}

// SimUpdateMobilegatewayParam is input parameters for the sacloud API
type SimUpdateMobilegatewayParam struct {
	SimId     sacloud.ID
	Ipaddress string

	input Input
}

// NewSimUpdateMobilegatewayParam return new SimUpdateMobilegatewayParam
func NewSimUpdateMobilegatewayParam() *SimUpdateMobilegatewayParam {
	return &SimUpdateMobilegatewayParam{}
}

// Initialize init SimUpdateMobilegatewayParam
func (p *SimUpdateMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SimUpdateMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SimUpdateMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.SimId) {
		p.SimId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}

}

func (p *SimUpdateMobilegatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--sim-id", p.SimId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["sim-update"].Params["sim-id"].ValidateFunc
		errs := validator("--sim-id", p.SimId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["sim-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *SimUpdateMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SimUpdateMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-update"]
}

func (p *SimUpdateMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SimUpdateMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SimUpdateMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SimUpdateMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SimUpdateMobilegatewayParam) SetSimId(v sacloud.ID) {
	p.SimId = v
}

func (p *SimUpdateMobilegatewayParam) GetSimId() sacloud.ID {
	return p.SimId
}
func (p *SimUpdateMobilegatewayParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *SimUpdateMobilegatewayParam) GetIpaddress() string {
	return p.Ipaddress
}

// SimDeleteMobilegatewayParam is input parameters for the sacloud API
type SimDeleteMobilegatewayParam struct {
	SimId sacloud.ID

	input Input
}

// NewSimDeleteMobilegatewayParam return new SimDeleteMobilegatewayParam
func NewSimDeleteMobilegatewayParam() *SimDeleteMobilegatewayParam {
	return &SimDeleteMobilegatewayParam{}
}

// Initialize init SimDeleteMobilegatewayParam
func (p *SimDeleteMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SimDeleteMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SimDeleteMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.SimId) {
		p.SimId = sacloud.ID(0)
	}

}

func (p *SimDeleteMobilegatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--sim-id", p.SimId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["sim-delete"].Params["sim-id"].ValidateFunc
		errs := validator("--sim-id", p.SimId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *SimDeleteMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SimDeleteMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-delete"]
}

func (p *SimDeleteMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SimDeleteMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SimDeleteMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SimDeleteMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SimDeleteMobilegatewayParam) SetSimId(v sacloud.ID) {
	p.SimId = v
}

func (p *SimDeleteMobilegatewayParam) GetSimId() sacloud.ID {
	return p.SimId
}

// SimRouteInfoMobilegatewayParam is input parameters for the sacloud API
type SimRouteInfoMobilegatewayParam struct {
	input Input
}

// NewSimRouteInfoMobilegatewayParam return new SimRouteInfoMobilegatewayParam
func NewSimRouteInfoMobilegatewayParam() *SimRouteInfoMobilegatewayParam {
	return &SimRouteInfoMobilegatewayParam{}
}

// Initialize init SimRouteInfoMobilegatewayParam
func (p *SimRouteInfoMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SimRouteInfoMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SimRouteInfoMobilegatewayParam) fillValueToSkeleton() {

}

func (p *SimRouteInfoMobilegatewayParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *SimRouteInfoMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SimRouteInfoMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-route-info"]
}

func (p *SimRouteInfoMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SimRouteInfoMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SimRouteInfoMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SimRouteInfoMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// SimRouteAddMobilegatewayParam is input parameters for the sacloud API
type SimRouteAddMobilegatewayParam struct {
	Prefix string
	Sim    sacloud.ID

	input Input
}

// NewSimRouteAddMobilegatewayParam return new SimRouteAddMobilegatewayParam
func NewSimRouteAddMobilegatewayParam() *SimRouteAddMobilegatewayParam {
	return &SimRouteAddMobilegatewayParam{}
}

// Initialize init SimRouteAddMobilegatewayParam
func (p *SimRouteAddMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SimRouteAddMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SimRouteAddMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Prefix) {
		p.Prefix = ""
	}
	if utils.IsEmpty(p.Sim) {
		p.Sim = sacloud.ID(0)
	}

}

func (p *SimRouteAddMobilegatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["sim-route-add"].Params["prefix"].ValidateFunc
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--sim", p.Sim)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["sim-route-add"].Params["sim"].ValidateFunc
		errs := validator("--sim", p.Sim)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *SimRouteAddMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SimRouteAddMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-route-add"]
}

func (p *SimRouteAddMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SimRouteAddMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SimRouteAddMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SimRouteAddMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SimRouteAddMobilegatewayParam) SetPrefix(v string) {
	p.Prefix = v
}

func (p *SimRouteAddMobilegatewayParam) GetPrefix() string {
	return p.Prefix
}
func (p *SimRouteAddMobilegatewayParam) SetSim(v sacloud.ID) {
	p.Sim = v
}

func (p *SimRouteAddMobilegatewayParam) GetSim() sacloud.ID {
	return p.Sim
}

// SimRouteUpdateMobilegatewayParam is input parameters for the sacloud API
type SimRouteUpdateMobilegatewayParam struct {
	Index  int
	Prefix string
	Sim    sacloud.ID

	input Input
}

// NewSimRouteUpdateMobilegatewayParam return new SimRouteUpdateMobilegatewayParam
func NewSimRouteUpdateMobilegatewayParam() *SimRouteUpdateMobilegatewayParam {
	return &SimRouteUpdateMobilegatewayParam{}
}

// Initialize init SimRouteUpdateMobilegatewayParam
func (p *SimRouteUpdateMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SimRouteUpdateMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SimRouteUpdateMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Prefix) {
		p.Prefix = ""
	}
	if utils.IsEmpty(p.Sim) {
		p.Sim = sacloud.ID(0)
	}

}

func (p *SimRouteUpdateMobilegatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["sim-route-update"].Params["prefix"].ValidateFunc
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["MobileGateway"].Commands["sim-route-update"].Params["sim"].ValidateFunc
		errs := validator("--sim", p.Sim)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *SimRouteUpdateMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SimRouteUpdateMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-route-update"]
}

func (p *SimRouteUpdateMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SimRouteUpdateMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SimRouteUpdateMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SimRouteUpdateMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SimRouteUpdateMobilegatewayParam) SetIndex(v int) {
	p.Index = v
}

func (p *SimRouteUpdateMobilegatewayParam) GetIndex() int {
	return p.Index
}
func (p *SimRouteUpdateMobilegatewayParam) SetPrefix(v string) {
	p.Prefix = v
}

func (p *SimRouteUpdateMobilegatewayParam) GetPrefix() string {
	return p.Prefix
}
func (p *SimRouteUpdateMobilegatewayParam) SetSim(v sacloud.ID) {
	p.Sim = v
}

func (p *SimRouteUpdateMobilegatewayParam) GetSim() sacloud.ID {
	return p.Sim
}

// SimRouteDeleteMobilegatewayParam is input parameters for the sacloud API
type SimRouteDeleteMobilegatewayParam struct {
	Index int

	input Input
}

// NewSimRouteDeleteMobilegatewayParam return new SimRouteDeleteMobilegatewayParam
func NewSimRouteDeleteMobilegatewayParam() *SimRouteDeleteMobilegatewayParam {
	return &SimRouteDeleteMobilegatewayParam{}
}

// Initialize init SimRouteDeleteMobilegatewayParam
func (p *SimRouteDeleteMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SimRouteDeleteMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SimRouteDeleteMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *SimRouteDeleteMobilegatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *SimRouteDeleteMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SimRouteDeleteMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-route-delete"]
}

func (p *SimRouteDeleteMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SimRouteDeleteMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SimRouteDeleteMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SimRouteDeleteMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SimRouteDeleteMobilegatewayParam) SetIndex(v int) {
	p.Index = v
}

func (p *SimRouteDeleteMobilegatewayParam) GetIndex() int {
	return p.Index
}

// DnsUpdateMobilegatewayParam is input parameters for the sacloud API
type DnsUpdateMobilegatewayParam struct {
	Dns2 string
	Dns1 string

	input Input
}

// NewDnsUpdateMobilegatewayParam return new DnsUpdateMobilegatewayParam
func NewDnsUpdateMobilegatewayParam() *DnsUpdateMobilegatewayParam {
	return &DnsUpdateMobilegatewayParam{}
}

// Initialize init DnsUpdateMobilegatewayParam
func (p *DnsUpdateMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DnsUpdateMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DnsUpdateMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Dns2) {
		p.Dns2 = ""
	}
	if utils.IsEmpty(p.Dns1) {
		p.Dns1 = ""
	}

}

func (p *DnsUpdateMobilegatewayParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--dns-2", p.Dns2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["dns-update"].Params["dns2"].ValidateFunc
		errs := validator("--dns-2", p.Dns2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--dns-1", p.Dns1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["dns-update"].Params["dns1"].ValidateFunc
		errs := validator("--dns-1", p.Dns1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DnsUpdateMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *DnsUpdateMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["dns-update"]
}

func (p *DnsUpdateMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DnsUpdateMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DnsUpdateMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DnsUpdateMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DnsUpdateMobilegatewayParam) SetDns2(v string) {
	p.Dns2 = v
}

func (p *DnsUpdateMobilegatewayParam) GetDns2() string {
	return p.Dns2
}
func (p *DnsUpdateMobilegatewayParam) SetDns1(v string) {
	p.Dns1 = v
}

func (p *DnsUpdateMobilegatewayParam) GetDns1() string {
	return p.Dns1
}

// LogsMobilegatewayParam is input parameters for the sacloud API
type LogsMobilegatewayParam struct {
	Follow          bool
	RefreshInterval int64

	input Input
}

// NewLogsMobilegatewayParam return new LogsMobilegatewayParam
func NewLogsMobilegatewayParam() *LogsMobilegatewayParam {
	return &LogsMobilegatewayParam{
		RefreshInterval: 3}
}

// Initialize init LogsMobilegatewayParam
func (p *LogsMobilegatewayParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *LogsMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *LogsMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Follow) {
		p.Follow = false
	}
	if utils.IsEmpty(p.RefreshInterval) {
		p.RefreshInterval = 0
	}

}

func (p *LogsMobilegatewayParam) validate() error {
	var errors []error

	{
		validator := define.Resources["MobileGateway"].Commands["logs"].Params["refresh-interval"].ValidateFunc
		errs := validator("--refresh-interval", p.RefreshInterval)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *LogsMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *LogsMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["logs"]
}

func (p *LogsMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *LogsMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *LogsMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *LogsMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *LogsMobilegatewayParam) SetFollow(v bool) {
	p.Follow = v
}

func (p *LogsMobilegatewayParam) GetFollow() bool {
	return p.Follow
}
func (p *LogsMobilegatewayParam) SetRefreshInterval(v int64) {
	p.RefreshInterval = v
}

func (p *LogsMobilegatewayParam) GetRefreshInterval() int64 {
	return p.RefreshInterval
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListNfsParam is input parameters for the sacloud API
type ListNfsParam struct {
	Name []string
	Id   []sacloud.ID
	From int
	Max  int
	Sort []string
	Tags []string

	input Input
}

// NewListNfsParam return new ListNfsParam
func NewListNfsParam() *ListNfsParam {
	return &ListNfsParam{}
}

// Initialize init ListNfsParam
func (p *ListNfsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListNfsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}

}

func (p *ListNfsParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ListNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListNfsParam) SetName(v []string) {
	p.Name = v
}

func (p *ListNfsParam) GetName() []string {
	return p.Name
}
func (p *ListNfsParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListNfsParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListNfsParam) SetFrom(v int) {
	p.From = v
}

func (p *ListNfsParam) GetFrom() int {
	return p.From
}
func (p *ListNfsParam) SetMax(v int) {
	p.Max = v
}

func (p *ListNfsParam) GetMax() int {
	return p.Max
}
func (p *ListNfsParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListNfsParam) GetSort() []string {
	return p.Sort
}
func (p *ListNfsParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListNfsParam) GetTags() []string {
	return p.Tags
}

// CreateNfsParam is input parameters for the sacloud API
type CreateNfsParam struct {
	Ipaddress    string
	NwMaskLen    int
	DefaultRoute string
	SwitchId     sacloud.ID
	Plan         string
	Size         int
	Name         string
	Description  string
	Tags         []string
	IconId       sacloud.ID

	input Input
}

// NewCreateNfsParam return new CreateNfsParam
func NewCreateNfsParam() *CreateNfsParam {
	return &CreateNfsParam{
		Plan: "hdd", Size: 100}
}

// Initialize init CreateNfsParam
func (p *CreateNfsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateNfsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.NwMaskLen) {
		p.NwMaskLen = 0
	}
	if utils.IsEmpty(p.DefaultRoute) {
		p.DefaultRoute = ""
	}
	if utils.IsEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Plan) {
		p.Plan = ""
	}
	if utils.IsEmpty(p.Size) {
		p.Size = 0
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}

}

func (p *CreateNfsParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--nw-mask-len", p.NwMaskLen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["nw-mask-len"].ValidateFunc
		errs := validator("--nw-mask-len", p.NwMaskLen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["create"].Params["default-route"].ValidateFunc
		errs := validator("--default-route", p.DefaultRoute)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["size"].ValidateFunc
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *CreateNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateNfsParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *CreateNfsParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *CreateNfsParam) SetNwMaskLen(v int) {
	p.NwMaskLen = v
}

func (p *CreateNfsParam) GetNwMaskLen() int {
	return p.NwMaskLen
}
func (p *CreateNfsParam) SetDefaultRoute(v string) {
	p.DefaultRoute = v
}

func (p *CreateNfsParam) GetDefaultRoute() string {
	return p.DefaultRoute
}
func (p *CreateNfsParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *CreateNfsParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *CreateNfsParam) SetPlan(v string) {
	p.Plan = v
}

func (p *CreateNfsParam) GetPlan() string {
	return p.Plan
}
func (p *CreateNfsParam) SetSize(v int) {
	p.Size = v
}

func (p *CreateNfsParam) GetSize() int {
	return p.Size
}
func (p *CreateNfsParam) SetName(v string) {
	p.Name = v
}

func (p *CreateNfsParam) GetName() string {
	return p.Name
}
func (p *CreateNfsParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateNfsParam) GetDescription() string {
	return p.Description
}
func (p *CreateNfsParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateNfsParam) GetTags() []string {
	return p.Tags
}
func (p *CreateNfsParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateNfsParam) GetIconId() sacloud.ID {
	return p.IconId
}

// ReadNfsParam is input parameters for the sacloud API
type ReadNfsParam struct {
	input Input
}

// NewReadNfsParam return new ReadNfsParam
func NewReadNfsParam() *ReadNfsParam {
	return &ReadNfsParam{}
}

// Initialize init ReadNfsParam
func (p *ReadNfsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadNfsParam) fillValueToSkeleton() {

}

func (p *ReadNfsParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ReadNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdateNfsParam is input parameters for the sacloud API
type UpdateNfsParam struct {
	IconId      sacloud.ID
	Name        string
	Description string
	Tags        []string

	input Input
}

// NewUpdateNfsParam return new UpdateNfsParam
func NewUpdateNfsParam() *UpdateNfsParam {
	return &UpdateNfsParam{}
}

// Initialize init UpdateNfsParam
func (p *UpdateNfsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateNfsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}

}

func (p *UpdateNfsParam) validate() error {
	var errors []error

	{
		validator := define.Resources["NFS"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *UpdateNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateNfsParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateNfsParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateNfsParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateNfsParam) GetName() string {
	return p.Name
}
func (p *UpdateNfsParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateNfsParam) GetDescription() string {
	return p.Description
}
func (p *UpdateNfsParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateNfsParam) GetTags() []string {
	return p.Tags
}

// DeleteNfsParam is input parameters for the sacloud API
type DeleteNfsParam struct {
	Force bool

	input Input
}

// NewDeleteNfsParam return new DeleteNfsParam
func NewDeleteNfsParam() *DeleteNfsParam {
	return &DeleteNfsParam{}
}

// Initialize init DeleteNfsParam
func (p *DeleteNfsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteNfsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Force) {
		p.Force = false
	}

}

func (p *DeleteNfsParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *DeleteNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteNfsParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteNfsParam) GetForce() bool {
	return p.Force
}

// BootNfsParam is input parameters for the sacloud API
type BootNfsParam struct {
	input Input
}

// NewBootNfsParam return new BootNfsParam
func NewBootNfsParam() *BootNfsParam {
	return &BootNfsParam{}
}

// Initialize init BootNfsParam
func (p *BootNfsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BootNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BootNfsParam) fillValueToSkeleton() {

}

func (p *BootNfsParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *BootNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *BootNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["boot"]
}

func (p *BootNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BootNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BootNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BootNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ShutdownNfsParam is input parameters for the sacloud API
type ShutdownNfsParam struct {
	input Input
}

// NewShutdownNfsParam return new ShutdownNfsParam
func NewShutdownNfsParam() *ShutdownNfsParam {
	return &ShutdownNfsParam{}
}

// Initialize init ShutdownNfsParam
func (p *ShutdownNfsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShutdownNfsParam) fillValueToSkeleton() {

}

func (p *ShutdownNfsParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ShutdownNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ShutdownNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown"]
}

func (p *ShutdownNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ShutdownForceNfsParam is input parameters for the sacloud API
type ShutdownForceNfsParam struct {
	input Input
}

// NewShutdownForceNfsParam return new ShutdownForceNfsParam
func NewShutdownForceNfsParam() *ShutdownForceNfsParam {
	return &ShutdownForceNfsParam{}
}

// Initialize init ShutdownForceNfsParam
func (p *ShutdownForceNfsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownForceNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShutdownForceNfsParam) fillValueToSkeleton() {

}

func (p *ShutdownForceNfsParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ShutdownForceNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ShutdownForceNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown-force"]
}

func (p *ShutdownForceNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownForceNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownForceNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownForceNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ResetNfsParam is input parameters for the sacloud API
type ResetNfsParam struct {
	input Input
}

// NewResetNfsParam return new ResetNfsParam
func NewResetNfsParam() *ResetNfsParam {
	return &ResetNfsParam{}
}

// Initialize init ResetNfsParam
func (p *ResetNfsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResetNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResetNfsParam) fillValueToSkeleton() {

}

func (p *ResetNfsParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ResetNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ResetNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["reset"]
}

func (p *ResetNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResetNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResetNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResetNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// WaitForBootNfsParam is input parameters for the sacloud API
type WaitForBootNfsParam struct {
	input Input
}

// NewWaitForBootNfsParam return new WaitForBootNfsParam
func NewWaitForBootNfsParam() *WaitForBootNfsParam {
	return &WaitForBootNfsParam{}
}

// Initialize init WaitForBootNfsParam
func (p *WaitForBootNfsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForBootNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForBootNfsParam) fillValueToSkeleton() {

}

func (p *WaitForBootNfsParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *WaitForBootNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *WaitForBootNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-boot"]
}

func (p *WaitForBootNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForBootNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForBootNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForBootNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// WaitForDownNfsParam is input parameters for the sacloud API
type WaitForDownNfsParam struct {
	input Input
}

// NewWaitForDownNfsParam return new WaitForDownNfsParam
func NewWaitForDownNfsParam() *WaitForDownNfsParam {
	return &WaitForDownNfsParam{}
}

// Initialize init WaitForDownNfsParam
func (p *WaitForDownNfsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForDownNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForDownNfsParam) fillValueToSkeleton() {

}

func (p *WaitForDownNfsParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *WaitForDownNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *WaitForDownNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-down"]
}

func (p *WaitForDownNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForDownNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForDownNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForDownNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// MonitorNicNfsParam is input parameters for the sacloud API
type MonitorNicNfsParam struct {
	Start     string
	End       string
	KeyFormat string

	input Input
}

// NewMonitorNicNfsParam return new MonitorNicNfsParam
func NewMonitorNicNfsParam() *MonitorNicNfsParam {
	return &MonitorNicNfsParam{
		KeyFormat: "sakuracloud.disk.{{.ID}}.nic"}
}

// Initialize init MonitorNicNfsParam
func (p *MonitorNicNfsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorNicNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorNicNfsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}

}

func (p *MonitorNicNfsParam) validate() error {
	var errors []error

	{
		validator := define.Resources["NFS"].Commands["monitor-nic"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["monitor-nic"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorNicNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *MonitorNicNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor-nic"]
}

func (p *MonitorNicNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorNicNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorNicNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorNicNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorNicNfsParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorNicNfsParam) GetStart() string {
	return p.Start
}
func (p *MonitorNicNfsParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorNicNfsParam) GetEnd() string {
	return p.End
}
func (p *MonitorNicNfsParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorNicNfsParam) GetKeyFormat() string {
	return p.KeyFormat
}

// MonitorFreeDiskSizeNfsParam is input parameters for the sacloud API
type MonitorFreeDiskSizeNfsParam struct {
	Start     string
	End       string
	KeyFormat string

	input Input
}

// NewMonitorFreeDiskSizeNfsParam return new MonitorFreeDiskSizeNfsParam
func NewMonitorFreeDiskSizeNfsParam() *MonitorFreeDiskSizeNfsParam {
	return &MonitorFreeDiskSizeNfsParam{
		KeyFormat: "sakuracloud.disk.{{.ID}}.free-disk-size"}
}

// Initialize init MonitorFreeDiskSizeNfsParam
func (p *MonitorFreeDiskSizeNfsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorFreeDiskSizeNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorFreeDiskSizeNfsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}

}

func (p *MonitorFreeDiskSizeNfsParam) validate() error {
	var errors []error

	{
		validator := define.Resources["NFS"].Commands["monitor-free-disk-size"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["monitor-free-disk-size"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorFreeDiskSizeNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *MonitorFreeDiskSizeNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor-free-disk-size"]
}

func (p *MonitorFreeDiskSizeNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorFreeDiskSizeNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorFreeDiskSizeNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorFreeDiskSizeNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorFreeDiskSizeNfsParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorFreeDiskSizeNfsParam) GetStart() string {
	return p.Start
}
func (p *MonitorFreeDiskSizeNfsParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorFreeDiskSizeNfsParam) GetEnd() string {
	return p.End
}
func (p *MonitorFreeDiskSizeNfsParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorFreeDiskSizeNfsParam) GetKeyFormat() string {
	return p.KeyFormat
}

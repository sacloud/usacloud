// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListGslbParam is input parameters for the sacloud API
type ListGslbParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Tags              []string     `json:"tags"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`

	input Input
}

// NewListGslbParam return new ListGslbParam
func NewListGslbParam(in Input) (*ListGslbParam, error) {
	v := &ListGslbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListGslbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListGslbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListGslbParam) validate() error {
	var errors []error
	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListGslbParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ListGslbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListGslbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListGslbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListGslbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListGslbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListGslbParam) SetName(v []string) {
	p.Name = v
}

func (p *ListGslbParam) GetName() []string {
	return p.Name
}
func (p *ListGslbParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListGslbParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListGslbParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListGslbParam) GetTags() []string {
	return p.Tags
}
func (p *ListGslbParam) SetFrom(v int) {
	p.From = v
}

func (p *ListGslbParam) GetFrom() int {
	return p.From
}
func (p *ListGslbParam) SetMax(v int) {
	p.Max = v
}

func (p *ListGslbParam) GetMax() int {
	return p.Max
}
func (p *ListGslbParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListGslbParam) GetSort() []string {
	return p.Sort
}
func (p *ListGslbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListGslbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListGslbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListGslbParam) GetParameters() string {
	return p.Parameters
}
func (p *ListGslbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListGslbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListGslbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListGslbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListGslbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListGslbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListGslbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListGslbParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListGslbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListGslbParam) GetColumn() []string {
	return p.Column
}
func (p *ListGslbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListGslbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListGslbParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListGslbParam) GetFormat() string {
	return p.Format
}
func (p *ListGslbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListGslbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListGslbParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListGslbParam) GetQuery() string {
	return p.Query
}
func (p *ListGslbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListGslbParam) GetQueryFile() string {
	return p.QueryFile
}

// ServerInfoGslbParam is input parameters for the sacloud API
type ServerInfoGslbParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewServerInfoGslbParam return new ServerInfoGslbParam
func NewServerInfoGslbParam(in Input) (*ServerInfoGslbParam, error) {
	v := &ServerInfoGslbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerInfoGslbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerInfoGslbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ServerInfoGslbParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerInfoGslbParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ServerInfoGslbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-info"]
}

func (p *ServerInfoGslbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerInfoGslbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerInfoGslbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerInfoGslbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerInfoGslbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerInfoGslbParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerInfoGslbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerInfoGslbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerInfoGslbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerInfoGslbParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerInfoGslbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerInfoGslbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerInfoGslbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerInfoGslbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerInfoGslbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerInfoGslbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerInfoGslbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerInfoGslbParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerInfoGslbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerInfoGslbParam) GetColumn() []string {
	return p.Column
}
func (p *ServerInfoGslbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerInfoGslbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerInfoGslbParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerInfoGslbParam) GetFormat() string {
	return p.Format
}
func (p *ServerInfoGslbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerInfoGslbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerInfoGslbParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerInfoGslbParam) GetQuery() string {
	return p.Query
}
func (p *ServerInfoGslbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerInfoGslbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerInfoGslbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerInfoGslbParam) GetId() sacloud.ID {
	return p.Id
}

// CreateGslbParam is input parameters for the sacloud API
type CreateGslbParam struct {
	Protocol          string     `json:"protocol"`
	HostHeader        string     `json:"host-header"`
	Path              string     `json:"path"`
	ResponseCode      int        `json:"response-code"`
	Port              int        `json:"port"`
	DelayLoop         int        `json:"delay-loop"`
	Weighted          bool       `json:"weighted"`
	SorryServer       string     `json:"sorry-server"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`

	input Input
}

// NewCreateGslbParam return new CreateGslbParam
func NewCreateGslbParam(in Input) (*CreateGslbParam, error) {
	v := &CreateGslbParam{
		Protocol: "ping", Path: "/", ResponseCode: 200, DelayLoop: 10, Weighted: true, input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateGslbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateGslbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.HostHeader) {
		p.HostHeader = ""
	}
	if utils.IsEmpty(p.Path) {
		p.Path = ""
	}
	if utils.IsEmpty(p.ResponseCode) {
		p.ResponseCode = 0
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if utils.IsEmpty(p.Weighted) {
		p.Weighted = false
	}
	if utils.IsEmpty(p.SorryServer) {
		p.SorryServer = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *CreateGslbParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateGslbParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *CreateGslbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateGslbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateGslbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateGslbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateGslbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateGslbParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *CreateGslbParam) GetProtocol() string {
	return p.Protocol
}
func (p *CreateGslbParam) SetHostHeader(v string) {
	p.HostHeader = v
}

func (p *CreateGslbParam) GetHostHeader() string {
	return p.HostHeader
}
func (p *CreateGslbParam) SetPath(v string) {
	p.Path = v
}

func (p *CreateGslbParam) GetPath() string {
	return p.Path
}
func (p *CreateGslbParam) SetResponseCode(v int) {
	p.ResponseCode = v
}

func (p *CreateGslbParam) GetResponseCode() int {
	return p.ResponseCode
}
func (p *CreateGslbParam) SetPort(v int) {
	p.Port = v
}

func (p *CreateGslbParam) GetPort() int {
	return p.Port
}
func (p *CreateGslbParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *CreateGslbParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *CreateGslbParam) SetWeighted(v bool) {
	p.Weighted = v
}

func (p *CreateGslbParam) GetWeighted() bool {
	return p.Weighted
}
func (p *CreateGslbParam) SetSorryServer(v string) {
	p.SorryServer = v
}

func (p *CreateGslbParam) GetSorryServer() string {
	return p.SorryServer
}
func (p *CreateGslbParam) SetName(v string) {
	p.Name = v
}

func (p *CreateGslbParam) GetName() string {
	return p.Name
}
func (p *CreateGslbParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateGslbParam) GetDescription() string {
	return p.Description
}
func (p *CreateGslbParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateGslbParam) GetTags() []string {
	return p.Tags
}
func (p *CreateGslbParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateGslbParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateGslbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateGslbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateGslbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateGslbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateGslbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateGslbParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateGslbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateGslbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateGslbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateGslbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateGslbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateGslbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateGslbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateGslbParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateGslbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateGslbParam) GetColumn() []string {
	return p.Column
}
func (p *CreateGslbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateGslbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateGslbParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateGslbParam) GetFormat() string {
	return p.Format
}
func (p *CreateGslbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateGslbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateGslbParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateGslbParam) GetQuery() string {
	return p.Query
}
func (p *CreateGslbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateGslbParam) GetQueryFile() string {
	return p.QueryFile
}

// ServerAddGslbParam is input parameters for the sacloud API
type ServerAddGslbParam struct {
	Ipaddress         string     `json:"ipaddress"`
	Disabled          bool       `json:"disabled"`
	Weight            int        `json:"weight"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewServerAddGslbParam return new ServerAddGslbParam
func NewServerAddGslbParam(in Input) (*ServerAddGslbParam, error) {
	v := &ServerAddGslbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerAddGslbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerAddGslbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.Weight) {
		p.Weight = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ServerAddGslbParam) validate() error {
	var errors []error
	{
		validator := define.Resources["GSLB"].Commands["server-add"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["server-add"].Params["weight"].ValidateFunc
		errs := validator("--weight", p.Weight)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerAddGslbParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ServerAddGslbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-add"]
}

func (p *ServerAddGslbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerAddGslbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerAddGslbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerAddGslbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerAddGslbParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerAddGslbParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerAddGslbParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *ServerAddGslbParam) GetDisabled() bool {
	return p.Disabled
}
func (p *ServerAddGslbParam) SetWeight(v int) {
	p.Weight = v
}

func (p *ServerAddGslbParam) GetWeight() int {
	return p.Weight
}
func (p *ServerAddGslbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerAddGslbParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerAddGslbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerAddGslbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerAddGslbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerAddGslbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerAddGslbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerAddGslbParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerAddGslbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerAddGslbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerAddGslbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerAddGslbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerAddGslbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerAddGslbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerAddGslbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerAddGslbParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerAddGslbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerAddGslbParam) GetColumn() []string {
	return p.Column
}
func (p *ServerAddGslbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerAddGslbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerAddGslbParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerAddGslbParam) GetFormat() string {
	return p.Format
}
func (p *ServerAddGslbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerAddGslbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerAddGslbParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerAddGslbParam) GetQuery() string {
	return p.Query
}
func (p *ServerAddGslbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerAddGslbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerAddGslbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerAddGslbParam) GetId() sacloud.ID {
	return p.Id
}

// ReadGslbParam is input parameters for the sacloud API
type ReadGslbParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewReadGslbParam return new ReadGslbParam
func NewReadGslbParam(in Input) (*ReadGslbParam, error) {
	v := &ReadGslbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadGslbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadGslbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReadGslbParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ReadGslbParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ReadGslbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadGslbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadGslbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadGslbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadGslbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReadGslbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadGslbParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadGslbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadGslbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadGslbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadGslbParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadGslbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadGslbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadGslbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadGslbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadGslbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadGslbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadGslbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadGslbParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadGslbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadGslbParam) GetColumn() []string {
	return p.Column
}
func (p *ReadGslbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadGslbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadGslbParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadGslbParam) GetFormat() string {
	return p.Format
}
func (p *ReadGslbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadGslbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadGslbParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadGslbParam) GetQuery() string {
	return p.Query
}
func (p *ReadGslbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadGslbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadGslbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadGslbParam) GetId() sacloud.ID {
	return p.Id
}

// ServerUpdateGslbParam is input parameters for the sacloud API
type ServerUpdateGslbParam struct {
	Index             int        `json:"index"`
	Ipaddress         string     `json:"ipaddress"`
	Disabled          bool       `json:"disabled"`
	Weight            int        `json:"weight"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewServerUpdateGslbParam return new ServerUpdateGslbParam
func NewServerUpdateGslbParam(in Input) (*ServerUpdateGslbParam, error) {
	v := &ServerUpdateGslbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerUpdateGslbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerUpdateGslbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.Weight) {
		p.Weight = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ServerUpdateGslbParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["server-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["server-update"].Params["weight"].ValidateFunc
		errs := validator("--weight", p.Weight)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerUpdateGslbParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ServerUpdateGslbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-update"]
}

func (p *ServerUpdateGslbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerUpdateGslbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerUpdateGslbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerUpdateGslbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerUpdateGslbParam) SetIndex(v int) {
	p.Index = v
}

func (p *ServerUpdateGslbParam) GetIndex() int {
	return p.Index
}
func (p *ServerUpdateGslbParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerUpdateGslbParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerUpdateGslbParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *ServerUpdateGslbParam) GetDisabled() bool {
	return p.Disabled
}
func (p *ServerUpdateGslbParam) SetWeight(v int) {
	p.Weight = v
}

func (p *ServerUpdateGslbParam) GetWeight() int {
	return p.Weight
}
func (p *ServerUpdateGslbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerUpdateGslbParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerUpdateGslbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerUpdateGslbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerUpdateGslbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerUpdateGslbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerUpdateGslbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerUpdateGslbParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerUpdateGslbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerUpdateGslbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerUpdateGslbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerUpdateGslbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerUpdateGslbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerUpdateGslbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerUpdateGslbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerUpdateGslbParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerUpdateGslbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerUpdateGslbParam) GetColumn() []string {
	return p.Column
}
func (p *ServerUpdateGslbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerUpdateGslbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerUpdateGslbParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerUpdateGslbParam) GetFormat() string {
	return p.Format
}
func (p *ServerUpdateGslbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerUpdateGslbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerUpdateGslbParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerUpdateGslbParam) GetQuery() string {
	return p.Query
}
func (p *ServerUpdateGslbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerUpdateGslbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerUpdateGslbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerUpdateGslbParam) GetId() sacloud.ID {
	return p.Id
}

// ServerDeleteGslbParam is input parameters for the sacloud API
type ServerDeleteGslbParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewServerDeleteGslbParam return new ServerDeleteGslbParam
func NewServerDeleteGslbParam(in Input) (*ServerDeleteGslbParam, error) {
	v := &ServerDeleteGslbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerDeleteGslbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerDeleteGslbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ServerDeleteGslbParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerDeleteGslbParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ServerDeleteGslbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-delete"]
}

func (p *ServerDeleteGslbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerDeleteGslbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerDeleteGslbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerDeleteGslbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerDeleteGslbParam) SetIndex(v int) {
	p.Index = v
}

func (p *ServerDeleteGslbParam) GetIndex() int {
	return p.Index
}
func (p *ServerDeleteGslbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerDeleteGslbParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerDeleteGslbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerDeleteGslbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerDeleteGslbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerDeleteGslbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerDeleteGslbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerDeleteGslbParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerDeleteGslbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerDeleteGslbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerDeleteGslbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerDeleteGslbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerDeleteGslbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerDeleteGslbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerDeleteGslbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerDeleteGslbParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerDeleteGslbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerDeleteGslbParam) GetColumn() []string {
	return p.Column
}
func (p *ServerDeleteGslbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerDeleteGslbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerDeleteGslbParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerDeleteGslbParam) GetFormat() string {
	return p.Format
}
func (p *ServerDeleteGslbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerDeleteGslbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerDeleteGslbParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerDeleteGslbParam) GetQuery() string {
	return p.Query
}
func (p *ServerDeleteGslbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerDeleteGslbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerDeleteGslbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerDeleteGslbParam) GetId() sacloud.ID {
	return p.Id
}

// UpdateGslbParam is input parameters for the sacloud API
type UpdateGslbParam struct {
	Protocol          string     `json:"protocol"`
	HostHeader        string     `json:"host-header"`
	Path              string     `json:"path"`
	ResponseCode      int        `json:"response-code"`
	Port              int        `json:"port"`
	DelayLoop         int        `json:"delay-loop"`
	Weighted          bool       `json:"weighted"`
	SorryServer       string     `json:"sorry-server"`
	Selector          []string   `json:"selector"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewUpdateGslbParam return new UpdateGslbParam
func NewUpdateGslbParam(in Input) (*UpdateGslbParam, error) {
	v := &UpdateGslbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateGslbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateGslbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.HostHeader) {
		p.HostHeader = ""
	}
	if utils.IsEmpty(p.Path) {
		p.Path = ""
	}
	if utils.IsEmpty(p.ResponseCode) {
		p.ResponseCode = 0
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if utils.IsEmpty(p.Weighted) {
		p.Weighted = false
	}
	if utils.IsEmpty(p.SorryServer) {
		p.SorryServer = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UpdateGslbParam) validate() error {
	var errors []error
	{
		validator := define.Resources["GSLB"].Commands["update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["update"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateGslbParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *UpdateGslbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateGslbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateGslbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateGslbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateGslbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateGslbParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *UpdateGslbParam) GetProtocol() string {
	return p.Protocol
}
func (p *UpdateGslbParam) SetHostHeader(v string) {
	p.HostHeader = v
}

func (p *UpdateGslbParam) GetHostHeader() string {
	return p.HostHeader
}
func (p *UpdateGslbParam) SetPath(v string) {
	p.Path = v
}

func (p *UpdateGslbParam) GetPath() string {
	return p.Path
}
func (p *UpdateGslbParam) SetResponseCode(v int) {
	p.ResponseCode = v
}

func (p *UpdateGslbParam) GetResponseCode() int {
	return p.ResponseCode
}
func (p *UpdateGslbParam) SetPort(v int) {
	p.Port = v
}

func (p *UpdateGslbParam) GetPort() int {
	return p.Port
}
func (p *UpdateGslbParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *UpdateGslbParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *UpdateGslbParam) SetWeighted(v bool) {
	p.Weighted = v
}

func (p *UpdateGslbParam) GetWeighted() bool {
	return p.Weighted
}
func (p *UpdateGslbParam) SetSorryServer(v string) {
	p.SorryServer = v
}

func (p *UpdateGslbParam) GetSorryServer() string {
	return p.SorryServer
}
func (p *UpdateGslbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateGslbParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateGslbParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateGslbParam) GetName() string {
	return p.Name
}
func (p *UpdateGslbParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateGslbParam) GetDescription() string {
	return p.Description
}
func (p *UpdateGslbParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateGslbParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateGslbParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateGslbParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateGslbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateGslbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateGslbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateGslbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateGslbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateGslbParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateGslbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateGslbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateGslbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateGslbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateGslbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateGslbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateGslbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateGslbParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateGslbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateGslbParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateGslbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateGslbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateGslbParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateGslbParam) GetFormat() string {
	return p.Format
}
func (p *UpdateGslbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateGslbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateGslbParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateGslbParam) GetQuery() string {
	return p.Query
}
func (p *UpdateGslbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateGslbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateGslbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateGslbParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteGslbParam is input parameters for the sacloud API
type DeleteGslbParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewDeleteGslbParam return new DeleteGslbParam
func NewDeleteGslbParam(in Input) (*DeleteGslbParam, error) {
	v := &DeleteGslbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteGslbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteGslbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DeleteGslbParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DeleteGslbParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *DeleteGslbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteGslbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteGslbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteGslbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteGslbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteGslbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteGslbParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteGslbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteGslbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteGslbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteGslbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteGslbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteGslbParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteGslbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteGslbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteGslbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteGslbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteGslbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteGslbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteGslbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteGslbParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteGslbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteGslbParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteGslbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteGslbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteGslbParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteGslbParam) GetFormat() string {
	return p.Format
}
func (p *DeleteGslbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteGslbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteGslbParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteGslbParam) GetQuery() string {
	return p.Query
}
func (p *DeleteGslbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteGslbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteGslbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteGslbParam) GetId() sacloud.ID {
	return p.Id
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListIsoimageParam is input parameters for the sacloud API
type ListIsoimageParam struct {
	Id    []sacloud.ID
	From  int
	Scope string
	Tags  []string
	Max   int
	Sort  []string
	Name  []string

	input Input
}

// NewListIsoimageParam return new ListIsoimageParam
func NewListIsoimageParam() *ListIsoimageParam {
	return &ListIsoimageParam{}
}

// Initialize init ListIsoimageParam
func (p *ListIsoimageParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListIsoimageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListIsoimageParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Scope) {
		p.Scope = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}

}

func (p *ListIsoimageParam) validate() error {
	var errors []error

	{
		validator := define.Resources["ISOImage"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ISOImage"].Commands["list"].Params["scope"].ValidateFunc
		errs := validator("--scope", p.Scope)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ISOImage"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListIsoimageParam) ResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *ListIsoimageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListIsoimageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListIsoimageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListIsoimageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListIsoimageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListIsoimageParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListIsoimageParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListIsoimageParam) SetFrom(v int) {
	p.From = v
}

func (p *ListIsoimageParam) GetFrom() int {
	return p.From
}
func (p *ListIsoimageParam) SetScope(v string) {
	p.Scope = v
}

func (p *ListIsoimageParam) GetScope() string {
	return p.Scope
}
func (p *ListIsoimageParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListIsoimageParam) GetTags() []string {
	return p.Tags
}
func (p *ListIsoimageParam) SetMax(v int) {
	p.Max = v
}

func (p *ListIsoimageParam) GetMax() int {
	return p.Max
}
func (p *ListIsoimageParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListIsoimageParam) GetSort() []string {
	return p.Sort
}
func (p *ListIsoimageParam) SetName(v []string) {
	p.Name = v
}

func (p *ListIsoimageParam) GetName() []string {
	return p.Name
}

// CreateIsoimageParam is input parameters for the sacloud API
type CreateIsoimageParam struct {
	Name        string
	Description string
	Tags        []string
	IconId      sacloud.ID
	Size        int
	IsoFile     string

	input Input
}

// NewCreateIsoimageParam return new CreateIsoimageParam
func NewCreateIsoimageParam() *CreateIsoimageParam {
	return &CreateIsoimageParam{
		Size: 5}
}

// Initialize init CreateIsoimageParam
func (p *CreateIsoimageParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateIsoimageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateIsoimageParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Size) {
		p.Size = 0
	}
	if utils.IsEmpty(p.IsoFile) {
		p.IsoFile = ""
	}

}

func (p *CreateIsoimageParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["size"].ValidateFunc
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["iso-file"].ValidateFunc
		errs := validator("--iso-file", p.IsoFile)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateIsoimageParam) ResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *CreateIsoimageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateIsoimageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateIsoimageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateIsoimageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateIsoimageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateIsoimageParam) SetName(v string) {
	p.Name = v
}

func (p *CreateIsoimageParam) GetName() string {
	return p.Name
}
func (p *CreateIsoimageParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateIsoimageParam) GetDescription() string {
	return p.Description
}
func (p *CreateIsoimageParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateIsoimageParam) GetTags() []string {
	return p.Tags
}
func (p *CreateIsoimageParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateIsoimageParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateIsoimageParam) SetSize(v int) {
	p.Size = v
}

func (p *CreateIsoimageParam) GetSize() int {
	return p.Size
}
func (p *CreateIsoimageParam) SetIsoFile(v string) {
	p.IsoFile = v
}

func (p *CreateIsoimageParam) GetIsoFile() string {
	return p.IsoFile
}

// ReadIsoimageParam is input parameters for the sacloud API
type ReadIsoimageParam struct {
	input Input
}

// NewReadIsoimageParam return new ReadIsoimageParam
func NewReadIsoimageParam() *ReadIsoimageParam {
	return &ReadIsoimageParam{}
}

// Initialize init ReadIsoimageParam
func (p *ReadIsoimageParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadIsoimageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadIsoimageParam) fillValueToSkeleton() {

}

func (p *ReadIsoimageParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadIsoimageParam) ResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *ReadIsoimageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadIsoimageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadIsoimageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadIsoimageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadIsoimageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdateIsoimageParam is input parameters for the sacloud API
type UpdateIsoimageParam struct {
	Name        string
	Description string
	Tags        []string
	IconId      sacloud.ID

	input Input
}

// NewUpdateIsoimageParam return new UpdateIsoimageParam
func NewUpdateIsoimageParam() *UpdateIsoimageParam {
	return &UpdateIsoimageParam{}
}

// Initialize init UpdateIsoimageParam
func (p *UpdateIsoimageParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateIsoimageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateIsoimageParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}

}

func (p *UpdateIsoimageParam) validate() error {
	var errors []error

	{
		validator := define.Resources["ISOImage"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ISOImage"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ISOImage"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ISOImage"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateIsoimageParam) ResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *UpdateIsoimageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateIsoimageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateIsoimageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateIsoimageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateIsoimageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateIsoimageParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateIsoimageParam) GetName() string {
	return p.Name
}
func (p *UpdateIsoimageParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateIsoimageParam) GetDescription() string {
	return p.Description
}
func (p *UpdateIsoimageParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateIsoimageParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateIsoimageParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateIsoimageParam) GetIconId() sacloud.ID {
	return p.IconId
}

// DeleteIsoimageParam is input parameters for the sacloud API
type DeleteIsoimageParam struct {
	input Input
}

// NewDeleteIsoimageParam return new DeleteIsoimageParam
func NewDeleteIsoimageParam() *DeleteIsoimageParam {
	return &DeleteIsoimageParam{}
}

// Initialize init DeleteIsoimageParam
func (p *DeleteIsoimageParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteIsoimageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteIsoimageParam) fillValueToSkeleton() {

}

func (p *DeleteIsoimageParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteIsoimageParam) ResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *DeleteIsoimageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteIsoimageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteIsoimageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteIsoimageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteIsoimageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UploadIsoimageParam is input parameters for the sacloud API
type UploadIsoimageParam struct {
	IsoFile string

	input Input
}

// NewUploadIsoimageParam return new UploadIsoimageParam
func NewUploadIsoimageParam() *UploadIsoimageParam {
	return &UploadIsoimageParam{}
}

// Initialize init UploadIsoimageParam
func (p *UploadIsoimageParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UploadIsoimageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UploadIsoimageParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.IsoFile) {
		p.IsoFile = ""
	}

}

func (p *UploadIsoimageParam) validate() error {
	var errors []error

	{
		validator := define.Resources["ISOImage"].Commands["upload"].Params["iso-file"].ValidateFunc
		errs := validator("--iso-file", p.IsoFile)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UploadIsoimageParam) ResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *UploadIsoimageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["upload"]
}

func (p *UploadIsoimageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UploadIsoimageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UploadIsoimageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UploadIsoimageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UploadIsoimageParam) SetIsoFile(v string) {
	p.IsoFile = v
}

func (p *UploadIsoimageParam) GetIsoFile() string {
	return p.IsoFile
}

// DownloadIsoimageParam is input parameters for the sacloud API
type DownloadIsoimageParam struct {
	FileDestination string

	input Input
}

// NewDownloadIsoimageParam return new DownloadIsoimageParam
func NewDownloadIsoimageParam() *DownloadIsoimageParam {
	return &DownloadIsoimageParam{}
}

// Initialize init DownloadIsoimageParam
func (p *DownloadIsoimageParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DownloadIsoimageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DownloadIsoimageParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.FileDestination) {
		p.FileDestination = ""
	}

}

func (p *DownloadIsoimageParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DownloadIsoimageParam) ResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *DownloadIsoimageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["download"]
}

func (p *DownloadIsoimageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DownloadIsoimageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DownloadIsoimageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DownloadIsoimageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DownloadIsoimageParam) SetFileDestination(v string) {
	p.FileDestination = v
}

func (p *DownloadIsoimageParam) GetFileDestination() string {
	return p.FileDestination
}

// FtpOpenIsoimageParam is input parameters for the sacloud API
type FtpOpenIsoimageParam struct {
	input Input
}

// NewFtpOpenIsoimageParam return new FtpOpenIsoimageParam
func NewFtpOpenIsoimageParam() *FtpOpenIsoimageParam {
	return &FtpOpenIsoimageParam{}
}

// Initialize init FtpOpenIsoimageParam
func (p *FtpOpenIsoimageParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *FtpOpenIsoimageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *FtpOpenIsoimageParam) fillValueToSkeleton() {

}

func (p *FtpOpenIsoimageParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *FtpOpenIsoimageParam) ResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *FtpOpenIsoimageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ftp-open"]
}

func (p *FtpOpenIsoimageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *FtpOpenIsoimageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *FtpOpenIsoimageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *FtpOpenIsoimageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// FtpCloseIsoimageParam is input parameters for the sacloud API
type FtpCloseIsoimageParam struct {
	input Input
}

// NewFtpCloseIsoimageParam return new FtpCloseIsoimageParam
func NewFtpCloseIsoimageParam() *FtpCloseIsoimageParam {
	return &FtpCloseIsoimageParam{}
}

// Initialize init FtpCloseIsoimageParam
func (p *FtpCloseIsoimageParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *FtpCloseIsoimageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *FtpCloseIsoimageParam) fillValueToSkeleton() {

}

func (p *FtpCloseIsoimageParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *FtpCloseIsoimageParam) ResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *FtpCloseIsoimageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ftp-close"]
}

func (p *FtpCloseIsoimageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *FtpCloseIsoimageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *FtpCloseIsoimageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *FtpCloseIsoimageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

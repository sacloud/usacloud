// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListSimpleMonitorParam is input parameters for the sacloud API
type ListSimpleMonitorParam struct {
	Max    int
	Sort   []string
	Tags   []string
	Health string
	Name   []string
	Id     []sacloud.ID
	From   int

	input Input
}

// NewListSimpleMonitorParam return new ListSimpleMonitorParam
func NewListSimpleMonitorParam() *ListSimpleMonitorParam {
	return &ListSimpleMonitorParam{}
}

// Initialize init ListSimpleMonitorParam
func (p *ListSimpleMonitorParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListSimpleMonitorParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListSimpleMonitorParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Health) {
		p.Health = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}

}

func (p *ListSimpleMonitorParam) validate() error {
	var errors []error

	{
		validator := define.Resources["SimpleMonitor"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SimpleMonitor"].Commands["list"].Params["health"].ValidateFunc
		errs := validator("--health", p.Health)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SimpleMonitor"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListSimpleMonitorParam) ResourceDef() *schema.Resource {
	return define.Resources["SimpleMonitor"]
}

func (p *ListSimpleMonitorParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListSimpleMonitorParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListSimpleMonitorParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListSimpleMonitorParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListSimpleMonitorParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListSimpleMonitorParam) SetMax(v int) {
	p.Max = v
}

func (p *ListSimpleMonitorParam) GetMax() int {
	return p.Max
}
func (p *ListSimpleMonitorParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListSimpleMonitorParam) GetSort() []string {
	return p.Sort
}
func (p *ListSimpleMonitorParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListSimpleMonitorParam) GetTags() []string {
	return p.Tags
}
func (p *ListSimpleMonitorParam) SetHealth(v string) {
	p.Health = v
}

func (p *ListSimpleMonitorParam) GetHealth() string {
	return p.Health
}
func (p *ListSimpleMonitorParam) SetName(v []string) {
	p.Name = v
}

func (p *ListSimpleMonitorParam) GetName() []string {
	return p.Name
}
func (p *ListSimpleMonitorParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListSimpleMonitorParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListSimpleMonitorParam) SetFrom(v int) {
	p.From = v
}

func (p *ListSimpleMonitorParam) GetFrom() int {
	return p.From
}

// CreateSimpleMonitorParam is input parameters for the sacloud API
type CreateSimpleMonitorParam struct {
	DelayLoop      int
	HostHeader     string
	ResponseCode   int
	RemainingDays  int
	Description    string
	IconId         sacloud.ID
	Disabled       bool
	EmailType      string
	SlackWebhook   string
	Tags           []string
	Port           int
	Path           string
	DNSExcepted    string
	NotifyEmail    bool
	Target         string
	Protocol       string
	Sni            bool
	Username       string
	Password       string
	DNSQname       string
	NotifyInterval int

	input Input
}

// NewCreateSimpleMonitorParam return new CreateSimpleMonitorParam
func NewCreateSimpleMonitorParam() *CreateSimpleMonitorParam {
	return &CreateSimpleMonitorParam{
		DelayLoop: 1, RemainingDays: 30, EmailType: "text", NotifyEmail: true, Protocol: "ping", NotifyInterval: 2}
}

// Initialize init CreateSimpleMonitorParam
func (p *CreateSimpleMonitorParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateSimpleMonitorParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateSimpleMonitorParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if utils.IsEmpty(p.HostHeader) {
		p.HostHeader = ""
	}
	if utils.IsEmpty(p.ResponseCode) {
		p.ResponseCode = 0
	}
	if utils.IsEmpty(p.RemainingDays) {
		p.RemainingDays = 0
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.EmailType) {
		p.EmailType = ""
	}
	if utils.IsEmpty(p.SlackWebhook) {
		p.SlackWebhook = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.Path) {
		p.Path = ""
	}
	if utils.IsEmpty(p.DNSExcepted) {
		p.DNSExcepted = ""
	}
	if utils.IsEmpty(p.NotifyEmail) {
		p.NotifyEmail = false
	}
	if utils.IsEmpty(p.Target) {
		p.Target = ""
	}
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.Sni) {
		p.Sni = false
	}
	if utils.IsEmpty(p.Username) {
		p.Username = ""
	}
	if utils.IsEmpty(p.Password) {
		p.Password = ""
	}
	if utils.IsEmpty(p.DNSQname) {
		p.DNSQname = ""
	}
	if utils.IsEmpty(p.NotifyInterval) {
		p.NotifyInterval = 0
	}

}

func (p *CreateSimpleMonitorParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SimpleMonitor"].Commands["create"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SimpleMonitor"].Commands["create"].Params["remaining-days"].ValidateFunc
		errs := validator("--remaining-days", p.RemainingDays)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SimpleMonitor"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SimpleMonitor"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SimpleMonitor"].Commands["create"].Params["email-type"].ValidateFunc
		errs := validator("--email-type", p.EmailType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SimpleMonitor"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SimpleMonitor"].Commands["create"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--target", p.Target)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SimpleMonitor"].Commands["create"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SimpleMonitor"].Commands["create"].Params["notify-interval"].ValidateFunc
		errs := validator("--notify-interval", p.NotifyInterval)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateSimpleMonitorParam) ResourceDef() *schema.Resource {
	return define.Resources["SimpleMonitor"]
}

func (p *CreateSimpleMonitorParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateSimpleMonitorParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateSimpleMonitorParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateSimpleMonitorParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateSimpleMonitorParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateSimpleMonitorParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *CreateSimpleMonitorParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *CreateSimpleMonitorParam) SetHostHeader(v string) {
	p.HostHeader = v
}

func (p *CreateSimpleMonitorParam) GetHostHeader() string {
	return p.HostHeader
}
func (p *CreateSimpleMonitorParam) SetResponseCode(v int) {
	p.ResponseCode = v
}

func (p *CreateSimpleMonitorParam) GetResponseCode() int {
	return p.ResponseCode
}
func (p *CreateSimpleMonitorParam) SetRemainingDays(v int) {
	p.RemainingDays = v
}

func (p *CreateSimpleMonitorParam) GetRemainingDays() int {
	return p.RemainingDays
}
func (p *CreateSimpleMonitorParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateSimpleMonitorParam) GetDescription() string {
	return p.Description
}
func (p *CreateSimpleMonitorParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateSimpleMonitorParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateSimpleMonitorParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *CreateSimpleMonitorParam) GetDisabled() bool {
	return p.Disabled
}
func (p *CreateSimpleMonitorParam) SetEmailType(v string) {
	p.EmailType = v
}

func (p *CreateSimpleMonitorParam) GetEmailType() string {
	return p.EmailType
}
func (p *CreateSimpleMonitorParam) SetSlackWebhook(v string) {
	p.SlackWebhook = v
}

func (p *CreateSimpleMonitorParam) GetSlackWebhook() string {
	return p.SlackWebhook
}
func (p *CreateSimpleMonitorParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateSimpleMonitorParam) GetTags() []string {
	return p.Tags
}
func (p *CreateSimpleMonitorParam) SetPort(v int) {
	p.Port = v
}

func (p *CreateSimpleMonitorParam) GetPort() int {
	return p.Port
}
func (p *CreateSimpleMonitorParam) SetPath(v string) {
	p.Path = v
}

func (p *CreateSimpleMonitorParam) GetPath() string {
	return p.Path
}
func (p *CreateSimpleMonitorParam) SetDNSExcepted(v string) {
	p.DNSExcepted = v
}

func (p *CreateSimpleMonitorParam) GetDNSExcepted() string {
	return p.DNSExcepted
}
func (p *CreateSimpleMonitorParam) SetNotifyEmail(v bool) {
	p.NotifyEmail = v
}

func (p *CreateSimpleMonitorParam) GetNotifyEmail() bool {
	return p.NotifyEmail
}
func (p *CreateSimpleMonitorParam) SetTarget(v string) {
	p.Target = v
}

func (p *CreateSimpleMonitorParam) GetTarget() string {
	return p.Target
}
func (p *CreateSimpleMonitorParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *CreateSimpleMonitorParam) GetProtocol() string {
	return p.Protocol
}
func (p *CreateSimpleMonitorParam) SetSni(v bool) {
	p.Sni = v
}

func (p *CreateSimpleMonitorParam) GetSni() bool {
	return p.Sni
}
func (p *CreateSimpleMonitorParam) SetUsername(v string) {
	p.Username = v
}

func (p *CreateSimpleMonitorParam) GetUsername() string {
	return p.Username
}
func (p *CreateSimpleMonitorParam) SetPassword(v string) {
	p.Password = v
}

func (p *CreateSimpleMonitorParam) GetPassword() string {
	return p.Password
}
func (p *CreateSimpleMonitorParam) SetDNSQname(v string) {
	p.DNSQname = v
}

func (p *CreateSimpleMonitorParam) GetDNSQname() string {
	return p.DNSQname
}
func (p *CreateSimpleMonitorParam) SetNotifyInterval(v int) {
	p.NotifyInterval = v
}

func (p *CreateSimpleMonitorParam) GetNotifyInterval() int {
	return p.NotifyInterval
}

// ReadSimpleMonitorParam is input parameters for the sacloud API
type ReadSimpleMonitorParam struct {
	input Input
}

// NewReadSimpleMonitorParam return new ReadSimpleMonitorParam
func NewReadSimpleMonitorParam() *ReadSimpleMonitorParam {
	return &ReadSimpleMonitorParam{}
}

// Initialize init ReadSimpleMonitorParam
func (p *ReadSimpleMonitorParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadSimpleMonitorParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadSimpleMonitorParam) fillValueToSkeleton() {

}

func (p *ReadSimpleMonitorParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadSimpleMonitorParam) ResourceDef() *schema.Resource {
	return define.Resources["SimpleMonitor"]
}

func (p *ReadSimpleMonitorParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadSimpleMonitorParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadSimpleMonitorParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadSimpleMonitorParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadSimpleMonitorParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdateSimpleMonitorParam is input parameters for the sacloud API
type UpdateSimpleMonitorParam struct {
	HostHeader     string
	Path           string
	Sni            bool
	Description    string
	Tags           []string
	DelayLoop      int
	ResponseCode   int
	EmailType      string
	NotifyInterval int
	IconId         sacloud.ID
	Port           int
	Disabled       bool
	Username       string
	DNSQname       string
	NotifyEmail    bool
	Protocol       string
	Password       string
	DNSExcepted    string
	RemainingDays  int
	SlackWebhook   string

	input Input
}

// NewUpdateSimpleMonitorParam return new UpdateSimpleMonitorParam
func NewUpdateSimpleMonitorParam() *UpdateSimpleMonitorParam {
	return &UpdateSimpleMonitorParam{
		NotifyInterval: 2}
}

// Initialize init UpdateSimpleMonitorParam
func (p *UpdateSimpleMonitorParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateSimpleMonitorParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateSimpleMonitorParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.HostHeader) {
		p.HostHeader = ""
	}
	if utils.IsEmpty(p.Path) {
		p.Path = ""
	}
	if utils.IsEmpty(p.Sni) {
		p.Sni = false
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if utils.IsEmpty(p.ResponseCode) {
		p.ResponseCode = 0
	}
	if utils.IsEmpty(p.EmailType) {
		p.EmailType = ""
	}
	if utils.IsEmpty(p.NotifyInterval) {
		p.NotifyInterval = 0
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.Username) {
		p.Username = ""
	}
	if utils.IsEmpty(p.DNSQname) {
		p.DNSQname = ""
	}
	if utils.IsEmpty(p.NotifyEmail) {
		p.NotifyEmail = false
	}
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.Password) {
		p.Password = ""
	}
	if utils.IsEmpty(p.DNSExcepted) {
		p.DNSExcepted = ""
	}
	if utils.IsEmpty(p.RemainingDays) {
		p.RemainingDays = 0
	}
	if utils.IsEmpty(p.SlackWebhook) {
		p.SlackWebhook = ""
	}

}

func (p *UpdateSimpleMonitorParam) validate() error {
	var errors []error

	{
		validator := define.Resources["SimpleMonitor"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SimpleMonitor"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SimpleMonitor"].Commands["update"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SimpleMonitor"].Commands["update"].Params["email-type"].ValidateFunc
		errs := validator("--email-type", p.EmailType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SimpleMonitor"].Commands["update"].Params["notify-interval"].ValidateFunc
		errs := validator("--notify-interval", p.NotifyInterval)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SimpleMonitor"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SimpleMonitor"].Commands["update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SimpleMonitor"].Commands["update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SimpleMonitor"].Commands["update"].Params["remaining-days"].ValidateFunc
		errs := validator("--remaining-days", p.RemainingDays)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateSimpleMonitorParam) ResourceDef() *schema.Resource {
	return define.Resources["SimpleMonitor"]
}

func (p *UpdateSimpleMonitorParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateSimpleMonitorParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateSimpleMonitorParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateSimpleMonitorParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateSimpleMonitorParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateSimpleMonitorParam) SetHostHeader(v string) {
	p.HostHeader = v
}

func (p *UpdateSimpleMonitorParam) GetHostHeader() string {
	return p.HostHeader
}
func (p *UpdateSimpleMonitorParam) SetPath(v string) {
	p.Path = v
}

func (p *UpdateSimpleMonitorParam) GetPath() string {
	return p.Path
}
func (p *UpdateSimpleMonitorParam) SetSni(v bool) {
	p.Sni = v
}

func (p *UpdateSimpleMonitorParam) GetSni() bool {
	return p.Sni
}
func (p *UpdateSimpleMonitorParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateSimpleMonitorParam) GetDescription() string {
	return p.Description
}
func (p *UpdateSimpleMonitorParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateSimpleMonitorParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateSimpleMonitorParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *UpdateSimpleMonitorParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *UpdateSimpleMonitorParam) SetResponseCode(v int) {
	p.ResponseCode = v
}

func (p *UpdateSimpleMonitorParam) GetResponseCode() int {
	return p.ResponseCode
}
func (p *UpdateSimpleMonitorParam) SetEmailType(v string) {
	p.EmailType = v
}

func (p *UpdateSimpleMonitorParam) GetEmailType() string {
	return p.EmailType
}
func (p *UpdateSimpleMonitorParam) SetNotifyInterval(v int) {
	p.NotifyInterval = v
}

func (p *UpdateSimpleMonitorParam) GetNotifyInterval() int {
	return p.NotifyInterval
}
func (p *UpdateSimpleMonitorParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateSimpleMonitorParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateSimpleMonitorParam) SetPort(v int) {
	p.Port = v
}

func (p *UpdateSimpleMonitorParam) GetPort() int {
	return p.Port
}
func (p *UpdateSimpleMonitorParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *UpdateSimpleMonitorParam) GetDisabled() bool {
	return p.Disabled
}
func (p *UpdateSimpleMonitorParam) SetUsername(v string) {
	p.Username = v
}

func (p *UpdateSimpleMonitorParam) GetUsername() string {
	return p.Username
}
func (p *UpdateSimpleMonitorParam) SetDNSQname(v string) {
	p.DNSQname = v
}

func (p *UpdateSimpleMonitorParam) GetDNSQname() string {
	return p.DNSQname
}
func (p *UpdateSimpleMonitorParam) SetNotifyEmail(v bool) {
	p.NotifyEmail = v
}

func (p *UpdateSimpleMonitorParam) GetNotifyEmail() bool {
	return p.NotifyEmail
}
func (p *UpdateSimpleMonitorParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *UpdateSimpleMonitorParam) GetProtocol() string {
	return p.Protocol
}
func (p *UpdateSimpleMonitorParam) SetPassword(v string) {
	p.Password = v
}

func (p *UpdateSimpleMonitorParam) GetPassword() string {
	return p.Password
}
func (p *UpdateSimpleMonitorParam) SetDNSExcepted(v string) {
	p.DNSExcepted = v
}

func (p *UpdateSimpleMonitorParam) GetDNSExcepted() string {
	return p.DNSExcepted
}
func (p *UpdateSimpleMonitorParam) SetRemainingDays(v int) {
	p.RemainingDays = v
}

func (p *UpdateSimpleMonitorParam) GetRemainingDays() int {
	return p.RemainingDays
}
func (p *UpdateSimpleMonitorParam) SetSlackWebhook(v string) {
	p.SlackWebhook = v
}

func (p *UpdateSimpleMonitorParam) GetSlackWebhook() string {
	return p.SlackWebhook
}

// DeleteSimpleMonitorParam is input parameters for the sacloud API
type DeleteSimpleMonitorParam struct {
	input Input
}

// NewDeleteSimpleMonitorParam return new DeleteSimpleMonitorParam
func NewDeleteSimpleMonitorParam() *DeleteSimpleMonitorParam {
	return &DeleteSimpleMonitorParam{}
}

// Initialize init DeleteSimpleMonitorParam
func (p *DeleteSimpleMonitorParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteSimpleMonitorParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteSimpleMonitorParam) fillValueToSkeleton() {

}

func (p *DeleteSimpleMonitorParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteSimpleMonitorParam) ResourceDef() *schema.Resource {
	return define.Resources["SimpleMonitor"]
}

func (p *DeleteSimpleMonitorParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteSimpleMonitorParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteSimpleMonitorParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteSimpleMonitorParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteSimpleMonitorParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// HealthSimpleMonitorParam is input parameters for the sacloud API
type HealthSimpleMonitorParam struct {
	input Input
}

// NewHealthSimpleMonitorParam return new HealthSimpleMonitorParam
func NewHealthSimpleMonitorParam() *HealthSimpleMonitorParam {
	return &HealthSimpleMonitorParam{}
}

// Initialize init HealthSimpleMonitorParam
func (p *HealthSimpleMonitorParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *HealthSimpleMonitorParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *HealthSimpleMonitorParam) fillValueToSkeleton() {

}

func (p *HealthSimpleMonitorParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *HealthSimpleMonitorParam) ResourceDef() *schema.Resource {
	return define.Resources["SimpleMonitor"]
}

func (p *HealthSimpleMonitorParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["health"]
}

func (p *HealthSimpleMonitorParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *HealthSimpleMonitorParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *HealthSimpleMonitorParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *HealthSimpleMonitorParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

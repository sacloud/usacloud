// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/schema"
)

// ListObjectStorageParam is input parameters for the sacloud API
type ListObjectStorageParam struct {
	AccessKey string
	SecretKey string
	Bucket    string

	input Input
}

// NewListObjectStorageParam return new ListObjectStorageParam
func NewListObjectStorageParam() *ListObjectStorageParam {
	return &ListObjectStorageParam{}
}

// Initialize init ListObjectStorageParam
func (p *ListObjectStorageParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListObjectStorageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListObjectStorageParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.AccessKey) {
		p.AccessKey = ""
	}
	if utils.IsEmpty(p.SecretKey) {
		p.SecretKey = ""
	}
	if utils.IsEmpty(p.Bucket) {
		p.Bucket = ""
	}

}

func (p *ListObjectStorageParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--access-key", p.AccessKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--secret-key", p.SecretKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListObjectStorageParam) ResourceDef() *schema.Resource {
	return define.Resources["ObjectStorage"]
}

func (p *ListObjectStorageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListObjectStorageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListObjectStorageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListObjectStorageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListObjectStorageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListObjectStorageParam) SetAccessKey(v string) {
	p.AccessKey = v
}

func (p *ListObjectStorageParam) GetAccessKey() string {
	return p.AccessKey
}
func (p *ListObjectStorageParam) SetSecretKey(v string) {
	p.SecretKey = v
}

func (p *ListObjectStorageParam) GetSecretKey() string {
	return p.SecretKey
}
func (p *ListObjectStorageParam) SetBucket(v string) {
	p.Bucket = v
}

func (p *ListObjectStorageParam) GetBucket() string {
	return p.Bucket
}

// PutObjectStorageParam is input parameters for the sacloud API
type PutObjectStorageParam struct {
	SecretKey   string
	Bucket      string
	ContentType string
	Recursive   bool
	AccessKey   string

	input Input
}

// NewPutObjectStorageParam return new PutObjectStorageParam
func NewPutObjectStorageParam() *PutObjectStorageParam {
	return &PutObjectStorageParam{
		ContentType: "application/octet-stream"}
}

// Initialize init PutObjectStorageParam
func (p *PutObjectStorageParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PutObjectStorageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PutObjectStorageParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.SecretKey) {
		p.SecretKey = ""
	}
	if utils.IsEmpty(p.Bucket) {
		p.Bucket = ""
	}
	if utils.IsEmpty(p.ContentType) {
		p.ContentType = ""
	}
	if utils.IsEmpty(p.Recursive) {
		p.Recursive = false
	}
	if utils.IsEmpty(p.AccessKey) {
		p.AccessKey = ""
	}

}

func (p *PutObjectStorageParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--secret-key", p.SecretKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--access-key", p.AccessKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PutObjectStorageParam) ResourceDef() *schema.Resource {
	return define.Resources["ObjectStorage"]
}

func (p *PutObjectStorageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["put"]
}

func (p *PutObjectStorageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PutObjectStorageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PutObjectStorageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PutObjectStorageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PutObjectStorageParam) SetSecretKey(v string) {
	p.SecretKey = v
}

func (p *PutObjectStorageParam) GetSecretKey() string {
	return p.SecretKey
}
func (p *PutObjectStorageParam) SetBucket(v string) {
	p.Bucket = v
}

func (p *PutObjectStorageParam) GetBucket() string {
	return p.Bucket
}
func (p *PutObjectStorageParam) SetContentType(v string) {
	p.ContentType = v
}

func (p *PutObjectStorageParam) GetContentType() string {
	return p.ContentType
}
func (p *PutObjectStorageParam) SetRecursive(v bool) {
	p.Recursive = v
}

func (p *PutObjectStorageParam) GetRecursive() bool {
	return p.Recursive
}
func (p *PutObjectStorageParam) SetAccessKey(v string) {
	p.AccessKey = v
}

func (p *PutObjectStorageParam) GetAccessKey() string {
	return p.AccessKey
}

// GetObjectStorageParam is input parameters for the sacloud API
type GetObjectStorageParam struct {
	AccessKey string
	SecretKey string
	Bucket    string
	Recursive bool

	input Input
}

// NewGetObjectStorageParam return new GetObjectStorageParam
func NewGetObjectStorageParam() *GetObjectStorageParam {
	return &GetObjectStorageParam{}
}

// Initialize init GetObjectStorageParam
func (p *GetObjectStorageParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *GetObjectStorageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *GetObjectStorageParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.AccessKey) {
		p.AccessKey = ""
	}
	if utils.IsEmpty(p.SecretKey) {
		p.SecretKey = ""
	}
	if utils.IsEmpty(p.Bucket) {
		p.Bucket = ""
	}
	if utils.IsEmpty(p.Recursive) {
		p.Recursive = false
	}

}

func (p *GetObjectStorageParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--access-key", p.AccessKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--secret-key", p.SecretKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *GetObjectStorageParam) ResourceDef() *schema.Resource {
	return define.Resources["ObjectStorage"]
}

func (p *GetObjectStorageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["get"]
}

func (p *GetObjectStorageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *GetObjectStorageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *GetObjectStorageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *GetObjectStorageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *GetObjectStorageParam) SetAccessKey(v string) {
	p.AccessKey = v
}

func (p *GetObjectStorageParam) GetAccessKey() string {
	return p.AccessKey
}
func (p *GetObjectStorageParam) SetSecretKey(v string) {
	p.SecretKey = v
}

func (p *GetObjectStorageParam) GetSecretKey() string {
	return p.SecretKey
}
func (p *GetObjectStorageParam) SetBucket(v string) {
	p.Bucket = v
}

func (p *GetObjectStorageParam) GetBucket() string {
	return p.Bucket
}
func (p *GetObjectStorageParam) SetRecursive(v bool) {
	p.Recursive = v
}

func (p *GetObjectStorageParam) GetRecursive() bool {
	return p.Recursive
}

// DeleteObjectStorageParam is input parameters for the sacloud API
type DeleteObjectStorageParam struct {
	AccessKey string
	SecretKey string
	Bucket    string
	Recursive bool

	input Input
}

// NewDeleteObjectStorageParam return new DeleteObjectStorageParam
func NewDeleteObjectStorageParam() *DeleteObjectStorageParam {
	return &DeleteObjectStorageParam{}
}

// Initialize init DeleteObjectStorageParam
func (p *DeleteObjectStorageParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteObjectStorageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteObjectStorageParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.AccessKey) {
		p.AccessKey = ""
	}
	if utils.IsEmpty(p.SecretKey) {
		p.SecretKey = ""
	}
	if utils.IsEmpty(p.Bucket) {
		p.Bucket = ""
	}
	if utils.IsEmpty(p.Recursive) {
		p.Recursive = false
	}

}

func (p *DeleteObjectStorageParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--access-key", p.AccessKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--secret-key", p.SecretKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DeleteObjectStorageParam) ResourceDef() *schema.Resource {
	return define.Resources["ObjectStorage"]
}

func (p *DeleteObjectStorageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteObjectStorageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteObjectStorageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteObjectStorageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteObjectStorageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteObjectStorageParam) SetAccessKey(v string) {
	p.AccessKey = v
}

func (p *DeleteObjectStorageParam) GetAccessKey() string {
	return p.AccessKey
}
func (p *DeleteObjectStorageParam) SetSecretKey(v string) {
	p.SecretKey = v
}

func (p *DeleteObjectStorageParam) GetSecretKey() string {
	return p.SecretKey
}
func (p *DeleteObjectStorageParam) SetBucket(v string) {
	p.Bucket = v
}

func (p *DeleteObjectStorageParam) GetBucket() string {
	return p.Bucket
}
func (p *DeleteObjectStorageParam) SetRecursive(v bool) {
	p.Recursive = v
}

func (p *DeleteObjectStorageParam) GetRecursive() bool {
	return p.Recursive
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListArchiveParam is input parameters for the sacloud API
type ListArchiveParam struct {
	Name            []string
	Id              []sacloud.ID
	From            int
	Sort            []string
	Scope           string
	Tags            []string
	SourceArchiveId sacloud.ID
	SourceDiskId    sacloud.ID
	Max             int

	input Input
}

// NewListArchiveParam return new ListArchiveParam
func NewListArchiveParam() *ListArchiveParam {
	return &ListArchiveParam{}
}

// Initialize init ListArchiveParam
func (p *ListArchiveParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListArchiveParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Scope) {
		p.Scope = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.SourceArchiveId) {
		p.SourceArchiveId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.SourceDiskId) {
		p.SourceDiskId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}

}

func (p *ListArchiveParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["list"].Params["scope"].ValidateFunc
		errs := validator("--scope", p.Scope)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["list"].Params["source-archive-id"].ValidateFunc
		errs := validator("--source-archive-id", p.SourceArchiveId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["list"].Params["source-disk-id"].ValidateFunc
		errs := validator("--source-disk-id", p.SourceDiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *ListArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListArchiveParam) SetName(v []string) {
	p.Name = v
}

func (p *ListArchiveParam) GetName() []string {
	return p.Name
}
func (p *ListArchiveParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListArchiveParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListArchiveParam) SetFrom(v int) {
	p.From = v
}

func (p *ListArchiveParam) GetFrom() int {
	return p.From
}
func (p *ListArchiveParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListArchiveParam) GetSort() []string {
	return p.Sort
}
func (p *ListArchiveParam) SetScope(v string) {
	p.Scope = v
}

func (p *ListArchiveParam) GetScope() string {
	return p.Scope
}
func (p *ListArchiveParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListArchiveParam) GetTags() []string {
	return p.Tags
}
func (p *ListArchiveParam) SetSourceArchiveId(v sacloud.ID) {
	p.SourceArchiveId = v
}

func (p *ListArchiveParam) GetSourceArchiveId() sacloud.ID {
	return p.SourceArchiveId
}
func (p *ListArchiveParam) SetSourceDiskId(v sacloud.ID) {
	p.SourceDiskId = v
}

func (p *ListArchiveParam) GetSourceDiskId() sacloud.ID {
	return p.SourceDiskId
}
func (p *ListArchiveParam) SetMax(v int) {
	p.Max = v
}

func (p *ListArchiveParam) GetMax() int {
	return p.Max
}

// CreateArchiveParam is input parameters for the sacloud API
type CreateArchiveParam struct {
	Tags            []string
	IconId          sacloud.ID
	SourceDiskId    sacloud.ID
	SourceArchiveId sacloud.ID
	Size            int
	ArchiveFile     string
	Name            string
	Description     string

	input Input
}

// NewCreateArchiveParam return new CreateArchiveParam
func NewCreateArchiveParam() *CreateArchiveParam {
	return &CreateArchiveParam{}
}

// Initialize init CreateArchiveParam
func (p *CreateArchiveParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateArchiveParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.SourceDiskId) {
		p.SourceDiskId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.SourceArchiveId) {
		p.SourceArchiveId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Size) {
		p.Size = 0
	}
	if utils.IsEmpty(p.ArchiveFile) {
		p.ArchiveFile = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}

}

func (p *CreateArchiveParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Archive"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["create"].Params["source-disk-id"].ValidateFunc
		errs := validator("--source-disk-id", p.SourceDiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--source-disk-id", p.SourceDiskId, map[string]interface{}{

			"--archive-file":      p.ArchiveFile,
			"--size":              p.Size,
			"--source-archive-id": p.SourceArchiveId,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["create"].Params["source-archive-id"].ValidateFunc
		errs := validator("--source-archive-id", p.SourceArchiveId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--source-archive-id", p.SourceArchiveId, map[string]interface{}{

			"--archive-file":   p.ArchiveFile,
			"--size":           p.Size,
			"--source-disk-id": p.SourceDiskId,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["create"].Params["size"].ValidateFunc
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--size", p.Size, map[string]interface{}{

			"--source-archive-id": p.SourceArchiveId,
			"--source-disk-id":    p.SourceDiskId,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["create"].Params["archive-file"].ValidateFunc
		errs := validator("--archive-file", p.ArchiveFile)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--archive-file", p.ArchiveFile, map[string]interface{}{

			"--source-archive-id": p.SourceArchiveId,
			"--source-disk-id":    p.SourceDiskId,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *CreateArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateArchiveParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateArchiveParam) GetTags() []string {
	return p.Tags
}
func (p *CreateArchiveParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateArchiveParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateArchiveParam) SetSourceDiskId(v sacloud.ID) {
	p.SourceDiskId = v
}

func (p *CreateArchiveParam) GetSourceDiskId() sacloud.ID {
	return p.SourceDiskId
}
func (p *CreateArchiveParam) SetSourceArchiveId(v sacloud.ID) {
	p.SourceArchiveId = v
}

func (p *CreateArchiveParam) GetSourceArchiveId() sacloud.ID {
	return p.SourceArchiveId
}
func (p *CreateArchiveParam) SetSize(v int) {
	p.Size = v
}

func (p *CreateArchiveParam) GetSize() int {
	return p.Size
}
func (p *CreateArchiveParam) SetArchiveFile(v string) {
	p.ArchiveFile = v
}

func (p *CreateArchiveParam) GetArchiveFile() string {
	return p.ArchiveFile
}
func (p *CreateArchiveParam) SetName(v string) {
	p.Name = v
}

func (p *CreateArchiveParam) GetName() string {
	return p.Name
}
func (p *CreateArchiveParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateArchiveParam) GetDescription() string {
	return p.Description
}

// ReadArchiveParam is input parameters for the sacloud API
type ReadArchiveParam struct {
	input Input
}

// NewReadArchiveParam return new ReadArchiveParam
func NewReadArchiveParam() *ReadArchiveParam {
	return &ReadArchiveParam{}
}

// Initialize init ReadArchiveParam
func (p *ReadArchiveParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadArchiveParam) fillValueToSkeleton() {

}

func (p *ReadArchiveParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *ReadArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdateArchiveParam is input parameters for the sacloud API
type UpdateArchiveParam struct {
	Description string
	Tags        []string
	IconId      sacloud.ID
	Name        string

	input Input
}

// NewUpdateArchiveParam return new UpdateArchiveParam
func NewUpdateArchiveParam() *UpdateArchiveParam {
	return &UpdateArchiveParam{}
}

// Initialize init UpdateArchiveParam
func (p *UpdateArchiveParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateArchiveParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}

}

func (p *UpdateArchiveParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Archive"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Archive"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *UpdateArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateArchiveParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateArchiveParam) GetDescription() string {
	return p.Description
}
func (p *UpdateArchiveParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateArchiveParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateArchiveParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateArchiveParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateArchiveParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateArchiveParam) GetName() string {
	return p.Name
}

// DeleteArchiveParam is input parameters for the sacloud API
type DeleteArchiveParam struct {
	input Input
}

// NewDeleteArchiveParam return new DeleteArchiveParam
func NewDeleteArchiveParam() *DeleteArchiveParam {
	return &DeleteArchiveParam{}
}

// Initialize init DeleteArchiveParam
func (p *DeleteArchiveParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteArchiveParam) fillValueToSkeleton() {

}

func (p *DeleteArchiveParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *DeleteArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UploadArchiveParam is input parameters for the sacloud API
type UploadArchiveParam struct {
	ArchiveFile string

	input Input
}

// NewUploadArchiveParam return new UploadArchiveParam
func NewUploadArchiveParam() *UploadArchiveParam {
	return &UploadArchiveParam{}
}

// Initialize init UploadArchiveParam
func (p *UploadArchiveParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UploadArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UploadArchiveParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.ArchiveFile) {
		p.ArchiveFile = ""
	}

}

func (p *UploadArchiveParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Archive"].Commands["upload"].Params["archive-file"].ValidateFunc
		errs := validator("--archive-file", p.ArchiveFile)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UploadArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *UploadArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["upload"]
}

func (p *UploadArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UploadArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UploadArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UploadArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UploadArchiveParam) SetArchiveFile(v string) {
	p.ArchiveFile = v
}

func (p *UploadArchiveParam) GetArchiveFile() string {
	return p.ArchiveFile
}

// DownloadArchiveParam is input parameters for the sacloud API
type DownloadArchiveParam struct {
	FileDestination string

	input Input
}

// NewDownloadArchiveParam return new DownloadArchiveParam
func NewDownloadArchiveParam() *DownloadArchiveParam {
	return &DownloadArchiveParam{}
}

// Initialize init DownloadArchiveParam
func (p *DownloadArchiveParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DownloadArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DownloadArchiveParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.FileDestination) {
		p.FileDestination = ""
	}

}

func (p *DownloadArchiveParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DownloadArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *DownloadArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["download"]
}

func (p *DownloadArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DownloadArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DownloadArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DownloadArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DownloadArchiveParam) SetFileDestination(v string) {
	p.FileDestination = v
}

func (p *DownloadArchiveParam) GetFileDestination() string {
	return p.FileDestination
}

// FTPOpenArchiveParam is input parameters for the sacloud API
type FTPOpenArchiveParam struct {
	input Input
}

// NewFTPOpenArchiveParam return new FTPOpenArchiveParam
func NewFTPOpenArchiveParam() *FTPOpenArchiveParam {
	return &FTPOpenArchiveParam{}
}

// Initialize init FTPOpenArchiveParam
func (p *FTPOpenArchiveParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *FTPOpenArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *FTPOpenArchiveParam) fillValueToSkeleton() {

}

func (p *FTPOpenArchiveParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *FTPOpenArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *FTPOpenArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ftp-open"]
}

func (p *FTPOpenArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *FTPOpenArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *FTPOpenArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *FTPOpenArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// FTPCloseArchiveParam is input parameters for the sacloud API
type FTPCloseArchiveParam struct {
	input Input
}

// NewFTPCloseArchiveParam return new FTPCloseArchiveParam
func NewFTPCloseArchiveParam() *FTPCloseArchiveParam {
	return &FTPCloseArchiveParam{}
}

// Initialize init FTPCloseArchiveParam
func (p *FTPCloseArchiveParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *FTPCloseArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *FTPCloseArchiveParam) fillValueToSkeleton() {

}

func (p *FTPCloseArchiveParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *FTPCloseArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *FTPCloseArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ftp-close"]
}

func (p *FTPCloseArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *FTPCloseArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *FTPCloseArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *FTPCloseArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// WaitForCopyArchiveParam is input parameters for the sacloud API
type WaitForCopyArchiveParam struct {
	input Input
}

// NewWaitForCopyArchiveParam return new WaitForCopyArchiveParam
func NewWaitForCopyArchiveParam() *WaitForCopyArchiveParam {
	return &WaitForCopyArchiveParam{}
}

// Initialize init WaitForCopyArchiveParam
func (p *WaitForCopyArchiveParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForCopyArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForCopyArchiveParam) fillValueToSkeleton() {

}

func (p *WaitForCopyArchiveParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *WaitForCopyArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *WaitForCopyArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-copy"]
}

func (p *WaitForCopyArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForCopyArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForCopyArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForCopyArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

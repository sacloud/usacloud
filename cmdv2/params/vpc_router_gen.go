// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListVPCRouterParam is input parameters for the sacloud API
type ListVPCRouterParam struct {
	Name []string
	Id   []sacloud.ID
	From int
	Max  int
	Sort []string
	Tags []string

	input Input
}

// NewListVPCRouterParam return new ListVPCRouterParam
func NewListVPCRouterParam() *ListVPCRouterParam {
	return &ListVPCRouterParam{}
}

// Initialize init ListVPCRouterParam
func (p *ListVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}

}

func (p *ListVPCRouterParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ListVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListVPCRouterParam) SetName(v []string) {
	p.Name = v
}

func (p *ListVPCRouterParam) GetName() []string {
	return p.Name
}
func (p *ListVPCRouterParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListVPCRouterParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListVPCRouterParam) SetFrom(v int) {
	p.From = v
}

func (p *ListVPCRouterParam) GetFrom() int {
	return p.From
}
func (p *ListVPCRouterParam) SetMax(v int) {
	p.Max = v
}

func (p *ListVPCRouterParam) GetMax() int {
	return p.Max
}
func (p *ListVPCRouterParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListVPCRouterParam) GetSort() []string {
	return p.Sort
}
func (p *ListVPCRouterParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListVPCRouterParam) GetTags() []string {
	return p.Tags
}

// CreateVPCRouterParam is input parameters for the sacloud API
type CreateVPCRouterParam struct {
	BootAfterCreate           bool
	Description               string
	Plan                      string
	SwitchId                  sacloud.ID
	Vip                       string
	Ipaddress1                string
	Ipaddress2                string
	DisableInternetConnection bool
	Tags                      []string
	IconId                    sacloud.ID
	Vrid                      int
	Name                      string

	input Input
}

// NewCreateVPCRouterParam return new CreateVPCRouterParam
func NewCreateVPCRouterParam() *CreateVPCRouterParam {
	return &CreateVPCRouterParam{
		Plan: "standard", Vrid: 1}
}

// Initialize init CreateVPCRouterParam
func (p *CreateVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.BootAfterCreate) {
		p.BootAfterCreate = false
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Plan) {
		p.Plan = ""
	}
	if utils.IsEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Vip) {
		p.Vip = ""
	}
	if utils.IsEmpty(p.Ipaddress1) {
		p.Ipaddress1 = ""
	}
	if utils.IsEmpty(p.Ipaddress2) {
		p.Ipaddress2 = ""
	}
	if utils.IsEmpty(p.DisableInternetConnection) {
		p.DisableInternetConnection = false
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Vrid) {
		p.Vrid = 0
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}

}

func (p *CreateVPCRouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["ipaddress2"].ValidateFunc
		errs := validator("--ipaddress-2", p.Ipaddress2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--vrid", p.Vrid)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *CreateVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateVPCRouterParam) SetBootAfterCreate(v bool) {
	p.BootAfterCreate = v
}

func (p *CreateVPCRouterParam) GetBootAfterCreate() bool {
	return p.BootAfterCreate
}
func (p *CreateVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateVPCRouterParam) GetDescription() string {
	return p.Description
}
func (p *CreateVPCRouterParam) SetPlan(v string) {
	p.Plan = v
}

func (p *CreateVPCRouterParam) GetPlan() string {
	return p.Plan
}
func (p *CreateVPCRouterParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *CreateVPCRouterParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *CreateVPCRouterParam) SetVip(v string) {
	p.Vip = v
}

func (p *CreateVPCRouterParam) GetVip() string {
	return p.Vip
}
func (p *CreateVPCRouterParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *CreateVPCRouterParam) GetIpaddress1() string {
	return p.Ipaddress1
}
func (p *CreateVPCRouterParam) SetIpaddress2(v string) {
	p.Ipaddress2 = v
}

func (p *CreateVPCRouterParam) GetIpaddress2() string {
	return p.Ipaddress2
}
func (p *CreateVPCRouterParam) SetDisableInternetConnection(v bool) {
	p.DisableInternetConnection = v
}

func (p *CreateVPCRouterParam) GetDisableInternetConnection() bool {
	return p.DisableInternetConnection
}
func (p *CreateVPCRouterParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateVPCRouterParam) GetTags() []string {
	return p.Tags
}
func (p *CreateVPCRouterParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateVPCRouterParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateVPCRouterParam) SetVrid(v int) {
	p.Vrid = v
}

func (p *CreateVPCRouterParam) GetVrid() int {
	return p.Vrid
}
func (p *CreateVPCRouterParam) SetName(v string) {
	p.Name = v
}

func (p *CreateVPCRouterParam) GetName() string {
	return p.Name
}

// ReadVPCRouterParam is input parameters for the sacloud API
type ReadVPCRouterParam struct {
	input Input
}

// NewReadVPCRouterParam return new ReadVPCRouterParam
func NewReadVPCRouterParam() *ReadVPCRouterParam {
	return &ReadVPCRouterParam{}
}

// Initialize init ReadVPCRouterParam
func (p *ReadVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadVPCRouterParam) fillValueToSkeleton() {

}

func (p *ReadVPCRouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ReadVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdateVPCRouterParam is input parameters for the sacloud API
type UpdateVPCRouterParam struct {
	SyslogHost         string
	InternetConnection bool
	Name               string
	Description        string
	Tags               []string
	IconId             sacloud.ID

	input Input
}

// NewUpdateVPCRouterParam return new UpdateVPCRouterParam
func NewUpdateVPCRouterParam() *UpdateVPCRouterParam {
	return &UpdateVPCRouterParam{}
}

// Initialize init UpdateVPCRouterParam
func (p *UpdateVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.SyslogHost) {
		p.SyslogHost = ""
	}
	if utils.IsEmpty(p.InternetConnection) {
		p.InternetConnection = false
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}

}

func (p *UpdateVPCRouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["syslog-host"].ValidateFunc
		errs := validator("--syslog-host", p.SyslogHost)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UpdateVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateVPCRouterParam) SetSyslogHost(v string) {
	p.SyslogHost = v
}

func (p *UpdateVPCRouterParam) GetSyslogHost() string {
	return p.SyslogHost
}
func (p *UpdateVPCRouterParam) SetInternetConnection(v bool) {
	p.InternetConnection = v
}

func (p *UpdateVPCRouterParam) GetInternetConnection() bool {
	return p.InternetConnection
}
func (p *UpdateVPCRouterParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateVPCRouterParam) GetName() string {
	return p.Name
}
func (p *UpdateVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateVPCRouterParam) GetDescription() string {
	return p.Description
}
func (p *UpdateVPCRouterParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateVPCRouterParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateVPCRouterParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateVPCRouterParam) GetIconId() sacloud.ID {
	return p.IconId
}

// DeleteVPCRouterParam is input parameters for the sacloud API
type DeleteVPCRouterParam struct {
	Force bool

	input Input
}

// NewDeleteVPCRouterParam return new DeleteVPCRouterParam
func NewDeleteVPCRouterParam() *DeleteVPCRouterParam {
	return &DeleteVPCRouterParam{}
}

// Initialize init DeleteVPCRouterParam
func (p *DeleteVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Force) {
		p.Force = false
	}

}

func (p *DeleteVPCRouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DeleteVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteVPCRouterParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteVPCRouterParam) GetForce() bool {
	return p.Force
}

// BootVPCRouterParam is input parameters for the sacloud API
type BootVPCRouterParam struct {
	input Input
}

// NewBootVPCRouterParam return new BootVPCRouterParam
func NewBootVPCRouterParam() *BootVPCRouterParam {
	return &BootVPCRouterParam{}
}

// Initialize init BootVPCRouterParam
func (p *BootVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BootVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BootVPCRouterParam) fillValueToSkeleton() {

}

func (p *BootVPCRouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *BootVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *BootVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["boot"]
}

func (p *BootVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BootVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BootVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BootVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ShutdownVPCRouterParam is input parameters for the sacloud API
type ShutdownVPCRouterParam struct {
	input Input
}

// NewShutdownVPCRouterParam return new ShutdownVPCRouterParam
func NewShutdownVPCRouterParam() *ShutdownVPCRouterParam {
	return &ShutdownVPCRouterParam{}
}

// Initialize init ShutdownVPCRouterParam
func (p *ShutdownVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShutdownVPCRouterParam) fillValueToSkeleton() {

}

func (p *ShutdownVPCRouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ShutdownVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ShutdownVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown"]
}

func (p *ShutdownVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ShutdownForceVPCRouterParam is input parameters for the sacloud API
type ShutdownForceVPCRouterParam struct {
	input Input
}

// NewShutdownForceVPCRouterParam return new ShutdownForceVPCRouterParam
func NewShutdownForceVPCRouterParam() *ShutdownForceVPCRouterParam {
	return &ShutdownForceVPCRouterParam{}
}

// Initialize init ShutdownForceVPCRouterParam
func (p *ShutdownForceVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownForceVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShutdownForceVPCRouterParam) fillValueToSkeleton() {

}

func (p *ShutdownForceVPCRouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ShutdownForceVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ShutdownForceVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown-force"]
}

func (p *ShutdownForceVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownForceVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownForceVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownForceVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ResetVPCRouterParam is input parameters for the sacloud API
type ResetVPCRouterParam struct {
	input Input
}

// NewResetVPCRouterParam return new ResetVPCRouterParam
func NewResetVPCRouterParam() *ResetVPCRouterParam {
	return &ResetVPCRouterParam{}
}

// Initialize init ResetVPCRouterParam
func (p *ResetVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResetVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResetVPCRouterParam) fillValueToSkeleton() {

}

func (p *ResetVPCRouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ResetVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ResetVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["reset"]
}

func (p *ResetVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResetVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResetVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResetVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// WaitForBootVPCRouterParam is input parameters for the sacloud API
type WaitForBootVPCRouterParam struct {
	input Input
}

// NewWaitForBootVPCRouterParam return new WaitForBootVPCRouterParam
func NewWaitForBootVPCRouterParam() *WaitForBootVPCRouterParam {
	return &WaitForBootVPCRouterParam{}
}

// Initialize init WaitForBootVPCRouterParam
func (p *WaitForBootVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForBootVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForBootVPCRouterParam) fillValueToSkeleton() {

}

func (p *WaitForBootVPCRouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *WaitForBootVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *WaitForBootVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-boot"]
}

func (p *WaitForBootVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForBootVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForBootVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForBootVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// WaitForDownVPCRouterParam is input parameters for the sacloud API
type WaitForDownVPCRouterParam struct {
	input Input
}

// NewWaitForDownVPCRouterParam return new WaitForDownVPCRouterParam
func NewWaitForDownVPCRouterParam() *WaitForDownVPCRouterParam {
	return &WaitForDownVPCRouterParam{}
}

// Initialize init WaitForDownVPCRouterParam
func (p *WaitForDownVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForDownVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForDownVPCRouterParam) fillValueToSkeleton() {

}

func (p *WaitForDownVPCRouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *WaitForDownVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *WaitForDownVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-down"]
}

func (p *WaitForDownVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForDownVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForDownVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForDownVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// EnableInternetConnectionVPCRouterParam is input parameters for the sacloud API
type EnableInternetConnectionVPCRouterParam struct {
	input Input
}

// NewEnableInternetConnectionVPCRouterParam return new EnableInternetConnectionVPCRouterParam
func NewEnableInternetConnectionVPCRouterParam() *EnableInternetConnectionVPCRouterParam {
	return &EnableInternetConnectionVPCRouterParam{}
}

// Initialize init EnableInternetConnectionVPCRouterParam
func (p *EnableInternetConnectionVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *EnableInternetConnectionVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *EnableInternetConnectionVPCRouterParam) fillValueToSkeleton() {

}

func (p *EnableInternetConnectionVPCRouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *EnableInternetConnectionVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *EnableInternetConnectionVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["enable-internet-connection"]
}

func (p *EnableInternetConnectionVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *EnableInternetConnectionVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *EnableInternetConnectionVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *EnableInternetConnectionVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// DisableInternetConnectionVPCRouterParam is input parameters for the sacloud API
type DisableInternetConnectionVPCRouterParam struct {
	input Input
}

// NewDisableInternetConnectionVPCRouterParam return new DisableInternetConnectionVPCRouterParam
func NewDisableInternetConnectionVPCRouterParam() *DisableInternetConnectionVPCRouterParam {
	return &DisableInternetConnectionVPCRouterParam{}
}

// Initialize init DisableInternetConnectionVPCRouterParam
func (p *DisableInternetConnectionVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DisableInternetConnectionVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DisableInternetConnectionVPCRouterParam) fillValueToSkeleton() {

}

func (p *DisableInternetConnectionVPCRouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DisableInternetConnectionVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DisableInternetConnectionVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["disable-internet-connection"]
}

func (p *DisableInternetConnectionVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DisableInternetConnectionVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DisableInternetConnectionVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DisableInternetConnectionVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// InterfaceInfoVPCRouterParam is input parameters for the sacloud API
type InterfaceInfoVPCRouterParam struct {
	input Input
}

// NewInterfaceInfoVPCRouterParam return new InterfaceInfoVPCRouterParam
func NewInterfaceInfoVPCRouterParam() *InterfaceInfoVPCRouterParam {
	return &InterfaceInfoVPCRouterParam{}
}

// Initialize init InterfaceInfoVPCRouterParam
func (p *InterfaceInfoVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceInfoVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceInfoVPCRouterParam) fillValueToSkeleton() {

}

func (p *InterfaceInfoVPCRouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *InterfaceInfoVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *InterfaceInfoVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-info"]
}

func (p *InterfaceInfoVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceInfoVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceInfoVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceInfoVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// InterfaceConnectVPCRouterParam is input parameters for the sacloud API
type InterfaceConnectVPCRouterParam struct {
	WithReboot bool
	Interface  string
	SwitchId   sacloud.ID
	Ipaddress  string
	Ipaddress1 string
	Ipaddress2 string
	NwMasklen  int

	input Input
}

// NewInterfaceConnectVPCRouterParam return new InterfaceConnectVPCRouterParam
func NewInterfaceConnectVPCRouterParam() *InterfaceConnectVPCRouterParam {
	return &InterfaceConnectVPCRouterParam{
		NwMasklen: 24}
}

// Initialize init InterfaceConnectVPCRouterParam
func (p *InterfaceConnectVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceConnectVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceConnectVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.WithReboot) {
		p.WithReboot = false
	}
	if utils.IsEmpty(p.Interface) {
		p.Interface = ""
	}
	if utils.IsEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.Ipaddress1) {
		p.Ipaddress1 = ""
	}
	if utils.IsEmpty(p.Ipaddress2) {
		p.Ipaddress2 = ""
	}
	if utils.IsEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}

}

func (p *InterfaceConnectVPCRouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["ipaddress2"].ValidateFunc
		errs := validator("--ipaddress-2", p.Ipaddress2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *InterfaceConnectVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *InterfaceConnectVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-connect"]
}

func (p *InterfaceConnectVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceConnectVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceConnectVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceConnectVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceConnectVPCRouterParam) SetWithReboot(v bool) {
	p.WithReboot = v
}

func (p *InterfaceConnectVPCRouterParam) GetWithReboot() bool {
	return p.WithReboot
}
func (p *InterfaceConnectVPCRouterParam) SetInterface(v string) {
	p.Interface = v
}

func (p *InterfaceConnectVPCRouterParam) GetInterface() string {
	return p.Interface
}
func (p *InterfaceConnectVPCRouterParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *InterfaceConnectVPCRouterParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *InterfaceConnectVPCRouterParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *InterfaceConnectVPCRouterParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *InterfaceConnectVPCRouterParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *InterfaceConnectVPCRouterParam) GetIpaddress1() string {
	return p.Ipaddress1
}
func (p *InterfaceConnectVPCRouterParam) SetIpaddress2(v string) {
	p.Ipaddress2 = v
}

func (p *InterfaceConnectVPCRouterParam) GetIpaddress2() string {
	return p.Ipaddress2
}
func (p *InterfaceConnectVPCRouterParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *InterfaceConnectVPCRouterParam) GetNwMasklen() int {
	return p.NwMasklen
}

// InterfaceUpdateVPCRouterParam is input parameters for the sacloud API
type InterfaceUpdateVPCRouterParam struct {
	NwMasklen  int
	WithReboot bool
	Interface  string
	SwitchId   sacloud.ID
	Ipaddress  string
	Ipaddress1 string
	Ipaddress2 string
	Alias      []string

	input Input
}

// NewInterfaceUpdateVPCRouterParam return new InterfaceUpdateVPCRouterParam
func NewInterfaceUpdateVPCRouterParam() *InterfaceUpdateVPCRouterParam {
	return &InterfaceUpdateVPCRouterParam{
		NwMasklen: 24}
}

// Initialize init InterfaceUpdateVPCRouterParam
func (p *InterfaceUpdateVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceUpdateVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceUpdateVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}
	if utils.IsEmpty(p.WithReboot) {
		p.WithReboot = false
	}
	if utils.IsEmpty(p.Interface) {
		p.Interface = ""
	}
	if utils.IsEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.Ipaddress1) {
		p.Ipaddress1 = ""
	}
	if utils.IsEmpty(p.Ipaddress2) {
		p.Ipaddress2 = ""
	}
	if utils.IsEmpty(p.Alias) {
		p.Alias = []string{""}
	}

}

func (p *InterfaceUpdateVPCRouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["ipaddress2"].ValidateFunc
		errs := validator("--ipaddress-2", p.Ipaddress2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["alias"].ValidateFunc
		errs := validator("--alias", p.Alias)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *InterfaceUpdateVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *InterfaceUpdateVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-update"]
}

func (p *InterfaceUpdateVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceUpdateVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceUpdateVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceUpdateVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceUpdateVPCRouterParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *InterfaceUpdateVPCRouterParam) GetNwMasklen() int {
	return p.NwMasklen
}
func (p *InterfaceUpdateVPCRouterParam) SetWithReboot(v bool) {
	p.WithReboot = v
}

func (p *InterfaceUpdateVPCRouterParam) GetWithReboot() bool {
	return p.WithReboot
}
func (p *InterfaceUpdateVPCRouterParam) SetInterface(v string) {
	p.Interface = v
}

func (p *InterfaceUpdateVPCRouterParam) GetInterface() string {
	return p.Interface
}
func (p *InterfaceUpdateVPCRouterParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *InterfaceUpdateVPCRouterParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *InterfaceUpdateVPCRouterParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *InterfaceUpdateVPCRouterParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *InterfaceUpdateVPCRouterParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *InterfaceUpdateVPCRouterParam) GetIpaddress1() string {
	return p.Ipaddress1
}
func (p *InterfaceUpdateVPCRouterParam) SetIpaddress2(v string) {
	p.Ipaddress2 = v
}

func (p *InterfaceUpdateVPCRouterParam) GetIpaddress2() string {
	return p.Ipaddress2
}
func (p *InterfaceUpdateVPCRouterParam) SetAlias(v []string) {
	p.Alias = v
}

func (p *InterfaceUpdateVPCRouterParam) GetAlias() []string {
	return p.Alias
}

// InterfaceDisconnectVPCRouterParam is input parameters for the sacloud API
type InterfaceDisconnectVPCRouterParam struct {
	Interface  string
	WithReboot bool

	input Input
}

// NewInterfaceDisconnectVPCRouterParam return new InterfaceDisconnectVPCRouterParam
func NewInterfaceDisconnectVPCRouterParam() *InterfaceDisconnectVPCRouterParam {
	return &InterfaceDisconnectVPCRouterParam{}
}

// Initialize init InterfaceDisconnectVPCRouterParam
func (p *InterfaceDisconnectVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceDisconnectVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceDisconnectVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Interface) {
		p.Interface = ""
	}
	if utils.IsEmpty(p.WithReboot) {
		p.WithReboot = false
	}

}

func (p *InterfaceDisconnectVPCRouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-disconnect"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *InterfaceDisconnectVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *InterfaceDisconnectVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-disconnect"]
}

func (p *InterfaceDisconnectVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceDisconnectVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceDisconnectVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceDisconnectVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceDisconnectVPCRouterParam) SetInterface(v string) {
	p.Interface = v
}

func (p *InterfaceDisconnectVPCRouterParam) GetInterface() string {
	return p.Interface
}
func (p *InterfaceDisconnectVPCRouterParam) SetWithReboot(v bool) {
	p.WithReboot = v
}

func (p *InterfaceDisconnectVPCRouterParam) GetWithReboot() bool {
	return p.WithReboot
}

// StaticNatInfoVPCRouterParam is input parameters for the sacloud API
type StaticNatInfoVPCRouterParam struct {
	input Input
}

// NewStaticNatInfoVPCRouterParam return new StaticNatInfoVPCRouterParam
func NewStaticNatInfoVPCRouterParam() *StaticNatInfoVPCRouterParam {
	return &StaticNatInfoVPCRouterParam{}
}

// Initialize init StaticNatInfoVPCRouterParam
func (p *StaticNatInfoVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticNatInfoVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticNatInfoVPCRouterParam) fillValueToSkeleton() {

}

func (p *StaticNatInfoVPCRouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *StaticNatInfoVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticNatInfoVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-nat-info"]
}

func (p *StaticNatInfoVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticNatInfoVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticNatInfoVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticNatInfoVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// StaticNatAddVPCRouterParam is input parameters for the sacloud API
type StaticNatAddVPCRouterParam struct {
	Description string
	Global      string
	Private     string

	input Input
}

// NewStaticNatAddVPCRouterParam return new StaticNatAddVPCRouterParam
func NewStaticNatAddVPCRouterParam() *StaticNatAddVPCRouterParam {
	return &StaticNatAddVPCRouterParam{}
}

// Initialize init StaticNatAddVPCRouterParam
func (p *StaticNatAddVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticNatAddVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticNatAddVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Global) {
		p.Global = ""
	}
	if utils.IsEmpty(p.Private) {
		p.Private = ""
	}

}

func (p *StaticNatAddVPCRouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-add"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--global", p.Global)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-add"].Params["global"].ValidateFunc
		errs := validator("--global", p.Global)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--private", p.Private)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-add"].Params["private"].ValidateFunc
		errs := validator("--private", p.Private)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *StaticNatAddVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticNatAddVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-nat-add"]
}

func (p *StaticNatAddVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticNatAddVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticNatAddVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticNatAddVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticNatAddVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *StaticNatAddVPCRouterParam) GetDescription() string {
	return p.Description
}
func (p *StaticNatAddVPCRouterParam) SetGlobal(v string) {
	p.Global = v
}

func (p *StaticNatAddVPCRouterParam) GetGlobal() string {
	return p.Global
}
func (p *StaticNatAddVPCRouterParam) SetPrivate(v string) {
	p.Private = v
}

func (p *StaticNatAddVPCRouterParam) GetPrivate() string {
	return p.Private
}

// StaticNatUpdateVPCRouterParam is input parameters for the sacloud API
type StaticNatUpdateVPCRouterParam struct {
	Index       int
	Global      string
	Private     string
	Description string

	input Input
}

// NewStaticNatUpdateVPCRouterParam return new StaticNatUpdateVPCRouterParam
func NewStaticNatUpdateVPCRouterParam() *StaticNatUpdateVPCRouterParam {
	return &StaticNatUpdateVPCRouterParam{}
}

// Initialize init StaticNatUpdateVPCRouterParam
func (p *StaticNatUpdateVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticNatUpdateVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticNatUpdateVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Global) {
		p.Global = ""
	}
	if utils.IsEmpty(p.Private) {
		p.Private = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}

}

func (p *StaticNatUpdateVPCRouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-update"].Params["global"].ValidateFunc
		errs := validator("--global", p.Global)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-update"].Params["private"].ValidateFunc
		errs := validator("--private", p.Private)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *StaticNatUpdateVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticNatUpdateVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-nat-update"]
}

func (p *StaticNatUpdateVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticNatUpdateVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticNatUpdateVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticNatUpdateVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticNatUpdateVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticNatUpdateVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *StaticNatUpdateVPCRouterParam) SetGlobal(v string) {
	p.Global = v
}

func (p *StaticNatUpdateVPCRouterParam) GetGlobal() string {
	return p.Global
}
func (p *StaticNatUpdateVPCRouterParam) SetPrivate(v string) {
	p.Private = v
}

func (p *StaticNatUpdateVPCRouterParam) GetPrivate() string {
	return p.Private
}
func (p *StaticNatUpdateVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *StaticNatUpdateVPCRouterParam) GetDescription() string {
	return p.Description
}

// StaticNatDeleteVPCRouterParam is input parameters for the sacloud API
type StaticNatDeleteVPCRouterParam struct {
	Index int

	input Input
}

// NewStaticNatDeleteVPCRouterParam return new StaticNatDeleteVPCRouterParam
func NewStaticNatDeleteVPCRouterParam() *StaticNatDeleteVPCRouterParam {
	return &StaticNatDeleteVPCRouterParam{}
}

// Initialize init StaticNatDeleteVPCRouterParam
func (p *StaticNatDeleteVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticNatDeleteVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticNatDeleteVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *StaticNatDeleteVPCRouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *StaticNatDeleteVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticNatDeleteVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-nat-delete"]
}

func (p *StaticNatDeleteVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticNatDeleteVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticNatDeleteVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticNatDeleteVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticNatDeleteVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticNatDeleteVPCRouterParam) GetIndex() int {
	return p.Index
}

// PortForwardingInfoVPCRouterParam is input parameters for the sacloud API
type PortForwardingInfoVPCRouterParam struct {
	input Input
}

// NewPortForwardingInfoVPCRouterParam return new PortForwardingInfoVPCRouterParam
func NewPortForwardingInfoVPCRouterParam() *PortForwardingInfoVPCRouterParam {
	return &PortForwardingInfoVPCRouterParam{}
}

// Initialize init PortForwardingInfoVPCRouterParam
func (p *PortForwardingInfoVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PortForwardingInfoVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PortForwardingInfoVPCRouterParam) fillValueToSkeleton() {

}

func (p *PortForwardingInfoVPCRouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *PortForwardingInfoVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PortForwardingInfoVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["port-forwarding-info"]
}

func (p *PortForwardingInfoVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PortForwardingInfoVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PortForwardingInfoVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PortForwardingInfoVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// PortForwardingAddVPCRouterParam is input parameters for the sacloud API
type PortForwardingAddVPCRouterParam struct {
	Protocol         string
	GlobalPort       int
	PrivateIpaddress string
	PrivatePort      int
	Description      string

	input Input
}

// NewPortForwardingAddVPCRouterParam return new PortForwardingAddVPCRouterParam
func NewPortForwardingAddVPCRouterParam() *PortForwardingAddVPCRouterParam {
	return &PortForwardingAddVPCRouterParam{}
}

// Initialize init PortForwardingAddVPCRouterParam
func (p *PortForwardingAddVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PortForwardingAddVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PortForwardingAddVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.GlobalPort) {
		p.GlobalPort = 0
	}
	if utils.IsEmpty(p.PrivateIpaddress) {
		p.PrivateIpaddress = ""
	}
	if utils.IsEmpty(p.PrivatePort) {
		p.PrivatePort = 0
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}

}

func (p *PortForwardingAddVPCRouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--global-port", p.GlobalPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["global-port"].ValidateFunc
		errs := validator("--global-port", p.GlobalPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--private-ipaddress", p.PrivateIpaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["private-ipaddress"].ValidateFunc
		errs := validator("--private-ipaddress", p.PrivateIpaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--private-port", p.PrivatePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["private-port"].ValidateFunc
		errs := validator("--private-port", p.PrivatePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PortForwardingAddVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PortForwardingAddVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["port-forwarding-add"]
}

func (p *PortForwardingAddVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PortForwardingAddVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PortForwardingAddVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PortForwardingAddVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PortForwardingAddVPCRouterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *PortForwardingAddVPCRouterParam) GetProtocol() string {
	return p.Protocol
}
func (p *PortForwardingAddVPCRouterParam) SetGlobalPort(v int) {
	p.GlobalPort = v
}

func (p *PortForwardingAddVPCRouterParam) GetGlobalPort() int {
	return p.GlobalPort
}
func (p *PortForwardingAddVPCRouterParam) SetPrivateIpaddress(v string) {
	p.PrivateIpaddress = v
}

func (p *PortForwardingAddVPCRouterParam) GetPrivateIpaddress() string {
	return p.PrivateIpaddress
}
func (p *PortForwardingAddVPCRouterParam) SetPrivatePort(v int) {
	p.PrivatePort = v
}

func (p *PortForwardingAddVPCRouterParam) GetPrivatePort() int {
	return p.PrivatePort
}
func (p *PortForwardingAddVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *PortForwardingAddVPCRouterParam) GetDescription() string {
	return p.Description
}

// PortForwardingUpdateVPCRouterParam is input parameters for the sacloud API
type PortForwardingUpdateVPCRouterParam struct {
	Index            int
	Protocol         string
	GlobalPort       int
	PrivateIpaddress string
	PrivatePort      int
	Description      string

	input Input
}

// NewPortForwardingUpdateVPCRouterParam return new PortForwardingUpdateVPCRouterParam
func NewPortForwardingUpdateVPCRouterParam() *PortForwardingUpdateVPCRouterParam {
	return &PortForwardingUpdateVPCRouterParam{}
}

// Initialize init PortForwardingUpdateVPCRouterParam
func (p *PortForwardingUpdateVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PortForwardingUpdateVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PortForwardingUpdateVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.GlobalPort) {
		p.GlobalPort = 0
	}
	if utils.IsEmpty(p.PrivateIpaddress) {
		p.PrivateIpaddress = ""
	}
	if utils.IsEmpty(p.PrivatePort) {
		p.PrivatePort = 0
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}

}

func (p *PortForwardingUpdateVPCRouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["global-port"].ValidateFunc
		errs := validator("--global-port", p.GlobalPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["private-ipaddress"].ValidateFunc
		errs := validator("--private-ipaddress", p.PrivateIpaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["private-port"].ValidateFunc
		errs := validator("--private-port", p.PrivatePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PortForwardingUpdateVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PortForwardingUpdateVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["port-forwarding-update"]
}

func (p *PortForwardingUpdateVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PortForwardingUpdateVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PortForwardingUpdateVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PortForwardingUpdateVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PortForwardingUpdateVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *PortForwardingUpdateVPCRouterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetProtocol() string {
	return p.Protocol
}
func (p *PortForwardingUpdateVPCRouterParam) SetGlobalPort(v int) {
	p.GlobalPort = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetGlobalPort() int {
	return p.GlobalPort
}
func (p *PortForwardingUpdateVPCRouterParam) SetPrivateIpaddress(v string) {
	p.PrivateIpaddress = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetPrivateIpaddress() string {
	return p.PrivateIpaddress
}
func (p *PortForwardingUpdateVPCRouterParam) SetPrivatePort(v int) {
	p.PrivatePort = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetPrivatePort() int {
	return p.PrivatePort
}
func (p *PortForwardingUpdateVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetDescription() string {
	return p.Description
}

// PortForwardingDeleteVPCRouterParam is input parameters for the sacloud API
type PortForwardingDeleteVPCRouterParam struct {
	Index int

	input Input
}

// NewPortForwardingDeleteVPCRouterParam return new PortForwardingDeleteVPCRouterParam
func NewPortForwardingDeleteVPCRouterParam() *PortForwardingDeleteVPCRouterParam {
	return &PortForwardingDeleteVPCRouterParam{}
}

// Initialize init PortForwardingDeleteVPCRouterParam
func (p *PortForwardingDeleteVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PortForwardingDeleteVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PortForwardingDeleteVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *PortForwardingDeleteVPCRouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PortForwardingDeleteVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PortForwardingDeleteVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["port-forwarding-delete"]
}

func (p *PortForwardingDeleteVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PortForwardingDeleteVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PortForwardingDeleteVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PortForwardingDeleteVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PortForwardingDeleteVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *PortForwardingDeleteVPCRouterParam) GetIndex() int {
	return p.Index
}

// FirewallInfoVPCRouterParam is input parameters for the sacloud API
type FirewallInfoVPCRouterParam struct {
	Interface int
	Direction string

	input Input
}

// NewFirewallInfoVPCRouterParam return new FirewallInfoVPCRouterParam
func NewFirewallInfoVPCRouterParam() *FirewallInfoVPCRouterParam {
	return &FirewallInfoVPCRouterParam{
		Direction: "receive"}
}

// Initialize init FirewallInfoVPCRouterParam
func (p *FirewallInfoVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *FirewallInfoVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *FirewallInfoVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Interface) {
		p.Interface = 0
	}
	if utils.IsEmpty(p.Direction) {
		p.Direction = ""
	}

}

func (p *FirewallInfoVPCRouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-info"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-info"].Params["direction"].ValidateFunc
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *FirewallInfoVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *FirewallInfoVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["firewall-info"]
}

func (p *FirewallInfoVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *FirewallInfoVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *FirewallInfoVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *FirewallInfoVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *FirewallInfoVPCRouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *FirewallInfoVPCRouterParam) GetInterface() int {
	return p.Interface
}
func (p *FirewallInfoVPCRouterParam) SetDirection(v string) {
	p.Direction = v
}

func (p *FirewallInfoVPCRouterParam) GetDirection() string {
	return p.Direction
}

// FirewallAddVPCRouterParam is input parameters for the sacloud API
type FirewallAddVPCRouterParam struct {
	Direction          string
	DestinationNetwork string
	Action             string
	EnableLogging      bool
	Description        string
	Interface          int
	Protocol           string
	SourceNetwork      string
	SourcePort         int
	DestinationPort    int

	input Input
}

// NewFirewallAddVPCRouterParam return new FirewallAddVPCRouterParam
func NewFirewallAddVPCRouterParam() *FirewallAddVPCRouterParam {
	return &FirewallAddVPCRouterParam{
		Direction: "receive", Action: "deny"}
}

// Initialize init FirewallAddVPCRouterParam
func (p *FirewallAddVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *FirewallAddVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *FirewallAddVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Direction) {
		p.Direction = ""
	}
	if utils.IsEmpty(p.DestinationNetwork) {
		p.DestinationNetwork = ""
	}
	if utils.IsEmpty(p.Action) {
		p.Action = ""
	}
	if utils.IsEmpty(p.EnableLogging) {
		p.EnableLogging = false
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Interface) {
		p.Interface = 0
	}
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.SourceNetwork) {
		p.SourceNetwork = ""
	}
	if utils.IsEmpty(p.SourcePort) {
		p.SourcePort = 0
	}
	if utils.IsEmpty(p.DestinationPort) {
		p.DestinationPort = 0
	}

}

func (p *FirewallAddVPCRouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["direction"].ValidateFunc
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["destination-network"].ValidateFunc
		errs := validator("--destination-network", p.DestinationNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["action"].ValidateFunc
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["source-network"].ValidateFunc
		errs := validator("--source-network", p.SourceNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["source-port"].ValidateFunc
		errs := validator("--source-port", p.SourcePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["destination-port"].ValidateFunc
		errs := validator("--destination-port", p.DestinationPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *FirewallAddVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *FirewallAddVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["firewall-add"]
}

func (p *FirewallAddVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *FirewallAddVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *FirewallAddVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *FirewallAddVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *FirewallAddVPCRouterParam) SetDirection(v string) {
	p.Direction = v
}

func (p *FirewallAddVPCRouterParam) GetDirection() string {
	return p.Direction
}
func (p *FirewallAddVPCRouterParam) SetDestinationNetwork(v string) {
	p.DestinationNetwork = v
}

func (p *FirewallAddVPCRouterParam) GetDestinationNetwork() string {
	return p.DestinationNetwork
}
func (p *FirewallAddVPCRouterParam) SetAction(v string) {
	p.Action = v
}

func (p *FirewallAddVPCRouterParam) GetAction() string {
	return p.Action
}
func (p *FirewallAddVPCRouterParam) SetEnableLogging(v bool) {
	p.EnableLogging = v
}

func (p *FirewallAddVPCRouterParam) GetEnableLogging() bool {
	return p.EnableLogging
}
func (p *FirewallAddVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *FirewallAddVPCRouterParam) GetDescription() string {
	return p.Description
}
func (p *FirewallAddVPCRouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *FirewallAddVPCRouterParam) GetInterface() int {
	return p.Interface
}
func (p *FirewallAddVPCRouterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *FirewallAddVPCRouterParam) GetProtocol() string {
	return p.Protocol
}
func (p *FirewallAddVPCRouterParam) SetSourceNetwork(v string) {
	p.SourceNetwork = v
}

func (p *FirewallAddVPCRouterParam) GetSourceNetwork() string {
	return p.SourceNetwork
}
func (p *FirewallAddVPCRouterParam) SetSourcePort(v int) {
	p.SourcePort = v
}

func (p *FirewallAddVPCRouterParam) GetSourcePort() int {
	return p.SourcePort
}
func (p *FirewallAddVPCRouterParam) SetDestinationPort(v int) {
	p.DestinationPort = v
}

func (p *FirewallAddVPCRouterParam) GetDestinationPort() int {
	return p.DestinationPort
}

// FirewallUpdateVPCRouterParam is input parameters for the sacloud API
type FirewallUpdateVPCRouterParam struct {
	Direction          string
	Index              int
	Protocol           string
	SourceNetwork      string
	DestinationNetwork string
	Interface          int
	SourcePort         int
	DestinationPort    int
	Action             string
	EnableLogging      bool
	Description        string

	input Input
}

// NewFirewallUpdateVPCRouterParam return new FirewallUpdateVPCRouterParam
func NewFirewallUpdateVPCRouterParam() *FirewallUpdateVPCRouterParam {
	return &FirewallUpdateVPCRouterParam{
		Direction: "receive", Action: "deny"}
}

// Initialize init FirewallUpdateVPCRouterParam
func (p *FirewallUpdateVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *FirewallUpdateVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *FirewallUpdateVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Direction) {
		p.Direction = ""
	}
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.SourceNetwork) {
		p.SourceNetwork = ""
	}
	if utils.IsEmpty(p.DestinationNetwork) {
		p.DestinationNetwork = ""
	}
	if utils.IsEmpty(p.Interface) {
		p.Interface = 0
	}
	if utils.IsEmpty(p.SourcePort) {
		p.SourcePort = 0
	}
	if utils.IsEmpty(p.DestinationPort) {
		p.DestinationPort = 0
	}
	if utils.IsEmpty(p.Action) {
		p.Action = ""
	}
	if utils.IsEmpty(p.EnableLogging) {
		p.EnableLogging = false
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}

}

func (p *FirewallUpdateVPCRouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["direction"].ValidateFunc
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["source-network"].ValidateFunc
		errs := validator("--source-network", p.SourceNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["destination-network"].ValidateFunc
		errs := validator("--destination-network", p.DestinationNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["source-port"].ValidateFunc
		errs := validator("--source-port", p.SourcePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["destination-port"].ValidateFunc
		errs := validator("--destination-port", p.DestinationPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["action"].ValidateFunc
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *FirewallUpdateVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *FirewallUpdateVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["firewall-update"]
}

func (p *FirewallUpdateVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *FirewallUpdateVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *FirewallUpdateVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *FirewallUpdateVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *FirewallUpdateVPCRouterParam) SetDirection(v string) {
	p.Direction = v
}

func (p *FirewallUpdateVPCRouterParam) GetDirection() string {
	return p.Direction
}
func (p *FirewallUpdateVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *FirewallUpdateVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *FirewallUpdateVPCRouterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *FirewallUpdateVPCRouterParam) GetProtocol() string {
	return p.Protocol
}
func (p *FirewallUpdateVPCRouterParam) SetSourceNetwork(v string) {
	p.SourceNetwork = v
}

func (p *FirewallUpdateVPCRouterParam) GetSourceNetwork() string {
	return p.SourceNetwork
}
func (p *FirewallUpdateVPCRouterParam) SetDestinationNetwork(v string) {
	p.DestinationNetwork = v
}

func (p *FirewallUpdateVPCRouterParam) GetDestinationNetwork() string {
	return p.DestinationNetwork
}
func (p *FirewallUpdateVPCRouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *FirewallUpdateVPCRouterParam) GetInterface() int {
	return p.Interface
}
func (p *FirewallUpdateVPCRouterParam) SetSourcePort(v int) {
	p.SourcePort = v
}

func (p *FirewallUpdateVPCRouterParam) GetSourcePort() int {
	return p.SourcePort
}
func (p *FirewallUpdateVPCRouterParam) SetDestinationPort(v int) {
	p.DestinationPort = v
}

func (p *FirewallUpdateVPCRouterParam) GetDestinationPort() int {
	return p.DestinationPort
}
func (p *FirewallUpdateVPCRouterParam) SetAction(v string) {
	p.Action = v
}

func (p *FirewallUpdateVPCRouterParam) GetAction() string {
	return p.Action
}
func (p *FirewallUpdateVPCRouterParam) SetEnableLogging(v bool) {
	p.EnableLogging = v
}

func (p *FirewallUpdateVPCRouterParam) GetEnableLogging() bool {
	return p.EnableLogging
}
func (p *FirewallUpdateVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *FirewallUpdateVPCRouterParam) GetDescription() string {
	return p.Description
}

// FirewallDeleteVPCRouterParam is input parameters for the sacloud API
type FirewallDeleteVPCRouterParam struct {
	Interface int
	Direction string
	Index     int

	input Input
}

// NewFirewallDeleteVPCRouterParam return new FirewallDeleteVPCRouterParam
func NewFirewallDeleteVPCRouterParam() *FirewallDeleteVPCRouterParam {
	return &FirewallDeleteVPCRouterParam{
		Direction: "receive"}
}

// Initialize init FirewallDeleteVPCRouterParam
func (p *FirewallDeleteVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *FirewallDeleteVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *FirewallDeleteVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Interface) {
		p.Interface = 0
	}
	if utils.IsEmpty(p.Direction) {
		p.Direction = ""
	}
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *FirewallDeleteVPCRouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-delete"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-delete"].Params["direction"].ValidateFunc
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *FirewallDeleteVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *FirewallDeleteVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["firewall-delete"]
}

func (p *FirewallDeleteVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *FirewallDeleteVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *FirewallDeleteVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *FirewallDeleteVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *FirewallDeleteVPCRouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *FirewallDeleteVPCRouterParam) GetInterface() int {
	return p.Interface
}
func (p *FirewallDeleteVPCRouterParam) SetDirection(v string) {
	p.Direction = v
}

func (p *FirewallDeleteVPCRouterParam) GetDirection() string {
	return p.Direction
}
func (p *FirewallDeleteVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *FirewallDeleteVPCRouterParam) GetIndex() int {
	return p.Index
}

// DhcpServerInfoVPCRouterParam is input parameters for the sacloud API
type DhcpServerInfoVPCRouterParam struct {
	input Input
}

// NewDhcpServerInfoVPCRouterParam return new DhcpServerInfoVPCRouterParam
func NewDhcpServerInfoVPCRouterParam() *DhcpServerInfoVPCRouterParam {
	return &DhcpServerInfoVPCRouterParam{}
}

// Initialize init DhcpServerInfoVPCRouterParam
func (p *DhcpServerInfoVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DhcpServerInfoVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DhcpServerInfoVPCRouterParam) fillValueToSkeleton() {

}

func (p *DhcpServerInfoVPCRouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DhcpServerInfoVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpServerInfoVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["dhcp-server-info"]
}

func (p *DhcpServerInfoVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DhcpServerInfoVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DhcpServerInfoVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DhcpServerInfoVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// DhcpServerAddVPCRouterParam is input parameters for the sacloud API
type DhcpServerAddVPCRouterParam struct {
	Interface  int
	RangeStart string
	RangeStop  string
	DNSServers []string

	input Input
}

// NewDhcpServerAddVPCRouterParam return new DhcpServerAddVPCRouterParam
func NewDhcpServerAddVPCRouterParam() *DhcpServerAddVPCRouterParam {
	return &DhcpServerAddVPCRouterParam{}
}

// Initialize init DhcpServerAddVPCRouterParam
func (p *DhcpServerAddVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DhcpServerAddVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DhcpServerAddVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Interface) {
		p.Interface = 0
	}
	if utils.IsEmpty(p.RangeStart) {
		p.RangeStart = ""
	}
	if utils.IsEmpty(p.RangeStop) {
		p.RangeStop = ""
	}
	if utils.IsEmpty(p.DNSServers) {
		p.DNSServers = []string{""}
	}

}

func (p *DhcpServerAddVPCRouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["range-start"].ValidateFunc
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["range-stop"].ValidateFunc
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["dns-servers"].ValidateFunc
		errs := validator("--dns-servers", p.DNSServers)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DhcpServerAddVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpServerAddVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["dhcp-server-add"]
}

func (p *DhcpServerAddVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DhcpServerAddVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DhcpServerAddVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DhcpServerAddVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DhcpServerAddVPCRouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *DhcpServerAddVPCRouterParam) GetInterface() int {
	return p.Interface
}
func (p *DhcpServerAddVPCRouterParam) SetRangeStart(v string) {
	p.RangeStart = v
}

func (p *DhcpServerAddVPCRouterParam) GetRangeStart() string {
	return p.RangeStart
}
func (p *DhcpServerAddVPCRouterParam) SetRangeStop(v string) {
	p.RangeStop = v
}

func (p *DhcpServerAddVPCRouterParam) GetRangeStop() string {
	return p.RangeStop
}
func (p *DhcpServerAddVPCRouterParam) SetDNSServers(v []string) {
	p.DNSServers = v
}

func (p *DhcpServerAddVPCRouterParam) GetDNSServers() []string {
	return p.DNSServers
}

// DhcpServerUpdateVPCRouterParam is input parameters for the sacloud API
type DhcpServerUpdateVPCRouterParam struct {
	RangeStart string
	RangeStop  string
	DNSServers []string
	Interface  int

	input Input
}

// NewDhcpServerUpdateVPCRouterParam return new DhcpServerUpdateVPCRouterParam
func NewDhcpServerUpdateVPCRouterParam() *DhcpServerUpdateVPCRouterParam {
	return &DhcpServerUpdateVPCRouterParam{}
}

// Initialize init DhcpServerUpdateVPCRouterParam
func (p *DhcpServerUpdateVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DhcpServerUpdateVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DhcpServerUpdateVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.RangeStart) {
		p.RangeStart = ""
	}
	if utils.IsEmpty(p.RangeStop) {
		p.RangeStop = ""
	}
	if utils.IsEmpty(p.DNSServers) {
		p.DNSServers = []string{""}
	}
	if utils.IsEmpty(p.Interface) {
		p.Interface = 0
	}

}

func (p *DhcpServerUpdateVPCRouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["range-start"].ValidateFunc
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["range-stop"].ValidateFunc
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["dns-servers"].ValidateFunc
		errs := validator("--dns-servers", p.DNSServers)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DhcpServerUpdateVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpServerUpdateVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["dhcp-server-update"]
}

func (p *DhcpServerUpdateVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DhcpServerUpdateVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DhcpServerUpdateVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DhcpServerUpdateVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DhcpServerUpdateVPCRouterParam) SetRangeStart(v string) {
	p.RangeStart = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetRangeStart() string {
	return p.RangeStart
}
func (p *DhcpServerUpdateVPCRouterParam) SetRangeStop(v string) {
	p.RangeStop = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetRangeStop() string {
	return p.RangeStop
}
func (p *DhcpServerUpdateVPCRouterParam) SetDNSServers(v []string) {
	p.DNSServers = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetDNSServers() []string {
	return p.DNSServers
}
func (p *DhcpServerUpdateVPCRouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetInterface() int {
	return p.Interface
}

// DhcpServerDeleteVPCRouterParam is input parameters for the sacloud API
type DhcpServerDeleteVPCRouterParam struct {
	Interface int

	input Input
}

// NewDhcpServerDeleteVPCRouterParam return new DhcpServerDeleteVPCRouterParam
func NewDhcpServerDeleteVPCRouterParam() *DhcpServerDeleteVPCRouterParam {
	return &DhcpServerDeleteVPCRouterParam{}
}

// Initialize init DhcpServerDeleteVPCRouterParam
func (p *DhcpServerDeleteVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DhcpServerDeleteVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DhcpServerDeleteVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Interface) {
		p.Interface = 0
	}

}

func (p *DhcpServerDeleteVPCRouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-delete"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DhcpServerDeleteVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpServerDeleteVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["dhcp-server-delete"]
}

func (p *DhcpServerDeleteVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DhcpServerDeleteVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DhcpServerDeleteVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DhcpServerDeleteVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DhcpServerDeleteVPCRouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *DhcpServerDeleteVPCRouterParam) GetInterface() int {
	return p.Interface
}

// DhcpStaticMappingInfoVPCRouterParam is input parameters for the sacloud API
type DhcpStaticMappingInfoVPCRouterParam struct {
	input Input
}

// NewDhcpStaticMappingInfoVPCRouterParam return new DhcpStaticMappingInfoVPCRouterParam
func NewDhcpStaticMappingInfoVPCRouterParam() *DhcpStaticMappingInfoVPCRouterParam {
	return &DhcpStaticMappingInfoVPCRouterParam{}
}

// Initialize init DhcpStaticMappingInfoVPCRouterParam
func (p *DhcpStaticMappingInfoVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DhcpStaticMappingInfoVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DhcpStaticMappingInfoVPCRouterParam) fillValueToSkeleton() {

}

func (p *DhcpStaticMappingInfoVPCRouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DhcpStaticMappingInfoVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpStaticMappingInfoVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["dhcp-static-mapping-info"]
}

func (p *DhcpStaticMappingInfoVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DhcpStaticMappingInfoVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DhcpStaticMappingInfoVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DhcpStaticMappingInfoVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// DhcpStaticMappingAddVPCRouterParam is input parameters for the sacloud API
type DhcpStaticMappingAddVPCRouterParam struct {
	Macaddress string
	Ipaddress  string

	input Input
}

// NewDhcpStaticMappingAddVPCRouterParam return new DhcpStaticMappingAddVPCRouterParam
func NewDhcpStaticMappingAddVPCRouterParam() *DhcpStaticMappingAddVPCRouterParam {
	return &DhcpStaticMappingAddVPCRouterParam{}
}

// Initialize init DhcpStaticMappingAddVPCRouterParam
func (p *DhcpStaticMappingAddVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DhcpStaticMappingAddVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DhcpStaticMappingAddVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Macaddress) {
		p.Macaddress = ""
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}

}

func (p *DhcpStaticMappingAddVPCRouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--macaddress", p.Macaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-add"].Params["macaddress"].ValidateFunc
		errs := validator("--macaddress", p.Macaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-add"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DhcpStaticMappingAddVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpStaticMappingAddVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["dhcp-static-mapping-add"]
}

func (p *DhcpStaticMappingAddVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DhcpStaticMappingAddVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DhcpStaticMappingAddVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DhcpStaticMappingAddVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DhcpStaticMappingAddVPCRouterParam) SetMacaddress(v string) {
	p.Macaddress = v
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetMacaddress() string {
	return p.Macaddress
}
func (p *DhcpStaticMappingAddVPCRouterParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetIpaddress() string {
	return p.Ipaddress
}

// DhcpStaticMappingUpdateVPCRouterParam is input parameters for the sacloud API
type DhcpStaticMappingUpdateVPCRouterParam struct {
	Index      int
	Macaddress string
	Ipaddress  string

	input Input
}

// NewDhcpStaticMappingUpdateVPCRouterParam return new DhcpStaticMappingUpdateVPCRouterParam
func NewDhcpStaticMappingUpdateVPCRouterParam() *DhcpStaticMappingUpdateVPCRouterParam {
	return &DhcpStaticMappingUpdateVPCRouterParam{}
}

// Initialize init DhcpStaticMappingUpdateVPCRouterParam
func (p *DhcpStaticMappingUpdateVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DhcpStaticMappingUpdateVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Macaddress) {
		p.Macaddress = ""
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}

}

func (p *DhcpStaticMappingUpdateVPCRouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-update"].Params["macaddress"].ValidateFunc
		errs := validator("--macaddress", p.Macaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["dhcp-static-mapping-update"]
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *DhcpStaticMappingUpdateVPCRouterParam) SetMacaddress(v string) {
	p.Macaddress = v
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetMacaddress() string {
	return p.Macaddress
}
func (p *DhcpStaticMappingUpdateVPCRouterParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetIpaddress() string {
	return p.Ipaddress
}

// DhcpStaticMappingDeleteVPCRouterParam is input parameters for the sacloud API
type DhcpStaticMappingDeleteVPCRouterParam struct {
	Index int

	input Input
}

// NewDhcpStaticMappingDeleteVPCRouterParam return new DhcpStaticMappingDeleteVPCRouterParam
func NewDhcpStaticMappingDeleteVPCRouterParam() *DhcpStaticMappingDeleteVPCRouterParam {
	return &DhcpStaticMappingDeleteVPCRouterParam{}
}

// Initialize init DhcpStaticMappingDeleteVPCRouterParam
func (p *DhcpStaticMappingDeleteVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DhcpStaticMappingDeleteVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *DhcpStaticMappingDeleteVPCRouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["dhcp-static-mapping-delete"]
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetIndex() int {
	return p.Index
}

// PptpServerInfoVPCRouterParam is input parameters for the sacloud API
type PptpServerInfoVPCRouterParam struct {
	input Input
}

// NewPptpServerInfoVPCRouterParam return new PptpServerInfoVPCRouterParam
func NewPptpServerInfoVPCRouterParam() *PptpServerInfoVPCRouterParam {
	return &PptpServerInfoVPCRouterParam{}
}

// Initialize init PptpServerInfoVPCRouterParam
func (p *PptpServerInfoVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PptpServerInfoVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PptpServerInfoVPCRouterParam) fillValueToSkeleton() {

}

func (p *PptpServerInfoVPCRouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *PptpServerInfoVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PptpServerInfoVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["pptp-server-info"]
}

func (p *PptpServerInfoVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PptpServerInfoVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PptpServerInfoVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PptpServerInfoVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// PptpServerUpdateVPCRouterParam is input parameters for the sacloud API
type PptpServerUpdateVPCRouterParam struct {
	Disabled   bool
	RangeStart string
	RangeStop  string

	input Input
}

// NewPptpServerUpdateVPCRouterParam return new PptpServerUpdateVPCRouterParam
func NewPptpServerUpdateVPCRouterParam() *PptpServerUpdateVPCRouterParam {
	return &PptpServerUpdateVPCRouterParam{}
}

// Initialize init PptpServerUpdateVPCRouterParam
func (p *PptpServerUpdateVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PptpServerUpdateVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PptpServerUpdateVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.RangeStart) {
		p.RangeStart = ""
	}
	if utils.IsEmpty(p.RangeStop) {
		p.RangeStop = ""
	}

}

func (p *PptpServerUpdateVPCRouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["pptp-server-update"].Params["range-start"].ValidateFunc
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["pptp-server-update"].Params["range-stop"].ValidateFunc
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PptpServerUpdateVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PptpServerUpdateVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["pptp-server-update"]
}

func (p *PptpServerUpdateVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PptpServerUpdateVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PptpServerUpdateVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PptpServerUpdateVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PptpServerUpdateVPCRouterParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *PptpServerUpdateVPCRouterParam) GetDisabled() bool {
	return p.Disabled
}
func (p *PptpServerUpdateVPCRouterParam) SetRangeStart(v string) {
	p.RangeStart = v
}

func (p *PptpServerUpdateVPCRouterParam) GetRangeStart() string {
	return p.RangeStart
}
func (p *PptpServerUpdateVPCRouterParam) SetRangeStop(v string) {
	p.RangeStop = v
}

func (p *PptpServerUpdateVPCRouterParam) GetRangeStop() string {
	return p.RangeStop
}

// L2TPServerInfoVPCRouterParam is input parameters for the sacloud API
type L2TPServerInfoVPCRouterParam struct {
	input Input
}

// NewL2TPServerInfoVPCRouterParam return new L2TPServerInfoVPCRouterParam
func NewL2TPServerInfoVPCRouterParam() *L2TPServerInfoVPCRouterParam {
	return &L2TPServerInfoVPCRouterParam{}
}

// Initialize init L2TPServerInfoVPCRouterParam
func (p *L2TPServerInfoVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *L2TPServerInfoVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *L2TPServerInfoVPCRouterParam) fillValueToSkeleton() {

}

func (p *L2TPServerInfoVPCRouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *L2TPServerInfoVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *L2TPServerInfoVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["l2tp-server-info"]
}

func (p *L2TPServerInfoVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *L2TPServerInfoVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *L2TPServerInfoVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *L2TPServerInfoVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// L2TPServerUpdateVPCRouterParam is input parameters for the sacloud API
type L2TPServerUpdateVPCRouterParam struct {
	PreSharedSecret string
	Disabled        bool
	RangeStart      string
	RangeStop       string

	input Input
}

// NewL2TPServerUpdateVPCRouterParam return new L2TPServerUpdateVPCRouterParam
func NewL2TPServerUpdateVPCRouterParam() *L2TPServerUpdateVPCRouterParam {
	return &L2TPServerUpdateVPCRouterParam{}
}

// Initialize init L2TPServerUpdateVPCRouterParam
func (p *L2TPServerUpdateVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *L2TPServerUpdateVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *L2TPServerUpdateVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.PreSharedSecret) {
		p.PreSharedSecret = ""
	}
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.RangeStart) {
		p.RangeStart = ""
	}
	if utils.IsEmpty(p.RangeStop) {
		p.RangeStop = ""
	}

}

func (p *L2TPServerUpdateVPCRouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["l2tp-server-update"].Params["pre-shared-secret"].ValidateFunc
		errs := validator("--pre-shared-secret", p.PreSharedSecret)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["l2tp-server-update"].Params["range-start"].ValidateFunc
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["l2tp-server-update"].Params["range-stop"].ValidateFunc
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *L2TPServerUpdateVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *L2TPServerUpdateVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["l2tp-server-update"]
}

func (p *L2TPServerUpdateVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *L2TPServerUpdateVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *L2TPServerUpdateVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *L2TPServerUpdateVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *L2TPServerUpdateVPCRouterParam) SetPreSharedSecret(v string) {
	p.PreSharedSecret = v
}

func (p *L2TPServerUpdateVPCRouterParam) GetPreSharedSecret() string {
	return p.PreSharedSecret
}
func (p *L2TPServerUpdateVPCRouterParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *L2TPServerUpdateVPCRouterParam) GetDisabled() bool {
	return p.Disabled
}
func (p *L2TPServerUpdateVPCRouterParam) SetRangeStart(v string) {
	p.RangeStart = v
}

func (p *L2TPServerUpdateVPCRouterParam) GetRangeStart() string {
	return p.RangeStart
}
func (p *L2TPServerUpdateVPCRouterParam) SetRangeStop(v string) {
	p.RangeStop = v
}

func (p *L2TPServerUpdateVPCRouterParam) GetRangeStop() string {
	return p.RangeStop
}

// UserInfoVPCRouterParam is input parameters for the sacloud API
type UserInfoVPCRouterParam struct {
	input Input
}

// NewUserInfoVPCRouterParam return new UserInfoVPCRouterParam
func NewUserInfoVPCRouterParam() *UserInfoVPCRouterParam {
	return &UserInfoVPCRouterParam{}
}

// Initialize init UserInfoVPCRouterParam
func (p *UserInfoVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UserInfoVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UserInfoVPCRouterParam) fillValueToSkeleton() {

}

func (p *UserInfoVPCRouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *UserInfoVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UserInfoVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["user-info"]
}

func (p *UserInfoVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UserInfoVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UserInfoVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UserInfoVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UserAddVPCRouterParam is input parameters for the sacloud API
type UserAddVPCRouterParam struct {
	Username string
	Password string

	input Input
}

// NewUserAddVPCRouterParam return new UserAddVPCRouterParam
func NewUserAddVPCRouterParam() *UserAddVPCRouterParam {
	return &UserAddVPCRouterParam{}
}

// Initialize init UserAddVPCRouterParam
func (p *UserAddVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UserAddVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UserAddVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Username) {
		p.Username = ""
	}
	if utils.IsEmpty(p.Password) {
		p.Password = ""
	}

}

func (p *UserAddVPCRouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--username", p.Username)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["user-add"].Params["username"].ValidateFunc
		errs := validator("--username", p.Username)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["user-add"].Params["password"].ValidateFunc
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UserAddVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UserAddVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["user-add"]
}

func (p *UserAddVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UserAddVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UserAddVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UserAddVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UserAddVPCRouterParam) SetUsername(v string) {
	p.Username = v
}

func (p *UserAddVPCRouterParam) GetUsername() string {
	return p.Username
}
func (p *UserAddVPCRouterParam) SetPassword(v string) {
	p.Password = v
}

func (p *UserAddVPCRouterParam) GetPassword() string {
	return p.Password
}

// UserUpdateVPCRouterParam is input parameters for the sacloud API
type UserUpdateVPCRouterParam struct {
	Index    int
	Username string
	Password string

	input Input
}

// NewUserUpdateVPCRouterParam return new UserUpdateVPCRouterParam
func NewUserUpdateVPCRouterParam() *UserUpdateVPCRouterParam {
	return &UserUpdateVPCRouterParam{}
}

// Initialize init UserUpdateVPCRouterParam
func (p *UserUpdateVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UserUpdateVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UserUpdateVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Username) {
		p.Username = ""
	}
	if utils.IsEmpty(p.Password) {
		p.Password = ""
	}

}

func (p *UserUpdateVPCRouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["user-update"].Params["username"].ValidateFunc
		errs := validator("--username", p.Username)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["user-update"].Params["password"].ValidateFunc
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UserUpdateVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UserUpdateVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["user-update"]
}

func (p *UserUpdateVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UserUpdateVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UserUpdateVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UserUpdateVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UserUpdateVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *UserUpdateVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *UserUpdateVPCRouterParam) SetUsername(v string) {
	p.Username = v
}

func (p *UserUpdateVPCRouterParam) GetUsername() string {
	return p.Username
}
func (p *UserUpdateVPCRouterParam) SetPassword(v string) {
	p.Password = v
}

func (p *UserUpdateVPCRouterParam) GetPassword() string {
	return p.Password
}

// UserDeleteVPCRouterParam is input parameters for the sacloud API
type UserDeleteVPCRouterParam struct {
	Index int

	input Input
}

// NewUserDeleteVPCRouterParam return new UserDeleteVPCRouterParam
func NewUserDeleteVPCRouterParam() *UserDeleteVPCRouterParam {
	return &UserDeleteVPCRouterParam{}
}

// Initialize init UserDeleteVPCRouterParam
func (p *UserDeleteVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UserDeleteVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UserDeleteVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *UserDeleteVPCRouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UserDeleteVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UserDeleteVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["user-delete"]
}

func (p *UserDeleteVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UserDeleteVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UserDeleteVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UserDeleteVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UserDeleteVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *UserDeleteVPCRouterParam) GetIndex() int {
	return p.Index
}

// SiteToSiteVPNInfoVPCRouterParam is input parameters for the sacloud API
type SiteToSiteVPNInfoVPCRouterParam struct {
	input Input
}

// NewSiteToSiteVPNInfoVPCRouterParam return new SiteToSiteVPNInfoVPCRouterParam
func NewSiteToSiteVPNInfoVPCRouterParam() *SiteToSiteVPNInfoVPCRouterParam {
	return &SiteToSiteVPNInfoVPCRouterParam{}
}

// Initialize init SiteToSiteVPNInfoVPCRouterParam
func (p *SiteToSiteVPNInfoVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SiteToSiteVPNInfoVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SiteToSiteVPNInfoVPCRouterParam) fillValueToSkeleton() {

}

func (p *SiteToSiteVPNInfoVPCRouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *SiteToSiteVPNInfoVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVPNInfoVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["site-to-site-vpn-info"]
}

func (p *SiteToSiteVPNInfoVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SiteToSiteVPNInfoVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SiteToSiteVPNInfoVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SiteToSiteVPNInfoVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// SiteToSiteVPNAddVPCRouterParam is input parameters for the sacloud API
type SiteToSiteVPNAddVPCRouterParam struct {
	Routes          []string
	LocalPrefix     []string
	Peer            string
	RemoteId        string
	PreSharedSecret string

	input Input
}

// NewSiteToSiteVPNAddVPCRouterParam return new SiteToSiteVPNAddVPCRouterParam
func NewSiteToSiteVPNAddVPCRouterParam() *SiteToSiteVPNAddVPCRouterParam {
	return &SiteToSiteVPNAddVPCRouterParam{}
}

// Initialize init SiteToSiteVPNAddVPCRouterParam
func (p *SiteToSiteVPNAddVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SiteToSiteVPNAddVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SiteToSiteVPNAddVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Routes) {
		p.Routes = []string{""}
	}
	if utils.IsEmpty(p.LocalPrefix) {
		p.LocalPrefix = []string{""}
	}
	if utils.IsEmpty(p.Peer) {
		p.Peer = ""
	}
	if utils.IsEmpty(p.RemoteId) {
		p.RemoteId = ""
	}
	if utils.IsEmpty(p.PreSharedSecret) {
		p.PreSharedSecret = ""
	}

}

func (p *SiteToSiteVPNAddVPCRouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--routes", p.Routes)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["routes"].ValidateFunc
		errs := validator("--routes", p.Routes)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--local-prefix", p.LocalPrefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["local-prefix"].ValidateFunc
		errs := validator("--local-prefix", p.LocalPrefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--peer", p.Peer)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["peer"].ValidateFunc
		errs := validator("--peer", p.Peer)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--remote-id", p.RemoteId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--pre-shared-secret", p.PreSharedSecret)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["pre-shared-secret"].ValidateFunc
		errs := validator("--pre-shared-secret", p.PreSharedSecret)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *SiteToSiteVPNAddVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVPNAddVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["site-to-site-vpn-add"]
}

func (p *SiteToSiteVPNAddVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SiteToSiteVPNAddVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SiteToSiteVPNAddVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SiteToSiteVPNAddVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SiteToSiteVPNAddVPCRouterParam) SetRoutes(v []string) {
	p.Routes = v
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetRoutes() []string {
	return p.Routes
}
func (p *SiteToSiteVPNAddVPCRouterParam) SetLocalPrefix(v []string) {
	p.LocalPrefix = v
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetLocalPrefix() []string {
	return p.LocalPrefix
}
func (p *SiteToSiteVPNAddVPCRouterParam) SetPeer(v string) {
	p.Peer = v
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetPeer() string {
	return p.Peer
}
func (p *SiteToSiteVPNAddVPCRouterParam) SetRemoteId(v string) {
	p.RemoteId = v
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetRemoteId() string {
	return p.RemoteId
}
func (p *SiteToSiteVPNAddVPCRouterParam) SetPreSharedSecret(v string) {
	p.PreSharedSecret = v
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetPreSharedSecret() string {
	return p.PreSharedSecret
}

// SiteToSiteVPNUpdateVPCRouterParam is input parameters for the sacloud API
type SiteToSiteVPNUpdateVPCRouterParam struct {
	Routes          []string
	LocalPrefix     []string
	Index           int
	Peer            string
	RemoteId        string
	PreSharedSecret string

	input Input
}

// NewSiteToSiteVPNUpdateVPCRouterParam return new SiteToSiteVPNUpdateVPCRouterParam
func NewSiteToSiteVPNUpdateVPCRouterParam() *SiteToSiteVPNUpdateVPCRouterParam {
	return &SiteToSiteVPNUpdateVPCRouterParam{}
}

// Initialize init SiteToSiteVPNUpdateVPCRouterParam
func (p *SiteToSiteVPNUpdateVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SiteToSiteVPNUpdateVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Routes) {
		p.Routes = []string{""}
	}
	if utils.IsEmpty(p.LocalPrefix) {
		p.LocalPrefix = []string{""}
	}
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Peer) {
		p.Peer = ""
	}
	if utils.IsEmpty(p.RemoteId) {
		p.RemoteId = ""
	}
	if utils.IsEmpty(p.PreSharedSecret) {
		p.PreSharedSecret = ""
	}

}

func (p *SiteToSiteVPNUpdateVPCRouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["routes"].ValidateFunc
		errs := validator("--routes", p.Routes)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["local-prefix"].ValidateFunc
		errs := validator("--local-prefix", p.LocalPrefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["peer"].ValidateFunc
		errs := validator("--peer", p.Peer)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["pre-shared-secret"].ValidateFunc
		errs := validator("--pre-shared-secret", p.PreSharedSecret)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["site-to-site-vpn-update"]
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) SetRoutes(v []string) {
	p.Routes = v
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetRoutes() []string {
	return p.Routes
}
func (p *SiteToSiteVPNUpdateVPCRouterParam) SetLocalPrefix(v []string) {
	p.LocalPrefix = v
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetLocalPrefix() []string {
	return p.LocalPrefix
}
func (p *SiteToSiteVPNUpdateVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *SiteToSiteVPNUpdateVPCRouterParam) SetPeer(v string) {
	p.Peer = v
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetPeer() string {
	return p.Peer
}
func (p *SiteToSiteVPNUpdateVPCRouterParam) SetRemoteId(v string) {
	p.RemoteId = v
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetRemoteId() string {
	return p.RemoteId
}
func (p *SiteToSiteVPNUpdateVPCRouterParam) SetPreSharedSecret(v string) {
	p.PreSharedSecret = v
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetPreSharedSecret() string {
	return p.PreSharedSecret
}

// SiteToSiteVPNDeleteVPCRouterParam is input parameters for the sacloud API
type SiteToSiteVPNDeleteVPCRouterParam struct {
	Index int

	input Input
}

// NewSiteToSiteVPNDeleteVPCRouterParam return new SiteToSiteVPNDeleteVPCRouterParam
func NewSiteToSiteVPNDeleteVPCRouterParam() *SiteToSiteVPNDeleteVPCRouterParam {
	return &SiteToSiteVPNDeleteVPCRouterParam{}
}

// Initialize init SiteToSiteVPNDeleteVPCRouterParam
func (p *SiteToSiteVPNDeleteVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SiteToSiteVPNDeleteVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *SiteToSiteVPNDeleteVPCRouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["site-to-site-vpn-delete"]
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) GetIndex() int {
	return p.Index
}

// SiteToSiteVPNPeersVPCRouterParam is input parameters for the sacloud API
type SiteToSiteVPNPeersVPCRouterParam struct {
	input Input
}

// NewSiteToSiteVPNPeersVPCRouterParam return new SiteToSiteVPNPeersVPCRouterParam
func NewSiteToSiteVPNPeersVPCRouterParam() *SiteToSiteVPNPeersVPCRouterParam {
	return &SiteToSiteVPNPeersVPCRouterParam{}
}

// Initialize init SiteToSiteVPNPeersVPCRouterParam
func (p *SiteToSiteVPNPeersVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SiteToSiteVPNPeersVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SiteToSiteVPNPeersVPCRouterParam) fillValueToSkeleton() {

}

func (p *SiteToSiteVPNPeersVPCRouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *SiteToSiteVPNPeersVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVPNPeersVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["site-to-site-vpn-peers"]
}

func (p *SiteToSiteVPNPeersVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SiteToSiteVPNPeersVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SiteToSiteVPNPeersVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SiteToSiteVPNPeersVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// StaticRouteInfoVPCRouterParam is input parameters for the sacloud API
type StaticRouteInfoVPCRouterParam struct {
	input Input
}

// NewStaticRouteInfoVPCRouterParam return new StaticRouteInfoVPCRouterParam
func NewStaticRouteInfoVPCRouterParam() *StaticRouteInfoVPCRouterParam {
	return &StaticRouteInfoVPCRouterParam{}
}

// Initialize init StaticRouteInfoVPCRouterParam
func (p *StaticRouteInfoVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticRouteInfoVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticRouteInfoVPCRouterParam) fillValueToSkeleton() {

}

func (p *StaticRouteInfoVPCRouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *StaticRouteInfoVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticRouteInfoVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-info"]
}

func (p *StaticRouteInfoVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteInfoVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteInfoVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteInfoVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// StaticRouteAddVPCRouterParam is input parameters for the sacloud API
type StaticRouteAddVPCRouterParam struct {
	Prefix  string
	NextHop string

	input Input
}

// NewStaticRouteAddVPCRouterParam return new StaticRouteAddVPCRouterParam
func NewStaticRouteAddVPCRouterParam() *StaticRouteAddVPCRouterParam {
	return &StaticRouteAddVPCRouterParam{}
}

// Initialize init StaticRouteAddVPCRouterParam
func (p *StaticRouteAddVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticRouteAddVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticRouteAddVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Prefix) {
		p.Prefix = ""
	}
	if utils.IsEmpty(p.NextHop) {
		p.NextHop = ""
	}

}

func (p *StaticRouteAddVPCRouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-route-add"].Params["prefix"].ValidateFunc
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-route-add"].Params["next-hop"].ValidateFunc
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *StaticRouteAddVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticRouteAddVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-add"]
}

func (p *StaticRouteAddVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteAddVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteAddVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteAddVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticRouteAddVPCRouterParam) SetPrefix(v string) {
	p.Prefix = v
}

func (p *StaticRouteAddVPCRouterParam) GetPrefix() string {
	return p.Prefix
}
func (p *StaticRouteAddVPCRouterParam) SetNextHop(v string) {
	p.NextHop = v
}

func (p *StaticRouteAddVPCRouterParam) GetNextHop() string {
	return p.NextHop
}

// StaticRouteUpdateVPCRouterParam is input parameters for the sacloud API
type StaticRouteUpdateVPCRouterParam struct {
	NextHop string
	Index   int
	Prefix  string

	input Input
}

// NewStaticRouteUpdateVPCRouterParam return new StaticRouteUpdateVPCRouterParam
func NewStaticRouteUpdateVPCRouterParam() *StaticRouteUpdateVPCRouterParam {
	return &StaticRouteUpdateVPCRouterParam{}
}

// Initialize init StaticRouteUpdateVPCRouterParam
func (p *StaticRouteUpdateVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticRouteUpdateVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticRouteUpdateVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.NextHop) {
		p.NextHop = ""
	}
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Prefix) {
		p.Prefix = ""
	}

}

func (p *StaticRouteUpdateVPCRouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["static-route-update"].Params["next-hop"].ValidateFunc
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["static-route-update"].Params["prefix"].ValidateFunc
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *StaticRouteUpdateVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticRouteUpdateVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-update"]
}

func (p *StaticRouteUpdateVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteUpdateVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteUpdateVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteUpdateVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticRouteUpdateVPCRouterParam) SetNextHop(v string) {
	p.NextHop = v
}

func (p *StaticRouteUpdateVPCRouterParam) GetNextHop() string {
	return p.NextHop
}
func (p *StaticRouteUpdateVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticRouteUpdateVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *StaticRouteUpdateVPCRouterParam) SetPrefix(v string) {
	p.Prefix = v
}

func (p *StaticRouteUpdateVPCRouterParam) GetPrefix() string {
	return p.Prefix
}

// StaticRouteDeleteVPCRouterParam is input parameters for the sacloud API
type StaticRouteDeleteVPCRouterParam struct {
	Index int

	input Input
}

// NewStaticRouteDeleteVPCRouterParam return new StaticRouteDeleteVPCRouterParam
func NewStaticRouteDeleteVPCRouterParam() *StaticRouteDeleteVPCRouterParam {
	return &StaticRouteDeleteVPCRouterParam{}
}

// Initialize init StaticRouteDeleteVPCRouterParam
func (p *StaticRouteDeleteVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticRouteDeleteVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticRouteDeleteVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *StaticRouteDeleteVPCRouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *StaticRouteDeleteVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticRouteDeleteVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-delete"]
}

func (p *StaticRouteDeleteVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteDeleteVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteDeleteVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteDeleteVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticRouteDeleteVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticRouteDeleteVPCRouterParam) GetIndex() int {
	return p.Index
}

// MonitorVPCRouterParam is input parameters for the sacloud API
type MonitorVPCRouterParam struct {
	Interface string
	Start     string
	End       string
	KeyFormat string

	input Input
}

// NewMonitorVPCRouterParam return new MonitorVPCRouterParam
func NewMonitorVPCRouterParam() *MonitorVPCRouterParam {
	return &MonitorVPCRouterParam{
		Interface: "0", KeyFormat: "sakuracloud.vpcrouter.{{.ID}}.nic.{{.Index}}"}
}

// Initialize init MonitorVPCRouterParam
func (p *MonitorVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Interface) {
		p.Interface = ""
	}
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}

}

func (p *MonitorVPCRouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["monitor"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["monitor"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["monitor"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *MonitorVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor"]
}

func (p *MonitorVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorVPCRouterParam) SetInterface(v string) {
	p.Interface = v
}

func (p *MonitorVPCRouterParam) GetInterface() string {
	return p.Interface
}
func (p *MonitorVPCRouterParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorVPCRouterParam) GetStart() string {
	return p.Start
}
func (p *MonitorVPCRouterParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorVPCRouterParam) GetEnd() string {
	return p.End
}
func (p *MonitorVPCRouterParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorVPCRouterParam) GetKeyFormat() string {
	return p.KeyFormat
}

// LogsVPCRouterParam is input parameters for the sacloud API
type LogsVPCRouterParam struct {
	LogName         string
	Follow          bool
	RefreshInterval int64
	ListLogNames    bool

	input Input
}

// NewLogsVPCRouterParam return new LogsVPCRouterParam
func NewLogsVPCRouterParam() *LogsVPCRouterParam {
	return &LogsVPCRouterParam{
		LogName: "all", RefreshInterval: 3}
}

// Initialize init LogsVPCRouterParam
func (p *LogsVPCRouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *LogsVPCRouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *LogsVPCRouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.LogName) {
		p.LogName = ""
	}
	if utils.IsEmpty(p.Follow) {
		p.Follow = false
	}
	if utils.IsEmpty(p.RefreshInterval) {
		p.RefreshInterval = 0
	}
	if utils.IsEmpty(p.ListLogNames) {
		p.ListLogNames = false
	}

}

func (p *LogsVPCRouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["logs"].Params["log-name"].ValidateFunc
		errs := validator("--log-name", p.LogName)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["logs"].Params["refresh-interval"].ValidateFunc
		errs := validator("--refresh-interval", p.RefreshInterval)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *LogsVPCRouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *LogsVPCRouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["logs"]
}

func (p *LogsVPCRouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *LogsVPCRouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *LogsVPCRouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *LogsVPCRouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *LogsVPCRouterParam) SetLogName(v string) {
	p.LogName = v
}

func (p *LogsVPCRouterParam) GetLogName() string {
	return p.LogName
}
func (p *LogsVPCRouterParam) SetFollow(v bool) {
	p.Follow = v
}

func (p *LogsVPCRouterParam) GetFollow() bool {
	return p.Follow
}
func (p *LogsVPCRouterParam) SetRefreshInterval(v int64) {
	p.RefreshInterval = v
}

func (p *LogsVPCRouterParam) GetRefreshInterval() int64 {
	return p.RefreshInterval
}
func (p *LogsVPCRouterParam) SetListLogNames(v bool) {
	p.ListLogNames = v
}

func (p *LogsVPCRouterParam) GetListLogNames() bool {
	return p.ListLogNames
}

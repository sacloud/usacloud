// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListVpcrouterParam is input parameters for the sacloud API
type ListVpcrouterParam struct {
	Max  int
	Sort []string
	Name []string
	Id   []sacloud.ID
	From int
	Tags []string

	input Input
}

// NewListVpcrouterParam return new ListVpcrouterParam
func NewListVpcrouterParam() *ListVpcrouterParam {
	return &ListVpcrouterParam{}
}

// Initialize init ListVpcrouterParam
func (p *ListVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}

}

func (p *ListVpcrouterParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ListVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListVpcrouterParam) SetMax(v int) {
	p.Max = v
}

func (p *ListVpcrouterParam) GetMax() int {
	return p.Max
}
func (p *ListVpcrouterParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListVpcrouterParam) GetSort() []string {
	return p.Sort
}
func (p *ListVpcrouterParam) SetName(v []string) {
	p.Name = v
}

func (p *ListVpcrouterParam) GetName() []string {
	return p.Name
}
func (p *ListVpcrouterParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListVpcrouterParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListVpcrouterParam) SetFrom(v int) {
	p.From = v
}

func (p *ListVpcrouterParam) GetFrom() int {
	return p.From
}
func (p *ListVpcrouterParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListVpcrouterParam) GetTags() []string {
	return p.Tags
}

// CreateVpcrouterParam is input parameters for the sacloud API
type CreateVpcrouterParam struct {
	Ipaddress1                string
	Ipaddress2                string
	BootAfterCreate           bool
	Name                      string
	Description               string
	Plan                      string
	SwitchId                  sacloud.ID
	Vip                       string
	Tags                      []string
	Vrid                      int
	DisableInternetConnection bool
	IconId                    sacloud.ID

	input Input
}

// NewCreateVpcrouterParam return new CreateVpcrouterParam
func NewCreateVpcrouterParam() *CreateVpcrouterParam {
	return &CreateVpcrouterParam{
		Plan: "standard", Vrid: 1}
}

// Initialize init CreateVpcrouterParam
func (p *CreateVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Ipaddress1) {
		p.Ipaddress1 = ""
	}
	if utils.IsEmpty(p.Ipaddress2) {
		p.Ipaddress2 = ""
	}
	if utils.IsEmpty(p.BootAfterCreate) {
		p.BootAfterCreate = false
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Plan) {
		p.Plan = ""
	}
	if utils.IsEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Vip) {
		p.Vip = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Vrid) {
		p.Vrid = 0
	}
	if utils.IsEmpty(p.DisableInternetConnection) {
		p.DisableInternetConnection = false
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}

}

func (p *CreateVpcrouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["ipaddress2"].ValidateFunc
		errs := validator("--ipaddress-2", p.Ipaddress2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--vrid", p.Vrid)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *CreateVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateVpcrouterParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *CreateVpcrouterParam) GetIpaddress1() string {
	return p.Ipaddress1
}
func (p *CreateVpcrouterParam) SetIpaddress2(v string) {
	p.Ipaddress2 = v
}

func (p *CreateVpcrouterParam) GetIpaddress2() string {
	return p.Ipaddress2
}
func (p *CreateVpcrouterParam) SetBootAfterCreate(v bool) {
	p.BootAfterCreate = v
}

func (p *CreateVpcrouterParam) GetBootAfterCreate() bool {
	return p.BootAfterCreate
}
func (p *CreateVpcrouterParam) SetName(v string) {
	p.Name = v
}

func (p *CreateVpcrouterParam) GetName() string {
	return p.Name
}
func (p *CreateVpcrouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateVpcrouterParam) GetDescription() string {
	return p.Description
}
func (p *CreateVpcrouterParam) SetPlan(v string) {
	p.Plan = v
}

func (p *CreateVpcrouterParam) GetPlan() string {
	return p.Plan
}
func (p *CreateVpcrouterParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *CreateVpcrouterParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *CreateVpcrouterParam) SetVip(v string) {
	p.Vip = v
}

func (p *CreateVpcrouterParam) GetVip() string {
	return p.Vip
}
func (p *CreateVpcrouterParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateVpcrouterParam) GetTags() []string {
	return p.Tags
}
func (p *CreateVpcrouterParam) SetVrid(v int) {
	p.Vrid = v
}

func (p *CreateVpcrouterParam) GetVrid() int {
	return p.Vrid
}
func (p *CreateVpcrouterParam) SetDisableInternetConnection(v bool) {
	p.DisableInternetConnection = v
}

func (p *CreateVpcrouterParam) GetDisableInternetConnection() bool {
	return p.DisableInternetConnection
}
func (p *CreateVpcrouterParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateVpcrouterParam) GetIconId() sacloud.ID {
	return p.IconId
}

// ReadVpcrouterParam is input parameters for the sacloud API
type ReadVpcrouterParam struct {
	input Input
}

// NewReadVpcrouterParam return new ReadVpcrouterParam
func NewReadVpcrouterParam() *ReadVpcrouterParam {
	return &ReadVpcrouterParam{}
}

// Initialize init ReadVpcrouterParam
func (p *ReadVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadVpcrouterParam) fillValueToSkeleton() {

}

func (p *ReadVpcrouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ReadVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdateVpcrouterParam is input parameters for the sacloud API
type UpdateVpcrouterParam struct {
	SyslogHost         string
	InternetConnection bool
	Name               string
	Description        string
	Tags               []string
	IconId             sacloud.ID

	input Input
}

// NewUpdateVpcrouterParam return new UpdateVpcrouterParam
func NewUpdateVpcrouterParam() *UpdateVpcrouterParam {
	return &UpdateVpcrouterParam{}
}

// Initialize init UpdateVpcrouterParam
func (p *UpdateVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.SyslogHost) {
		p.SyslogHost = ""
	}
	if utils.IsEmpty(p.InternetConnection) {
		p.InternetConnection = false
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}

}

func (p *UpdateVpcrouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["syslog-host"].ValidateFunc
		errs := validator("--syslog-host", p.SyslogHost)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UpdateVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateVpcrouterParam) SetSyslogHost(v string) {
	p.SyslogHost = v
}

func (p *UpdateVpcrouterParam) GetSyslogHost() string {
	return p.SyslogHost
}
func (p *UpdateVpcrouterParam) SetInternetConnection(v bool) {
	p.InternetConnection = v
}

func (p *UpdateVpcrouterParam) GetInternetConnection() bool {
	return p.InternetConnection
}
func (p *UpdateVpcrouterParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateVpcrouterParam) GetName() string {
	return p.Name
}
func (p *UpdateVpcrouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateVpcrouterParam) GetDescription() string {
	return p.Description
}
func (p *UpdateVpcrouterParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateVpcrouterParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateVpcrouterParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateVpcrouterParam) GetIconId() sacloud.ID {
	return p.IconId
}

// DeleteVpcrouterParam is input parameters for the sacloud API
type DeleteVpcrouterParam struct {
	Force bool

	input Input
}

// NewDeleteVpcrouterParam return new DeleteVpcrouterParam
func NewDeleteVpcrouterParam() *DeleteVpcrouterParam {
	return &DeleteVpcrouterParam{}
}

// Initialize init DeleteVpcrouterParam
func (p *DeleteVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Force) {
		p.Force = false
	}

}

func (p *DeleteVpcrouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DeleteVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteVpcrouterParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteVpcrouterParam) GetForce() bool {
	return p.Force
}

// BootVpcrouterParam is input parameters for the sacloud API
type BootVpcrouterParam struct {
	input Input
}

// NewBootVpcrouterParam return new BootVpcrouterParam
func NewBootVpcrouterParam() *BootVpcrouterParam {
	return &BootVpcrouterParam{}
}

// Initialize init BootVpcrouterParam
func (p *BootVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BootVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BootVpcrouterParam) fillValueToSkeleton() {

}

func (p *BootVpcrouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *BootVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *BootVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["boot"]
}

func (p *BootVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BootVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BootVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BootVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ShutdownVpcrouterParam is input parameters for the sacloud API
type ShutdownVpcrouterParam struct {
	input Input
}

// NewShutdownVpcrouterParam return new ShutdownVpcrouterParam
func NewShutdownVpcrouterParam() *ShutdownVpcrouterParam {
	return &ShutdownVpcrouterParam{}
}

// Initialize init ShutdownVpcrouterParam
func (p *ShutdownVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShutdownVpcrouterParam) fillValueToSkeleton() {

}

func (p *ShutdownVpcrouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ShutdownVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ShutdownVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown"]
}

func (p *ShutdownVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ShutdownForceVpcrouterParam is input parameters for the sacloud API
type ShutdownForceVpcrouterParam struct {
	input Input
}

// NewShutdownForceVpcrouterParam return new ShutdownForceVpcrouterParam
func NewShutdownForceVpcrouterParam() *ShutdownForceVpcrouterParam {
	return &ShutdownForceVpcrouterParam{}
}

// Initialize init ShutdownForceVpcrouterParam
func (p *ShutdownForceVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownForceVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShutdownForceVpcrouterParam) fillValueToSkeleton() {

}

func (p *ShutdownForceVpcrouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ShutdownForceVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ShutdownForceVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown-force"]
}

func (p *ShutdownForceVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownForceVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownForceVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownForceVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ResetVpcrouterParam is input parameters for the sacloud API
type ResetVpcrouterParam struct {
	input Input
}

// NewResetVpcrouterParam return new ResetVpcrouterParam
func NewResetVpcrouterParam() *ResetVpcrouterParam {
	return &ResetVpcrouterParam{}
}

// Initialize init ResetVpcrouterParam
func (p *ResetVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResetVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResetVpcrouterParam) fillValueToSkeleton() {

}

func (p *ResetVpcrouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ResetVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ResetVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["reset"]
}

func (p *ResetVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResetVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResetVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResetVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// WaitForBootVpcrouterParam is input parameters for the sacloud API
type WaitForBootVpcrouterParam struct {
	input Input
}

// NewWaitForBootVpcrouterParam return new WaitForBootVpcrouterParam
func NewWaitForBootVpcrouterParam() *WaitForBootVpcrouterParam {
	return &WaitForBootVpcrouterParam{}
}

// Initialize init WaitForBootVpcrouterParam
func (p *WaitForBootVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForBootVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForBootVpcrouterParam) fillValueToSkeleton() {

}

func (p *WaitForBootVpcrouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *WaitForBootVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *WaitForBootVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-boot"]
}

func (p *WaitForBootVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForBootVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForBootVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForBootVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// WaitForDownVpcrouterParam is input parameters for the sacloud API
type WaitForDownVpcrouterParam struct {
	input Input
}

// NewWaitForDownVpcrouterParam return new WaitForDownVpcrouterParam
func NewWaitForDownVpcrouterParam() *WaitForDownVpcrouterParam {
	return &WaitForDownVpcrouterParam{}
}

// Initialize init WaitForDownVpcrouterParam
func (p *WaitForDownVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForDownVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForDownVpcrouterParam) fillValueToSkeleton() {

}

func (p *WaitForDownVpcrouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *WaitForDownVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *WaitForDownVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-down"]
}

func (p *WaitForDownVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForDownVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForDownVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForDownVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// EnableInternetConnectionVpcrouterParam is input parameters for the sacloud API
type EnableInternetConnectionVpcrouterParam struct {
	input Input
}

// NewEnableInternetConnectionVpcrouterParam return new EnableInternetConnectionVpcrouterParam
func NewEnableInternetConnectionVpcrouterParam() *EnableInternetConnectionVpcrouterParam {
	return &EnableInternetConnectionVpcrouterParam{}
}

// Initialize init EnableInternetConnectionVpcrouterParam
func (p *EnableInternetConnectionVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *EnableInternetConnectionVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *EnableInternetConnectionVpcrouterParam) fillValueToSkeleton() {

}

func (p *EnableInternetConnectionVpcrouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *EnableInternetConnectionVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *EnableInternetConnectionVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["enable-internet-connection"]
}

func (p *EnableInternetConnectionVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *EnableInternetConnectionVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *EnableInternetConnectionVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *EnableInternetConnectionVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// DisableInternetConnectionVpcrouterParam is input parameters for the sacloud API
type DisableInternetConnectionVpcrouterParam struct {
	input Input
}

// NewDisableInternetConnectionVpcrouterParam return new DisableInternetConnectionVpcrouterParam
func NewDisableInternetConnectionVpcrouterParam() *DisableInternetConnectionVpcrouterParam {
	return &DisableInternetConnectionVpcrouterParam{}
}

// Initialize init DisableInternetConnectionVpcrouterParam
func (p *DisableInternetConnectionVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DisableInternetConnectionVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DisableInternetConnectionVpcrouterParam) fillValueToSkeleton() {

}

func (p *DisableInternetConnectionVpcrouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DisableInternetConnectionVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DisableInternetConnectionVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["disable-internet-connection"]
}

func (p *DisableInternetConnectionVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DisableInternetConnectionVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DisableInternetConnectionVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DisableInternetConnectionVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// InterfaceInfoVpcrouterParam is input parameters for the sacloud API
type InterfaceInfoVpcrouterParam struct {
	input Input
}

// NewInterfaceInfoVpcrouterParam return new InterfaceInfoVpcrouterParam
func NewInterfaceInfoVpcrouterParam() *InterfaceInfoVpcrouterParam {
	return &InterfaceInfoVpcrouterParam{}
}

// Initialize init InterfaceInfoVpcrouterParam
func (p *InterfaceInfoVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceInfoVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceInfoVpcrouterParam) fillValueToSkeleton() {

}

func (p *InterfaceInfoVpcrouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *InterfaceInfoVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *InterfaceInfoVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-info"]
}

func (p *InterfaceInfoVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceInfoVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceInfoVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceInfoVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// InterfaceConnectVpcrouterParam is input parameters for the sacloud API
type InterfaceConnectVpcrouterParam struct {
	Ipaddress2 string
	NwMasklen  int
	WithReboot bool
	Interface  string
	SwitchId   sacloud.ID
	Ipaddress  string
	Ipaddress1 string

	input Input
}

// NewInterfaceConnectVpcrouterParam return new InterfaceConnectVpcrouterParam
func NewInterfaceConnectVpcrouterParam() *InterfaceConnectVpcrouterParam {
	return &InterfaceConnectVpcrouterParam{
		NwMasklen: 24}
}

// Initialize init InterfaceConnectVpcrouterParam
func (p *InterfaceConnectVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceConnectVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceConnectVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Ipaddress2) {
		p.Ipaddress2 = ""
	}
	if utils.IsEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}
	if utils.IsEmpty(p.WithReboot) {
		p.WithReboot = false
	}
	if utils.IsEmpty(p.Interface) {
		p.Interface = ""
	}
	if utils.IsEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.Ipaddress1) {
		p.Ipaddress1 = ""
	}

}

func (p *InterfaceConnectVpcrouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["ipaddress2"].ValidateFunc
		errs := validator("--ipaddress-2", p.Ipaddress2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *InterfaceConnectVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *InterfaceConnectVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-connect"]
}

func (p *InterfaceConnectVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceConnectVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceConnectVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceConnectVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceConnectVpcrouterParam) SetIpaddress2(v string) {
	p.Ipaddress2 = v
}

func (p *InterfaceConnectVpcrouterParam) GetIpaddress2() string {
	return p.Ipaddress2
}
func (p *InterfaceConnectVpcrouterParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *InterfaceConnectVpcrouterParam) GetNwMasklen() int {
	return p.NwMasklen
}
func (p *InterfaceConnectVpcrouterParam) SetWithReboot(v bool) {
	p.WithReboot = v
}

func (p *InterfaceConnectVpcrouterParam) GetWithReboot() bool {
	return p.WithReboot
}
func (p *InterfaceConnectVpcrouterParam) SetInterface(v string) {
	p.Interface = v
}

func (p *InterfaceConnectVpcrouterParam) GetInterface() string {
	return p.Interface
}
func (p *InterfaceConnectVpcrouterParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *InterfaceConnectVpcrouterParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *InterfaceConnectVpcrouterParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *InterfaceConnectVpcrouterParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *InterfaceConnectVpcrouterParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *InterfaceConnectVpcrouterParam) GetIpaddress1() string {
	return p.Ipaddress1
}

// InterfaceUpdateVpcrouterParam is input parameters for the sacloud API
type InterfaceUpdateVpcrouterParam struct {
	Ipaddress2 string
	Alias      []string
	NwMasklen  int
	WithReboot bool
	Interface  string
	SwitchId   sacloud.ID
	Ipaddress  string
	Ipaddress1 string

	input Input
}

// NewInterfaceUpdateVpcrouterParam return new InterfaceUpdateVpcrouterParam
func NewInterfaceUpdateVpcrouterParam() *InterfaceUpdateVpcrouterParam {
	return &InterfaceUpdateVpcrouterParam{
		NwMasklen: 24}
}

// Initialize init InterfaceUpdateVpcrouterParam
func (p *InterfaceUpdateVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceUpdateVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceUpdateVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Ipaddress2) {
		p.Ipaddress2 = ""
	}
	if utils.IsEmpty(p.Alias) {
		p.Alias = []string{""}
	}
	if utils.IsEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}
	if utils.IsEmpty(p.WithReboot) {
		p.WithReboot = false
	}
	if utils.IsEmpty(p.Interface) {
		p.Interface = ""
	}
	if utils.IsEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.Ipaddress1) {
		p.Ipaddress1 = ""
	}

}

func (p *InterfaceUpdateVpcrouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["ipaddress2"].ValidateFunc
		errs := validator("--ipaddress-2", p.Ipaddress2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["alias"].ValidateFunc
		errs := validator("--alias", p.Alias)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *InterfaceUpdateVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *InterfaceUpdateVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-update"]
}

func (p *InterfaceUpdateVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceUpdateVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceUpdateVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceUpdateVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceUpdateVpcrouterParam) SetIpaddress2(v string) {
	p.Ipaddress2 = v
}

func (p *InterfaceUpdateVpcrouterParam) GetIpaddress2() string {
	return p.Ipaddress2
}
func (p *InterfaceUpdateVpcrouterParam) SetAlias(v []string) {
	p.Alias = v
}

func (p *InterfaceUpdateVpcrouterParam) GetAlias() []string {
	return p.Alias
}
func (p *InterfaceUpdateVpcrouterParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *InterfaceUpdateVpcrouterParam) GetNwMasklen() int {
	return p.NwMasklen
}
func (p *InterfaceUpdateVpcrouterParam) SetWithReboot(v bool) {
	p.WithReboot = v
}

func (p *InterfaceUpdateVpcrouterParam) GetWithReboot() bool {
	return p.WithReboot
}
func (p *InterfaceUpdateVpcrouterParam) SetInterface(v string) {
	p.Interface = v
}

func (p *InterfaceUpdateVpcrouterParam) GetInterface() string {
	return p.Interface
}
func (p *InterfaceUpdateVpcrouterParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *InterfaceUpdateVpcrouterParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *InterfaceUpdateVpcrouterParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *InterfaceUpdateVpcrouterParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *InterfaceUpdateVpcrouterParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *InterfaceUpdateVpcrouterParam) GetIpaddress1() string {
	return p.Ipaddress1
}

// InterfaceDisconnectVpcrouterParam is input parameters for the sacloud API
type InterfaceDisconnectVpcrouterParam struct {
	Interface  string
	WithReboot bool

	input Input
}

// NewInterfaceDisconnectVpcrouterParam return new InterfaceDisconnectVpcrouterParam
func NewInterfaceDisconnectVpcrouterParam() *InterfaceDisconnectVpcrouterParam {
	return &InterfaceDisconnectVpcrouterParam{}
}

// Initialize init InterfaceDisconnectVpcrouterParam
func (p *InterfaceDisconnectVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceDisconnectVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceDisconnectVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Interface) {
		p.Interface = ""
	}
	if utils.IsEmpty(p.WithReboot) {
		p.WithReboot = false
	}

}

func (p *InterfaceDisconnectVpcrouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-disconnect"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *InterfaceDisconnectVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *InterfaceDisconnectVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-disconnect"]
}

func (p *InterfaceDisconnectVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceDisconnectVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceDisconnectVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceDisconnectVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceDisconnectVpcrouterParam) SetInterface(v string) {
	p.Interface = v
}

func (p *InterfaceDisconnectVpcrouterParam) GetInterface() string {
	return p.Interface
}
func (p *InterfaceDisconnectVpcrouterParam) SetWithReboot(v bool) {
	p.WithReboot = v
}

func (p *InterfaceDisconnectVpcrouterParam) GetWithReboot() bool {
	return p.WithReboot
}

// StaticNatInfoVpcrouterParam is input parameters for the sacloud API
type StaticNatInfoVpcrouterParam struct {
	input Input
}

// NewStaticNatInfoVpcrouterParam return new StaticNatInfoVpcrouterParam
func NewStaticNatInfoVpcrouterParam() *StaticNatInfoVpcrouterParam {
	return &StaticNatInfoVpcrouterParam{}
}

// Initialize init StaticNatInfoVpcrouterParam
func (p *StaticNatInfoVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticNatInfoVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticNatInfoVpcrouterParam) fillValueToSkeleton() {

}

func (p *StaticNatInfoVpcrouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *StaticNatInfoVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticNatInfoVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-nat-info"]
}

func (p *StaticNatInfoVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticNatInfoVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticNatInfoVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticNatInfoVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// StaticNatAddVpcrouterParam is input parameters for the sacloud API
type StaticNatAddVpcrouterParam struct {
	Description string
	Global      string
	Private     string

	input Input
}

// NewStaticNatAddVpcrouterParam return new StaticNatAddVpcrouterParam
func NewStaticNatAddVpcrouterParam() *StaticNatAddVpcrouterParam {
	return &StaticNatAddVpcrouterParam{}
}

// Initialize init StaticNatAddVpcrouterParam
func (p *StaticNatAddVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticNatAddVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticNatAddVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Global) {
		p.Global = ""
	}
	if utils.IsEmpty(p.Private) {
		p.Private = ""
	}

}

func (p *StaticNatAddVpcrouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-add"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--global", p.Global)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-add"].Params["global"].ValidateFunc
		errs := validator("--global", p.Global)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--private", p.Private)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-add"].Params["private"].ValidateFunc
		errs := validator("--private", p.Private)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *StaticNatAddVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticNatAddVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-nat-add"]
}

func (p *StaticNatAddVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticNatAddVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticNatAddVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticNatAddVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticNatAddVpcrouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *StaticNatAddVpcrouterParam) GetDescription() string {
	return p.Description
}
func (p *StaticNatAddVpcrouterParam) SetGlobal(v string) {
	p.Global = v
}

func (p *StaticNatAddVpcrouterParam) GetGlobal() string {
	return p.Global
}
func (p *StaticNatAddVpcrouterParam) SetPrivate(v string) {
	p.Private = v
}

func (p *StaticNatAddVpcrouterParam) GetPrivate() string {
	return p.Private
}

// StaticNatUpdateVpcrouterParam is input parameters for the sacloud API
type StaticNatUpdateVpcrouterParam struct {
	Index       int
	Global      string
	Private     string
	Description string

	input Input
}

// NewStaticNatUpdateVpcrouterParam return new StaticNatUpdateVpcrouterParam
func NewStaticNatUpdateVpcrouterParam() *StaticNatUpdateVpcrouterParam {
	return &StaticNatUpdateVpcrouterParam{}
}

// Initialize init StaticNatUpdateVpcrouterParam
func (p *StaticNatUpdateVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticNatUpdateVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticNatUpdateVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Global) {
		p.Global = ""
	}
	if utils.IsEmpty(p.Private) {
		p.Private = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}

}

func (p *StaticNatUpdateVpcrouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-update"].Params["global"].ValidateFunc
		errs := validator("--global", p.Global)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-update"].Params["private"].ValidateFunc
		errs := validator("--private", p.Private)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *StaticNatUpdateVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticNatUpdateVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-nat-update"]
}

func (p *StaticNatUpdateVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticNatUpdateVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticNatUpdateVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticNatUpdateVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticNatUpdateVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticNatUpdateVpcrouterParam) GetIndex() int {
	return p.Index
}
func (p *StaticNatUpdateVpcrouterParam) SetGlobal(v string) {
	p.Global = v
}

func (p *StaticNatUpdateVpcrouterParam) GetGlobal() string {
	return p.Global
}
func (p *StaticNatUpdateVpcrouterParam) SetPrivate(v string) {
	p.Private = v
}

func (p *StaticNatUpdateVpcrouterParam) GetPrivate() string {
	return p.Private
}
func (p *StaticNatUpdateVpcrouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *StaticNatUpdateVpcrouterParam) GetDescription() string {
	return p.Description
}

// StaticNatDeleteVpcrouterParam is input parameters for the sacloud API
type StaticNatDeleteVpcrouterParam struct {
	Index int

	input Input
}

// NewStaticNatDeleteVpcrouterParam return new StaticNatDeleteVpcrouterParam
func NewStaticNatDeleteVpcrouterParam() *StaticNatDeleteVpcrouterParam {
	return &StaticNatDeleteVpcrouterParam{}
}

// Initialize init StaticNatDeleteVpcrouterParam
func (p *StaticNatDeleteVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticNatDeleteVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticNatDeleteVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *StaticNatDeleteVpcrouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *StaticNatDeleteVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticNatDeleteVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-nat-delete"]
}

func (p *StaticNatDeleteVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticNatDeleteVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticNatDeleteVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticNatDeleteVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticNatDeleteVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticNatDeleteVpcrouterParam) GetIndex() int {
	return p.Index
}

// PortForwardingInfoVpcrouterParam is input parameters for the sacloud API
type PortForwardingInfoVpcrouterParam struct {
	input Input
}

// NewPortForwardingInfoVpcrouterParam return new PortForwardingInfoVpcrouterParam
func NewPortForwardingInfoVpcrouterParam() *PortForwardingInfoVpcrouterParam {
	return &PortForwardingInfoVpcrouterParam{}
}

// Initialize init PortForwardingInfoVpcrouterParam
func (p *PortForwardingInfoVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PortForwardingInfoVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PortForwardingInfoVpcrouterParam) fillValueToSkeleton() {

}

func (p *PortForwardingInfoVpcrouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *PortForwardingInfoVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PortForwardingInfoVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["port-forwarding-info"]
}

func (p *PortForwardingInfoVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PortForwardingInfoVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PortForwardingInfoVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PortForwardingInfoVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// PortForwardingAddVpcrouterParam is input parameters for the sacloud API
type PortForwardingAddVpcrouterParam struct {
	Protocol         string
	GlobalPort       int
	PrivateIpaddress string
	PrivatePort      int
	Description      string

	input Input
}

// NewPortForwardingAddVpcrouterParam return new PortForwardingAddVpcrouterParam
func NewPortForwardingAddVpcrouterParam() *PortForwardingAddVpcrouterParam {
	return &PortForwardingAddVpcrouterParam{}
}

// Initialize init PortForwardingAddVpcrouterParam
func (p *PortForwardingAddVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PortForwardingAddVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PortForwardingAddVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.GlobalPort) {
		p.GlobalPort = 0
	}
	if utils.IsEmpty(p.PrivateIpaddress) {
		p.PrivateIpaddress = ""
	}
	if utils.IsEmpty(p.PrivatePort) {
		p.PrivatePort = 0
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}

}

func (p *PortForwardingAddVpcrouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--global-port", p.GlobalPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["global-port"].ValidateFunc
		errs := validator("--global-port", p.GlobalPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--private-ipaddress", p.PrivateIpaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["private-ipaddress"].ValidateFunc
		errs := validator("--private-ipaddress", p.PrivateIpaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--private-port", p.PrivatePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["private-port"].ValidateFunc
		errs := validator("--private-port", p.PrivatePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PortForwardingAddVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PortForwardingAddVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["port-forwarding-add"]
}

func (p *PortForwardingAddVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PortForwardingAddVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PortForwardingAddVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PortForwardingAddVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PortForwardingAddVpcrouterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *PortForwardingAddVpcrouterParam) GetProtocol() string {
	return p.Protocol
}
func (p *PortForwardingAddVpcrouterParam) SetGlobalPort(v int) {
	p.GlobalPort = v
}

func (p *PortForwardingAddVpcrouterParam) GetGlobalPort() int {
	return p.GlobalPort
}
func (p *PortForwardingAddVpcrouterParam) SetPrivateIpaddress(v string) {
	p.PrivateIpaddress = v
}

func (p *PortForwardingAddVpcrouterParam) GetPrivateIpaddress() string {
	return p.PrivateIpaddress
}
func (p *PortForwardingAddVpcrouterParam) SetPrivatePort(v int) {
	p.PrivatePort = v
}

func (p *PortForwardingAddVpcrouterParam) GetPrivatePort() int {
	return p.PrivatePort
}
func (p *PortForwardingAddVpcrouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *PortForwardingAddVpcrouterParam) GetDescription() string {
	return p.Description
}

// PortForwardingUpdateVpcrouterParam is input parameters for the sacloud API
type PortForwardingUpdateVpcrouterParam struct {
	Protocol         string
	GlobalPort       int
	PrivateIpaddress string
	PrivatePort      int
	Description      string
	Index            int

	input Input
}

// NewPortForwardingUpdateVpcrouterParam return new PortForwardingUpdateVpcrouterParam
func NewPortForwardingUpdateVpcrouterParam() *PortForwardingUpdateVpcrouterParam {
	return &PortForwardingUpdateVpcrouterParam{}
}

// Initialize init PortForwardingUpdateVpcrouterParam
func (p *PortForwardingUpdateVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PortForwardingUpdateVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PortForwardingUpdateVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.GlobalPort) {
		p.GlobalPort = 0
	}
	if utils.IsEmpty(p.PrivateIpaddress) {
		p.PrivateIpaddress = ""
	}
	if utils.IsEmpty(p.PrivatePort) {
		p.PrivatePort = 0
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *PortForwardingUpdateVpcrouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["global-port"].ValidateFunc
		errs := validator("--global-port", p.GlobalPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["private-ipaddress"].ValidateFunc
		errs := validator("--private-ipaddress", p.PrivateIpaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["private-port"].ValidateFunc
		errs := validator("--private-port", p.PrivatePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PortForwardingUpdateVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PortForwardingUpdateVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["port-forwarding-update"]
}

func (p *PortForwardingUpdateVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PortForwardingUpdateVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PortForwardingUpdateVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PortForwardingUpdateVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PortForwardingUpdateVpcrouterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *PortForwardingUpdateVpcrouterParam) GetProtocol() string {
	return p.Protocol
}
func (p *PortForwardingUpdateVpcrouterParam) SetGlobalPort(v int) {
	p.GlobalPort = v
}

func (p *PortForwardingUpdateVpcrouterParam) GetGlobalPort() int {
	return p.GlobalPort
}
func (p *PortForwardingUpdateVpcrouterParam) SetPrivateIpaddress(v string) {
	p.PrivateIpaddress = v
}

func (p *PortForwardingUpdateVpcrouterParam) GetPrivateIpaddress() string {
	return p.PrivateIpaddress
}
func (p *PortForwardingUpdateVpcrouterParam) SetPrivatePort(v int) {
	p.PrivatePort = v
}

func (p *PortForwardingUpdateVpcrouterParam) GetPrivatePort() int {
	return p.PrivatePort
}
func (p *PortForwardingUpdateVpcrouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *PortForwardingUpdateVpcrouterParam) GetDescription() string {
	return p.Description
}
func (p *PortForwardingUpdateVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *PortForwardingUpdateVpcrouterParam) GetIndex() int {
	return p.Index
}

// PortForwardingDeleteVpcrouterParam is input parameters for the sacloud API
type PortForwardingDeleteVpcrouterParam struct {
	Index int

	input Input
}

// NewPortForwardingDeleteVpcrouterParam return new PortForwardingDeleteVpcrouterParam
func NewPortForwardingDeleteVpcrouterParam() *PortForwardingDeleteVpcrouterParam {
	return &PortForwardingDeleteVpcrouterParam{}
}

// Initialize init PortForwardingDeleteVpcrouterParam
func (p *PortForwardingDeleteVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PortForwardingDeleteVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PortForwardingDeleteVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *PortForwardingDeleteVpcrouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PortForwardingDeleteVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PortForwardingDeleteVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["port-forwarding-delete"]
}

func (p *PortForwardingDeleteVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PortForwardingDeleteVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PortForwardingDeleteVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PortForwardingDeleteVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PortForwardingDeleteVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *PortForwardingDeleteVpcrouterParam) GetIndex() int {
	return p.Index
}

// FirewallInfoVpcrouterParam is input parameters for the sacloud API
type FirewallInfoVpcrouterParam struct {
	Direction string
	Interface int

	input Input
}

// NewFirewallInfoVpcrouterParam return new FirewallInfoVpcrouterParam
func NewFirewallInfoVpcrouterParam() *FirewallInfoVpcrouterParam {
	return &FirewallInfoVpcrouterParam{
		Direction: "receive"}
}

// Initialize init FirewallInfoVpcrouterParam
func (p *FirewallInfoVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *FirewallInfoVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *FirewallInfoVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Direction) {
		p.Direction = ""
	}
	if utils.IsEmpty(p.Interface) {
		p.Interface = 0
	}

}

func (p *FirewallInfoVpcrouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-info"].Params["direction"].ValidateFunc
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-info"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *FirewallInfoVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *FirewallInfoVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["firewall-info"]
}

func (p *FirewallInfoVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *FirewallInfoVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *FirewallInfoVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *FirewallInfoVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *FirewallInfoVpcrouterParam) SetDirection(v string) {
	p.Direction = v
}

func (p *FirewallInfoVpcrouterParam) GetDirection() string {
	return p.Direction
}
func (p *FirewallInfoVpcrouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *FirewallInfoVpcrouterParam) GetInterface() int {
	return p.Interface
}

// FirewallAddVpcrouterParam is input parameters for the sacloud API
type FirewallAddVpcrouterParam struct {
	Protocol           string
	SourcePort         int
	DestinationPort    int
	Action             string
	Description        string
	Interface          int
	Direction          string
	SourceNetwork      string
	DestinationNetwork string
	EnableLogging      bool

	input Input
}

// NewFirewallAddVpcrouterParam return new FirewallAddVpcrouterParam
func NewFirewallAddVpcrouterParam() *FirewallAddVpcrouterParam {
	return &FirewallAddVpcrouterParam{
		Action: "deny", Direction: "receive"}
}

// Initialize init FirewallAddVpcrouterParam
func (p *FirewallAddVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *FirewallAddVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *FirewallAddVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.SourcePort) {
		p.SourcePort = 0
	}
	if utils.IsEmpty(p.DestinationPort) {
		p.DestinationPort = 0
	}
	if utils.IsEmpty(p.Action) {
		p.Action = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Interface) {
		p.Interface = 0
	}
	if utils.IsEmpty(p.Direction) {
		p.Direction = ""
	}
	if utils.IsEmpty(p.SourceNetwork) {
		p.SourceNetwork = ""
	}
	if utils.IsEmpty(p.DestinationNetwork) {
		p.DestinationNetwork = ""
	}
	if utils.IsEmpty(p.EnableLogging) {
		p.EnableLogging = false
	}

}

func (p *FirewallAddVpcrouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["source-port"].ValidateFunc
		errs := validator("--source-port", p.SourcePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["destination-port"].ValidateFunc
		errs := validator("--destination-port", p.DestinationPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["action"].ValidateFunc
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["direction"].ValidateFunc
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["source-network"].ValidateFunc
		errs := validator("--source-network", p.SourceNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["destination-network"].ValidateFunc
		errs := validator("--destination-network", p.DestinationNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *FirewallAddVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *FirewallAddVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["firewall-add"]
}

func (p *FirewallAddVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *FirewallAddVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *FirewallAddVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *FirewallAddVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *FirewallAddVpcrouterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *FirewallAddVpcrouterParam) GetProtocol() string {
	return p.Protocol
}
func (p *FirewallAddVpcrouterParam) SetSourcePort(v int) {
	p.SourcePort = v
}

func (p *FirewallAddVpcrouterParam) GetSourcePort() int {
	return p.SourcePort
}
func (p *FirewallAddVpcrouterParam) SetDestinationPort(v int) {
	p.DestinationPort = v
}

func (p *FirewallAddVpcrouterParam) GetDestinationPort() int {
	return p.DestinationPort
}
func (p *FirewallAddVpcrouterParam) SetAction(v string) {
	p.Action = v
}

func (p *FirewallAddVpcrouterParam) GetAction() string {
	return p.Action
}
func (p *FirewallAddVpcrouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *FirewallAddVpcrouterParam) GetDescription() string {
	return p.Description
}
func (p *FirewallAddVpcrouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *FirewallAddVpcrouterParam) GetInterface() int {
	return p.Interface
}
func (p *FirewallAddVpcrouterParam) SetDirection(v string) {
	p.Direction = v
}

func (p *FirewallAddVpcrouterParam) GetDirection() string {
	return p.Direction
}
func (p *FirewallAddVpcrouterParam) SetSourceNetwork(v string) {
	p.SourceNetwork = v
}

func (p *FirewallAddVpcrouterParam) GetSourceNetwork() string {
	return p.SourceNetwork
}
func (p *FirewallAddVpcrouterParam) SetDestinationNetwork(v string) {
	p.DestinationNetwork = v
}

func (p *FirewallAddVpcrouterParam) GetDestinationNetwork() string {
	return p.DestinationNetwork
}
func (p *FirewallAddVpcrouterParam) SetEnableLogging(v bool) {
	p.EnableLogging = v
}

func (p *FirewallAddVpcrouterParam) GetEnableLogging() bool {
	return p.EnableLogging
}

// FirewallUpdateVpcrouterParam is input parameters for the sacloud API
type FirewallUpdateVpcrouterParam struct {
	SourceNetwork      string
	SourcePort         int
	DestinationNetwork string
	DestinationPort    int
	EnableLogging      bool
	Description        string
	Interface          int
	Direction          string
	Index              int
	Protocol           string
	Action             string

	input Input
}

// NewFirewallUpdateVpcrouterParam return new FirewallUpdateVpcrouterParam
func NewFirewallUpdateVpcrouterParam() *FirewallUpdateVpcrouterParam {
	return &FirewallUpdateVpcrouterParam{
		Direction: "receive", Action: "deny"}
}

// Initialize init FirewallUpdateVpcrouterParam
func (p *FirewallUpdateVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *FirewallUpdateVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *FirewallUpdateVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.SourceNetwork) {
		p.SourceNetwork = ""
	}
	if utils.IsEmpty(p.SourcePort) {
		p.SourcePort = 0
	}
	if utils.IsEmpty(p.DestinationNetwork) {
		p.DestinationNetwork = ""
	}
	if utils.IsEmpty(p.DestinationPort) {
		p.DestinationPort = 0
	}
	if utils.IsEmpty(p.EnableLogging) {
		p.EnableLogging = false
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Interface) {
		p.Interface = 0
	}
	if utils.IsEmpty(p.Direction) {
		p.Direction = ""
	}
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.Action) {
		p.Action = ""
	}

}

func (p *FirewallUpdateVpcrouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["source-network"].ValidateFunc
		errs := validator("--source-network", p.SourceNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["source-port"].ValidateFunc
		errs := validator("--source-port", p.SourcePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["destination-network"].ValidateFunc
		errs := validator("--destination-network", p.DestinationNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["destination-port"].ValidateFunc
		errs := validator("--destination-port", p.DestinationPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["direction"].ValidateFunc
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["action"].ValidateFunc
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *FirewallUpdateVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *FirewallUpdateVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["firewall-update"]
}

func (p *FirewallUpdateVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *FirewallUpdateVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *FirewallUpdateVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *FirewallUpdateVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *FirewallUpdateVpcrouterParam) SetSourceNetwork(v string) {
	p.SourceNetwork = v
}

func (p *FirewallUpdateVpcrouterParam) GetSourceNetwork() string {
	return p.SourceNetwork
}
func (p *FirewallUpdateVpcrouterParam) SetSourcePort(v int) {
	p.SourcePort = v
}

func (p *FirewallUpdateVpcrouterParam) GetSourcePort() int {
	return p.SourcePort
}
func (p *FirewallUpdateVpcrouterParam) SetDestinationNetwork(v string) {
	p.DestinationNetwork = v
}

func (p *FirewallUpdateVpcrouterParam) GetDestinationNetwork() string {
	return p.DestinationNetwork
}
func (p *FirewallUpdateVpcrouterParam) SetDestinationPort(v int) {
	p.DestinationPort = v
}

func (p *FirewallUpdateVpcrouterParam) GetDestinationPort() int {
	return p.DestinationPort
}
func (p *FirewallUpdateVpcrouterParam) SetEnableLogging(v bool) {
	p.EnableLogging = v
}

func (p *FirewallUpdateVpcrouterParam) GetEnableLogging() bool {
	return p.EnableLogging
}
func (p *FirewallUpdateVpcrouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *FirewallUpdateVpcrouterParam) GetDescription() string {
	return p.Description
}
func (p *FirewallUpdateVpcrouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *FirewallUpdateVpcrouterParam) GetInterface() int {
	return p.Interface
}
func (p *FirewallUpdateVpcrouterParam) SetDirection(v string) {
	p.Direction = v
}

func (p *FirewallUpdateVpcrouterParam) GetDirection() string {
	return p.Direction
}
func (p *FirewallUpdateVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *FirewallUpdateVpcrouterParam) GetIndex() int {
	return p.Index
}
func (p *FirewallUpdateVpcrouterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *FirewallUpdateVpcrouterParam) GetProtocol() string {
	return p.Protocol
}
func (p *FirewallUpdateVpcrouterParam) SetAction(v string) {
	p.Action = v
}

func (p *FirewallUpdateVpcrouterParam) GetAction() string {
	return p.Action
}

// FirewallDeleteVpcrouterParam is input parameters for the sacloud API
type FirewallDeleteVpcrouterParam struct {
	Interface int
	Direction string
	Index     int

	input Input
}

// NewFirewallDeleteVpcrouterParam return new FirewallDeleteVpcrouterParam
func NewFirewallDeleteVpcrouterParam() *FirewallDeleteVpcrouterParam {
	return &FirewallDeleteVpcrouterParam{
		Direction: "receive"}
}

// Initialize init FirewallDeleteVpcrouterParam
func (p *FirewallDeleteVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *FirewallDeleteVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *FirewallDeleteVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Interface) {
		p.Interface = 0
	}
	if utils.IsEmpty(p.Direction) {
		p.Direction = ""
	}
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *FirewallDeleteVpcrouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["firewall-delete"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-delete"].Params["direction"].ValidateFunc
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *FirewallDeleteVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *FirewallDeleteVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["firewall-delete"]
}

func (p *FirewallDeleteVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *FirewallDeleteVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *FirewallDeleteVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *FirewallDeleteVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *FirewallDeleteVpcrouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *FirewallDeleteVpcrouterParam) GetInterface() int {
	return p.Interface
}
func (p *FirewallDeleteVpcrouterParam) SetDirection(v string) {
	p.Direction = v
}

func (p *FirewallDeleteVpcrouterParam) GetDirection() string {
	return p.Direction
}
func (p *FirewallDeleteVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *FirewallDeleteVpcrouterParam) GetIndex() int {
	return p.Index
}

// DhcpServerInfoVpcrouterParam is input parameters for the sacloud API
type DhcpServerInfoVpcrouterParam struct {
	input Input
}

// NewDhcpServerInfoVpcrouterParam return new DhcpServerInfoVpcrouterParam
func NewDhcpServerInfoVpcrouterParam() *DhcpServerInfoVpcrouterParam {
	return &DhcpServerInfoVpcrouterParam{}
}

// Initialize init DhcpServerInfoVpcrouterParam
func (p *DhcpServerInfoVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DhcpServerInfoVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DhcpServerInfoVpcrouterParam) fillValueToSkeleton() {

}

func (p *DhcpServerInfoVpcrouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DhcpServerInfoVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpServerInfoVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["dhcp-server-info"]
}

func (p *DhcpServerInfoVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DhcpServerInfoVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DhcpServerInfoVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DhcpServerInfoVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// DhcpServerAddVpcrouterParam is input parameters for the sacloud API
type DhcpServerAddVpcrouterParam struct {
	Interface  int
	RangeStart string
	RangeStop  string
	DnsServers []string

	input Input
}

// NewDhcpServerAddVpcrouterParam return new DhcpServerAddVpcrouterParam
func NewDhcpServerAddVpcrouterParam() *DhcpServerAddVpcrouterParam {
	return &DhcpServerAddVpcrouterParam{}
}

// Initialize init DhcpServerAddVpcrouterParam
func (p *DhcpServerAddVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DhcpServerAddVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DhcpServerAddVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Interface) {
		p.Interface = 0
	}
	if utils.IsEmpty(p.RangeStart) {
		p.RangeStart = ""
	}
	if utils.IsEmpty(p.RangeStop) {
		p.RangeStop = ""
	}
	if utils.IsEmpty(p.DnsServers) {
		p.DnsServers = []string{""}
	}

}

func (p *DhcpServerAddVpcrouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["range-start"].ValidateFunc
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["range-stop"].ValidateFunc
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["dns-servers"].ValidateFunc
		errs := validator("--dns-servers", p.DnsServers)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DhcpServerAddVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpServerAddVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["dhcp-server-add"]
}

func (p *DhcpServerAddVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DhcpServerAddVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DhcpServerAddVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DhcpServerAddVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DhcpServerAddVpcrouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *DhcpServerAddVpcrouterParam) GetInterface() int {
	return p.Interface
}
func (p *DhcpServerAddVpcrouterParam) SetRangeStart(v string) {
	p.RangeStart = v
}

func (p *DhcpServerAddVpcrouterParam) GetRangeStart() string {
	return p.RangeStart
}
func (p *DhcpServerAddVpcrouterParam) SetRangeStop(v string) {
	p.RangeStop = v
}

func (p *DhcpServerAddVpcrouterParam) GetRangeStop() string {
	return p.RangeStop
}
func (p *DhcpServerAddVpcrouterParam) SetDnsServers(v []string) {
	p.DnsServers = v
}

func (p *DhcpServerAddVpcrouterParam) GetDnsServers() []string {
	return p.DnsServers
}

// DhcpServerUpdateVpcrouterParam is input parameters for the sacloud API
type DhcpServerUpdateVpcrouterParam struct {
	Interface  int
	RangeStart string
	RangeStop  string
	DnsServers []string

	input Input
}

// NewDhcpServerUpdateVpcrouterParam return new DhcpServerUpdateVpcrouterParam
func NewDhcpServerUpdateVpcrouterParam() *DhcpServerUpdateVpcrouterParam {
	return &DhcpServerUpdateVpcrouterParam{}
}

// Initialize init DhcpServerUpdateVpcrouterParam
func (p *DhcpServerUpdateVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DhcpServerUpdateVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DhcpServerUpdateVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Interface) {
		p.Interface = 0
	}
	if utils.IsEmpty(p.RangeStart) {
		p.RangeStart = ""
	}
	if utils.IsEmpty(p.RangeStop) {
		p.RangeStop = ""
	}
	if utils.IsEmpty(p.DnsServers) {
		p.DnsServers = []string{""}
	}

}

func (p *DhcpServerUpdateVpcrouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["range-start"].ValidateFunc
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["range-stop"].ValidateFunc
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["dns-servers"].ValidateFunc
		errs := validator("--dns-servers", p.DnsServers)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DhcpServerUpdateVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpServerUpdateVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["dhcp-server-update"]
}

func (p *DhcpServerUpdateVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DhcpServerUpdateVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DhcpServerUpdateVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DhcpServerUpdateVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DhcpServerUpdateVpcrouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *DhcpServerUpdateVpcrouterParam) GetInterface() int {
	return p.Interface
}
func (p *DhcpServerUpdateVpcrouterParam) SetRangeStart(v string) {
	p.RangeStart = v
}

func (p *DhcpServerUpdateVpcrouterParam) GetRangeStart() string {
	return p.RangeStart
}
func (p *DhcpServerUpdateVpcrouterParam) SetRangeStop(v string) {
	p.RangeStop = v
}

func (p *DhcpServerUpdateVpcrouterParam) GetRangeStop() string {
	return p.RangeStop
}
func (p *DhcpServerUpdateVpcrouterParam) SetDnsServers(v []string) {
	p.DnsServers = v
}

func (p *DhcpServerUpdateVpcrouterParam) GetDnsServers() []string {
	return p.DnsServers
}

// DhcpServerDeleteVpcrouterParam is input parameters for the sacloud API
type DhcpServerDeleteVpcrouterParam struct {
	Interface int

	input Input
}

// NewDhcpServerDeleteVpcrouterParam return new DhcpServerDeleteVpcrouterParam
func NewDhcpServerDeleteVpcrouterParam() *DhcpServerDeleteVpcrouterParam {
	return &DhcpServerDeleteVpcrouterParam{}
}

// Initialize init DhcpServerDeleteVpcrouterParam
func (p *DhcpServerDeleteVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DhcpServerDeleteVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DhcpServerDeleteVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Interface) {
		p.Interface = 0
	}

}

func (p *DhcpServerDeleteVpcrouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-delete"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DhcpServerDeleteVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpServerDeleteVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["dhcp-server-delete"]
}

func (p *DhcpServerDeleteVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DhcpServerDeleteVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DhcpServerDeleteVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DhcpServerDeleteVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DhcpServerDeleteVpcrouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *DhcpServerDeleteVpcrouterParam) GetInterface() int {
	return p.Interface
}

// DhcpStaticMappingInfoVpcrouterParam is input parameters for the sacloud API
type DhcpStaticMappingInfoVpcrouterParam struct {
	input Input
}

// NewDhcpStaticMappingInfoVpcrouterParam return new DhcpStaticMappingInfoVpcrouterParam
func NewDhcpStaticMappingInfoVpcrouterParam() *DhcpStaticMappingInfoVpcrouterParam {
	return &DhcpStaticMappingInfoVpcrouterParam{}
}

// Initialize init DhcpStaticMappingInfoVpcrouterParam
func (p *DhcpStaticMappingInfoVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DhcpStaticMappingInfoVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DhcpStaticMappingInfoVpcrouterParam) fillValueToSkeleton() {

}

func (p *DhcpStaticMappingInfoVpcrouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DhcpStaticMappingInfoVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpStaticMappingInfoVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["dhcp-static-mapping-info"]
}

func (p *DhcpStaticMappingInfoVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DhcpStaticMappingInfoVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DhcpStaticMappingInfoVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DhcpStaticMappingInfoVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// DhcpStaticMappingAddVpcrouterParam is input parameters for the sacloud API
type DhcpStaticMappingAddVpcrouterParam struct {
	Macaddress string
	Ipaddress  string

	input Input
}

// NewDhcpStaticMappingAddVpcrouterParam return new DhcpStaticMappingAddVpcrouterParam
func NewDhcpStaticMappingAddVpcrouterParam() *DhcpStaticMappingAddVpcrouterParam {
	return &DhcpStaticMappingAddVpcrouterParam{}
}

// Initialize init DhcpStaticMappingAddVpcrouterParam
func (p *DhcpStaticMappingAddVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DhcpStaticMappingAddVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DhcpStaticMappingAddVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Macaddress) {
		p.Macaddress = ""
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}

}

func (p *DhcpStaticMappingAddVpcrouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--macaddress", p.Macaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-add"].Params["macaddress"].ValidateFunc
		errs := validator("--macaddress", p.Macaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-add"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DhcpStaticMappingAddVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpStaticMappingAddVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["dhcp-static-mapping-add"]
}

func (p *DhcpStaticMappingAddVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DhcpStaticMappingAddVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DhcpStaticMappingAddVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DhcpStaticMappingAddVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DhcpStaticMappingAddVpcrouterParam) SetMacaddress(v string) {
	p.Macaddress = v
}

func (p *DhcpStaticMappingAddVpcrouterParam) GetMacaddress() string {
	return p.Macaddress
}
func (p *DhcpStaticMappingAddVpcrouterParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *DhcpStaticMappingAddVpcrouterParam) GetIpaddress() string {
	return p.Ipaddress
}

// DhcpStaticMappingUpdateVpcrouterParam is input parameters for the sacloud API
type DhcpStaticMappingUpdateVpcrouterParam struct {
	Index      int
	Macaddress string
	Ipaddress  string

	input Input
}

// NewDhcpStaticMappingUpdateVpcrouterParam return new DhcpStaticMappingUpdateVpcrouterParam
func NewDhcpStaticMappingUpdateVpcrouterParam() *DhcpStaticMappingUpdateVpcrouterParam {
	return &DhcpStaticMappingUpdateVpcrouterParam{}
}

// Initialize init DhcpStaticMappingUpdateVpcrouterParam
func (p *DhcpStaticMappingUpdateVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DhcpStaticMappingUpdateVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Macaddress) {
		p.Macaddress = ""
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}

}

func (p *DhcpStaticMappingUpdateVpcrouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-update"].Params["macaddress"].ValidateFunc
		errs := validator("--macaddress", p.Macaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["dhcp-static-mapping-update"]
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) GetIndex() int {
	return p.Index
}
func (p *DhcpStaticMappingUpdateVpcrouterParam) SetMacaddress(v string) {
	p.Macaddress = v
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) GetMacaddress() string {
	return p.Macaddress
}
func (p *DhcpStaticMappingUpdateVpcrouterParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) GetIpaddress() string {
	return p.Ipaddress
}

// DhcpStaticMappingDeleteVpcrouterParam is input parameters for the sacloud API
type DhcpStaticMappingDeleteVpcrouterParam struct {
	Index int

	input Input
}

// NewDhcpStaticMappingDeleteVpcrouterParam return new DhcpStaticMappingDeleteVpcrouterParam
func NewDhcpStaticMappingDeleteVpcrouterParam() *DhcpStaticMappingDeleteVpcrouterParam {
	return &DhcpStaticMappingDeleteVpcrouterParam{}
}

// Initialize init DhcpStaticMappingDeleteVpcrouterParam
func (p *DhcpStaticMappingDeleteVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DhcpStaticMappingDeleteVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *DhcpStaticMappingDeleteVpcrouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["dhcp-static-mapping-delete"]
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) GetIndex() int {
	return p.Index
}

// PptpServerInfoVpcrouterParam is input parameters for the sacloud API
type PptpServerInfoVpcrouterParam struct {
	input Input
}

// NewPptpServerInfoVpcrouterParam return new PptpServerInfoVpcrouterParam
func NewPptpServerInfoVpcrouterParam() *PptpServerInfoVpcrouterParam {
	return &PptpServerInfoVpcrouterParam{}
}

// Initialize init PptpServerInfoVpcrouterParam
func (p *PptpServerInfoVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PptpServerInfoVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PptpServerInfoVpcrouterParam) fillValueToSkeleton() {

}

func (p *PptpServerInfoVpcrouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *PptpServerInfoVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PptpServerInfoVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["pptp-server-info"]
}

func (p *PptpServerInfoVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PptpServerInfoVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PptpServerInfoVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PptpServerInfoVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// PptpServerUpdateVpcrouterParam is input parameters for the sacloud API
type PptpServerUpdateVpcrouterParam struct {
	Disabled   bool
	RangeStart string
	RangeStop  string

	input Input
}

// NewPptpServerUpdateVpcrouterParam return new PptpServerUpdateVpcrouterParam
func NewPptpServerUpdateVpcrouterParam() *PptpServerUpdateVpcrouterParam {
	return &PptpServerUpdateVpcrouterParam{}
}

// Initialize init PptpServerUpdateVpcrouterParam
func (p *PptpServerUpdateVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PptpServerUpdateVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PptpServerUpdateVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.RangeStart) {
		p.RangeStart = ""
	}
	if utils.IsEmpty(p.RangeStop) {
		p.RangeStop = ""
	}

}

func (p *PptpServerUpdateVpcrouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["pptp-server-update"].Params["range-start"].ValidateFunc
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["pptp-server-update"].Params["range-stop"].ValidateFunc
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PptpServerUpdateVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PptpServerUpdateVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["pptp-server-update"]
}

func (p *PptpServerUpdateVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PptpServerUpdateVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PptpServerUpdateVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PptpServerUpdateVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PptpServerUpdateVpcrouterParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *PptpServerUpdateVpcrouterParam) GetDisabled() bool {
	return p.Disabled
}
func (p *PptpServerUpdateVpcrouterParam) SetRangeStart(v string) {
	p.RangeStart = v
}

func (p *PptpServerUpdateVpcrouterParam) GetRangeStart() string {
	return p.RangeStart
}
func (p *PptpServerUpdateVpcrouterParam) SetRangeStop(v string) {
	p.RangeStop = v
}

func (p *PptpServerUpdateVpcrouterParam) GetRangeStop() string {
	return p.RangeStop
}

// L2tpServerInfoVpcrouterParam is input parameters for the sacloud API
type L2tpServerInfoVpcrouterParam struct {
	input Input
}

// NewL2tpServerInfoVpcrouterParam return new L2tpServerInfoVpcrouterParam
func NewL2tpServerInfoVpcrouterParam() *L2tpServerInfoVpcrouterParam {
	return &L2tpServerInfoVpcrouterParam{}
}

// Initialize init L2tpServerInfoVpcrouterParam
func (p *L2tpServerInfoVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *L2tpServerInfoVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *L2tpServerInfoVpcrouterParam) fillValueToSkeleton() {

}

func (p *L2tpServerInfoVpcrouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *L2tpServerInfoVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *L2tpServerInfoVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["l2tp-server-info"]
}

func (p *L2tpServerInfoVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *L2tpServerInfoVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *L2tpServerInfoVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *L2tpServerInfoVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// L2tpServerUpdateVpcrouterParam is input parameters for the sacloud API
type L2tpServerUpdateVpcrouterParam struct {
	Disabled        bool
	RangeStart      string
	RangeStop       string
	PreSharedSecret string

	input Input
}

// NewL2tpServerUpdateVpcrouterParam return new L2tpServerUpdateVpcrouterParam
func NewL2tpServerUpdateVpcrouterParam() *L2tpServerUpdateVpcrouterParam {
	return &L2tpServerUpdateVpcrouterParam{}
}

// Initialize init L2tpServerUpdateVpcrouterParam
func (p *L2tpServerUpdateVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *L2tpServerUpdateVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *L2tpServerUpdateVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.RangeStart) {
		p.RangeStart = ""
	}
	if utils.IsEmpty(p.RangeStop) {
		p.RangeStop = ""
	}
	if utils.IsEmpty(p.PreSharedSecret) {
		p.PreSharedSecret = ""
	}

}

func (p *L2tpServerUpdateVpcrouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["l2tp-server-update"].Params["range-start"].ValidateFunc
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["l2tp-server-update"].Params["range-stop"].ValidateFunc
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["l2tp-server-update"].Params["pre-shared-secret"].ValidateFunc
		errs := validator("--pre-shared-secret", p.PreSharedSecret)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *L2tpServerUpdateVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *L2tpServerUpdateVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["l2tp-server-update"]
}

func (p *L2tpServerUpdateVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *L2tpServerUpdateVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *L2tpServerUpdateVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *L2tpServerUpdateVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *L2tpServerUpdateVpcrouterParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *L2tpServerUpdateVpcrouterParam) GetDisabled() bool {
	return p.Disabled
}
func (p *L2tpServerUpdateVpcrouterParam) SetRangeStart(v string) {
	p.RangeStart = v
}

func (p *L2tpServerUpdateVpcrouterParam) GetRangeStart() string {
	return p.RangeStart
}
func (p *L2tpServerUpdateVpcrouterParam) SetRangeStop(v string) {
	p.RangeStop = v
}

func (p *L2tpServerUpdateVpcrouterParam) GetRangeStop() string {
	return p.RangeStop
}
func (p *L2tpServerUpdateVpcrouterParam) SetPreSharedSecret(v string) {
	p.PreSharedSecret = v
}

func (p *L2tpServerUpdateVpcrouterParam) GetPreSharedSecret() string {
	return p.PreSharedSecret
}

// UserInfoVpcrouterParam is input parameters for the sacloud API
type UserInfoVpcrouterParam struct {
	input Input
}

// NewUserInfoVpcrouterParam return new UserInfoVpcrouterParam
func NewUserInfoVpcrouterParam() *UserInfoVpcrouterParam {
	return &UserInfoVpcrouterParam{}
}

// Initialize init UserInfoVpcrouterParam
func (p *UserInfoVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UserInfoVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UserInfoVpcrouterParam) fillValueToSkeleton() {

}

func (p *UserInfoVpcrouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *UserInfoVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UserInfoVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["user-info"]
}

func (p *UserInfoVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UserInfoVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UserInfoVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UserInfoVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UserAddVpcrouterParam is input parameters for the sacloud API
type UserAddVpcrouterParam struct {
	Username string
	Password string

	input Input
}

// NewUserAddVpcrouterParam return new UserAddVpcrouterParam
func NewUserAddVpcrouterParam() *UserAddVpcrouterParam {
	return &UserAddVpcrouterParam{}
}

// Initialize init UserAddVpcrouterParam
func (p *UserAddVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UserAddVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UserAddVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Username) {
		p.Username = ""
	}
	if utils.IsEmpty(p.Password) {
		p.Password = ""
	}

}

func (p *UserAddVpcrouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--username", p.Username)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["user-add"].Params["username"].ValidateFunc
		errs := validator("--username", p.Username)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["user-add"].Params["password"].ValidateFunc
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UserAddVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UserAddVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["user-add"]
}

func (p *UserAddVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UserAddVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UserAddVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UserAddVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UserAddVpcrouterParam) SetUsername(v string) {
	p.Username = v
}

func (p *UserAddVpcrouterParam) GetUsername() string {
	return p.Username
}
func (p *UserAddVpcrouterParam) SetPassword(v string) {
	p.Password = v
}

func (p *UserAddVpcrouterParam) GetPassword() string {
	return p.Password
}

// UserUpdateVpcrouterParam is input parameters for the sacloud API
type UserUpdateVpcrouterParam struct {
	Index    int
	Username string
	Password string

	input Input
}

// NewUserUpdateVpcrouterParam return new UserUpdateVpcrouterParam
func NewUserUpdateVpcrouterParam() *UserUpdateVpcrouterParam {
	return &UserUpdateVpcrouterParam{}
}

// Initialize init UserUpdateVpcrouterParam
func (p *UserUpdateVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UserUpdateVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UserUpdateVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Username) {
		p.Username = ""
	}
	if utils.IsEmpty(p.Password) {
		p.Password = ""
	}

}

func (p *UserUpdateVpcrouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["user-update"].Params["username"].ValidateFunc
		errs := validator("--username", p.Username)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["user-update"].Params["password"].ValidateFunc
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UserUpdateVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UserUpdateVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["user-update"]
}

func (p *UserUpdateVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UserUpdateVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UserUpdateVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UserUpdateVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UserUpdateVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *UserUpdateVpcrouterParam) GetIndex() int {
	return p.Index
}
func (p *UserUpdateVpcrouterParam) SetUsername(v string) {
	p.Username = v
}

func (p *UserUpdateVpcrouterParam) GetUsername() string {
	return p.Username
}
func (p *UserUpdateVpcrouterParam) SetPassword(v string) {
	p.Password = v
}

func (p *UserUpdateVpcrouterParam) GetPassword() string {
	return p.Password
}

// UserDeleteVpcrouterParam is input parameters for the sacloud API
type UserDeleteVpcrouterParam struct {
	Index int

	input Input
}

// NewUserDeleteVpcrouterParam return new UserDeleteVpcrouterParam
func NewUserDeleteVpcrouterParam() *UserDeleteVpcrouterParam {
	return &UserDeleteVpcrouterParam{}
}

// Initialize init UserDeleteVpcrouterParam
func (p *UserDeleteVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UserDeleteVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UserDeleteVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *UserDeleteVpcrouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UserDeleteVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UserDeleteVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["user-delete"]
}

func (p *UserDeleteVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UserDeleteVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UserDeleteVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UserDeleteVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UserDeleteVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *UserDeleteVpcrouterParam) GetIndex() int {
	return p.Index
}

// SiteToSiteVpnInfoVpcrouterParam is input parameters for the sacloud API
type SiteToSiteVpnInfoVpcrouterParam struct {
	input Input
}

// NewSiteToSiteVpnInfoVpcrouterParam return new SiteToSiteVpnInfoVpcrouterParam
func NewSiteToSiteVpnInfoVpcrouterParam() *SiteToSiteVpnInfoVpcrouterParam {
	return &SiteToSiteVpnInfoVpcrouterParam{}
}

// Initialize init SiteToSiteVpnInfoVpcrouterParam
func (p *SiteToSiteVpnInfoVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SiteToSiteVpnInfoVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SiteToSiteVpnInfoVpcrouterParam) fillValueToSkeleton() {

}

func (p *SiteToSiteVpnInfoVpcrouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *SiteToSiteVpnInfoVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVpnInfoVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["site-to-site-vpn-info"]
}

func (p *SiteToSiteVpnInfoVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SiteToSiteVpnInfoVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SiteToSiteVpnInfoVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SiteToSiteVpnInfoVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// SiteToSiteVpnAddVpcrouterParam is input parameters for the sacloud API
type SiteToSiteVpnAddVpcrouterParam struct {
	Peer            string
	RemoteId        string
	PreSharedSecret string
	Routes          []string
	LocalPrefix     []string

	input Input
}

// NewSiteToSiteVpnAddVpcrouterParam return new SiteToSiteVpnAddVpcrouterParam
func NewSiteToSiteVpnAddVpcrouterParam() *SiteToSiteVpnAddVpcrouterParam {
	return &SiteToSiteVpnAddVpcrouterParam{}
}

// Initialize init SiteToSiteVpnAddVpcrouterParam
func (p *SiteToSiteVpnAddVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SiteToSiteVpnAddVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SiteToSiteVpnAddVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Peer) {
		p.Peer = ""
	}
	if utils.IsEmpty(p.RemoteId) {
		p.RemoteId = ""
	}
	if utils.IsEmpty(p.PreSharedSecret) {
		p.PreSharedSecret = ""
	}
	if utils.IsEmpty(p.Routes) {
		p.Routes = []string{""}
	}
	if utils.IsEmpty(p.LocalPrefix) {
		p.LocalPrefix = []string{""}
	}

}

func (p *SiteToSiteVpnAddVpcrouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--peer", p.Peer)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["peer"].ValidateFunc
		errs := validator("--peer", p.Peer)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--remote-id", p.RemoteId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--pre-shared-secret", p.PreSharedSecret)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["pre-shared-secret"].ValidateFunc
		errs := validator("--pre-shared-secret", p.PreSharedSecret)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--routes", p.Routes)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["routes"].ValidateFunc
		errs := validator("--routes", p.Routes)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--local-prefix", p.LocalPrefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["local-prefix"].ValidateFunc
		errs := validator("--local-prefix", p.LocalPrefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *SiteToSiteVpnAddVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVpnAddVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["site-to-site-vpn-add"]
}

func (p *SiteToSiteVpnAddVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SiteToSiteVpnAddVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SiteToSiteVpnAddVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SiteToSiteVpnAddVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SiteToSiteVpnAddVpcrouterParam) SetPeer(v string) {
	p.Peer = v
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetPeer() string {
	return p.Peer
}
func (p *SiteToSiteVpnAddVpcrouterParam) SetRemoteId(v string) {
	p.RemoteId = v
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetRemoteId() string {
	return p.RemoteId
}
func (p *SiteToSiteVpnAddVpcrouterParam) SetPreSharedSecret(v string) {
	p.PreSharedSecret = v
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetPreSharedSecret() string {
	return p.PreSharedSecret
}
func (p *SiteToSiteVpnAddVpcrouterParam) SetRoutes(v []string) {
	p.Routes = v
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetRoutes() []string {
	return p.Routes
}
func (p *SiteToSiteVpnAddVpcrouterParam) SetLocalPrefix(v []string) {
	p.LocalPrefix = v
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetLocalPrefix() []string {
	return p.LocalPrefix
}

// SiteToSiteVpnUpdateVpcrouterParam is input parameters for the sacloud API
type SiteToSiteVpnUpdateVpcrouterParam struct {
	Peer            string
	RemoteId        string
	PreSharedSecret string
	Routes          []string
	LocalPrefix     []string
	Index           int

	input Input
}

// NewSiteToSiteVpnUpdateVpcrouterParam return new SiteToSiteVpnUpdateVpcrouterParam
func NewSiteToSiteVpnUpdateVpcrouterParam() *SiteToSiteVpnUpdateVpcrouterParam {
	return &SiteToSiteVpnUpdateVpcrouterParam{}
}

// Initialize init SiteToSiteVpnUpdateVpcrouterParam
func (p *SiteToSiteVpnUpdateVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SiteToSiteVpnUpdateVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Peer) {
		p.Peer = ""
	}
	if utils.IsEmpty(p.RemoteId) {
		p.RemoteId = ""
	}
	if utils.IsEmpty(p.PreSharedSecret) {
		p.PreSharedSecret = ""
	}
	if utils.IsEmpty(p.Routes) {
		p.Routes = []string{""}
	}
	if utils.IsEmpty(p.LocalPrefix) {
		p.LocalPrefix = []string{""}
	}
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *SiteToSiteVpnUpdateVpcrouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["peer"].ValidateFunc
		errs := validator("--peer", p.Peer)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["pre-shared-secret"].ValidateFunc
		errs := validator("--pre-shared-secret", p.PreSharedSecret)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["routes"].ValidateFunc
		errs := validator("--routes", p.Routes)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["local-prefix"].ValidateFunc
		errs := validator("--local-prefix", p.LocalPrefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["site-to-site-vpn-update"]
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) SetPeer(v string) {
	p.Peer = v
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetPeer() string {
	return p.Peer
}
func (p *SiteToSiteVpnUpdateVpcrouterParam) SetRemoteId(v string) {
	p.RemoteId = v
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetRemoteId() string {
	return p.RemoteId
}
func (p *SiteToSiteVpnUpdateVpcrouterParam) SetPreSharedSecret(v string) {
	p.PreSharedSecret = v
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetPreSharedSecret() string {
	return p.PreSharedSecret
}
func (p *SiteToSiteVpnUpdateVpcrouterParam) SetRoutes(v []string) {
	p.Routes = v
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetRoutes() []string {
	return p.Routes
}
func (p *SiteToSiteVpnUpdateVpcrouterParam) SetLocalPrefix(v []string) {
	p.LocalPrefix = v
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetLocalPrefix() []string {
	return p.LocalPrefix
}
func (p *SiteToSiteVpnUpdateVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetIndex() int {
	return p.Index
}

// SiteToSiteVpnDeleteVpcrouterParam is input parameters for the sacloud API
type SiteToSiteVpnDeleteVpcrouterParam struct {
	Index int

	input Input
}

// NewSiteToSiteVpnDeleteVpcrouterParam return new SiteToSiteVpnDeleteVpcrouterParam
func NewSiteToSiteVpnDeleteVpcrouterParam() *SiteToSiteVpnDeleteVpcrouterParam {
	return &SiteToSiteVpnDeleteVpcrouterParam{}
}

// Initialize init SiteToSiteVpnDeleteVpcrouterParam
func (p *SiteToSiteVpnDeleteVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SiteToSiteVpnDeleteVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *SiteToSiteVpnDeleteVpcrouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["site-to-site-vpn-delete"]
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) GetIndex() int {
	return p.Index
}

// SiteToSiteVpnPeersVpcrouterParam is input parameters for the sacloud API
type SiteToSiteVpnPeersVpcrouterParam struct {
	input Input
}

// NewSiteToSiteVpnPeersVpcrouterParam return new SiteToSiteVpnPeersVpcrouterParam
func NewSiteToSiteVpnPeersVpcrouterParam() *SiteToSiteVpnPeersVpcrouterParam {
	return &SiteToSiteVpnPeersVpcrouterParam{}
}

// Initialize init SiteToSiteVpnPeersVpcrouterParam
func (p *SiteToSiteVpnPeersVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SiteToSiteVpnPeersVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SiteToSiteVpnPeersVpcrouterParam) fillValueToSkeleton() {

}

func (p *SiteToSiteVpnPeersVpcrouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *SiteToSiteVpnPeersVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVpnPeersVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["site-to-site-vpn-peers"]
}

func (p *SiteToSiteVpnPeersVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SiteToSiteVpnPeersVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SiteToSiteVpnPeersVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SiteToSiteVpnPeersVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// StaticRouteInfoVpcrouterParam is input parameters for the sacloud API
type StaticRouteInfoVpcrouterParam struct {
	input Input
}

// NewStaticRouteInfoVpcrouterParam return new StaticRouteInfoVpcrouterParam
func NewStaticRouteInfoVpcrouterParam() *StaticRouteInfoVpcrouterParam {
	return &StaticRouteInfoVpcrouterParam{}
}

// Initialize init StaticRouteInfoVpcrouterParam
func (p *StaticRouteInfoVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticRouteInfoVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticRouteInfoVpcrouterParam) fillValueToSkeleton() {

}

func (p *StaticRouteInfoVpcrouterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *StaticRouteInfoVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticRouteInfoVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-info"]
}

func (p *StaticRouteInfoVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteInfoVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteInfoVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteInfoVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// StaticRouteAddVpcrouterParam is input parameters for the sacloud API
type StaticRouteAddVpcrouterParam struct {
	Prefix  string
	NextHop string

	input Input
}

// NewStaticRouteAddVpcrouterParam return new StaticRouteAddVpcrouterParam
func NewStaticRouteAddVpcrouterParam() *StaticRouteAddVpcrouterParam {
	return &StaticRouteAddVpcrouterParam{}
}

// Initialize init StaticRouteAddVpcrouterParam
func (p *StaticRouteAddVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticRouteAddVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticRouteAddVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Prefix) {
		p.Prefix = ""
	}
	if utils.IsEmpty(p.NextHop) {
		p.NextHop = ""
	}

}

func (p *StaticRouteAddVpcrouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-route-add"].Params["prefix"].ValidateFunc
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-route-add"].Params["next-hop"].ValidateFunc
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *StaticRouteAddVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticRouteAddVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-add"]
}

func (p *StaticRouteAddVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteAddVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteAddVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteAddVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticRouteAddVpcrouterParam) SetPrefix(v string) {
	p.Prefix = v
}

func (p *StaticRouteAddVpcrouterParam) GetPrefix() string {
	return p.Prefix
}
func (p *StaticRouteAddVpcrouterParam) SetNextHop(v string) {
	p.NextHop = v
}

func (p *StaticRouteAddVpcrouterParam) GetNextHop() string {
	return p.NextHop
}

// StaticRouteUpdateVpcrouterParam is input parameters for the sacloud API
type StaticRouteUpdateVpcrouterParam struct {
	Index   int
	Prefix  string
	NextHop string

	input Input
}

// NewStaticRouteUpdateVpcrouterParam return new StaticRouteUpdateVpcrouterParam
func NewStaticRouteUpdateVpcrouterParam() *StaticRouteUpdateVpcrouterParam {
	return &StaticRouteUpdateVpcrouterParam{}
}

// Initialize init StaticRouteUpdateVpcrouterParam
func (p *StaticRouteUpdateVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticRouteUpdateVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticRouteUpdateVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Prefix) {
		p.Prefix = ""
	}
	if utils.IsEmpty(p.NextHop) {
		p.NextHop = ""
	}

}

func (p *StaticRouteUpdateVpcrouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["static-route-update"].Params["prefix"].ValidateFunc
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["static-route-update"].Params["next-hop"].ValidateFunc
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *StaticRouteUpdateVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticRouteUpdateVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-update"]
}

func (p *StaticRouteUpdateVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteUpdateVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteUpdateVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteUpdateVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticRouteUpdateVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticRouteUpdateVpcrouterParam) GetIndex() int {
	return p.Index
}
func (p *StaticRouteUpdateVpcrouterParam) SetPrefix(v string) {
	p.Prefix = v
}

func (p *StaticRouteUpdateVpcrouterParam) GetPrefix() string {
	return p.Prefix
}
func (p *StaticRouteUpdateVpcrouterParam) SetNextHop(v string) {
	p.NextHop = v
}

func (p *StaticRouteUpdateVpcrouterParam) GetNextHop() string {
	return p.NextHop
}

// StaticRouteDeleteVpcrouterParam is input parameters for the sacloud API
type StaticRouteDeleteVpcrouterParam struct {
	Index int

	input Input
}

// NewStaticRouteDeleteVpcrouterParam return new StaticRouteDeleteVpcrouterParam
func NewStaticRouteDeleteVpcrouterParam() *StaticRouteDeleteVpcrouterParam {
	return &StaticRouteDeleteVpcrouterParam{}
}

// Initialize init StaticRouteDeleteVpcrouterParam
func (p *StaticRouteDeleteVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticRouteDeleteVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticRouteDeleteVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *StaticRouteDeleteVpcrouterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *StaticRouteDeleteVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticRouteDeleteVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-delete"]
}

func (p *StaticRouteDeleteVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteDeleteVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteDeleteVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteDeleteVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticRouteDeleteVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticRouteDeleteVpcrouterParam) GetIndex() int {
	return p.Index
}

// MonitorVpcrouterParam is input parameters for the sacloud API
type MonitorVpcrouterParam struct {
	Start     string
	End       string
	KeyFormat string
	Interface string

	input Input
}

// NewMonitorVpcrouterParam return new MonitorVpcrouterParam
func NewMonitorVpcrouterParam() *MonitorVpcrouterParam {
	return &MonitorVpcrouterParam{
		KeyFormat: "sakuracloud.vpcrouter.{{.ID}}.nic.{{.Index}}", Interface: "0"}
}

// Initialize init MonitorVpcrouterParam
func (p *MonitorVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if utils.IsEmpty(p.Interface) {
		p.Interface = ""
	}

}

func (p *MonitorVpcrouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["monitor"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["monitor"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["monitor"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *MonitorVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor"]
}

func (p *MonitorVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorVpcrouterParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorVpcrouterParam) GetStart() string {
	return p.Start
}
func (p *MonitorVpcrouterParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorVpcrouterParam) GetEnd() string {
	return p.End
}
func (p *MonitorVpcrouterParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorVpcrouterParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorVpcrouterParam) SetInterface(v string) {
	p.Interface = v
}

func (p *MonitorVpcrouterParam) GetInterface() string {
	return p.Interface
}

// LogsVpcrouterParam is input parameters for the sacloud API
type LogsVpcrouterParam struct {
	LogName         string
	Follow          bool
	RefreshInterval int64
	ListLogNames    bool

	input Input
}

// NewLogsVpcrouterParam return new LogsVpcrouterParam
func NewLogsVpcrouterParam() *LogsVpcrouterParam {
	return &LogsVpcrouterParam{
		LogName: "all", RefreshInterval: 3}
}

// Initialize init LogsVpcrouterParam
func (p *LogsVpcrouterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *LogsVpcrouterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *LogsVpcrouterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.LogName) {
		p.LogName = ""
	}
	if utils.IsEmpty(p.Follow) {
		p.Follow = false
	}
	if utils.IsEmpty(p.RefreshInterval) {
		p.RefreshInterval = 0
	}
	if utils.IsEmpty(p.ListLogNames) {
		p.ListLogNames = false
	}

}

func (p *LogsVpcrouterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["VPCRouter"].Commands["logs"].Params["log-name"].ValidateFunc
		errs := validator("--log-name", p.LogName)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["VPCRouter"].Commands["logs"].Params["refresh-interval"].ValidateFunc
		errs := validator("--refresh-interval", p.RefreshInterval)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *LogsVpcrouterParam) ResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *LogsVpcrouterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["logs"]
}

func (p *LogsVpcrouterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *LogsVpcrouterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *LogsVpcrouterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *LogsVpcrouterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *LogsVpcrouterParam) SetLogName(v string) {
	p.LogName = v
}

func (p *LogsVpcrouterParam) GetLogName() string {
	return p.LogName
}
func (p *LogsVpcrouterParam) SetFollow(v bool) {
	p.Follow = v
}

func (p *LogsVpcrouterParam) GetFollow() bool {
	return p.Follow
}
func (p *LogsVpcrouterParam) SetRefreshInterval(v int64) {
	p.RefreshInterval = v
}

func (p *LogsVpcrouterParam) GetRefreshInterval() int64 {
	return p.RefreshInterval
}
func (p *LogsVpcrouterParam) SetListLogNames(v bool) {
	p.ListLogNames = v
}

func (p *LogsVpcrouterParam) GetListLogNames() bool {
	return p.ListLogNames
}

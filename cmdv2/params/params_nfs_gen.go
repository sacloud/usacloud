// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListNfsParam is input parameters for the sacloud API
type ListNfsParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Tags              []string     `json:"tags"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`

	input Input
}

// NewListNfsParam return new ListNfsParam
func NewListNfsParam(in Input) (*ListNfsParam, error) {
	v := &ListNfsParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListNfsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListNfsParam) validate() error {
	var errors []error
	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ListNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListNfsParam) SetName(v []string) {
	p.Name = v
}

func (p *ListNfsParam) GetName() []string {
	return p.Name
}
func (p *ListNfsParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListNfsParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListNfsParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListNfsParam) GetTags() []string {
	return p.Tags
}
func (p *ListNfsParam) SetFrom(v int) {
	p.From = v
}

func (p *ListNfsParam) GetFrom() int {
	return p.From
}
func (p *ListNfsParam) SetMax(v int) {
	p.Max = v
}

func (p *ListNfsParam) GetMax() int {
	return p.Max
}
func (p *ListNfsParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListNfsParam) GetSort() []string {
	return p.Sort
}
func (p *ListNfsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListNfsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListNfsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListNfsParam) GetParameters() string {
	return p.Parameters
}
func (p *ListNfsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListNfsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListNfsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListNfsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListNfsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListNfsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListNfsParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListNfsParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListNfsParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListNfsParam) GetColumn() []string {
	return p.Column
}
func (p *ListNfsParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListNfsParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListNfsParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListNfsParam) GetFormat() string {
	return p.Format
}
func (p *ListNfsParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListNfsParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListNfsParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListNfsParam) GetQuery() string {
	return p.Query
}
func (p *ListNfsParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListNfsParam) GetQueryFile() string {
	return p.QueryFile
}

// CreateNfsParam is input parameters for the sacloud API
type CreateNfsParam struct {
	SwitchId          sacloud.ID `json:"switch-id"`
	Plan              string     `json:"plan"`
	Size              int        `json:"size"`
	Ipaddress         string     `json:"ipaddress"`
	NwMaskLen         int        `json:"nw-mask-len"`
	DefaultRoute      string     `json:"default-route"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`

	input Input
}

// NewCreateNfsParam return new CreateNfsParam
func NewCreateNfsParam(in Input) (*CreateNfsParam, error) {
	v := &CreateNfsParam{
		Plan: "hdd", Size: 100, input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateNfsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Plan) {
		p.Plan = ""
	}
	if utils.IsEmpty(p.Size) {
		p.Size = 0
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.NwMaskLen) {
		p.NwMaskLen = 0
	}
	if utils.IsEmpty(p.DefaultRoute) {
		p.DefaultRoute = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *CreateNfsParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["size"].ValidateFunc
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--nw-mask-len", p.NwMaskLen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["nw-mask-len"].ValidateFunc
		errs := validator("--nw-mask-len", p.NwMaskLen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["default-route"].ValidateFunc
		errs := validator("--default-route", p.DefaultRoute)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *CreateNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateNfsParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *CreateNfsParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *CreateNfsParam) SetPlan(v string) {
	p.Plan = v
}

func (p *CreateNfsParam) GetPlan() string {
	return p.Plan
}
func (p *CreateNfsParam) SetSize(v int) {
	p.Size = v
}

func (p *CreateNfsParam) GetSize() int {
	return p.Size
}
func (p *CreateNfsParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *CreateNfsParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *CreateNfsParam) SetNwMaskLen(v int) {
	p.NwMaskLen = v
}

func (p *CreateNfsParam) GetNwMaskLen() int {
	return p.NwMaskLen
}
func (p *CreateNfsParam) SetDefaultRoute(v string) {
	p.DefaultRoute = v
}

func (p *CreateNfsParam) GetDefaultRoute() string {
	return p.DefaultRoute
}
func (p *CreateNfsParam) SetName(v string) {
	p.Name = v
}

func (p *CreateNfsParam) GetName() string {
	return p.Name
}
func (p *CreateNfsParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateNfsParam) GetDescription() string {
	return p.Description
}
func (p *CreateNfsParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateNfsParam) GetTags() []string {
	return p.Tags
}
func (p *CreateNfsParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateNfsParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateNfsParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateNfsParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateNfsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateNfsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateNfsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateNfsParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateNfsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateNfsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateNfsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateNfsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateNfsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateNfsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateNfsParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateNfsParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateNfsParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateNfsParam) GetColumn() []string {
	return p.Column
}
func (p *CreateNfsParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateNfsParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateNfsParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateNfsParam) GetFormat() string {
	return p.Format
}
func (p *CreateNfsParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateNfsParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateNfsParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateNfsParam) GetQuery() string {
	return p.Query
}
func (p *CreateNfsParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateNfsParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadNfsParam is input parameters for the sacloud API
type ReadNfsParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewReadNfsParam return new ReadNfsParam
func NewReadNfsParam(in Input) (*ReadNfsParam, error) {
	v := &ReadNfsParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadNfsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReadNfsParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ReadNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ReadNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReadNfsParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadNfsParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadNfsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadNfsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadNfsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadNfsParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadNfsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadNfsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadNfsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadNfsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadNfsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadNfsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadNfsParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadNfsParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadNfsParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadNfsParam) GetColumn() []string {
	return p.Column
}
func (p *ReadNfsParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadNfsParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadNfsParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadNfsParam) GetFormat() string {
	return p.Format
}
func (p *ReadNfsParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadNfsParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadNfsParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadNfsParam) GetQuery() string {
	return p.Query
}
func (p *ReadNfsParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadNfsParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadNfsParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadNfsParam) GetId() sacloud.ID {
	return p.Id
}

// UpdateNfsParam is input parameters for the sacloud API
type UpdateNfsParam struct {
	Selector          []string   `json:"selector"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewUpdateNfsParam return new UpdateNfsParam
func NewUpdateNfsParam(in Input) (*UpdateNfsParam, error) {
	v := &UpdateNfsParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateNfsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UpdateNfsParam) validate() error {
	var errors []error
	{
		validator := define.Resources["NFS"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *UpdateNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateNfsParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateNfsParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateNfsParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateNfsParam) GetName() string {
	return p.Name
}
func (p *UpdateNfsParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateNfsParam) GetDescription() string {
	return p.Description
}
func (p *UpdateNfsParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateNfsParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateNfsParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateNfsParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateNfsParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateNfsParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateNfsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateNfsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateNfsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateNfsParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateNfsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateNfsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateNfsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateNfsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateNfsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateNfsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateNfsParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateNfsParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateNfsParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateNfsParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateNfsParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateNfsParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateNfsParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateNfsParam) GetFormat() string {
	return p.Format
}
func (p *UpdateNfsParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateNfsParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateNfsParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateNfsParam) GetQuery() string {
	return p.Query
}
func (p *UpdateNfsParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateNfsParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateNfsParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateNfsParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteNfsParam is input parameters for the sacloud API
type DeleteNfsParam struct {
	Force             bool       `json:"force"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewDeleteNfsParam return new DeleteNfsParam
func NewDeleteNfsParam(in Input) (*DeleteNfsParam, error) {
	v := &DeleteNfsParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteNfsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Force) {
		p.Force = false
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DeleteNfsParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DeleteNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *DeleteNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteNfsParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteNfsParam) GetForce() bool {
	return p.Force
}
func (p *DeleteNfsParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteNfsParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteNfsParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteNfsParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteNfsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteNfsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteNfsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteNfsParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteNfsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteNfsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteNfsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteNfsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteNfsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteNfsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteNfsParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteNfsParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteNfsParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteNfsParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteNfsParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteNfsParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteNfsParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteNfsParam) GetFormat() string {
	return p.Format
}
func (p *DeleteNfsParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteNfsParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteNfsParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteNfsParam) GetQuery() string {
	return p.Query
}
func (p *DeleteNfsParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteNfsParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteNfsParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteNfsParam) GetId() sacloud.ID {
	return p.Id
}

// BootNfsParam is input parameters for the sacloud API
type BootNfsParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewBootNfsParam return new BootNfsParam
func NewBootNfsParam(in Input) (*BootNfsParam, error) {
	v := &BootNfsParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BootNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BootNfsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *BootNfsParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *BootNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *BootNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["boot"]
}

func (p *BootNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BootNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BootNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BootNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *BootNfsParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *BootNfsParam) GetSelector() []string {
	return p.Selector
}
func (p *BootNfsParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BootNfsParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BootNfsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BootNfsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BootNfsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *BootNfsParam) GetParameters() string {
	return p.Parameters
}
func (p *BootNfsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BootNfsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BootNfsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *BootNfsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *BootNfsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BootNfsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BootNfsParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *BootNfsParam) GetId() sacloud.ID {
	return p.Id
}

// ShutdownNfsParam is input parameters for the sacloud API
type ShutdownNfsParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewShutdownNfsParam return new ShutdownNfsParam
func NewShutdownNfsParam(in Input) (*ShutdownNfsParam, error) {
	v := &ShutdownNfsParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShutdownNfsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ShutdownNfsParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ShutdownNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ShutdownNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown"]
}

func (p *ShutdownNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ShutdownNfsParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ShutdownNfsParam) GetSelector() []string {
	return p.Selector
}
func (p *ShutdownNfsParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ShutdownNfsParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ShutdownNfsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ShutdownNfsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ShutdownNfsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ShutdownNfsParam) GetParameters() string {
	return p.Parameters
}
func (p *ShutdownNfsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ShutdownNfsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ShutdownNfsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ShutdownNfsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ShutdownNfsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ShutdownNfsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ShutdownNfsParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ShutdownNfsParam) GetId() sacloud.ID {
	return p.Id
}

// ShutdownForceNfsParam is input parameters for the sacloud API
type ShutdownForceNfsParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewShutdownForceNfsParam return new ShutdownForceNfsParam
func NewShutdownForceNfsParam(in Input) (*ShutdownForceNfsParam, error) {
	v := &ShutdownForceNfsParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownForceNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShutdownForceNfsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ShutdownForceNfsParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ShutdownForceNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ShutdownForceNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown-force"]
}

func (p *ShutdownForceNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownForceNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownForceNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownForceNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ShutdownForceNfsParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ShutdownForceNfsParam) GetSelector() []string {
	return p.Selector
}
func (p *ShutdownForceNfsParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ShutdownForceNfsParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ShutdownForceNfsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ShutdownForceNfsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ShutdownForceNfsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ShutdownForceNfsParam) GetParameters() string {
	return p.Parameters
}
func (p *ShutdownForceNfsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ShutdownForceNfsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ShutdownForceNfsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ShutdownForceNfsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ShutdownForceNfsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ShutdownForceNfsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ShutdownForceNfsParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ShutdownForceNfsParam) GetId() sacloud.ID {
	return p.Id
}

// ResetNfsParam is input parameters for the sacloud API
type ResetNfsParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewResetNfsParam return new ResetNfsParam
func NewResetNfsParam(in Input) (*ResetNfsParam, error) {
	v := &ResetNfsParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResetNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResetNfsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ResetNfsParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ResetNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ResetNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["reset"]
}

func (p *ResetNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResetNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResetNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResetNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ResetNfsParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ResetNfsParam) GetSelector() []string {
	return p.Selector
}
func (p *ResetNfsParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ResetNfsParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ResetNfsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ResetNfsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ResetNfsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ResetNfsParam) GetParameters() string {
	return p.Parameters
}
func (p *ResetNfsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ResetNfsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ResetNfsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ResetNfsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ResetNfsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ResetNfsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ResetNfsParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ResetNfsParam) GetId() sacloud.ID {
	return p.Id
}

// WaitForBootNfsParam is input parameters for the sacloud API
type WaitForBootNfsParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewWaitForBootNfsParam return new WaitForBootNfsParam
func NewWaitForBootNfsParam(in Input) (*WaitForBootNfsParam, error) {
	v := &WaitForBootNfsParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForBootNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForBootNfsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *WaitForBootNfsParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *WaitForBootNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *WaitForBootNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-boot"]
}

func (p *WaitForBootNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForBootNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForBootNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForBootNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *WaitForBootNfsParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *WaitForBootNfsParam) GetSelector() []string {
	return p.Selector
}
func (p *WaitForBootNfsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForBootNfsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForBootNfsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *WaitForBootNfsParam) GetParameters() string {
	return p.Parameters
}
func (p *WaitForBootNfsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForBootNfsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForBootNfsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *WaitForBootNfsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *WaitForBootNfsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForBootNfsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForBootNfsParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *WaitForBootNfsParam) GetId() sacloud.ID {
	return p.Id
}

// WaitForDownNfsParam is input parameters for the sacloud API
type WaitForDownNfsParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewWaitForDownNfsParam return new WaitForDownNfsParam
func NewWaitForDownNfsParam(in Input) (*WaitForDownNfsParam, error) {
	v := &WaitForDownNfsParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForDownNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForDownNfsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *WaitForDownNfsParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *WaitForDownNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *WaitForDownNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-down"]
}

func (p *WaitForDownNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForDownNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForDownNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForDownNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *WaitForDownNfsParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *WaitForDownNfsParam) GetSelector() []string {
	return p.Selector
}
func (p *WaitForDownNfsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForDownNfsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForDownNfsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *WaitForDownNfsParam) GetParameters() string {
	return p.Parameters
}
func (p *WaitForDownNfsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForDownNfsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForDownNfsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *WaitForDownNfsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *WaitForDownNfsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForDownNfsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForDownNfsParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *WaitForDownNfsParam) GetId() sacloud.ID {
	return p.Id
}

// MonitorNicNfsParam is input parameters for the sacloud API
type MonitorNicNfsParam struct {
	Start             string     `json:"start"`
	End               string     `json:"end"`
	KeyFormat         string     `json:"key-format"`
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewMonitorNicNfsParam return new MonitorNicNfsParam
func NewMonitorNicNfsParam(in Input) (*MonitorNicNfsParam, error) {
	v := &MonitorNicNfsParam{
		KeyFormat: "sakuracloud.disk.{{.ID}}.nic", input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorNicNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorNicNfsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *MonitorNicNfsParam) validate() error {
	var errors []error
	{
		validator := define.Resources["NFS"].Commands["monitor-nic"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["monitor-nic"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorNicNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *MonitorNicNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor-nic"]
}

func (p *MonitorNicNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorNicNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorNicNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorNicNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorNicNfsParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorNicNfsParam) GetStart() string {
	return p.Start
}
func (p *MonitorNicNfsParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorNicNfsParam) GetEnd() string {
	return p.End
}
func (p *MonitorNicNfsParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorNicNfsParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorNicNfsParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *MonitorNicNfsParam) GetSelector() []string {
	return p.Selector
}
func (p *MonitorNicNfsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *MonitorNicNfsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *MonitorNicNfsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *MonitorNicNfsParam) GetParameters() string {
	return p.Parameters
}
func (p *MonitorNicNfsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *MonitorNicNfsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *MonitorNicNfsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *MonitorNicNfsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *MonitorNicNfsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *MonitorNicNfsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *MonitorNicNfsParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *MonitorNicNfsParam) GetOutputType() string {
	return p.OutputType
}
func (p *MonitorNicNfsParam) SetColumn(v []string) {
	p.Column = v
}

func (p *MonitorNicNfsParam) GetColumn() []string {
	return p.Column
}
func (p *MonitorNicNfsParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *MonitorNicNfsParam) GetQuiet() bool {
	return p.Quiet
}
func (p *MonitorNicNfsParam) SetFormat(v string) {
	p.Format = v
}

func (p *MonitorNicNfsParam) GetFormat() string {
	return p.Format
}
func (p *MonitorNicNfsParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *MonitorNicNfsParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *MonitorNicNfsParam) SetQuery(v string) {
	p.Query = v
}

func (p *MonitorNicNfsParam) GetQuery() string {
	return p.Query
}
func (p *MonitorNicNfsParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *MonitorNicNfsParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *MonitorNicNfsParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *MonitorNicNfsParam) GetId() sacloud.ID {
	return p.Id
}

// MonitorFreeDiskSizeNfsParam is input parameters for the sacloud API
type MonitorFreeDiskSizeNfsParam struct {
	Start             string     `json:"start"`
	End               string     `json:"end"`
	KeyFormat         string     `json:"key-format"`
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewMonitorFreeDiskSizeNfsParam return new MonitorFreeDiskSizeNfsParam
func NewMonitorFreeDiskSizeNfsParam(in Input) (*MonitorFreeDiskSizeNfsParam, error) {
	v := &MonitorFreeDiskSizeNfsParam{
		KeyFormat: "sakuracloud.disk.{{.ID}}.free-disk-size", input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorFreeDiskSizeNfsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorFreeDiskSizeNfsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *MonitorFreeDiskSizeNfsParam) validate() error {
	var errors []error
	{
		validator := define.Resources["NFS"].Commands["monitor-free-disk-size"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["monitor-free-disk-size"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorFreeDiskSizeNfsParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *MonitorFreeDiskSizeNfsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor-free-disk-size"]
}

func (p *MonitorFreeDiskSizeNfsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorFreeDiskSizeNfsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorFreeDiskSizeNfsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorFreeDiskSizeNfsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorFreeDiskSizeNfsParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorFreeDiskSizeNfsParam) GetStart() string {
	return p.Start
}
func (p *MonitorFreeDiskSizeNfsParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorFreeDiskSizeNfsParam) GetEnd() string {
	return p.End
}
func (p *MonitorFreeDiskSizeNfsParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorFreeDiskSizeNfsParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorFreeDiskSizeNfsParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *MonitorFreeDiskSizeNfsParam) GetSelector() []string {
	return p.Selector
}
func (p *MonitorFreeDiskSizeNfsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *MonitorFreeDiskSizeNfsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *MonitorFreeDiskSizeNfsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *MonitorFreeDiskSizeNfsParam) GetParameters() string {
	return p.Parameters
}
func (p *MonitorFreeDiskSizeNfsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *MonitorFreeDiskSizeNfsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *MonitorFreeDiskSizeNfsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *MonitorFreeDiskSizeNfsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *MonitorFreeDiskSizeNfsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *MonitorFreeDiskSizeNfsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *MonitorFreeDiskSizeNfsParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *MonitorFreeDiskSizeNfsParam) GetOutputType() string {
	return p.OutputType
}
func (p *MonitorFreeDiskSizeNfsParam) SetColumn(v []string) {
	p.Column = v
}

func (p *MonitorFreeDiskSizeNfsParam) GetColumn() []string {
	return p.Column
}
func (p *MonitorFreeDiskSizeNfsParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *MonitorFreeDiskSizeNfsParam) GetQuiet() bool {
	return p.Quiet
}
func (p *MonitorFreeDiskSizeNfsParam) SetFormat(v string) {
	p.Format = v
}

func (p *MonitorFreeDiskSizeNfsParam) GetFormat() string {
	return p.Format
}
func (p *MonitorFreeDiskSizeNfsParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *MonitorFreeDiskSizeNfsParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *MonitorFreeDiskSizeNfsParam) SetQuery(v string) {
	p.Query = v
}

func (p *MonitorFreeDiskSizeNfsParam) GetQuery() string {
	return p.Query
}
func (p *MonitorFreeDiskSizeNfsParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *MonitorFreeDiskSizeNfsParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *MonitorFreeDiskSizeNfsParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *MonitorFreeDiskSizeNfsParam) GetId() sacloud.ID {
	return p.Id
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListDnsParam is input parameters for the sacloud API
type ListDnsParam struct {
	From int
	Tags []string
	Max  int
	Sort []string
	Name []string
	Id   []sacloud.ID

	input Input
}

// NewListDnsParam return new ListDnsParam
func NewListDnsParam() *ListDnsParam {
	return &ListDnsParam{}
}

// Initialize init ListDnsParam
func (p *ListDnsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListDnsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListDnsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}

}

func (p *ListDnsParam) validate() error {
	var errors []error

	{
		validator := define.Resources["DNS"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["DNS"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListDnsParam) ResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *ListDnsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListDnsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListDnsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListDnsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListDnsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListDnsParam) SetFrom(v int) {
	p.From = v
}

func (p *ListDnsParam) GetFrom() int {
	return p.From
}
func (p *ListDnsParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListDnsParam) GetTags() []string {
	return p.Tags
}
func (p *ListDnsParam) SetMax(v int) {
	p.Max = v
}

func (p *ListDnsParam) GetMax() int {
	return p.Max
}
func (p *ListDnsParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListDnsParam) GetSort() []string {
	return p.Sort
}
func (p *ListDnsParam) SetName(v []string) {
	p.Name = v
}

func (p *ListDnsParam) GetName() []string {
	return p.Name
}
func (p *ListDnsParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListDnsParam) GetId() []sacloud.ID {
	return p.Id
}

// RecordInfoDnsParam is input parameters for the sacloud API
type RecordInfoDnsParam struct {
	Name string
	Type string

	input Input
}

// NewRecordInfoDnsParam return new RecordInfoDnsParam
func NewRecordInfoDnsParam() *RecordInfoDnsParam {
	return &RecordInfoDnsParam{}
}

// Initialize init RecordInfoDnsParam
func (p *RecordInfoDnsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *RecordInfoDnsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *RecordInfoDnsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Type) {
		p.Type = ""
	}

}

func (p *RecordInfoDnsParam) validate() error {
	var errors []error

	{
		validator := define.Resources["DNS"].Commands["record-info"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["DNS"].Commands["record-info"].Params["type"].ValidateFunc
		errs := validator("--type", p.Type)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *RecordInfoDnsParam) ResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *RecordInfoDnsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["record-info"]
}

func (p *RecordInfoDnsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *RecordInfoDnsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *RecordInfoDnsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *RecordInfoDnsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *RecordInfoDnsParam) SetName(v string) {
	p.Name = v
}

func (p *RecordInfoDnsParam) GetName() string {
	return p.Name
}
func (p *RecordInfoDnsParam) SetType(v string) {
	p.Type = v
}

func (p *RecordInfoDnsParam) GetType() string {
	return p.Type
}

// RecordBulkUpdateDnsParam is input parameters for the sacloud API
type RecordBulkUpdateDnsParam struct {
	File string
	Mode string

	input Input
}

// NewRecordBulkUpdateDnsParam return new RecordBulkUpdateDnsParam
func NewRecordBulkUpdateDnsParam() *RecordBulkUpdateDnsParam {
	return &RecordBulkUpdateDnsParam{
		Mode: "upsert-only"}
}

// Initialize init RecordBulkUpdateDnsParam
func (p *RecordBulkUpdateDnsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *RecordBulkUpdateDnsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *RecordBulkUpdateDnsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.File) {
		p.File = ""
	}
	if utils.IsEmpty(p.Mode) {
		p.Mode = ""
	}

}

func (p *RecordBulkUpdateDnsParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--file", p.File)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-bulk-update"].Params["file"].ValidateFunc
		errs := validator("--file", p.File)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--mode", p.Mode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-bulk-update"].Params["mode"].ValidateFunc
		errs := validator("--mode", p.Mode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *RecordBulkUpdateDnsParam) ResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *RecordBulkUpdateDnsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["record-bulk-update"]
}

func (p *RecordBulkUpdateDnsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *RecordBulkUpdateDnsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *RecordBulkUpdateDnsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *RecordBulkUpdateDnsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *RecordBulkUpdateDnsParam) SetFile(v string) {
	p.File = v
}

func (p *RecordBulkUpdateDnsParam) GetFile() string {
	return p.File
}
func (p *RecordBulkUpdateDnsParam) SetMode(v string) {
	p.Mode = v
}

func (p *RecordBulkUpdateDnsParam) GetMode() string {
	return p.Mode
}

// CreateDnsParam is input parameters for the sacloud API
type CreateDnsParam struct {
	Name        string
	Description string
	Tags        []string
	IconId      sacloud.ID

	input Input
}

// NewCreateDnsParam return new CreateDnsParam
func NewCreateDnsParam() *CreateDnsParam {
	return &CreateDnsParam{}
}

// Initialize init CreateDnsParam
func (p *CreateDnsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateDnsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateDnsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}

}

func (p *CreateDnsParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["DNS"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["DNS"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["DNS"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateDnsParam) ResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *CreateDnsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateDnsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateDnsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateDnsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateDnsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateDnsParam) SetName(v string) {
	p.Name = v
}

func (p *CreateDnsParam) GetName() string {
	return p.Name
}
func (p *CreateDnsParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateDnsParam) GetDescription() string {
	return p.Description
}
func (p *CreateDnsParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateDnsParam) GetTags() []string {
	return p.Tags
}
func (p *CreateDnsParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateDnsParam) GetIconId() sacloud.ID {
	return p.IconId
}

// RecordAddDnsParam is input parameters for the sacloud API
type RecordAddDnsParam struct {
	SrvPriority int
	SrvWeight   int
	SrvTarget   string
	Name        string
	Type        string
	Value       string
	Ttl         int
	MxPriority  int
	SrvPort     int

	input Input
}

// NewRecordAddDnsParam return new RecordAddDnsParam
func NewRecordAddDnsParam() *RecordAddDnsParam {
	return &RecordAddDnsParam{
		Ttl: 3600, MxPriority: 10}
}

// Initialize init RecordAddDnsParam
func (p *RecordAddDnsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *RecordAddDnsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *RecordAddDnsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.SrvPriority) {
		p.SrvPriority = 0
	}
	if utils.IsEmpty(p.SrvWeight) {
		p.SrvWeight = 0
	}
	if utils.IsEmpty(p.SrvTarget) {
		p.SrvTarget = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Type) {
		p.Type = ""
	}
	if utils.IsEmpty(p.Value) {
		p.Value = ""
	}
	if utils.IsEmpty(p.Ttl) {
		p.Ttl = 0
	}
	if utils.IsEmpty(p.MxPriority) {
		p.MxPriority = 0
	}
	if utils.IsEmpty(p.SrvPort) {
		p.SrvPort = 0
	}

}

func (p *RecordAddDnsParam) validate() error {
	var errors []error

	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["srv-priority"].ValidateFunc
		errs := validator("--srv-priority", p.SrvPriority)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["srv-weight"].ValidateFunc
		errs := validator("--srv-weight", p.SrvWeight)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["srv-target"].ValidateFunc
		errs := validator("--srv-target", p.SrvTarget)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--type", p.Type)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["type"].ValidateFunc
		errs := validator("--type", p.Type)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["ttl"].ValidateFunc
		errs := validator("--ttl", p.Ttl)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["mx-priority"].ValidateFunc
		errs := validator("--mx-priority", p.MxPriority)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["srv-port"].ValidateFunc
		errs := validator("--srv-port", p.SrvPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *RecordAddDnsParam) ResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *RecordAddDnsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["record-add"]
}

func (p *RecordAddDnsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *RecordAddDnsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *RecordAddDnsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *RecordAddDnsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *RecordAddDnsParam) SetSrvPriority(v int) {
	p.SrvPriority = v
}

func (p *RecordAddDnsParam) GetSrvPriority() int {
	return p.SrvPriority
}
func (p *RecordAddDnsParam) SetSrvWeight(v int) {
	p.SrvWeight = v
}

func (p *RecordAddDnsParam) GetSrvWeight() int {
	return p.SrvWeight
}
func (p *RecordAddDnsParam) SetSrvTarget(v string) {
	p.SrvTarget = v
}

func (p *RecordAddDnsParam) GetSrvTarget() string {
	return p.SrvTarget
}
func (p *RecordAddDnsParam) SetName(v string) {
	p.Name = v
}

func (p *RecordAddDnsParam) GetName() string {
	return p.Name
}
func (p *RecordAddDnsParam) SetType(v string) {
	p.Type = v
}

func (p *RecordAddDnsParam) GetType() string {
	return p.Type
}
func (p *RecordAddDnsParam) SetValue(v string) {
	p.Value = v
}

func (p *RecordAddDnsParam) GetValue() string {
	return p.Value
}
func (p *RecordAddDnsParam) SetTtl(v int) {
	p.Ttl = v
}

func (p *RecordAddDnsParam) GetTtl() int {
	return p.Ttl
}
func (p *RecordAddDnsParam) SetMxPriority(v int) {
	p.MxPriority = v
}

func (p *RecordAddDnsParam) GetMxPriority() int {
	return p.MxPriority
}
func (p *RecordAddDnsParam) SetSrvPort(v int) {
	p.SrvPort = v
}

func (p *RecordAddDnsParam) GetSrvPort() int {
	return p.SrvPort
}

// ReadDnsParam is input parameters for the sacloud API
type ReadDnsParam struct {
	input Input
}

// NewReadDnsParam return new ReadDnsParam
func NewReadDnsParam() *ReadDnsParam {
	return &ReadDnsParam{}
}

// Initialize init ReadDnsParam
func (p *ReadDnsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadDnsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadDnsParam) fillValueToSkeleton() {

}

func (p *ReadDnsParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadDnsParam) ResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *ReadDnsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadDnsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadDnsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadDnsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadDnsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// RecordUpdateDnsParam is input parameters for the sacloud API
type RecordUpdateDnsParam struct {
	Name        string
	Type        string
	Value       string
	Ttl         int
	MxPriority  int
	SrvPriority int
	SrvWeight   int
	SrvTarget   string
	Index       int
	SrvPort     int

	input Input
}

// NewRecordUpdateDnsParam return new RecordUpdateDnsParam
func NewRecordUpdateDnsParam() *RecordUpdateDnsParam {
	return &RecordUpdateDnsParam{}
}

// Initialize init RecordUpdateDnsParam
func (p *RecordUpdateDnsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *RecordUpdateDnsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *RecordUpdateDnsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Type) {
		p.Type = ""
	}
	if utils.IsEmpty(p.Value) {
		p.Value = ""
	}
	if utils.IsEmpty(p.Ttl) {
		p.Ttl = 0
	}
	if utils.IsEmpty(p.MxPriority) {
		p.MxPriority = 0
	}
	if utils.IsEmpty(p.SrvPriority) {
		p.SrvPriority = 0
	}
	if utils.IsEmpty(p.SrvWeight) {
		p.SrvWeight = 0
	}
	if utils.IsEmpty(p.SrvTarget) {
		p.SrvTarget = ""
	}
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.SrvPort) {
		p.SrvPort = 0
	}

}

func (p *RecordUpdateDnsParam) validate() error {
	var errors []error

	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["type"].ValidateFunc
		errs := validator("--type", p.Type)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["ttl"].ValidateFunc
		errs := validator("--ttl", p.Ttl)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["mx-priority"].ValidateFunc
		errs := validator("--mx-priority", p.MxPriority)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["srv-priority"].ValidateFunc
		errs := validator("--srv-priority", p.SrvPriority)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["srv-weight"].ValidateFunc
		errs := validator("--srv-weight", p.SrvWeight)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["srv-target"].ValidateFunc
		errs := validator("--srv-target", p.SrvTarget)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["srv-port"].ValidateFunc
		errs := validator("--srv-port", p.SrvPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *RecordUpdateDnsParam) ResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *RecordUpdateDnsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["record-update"]
}

func (p *RecordUpdateDnsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *RecordUpdateDnsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *RecordUpdateDnsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *RecordUpdateDnsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *RecordUpdateDnsParam) SetName(v string) {
	p.Name = v
}

func (p *RecordUpdateDnsParam) GetName() string {
	return p.Name
}
func (p *RecordUpdateDnsParam) SetType(v string) {
	p.Type = v
}

func (p *RecordUpdateDnsParam) GetType() string {
	return p.Type
}
func (p *RecordUpdateDnsParam) SetValue(v string) {
	p.Value = v
}

func (p *RecordUpdateDnsParam) GetValue() string {
	return p.Value
}
func (p *RecordUpdateDnsParam) SetTtl(v int) {
	p.Ttl = v
}

func (p *RecordUpdateDnsParam) GetTtl() int {
	return p.Ttl
}
func (p *RecordUpdateDnsParam) SetMxPriority(v int) {
	p.MxPriority = v
}

func (p *RecordUpdateDnsParam) GetMxPriority() int {
	return p.MxPriority
}
func (p *RecordUpdateDnsParam) SetSrvPriority(v int) {
	p.SrvPriority = v
}

func (p *RecordUpdateDnsParam) GetSrvPriority() int {
	return p.SrvPriority
}
func (p *RecordUpdateDnsParam) SetSrvWeight(v int) {
	p.SrvWeight = v
}

func (p *RecordUpdateDnsParam) GetSrvWeight() int {
	return p.SrvWeight
}
func (p *RecordUpdateDnsParam) SetSrvTarget(v string) {
	p.SrvTarget = v
}

func (p *RecordUpdateDnsParam) GetSrvTarget() string {
	return p.SrvTarget
}
func (p *RecordUpdateDnsParam) SetIndex(v int) {
	p.Index = v
}

func (p *RecordUpdateDnsParam) GetIndex() int {
	return p.Index
}
func (p *RecordUpdateDnsParam) SetSrvPort(v int) {
	p.SrvPort = v
}

func (p *RecordUpdateDnsParam) GetSrvPort() int {
	return p.SrvPort
}

// RecordDeleteDnsParam is input parameters for the sacloud API
type RecordDeleteDnsParam struct {
	Index int

	input Input
}

// NewRecordDeleteDnsParam return new RecordDeleteDnsParam
func NewRecordDeleteDnsParam() *RecordDeleteDnsParam {
	return &RecordDeleteDnsParam{}
}

// Initialize init RecordDeleteDnsParam
func (p *RecordDeleteDnsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *RecordDeleteDnsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *RecordDeleteDnsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *RecordDeleteDnsParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *RecordDeleteDnsParam) ResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *RecordDeleteDnsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["record-delete"]
}

func (p *RecordDeleteDnsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *RecordDeleteDnsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *RecordDeleteDnsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *RecordDeleteDnsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *RecordDeleteDnsParam) SetIndex(v int) {
	p.Index = v
}

func (p *RecordDeleteDnsParam) GetIndex() int {
	return p.Index
}

// UpdateDnsParam is input parameters for the sacloud API
type UpdateDnsParam struct {
	Tags        []string
	IconId      sacloud.ID
	Description string

	input Input
}

// NewUpdateDnsParam return new UpdateDnsParam
func NewUpdateDnsParam() *UpdateDnsParam {
	return &UpdateDnsParam{}
}

// Initialize init UpdateDnsParam
func (p *UpdateDnsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateDnsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateDnsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}

}

func (p *UpdateDnsParam) validate() error {
	var errors []error

	{
		validator := define.Resources["DNS"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["DNS"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["DNS"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateDnsParam) ResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *UpdateDnsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateDnsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateDnsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateDnsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateDnsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateDnsParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateDnsParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateDnsParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateDnsParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateDnsParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateDnsParam) GetDescription() string {
	return p.Description
}

// DeleteDnsParam is input parameters for the sacloud API
type DeleteDnsParam struct {
	input Input
}

// NewDeleteDnsParam return new DeleteDnsParam
func NewDeleteDnsParam() *DeleteDnsParam {
	return &DeleteDnsParam{}
}

// Initialize init DeleteDnsParam
func (p *DeleteDnsParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteDnsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteDnsParam) fillValueToSkeleton() {

}

func (p *DeleteDnsParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteDnsParam) ResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *DeleteDnsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteDnsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteDnsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteDnsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteDnsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListLoadbalancerParam is input parameters for the sacloud API
type ListLoadbalancerParam struct {
	Max  int
	Sort []string
	Tags []string
	Name []string
	Id   []sacloud.ID
	From int

	input Input
}

// NewListLoadbalancerParam return new ListLoadbalancerParam
func NewListLoadbalancerParam() *ListLoadbalancerParam {
	return &ListLoadbalancerParam{}
}

// Initialize init ListLoadbalancerParam
func (p *ListLoadbalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListLoadbalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListLoadbalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}

}

func (p *ListLoadbalancerParam) validate() error {
	var errors []error

	{
		validator := define.Resources["LoadBalancer"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListLoadbalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ListLoadbalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListLoadbalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListLoadbalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListLoadbalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListLoadbalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListLoadbalancerParam) SetMax(v int) {
	p.Max = v
}

func (p *ListLoadbalancerParam) GetMax() int {
	return p.Max
}
func (p *ListLoadbalancerParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListLoadbalancerParam) GetSort() []string {
	return p.Sort
}
func (p *ListLoadbalancerParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListLoadbalancerParam) GetTags() []string {
	return p.Tags
}
func (p *ListLoadbalancerParam) SetName(v []string) {
	p.Name = v
}

func (p *ListLoadbalancerParam) GetName() []string {
	return p.Name
}
func (p *ListLoadbalancerParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListLoadbalancerParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListLoadbalancerParam) SetFrom(v int) {
	p.From = v
}

func (p *ListLoadbalancerParam) GetFrom() int {
	return p.From
}

// CreateLoadbalancerParam is input parameters for the sacloud API
type CreateLoadbalancerParam struct {
	SwitchId         sacloud.ID
	NwMaskLen        int
	IconId           sacloud.ID
	Ipaddress2       string
	DefaultRoute     string
	Name             string
	Description      string
	Vrid             int
	HighAvailability bool
	Plan             string
	Ipaddress1       string
	Tags             []string

	input Input
}

// NewCreateLoadbalancerParam return new CreateLoadbalancerParam
func NewCreateLoadbalancerParam() *CreateLoadbalancerParam {
	return &CreateLoadbalancerParam{
		Vrid: 1, Plan: "standard"}
}

// Initialize init CreateLoadbalancerParam
func (p *CreateLoadbalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateLoadbalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateLoadbalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.NwMaskLen) {
		p.NwMaskLen = 0
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Ipaddress2) {
		p.Ipaddress2 = ""
	}
	if utils.IsEmpty(p.DefaultRoute) {
		p.DefaultRoute = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Vrid) {
		p.Vrid = 0
	}
	if utils.IsEmpty(p.HighAvailability) {
		p.HighAvailability = false
	}
	if utils.IsEmpty(p.Plan) {
		p.Plan = ""
	}
	if utils.IsEmpty(p.Ipaddress1) {
		p.Ipaddress1 = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}

}

func (p *CreateLoadbalancerParam) validate() error {
	var errors []error

	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--nw-mask-len", p.NwMaskLen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["nw-mask-len"].ValidateFunc
		errs := validator("--nw-mask-len", p.NwMaskLen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["ipaddress2"].ValidateFunc
		errs := validator("--ipaddress-2", p.Ipaddress2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["default-route"].ValidateFunc
		errs := validator("--default-route", p.DefaultRoute)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--vrid", p.Vrid)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateLoadbalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *CreateLoadbalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateLoadbalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateLoadbalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateLoadbalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateLoadbalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateLoadbalancerParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *CreateLoadbalancerParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *CreateLoadbalancerParam) SetNwMaskLen(v int) {
	p.NwMaskLen = v
}

func (p *CreateLoadbalancerParam) GetNwMaskLen() int {
	return p.NwMaskLen
}
func (p *CreateLoadbalancerParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateLoadbalancerParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateLoadbalancerParam) SetIpaddress2(v string) {
	p.Ipaddress2 = v
}

func (p *CreateLoadbalancerParam) GetIpaddress2() string {
	return p.Ipaddress2
}
func (p *CreateLoadbalancerParam) SetDefaultRoute(v string) {
	p.DefaultRoute = v
}

func (p *CreateLoadbalancerParam) GetDefaultRoute() string {
	return p.DefaultRoute
}
func (p *CreateLoadbalancerParam) SetName(v string) {
	p.Name = v
}

func (p *CreateLoadbalancerParam) GetName() string {
	return p.Name
}
func (p *CreateLoadbalancerParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateLoadbalancerParam) GetDescription() string {
	return p.Description
}
func (p *CreateLoadbalancerParam) SetVrid(v int) {
	p.Vrid = v
}

func (p *CreateLoadbalancerParam) GetVrid() int {
	return p.Vrid
}
func (p *CreateLoadbalancerParam) SetHighAvailability(v bool) {
	p.HighAvailability = v
}

func (p *CreateLoadbalancerParam) GetHighAvailability() bool {
	return p.HighAvailability
}
func (p *CreateLoadbalancerParam) SetPlan(v string) {
	p.Plan = v
}

func (p *CreateLoadbalancerParam) GetPlan() string {
	return p.Plan
}
func (p *CreateLoadbalancerParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *CreateLoadbalancerParam) GetIpaddress1() string {
	return p.Ipaddress1
}
func (p *CreateLoadbalancerParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateLoadbalancerParam) GetTags() []string {
	return p.Tags
}

// ReadLoadbalancerParam is input parameters for the sacloud API
type ReadLoadbalancerParam struct {
	input Input
}

// NewReadLoadbalancerParam return new ReadLoadbalancerParam
func NewReadLoadbalancerParam() *ReadLoadbalancerParam {
	return &ReadLoadbalancerParam{}
}

// Initialize init ReadLoadbalancerParam
func (p *ReadLoadbalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadLoadbalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadLoadbalancerParam) fillValueToSkeleton() {

}

func (p *ReadLoadbalancerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadLoadbalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ReadLoadbalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadLoadbalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadLoadbalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadLoadbalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadLoadbalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdateLoadbalancerParam is input parameters for the sacloud API
type UpdateLoadbalancerParam struct {
	IconId      sacloud.ID
	Name        string
	Description string
	Tags        []string

	input Input
}

// NewUpdateLoadbalancerParam return new UpdateLoadbalancerParam
func NewUpdateLoadbalancerParam() *UpdateLoadbalancerParam {
	return &UpdateLoadbalancerParam{}
}

// Initialize init UpdateLoadbalancerParam
func (p *UpdateLoadbalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateLoadbalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateLoadbalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}

}

func (p *UpdateLoadbalancerParam) validate() error {
	var errors []error

	{
		validator := define.Resources["LoadBalancer"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateLoadbalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *UpdateLoadbalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateLoadbalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateLoadbalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateLoadbalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateLoadbalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateLoadbalancerParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateLoadbalancerParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateLoadbalancerParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateLoadbalancerParam) GetName() string {
	return p.Name
}
func (p *UpdateLoadbalancerParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateLoadbalancerParam) GetDescription() string {
	return p.Description
}
func (p *UpdateLoadbalancerParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateLoadbalancerParam) GetTags() []string {
	return p.Tags
}

// DeleteLoadbalancerParam is input parameters for the sacloud API
type DeleteLoadbalancerParam struct {
	Force bool

	input Input
}

// NewDeleteLoadbalancerParam return new DeleteLoadbalancerParam
func NewDeleteLoadbalancerParam() *DeleteLoadbalancerParam {
	return &DeleteLoadbalancerParam{}
}

// Initialize init DeleteLoadbalancerParam
func (p *DeleteLoadbalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteLoadbalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteLoadbalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Force) {
		p.Force = false
	}

}

func (p *DeleteLoadbalancerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteLoadbalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *DeleteLoadbalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteLoadbalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteLoadbalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteLoadbalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteLoadbalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteLoadbalancerParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteLoadbalancerParam) GetForce() bool {
	return p.Force
}

// BootLoadbalancerParam is input parameters for the sacloud API
type BootLoadbalancerParam struct {
	input Input
}

// NewBootLoadbalancerParam return new BootLoadbalancerParam
func NewBootLoadbalancerParam() *BootLoadbalancerParam {
	return &BootLoadbalancerParam{}
}

// Initialize init BootLoadbalancerParam
func (p *BootLoadbalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BootLoadbalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BootLoadbalancerParam) fillValueToSkeleton() {

}

func (p *BootLoadbalancerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *BootLoadbalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *BootLoadbalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["boot"]
}

func (p *BootLoadbalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BootLoadbalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BootLoadbalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BootLoadbalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ShutdownLoadbalancerParam is input parameters for the sacloud API
type ShutdownLoadbalancerParam struct {
	input Input
}

// NewShutdownLoadbalancerParam return new ShutdownLoadbalancerParam
func NewShutdownLoadbalancerParam() *ShutdownLoadbalancerParam {
	return &ShutdownLoadbalancerParam{}
}

// Initialize init ShutdownLoadbalancerParam
func (p *ShutdownLoadbalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownLoadbalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShutdownLoadbalancerParam) fillValueToSkeleton() {

}

func (p *ShutdownLoadbalancerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ShutdownLoadbalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ShutdownLoadbalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown"]
}

func (p *ShutdownLoadbalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownLoadbalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownLoadbalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownLoadbalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ShutdownForceLoadbalancerParam is input parameters for the sacloud API
type ShutdownForceLoadbalancerParam struct {
	input Input
}

// NewShutdownForceLoadbalancerParam return new ShutdownForceLoadbalancerParam
func NewShutdownForceLoadbalancerParam() *ShutdownForceLoadbalancerParam {
	return &ShutdownForceLoadbalancerParam{}
}

// Initialize init ShutdownForceLoadbalancerParam
func (p *ShutdownForceLoadbalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownForceLoadbalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShutdownForceLoadbalancerParam) fillValueToSkeleton() {

}

func (p *ShutdownForceLoadbalancerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ShutdownForceLoadbalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ShutdownForceLoadbalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown-force"]
}

func (p *ShutdownForceLoadbalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownForceLoadbalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownForceLoadbalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownForceLoadbalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ResetLoadbalancerParam is input parameters for the sacloud API
type ResetLoadbalancerParam struct {
	input Input
}

// NewResetLoadbalancerParam return new ResetLoadbalancerParam
func NewResetLoadbalancerParam() *ResetLoadbalancerParam {
	return &ResetLoadbalancerParam{}
}

// Initialize init ResetLoadbalancerParam
func (p *ResetLoadbalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResetLoadbalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResetLoadbalancerParam) fillValueToSkeleton() {

}

func (p *ResetLoadbalancerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ResetLoadbalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ResetLoadbalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["reset"]
}

func (p *ResetLoadbalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResetLoadbalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResetLoadbalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResetLoadbalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// WaitForBootLoadbalancerParam is input parameters for the sacloud API
type WaitForBootLoadbalancerParam struct {
	input Input
}

// NewWaitForBootLoadbalancerParam return new WaitForBootLoadbalancerParam
func NewWaitForBootLoadbalancerParam() *WaitForBootLoadbalancerParam {
	return &WaitForBootLoadbalancerParam{}
}

// Initialize init WaitForBootLoadbalancerParam
func (p *WaitForBootLoadbalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForBootLoadbalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForBootLoadbalancerParam) fillValueToSkeleton() {

}

func (p *WaitForBootLoadbalancerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *WaitForBootLoadbalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *WaitForBootLoadbalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-boot"]
}

func (p *WaitForBootLoadbalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForBootLoadbalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForBootLoadbalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForBootLoadbalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// WaitForDownLoadbalancerParam is input parameters for the sacloud API
type WaitForDownLoadbalancerParam struct {
	input Input
}

// NewWaitForDownLoadbalancerParam return new WaitForDownLoadbalancerParam
func NewWaitForDownLoadbalancerParam() *WaitForDownLoadbalancerParam {
	return &WaitForDownLoadbalancerParam{}
}

// Initialize init WaitForDownLoadbalancerParam
func (p *WaitForDownLoadbalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForDownLoadbalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForDownLoadbalancerParam) fillValueToSkeleton() {

}

func (p *WaitForDownLoadbalancerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *WaitForDownLoadbalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *WaitForDownLoadbalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-down"]
}

func (p *WaitForDownLoadbalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForDownLoadbalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForDownLoadbalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForDownLoadbalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// VipInfoLoadbalancerParam is input parameters for the sacloud API
type VipInfoLoadbalancerParam struct {
	input Input
}

// NewVipInfoLoadbalancerParam return new VipInfoLoadbalancerParam
func NewVipInfoLoadbalancerParam() *VipInfoLoadbalancerParam {
	return &VipInfoLoadbalancerParam{}
}

// Initialize init VipInfoLoadbalancerParam
func (p *VipInfoLoadbalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *VipInfoLoadbalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *VipInfoLoadbalancerParam) fillValueToSkeleton() {

}

func (p *VipInfoLoadbalancerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *VipInfoLoadbalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *VipInfoLoadbalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["vip-info"]
}

func (p *VipInfoLoadbalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *VipInfoLoadbalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *VipInfoLoadbalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *VipInfoLoadbalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// VipAddLoadbalancerParam is input parameters for the sacloud API
type VipAddLoadbalancerParam struct {
	Vip         string
	Port        int
	DelayLoop   int
	SorryServer string
	Description string

	input Input
}

// NewVipAddLoadbalancerParam return new VipAddLoadbalancerParam
func NewVipAddLoadbalancerParam() *VipAddLoadbalancerParam {
	return &VipAddLoadbalancerParam{
		DelayLoop: 10}
}

// Initialize init VipAddLoadbalancerParam
func (p *VipAddLoadbalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *VipAddLoadbalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *VipAddLoadbalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Vip) {
		p.Vip = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if utils.IsEmpty(p.SorryServer) {
		p.SorryServer = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}

}

func (p *VipAddLoadbalancerParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["vip-add"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["vip-add"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["vip-add"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["vip-add"].Params["sorry-server"].ValidateFunc
		errs := validator("--sorry-server", p.SorryServer)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *VipAddLoadbalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *VipAddLoadbalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["vip-add"]
}

func (p *VipAddLoadbalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *VipAddLoadbalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *VipAddLoadbalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *VipAddLoadbalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *VipAddLoadbalancerParam) SetVip(v string) {
	p.Vip = v
}

func (p *VipAddLoadbalancerParam) GetVip() string {
	return p.Vip
}
func (p *VipAddLoadbalancerParam) SetPort(v int) {
	p.Port = v
}

func (p *VipAddLoadbalancerParam) GetPort() int {
	return p.Port
}
func (p *VipAddLoadbalancerParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *VipAddLoadbalancerParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *VipAddLoadbalancerParam) SetSorryServer(v string) {
	p.SorryServer = v
}

func (p *VipAddLoadbalancerParam) GetSorryServer() string {
	return p.SorryServer
}
func (p *VipAddLoadbalancerParam) SetDescription(v string) {
	p.Description = v
}

func (p *VipAddLoadbalancerParam) GetDescription() string {
	return p.Description
}

// VipUpdateLoadbalancerParam is input parameters for the sacloud API
type VipUpdateLoadbalancerParam struct {
	Index       int
	Vip         string
	Port        int
	DelayLoop   int
	SorryServer string
	Description string

	input Input
}

// NewVipUpdateLoadbalancerParam return new VipUpdateLoadbalancerParam
func NewVipUpdateLoadbalancerParam() *VipUpdateLoadbalancerParam {
	return &VipUpdateLoadbalancerParam{
		DelayLoop: 10}
}

// Initialize init VipUpdateLoadbalancerParam
func (p *VipUpdateLoadbalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *VipUpdateLoadbalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *VipUpdateLoadbalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Vip) {
		p.Vip = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if utils.IsEmpty(p.SorryServer) {
		p.SorryServer = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}

}

func (p *VipUpdateLoadbalancerParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["vip-update"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["vip-update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["vip-update"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["vip-update"].Params["sorry-server"].ValidateFunc
		errs := validator("--sorry-server", p.SorryServer)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *VipUpdateLoadbalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *VipUpdateLoadbalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["vip-update"]
}

func (p *VipUpdateLoadbalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *VipUpdateLoadbalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *VipUpdateLoadbalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *VipUpdateLoadbalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *VipUpdateLoadbalancerParam) SetIndex(v int) {
	p.Index = v
}

func (p *VipUpdateLoadbalancerParam) GetIndex() int {
	return p.Index
}
func (p *VipUpdateLoadbalancerParam) SetVip(v string) {
	p.Vip = v
}

func (p *VipUpdateLoadbalancerParam) GetVip() string {
	return p.Vip
}
func (p *VipUpdateLoadbalancerParam) SetPort(v int) {
	p.Port = v
}

func (p *VipUpdateLoadbalancerParam) GetPort() int {
	return p.Port
}
func (p *VipUpdateLoadbalancerParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *VipUpdateLoadbalancerParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *VipUpdateLoadbalancerParam) SetSorryServer(v string) {
	p.SorryServer = v
}

func (p *VipUpdateLoadbalancerParam) GetSorryServer() string {
	return p.SorryServer
}
func (p *VipUpdateLoadbalancerParam) SetDescription(v string) {
	p.Description = v
}

func (p *VipUpdateLoadbalancerParam) GetDescription() string {
	return p.Description
}

// VipDeleteLoadbalancerParam is input parameters for the sacloud API
type VipDeleteLoadbalancerParam struct {
	Index int

	input Input
}

// NewVipDeleteLoadbalancerParam return new VipDeleteLoadbalancerParam
func NewVipDeleteLoadbalancerParam() *VipDeleteLoadbalancerParam {
	return &VipDeleteLoadbalancerParam{}
}

// Initialize init VipDeleteLoadbalancerParam
func (p *VipDeleteLoadbalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *VipDeleteLoadbalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *VipDeleteLoadbalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *VipDeleteLoadbalancerParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *VipDeleteLoadbalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *VipDeleteLoadbalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["vip-delete"]
}

func (p *VipDeleteLoadbalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *VipDeleteLoadbalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *VipDeleteLoadbalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *VipDeleteLoadbalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *VipDeleteLoadbalancerParam) SetIndex(v int) {
	p.Index = v
}

func (p *VipDeleteLoadbalancerParam) GetIndex() int {
	return p.Index
}

// ServerInfoLoadbalancerParam is input parameters for the sacloud API
type ServerInfoLoadbalancerParam struct {
	VipIndex int
	Vip      string
	Port     int

	input Input
}

// NewServerInfoLoadbalancerParam return new ServerInfoLoadbalancerParam
func NewServerInfoLoadbalancerParam() *ServerInfoLoadbalancerParam {
	return &ServerInfoLoadbalancerParam{}
}

// Initialize init ServerInfoLoadbalancerParam
func (p *ServerInfoLoadbalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerInfoLoadbalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerInfoLoadbalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.VipIndex) {
		p.VipIndex = 0
	}
	if utils.IsEmpty(p.Vip) {
		p.Vip = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}

}

func (p *ServerInfoLoadbalancerParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--vip-index", p.VipIndex, map[string]interface{}{

			"--port": p.Port,
			"--vip":  p.Vip,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["server-info"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--vip", p.Vip, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["server-info"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--port", p.Port, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerInfoLoadbalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ServerInfoLoadbalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-info"]
}

func (p *ServerInfoLoadbalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerInfoLoadbalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerInfoLoadbalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerInfoLoadbalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerInfoLoadbalancerParam) SetVipIndex(v int) {
	p.VipIndex = v
}

func (p *ServerInfoLoadbalancerParam) GetVipIndex() int {
	return p.VipIndex
}
func (p *ServerInfoLoadbalancerParam) SetVip(v string) {
	p.Vip = v
}

func (p *ServerInfoLoadbalancerParam) GetVip() string {
	return p.Vip
}
func (p *ServerInfoLoadbalancerParam) SetPort(v int) {
	p.Port = v
}

func (p *ServerInfoLoadbalancerParam) GetPort() int {
	return p.Port
}

// ServerAddLoadbalancerParam is input parameters for the sacloud API
type ServerAddLoadbalancerParam struct {
	Vip          string
	Port         int
	Ipaddress    string
	Protocol     string
	Path         string
	ResponseCode int
	Disabled     bool
	VipIndex     int

	input Input
}

// NewServerAddLoadbalancerParam return new ServerAddLoadbalancerParam
func NewServerAddLoadbalancerParam() *ServerAddLoadbalancerParam {
	return &ServerAddLoadbalancerParam{
		Protocol: "ping"}
}

// Initialize init ServerAddLoadbalancerParam
func (p *ServerAddLoadbalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerAddLoadbalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerAddLoadbalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Vip) {
		p.Vip = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.Path) {
		p.Path = ""
	}
	if utils.IsEmpty(p.ResponseCode) {
		p.ResponseCode = 0
	}
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.VipIndex) {
		p.VipIndex = 0
	}

}

func (p *ServerAddLoadbalancerParam) validate() error {
	var errors []error

	{
		validator := define.Resources["LoadBalancer"].Commands["server-add"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--vip", p.Vip, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["server-add"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--port", p.Port, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["server-add"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["server-add"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--vip-index", p.VipIndex, map[string]interface{}{

			"--port": p.Port,
			"--vip":  p.Vip,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerAddLoadbalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ServerAddLoadbalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-add"]
}

func (p *ServerAddLoadbalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerAddLoadbalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerAddLoadbalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerAddLoadbalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerAddLoadbalancerParam) SetVip(v string) {
	p.Vip = v
}

func (p *ServerAddLoadbalancerParam) GetVip() string {
	return p.Vip
}
func (p *ServerAddLoadbalancerParam) SetPort(v int) {
	p.Port = v
}

func (p *ServerAddLoadbalancerParam) GetPort() int {
	return p.Port
}
func (p *ServerAddLoadbalancerParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerAddLoadbalancerParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerAddLoadbalancerParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *ServerAddLoadbalancerParam) GetProtocol() string {
	return p.Protocol
}
func (p *ServerAddLoadbalancerParam) SetPath(v string) {
	p.Path = v
}

func (p *ServerAddLoadbalancerParam) GetPath() string {
	return p.Path
}
func (p *ServerAddLoadbalancerParam) SetResponseCode(v int) {
	p.ResponseCode = v
}

func (p *ServerAddLoadbalancerParam) GetResponseCode() int {
	return p.ResponseCode
}
func (p *ServerAddLoadbalancerParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *ServerAddLoadbalancerParam) GetDisabled() bool {
	return p.Disabled
}
func (p *ServerAddLoadbalancerParam) SetVipIndex(v int) {
	p.VipIndex = v
}

func (p *ServerAddLoadbalancerParam) GetVipIndex() int {
	return p.VipIndex
}

// ServerUpdateLoadbalancerParam is input parameters for the sacloud API
type ServerUpdateLoadbalancerParam struct {
	Port         int
	Ipaddress    string
	Protocol     string
	Path         string
	ResponseCode int
	Disabled     bool
	VipIndex     int
	Vip          string

	input Input
}

// NewServerUpdateLoadbalancerParam return new ServerUpdateLoadbalancerParam
func NewServerUpdateLoadbalancerParam() *ServerUpdateLoadbalancerParam {
	return &ServerUpdateLoadbalancerParam{}
}

// Initialize init ServerUpdateLoadbalancerParam
func (p *ServerUpdateLoadbalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerUpdateLoadbalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerUpdateLoadbalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.Path) {
		p.Path = ""
	}
	if utils.IsEmpty(p.ResponseCode) {
		p.ResponseCode = 0
	}
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.VipIndex) {
		p.VipIndex = 0
	}
	if utils.IsEmpty(p.Vip) {
		p.Vip = ""
	}

}

func (p *ServerUpdateLoadbalancerParam) validate() error {
	var errors []error

	{
		validator := define.Resources["LoadBalancer"].Commands["server-update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--port", p.Port, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["server-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["server-update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--vip-index", p.VipIndex, map[string]interface{}{

			"--port": p.Port,
			"--vip":  p.Vip,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["server-update"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--vip", p.Vip, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerUpdateLoadbalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ServerUpdateLoadbalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-update"]
}

func (p *ServerUpdateLoadbalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerUpdateLoadbalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerUpdateLoadbalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerUpdateLoadbalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerUpdateLoadbalancerParam) SetPort(v int) {
	p.Port = v
}

func (p *ServerUpdateLoadbalancerParam) GetPort() int {
	return p.Port
}
func (p *ServerUpdateLoadbalancerParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerUpdateLoadbalancerParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerUpdateLoadbalancerParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *ServerUpdateLoadbalancerParam) GetProtocol() string {
	return p.Protocol
}
func (p *ServerUpdateLoadbalancerParam) SetPath(v string) {
	p.Path = v
}

func (p *ServerUpdateLoadbalancerParam) GetPath() string {
	return p.Path
}
func (p *ServerUpdateLoadbalancerParam) SetResponseCode(v int) {
	p.ResponseCode = v
}

func (p *ServerUpdateLoadbalancerParam) GetResponseCode() int {
	return p.ResponseCode
}
func (p *ServerUpdateLoadbalancerParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *ServerUpdateLoadbalancerParam) GetDisabled() bool {
	return p.Disabled
}
func (p *ServerUpdateLoadbalancerParam) SetVipIndex(v int) {
	p.VipIndex = v
}

func (p *ServerUpdateLoadbalancerParam) GetVipIndex() int {
	return p.VipIndex
}
func (p *ServerUpdateLoadbalancerParam) SetVip(v string) {
	p.Vip = v
}

func (p *ServerUpdateLoadbalancerParam) GetVip() string {
	return p.Vip
}

// ServerDeleteLoadbalancerParam is input parameters for the sacloud API
type ServerDeleteLoadbalancerParam struct {
	VipIndex  int
	Vip       string
	Port      int
	Ipaddress string

	input Input
}

// NewServerDeleteLoadbalancerParam return new ServerDeleteLoadbalancerParam
func NewServerDeleteLoadbalancerParam() *ServerDeleteLoadbalancerParam {
	return &ServerDeleteLoadbalancerParam{}
}

// Initialize init ServerDeleteLoadbalancerParam
func (p *ServerDeleteLoadbalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerDeleteLoadbalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerDeleteLoadbalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.VipIndex) {
		p.VipIndex = 0
	}
	if utils.IsEmpty(p.Vip) {
		p.Vip = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}

}

func (p *ServerDeleteLoadbalancerParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--vip-index", p.VipIndex, map[string]interface{}{

			"--port": p.Port,
			"--vip":  p.Vip,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["server-delete"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--vip", p.Vip, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["server-delete"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--port", p.Port, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["server-delete"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerDeleteLoadbalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ServerDeleteLoadbalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-delete"]
}

func (p *ServerDeleteLoadbalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerDeleteLoadbalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerDeleteLoadbalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerDeleteLoadbalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerDeleteLoadbalancerParam) SetVipIndex(v int) {
	p.VipIndex = v
}

func (p *ServerDeleteLoadbalancerParam) GetVipIndex() int {
	return p.VipIndex
}
func (p *ServerDeleteLoadbalancerParam) SetVip(v string) {
	p.Vip = v
}

func (p *ServerDeleteLoadbalancerParam) GetVip() string {
	return p.Vip
}
func (p *ServerDeleteLoadbalancerParam) SetPort(v int) {
	p.Port = v
}

func (p *ServerDeleteLoadbalancerParam) GetPort() int {
	return p.Port
}
func (p *ServerDeleteLoadbalancerParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerDeleteLoadbalancerParam) GetIpaddress() string {
	return p.Ipaddress
}

// MonitorLoadbalancerParam is input parameters for the sacloud API
type MonitorLoadbalancerParam struct {
	End       string
	KeyFormat string
	Start     string

	input Input
}

// NewMonitorLoadbalancerParam return new MonitorLoadbalancerParam
func NewMonitorLoadbalancerParam() *MonitorLoadbalancerParam {
	return &MonitorLoadbalancerParam{
		KeyFormat: "sakuracloud.loadbalancer.{{.ID}}.nic"}
}

// Initialize init MonitorLoadbalancerParam
func (p *MonitorLoadbalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorLoadbalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorLoadbalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}

}

func (p *MonitorLoadbalancerParam) validate() error {
	var errors []error

	{
		validator := define.Resources["LoadBalancer"].Commands["monitor"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["monitor"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorLoadbalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *MonitorLoadbalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor"]
}

func (p *MonitorLoadbalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorLoadbalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorLoadbalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorLoadbalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorLoadbalancerParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorLoadbalancerParam) GetEnd() string {
	return p.End
}
func (p *MonitorLoadbalancerParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorLoadbalancerParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorLoadbalancerParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorLoadbalancerParam) GetStart() string {
	return p.Start
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/schema"
)

// ListObjectstorageParam is input parameters for the sacloud API
type ListObjectstorageParam struct {
	AccessKey string
	SecretKey string
	Bucket    string

	input Input
}

// NewListObjectstorageParam return new ListObjectstorageParam
func NewListObjectstorageParam() *ListObjectstorageParam {
	return &ListObjectstorageParam{}
}

// Initialize init ListObjectstorageParam
func (p *ListObjectstorageParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListObjectstorageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListObjectstorageParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.AccessKey) {
		p.AccessKey = ""
	}
	if utils.IsEmpty(p.SecretKey) {
		p.SecretKey = ""
	}
	if utils.IsEmpty(p.Bucket) {
		p.Bucket = ""
	}

}

func (p *ListObjectstorageParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--access-key", p.AccessKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--secret-key", p.SecretKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListObjectstorageParam) ResourceDef() *schema.Resource {
	return define.Resources["ObjectStorage"]
}

func (p *ListObjectstorageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListObjectstorageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListObjectstorageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListObjectstorageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListObjectstorageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListObjectstorageParam) SetAccessKey(v string) {
	p.AccessKey = v
}

func (p *ListObjectstorageParam) GetAccessKey() string {
	return p.AccessKey
}
func (p *ListObjectstorageParam) SetSecretKey(v string) {
	p.SecretKey = v
}

func (p *ListObjectstorageParam) GetSecretKey() string {
	return p.SecretKey
}
func (p *ListObjectstorageParam) SetBucket(v string) {
	p.Bucket = v
}

func (p *ListObjectstorageParam) GetBucket() string {
	return p.Bucket
}

// PutObjectstorageParam is input parameters for the sacloud API
type PutObjectstorageParam struct {
	AccessKey   string
	SecretKey   string
	Bucket      string
	ContentType string
	Recursive   bool

	input Input
}

// NewPutObjectstorageParam return new PutObjectstorageParam
func NewPutObjectstorageParam() *PutObjectstorageParam {
	return &PutObjectstorageParam{
		ContentType: "application/octet-stream"}
}

// Initialize init PutObjectstorageParam
func (p *PutObjectstorageParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PutObjectstorageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PutObjectstorageParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.AccessKey) {
		p.AccessKey = ""
	}
	if utils.IsEmpty(p.SecretKey) {
		p.SecretKey = ""
	}
	if utils.IsEmpty(p.Bucket) {
		p.Bucket = ""
	}
	if utils.IsEmpty(p.ContentType) {
		p.ContentType = ""
	}
	if utils.IsEmpty(p.Recursive) {
		p.Recursive = false
	}

}

func (p *PutObjectstorageParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--access-key", p.AccessKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--secret-key", p.SecretKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PutObjectstorageParam) ResourceDef() *schema.Resource {
	return define.Resources["ObjectStorage"]
}

func (p *PutObjectstorageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["put"]
}

func (p *PutObjectstorageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PutObjectstorageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PutObjectstorageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PutObjectstorageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PutObjectstorageParam) SetAccessKey(v string) {
	p.AccessKey = v
}

func (p *PutObjectstorageParam) GetAccessKey() string {
	return p.AccessKey
}
func (p *PutObjectstorageParam) SetSecretKey(v string) {
	p.SecretKey = v
}

func (p *PutObjectstorageParam) GetSecretKey() string {
	return p.SecretKey
}
func (p *PutObjectstorageParam) SetBucket(v string) {
	p.Bucket = v
}

func (p *PutObjectstorageParam) GetBucket() string {
	return p.Bucket
}
func (p *PutObjectstorageParam) SetContentType(v string) {
	p.ContentType = v
}

func (p *PutObjectstorageParam) GetContentType() string {
	return p.ContentType
}
func (p *PutObjectstorageParam) SetRecursive(v bool) {
	p.Recursive = v
}

func (p *PutObjectstorageParam) GetRecursive() bool {
	return p.Recursive
}

// GetObjectstorageParam is input parameters for the sacloud API
type GetObjectstorageParam struct {
	Recursive bool
	AccessKey string
	SecretKey string
	Bucket    string

	input Input
}

// NewGetObjectstorageParam return new GetObjectstorageParam
func NewGetObjectstorageParam() *GetObjectstorageParam {
	return &GetObjectstorageParam{}
}

// Initialize init GetObjectstorageParam
func (p *GetObjectstorageParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *GetObjectstorageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *GetObjectstorageParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Recursive) {
		p.Recursive = false
	}
	if utils.IsEmpty(p.AccessKey) {
		p.AccessKey = ""
	}
	if utils.IsEmpty(p.SecretKey) {
		p.SecretKey = ""
	}
	if utils.IsEmpty(p.Bucket) {
		p.Bucket = ""
	}

}

func (p *GetObjectstorageParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--access-key", p.AccessKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--secret-key", p.SecretKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *GetObjectstorageParam) ResourceDef() *schema.Resource {
	return define.Resources["ObjectStorage"]
}

func (p *GetObjectstorageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["get"]
}

func (p *GetObjectstorageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *GetObjectstorageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *GetObjectstorageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *GetObjectstorageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *GetObjectstorageParam) SetRecursive(v bool) {
	p.Recursive = v
}

func (p *GetObjectstorageParam) GetRecursive() bool {
	return p.Recursive
}
func (p *GetObjectstorageParam) SetAccessKey(v string) {
	p.AccessKey = v
}

func (p *GetObjectstorageParam) GetAccessKey() string {
	return p.AccessKey
}
func (p *GetObjectstorageParam) SetSecretKey(v string) {
	p.SecretKey = v
}

func (p *GetObjectstorageParam) GetSecretKey() string {
	return p.SecretKey
}
func (p *GetObjectstorageParam) SetBucket(v string) {
	p.Bucket = v
}

func (p *GetObjectstorageParam) GetBucket() string {
	return p.Bucket
}

// DeleteObjectstorageParam is input parameters for the sacloud API
type DeleteObjectstorageParam struct {
	AccessKey string
	SecretKey string
	Bucket    string
	Recursive bool

	input Input
}

// NewDeleteObjectstorageParam return new DeleteObjectstorageParam
func NewDeleteObjectstorageParam() *DeleteObjectstorageParam {
	return &DeleteObjectstorageParam{}
}

// Initialize init DeleteObjectstorageParam
func (p *DeleteObjectstorageParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteObjectstorageParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteObjectstorageParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.AccessKey) {
		p.AccessKey = ""
	}
	if utils.IsEmpty(p.SecretKey) {
		p.SecretKey = ""
	}
	if utils.IsEmpty(p.Bucket) {
		p.Bucket = ""
	}
	if utils.IsEmpty(p.Recursive) {
		p.Recursive = false
	}

}

func (p *DeleteObjectstorageParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--access-key", p.AccessKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--secret-key", p.SecretKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DeleteObjectstorageParam) ResourceDef() *schema.Resource {
	return define.Resources["ObjectStorage"]
}

func (p *DeleteObjectstorageParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteObjectstorageParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteObjectstorageParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteObjectstorageParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteObjectstorageParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteObjectstorageParam) SetAccessKey(v string) {
	p.AccessKey = v
}

func (p *DeleteObjectstorageParam) GetAccessKey() string {
	return p.AccessKey
}
func (p *DeleteObjectstorageParam) SetSecretKey(v string) {
	p.SecretKey = v
}

func (p *DeleteObjectstorageParam) GetSecretKey() string {
	return p.SecretKey
}
func (p *DeleteObjectstorageParam) SetBucket(v string) {
	p.Bucket = v
}

func (p *DeleteObjectstorageParam) GetBucket() string {
	return p.Bucket
}
func (p *DeleteObjectstorageParam) SetRecursive(v bool) {
	p.Recursive = v
}

func (p *DeleteObjectstorageParam) GetRecursive() bool {
	return p.Recursive
}

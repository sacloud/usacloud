// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListIpv4Param is input parameters for the sacloud API
type ListIpv4Param struct {
	Max  int
	Sort []string
	Name []string
	Id   []sacloud.ID
	From int

	input Input
}

// NewListIpv4Param return new ListIpv4Param
func NewListIpv4Param() *ListIpv4Param {
	return &ListIpv4Param{}
}

// Initialize init ListIpv4Param
func (p *ListIpv4Param) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListIpv4Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListIpv4Param) fillValueToSkeleton() {
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}

}

func (p *ListIpv4Param) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["IPv4"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListIpv4Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv4"]
}

func (p *ListIpv4Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListIpv4Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListIpv4Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListIpv4Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListIpv4Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListIpv4Param) SetMax(v int) {
	p.Max = v
}

func (p *ListIpv4Param) GetMax() int {
	return p.Max
}
func (p *ListIpv4Param) SetSort(v []string) {
	p.Sort = v
}

func (p *ListIpv4Param) GetSort() []string {
	return p.Sort
}
func (p *ListIpv4Param) SetName(v []string) {
	p.Name = v
}

func (p *ListIpv4Param) GetName() []string {
	return p.Name
}
func (p *ListIpv4Param) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListIpv4Param) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListIpv4Param) SetFrom(v int) {
	p.From = v
}

func (p *ListIpv4Param) GetFrom() int {
	return p.From
}

// PtrAddIpv4Param is input parameters for the sacloud API
type PtrAddIpv4Param struct {
	Hostname string

	input Input
}

// NewPtrAddIpv4Param return new PtrAddIpv4Param
func NewPtrAddIpv4Param() *PtrAddIpv4Param {
	return &PtrAddIpv4Param{}
}

// Initialize init PtrAddIpv4Param
func (p *PtrAddIpv4Param) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PtrAddIpv4Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PtrAddIpv4Param) fillValueToSkeleton() {
	if utils.IsEmpty(p.Hostname) {
		p.Hostname = ""
	}

}

func (p *PtrAddIpv4Param) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--hostname", p.Hostname)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PtrAddIpv4Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv4"]
}

func (p *PtrAddIpv4Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ptr-add"]
}

func (p *PtrAddIpv4Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PtrAddIpv4Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PtrAddIpv4Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PtrAddIpv4Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PtrAddIpv4Param) SetHostname(v string) {
	p.Hostname = v
}

func (p *PtrAddIpv4Param) GetHostname() string {
	return p.Hostname
}

// PtrReadIpv4Param is input parameters for the sacloud API
type PtrReadIpv4Param struct {
	input Input
}

// NewPtrReadIpv4Param return new PtrReadIpv4Param
func NewPtrReadIpv4Param() *PtrReadIpv4Param {
	return &PtrReadIpv4Param{}
}

// Initialize init PtrReadIpv4Param
func (p *PtrReadIpv4Param) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PtrReadIpv4Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PtrReadIpv4Param) fillValueToSkeleton() {

}

func (p *PtrReadIpv4Param) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *PtrReadIpv4Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv4"]
}

func (p *PtrReadIpv4Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ptr-read"]
}

func (p *PtrReadIpv4Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PtrReadIpv4Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PtrReadIpv4Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PtrReadIpv4Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// PtrUpdateIpv4Param is input parameters for the sacloud API
type PtrUpdateIpv4Param struct {
	Hostname string

	input Input
}

// NewPtrUpdateIpv4Param return new PtrUpdateIpv4Param
func NewPtrUpdateIpv4Param() *PtrUpdateIpv4Param {
	return &PtrUpdateIpv4Param{}
}

// Initialize init PtrUpdateIpv4Param
func (p *PtrUpdateIpv4Param) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PtrUpdateIpv4Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PtrUpdateIpv4Param) fillValueToSkeleton() {
	if utils.IsEmpty(p.Hostname) {
		p.Hostname = ""
	}

}

func (p *PtrUpdateIpv4Param) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--hostname", p.Hostname)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PtrUpdateIpv4Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv4"]
}

func (p *PtrUpdateIpv4Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ptr-update"]
}

func (p *PtrUpdateIpv4Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PtrUpdateIpv4Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PtrUpdateIpv4Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PtrUpdateIpv4Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PtrUpdateIpv4Param) SetHostname(v string) {
	p.Hostname = v
}

func (p *PtrUpdateIpv4Param) GetHostname() string {
	return p.Hostname
}

// PtrDeleteIpv4Param is input parameters for the sacloud API
type PtrDeleteIpv4Param struct {
	input Input
}

// NewPtrDeleteIpv4Param return new PtrDeleteIpv4Param
func NewPtrDeleteIpv4Param() *PtrDeleteIpv4Param {
	return &PtrDeleteIpv4Param{}
}

// Initialize init PtrDeleteIpv4Param
func (p *PtrDeleteIpv4Param) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PtrDeleteIpv4Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PtrDeleteIpv4Param) fillValueToSkeleton() {

}

func (p *PtrDeleteIpv4Param) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *PtrDeleteIpv4Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv4"]
}

func (p *PtrDeleteIpv4Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ptr-delete"]
}

func (p *PtrDeleteIpv4Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PtrDeleteIpv4Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PtrDeleteIpv4Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PtrDeleteIpv4Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListIconParam is input parameters for the sacloud API
type ListIconParam struct {
	Scope string
	Tags  []string
	Name  []string
	Id    []sacloud.ID
	From  int
	Max   int
	Sort  []string

	input Input
}

// NewListIconParam return new ListIconParam
func NewListIconParam() *ListIconParam {
	return &ListIconParam{}
}

// Initialize init ListIconParam
func (p *ListIconParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListIconParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListIconParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Scope) {
		p.Scope = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}

}

func (p *ListIconParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Icon"].Commands["list"].Params["scope"].ValidateFunc
		errs := validator("--scope", p.Scope)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Icon"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Icon"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListIconParam) ResourceDef() *schema.Resource {
	return define.Resources["Icon"]
}

func (p *ListIconParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListIconParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListIconParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListIconParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListIconParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListIconParam) SetScope(v string) {
	p.Scope = v
}

func (p *ListIconParam) GetScope() string {
	return p.Scope
}
func (p *ListIconParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListIconParam) GetTags() []string {
	return p.Tags
}
func (p *ListIconParam) SetName(v []string) {
	p.Name = v
}

func (p *ListIconParam) GetName() []string {
	return p.Name
}
func (p *ListIconParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListIconParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListIconParam) SetFrom(v int) {
	p.From = v
}

func (p *ListIconParam) GetFrom() int {
	return p.From
}
func (p *ListIconParam) SetMax(v int) {
	p.Max = v
}

func (p *ListIconParam) GetMax() int {
	return p.Max
}
func (p *ListIconParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListIconParam) GetSort() []string {
	return p.Sort
}

// CreateIconParam is input parameters for the sacloud API
type CreateIconParam struct {
	Name  string
	Tags  []string
	Image string

	input Input
}

// NewCreateIconParam return new CreateIconParam
func NewCreateIconParam() *CreateIconParam {
	return &CreateIconParam{}
}

// Initialize init CreateIconParam
func (p *CreateIconParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateIconParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateIconParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Image) {
		p.Image = ""
	}

}

func (p *CreateIconParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Icon"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Icon"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--image", p.Image)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Icon"].Commands["create"].Params["image"].ValidateFunc
		errs := validator("--image", p.Image)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateIconParam) ResourceDef() *schema.Resource {
	return define.Resources["Icon"]
}

func (p *CreateIconParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateIconParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateIconParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateIconParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateIconParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateIconParam) SetName(v string) {
	p.Name = v
}

func (p *CreateIconParam) GetName() string {
	return p.Name
}
func (p *CreateIconParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateIconParam) GetTags() []string {
	return p.Tags
}
func (p *CreateIconParam) SetImage(v string) {
	p.Image = v
}

func (p *CreateIconParam) GetImage() string {
	return p.Image
}

// ReadIconParam is input parameters for the sacloud API
type ReadIconParam struct {
	input Input
}

// NewReadIconParam return new ReadIconParam
func NewReadIconParam() *ReadIconParam {
	return &ReadIconParam{}
}

// Initialize init ReadIconParam
func (p *ReadIconParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadIconParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadIconParam) fillValueToSkeleton() {

}

func (p *ReadIconParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadIconParam) ResourceDef() *schema.Resource {
	return define.Resources["Icon"]
}

func (p *ReadIconParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadIconParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadIconParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadIconParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadIconParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdateIconParam is input parameters for the sacloud API
type UpdateIconParam struct {
	Name string
	Tags []string

	input Input
}

// NewUpdateIconParam return new UpdateIconParam
func NewUpdateIconParam() *UpdateIconParam {
	return &UpdateIconParam{}
}

// Initialize init UpdateIconParam
func (p *UpdateIconParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateIconParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateIconParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}

}

func (p *UpdateIconParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Icon"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Icon"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateIconParam) ResourceDef() *schema.Resource {
	return define.Resources["Icon"]
}

func (p *UpdateIconParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateIconParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateIconParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateIconParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateIconParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateIconParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateIconParam) GetName() string {
	return p.Name
}
func (p *UpdateIconParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateIconParam) GetTags() []string {
	return p.Tags
}

// DeleteIconParam is input parameters for the sacloud API
type DeleteIconParam struct {
	input Input
}

// NewDeleteIconParam return new DeleteIconParam
func NewDeleteIconParam() *DeleteIconParam {
	return &DeleteIconParam{}
}

// Initialize init DeleteIconParam
func (p *DeleteIconParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteIconParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteIconParam) fillValueToSkeleton() {

}

func (p *DeleteIconParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteIconParam) ResourceDef() *schema.Resource {
	return define.Resources["Icon"]
}

func (p *DeleteIconParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteIconParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteIconParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteIconParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteIconParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListWebAccelParam is input parameters for the sacloud API
type ListWebAccelParam struct {
	input Input
}

// NewListWebAccelParam return new ListWebAccelParam
func NewListWebAccelParam() *ListWebAccelParam {
	return &ListWebAccelParam{}
}

// Initialize init ListWebAccelParam
func (p *ListWebAccelParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListWebAccelParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListWebAccelParam) fillValueToSkeleton() {

}

func (p *ListWebAccelParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ListWebAccelParam) ResourceDef() *schema.Resource {
	return define.Resources["WebAccel"]
}

func (p *ListWebAccelParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListWebAccelParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListWebAccelParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListWebAccelParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListWebAccelParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ReadWebAccelParam is input parameters for the sacloud API
type ReadWebAccelParam struct {
	input Input
}

// NewReadWebAccelParam return new ReadWebAccelParam
func NewReadWebAccelParam() *ReadWebAccelParam {
	return &ReadWebAccelParam{}
}

// Initialize init ReadWebAccelParam
func (p *ReadWebAccelParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadWebAccelParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadWebAccelParam) fillValueToSkeleton() {

}

func (p *ReadWebAccelParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadWebAccelParam) ResourceDef() *schema.Resource {
	return define.Resources["WebAccel"]
}

func (p *ReadWebAccelParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadWebAccelParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadWebAccelParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadWebAccelParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadWebAccelParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// CertificateInfoWebAccelParam is input parameters for the sacloud API
type CertificateInfoWebAccelParam struct {
	input Input
}

// NewCertificateInfoWebAccelParam return new CertificateInfoWebAccelParam
func NewCertificateInfoWebAccelParam() *CertificateInfoWebAccelParam {
	return &CertificateInfoWebAccelParam{}
}

// Initialize init CertificateInfoWebAccelParam
func (p *CertificateInfoWebAccelParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CertificateInfoWebAccelParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CertificateInfoWebAccelParam) fillValueToSkeleton() {

}

func (p *CertificateInfoWebAccelParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *CertificateInfoWebAccelParam) ResourceDef() *schema.Resource {
	return define.Resources["WebAccel"]
}

func (p *CertificateInfoWebAccelParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["certificate-info"]
}

func (p *CertificateInfoWebAccelParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CertificateInfoWebAccelParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CertificateInfoWebAccelParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CertificateInfoWebAccelParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// CertificateNewWebAccelParam is input parameters for the sacloud API
type CertificateNewWebAccelParam struct {
	KeyContent  string
	Cert        string
	Key         string
	CertContent string

	input Input
}

// NewCertificateNewWebAccelParam return new CertificateNewWebAccelParam
func NewCertificateNewWebAccelParam() *CertificateNewWebAccelParam {
	return &CertificateNewWebAccelParam{}
}

// Initialize init CertificateNewWebAccelParam
func (p *CertificateNewWebAccelParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CertificateNewWebAccelParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CertificateNewWebAccelParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.KeyContent) {
		p.KeyContent = ""
	}
	if utils.IsEmpty(p.Cert) {
		p.Cert = ""
	}
	if utils.IsEmpty(p.Key) {
		p.Key = ""
	}
	if utils.IsEmpty(p.CertContent) {
		p.CertContent = ""
	}

}

func (p *CertificateNewWebAccelParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--key-content", p.KeyContent, map[string]interface{}{

			"--key": p.Key,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["WebAccel"].Commands["certificate-new"].Params["cert"].ValidateFunc
		errs := validator("--cert", p.Cert)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["WebAccel"].Commands["certificate-new"].Params["key"].ValidateFunc
		errs := validator("--key", p.Key)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--cert-content", p.CertContent, map[string]interface{}{

			"--cert": p.Cert,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CertificateNewWebAccelParam) ResourceDef() *schema.Resource {
	return define.Resources["WebAccel"]
}

func (p *CertificateNewWebAccelParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["certificate-new"]
}

func (p *CertificateNewWebAccelParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CertificateNewWebAccelParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CertificateNewWebAccelParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CertificateNewWebAccelParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CertificateNewWebAccelParam) SetKeyContent(v string) {
	p.KeyContent = v
}

func (p *CertificateNewWebAccelParam) GetKeyContent() string {
	return p.KeyContent
}
func (p *CertificateNewWebAccelParam) SetCert(v string) {
	p.Cert = v
}

func (p *CertificateNewWebAccelParam) GetCert() string {
	return p.Cert
}
func (p *CertificateNewWebAccelParam) SetKey(v string) {
	p.Key = v
}

func (p *CertificateNewWebAccelParam) GetKey() string {
	return p.Key
}
func (p *CertificateNewWebAccelParam) SetCertContent(v string) {
	p.CertContent = v
}

func (p *CertificateNewWebAccelParam) GetCertContent() string {
	return p.CertContent
}

// CertificateUpdateWebAccelParam is input parameters for the sacloud API
type CertificateUpdateWebAccelParam struct {
	Key         string
	CertContent string
	KeyContent  string
	Cert        string

	input Input
}

// NewCertificateUpdateWebAccelParam return new CertificateUpdateWebAccelParam
func NewCertificateUpdateWebAccelParam() *CertificateUpdateWebAccelParam {
	return &CertificateUpdateWebAccelParam{}
}

// Initialize init CertificateUpdateWebAccelParam
func (p *CertificateUpdateWebAccelParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CertificateUpdateWebAccelParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CertificateUpdateWebAccelParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Key) {
		p.Key = ""
	}
	if utils.IsEmpty(p.CertContent) {
		p.CertContent = ""
	}
	if utils.IsEmpty(p.KeyContent) {
		p.KeyContent = ""
	}
	if utils.IsEmpty(p.Cert) {
		p.Cert = ""
	}

}

func (p *CertificateUpdateWebAccelParam) validate() error {
	var errors []error

	{
		validator := define.Resources["WebAccel"].Commands["certificate-update"].Params["key"].ValidateFunc
		errs := validator("--key", p.Key)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--cert-content", p.CertContent, map[string]interface{}{

			"--cert": p.Cert,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--key-content", p.KeyContent, map[string]interface{}{

			"--key": p.Key,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["WebAccel"].Commands["certificate-update"].Params["cert"].ValidateFunc
		errs := validator("--cert", p.Cert)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CertificateUpdateWebAccelParam) ResourceDef() *schema.Resource {
	return define.Resources["WebAccel"]
}

func (p *CertificateUpdateWebAccelParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["certificate-update"]
}

func (p *CertificateUpdateWebAccelParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CertificateUpdateWebAccelParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CertificateUpdateWebAccelParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CertificateUpdateWebAccelParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CertificateUpdateWebAccelParam) SetKey(v string) {
	p.Key = v
}

func (p *CertificateUpdateWebAccelParam) GetKey() string {
	return p.Key
}
func (p *CertificateUpdateWebAccelParam) SetCertContent(v string) {
	p.CertContent = v
}

func (p *CertificateUpdateWebAccelParam) GetCertContent() string {
	return p.CertContent
}
func (p *CertificateUpdateWebAccelParam) SetKeyContent(v string) {
	p.KeyContent = v
}

func (p *CertificateUpdateWebAccelParam) GetKeyContent() string {
	return p.KeyContent
}
func (p *CertificateUpdateWebAccelParam) SetCert(v string) {
	p.Cert = v
}

func (p *CertificateUpdateWebAccelParam) GetCert() string {
	return p.Cert
}

// DeleteCacheWebAccelParam is input parameters for the sacloud API
type DeleteCacheWebAccelParam struct {
	input Input
}

// NewDeleteCacheWebAccelParam return new DeleteCacheWebAccelParam
func NewDeleteCacheWebAccelParam() *DeleteCacheWebAccelParam {
	return &DeleteCacheWebAccelParam{}
}

// Initialize init DeleteCacheWebAccelParam
func (p *DeleteCacheWebAccelParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteCacheWebAccelParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteCacheWebAccelParam) fillValueToSkeleton() {

}

func (p *DeleteCacheWebAccelParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteCacheWebAccelParam) ResourceDef() *schema.Resource {
	return define.Resources["WebAccel"]
}

func (p *DeleteCacheWebAccelParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete-cache"]
}

func (p *DeleteCacheWebAccelParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteCacheWebAccelParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteCacheWebAccelParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteCacheWebAccelParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

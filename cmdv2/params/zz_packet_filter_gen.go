// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListPacketFilterParam is input parameters for the sacloud API
type ListPacketFilterParam struct {
	Sort []string
	Name []string
	Id   []sacloud.ID
	From int
	Max  int

	input Input
}

// NewListPacketFilterParam return new ListPacketFilterParam
func NewListPacketFilterParam() *ListPacketFilterParam {
	return &ListPacketFilterParam{}
}

// Initialize init ListPacketFilterParam
func (p *ListPacketFilterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListPacketFilterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListPacketFilterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}

}

func (p *ListPacketFilterParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListPacketFilterParam) ResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *ListPacketFilterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListPacketFilterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListPacketFilterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListPacketFilterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListPacketFilterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListPacketFilterParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListPacketFilterParam) GetSort() []string {
	return p.Sort
}
func (p *ListPacketFilterParam) SetName(v []string) {
	p.Name = v
}

func (p *ListPacketFilterParam) GetName() []string {
	return p.Name
}
func (p *ListPacketFilterParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListPacketFilterParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListPacketFilterParam) SetFrom(v int) {
	p.From = v
}

func (p *ListPacketFilterParam) GetFrom() int {
	return p.From
}
func (p *ListPacketFilterParam) SetMax(v int) {
	p.Max = v
}

func (p *ListPacketFilterParam) GetMax() int {
	return p.Max
}

// CreatePacketFilterParam is input parameters for the sacloud API
type CreatePacketFilterParam struct {
	Description string
	Name        string

	input Input
}

// NewCreatePacketFilterParam return new CreatePacketFilterParam
func NewCreatePacketFilterParam() *CreatePacketFilterParam {
	return &CreatePacketFilterParam{}
}

// Initialize init CreatePacketFilterParam
func (p *CreatePacketFilterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreatePacketFilterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreatePacketFilterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}

}

func (p *CreatePacketFilterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["PacketFilter"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreatePacketFilterParam) ResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *CreatePacketFilterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreatePacketFilterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreatePacketFilterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreatePacketFilterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreatePacketFilterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreatePacketFilterParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreatePacketFilterParam) GetDescription() string {
	return p.Description
}
func (p *CreatePacketFilterParam) SetName(v string) {
	p.Name = v
}

func (p *CreatePacketFilterParam) GetName() string {
	return p.Name
}

// ReadPacketFilterParam is input parameters for the sacloud API
type ReadPacketFilterParam struct {
	input Input
}

// NewReadPacketFilterParam return new ReadPacketFilterParam
func NewReadPacketFilterParam() *ReadPacketFilterParam {
	return &ReadPacketFilterParam{}
}

// Initialize init ReadPacketFilterParam
func (p *ReadPacketFilterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadPacketFilterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadPacketFilterParam) fillValueToSkeleton() {

}

func (p *ReadPacketFilterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadPacketFilterParam) ResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *ReadPacketFilterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadPacketFilterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadPacketFilterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadPacketFilterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadPacketFilterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdatePacketFilterParam is input parameters for the sacloud API
type UpdatePacketFilterParam struct {
	Name        string
	Description string

	input Input
}

// NewUpdatePacketFilterParam return new UpdatePacketFilterParam
func NewUpdatePacketFilterParam() *UpdatePacketFilterParam {
	return &UpdatePacketFilterParam{}
}

// Initialize init UpdatePacketFilterParam
func (p *UpdatePacketFilterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdatePacketFilterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdatePacketFilterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}

}

func (p *UpdatePacketFilterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["PacketFilter"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdatePacketFilterParam) ResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *UpdatePacketFilterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdatePacketFilterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdatePacketFilterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdatePacketFilterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdatePacketFilterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdatePacketFilterParam) SetName(v string) {
	p.Name = v
}

func (p *UpdatePacketFilterParam) GetName() string {
	return p.Name
}
func (p *UpdatePacketFilterParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdatePacketFilterParam) GetDescription() string {
	return p.Description
}

// DeletePacketFilterParam is input parameters for the sacloud API
type DeletePacketFilterParam struct {
	input Input
}

// NewDeletePacketFilterParam return new DeletePacketFilterParam
func NewDeletePacketFilterParam() *DeletePacketFilterParam {
	return &DeletePacketFilterParam{}
}

// Initialize init DeletePacketFilterParam
func (p *DeletePacketFilterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeletePacketFilterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeletePacketFilterParam) fillValueToSkeleton() {

}

func (p *DeletePacketFilterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeletePacketFilterParam) ResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *DeletePacketFilterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeletePacketFilterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeletePacketFilterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeletePacketFilterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeletePacketFilterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// RuleInfoPacketFilterParam is input parameters for the sacloud API
type RuleInfoPacketFilterParam struct {
	input Input
}

// NewRuleInfoPacketFilterParam return new RuleInfoPacketFilterParam
func NewRuleInfoPacketFilterParam() *RuleInfoPacketFilterParam {
	return &RuleInfoPacketFilterParam{}
}

// Initialize init RuleInfoPacketFilterParam
func (p *RuleInfoPacketFilterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *RuleInfoPacketFilterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *RuleInfoPacketFilterParam) fillValueToSkeleton() {

}

func (p *RuleInfoPacketFilterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *RuleInfoPacketFilterParam) ResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *RuleInfoPacketFilterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["rule-info"]
}

func (p *RuleInfoPacketFilterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *RuleInfoPacketFilterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *RuleInfoPacketFilterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *RuleInfoPacketFilterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// RuleAddPacketFilterParam is input parameters for the sacloud API
type RuleAddPacketFilterParam struct {
	Index           int
	Protocol        string
	SourceNetwork   string
	SourcePort      string
	DestinationPort string
	Action          string
	Description     string

	input Input
}

// NewRuleAddPacketFilterParam return new RuleAddPacketFilterParam
func NewRuleAddPacketFilterParam() *RuleAddPacketFilterParam {
	return &RuleAddPacketFilterParam{
		Index: 1}
}

// Initialize init RuleAddPacketFilterParam
func (p *RuleAddPacketFilterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *RuleAddPacketFilterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *RuleAddPacketFilterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.SourceNetwork) {
		p.SourceNetwork = ""
	}
	if utils.IsEmpty(p.SourcePort) {
		p.SourcePort = ""
	}
	if utils.IsEmpty(p.DestinationPort) {
		p.DestinationPort = ""
	}
	if utils.IsEmpty(p.Action) {
		p.Action = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}

}

func (p *RuleAddPacketFilterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["source-network"].ValidateFunc
		errs := validator("--source-network", p.SourceNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["source-port"].ValidateFunc
		errs := validator("--source-port", p.SourcePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["destination-port"].ValidateFunc
		errs := validator("--destination-port", p.DestinationPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["action"].ValidateFunc
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *RuleAddPacketFilterParam) ResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *RuleAddPacketFilterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["rule-add"]
}

func (p *RuleAddPacketFilterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *RuleAddPacketFilterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *RuleAddPacketFilterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *RuleAddPacketFilterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *RuleAddPacketFilterParam) SetIndex(v int) {
	p.Index = v
}

func (p *RuleAddPacketFilterParam) GetIndex() int {
	return p.Index
}
func (p *RuleAddPacketFilterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *RuleAddPacketFilterParam) GetProtocol() string {
	return p.Protocol
}
func (p *RuleAddPacketFilterParam) SetSourceNetwork(v string) {
	p.SourceNetwork = v
}

func (p *RuleAddPacketFilterParam) GetSourceNetwork() string {
	return p.SourceNetwork
}
func (p *RuleAddPacketFilterParam) SetSourcePort(v string) {
	p.SourcePort = v
}

func (p *RuleAddPacketFilterParam) GetSourcePort() string {
	return p.SourcePort
}
func (p *RuleAddPacketFilterParam) SetDestinationPort(v string) {
	p.DestinationPort = v
}

func (p *RuleAddPacketFilterParam) GetDestinationPort() string {
	return p.DestinationPort
}
func (p *RuleAddPacketFilterParam) SetAction(v string) {
	p.Action = v
}

func (p *RuleAddPacketFilterParam) GetAction() string {
	return p.Action
}
func (p *RuleAddPacketFilterParam) SetDescription(v string) {
	p.Description = v
}

func (p *RuleAddPacketFilterParam) GetDescription() string {
	return p.Description
}

// RuleUpdatePacketFilterParam is input parameters for the sacloud API
type RuleUpdatePacketFilterParam struct {
	Protocol        string
	SourceNetwork   string
	SourcePort      string
	DestinationPort string
	Action          string
	Description     string
	Index           int

	input Input
}

// NewRuleUpdatePacketFilterParam return new RuleUpdatePacketFilterParam
func NewRuleUpdatePacketFilterParam() *RuleUpdatePacketFilterParam {
	return &RuleUpdatePacketFilterParam{}
}

// Initialize init RuleUpdatePacketFilterParam
func (p *RuleUpdatePacketFilterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *RuleUpdatePacketFilterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *RuleUpdatePacketFilterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.SourceNetwork) {
		p.SourceNetwork = ""
	}
	if utils.IsEmpty(p.SourcePort) {
		p.SourcePort = ""
	}
	if utils.IsEmpty(p.DestinationPort) {
		p.DestinationPort = ""
	}
	if utils.IsEmpty(p.Action) {
		p.Action = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *RuleUpdatePacketFilterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["source-network"].ValidateFunc
		errs := validator("--source-network", p.SourceNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["source-port"].ValidateFunc
		errs := validator("--source-port", p.SourcePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["destination-port"].ValidateFunc
		errs := validator("--destination-port", p.DestinationPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["action"].ValidateFunc
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *RuleUpdatePacketFilterParam) ResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *RuleUpdatePacketFilterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["rule-update"]
}

func (p *RuleUpdatePacketFilterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *RuleUpdatePacketFilterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *RuleUpdatePacketFilterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *RuleUpdatePacketFilterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *RuleUpdatePacketFilterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *RuleUpdatePacketFilterParam) GetProtocol() string {
	return p.Protocol
}
func (p *RuleUpdatePacketFilterParam) SetSourceNetwork(v string) {
	p.SourceNetwork = v
}

func (p *RuleUpdatePacketFilterParam) GetSourceNetwork() string {
	return p.SourceNetwork
}
func (p *RuleUpdatePacketFilterParam) SetSourcePort(v string) {
	p.SourcePort = v
}

func (p *RuleUpdatePacketFilterParam) GetSourcePort() string {
	return p.SourcePort
}
func (p *RuleUpdatePacketFilterParam) SetDestinationPort(v string) {
	p.DestinationPort = v
}

func (p *RuleUpdatePacketFilterParam) GetDestinationPort() string {
	return p.DestinationPort
}
func (p *RuleUpdatePacketFilterParam) SetAction(v string) {
	p.Action = v
}

func (p *RuleUpdatePacketFilterParam) GetAction() string {
	return p.Action
}
func (p *RuleUpdatePacketFilterParam) SetDescription(v string) {
	p.Description = v
}

func (p *RuleUpdatePacketFilterParam) GetDescription() string {
	return p.Description
}
func (p *RuleUpdatePacketFilterParam) SetIndex(v int) {
	p.Index = v
}

func (p *RuleUpdatePacketFilterParam) GetIndex() int {
	return p.Index
}

// RuleDeletePacketFilterParam is input parameters for the sacloud API
type RuleDeletePacketFilterParam struct {
	Index int

	input Input
}

// NewRuleDeletePacketFilterParam return new RuleDeletePacketFilterParam
func NewRuleDeletePacketFilterParam() *RuleDeletePacketFilterParam {
	return &RuleDeletePacketFilterParam{}
}

// Initialize init RuleDeletePacketFilterParam
func (p *RuleDeletePacketFilterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *RuleDeletePacketFilterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *RuleDeletePacketFilterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *RuleDeletePacketFilterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *RuleDeletePacketFilterParam) ResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *RuleDeletePacketFilterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["rule-delete"]
}

func (p *RuleDeletePacketFilterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *RuleDeletePacketFilterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *RuleDeletePacketFilterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *RuleDeletePacketFilterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *RuleDeletePacketFilterParam) SetIndex(v int) {
	p.Index = v
}

func (p *RuleDeletePacketFilterParam) GetIndex() int {
	return p.Index
}

// InterfaceConnectPacketFilterParam is input parameters for the sacloud API
type InterfaceConnectPacketFilterParam struct {
	InterfaceId sacloud.ID

	input Input
}

// NewInterfaceConnectPacketFilterParam return new InterfaceConnectPacketFilterParam
func NewInterfaceConnectPacketFilterParam() *InterfaceConnectPacketFilterParam {
	return &InterfaceConnectPacketFilterParam{}
}

// Initialize init InterfaceConnectPacketFilterParam
func (p *InterfaceConnectPacketFilterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceConnectPacketFilterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceConnectPacketFilterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.InterfaceId) {
		p.InterfaceId = sacloud.ID(0)
	}

}

func (p *InterfaceConnectPacketFilterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--interface-id", p.InterfaceId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["interface-connect"].Params["interface-id"].ValidateFunc
		errs := validator("--interface-id", p.InterfaceId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *InterfaceConnectPacketFilterParam) ResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *InterfaceConnectPacketFilterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-connect"]
}

func (p *InterfaceConnectPacketFilterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceConnectPacketFilterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceConnectPacketFilterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceConnectPacketFilterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceConnectPacketFilterParam) SetInterfaceId(v sacloud.ID) {
	p.InterfaceId = v
}

func (p *InterfaceConnectPacketFilterParam) GetInterfaceId() sacloud.ID {
	return p.InterfaceId
}

// InterfaceDisconnectPacketFilterParam is input parameters for the sacloud API
type InterfaceDisconnectPacketFilterParam struct {
	InterfaceId sacloud.ID

	input Input
}

// NewInterfaceDisconnectPacketFilterParam return new InterfaceDisconnectPacketFilterParam
func NewInterfaceDisconnectPacketFilterParam() *InterfaceDisconnectPacketFilterParam {
	return &InterfaceDisconnectPacketFilterParam{}
}

// Initialize init InterfaceDisconnectPacketFilterParam
func (p *InterfaceDisconnectPacketFilterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceDisconnectPacketFilterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceDisconnectPacketFilterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.InterfaceId) {
		p.InterfaceId = sacloud.ID(0)
	}

}

func (p *InterfaceDisconnectPacketFilterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--interface-id", p.InterfaceId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["interface-disconnect"].Params["interface-id"].ValidateFunc
		errs := validator("--interface-id", p.InterfaceId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *InterfaceDisconnectPacketFilterParam) ResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *InterfaceDisconnectPacketFilterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-disconnect"]
}

func (p *InterfaceDisconnectPacketFilterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceDisconnectPacketFilterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceDisconnectPacketFilterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceDisconnectPacketFilterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceDisconnectPacketFilterParam) SetInterfaceId(v sacloud.ID) {
	p.InterfaceId = v
}

func (p *InterfaceDisconnectPacketFilterParam) GetInterfaceId() sacloud.ID {
	return p.InterfaceId
}

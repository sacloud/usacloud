// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListIPv6Param is input parameters for the sacloud API
type ListIPv6Param struct {
	From       int
	IPv6netId  sacloud.ID
	InternetId sacloud.ID
	Max        int
	Sort       []string
	Name       []string
	Id         []sacloud.ID

	input Input
}

// NewListIPv6Param return new ListIPv6Param
func NewListIPv6Param() *ListIPv6Param {
	return &ListIPv6Param{}
}

// Initialize init ListIPv6Param
func (p *ListIPv6Param) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListIPv6Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListIPv6Param) fillValueToSkeleton() {
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.IPv6netId) {
		p.IPv6netId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.InternetId) {
		p.InternetId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}

}

func (p *ListIPv6Param) validate() error {
	var errors []error

	{
		validator := define.Resources["IPv6"].Commands["list"].Params["ipv6net-id"].ValidateFunc
		errs := validator("--ipv6net-id", p.IPv6netId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["IPv6"].Commands["list"].Params["internet-id"].ValidateFunc
		errs := validator("--internet-id", p.InternetId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["IPv6"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListIPv6Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv6"]
}

func (p *ListIPv6Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListIPv6Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListIPv6Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListIPv6Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListIPv6Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListIPv6Param) SetFrom(v int) {
	p.From = v
}

func (p *ListIPv6Param) GetFrom() int {
	return p.From
}
func (p *ListIPv6Param) SetIPv6netId(v sacloud.ID) {
	p.IPv6netId = v
}

func (p *ListIPv6Param) GetIPv6netId() sacloud.ID {
	return p.IPv6netId
}
func (p *ListIPv6Param) SetInternetId(v sacloud.ID) {
	p.InternetId = v
}

func (p *ListIPv6Param) GetInternetId() sacloud.ID {
	return p.InternetId
}
func (p *ListIPv6Param) SetMax(v int) {
	p.Max = v
}

func (p *ListIPv6Param) GetMax() int {
	return p.Max
}
func (p *ListIPv6Param) SetSort(v []string) {
	p.Sort = v
}

func (p *ListIPv6Param) GetSort() []string {
	return p.Sort
}
func (p *ListIPv6Param) SetName(v []string) {
	p.Name = v
}

func (p *ListIPv6Param) GetName() []string {
	return p.Name
}
func (p *ListIPv6Param) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListIPv6Param) GetId() []sacloud.ID {
	return p.Id
}

// PtrAddIPv6Param is input parameters for the sacloud API
type PtrAddIPv6Param struct {
	Hostname string

	input Input
}

// NewPtrAddIPv6Param return new PtrAddIPv6Param
func NewPtrAddIPv6Param() *PtrAddIPv6Param {
	return &PtrAddIPv6Param{}
}

// Initialize init PtrAddIPv6Param
func (p *PtrAddIPv6Param) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PtrAddIPv6Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PtrAddIPv6Param) fillValueToSkeleton() {
	if utils.IsEmpty(p.Hostname) {
		p.Hostname = ""
	}

}

func (p *PtrAddIPv6Param) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--hostname", p.Hostname)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PtrAddIPv6Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv6"]
}

func (p *PtrAddIPv6Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ptr-add"]
}

func (p *PtrAddIPv6Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PtrAddIPv6Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PtrAddIPv6Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PtrAddIPv6Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PtrAddIPv6Param) SetHostname(v string) {
	p.Hostname = v
}

func (p *PtrAddIPv6Param) GetHostname() string {
	return p.Hostname
}

// PtrReadIPv6Param is input parameters for the sacloud API
type PtrReadIPv6Param struct {
	input Input
}

// NewPtrReadIPv6Param return new PtrReadIPv6Param
func NewPtrReadIPv6Param() *PtrReadIPv6Param {
	return &PtrReadIPv6Param{}
}

// Initialize init PtrReadIPv6Param
func (p *PtrReadIPv6Param) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PtrReadIPv6Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PtrReadIPv6Param) fillValueToSkeleton() {

}

func (p *PtrReadIPv6Param) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *PtrReadIPv6Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv6"]
}

func (p *PtrReadIPv6Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ptr-read"]
}

func (p *PtrReadIPv6Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PtrReadIPv6Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PtrReadIPv6Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PtrReadIPv6Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// PtrUpdateIPv6Param is input parameters for the sacloud API
type PtrUpdateIPv6Param struct {
	Hostname string

	input Input
}

// NewPtrUpdateIPv6Param return new PtrUpdateIPv6Param
func NewPtrUpdateIPv6Param() *PtrUpdateIPv6Param {
	return &PtrUpdateIPv6Param{}
}

// Initialize init PtrUpdateIPv6Param
func (p *PtrUpdateIPv6Param) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PtrUpdateIPv6Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PtrUpdateIPv6Param) fillValueToSkeleton() {
	if utils.IsEmpty(p.Hostname) {
		p.Hostname = ""
	}

}

func (p *PtrUpdateIPv6Param) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--hostname", p.Hostname)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PtrUpdateIPv6Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv6"]
}

func (p *PtrUpdateIPv6Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ptr-update"]
}

func (p *PtrUpdateIPv6Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PtrUpdateIPv6Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PtrUpdateIPv6Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PtrUpdateIPv6Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PtrUpdateIPv6Param) SetHostname(v string) {
	p.Hostname = v
}

func (p *PtrUpdateIPv6Param) GetHostname() string {
	return p.Hostname
}

// PtrDeleteIPv6Param is input parameters for the sacloud API
type PtrDeleteIPv6Param struct {
	input Input
}

// NewPtrDeleteIPv6Param return new PtrDeleteIPv6Param
func NewPtrDeleteIPv6Param() *PtrDeleteIPv6Param {
	return &PtrDeleteIPv6Param{}
}

// Initialize init PtrDeleteIPv6Param
func (p *PtrDeleteIPv6Param) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PtrDeleteIPv6Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PtrDeleteIPv6Param) fillValueToSkeleton() {

}

func (p *PtrDeleteIPv6Param) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *PtrDeleteIPv6Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv6"]
}

func (p *PtrDeleteIPv6Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ptr-delete"]
}

func (p *PtrDeleteIPv6Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PtrDeleteIPv6Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PtrDeleteIPv6Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PtrDeleteIPv6Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

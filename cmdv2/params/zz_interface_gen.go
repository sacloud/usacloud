// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	v0params "github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListInterfaceParam is input parameters for the sacloud API
type ListInterfaceParam struct {
	Name              []string
	Id                []sacloud.ID
	From              int
	Max               int
	Sort              []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string

	input Input
}

// NewListInterfaceParam return new ListInterfaceParam
func NewListInterfaceParam() *ListInterfaceParam {
	return &ListInterfaceParam{}
}

// Initialize init ListInterfaceParam
func (p *ListInterfaceParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListInterfaceParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ListInterfaceParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListInterfaceParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Interface"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ListInterfaceParam) ResourceDef() *schema.Resource {
	return define.Resources["Interface"]
}

func (p *ListInterfaceParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListInterfaceParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListInterfaceParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListInterfaceParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListInterfaceParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ListInterfaceParam) GetResourceDef() *schema.Resource {
	return define.Resources["Interface"]
}

func (p *ListInterfaceParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListInterfaceParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListInterfaceParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListInterfaceParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListInterfaceParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListInterfaceParam) SetName(v []string) {
	p.Name = v
}

func (p *ListInterfaceParam) GetName() []string {
	return p.Name
}
func (p *ListInterfaceParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListInterfaceParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListInterfaceParam) SetFrom(v int) {
	p.From = v
}

func (p *ListInterfaceParam) GetFrom() int {
	return p.From
}
func (p *ListInterfaceParam) SetMax(v int) {
	p.Max = v
}

func (p *ListInterfaceParam) GetMax() int {
	return p.Max
}
func (p *ListInterfaceParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListInterfaceParam) GetSort() []string {
	return p.Sort
}
func (p *ListInterfaceParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListInterfaceParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListInterfaceParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListInterfaceParam) GetParameters() string {
	return p.Parameters
}
func (p *ListInterfaceParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListInterfaceParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListInterfaceParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListInterfaceParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListInterfaceParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListInterfaceParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListInterfaceParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListInterfaceParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListInterfaceParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListInterfaceParam) GetColumn() []string {
	return p.Column
}
func (p *ListInterfaceParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListInterfaceParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListInterfaceParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListInterfaceParam) GetFormat() string {
	return p.Format
}
func (p *ListInterfaceParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListInterfaceParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListInterfaceParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListInterfaceParam) GetQuery() string {
	return p.Query
}
func (p *ListInterfaceParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListInterfaceParam) GetQueryFile() string {
	return p.QueryFile
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ListInterfaceParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *ListInterfaceParam) ToV0() *v0params.ListInterfaceParam {
	return &v0params.ListInterfaceParam{
		Name:              p.Name,
		Id:                p.Id,
		From:              p.From,
		Max:               p.Max,
		Sort:              p.Sort,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		OutputType:        p.OutputType,
		Column:            p.Column,
		Quiet:             p.Quiet,
		Format:            p.Format,
		FormatFile:        p.FormatFile,
		Query:             p.Query,
		QueryFile:         p.QueryFile,
	}
}

// PacketFilterConnectInterfaceParam is input parameters for the sacloud API
type PacketFilterConnectInterfaceParam struct {
	PacketFilterId    sacloud.ID
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewPacketFilterConnectInterfaceParam return new PacketFilterConnectInterfaceParam
func NewPacketFilterConnectInterfaceParam() *PacketFilterConnectInterfaceParam {
	return &PacketFilterConnectInterfaceParam{}
}

// Initialize init PacketFilterConnectInterfaceParam
func (p *PacketFilterConnectInterfaceParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PacketFilterConnectInterfaceParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *PacketFilterConnectInterfaceParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.PacketFilterId) {
		p.PacketFilterId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *PacketFilterConnectInterfaceParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--packet-filter-id", p.PacketFilterId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Interface"].Commands["packet-filter-connect"].Params["packet-filter-id"].ValidateFunc
		errs := validator("--packet-filter-id", p.PacketFilterId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *PacketFilterConnectInterfaceParam) ResourceDef() *schema.Resource {
	return define.Resources["Interface"]
}

func (p *PacketFilterConnectInterfaceParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["packet-filter-connect"]
}

func (p *PacketFilterConnectInterfaceParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PacketFilterConnectInterfaceParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PacketFilterConnectInterfaceParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PacketFilterConnectInterfaceParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *PacketFilterConnectInterfaceParam) GetResourceDef() *schema.Resource {
	return define.Resources["Interface"]
}

func (p *PacketFilterConnectInterfaceParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["packet-filter-connect"]
}

func (p *PacketFilterConnectInterfaceParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PacketFilterConnectInterfaceParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PacketFilterConnectInterfaceParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PacketFilterConnectInterfaceParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PacketFilterConnectInterfaceParam) SetPacketFilterId(v sacloud.ID) {
	p.PacketFilterId = v
}

func (p *PacketFilterConnectInterfaceParam) GetPacketFilterId() sacloud.ID {
	return p.PacketFilterId
}
func (p *PacketFilterConnectInterfaceParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PacketFilterConnectInterfaceParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PacketFilterConnectInterfaceParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PacketFilterConnectInterfaceParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PacketFilterConnectInterfaceParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *PacketFilterConnectInterfaceParam) GetParameters() string {
	return p.Parameters
}
func (p *PacketFilterConnectInterfaceParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PacketFilterConnectInterfaceParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PacketFilterConnectInterfaceParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PacketFilterConnectInterfaceParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PacketFilterConnectInterfaceParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PacketFilterConnectInterfaceParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PacketFilterConnectInterfaceParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *PacketFilterConnectInterfaceParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *PacketFilterConnectInterfaceParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *PacketFilterConnectInterfaceParam) ToV0() *v0params.PacketFilterConnectInterfaceParam {
	return &v0params.PacketFilterConnectInterfaceParam{
		PacketFilterId:    p.PacketFilterId,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// CreateInterfaceParam is input parameters for the sacloud API
type CreateInterfaceParam struct {
	ServerId          sacloud.ID
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string

	input Input
}

// NewCreateInterfaceParam return new CreateInterfaceParam
func NewCreateInterfaceParam() *CreateInterfaceParam {
	return &CreateInterfaceParam{}
}

// Initialize init CreateInterfaceParam
func (p *CreateInterfaceParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateInterfaceParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *CreateInterfaceParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.ServerId) {
		p.ServerId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *CreateInterfaceParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--server-id", p.ServerId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Interface"].Commands["create"].Params["server-id"].ValidateFunc
		errs := validator("--server-id", p.ServerId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *CreateInterfaceParam) ResourceDef() *schema.Resource {
	return define.Resources["Interface"]
}

func (p *CreateInterfaceParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateInterfaceParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateInterfaceParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateInterfaceParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateInterfaceParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *CreateInterfaceParam) GetResourceDef() *schema.Resource {
	return define.Resources["Interface"]
}

func (p *CreateInterfaceParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateInterfaceParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateInterfaceParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateInterfaceParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateInterfaceParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateInterfaceParam) SetServerId(v sacloud.ID) {
	p.ServerId = v
}

func (p *CreateInterfaceParam) GetServerId() sacloud.ID {
	return p.ServerId
}
func (p *CreateInterfaceParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateInterfaceParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateInterfaceParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateInterfaceParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateInterfaceParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateInterfaceParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateInterfaceParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateInterfaceParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateInterfaceParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateInterfaceParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateInterfaceParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateInterfaceParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateInterfaceParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateInterfaceParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateInterfaceParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateInterfaceParam) GetColumn() []string {
	return p.Column
}
func (p *CreateInterfaceParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateInterfaceParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateInterfaceParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateInterfaceParam) GetFormat() string {
	return p.Format
}
func (p *CreateInterfaceParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateInterfaceParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateInterfaceParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateInterfaceParam) GetQuery() string {
	return p.Query
}
func (p *CreateInterfaceParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateInterfaceParam) GetQueryFile() string {
	return p.QueryFile
}

// Changed usacloud v0系との互換性維持のための実装
func (p *CreateInterfaceParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *CreateInterfaceParam) ToV0() *v0params.CreateInterfaceParam {
	return &v0params.CreateInterfaceParam{
		ServerId:          p.ServerId,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		OutputType:        p.OutputType,
		Column:            p.Column,
		Quiet:             p.Quiet,
		Format:            p.Format,
		FormatFile:        p.FormatFile,
		Query:             p.Query,
		QueryFile:         p.QueryFile,
	}
}

// PacketFilterDisconnectInterfaceParam is input parameters for the sacloud API
type PacketFilterDisconnectInterfaceParam struct {
	PacketFilterId    sacloud.ID
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewPacketFilterDisconnectInterfaceParam return new PacketFilterDisconnectInterfaceParam
func NewPacketFilterDisconnectInterfaceParam() *PacketFilterDisconnectInterfaceParam {
	return &PacketFilterDisconnectInterfaceParam{}
}

// Initialize init PacketFilterDisconnectInterfaceParam
func (p *PacketFilterDisconnectInterfaceParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PacketFilterDisconnectInterfaceParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *PacketFilterDisconnectInterfaceParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.PacketFilterId) {
		p.PacketFilterId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *PacketFilterDisconnectInterfaceParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--packet-filter-id", p.PacketFilterId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Interface"].Commands["packet-filter-disconnect"].Params["packet-filter-id"].ValidateFunc
		errs := validator("--packet-filter-id", p.PacketFilterId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *PacketFilterDisconnectInterfaceParam) ResourceDef() *schema.Resource {
	return define.Resources["Interface"]
}

func (p *PacketFilterDisconnectInterfaceParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["packet-filter-disconnect"]
}

func (p *PacketFilterDisconnectInterfaceParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PacketFilterDisconnectInterfaceParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PacketFilterDisconnectInterfaceParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PacketFilterDisconnectInterfaceParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *PacketFilterDisconnectInterfaceParam) GetResourceDef() *schema.Resource {
	return define.Resources["Interface"]
}

func (p *PacketFilterDisconnectInterfaceParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["packet-filter-disconnect"]
}

func (p *PacketFilterDisconnectInterfaceParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PacketFilterDisconnectInterfaceParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PacketFilterDisconnectInterfaceParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PacketFilterDisconnectInterfaceParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PacketFilterDisconnectInterfaceParam) SetPacketFilterId(v sacloud.ID) {
	p.PacketFilterId = v
}

func (p *PacketFilterDisconnectInterfaceParam) GetPacketFilterId() sacloud.ID {
	return p.PacketFilterId
}
func (p *PacketFilterDisconnectInterfaceParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PacketFilterDisconnectInterfaceParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PacketFilterDisconnectInterfaceParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PacketFilterDisconnectInterfaceParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PacketFilterDisconnectInterfaceParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *PacketFilterDisconnectInterfaceParam) GetParameters() string {
	return p.Parameters
}
func (p *PacketFilterDisconnectInterfaceParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PacketFilterDisconnectInterfaceParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PacketFilterDisconnectInterfaceParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PacketFilterDisconnectInterfaceParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PacketFilterDisconnectInterfaceParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PacketFilterDisconnectInterfaceParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PacketFilterDisconnectInterfaceParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *PacketFilterDisconnectInterfaceParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *PacketFilterDisconnectInterfaceParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *PacketFilterDisconnectInterfaceParam) ToV0() *v0params.PacketFilterDisconnectInterfaceParam {
	return &v0params.PacketFilterDisconnectInterfaceParam{
		PacketFilterId:    p.PacketFilterId,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// ReadInterfaceParam is input parameters for the sacloud API
type ReadInterfaceParam struct {
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewReadInterfaceParam return new ReadInterfaceParam
func NewReadInterfaceParam() *ReadInterfaceParam {
	return &ReadInterfaceParam{}
}

// Initialize init ReadInterfaceParam
func (p *ReadInterfaceParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadInterfaceParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ReadInterfaceParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReadInterfaceParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ReadInterfaceParam) ResourceDef() *schema.Resource {
	return define.Resources["Interface"]
}

func (p *ReadInterfaceParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadInterfaceParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadInterfaceParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadInterfaceParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadInterfaceParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ReadInterfaceParam) GetResourceDef() *schema.Resource {
	return define.Resources["Interface"]
}

func (p *ReadInterfaceParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadInterfaceParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadInterfaceParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadInterfaceParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadInterfaceParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReadInterfaceParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadInterfaceParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadInterfaceParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadInterfaceParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadInterfaceParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadInterfaceParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadInterfaceParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadInterfaceParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadInterfaceParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadInterfaceParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadInterfaceParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadInterfaceParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadInterfaceParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadInterfaceParam) GetColumn() []string {
	return p.Column
}
func (p *ReadInterfaceParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadInterfaceParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadInterfaceParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadInterfaceParam) GetFormat() string {
	return p.Format
}
func (p *ReadInterfaceParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadInterfaceParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadInterfaceParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadInterfaceParam) GetQuery() string {
	return p.Query
}
func (p *ReadInterfaceParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadInterfaceParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadInterfaceParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadInterfaceParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ReadInterfaceParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *ReadInterfaceParam) ToV0() *v0params.ReadInterfaceParam {
	return &v0params.ReadInterfaceParam{
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		OutputType:        p.OutputType,
		Column:            p.Column,
		Quiet:             p.Quiet,
		Format:            p.Format,
		FormatFile:        p.FormatFile,
		Query:             p.Query,
		QueryFile:         p.QueryFile,
		Id:                p.Id,
	}
}

// UpdateInterfaceParam is input parameters for the sacloud API
type UpdateInterfaceParam struct {
	UserIpaddress     string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewUpdateInterfaceParam return new UpdateInterfaceParam
func NewUpdateInterfaceParam() *UpdateInterfaceParam {
	return &UpdateInterfaceParam{}
}

// Initialize init UpdateInterfaceParam
func (p *UpdateInterfaceParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateInterfaceParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *UpdateInterfaceParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.UserIpaddress) {
		p.UserIpaddress = ""
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UpdateInterfaceParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Interface"].Commands["update"].Params["user-ipaddress"].ValidateFunc
		errs := validator("--user-ipaddress", p.UserIpaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *UpdateInterfaceParam) ResourceDef() *schema.Resource {
	return define.Resources["Interface"]
}

func (p *UpdateInterfaceParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateInterfaceParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateInterfaceParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateInterfaceParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateInterfaceParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *UpdateInterfaceParam) GetResourceDef() *schema.Resource {
	return define.Resources["Interface"]
}

func (p *UpdateInterfaceParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateInterfaceParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateInterfaceParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateInterfaceParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateInterfaceParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateInterfaceParam) SetUserIpaddress(v string) {
	p.UserIpaddress = v
}

func (p *UpdateInterfaceParam) GetUserIpaddress() string {
	return p.UserIpaddress
}
func (p *UpdateInterfaceParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateInterfaceParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateInterfaceParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateInterfaceParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateInterfaceParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateInterfaceParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateInterfaceParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateInterfaceParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateInterfaceParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateInterfaceParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateInterfaceParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateInterfaceParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateInterfaceParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateInterfaceParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateInterfaceParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateInterfaceParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateInterfaceParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateInterfaceParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateInterfaceParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateInterfaceParam) GetFormat() string {
	return p.Format
}
func (p *UpdateInterfaceParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateInterfaceParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateInterfaceParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateInterfaceParam) GetQuery() string {
	return p.Query
}
func (p *UpdateInterfaceParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateInterfaceParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateInterfaceParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateInterfaceParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *UpdateInterfaceParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *UpdateInterfaceParam) ToV0() *v0params.UpdateInterfaceParam {
	return &v0params.UpdateInterfaceParam{
		UserIpaddress:     p.UserIpaddress,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		OutputType:        p.OutputType,
		Column:            p.Column,
		Quiet:             p.Quiet,
		Format:            p.Format,
		FormatFile:        p.FormatFile,
		Query:             p.Query,
		QueryFile:         p.QueryFile,
		Id:                p.Id,
	}
}

// DeleteInterfaceParam is input parameters for the sacloud API
type DeleteInterfaceParam struct {
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewDeleteInterfaceParam return new DeleteInterfaceParam
func NewDeleteInterfaceParam() *DeleteInterfaceParam {
	return &DeleteInterfaceParam{}
}

// Initialize init DeleteInterfaceParam
func (p *DeleteInterfaceParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteInterfaceParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *DeleteInterfaceParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DeleteInterfaceParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *DeleteInterfaceParam) ResourceDef() *schema.Resource {
	return define.Resources["Interface"]
}

func (p *DeleteInterfaceParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteInterfaceParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteInterfaceParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteInterfaceParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteInterfaceParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *DeleteInterfaceParam) GetResourceDef() *schema.Resource {
	return define.Resources["Interface"]
}

func (p *DeleteInterfaceParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteInterfaceParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteInterfaceParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteInterfaceParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteInterfaceParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteInterfaceParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteInterfaceParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteInterfaceParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteInterfaceParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteInterfaceParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteInterfaceParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteInterfaceParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteInterfaceParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteInterfaceParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteInterfaceParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteInterfaceParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteInterfaceParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteInterfaceParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteInterfaceParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteInterfaceParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteInterfaceParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteInterfaceParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteInterfaceParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteInterfaceParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteInterfaceParam) GetFormat() string {
	return p.Format
}
func (p *DeleteInterfaceParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteInterfaceParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteInterfaceParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteInterfaceParam) GetQuery() string {
	return p.Query
}
func (p *DeleteInterfaceParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteInterfaceParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteInterfaceParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteInterfaceParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *DeleteInterfaceParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *DeleteInterfaceParam) ToV0() *v0params.DeleteInterfaceParam {
	return &v0params.DeleteInterfaceParam{
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		OutputType:        p.OutputType,
		Column:            p.Column,
		Quiet:             p.Quiet,
		Format:            p.Format,
		FormatFile:        p.FormatFile,
		Query:             p.Query,
		QueryFile:         p.QueryFile,
		Id:                p.Id,
	}
}

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListStartupscriptParam is input parameters for the sacloud API
type ListStartupscriptParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Scope             string       `json:"scope"`
	Tags              []string     `json:"tags"`
	Class             []string     `json:"class"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`

	input Input
}

// NewListStartupscriptParam return new ListStartupscriptParam
func NewListStartupscriptParam(in Input) (*ListStartupscriptParam, error) {
	v := &ListStartupscriptParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListStartupscriptParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListStartupscriptParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Scope) {
		p.Scope = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Class) {
		p.Class = []string{""}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListStartupscriptParam) validate() error {
	var errors []error
	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["StartupScript"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["StartupScript"].Commands["list"].Params["scope"].ValidateFunc
		errs := validator("--scope", p.Scope)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["StartupScript"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListStartupscriptParam) ResourceDef() *schema.Resource {
	return define.Resources["StartupScript"]
}

func (p *ListStartupscriptParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListStartupscriptParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListStartupscriptParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListStartupscriptParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListStartupscriptParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListStartupscriptParam) SetName(v []string) {
	p.Name = v
}

func (p *ListStartupscriptParam) GetName() []string {
	return p.Name
}
func (p *ListStartupscriptParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListStartupscriptParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListStartupscriptParam) SetScope(v string) {
	p.Scope = v
}

func (p *ListStartupscriptParam) GetScope() string {
	return p.Scope
}
func (p *ListStartupscriptParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListStartupscriptParam) GetTags() []string {
	return p.Tags
}
func (p *ListStartupscriptParam) SetClass(v []string) {
	p.Class = v
}

func (p *ListStartupscriptParam) GetClass() []string {
	return p.Class
}
func (p *ListStartupscriptParam) SetFrom(v int) {
	p.From = v
}

func (p *ListStartupscriptParam) GetFrom() int {
	return p.From
}
func (p *ListStartupscriptParam) SetMax(v int) {
	p.Max = v
}

func (p *ListStartupscriptParam) GetMax() int {
	return p.Max
}
func (p *ListStartupscriptParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListStartupscriptParam) GetSort() []string {
	return p.Sort
}
func (p *ListStartupscriptParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListStartupscriptParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListStartupscriptParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListStartupscriptParam) GetParameters() string {
	return p.Parameters
}
func (p *ListStartupscriptParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListStartupscriptParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListStartupscriptParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListStartupscriptParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListStartupscriptParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListStartupscriptParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListStartupscriptParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListStartupscriptParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListStartupscriptParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListStartupscriptParam) GetColumn() []string {
	return p.Column
}
func (p *ListStartupscriptParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListStartupscriptParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListStartupscriptParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListStartupscriptParam) GetFormat() string {
	return p.Format
}
func (p *ListStartupscriptParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListStartupscriptParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListStartupscriptParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListStartupscriptParam) GetQuery() string {
	return p.Query
}
func (p *ListStartupscriptParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListStartupscriptParam) GetQueryFile() string {
	return p.QueryFile
}

// CreateStartupscriptParam is input parameters for the sacloud API
type CreateStartupscriptParam struct {
	Script            string     `json:"script"`
	ScriptContent     string     `json:"script-content"`
	Class             string     `json:"class"`
	Name              string     `json:"name"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`

	input Input
}

// NewCreateStartupscriptParam return new CreateStartupscriptParam
func NewCreateStartupscriptParam(in Input) (*CreateStartupscriptParam, error) {
	v := &CreateStartupscriptParam{
		Class: "shell", input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateStartupscriptParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateStartupscriptParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Script) {
		p.Script = ""
	}
	if utils.IsEmpty(p.ScriptContent) {
		p.ScriptContent = ""
	}
	if utils.IsEmpty(p.Class) {
		p.Class = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *CreateStartupscriptParam) validate() error {
	var errors []error
	{
		validator := define.Resources["StartupScript"].Commands["create"].Params["script"].ValidateFunc
		errs := validator("--script", p.Script)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--script-content", p.ScriptContent, map[string]interface{}{

			"--script": p.Script,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--class", p.Class)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["StartupScript"].Commands["create"].Params["class"].ValidateFunc
		errs := validator("--class", p.Class)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["StartupScript"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["StartupScript"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["StartupScript"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateStartupscriptParam) ResourceDef() *schema.Resource {
	return define.Resources["StartupScript"]
}

func (p *CreateStartupscriptParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateStartupscriptParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateStartupscriptParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateStartupscriptParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateStartupscriptParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateStartupscriptParam) SetScript(v string) {
	p.Script = v
}

func (p *CreateStartupscriptParam) GetScript() string {
	return p.Script
}
func (p *CreateStartupscriptParam) SetScriptContent(v string) {
	p.ScriptContent = v
}

func (p *CreateStartupscriptParam) GetScriptContent() string {
	return p.ScriptContent
}
func (p *CreateStartupscriptParam) SetClass(v string) {
	p.Class = v
}

func (p *CreateStartupscriptParam) GetClass() string {
	return p.Class
}
func (p *CreateStartupscriptParam) SetName(v string) {
	p.Name = v
}

func (p *CreateStartupscriptParam) GetName() string {
	return p.Name
}
func (p *CreateStartupscriptParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateStartupscriptParam) GetTags() []string {
	return p.Tags
}
func (p *CreateStartupscriptParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateStartupscriptParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateStartupscriptParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateStartupscriptParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateStartupscriptParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateStartupscriptParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateStartupscriptParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateStartupscriptParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateStartupscriptParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateStartupscriptParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateStartupscriptParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateStartupscriptParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateStartupscriptParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateStartupscriptParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateStartupscriptParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateStartupscriptParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateStartupscriptParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateStartupscriptParam) GetColumn() []string {
	return p.Column
}
func (p *CreateStartupscriptParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateStartupscriptParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateStartupscriptParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateStartupscriptParam) GetFormat() string {
	return p.Format
}
func (p *CreateStartupscriptParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateStartupscriptParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateStartupscriptParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateStartupscriptParam) GetQuery() string {
	return p.Query
}
func (p *CreateStartupscriptParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateStartupscriptParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadStartupscriptParam is input parameters for the sacloud API
type ReadStartupscriptParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewReadStartupscriptParam return new ReadStartupscriptParam
func NewReadStartupscriptParam(in Input) (*ReadStartupscriptParam, error) {
	v := &ReadStartupscriptParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadStartupscriptParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadStartupscriptParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReadStartupscriptParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ReadStartupscriptParam) ResourceDef() *schema.Resource {
	return define.Resources["StartupScript"]
}

func (p *ReadStartupscriptParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadStartupscriptParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadStartupscriptParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadStartupscriptParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadStartupscriptParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReadStartupscriptParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadStartupscriptParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadStartupscriptParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadStartupscriptParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadStartupscriptParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadStartupscriptParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadStartupscriptParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadStartupscriptParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadStartupscriptParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadStartupscriptParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadStartupscriptParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadStartupscriptParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadStartupscriptParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadStartupscriptParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadStartupscriptParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadStartupscriptParam) GetColumn() []string {
	return p.Column
}
func (p *ReadStartupscriptParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadStartupscriptParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadStartupscriptParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadStartupscriptParam) GetFormat() string {
	return p.Format
}
func (p *ReadStartupscriptParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadStartupscriptParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadStartupscriptParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadStartupscriptParam) GetQuery() string {
	return p.Query
}
func (p *ReadStartupscriptParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadStartupscriptParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadStartupscriptParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadStartupscriptParam) GetId() sacloud.ID {
	return p.Id
}

// UpdateStartupscriptParam is input parameters for the sacloud API
type UpdateStartupscriptParam struct {
	Script            string     `json:"script"`
	ScriptContent     string     `json:"script-content"`
	Class             string     `json:"class"`
	Selector          []string   `json:"selector"`
	Name              string     `json:"name"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewUpdateStartupscriptParam return new UpdateStartupscriptParam
func NewUpdateStartupscriptParam(in Input) (*UpdateStartupscriptParam, error) {
	v := &UpdateStartupscriptParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateStartupscriptParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateStartupscriptParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Script) {
		p.Script = ""
	}
	if utils.IsEmpty(p.ScriptContent) {
		p.ScriptContent = ""
	}
	if utils.IsEmpty(p.Class) {
		p.Class = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UpdateStartupscriptParam) validate() error {
	var errors []error
	{
		validator := define.Resources["StartupScript"].Commands["update"].Params["script"].ValidateFunc
		errs := validator("--script", p.Script)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--script-content", p.ScriptContent, map[string]interface{}{

			"--script": p.Script,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["StartupScript"].Commands["update"].Params["class"].ValidateFunc
		errs := validator("--class", p.Class)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["StartupScript"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["StartupScript"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["StartupScript"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateStartupscriptParam) ResourceDef() *schema.Resource {
	return define.Resources["StartupScript"]
}

func (p *UpdateStartupscriptParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateStartupscriptParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateStartupscriptParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateStartupscriptParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateStartupscriptParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateStartupscriptParam) SetScript(v string) {
	p.Script = v
}

func (p *UpdateStartupscriptParam) GetScript() string {
	return p.Script
}
func (p *UpdateStartupscriptParam) SetScriptContent(v string) {
	p.ScriptContent = v
}

func (p *UpdateStartupscriptParam) GetScriptContent() string {
	return p.ScriptContent
}
func (p *UpdateStartupscriptParam) SetClass(v string) {
	p.Class = v
}

func (p *UpdateStartupscriptParam) GetClass() string {
	return p.Class
}
func (p *UpdateStartupscriptParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateStartupscriptParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateStartupscriptParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateStartupscriptParam) GetName() string {
	return p.Name
}
func (p *UpdateStartupscriptParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateStartupscriptParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateStartupscriptParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateStartupscriptParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateStartupscriptParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateStartupscriptParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateStartupscriptParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateStartupscriptParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateStartupscriptParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateStartupscriptParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateStartupscriptParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateStartupscriptParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateStartupscriptParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateStartupscriptParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateStartupscriptParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateStartupscriptParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateStartupscriptParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateStartupscriptParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateStartupscriptParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateStartupscriptParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateStartupscriptParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateStartupscriptParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateStartupscriptParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateStartupscriptParam) GetFormat() string {
	return p.Format
}
func (p *UpdateStartupscriptParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateStartupscriptParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateStartupscriptParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateStartupscriptParam) GetQuery() string {
	return p.Query
}
func (p *UpdateStartupscriptParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateStartupscriptParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateStartupscriptParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateStartupscriptParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteStartupscriptParam is input parameters for the sacloud API
type DeleteStartupscriptParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewDeleteStartupscriptParam return new DeleteStartupscriptParam
func NewDeleteStartupscriptParam(in Input) (*DeleteStartupscriptParam, error) {
	v := &DeleteStartupscriptParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteStartupscriptParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteStartupscriptParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DeleteStartupscriptParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DeleteStartupscriptParam) ResourceDef() *schema.Resource {
	return define.Resources["StartupScript"]
}

func (p *DeleteStartupscriptParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteStartupscriptParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteStartupscriptParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteStartupscriptParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteStartupscriptParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteStartupscriptParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteStartupscriptParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteStartupscriptParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteStartupscriptParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteStartupscriptParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteStartupscriptParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteStartupscriptParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteStartupscriptParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteStartupscriptParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteStartupscriptParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteStartupscriptParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteStartupscriptParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteStartupscriptParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteStartupscriptParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteStartupscriptParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteStartupscriptParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteStartupscriptParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteStartupscriptParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteStartupscriptParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteStartupscriptParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteStartupscriptParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteStartupscriptParam) GetFormat() string {
	return p.Format
}
func (p *DeleteStartupscriptParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteStartupscriptParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteStartupscriptParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteStartupscriptParam) GetQuery() string {
	return p.Query
}
func (p *DeleteStartupscriptParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteStartupscriptParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteStartupscriptParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteStartupscriptParam) GetId() sacloud.ID {
	return p.Id
}

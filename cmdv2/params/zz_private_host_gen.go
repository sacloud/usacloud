// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListPrivateHostParam is input parameters for the sacloud API
type ListPrivateHostParam struct {
	Tags []string
	Id   []sacloud.ID
	From int
	Max  int
	Sort []string
	Name []string

	input Input
}

// NewListPrivateHostParam return new ListPrivateHostParam
func NewListPrivateHostParam() *ListPrivateHostParam {
	return &ListPrivateHostParam{}
}

// Initialize init ListPrivateHostParam
func (p *ListPrivateHostParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListPrivateHostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListPrivateHostParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}

}

func (p *ListPrivateHostParam) validate() error {
	var errors []error

	{
		validator := define.Resources["PrivateHost"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PrivateHost"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListPrivateHostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *ListPrivateHostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListPrivateHostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListPrivateHostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListPrivateHostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListPrivateHostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListPrivateHostParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListPrivateHostParam) GetTags() []string {
	return p.Tags
}
func (p *ListPrivateHostParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListPrivateHostParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListPrivateHostParam) SetFrom(v int) {
	p.From = v
}

func (p *ListPrivateHostParam) GetFrom() int {
	return p.From
}
func (p *ListPrivateHostParam) SetMax(v int) {
	p.Max = v
}

func (p *ListPrivateHostParam) GetMax() int {
	return p.Max
}
func (p *ListPrivateHostParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListPrivateHostParam) GetSort() []string {
	return p.Sort
}
func (p *ListPrivateHostParam) SetName(v []string) {
	p.Name = v
}

func (p *ListPrivateHostParam) GetName() []string {
	return p.Name
}

// CreatePrivateHostParam is input parameters for the sacloud API
type CreatePrivateHostParam struct {
	Name        string
	Description string
	Tags        []string
	IconId      sacloud.ID

	input Input
}

// NewCreatePrivateHostParam return new CreatePrivateHostParam
func NewCreatePrivateHostParam() *CreatePrivateHostParam {
	return &CreatePrivateHostParam{}
}

// Initialize init CreatePrivateHostParam
func (p *CreatePrivateHostParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreatePrivateHostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreatePrivateHostParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}

}

func (p *CreatePrivateHostParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PrivateHost"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PrivateHost"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PrivateHost"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreatePrivateHostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *CreatePrivateHostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreatePrivateHostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreatePrivateHostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreatePrivateHostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreatePrivateHostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreatePrivateHostParam) SetName(v string) {
	p.Name = v
}

func (p *CreatePrivateHostParam) GetName() string {
	return p.Name
}
func (p *CreatePrivateHostParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreatePrivateHostParam) GetDescription() string {
	return p.Description
}
func (p *CreatePrivateHostParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreatePrivateHostParam) GetTags() []string {
	return p.Tags
}
func (p *CreatePrivateHostParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreatePrivateHostParam) GetIconId() sacloud.ID {
	return p.IconId
}

// ReadPrivateHostParam is input parameters for the sacloud API
type ReadPrivateHostParam struct {
	input Input
}

// NewReadPrivateHostParam return new ReadPrivateHostParam
func NewReadPrivateHostParam() *ReadPrivateHostParam {
	return &ReadPrivateHostParam{}
}

// Initialize init ReadPrivateHostParam
func (p *ReadPrivateHostParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadPrivateHostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadPrivateHostParam) fillValueToSkeleton() {

}

func (p *ReadPrivateHostParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadPrivateHostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *ReadPrivateHostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadPrivateHostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadPrivateHostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadPrivateHostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadPrivateHostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdatePrivateHostParam is input parameters for the sacloud API
type UpdatePrivateHostParam struct {
	Name        string
	Description string
	Tags        []string
	IconId      sacloud.ID

	input Input
}

// NewUpdatePrivateHostParam return new UpdatePrivateHostParam
func NewUpdatePrivateHostParam() *UpdatePrivateHostParam {
	return &UpdatePrivateHostParam{}
}

// Initialize init UpdatePrivateHostParam
func (p *UpdatePrivateHostParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdatePrivateHostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdatePrivateHostParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}

}

func (p *UpdatePrivateHostParam) validate() error {
	var errors []error

	{
		validator := define.Resources["PrivateHost"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PrivateHost"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PrivateHost"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PrivateHost"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdatePrivateHostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *UpdatePrivateHostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdatePrivateHostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdatePrivateHostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdatePrivateHostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdatePrivateHostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdatePrivateHostParam) SetName(v string) {
	p.Name = v
}

func (p *UpdatePrivateHostParam) GetName() string {
	return p.Name
}
func (p *UpdatePrivateHostParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdatePrivateHostParam) GetDescription() string {
	return p.Description
}
func (p *UpdatePrivateHostParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdatePrivateHostParam) GetTags() []string {
	return p.Tags
}
func (p *UpdatePrivateHostParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdatePrivateHostParam) GetIconId() sacloud.ID {
	return p.IconId
}

// DeletePrivateHostParam is input parameters for the sacloud API
type DeletePrivateHostParam struct {
	input Input
}

// NewDeletePrivateHostParam return new DeletePrivateHostParam
func NewDeletePrivateHostParam() *DeletePrivateHostParam {
	return &DeletePrivateHostParam{}
}

// Initialize init DeletePrivateHostParam
func (p *DeletePrivateHostParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeletePrivateHostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeletePrivateHostParam) fillValueToSkeleton() {

}

func (p *DeletePrivateHostParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeletePrivateHostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *DeletePrivateHostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeletePrivateHostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeletePrivateHostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeletePrivateHostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeletePrivateHostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ServerInfoPrivateHostParam is input parameters for the sacloud API
type ServerInfoPrivateHostParam struct {
	input Input
}

// NewServerInfoPrivateHostParam return new ServerInfoPrivateHostParam
func NewServerInfoPrivateHostParam() *ServerInfoPrivateHostParam {
	return &ServerInfoPrivateHostParam{}
}

// Initialize init ServerInfoPrivateHostParam
func (p *ServerInfoPrivateHostParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerInfoPrivateHostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerInfoPrivateHostParam) fillValueToSkeleton() {

}

func (p *ServerInfoPrivateHostParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ServerInfoPrivateHostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *ServerInfoPrivateHostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-info"]
}

func (p *ServerInfoPrivateHostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerInfoPrivateHostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerInfoPrivateHostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerInfoPrivateHostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ServerAddPrivateHostParam is input parameters for the sacloud API
type ServerAddPrivateHostParam struct {
	ServerId sacloud.ID

	input Input
}

// NewServerAddPrivateHostParam return new ServerAddPrivateHostParam
func NewServerAddPrivateHostParam() *ServerAddPrivateHostParam {
	return &ServerAddPrivateHostParam{}
}

// Initialize init ServerAddPrivateHostParam
func (p *ServerAddPrivateHostParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerAddPrivateHostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerAddPrivateHostParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.ServerId) {
		p.ServerId = sacloud.ID(0)
	}

}

func (p *ServerAddPrivateHostParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--server-id", p.ServerId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["server-add"].Params["server-id"].ValidateFunc
		errs := validator("--server-id", p.ServerId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerAddPrivateHostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *ServerAddPrivateHostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-add"]
}

func (p *ServerAddPrivateHostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerAddPrivateHostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerAddPrivateHostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerAddPrivateHostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerAddPrivateHostParam) SetServerId(v sacloud.ID) {
	p.ServerId = v
}

func (p *ServerAddPrivateHostParam) GetServerId() sacloud.ID {
	return p.ServerId
}

// ServerDeletePrivateHostParam is input parameters for the sacloud API
type ServerDeletePrivateHostParam struct {
	ServerId sacloud.ID

	input Input
}

// NewServerDeletePrivateHostParam return new ServerDeletePrivateHostParam
func NewServerDeletePrivateHostParam() *ServerDeletePrivateHostParam {
	return &ServerDeletePrivateHostParam{}
}

// Initialize init ServerDeletePrivateHostParam
func (p *ServerDeletePrivateHostParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerDeletePrivateHostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerDeletePrivateHostParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.ServerId) {
		p.ServerId = sacloud.ID(0)
	}

}

func (p *ServerDeletePrivateHostParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--server-id", p.ServerId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["server-delete"].Params["server-id"].ValidateFunc
		errs := validator("--server-id", p.ServerId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerDeletePrivateHostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *ServerDeletePrivateHostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-delete"]
}

func (p *ServerDeletePrivateHostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerDeletePrivateHostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerDeletePrivateHostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerDeletePrivateHostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerDeletePrivateHostParam) SetServerId(v sacloud.ID) {
	p.ServerId = v
}

func (p *ServerDeletePrivateHostParam) GetServerId() sacloud.ID {
	return p.ServerId
}

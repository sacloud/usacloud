// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListProductdiskParam is input parameters for the sacloud API
type ListProductdiskParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`

	input Input
}

// NewListProductdiskParam return new ListProductdiskParam
func NewListProductdiskParam(in Input) (*ListProductdiskParam, error) {
	v := &ListProductdiskParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListProductdiskParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListProductdiskParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListProductdiskParam) validate() error {
	var errors []error
	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProductDisk"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListProductdiskParam) ResourceDef() *schema.Resource {
	return define.Resources["ProductDisk"]
}

func (p *ListProductdiskParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListProductdiskParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListProductdiskParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListProductdiskParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListProductdiskParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListProductdiskParam) SetName(v []string) {
	p.Name = v
}

func (p *ListProductdiskParam) GetName() []string {
	return p.Name
}
func (p *ListProductdiskParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListProductdiskParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListProductdiskParam) SetFrom(v int) {
	p.From = v
}

func (p *ListProductdiskParam) GetFrom() int {
	return p.From
}
func (p *ListProductdiskParam) SetMax(v int) {
	p.Max = v
}

func (p *ListProductdiskParam) GetMax() int {
	return p.Max
}
func (p *ListProductdiskParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListProductdiskParam) GetSort() []string {
	return p.Sort
}
func (p *ListProductdiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListProductdiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListProductdiskParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListProductdiskParam) GetParameters() string {
	return p.Parameters
}
func (p *ListProductdiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListProductdiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListProductdiskParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListProductdiskParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListProductdiskParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListProductdiskParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListProductdiskParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListProductdiskParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListProductdiskParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListProductdiskParam) GetColumn() []string {
	return p.Column
}
func (p *ListProductdiskParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListProductdiskParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListProductdiskParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListProductdiskParam) GetFormat() string {
	return p.Format
}
func (p *ListProductdiskParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListProductdiskParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListProductdiskParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListProductdiskParam) GetQuery() string {
	return p.Query
}
func (p *ListProductdiskParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListProductdiskParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadProductdiskParam is input parameters for the sacloud API
type ReadProductdiskParam struct {
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewReadProductdiskParam return new ReadProductdiskParam
func NewReadProductdiskParam(in Input) (*ReadProductdiskParam, error) {
	v := &ReadProductdiskParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadProductdiskParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadProductdiskParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReadProductdiskParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProductDisk"].Commands["read"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ReadProductdiskParam) ResourceDef() *schema.Resource {
	return define.Resources["ProductDisk"]
}

func (p *ReadProductdiskParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadProductdiskParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadProductdiskParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadProductdiskParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadProductdiskParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReadProductdiskParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ReadProductdiskParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ReadProductdiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadProductdiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadProductdiskParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadProductdiskParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadProductdiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadProductdiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadProductdiskParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadProductdiskParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadProductdiskParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadProductdiskParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadProductdiskParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadProductdiskParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadProductdiskParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadProductdiskParam) GetColumn() []string {
	return p.Column
}
func (p *ReadProductdiskParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadProductdiskParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadProductdiskParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadProductdiskParam) GetFormat() string {
	return p.Format
}
func (p *ReadProductdiskParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadProductdiskParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadProductdiskParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadProductdiskParam) GetQuery() string {
	return p.Query
}
func (p *ReadProductdiskParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadProductdiskParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadProductdiskParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadProductdiskParam) GetId() sacloud.ID {
	return p.Id
}

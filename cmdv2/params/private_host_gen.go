// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListPrivatehostParam is input parameters for the sacloud API
type ListPrivatehostParam struct {
	Id   []sacloud.ID
	From int
	Max  int
	Sort []string
	Name []string
	Tags []string

	input Input
}

// NewListPrivatehostParam return new ListPrivatehostParam
func NewListPrivatehostParam() *ListPrivatehostParam {
	return &ListPrivatehostParam{}
}

// Initialize init ListPrivatehostParam
func (p *ListPrivatehostParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListPrivatehostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListPrivatehostParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}

}

func (p *ListPrivatehostParam) validate() error {
	var errors []error

	{
		validator := define.Resources["PrivateHost"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PrivateHost"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListPrivatehostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *ListPrivatehostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListPrivatehostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListPrivatehostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListPrivatehostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListPrivatehostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListPrivatehostParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListPrivatehostParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListPrivatehostParam) SetFrom(v int) {
	p.From = v
}

func (p *ListPrivatehostParam) GetFrom() int {
	return p.From
}
func (p *ListPrivatehostParam) SetMax(v int) {
	p.Max = v
}

func (p *ListPrivatehostParam) GetMax() int {
	return p.Max
}
func (p *ListPrivatehostParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListPrivatehostParam) GetSort() []string {
	return p.Sort
}
func (p *ListPrivatehostParam) SetName(v []string) {
	p.Name = v
}

func (p *ListPrivatehostParam) GetName() []string {
	return p.Name
}
func (p *ListPrivatehostParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListPrivatehostParam) GetTags() []string {
	return p.Tags
}

// CreatePrivatehostParam is input parameters for the sacloud API
type CreatePrivatehostParam struct {
	Name        string
	Description string
	Tags        []string
	IconId      sacloud.ID

	input Input
}

// NewCreatePrivatehostParam return new CreatePrivatehostParam
func NewCreatePrivatehostParam() *CreatePrivatehostParam {
	return &CreatePrivatehostParam{}
}

// Initialize init CreatePrivatehostParam
func (p *CreatePrivatehostParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreatePrivatehostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreatePrivatehostParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}

}

func (p *CreatePrivatehostParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PrivateHost"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PrivateHost"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PrivateHost"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreatePrivatehostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *CreatePrivatehostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreatePrivatehostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreatePrivatehostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreatePrivatehostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreatePrivatehostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreatePrivatehostParam) SetName(v string) {
	p.Name = v
}

func (p *CreatePrivatehostParam) GetName() string {
	return p.Name
}
func (p *CreatePrivatehostParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreatePrivatehostParam) GetDescription() string {
	return p.Description
}
func (p *CreatePrivatehostParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreatePrivatehostParam) GetTags() []string {
	return p.Tags
}
func (p *CreatePrivatehostParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreatePrivatehostParam) GetIconId() sacloud.ID {
	return p.IconId
}

// ReadPrivatehostParam is input parameters for the sacloud API
type ReadPrivatehostParam struct {
	input Input
}

// NewReadPrivatehostParam return new ReadPrivatehostParam
func NewReadPrivatehostParam() *ReadPrivatehostParam {
	return &ReadPrivatehostParam{}
}

// Initialize init ReadPrivatehostParam
func (p *ReadPrivatehostParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadPrivatehostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadPrivatehostParam) fillValueToSkeleton() {

}

func (p *ReadPrivatehostParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadPrivatehostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *ReadPrivatehostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadPrivatehostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadPrivatehostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadPrivatehostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadPrivatehostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdatePrivatehostParam is input parameters for the sacloud API
type UpdatePrivatehostParam struct {
	IconId      sacloud.ID
	Name        string
	Description string
	Tags        []string

	input Input
}

// NewUpdatePrivatehostParam return new UpdatePrivatehostParam
func NewUpdatePrivatehostParam() *UpdatePrivatehostParam {
	return &UpdatePrivatehostParam{}
}

// Initialize init UpdatePrivatehostParam
func (p *UpdatePrivatehostParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdatePrivatehostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdatePrivatehostParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}

}

func (p *UpdatePrivatehostParam) validate() error {
	var errors []error

	{
		validator := define.Resources["PrivateHost"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PrivateHost"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PrivateHost"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PrivateHost"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdatePrivatehostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *UpdatePrivatehostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdatePrivatehostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdatePrivatehostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdatePrivatehostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdatePrivatehostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdatePrivatehostParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdatePrivatehostParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdatePrivatehostParam) SetName(v string) {
	p.Name = v
}

func (p *UpdatePrivatehostParam) GetName() string {
	return p.Name
}
func (p *UpdatePrivatehostParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdatePrivatehostParam) GetDescription() string {
	return p.Description
}
func (p *UpdatePrivatehostParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdatePrivatehostParam) GetTags() []string {
	return p.Tags
}

// DeletePrivatehostParam is input parameters for the sacloud API
type DeletePrivatehostParam struct {
	input Input
}

// NewDeletePrivatehostParam return new DeletePrivatehostParam
func NewDeletePrivatehostParam() *DeletePrivatehostParam {
	return &DeletePrivatehostParam{}
}

// Initialize init DeletePrivatehostParam
func (p *DeletePrivatehostParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeletePrivatehostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeletePrivatehostParam) fillValueToSkeleton() {

}

func (p *DeletePrivatehostParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeletePrivatehostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *DeletePrivatehostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeletePrivatehostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeletePrivatehostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeletePrivatehostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeletePrivatehostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ServerInfoPrivatehostParam is input parameters for the sacloud API
type ServerInfoPrivatehostParam struct {
	input Input
}

// NewServerInfoPrivatehostParam return new ServerInfoPrivatehostParam
func NewServerInfoPrivatehostParam() *ServerInfoPrivatehostParam {
	return &ServerInfoPrivatehostParam{}
}

// Initialize init ServerInfoPrivatehostParam
func (p *ServerInfoPrivatehostParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerInfoPrivatehostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerInfoPrivatehostParam) fillValueToSkeleton() {

}

func (p *ServerInfoPrivatehostParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ServerInfoPrivatehostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *ServerInfoPrivatehostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-info"]
}

func (p *ServerInfoPrivatehostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerInfoPrivatehostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerInfoPrivatehostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerInfoPrivatehostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ServerAddPrivatehostParam is input parameters for the sacloud API
type ServerAddPrivatehostParam struct {
	ServerId sacloud.ID

	input Input
}

// NewServerAddPrivatehostParam return new ServerAddPrivatehostParam
func NewServerAddPrivatehostParam() *ServerAddPrivatehostParam {
	return &ServerAddPrivatehostParam{}
}

// Initialize init ServerAddPrivatehostParam
func (p *ServerAddPrivatehostParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerAddPrivatehostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerAddPrivatehostParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.ServerId) {
		p.ServerId = sacloud.ID(0)
	}

}

func (p *ServerAddPrivatehostParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--server-id", p.ServerId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["server-add"].Params["server-id"].ValidateFunc
		errs := validator("--server-id", p.ServerId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerAddPrivatehostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *ServerAddPrivatehostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-add"]
}

func (p *ServerAddPrivatehostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerAddPrivatehostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerAddPrivatehostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerAddPrivatehostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerAddPrivatehostParam) SetServerId(v sacloud.ID) {
	p.ServerId = v
}

func (p *ServerAddPrivatehostParam) GetServerId() sacloud.ID {
	return p.ServerId
}

// ServerDeletePrivatehostParam is input parameters for the sacloud API
type ServerDeletePrivatehostParam struct {
	ServerId sacloud.ID

	input Input
}

// NewServerDeletePrivatehostParam return new ServerDeletePrivatehostParam
func NewServerDeletePrivatehostParam() *ServerDeletePrivatehostParam {
	return &ServerDeletePrivatehostParam{}
}

// Initialize init ServerDeletePrivatehostParam
func (p *ServerDeletePrivatehostParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerDeletePrivatehostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerDeletePrivatehostParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.ServerId) {
		p.ServerId = sacloud.ID(0)
	}

}

func (p *ServerDeletePrivatehostParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--server-id", p.ServerId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["server-delete"].Params["server-id"].ValidateFunc
		errs := validator("--server-id", p.ServerId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerDeletePrivatehostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *ServerDeletePrivatehostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-delete"]
}

func (p *ServerDeletePrivatehostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerDeletePrivatehostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerDeletePrivatehostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerDeletePrivatehostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerDeletePrivatehostParam) SetServerId(v sacloud.ID) {
	p.ServerId = v
}

func (p *ServerDeletePrivatehostParam) GetServerId() sacloud.ID {
	return p.ServerId
}

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListSwitchParam is input parameters for the sacloud API
type ListSwitchParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Tags              []string     `json:"tags"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`

	input Input
}

// NewListSwitchParam return new ListSwitchParam
func NewListSwitchParam(in Input) (*ListSwitchParam, error) {
	v := &ListSwitchParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListSwitchParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListSwitchParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListSwitchParam) validate() error {
	var errors []error
	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Switch"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Switch"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListSwitchParam) ResourceDef() *schema.Resource {
	return define.Resources["Switch"]
}

func (p *ListSwitchParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListSwitchParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListSwitchParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListSwitchParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListSwitchParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListSwitchParam) SetName(v []string) {
	p.Name = v
}

func (p *ListSwitchParam) GetName() []string {
	return p.Name
}
func (p *ListSwitchParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListSwitchParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListSwitchParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListSwitchParam) GetTags() []string {
	return p.Tags
}
func (p *ListSwitchParam) SetFrom(v int) {
	p.From = v
}

func (p *ListSwitchParam) GetFrom() int {
	return p.From
}
func (p *ListSwitchParam) SetMax(v int) {
	p.Max = v
}

func (p *ListSwitchParam) GetMax() int {
	return p.Max
}
func (p *ListSwitchParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListSwitchParam) GetSort() []string {
	return p.Sort
}
func (p *ListSwitchParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListSwitchParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListSwitchParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListSwitchParam) GetParameters() string {
	return p.Parameters
}
func (p *ListSwitchParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListSwitchParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListSwitchParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListSwitchParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListSwitchParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListSwitchParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListSwitchParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListSwitchParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListSwitchParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListSwitchParam) GetColumn() []string {
	return p.Column
}
func (p *ListSwitchParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListSwitchParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListSwitchParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListSwitchParam) GetFormat() string {
	return p.Format
}
func (p *ListSwitchParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListSwitchParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListSwitchParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListSwitchParam) GetQuery() string {
	return p.Query
}
func (p *ListSwitchParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListSwitchParam) GetQueryFile() string {
	return p.QueryFile
}

// CreateSwitchParam is input parameters for the sacloud API
type CreateSwitchParam struct {
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`

	input Input
}

// NewCreateSwitchParam return new CreateSwitchParam
func NewCreateSwitchParam(in Input) (*CreateSwitchParam, error) {
	v := &CreateSwitchParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateSwitchParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateSwitchParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *CreateSwitchParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Switch"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Switch"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Switch"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Switch"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateSwitchParam) ResourceDef() *schema.Resource {
	return define.Resources["Switch"]
}

func (p *CreateSwitchParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateSwitchParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateSwitchParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateSwitchParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateSwitchParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateSwitchParam) SetName(v string) {
	p.Name = v
}

func (p *CreateSwitchParam) GetName() string {
	return p.Name
}
func (p *CreateSwitchParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateSwitchParam) GetDescription() string {
	return p.Description
}
func (p *CreateSwitchParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateSwitchParam) GetTags() []string {
	return p.Tags
}
func (p *CreateSwitchParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateSwitchParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateSwitchParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateSwitchParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateSwitchParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateSwitchParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateSwitchParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateSwitchParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateSwitchParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateSwitchParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateSwitchParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateSwitchParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateSwitchParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateSwitchParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateSwitchParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateSwitchParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateSwitchParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateSwitchParam) GetColumn() []string {
	return p.Column
}
func (p *CreateSwitchParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateSwitchParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateSwitchParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateSwitchParam) GetFormat() string {
	return p.Format
}
func (p *CreateSwitchParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateSwitchParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateSwitchParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateSwitchParam) GetQuery() string {
	return p.Query
}
func (p *CreateSwitchParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateSwitchParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadSwitchParam is input parameters for the sacloud API
type ReadSwitchParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewReadSwitchParam return new ReadSwitchParam
func NewReadSwitchParam(in Input) (*ReadSwitchParam, error) {
	v := &ReadSwitchParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadSwitchParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadSwitchParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReadSwitchParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ReadSwitchParam) ResourceDef() *schema.Resource {
	return define.Resources["Switch"]
}

func (p *ReadSwitchParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadSwitchParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadSwitchParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadSwitchParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadSwitchParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReadSwitchParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadSwitchParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadSwitchParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadSwitchParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadSwitchParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadSwitchParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadSwitchParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadSwitchParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadSwitchParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadSwitchParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadSwitchParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadSwitchParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadSwitchParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadSwitchParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadSwitchParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadSwitchParam) GetColumn() []string {
	return p.Column
}
func (p *ReadSwitchParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadSwitchParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadSwitchParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadSwitchParam) GetFormat() string {
	return p.Format
}
func (p *ReadSwitchParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadSwitchParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadSwitchParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadSwitchParam) GetQuery() string {
	return p.Query
}
func (p *ReadSwitchParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadSwitchParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadSwitchParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadSwitchParam) GetId() sacloud.ID {
	return p.Id
}

// UpdateSwitchParam is input parameters for the sacloud API
type UpdateSwitchParam struct {
	Selector          []string   `json:"selector"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewUpdateSwitchParam return new UpdateSwitchParam
func NewUpdateSwitchParam(in Input) (*UpdateSwitchParam, error) {
	v := &UpdateSwitchParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateSwitchParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateSwitchParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UpdateSwitchParam) validate() error {
	var errors []error
	{
		validator := define.Resources["Switch"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Switch"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Switch"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Switch"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateSwitchParam) ResourceDef() *schema.Resource {
	return define.Resources["Switch"]
}

func (p *UpdateSwitchParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateSwitchParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateSwitchParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateSwitchParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateSwitchParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateSwitchParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateSwitchParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateSwitchParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateSwitchParam) GetName() string {
	return p.Name
}
func (p *UpdateSwitchParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateSwitchParam) GetDescription() string {
	return p.Description
}
func (p *UpdateSwitchParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateSwitchParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateSwitchParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateSwitchParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateSwitchParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateSwitchParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateSwitchParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateSwitchParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateSwitchParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateSwitchParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateSwitchParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateSwitchParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateSwitchParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateSwitchParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateSwitchParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateSwitchParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateSwitchParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateSwitchParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateSwitchParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateSwitchParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateSwitchParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateSwitchParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateSwitchParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateSwitchParam) GetFormat() string {
	return p.Format
}
func (p *UpdateSwitchParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateSwitchParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateSwitchParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateSwitchParam) GetQuery() string {
	return p.Query
}
func (p *UpdateSwitchParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateSwitchParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateSwitchParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateSwitchParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteSwitchParam is input parameters for the sacloud API
type DeleteSwitchParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewDeleteSwitchParam return new DeleteSwitchParam
func NewDeleteSwitchParam(in Input) (*DeleteSwitchParam, error) {
	v := &DeleteSwitchParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteSwitchParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteSwitchParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DeleteSwitchParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DeleteSwitchParam) ResourceDef() *schema.Resource {
	return define.Resources["Switch"]
}

func (p *DeleteSwitchParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteSwitchParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteSwitchParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteSwitchParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteSwitchParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteSwitchParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteSwitchParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteSwitchParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteSwitchParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteSwitchParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteSwitchParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteSwitchParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteSwitchParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteSwitchParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteSwitchParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteSwitchParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteSwitchParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteSwitchParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteSwitchParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteSwitchParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteSwitchParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteSwitchParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteSwitchParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteSwitchParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteSwitchParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteSwitchParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteSwitchParam) GetFormat() string {
	return p.Format
}
func (p *DeleteSwitchParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteSwitchParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteSwitchParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteSwitchParam) GetQuery() string {
	return p.Query
}
func (p *DeleteSwitchParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteSwitchParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteSwitchParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteSwitchParam) GetId() sacloud.ID {
	return p.Id
}

// BridgeConnectSwitchParam is input parameters for the sacloud API
type BridgeConnectSwitchParam struct {
	BridgeId          sacloud.ID `json:"bridge-id"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewBridgeConnectSwitchParam return new BridgeConnectSwitchParam
func NewBridgeConnectSwitchParam(in Input) (*BridgeConnectSwitchParam, error) {
	v := &BridgeConnectSwitchParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BridgeConnectSwitchParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BridgeConnectSwitchParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.BridgeId) {
		p.BridgeId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *BridgeConnectSwitchParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--bridge-id", p.BridgeId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Switch"].Commands["bridge-connect"].Params["bridge-id"].ValidateFunc
		errs := validator("--bridge-id", p.BridgeId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *BridgeConnectSwitchParam) ResourceDef() *schema.Resource {
	return define.Resources["Switch"]
}

func (p *BridgeConnectSwitchParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["bridge-connect"]
}

func (p *BridgeConnectSwitchParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BridgeConnectSwitchParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BridgeConnectSwitchParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BridgeConnectSwitchParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *BridgeConnectSwitchParam) SetBridgeId(v sacloud.ID) {
	p.BridgeId = v
}

func (p *BridgeConnectSwitchParam) GetBridgeId() sacloud.ID {
	return p.BridgeId
}
func (p *BridgeConnectSwitchParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *BridgeConnectSwitchParam) GetSelector() []string {
	return p.Selector
}
func (p *BridgeConnectSwitchParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BridgeConnectSwitchParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BridgeConnectSwitchParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BridgeConnectSwitchParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BridgeConnectSwitchParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *BridgeConnectSwitchParam) GetParameters() string {
	return p.Parameters
}
func (p *BridgeConnectSwitchParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BridgeConnectSwitchParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BridgeConnectSwitchParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *BridgeConnectSwitchParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *BridgeConnectSwitchParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BridgeConnectSwitchParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BridgeConnectSwitchParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *BridgeConnectSwitchParam) GetId() sacloud.ID {
	return p.Id
}

// BridgeDisconnectSwitchParam is input parameters for the sacloud API
type BridgeDisconnectSwitchParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewBridgeDisconnectSwitchParam return new BridgeDisconnectSwitchParam
func NewBridgeDisconnectSwitchParam(in Input) (*BridgeDisconnectSwitchParam, error) {
	v := &BridgeDisconnectSwitchParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BridgeDisconnectSwitchParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BridgeDisconnectSwitchParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *BridgeDisconnectSwitchParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *BridgeDisconnectSwitchParam) ResourceDef() *schema.Resource {
	return define.Resources["Switch"]
}

func (p *BridgeDisconnectSwitchParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["bridge-disconnect"]
}

func (p *BridgeDisconnectSwitchParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BridgeDisconnectSwitchParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BridgeDisconnectSwitchParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BridgeDisconnectSwitchParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *BridgeDisconnectSwitchParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *BridgeDisconnectSwitchParam) GetSelector() []string {
	return p.Selector
}
func (p *BridgeDisconnectSwitchParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BridgeDisconnectSwitchParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BridgeDisconnectSwitchParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BridgeDisconnectSwitchParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BridgeDisconnectSwitchParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *BridgeDisconnectSwitchParam) GetParameters() string {
	return p.Parameters
}
func (p *BridgeDisconnectSwitchParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BridgeDisconnectSwitchParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BridgeDisconnectSwitchParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *BridgeDisconnectSwitchParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *BridgeDisconnectSwitchParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BridgeDisconnectSwitchParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BridgeDisconnectSwitchParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *BridgeDisconnectSwitchParam) GetId() sacloud.ID {
	return p.Id
}

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListSimParam is input parameters for the sacloud API
type ListSimParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Tags              []string     `json:"tags"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`

	input Input
}

// NewListSimParam return new ListSimParam
func NewListSimParam(in Input) (*ListSimParam, error) {
	v := &ListSimParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListSimParam) validate() error {
	var errors []error
	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ListSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListSimParam) SetName(v []string) {
	p.Name = v
}

func (p *ListSimParam) GetName() []string {
	return p.Name
}
func (p *ListSimParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListSimParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListSimParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListSimParam) GetTags() []string {
	return p.Tags
}
func (p *ListSimParam) SetFrom(v int) {
	p.From = v
}

func (p *ListSimParam) GetFrom() int {
	return p.From
}
func (p *ListSimParam) SetMax(v int) {
	p.Max = v
}

func (p *ListSimParam) GetMax() int {
	return p.Max
}
func (p *ListSimParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListSimParam) GetSort() []string {
	return p.Sort
}
func (p *ListSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListSimParam) GetParameters() string {
	return p.Parameters
}
func (p *ListSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListSimParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListSimParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListSimParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListSimParam) GetColumn() []string {
	return p.Column
}
func (p *ListSimParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListSimParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListSimParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListSimParam) GetFormat() string {
	return p.Format
}
func (p *ListSimParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListSimParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListSimParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListSimParam) GetQuery() string {
	return p.Query
}
func (p *ListSimParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListSimParam) GetQueryFile() string {
	return p.QueryFile
}

// CreateSimParam is input parameters for the sacloud API
type CreateSimParam struct {
	Iccid             string     `json:"iccid"`
	Passcode          string     `json:"passcode"`
	Disabled          bool       `json:"disabled"`
	Imei              string     `json:"imei"`
	Carrier           []string   `json:"carrier"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`

	input Input
}

// NewCreateSimParam return new CreateSimParam
func NewCreateSimParam(in Input) (*CreateSimParam, error) {
	v := &CreateSimParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Iccid) {
		p.Iccid = ""
	}
	if utils.IsEmpty(p.Passcode) {
		p.Passcode = ""
	}
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.Imei) {
		p.Imei = ""
	}
	if utils.IsEmpty(p.Carrier) {
		p.Carrier = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *CreateSimParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--iccid", p.Iccid)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--passcode", p.Passcode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--carrier", p.Carrier)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["create"].Params["carrier"].ValidateFunc
		errs := validator("--carrier", p.Carrier)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.SliceLenBetween("--carrier", p.Carrier, 1, 3)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *CreateSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateSimParam) SetIccid(v string) {
	p.Iccid = v
}

func (p *CreateSimParam) GetIccid() string {
	return p.Iccid
}
func (p *CreateSimParam) SetPasscode(v string) {
	p.Passcode = v
}

func (p *CreateSimParam) GetPasscode() string {
	return p.Passcode
}
func (p *CreateSimParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *CreateSimParam) GetDisabled() bool {
	return p.Disabled
}
func (p *CreateSimParam) SetImei(v string) {
	p.Imei = v
}

func (p *CreateSimParam) GetImei() string {
	return p.Imei
}
func (p *CreateSimParam) SetCarrier(v []string) {
	p.Carrier = v
}

func (p *CreateSimParam) GetCarrier() []string {
	return p.Carrier
}
func (p *CreateSimParam) SetName(v string) {
	p.Name = v
}

func (p *CreateSimParam) GetName() string {
	return p.Name
}
func (p *CreateSimParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateSimParam) GetDescription() string {
	return p.Description
}
func (p *CreateSimParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateSimParam) GetTags() []string {
	return p.Tags
}
func (p *CreateSimParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateSimParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateSimParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateSimParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateSimParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateSimParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateSimParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateSimParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateSimParam) GetColumn() []string {
	return p.Column
}
func (p *CreateSimParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateSimParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateSimParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateSimParam) GetFormat() string {
	return p.Format
}
func (p *CreateSimParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateSimParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateSimParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateSimParam) GetQuery() string {
	return p.Query
}
func (p *CreateSimParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateSimParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadSimParam is input parameters for the sacloud API
type ReadSimParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewReadSimParam return new ReadSimParam
func NewReadSimParam(in Input) (*ReadSimParam, error) {
	v := &ReadSimParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReadSimParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ReadSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ReadSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReadSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadSimParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadSimParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadSimParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadSimParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadSimParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadSimParam) GetColumn() []string {
	return p.Column
}
func (p *ReadSimParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadSimParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadSimParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadSimParam) GetFormat() string {
	return p.Format
}
func (p *ReadSimParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadSimParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadSimParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadSimParam) GetQuery() string {
	return p.Query
}
func (p *ReadSimParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadSimParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadSimParam) GetId() sacloud.ID {
	return p.Id
}

// UpdateSimParam is input parameters for the sacloud API
type UpdateSimParam struct {
	Selector          []string   `json:"selector"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewUpdateSimParam return new UpdateSimParam
func NewUpdateSimParam(in Input) (*UpdateSimParam, error) {
	v := &UpdateSimParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UpdateSimParam) validate() error {
	var errors []error
	{
		validator := define.Resources["SIM"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *UpdateSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateSimParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateSimParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateSimParam) GetName() string {
	return p.Name
}
func (p *UpdateSimParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateSimParam) GetDescription() string {
	return p.Description
}
func (p *UpdateSimParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateSimParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateSimParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateSimParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateSimParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateSimParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateSimParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateSimParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateSimParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateSimParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateSimParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateSimParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateSimParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateSimParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateSimParam) GetFormat() string {
	return p.Format
}
func (p *UpdateSimParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateSimParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateSimParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateSimParam) GetQuery() string {
	return p.Query
}
func (p *UpdateSimParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateSimParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateSimParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteSimParam is input parameters for the sacloud API
type DeleteSimParam struct {
	Force             bool       `json:"force"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewDeleteSimParam return new DeleteSimParam
func NewDeleteSimParam(in Input) (*DeleteSimParam, error) {
	v := &DeleteSimParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Force) {
		p.Force = false
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DeleteSimParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DeleteSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *DeleteSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteSimParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteSimParam) GetForce() bool {
	return p.Force
}
func (p *DeleteSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteSimParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteSimParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteSimParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteSimParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteSimParam) GetId() sacloud.ID {
	return p.Id
}

// CarrierInfoSimParam is input parameters for the sacloud API
type CarrierInfoSimParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewCarrierInfoSimParam return new CarrierInfoSimParam
func NewCarrierInfoSimParam(in Input) (*CarrierInfoSimParam, error) {
	v := &CarrierInfoSimParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CarrierInfoSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CarrierInfoSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *CarrierInfoSimParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CarrierInfoSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *CarrierInfoSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["carrier-info"]
}

func (p *CarrierInfoSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CarrierInfoSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CarrierInfoSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CarrierInfoSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CarrierInfoSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *CarrierInfoSimParam) GetSelector() []string {
	return p.Selector
}
func (p *CarrierInfoSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CarrierInfoSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CarrierInfoSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CarrierInfoSimParam) GetParameters() string {
	return p.Parameters
}
func (p *CarrierInfoSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CarrierInfoSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CarrierInfoSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CarrierInfoSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CarrierInfoSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CarrierInfoSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CarrierInfoSimParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CarrierInfoSimParam) GetOutputType() string {
	return p.OutputType
}
func (p *CarrierInfoSimParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CarrierInfoSimParam) GetColumn() []string {
	return p.Column
}
func (p *CarrierInfoSimParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CarrierInfoSimParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CarrierInfoSimParam) SetFormat(v string) {
	p.Format = v
}

func (p *CarrierInfoSimParam) GetFormat() string {
	return p.Format
}
func (p *CarrierInfoSimParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CarrierInfoSimParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CarrierInfoSimParam) SetQuery(v string) {
	p.Query = v
}

func (p *CarrierInfoSimParam) GetQuery() string {
	return p.Query
}
func (p *CarrierInfoSimParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CarrierInfoSimParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *CarrierInfoSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *CarrierInfoSimParam) GetId() sacloud.ID {
	return p.Id
}

// CarrierUpdateSimParam is input parameters for the sacloud API
type CarrierUpdateSimParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
	Carrier           []string   `json:"carrier"`

	input Input
}

// NewCarrierUpdateSimParam return new CarrierUpdateSimParam
func NewCarrierUpdateSimParam(in Input) (*CarrierUpdateSimParam, error) {
	v := &CarrierUpdateSimParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CarrierUpdateSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CarrierUpdateSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Carrier) {
		p.Carrier = []string{""}
	}

}

func (p *CarrierUpdateSimParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--carrier", p.Carrier)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["carrier-update"].Params["carrier"].ValidateFunc
		errs := validator("--carrier", p.Carrier)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.SliceLenBetween("--carrier", p.Carrier, 1, 3)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CarrierUpdateSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *CarrierUpdateSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["carrier-update"]
}

func (p *CarrierUpdateSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CarrierUpdateSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CarrierUpdateSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CarrierUpdateSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CarrierUpdateSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *CarrierUpdateSimParam) GetSelector() []string {
	return p.Selector
}
func (p *CarrierUpdateSimParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CarrierUpdateSimParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CarrierUpdateSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CarrierUpdateSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CarrierUpdateSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CarrierUpdateSimParam) GetParameters() string {
	return p.Parameters
}
func (p *CarrierUpdateSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CarrierUpdateSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CarrierUpdateSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CarrierUpdateSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CarrierUpdateSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CarrierUpdateSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CarrierUpdateSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *CarrierUpdateSimParam) GetId() sacloud.ID {
	return p.Id
}
func (p *CarrierUpdateSimParam) SetCarrier(v []string) {
	p.Carrier = v
}

func (p *CarrierUpdateSimParam) GetCarrier() []string {
	return p.Carrier
}

// ActivateSimParam is input parameters for the sacloud API
type ActivateSimParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewActivateSimParam return new ActivateSimParam
func NewActivateSimParam(in Input) (*ActivateSimParam, error) {
	v := &ActivateSimParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ActivateSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ActivateSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ActivateSimParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ActivateSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ActivateSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["activate"]
}

func (p *ActivateSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ActivateSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ActivateSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ActivateSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ActivateSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ActivateSimParam) GetSelector() []string {
	return p.Selector
}
func (p *ActivateSimParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ActivateSimParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ActivateSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ActivateSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ActivateSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ActivateSimParam) GetParameters() string {
	return p.Parameters
}
func (p *ActivateSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ActivateSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ActivateSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ActivateSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ActivateSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ActivateSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ActivateSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ActivateSimParam) GetId() sacloud.ID {
	return p.Id
}

// DeactivateSimParam is input parameters for the sacloud API
type DeactivateSimParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewDeactivateSimParam return new DeactivateSimParam
func NewDeactivateSimParam(in Input) (*DeactivateSimParam, error) {
	v := &DeactivateSimParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeactivateSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeactivateSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DeactivateSimParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DeactivateSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *DeactivateSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["deactivate"]
}

func (p *DeactivateSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeactivateSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeactivateSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeactivateSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeactivateSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeactivateSimParam) GetSelector() []string {
	return p.Selector
}
func (p *DeactivateSimParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeactivateSimParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeactivateSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeactivateSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeactivateSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeactivateSimParam) GetParameters() string {
	return p.Parameters
}
func (p *DeactivateSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeactivateSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeactivateSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeactivateSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeactivateSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeactivateSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeactivateSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeactivateSimParam) GetId() sacloud.ID {
	return p.Id
}

// ImeiLockSimParam is input parameters for the sacloud API
type ImeiLockSimParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
	Imei              string     `json:"imei"`

	input Input
}

// NewImeiLockSimParam return new ImeiLockSimParam
func NewImeiLockSimParam(in Input) (*ImeiLockSimParam, error) {
	v := &ImeiLockSimParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ImeiLockSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ImeiLockSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Imei) {
		p.Imei = ""
	}

}

func (p *ImeiLockSimParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--imei", p.Imei)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ImeiLockSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ImeiLockSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["imei-lock"]
}

func (p *ImeiLockSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ImeiLockSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ImeiLockSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ImeiLockSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ImeiLockSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ImeiLockSimParam) GetSelector() []string {
	return p.Selector
}
func (p *ImeiLockSimParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ImeiLockSimParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ImeiLockSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ImeiLockSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ImeiLockSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ImeiLockSimParam) GetParameters() string {
	return p.Parameters
}
func (p *ImeiLockSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ImeiLockSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ImeiLockSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ImeiLockSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ImeiLockSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ImeiLockSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ImeiLockSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ImeiLockSimParam) GetId() sacloud.ID {
	return p.Id
}
func (p *ImeiLockSimParam) SetImei(v string) {
	p.Imei = v
}

func (p *ImeiLockSimParam) GetImei() string {
	return p.Imei
}

// IpAddSimParam is input parameters for the sacloud API
type IpAddSimParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
	Ip                string     `json:"ip"`

	input Input
}

// NewIpAddSimParam return new IpAddSimParam
func NewIpAddSimParam(in Input) (*IpAddSimParam, error) {
	v := &IpAddSimParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *IpAddSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *IpAddSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Ip) {
		p.Ip = ""
	}

}

func (p *IpAddSimParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--ip", p.Ip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["ip-add"].Params["ip"].ValidateFunc
		errs := validator("--ip", p.Ip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *IpAddSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *IpAddSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ip-add"]
}

func (p *IpAddSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *IpAddSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *IpAddSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *IpAddSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *IpAddSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *IpAddSimParam) GetSelector() []string {
	return p.Selector
}
func (p *IpAddSimParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *IpAddSimParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *IpAddSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *IpAddSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *IpAddSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *IpAddSimParam) GetParameters() string {
	return p.Parameters
}
func (p *IpAddSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *IpAddSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *IpAddSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *IpAddSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *IpAddSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *IpAddSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *IpAddSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *IpAddSimParam) GetId() sacloud.ID {
	return p.Id
}
func (p *IpAddSimParam) SetIp(v string) {
	p.Ip = v
}

func (p *IpAddSimParam) GetIp() string {
	return p.Ip
}

// ImeiUnlockSimParam is input parameters for the sacloud API
type ImeiUnlockSimParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewImeiUnlockSimParam return new ImeiUnlockSimParam
func NewImeiUnlockSimParam(in Input) (*ImeiUnlockSimParam, error) {
	v := &ImeiUnlockSimParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ImeiUnlockSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ImeiUnlockSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ImeiUnlockSimParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ImeiUnlockSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ImeiUnlockSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["imei-unlock"]
}

func (p *ImeiUnlockSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ImeiUnlockSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ImeiUnlockSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ImeiUnlockSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ImeiUnlockSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ImeiUnlockSimParam) GetSelector() []string {
	return p.Selector
}
func (p *ImeiUnlockSimParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ImeiUnlockSimParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ImeiUnlockSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ImeiUnlockSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ImeiUnlockSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ImeiUnlockSimParam) GetParameters() string {
	return p.Parameters
}
func (p *ImeiUnlockSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ImeiUnlockSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ImeiUnlockSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ImeiUnlockSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ImeiUnlockSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ImeiUnlockSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ImeiUnlockSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ImeiUnlockSimParam) GetId() sacloud.ID {
	return p.Id
}

// IpDeleteSimParam is input parameters for the sacloud API
type IpDeleteSimParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewIpDeleteSimParam return new IpDeleteSimParam
func NewIpDeleteSimParam(in Input) (*IpDeleteSimParam, error) {
	v := &IpDeleteSimParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *IpDeleteSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *IpDeleteSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *IpDeleteSimParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *IpDeleteSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *IpDeleteSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ip-delete"]
}

func (p *IpDeleteSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *IpDeleteSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *IpDeleteSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *IpDeleteSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *IpDeleteSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *IpDeleteSimParam) GetSelector() []string {
	return p.Selector
}
func (p *IpDeleteSimParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *IpDeleteSimParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *IpDeleteSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *IpDeleteSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *IpDeleteSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *IpDeleteSimParam) GetParameters() string {
	return p.Parameters
}
func (p *IpDeleteSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *IpDeleteSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *IpDeleteSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *IpDeleteSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *IpDeleteSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *IpDeleteSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *IpDeleteSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *IpDeleteSimParam) GetId() sacloud.ID {
	return p.Id
}

// LogsSimParam is input parameters for the sacloud API
type LogsSimParam struct {
	Follow            bool       `json:"follow"`
	RefreshInterval   int64      `json:"refresh-interval"`
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewLogsSimParam return new LogsSimParam
func NewLogsSimParam(in Input) (*LogsSimParam, error) {
	v := &LogsSimParam{
		RefreshInterval: 3, input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *LogsSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *LogsSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Follow) {
		p.Follow = false
	}
	if utils.IsEmpty(p.RefreshInterval) {
		p.RefreshInterval = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *LogsSimParam) validate() error {
	var errors []error
	{
		validator := define.Resources["SIM"].Commands["logs"].Params["refresh-interval"].ValidateFunc
		errs := validator("--refresh-interval", p.RefreshInterval)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *LogsSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *LogsSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["logs"]
}

func (p *LogsSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *LogsSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *LogsSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *LogsSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *LogsSimParam) SetFollow(v bool) {
	p.Follow = v
}

func (p *LogsSimParam) GetFollow() bool {
	return p.Follow
}
func (p *LogsSimParam) SetRefreshInterval(v int64) {
	p.RefreshInterval = v
}

func (p *LogsSimParam) GetRefreshInterval() int64 {
	return p.RefreshInterval
}
func (p *LogsSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *LogsSimParam) GetSelector() []string {
	return p.Selector
}
func (p *LogsSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *LogsSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *LogsSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *LogsSimParam) GetParameters() string {
	return p.Parameters
}
func (p *LogsSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *LogsSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *LogsSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *LogsSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *LogsSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *LogsSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *LogsSimParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *LogsSimParam) GetOutputType() string {
	return p.OutputType
}
func (p *LogsSimParam) SetColumn(v []string) {
	p.Column = v
}

func (p *LogsSimParam) GetColumn() []string {
	return p.Column
}
func (p *LogsSimParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *LogsSimParam) GetQuiet() bool {
	return p.Quiet
}
func (p *LogsSimParam) SetFormat(v string) {
	p.Format = v
}

func (p *LogsSimParam) GetFormat() string {
	return p.Format
}
func (p *LogsSimParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *LogsSimParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *LogsSimParam) SetQuery(v string) {
	p.Query = v
}

func (p *LogsSimParam) GetQuery() string {
	return p.Query
}
func (p *LogsSimParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *LogsSimParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *LogsSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *LogsSimParam) GetId() sacloud.ID {
	return p.Id
}

// MonitorSimParam is input parameters for the sacloud API
type MonitorSimParam struct {
	Start             string     `json:"start"`
	End               string     `json:"end"`
	KeyFormat         string     `json:"key-format"`
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewMonitorSimParam return new MonitorSimParam
func NewMonitorSimParam(in Input) (*MonitorSimParam, error) {
	v := &MonitorSimParam{
		KeyFormat: "sakuracloud.sim.{{.ID}}", input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorSimParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorSimParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *MonitorSimParam) validate() error {
	var errors []error
	{
		validator := define.Resources["SIM"].Commands["monitor"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["monitor"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorSimParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *MonitorSimParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor"]
}

func (p *MonitorSimParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorSimParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorSimParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorSimParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorSimParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorSimParam) GetStart() string {
	return p.Start
}
func (p *MonitorSimParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorSimParam) GetEnd() string {
	return p.End
}
func (p *MonitorSimParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorSimParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *MonitorSimParam) GetSelector() []string {
	return p.Selector
}
func (p *MonitorSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *MonitorSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *MonitorSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *MonitorSimParam) GetParameters() string {
	return p.Parameters
}
func (p *MonitorSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *MonitorSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *MonitorSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *MonitorSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *MonitorSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *MonitorSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *MonitorSimParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *MonitorSimParam) GetOutputType() string {
	return p.OutputType
}
func (p *MonitorSimParam) SetColumn(v []string) {
	p.Column = v
}

func (p *MonitorSimParam) GetColumn() []string {
	return p.Column
}
func (p *MonitorSimParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *MonitorSimParam) GetQuiet() bool {
	return p.Quiet
}
func (p *MonitorSimParam) SetFormat(v string) {
	p.Format = v
}

func (p *MonitorSimParam) GetFormat() string {
	return p.Format
}
func (p *MonitorSimParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *MonitorSimParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *MonitorSimParam) SetQuery(v string) {
	p.Query = v
}

func (p *MonitorSimParam) GetQuery() string {
	return p.Query
}
func (p *MonitorSimParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *MonitorSimParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *MonitorSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *MonitorSimParam) GetId() sacloud.ID {
	return p.Id
}

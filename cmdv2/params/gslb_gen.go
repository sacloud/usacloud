// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListGslbParam is input parameters for the sacloud API
type ListGslbParam struct {
	Sort []string
	Tags []string
	Name []string
	Id   []sacloud.ID
	From int
	Max  int

	input Input
}

// NewListGslbParam return new ListGslbParam
func NewListGslbParam() *ListGslbParam {
	return &ListGslbParam{}
}

// Initialize init ListGslbParam
func (p *ListGslbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListGslbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListGslbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}

}

func (p *ListGslbParam) validate() error {
	var errors []error

	{
		validator := define.Resources["GSLB"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListGslbParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ListGslbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListGslbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListGslbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListGslbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListGslbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListGslbParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListGslbParam) GetSort() []string {
	return p.Sort
}
func (p *ListGslbParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListGslbParam) GetTags() []string {
	return p.Tags
}
func (p *ListGslbParam) SetName(v []string) {
	p.Name = v
}

func (p *ListGslbParam) GetName() []string {
	return p.Name
}
func (p *ListGslbParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListGslbParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListGslbParam) SetFrom(v int) {
	p.From = v
}

func (p *ListGslbParam) GetFrom() int {
	return p.From
}
func (p *ListGslbParam) SetMax(v int) {
	p.Max = v
}

func (p *ListGslbParam) GetMax() int {
	return p.Max
}

// ServerInfoGslbParam is input parameters for the sacloud API
type ServerInfoGslbParam struct {
	input Input
}

// NewServerInfoGslbParam return new ServerInfoGslbParam
func NewServerInfoGslbParam() *ServerInfoGslbParam {
	return &ServerInfoGslbParam{}
}

// Initialize init ServerInfoGslbParam
func (p *ServerInfoGslbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerInfoGslbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerInfoGslbParam) fillValueToSkeleton() {

}

func (p *ServerInfoGslbParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ServerInfoGslbParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ServerInfoGslbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-info"]
}

func (p *ServerInfoGslbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerInfoGslbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerInfoGslbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerInfoGslbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// CreateGslbParam is input parameters for the sacloud API
type CreateGslbParam struct {
	Name         string
	Tags         []string
	IconId       sacloud.ID
	ResponseCode int
	DelayLoop    int
	SorryServer  string
	Port         int
	Weighted     bool
	Description  string
	Protocol     string
	HostHeader   string
	Path         string

	input Input
}

// NewCreateGslbParam return new CreateGslbParam
func NewCreateGslbParam() *CreateGslbParam {
	return &CreateGslbParam{
		ResponseCode: 200, DelayLoop: 10, Weighted: true, Protocol: "ping", Path: "/"}
}

// Initialize init CreateGslbParam
func (p *CreateGslbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateGslbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateGslbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.ResponseCode) {
		p.ResponseCode = 0
	}
	if utils.IsEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if utils.IsEmpty(p.SorryServer) {
		p.SorryServer = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.Weighted) {
		p.Weighted = false
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.HostHeader) {
		p.HostHeader = ""
	}
	if utils.IsEmpty(p.Path) {
		p.Path = ""
	}

}

func (p *CreateGslbParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["create"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateGslbParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *CreateGslbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateGslbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateGslbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateGslbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateGslbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateGslbParam) SetName(v string) {
	p.Name = v
}

func (p *CreateGslbParam) GetName() string {
	return p.Name
}
func (p *CreateGslbParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateGslbParam) GetTags() []string {
	return p.Tags
}
func (p *CreateGslbParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateGslbParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateGslbParam) SetResponseCode(v int) {
	p.ResponseCode = v
}

func (p *CreateGslbParam) GetResponseCode() int {
	return p.ResponseCode
}
func (p *CreateGslbParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *CreateGslbParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *CreateGslbParam) SetSorryServer(v string) {
	p.SorryServer = v
}

func (p *CreateGslbParam) GetSorryServer() string {
	return p.SorryServer
}
func (p *CreateGslbParam) SetPort(v int) {
	p.Port = v
}

func (p *CreateGslbParam) GetPort() int {
	return p.Port
}
func (p *CreateGslbParam) SetWeighted(v bool) {
	p.Weighted = v
}

func (p *CreateGslbParam) GetWeighted() bool {
	return p.Weighted
}
func (p *CreateGslbParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateGslbParam) GetDescription() string {
	return p.Description
}
func (p *CreateGslbParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *CreateGslbParam) GetProtocol() string {
	return p.Protocol
}
func (p *CreateGslbParam) SetHostHeader(v string) {
	p.HostHeader = v
}

func (p *CreateGslbParam) GetHostHeader() string {
	return p.HostHeader
}
func (p *CreateGslbParam) SetPath(v string) {
	p.Path = v
}

func (p *CreateGslbParam) GetPath() string {
	return p.Path
}

// ServerAddGslbParam is input parameters for the sacloud API
type ServerAddGslbParam struct {
	Disabled  bool
	Weight    int
	Ipaddress string

	input Input
}

// NewServerAddGslbParam return new ServerAddGslbParam
func NewServerAddGslbParam() *ServerAddGslbParam {
	return &ServerAddGslbParam{}
}

// Initialize init ServerAddGslbParam
func (p *ServerAddGslbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerAddGslbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerAddGslbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.Weight) {
		p.Weight = 0
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}

}

func (p *ServerAddGslbParam) validate() error {
	var errors []error

	{
		validator := define.Resources["GSLB"].Commands["server-add"].Params["weight"].ValidateFunc
		errs := validator("--weight", p.Weight)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["server-add"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerAddGslbParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ServerAddGslbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-add"]
}

func (p *ServerAddGslbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerAddGslbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerAddGslbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerAddGslbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerAddGslbParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *ServerAddGslbParam) GetDisabled() bool {
	return p.Disabled
}
func (p *ServerAddGslbParam) SetWeight(v int) {
	p.Weight = v
}

func (p *ServerAddGslbParam) GetWeight() int {
	return p.Weight
}
func (p *ServerAddGslbParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerAddGslbParam) GetIpaddress() string {
	return p.Ipaddress
}

// ReadGslbParam is input parameters for the sacloud API
type ReadGslbParam struct {
	input Input
}

// NewReadGslbParam return new ReadGslbParam
func NewReadGslbParam() *ReadGslbParam {
	return &ReadGslbParam{}
}

// Initialize init ReadGslbParam
func (p *ReadGslbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadGslbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadGslbParam) fillValueToSkeleton() {

}

func (p *ReadGslbParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadGslbParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ReadGslbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadGslbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadGslbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadGslbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadGslbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ServerUpdateGslbParam is input parameters for the sacloud API
type ServerUpdateGslbParam struct {
	Disabled  bool
	Weight    int
	Index     int
	Ipaddress string

	input Input
}

// NewServerUpdateGslbParam return new ServerUpdateGslbParam
func NewServerUpdateGslbParam() *ServerUpdateGslbParam {
	return &ServerUpdateGslbParam{}
}

// Initialize init ServerUpdateGslbParam
func (p *ServerUpdateGslbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerUpdateGslbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerUpdateGslbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.Weight) {
		p.Weight = 0
	}
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}

}

func (p *ServerUpdateGslbParam) validate() error {
	var errors []error

	{
		validator := define.Resources["GSLB"].Commands["server-update"].Params["weight"].ValidateFunc
		errs := validator("--weight", p.Weight)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["server-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerUpdateGslbParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ServerUpdateGslbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-update"]
}

func (p *ServerUpdateGslbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerUpdateGslbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerUpdateGslbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerUpdateGslbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerUpdateGslbParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *ServerUpdateGslbParam) GetDisabled() bool {
	return p.Disabled
}
func (p *ServerUpdateGslbParam) SetWeight(v int) {
	p.Weight = v
}

func (p *ServerUpdateGslbParam) GetWeight() int {
	return p.Weight
}
func (p *ServerUpdateGslbParam) SetIndex(v int) {
	p.Index = v
}

func (p *ServerUpdateGslbParam) GetIndex() int {
	return p.Index
}
func (p *ServerUpdateGslbParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerUpdateGslbParam) GetIpaddress() string {
	return p.Ipaddress
}

// ServerDeleteGslbParam is input parameters for the sacloud API
type ServerDeleteGslbParam struct {
	Index int

	input Input
}

// NewServerDeleteGslbParam return new ServerDeleteGslbParam
func NewServerDeleteGslbParam() *ServerDeleteGslbParam {
	return &ServerDeleteGslbParam{}
}

// Initialize init ServerDeleteGslbParam
func (p *ServerDeleteGslbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerDeleteGslbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerDeleteGslbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *ServerDeleteGslbParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerDeleteGslbParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ServerDeleteGslbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-delete"]
}

func (p *ServerDeleteGslbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerDeleteGslbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerDeleteGslbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerDeleteGslbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerDeleteGslbParam) SetIndex(v int) {
	p.Index = v
}

func (p *ServerDeleteGslbParam) GetIndex() int {
	return p.Index
}

// UpdateGslbParam is input parameters for the sacloud API
type UpdateGslbParam struct {
	Tags         []string
	Protocol     string
	HostHeader   string
	Path         string
	ResponseCode int
	Port         int
	DelayLoop    int
	Name         string
	IconId       sacloud.ID
	Weighted     bool
	SorryServer  string
	Description  string

	input Input
}

// NewUpdateGslbParam return new UpdateGslbParam
func NewUpdateGslbParam() *UpdateGslbParam {
	return &UpdateGslbParam{}
}

// Initialize init UpdateGslbParam
func (p *UpdateGslbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateGslbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateGslbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.HostHeader) {
		p.HostHeader = ""
	}
	if utils.IsEmpty(p.Path) {
		p.Path = ""
	}
	if utils.IsEmpty(p.ResponseCode) {
		p.ResponseCode = 0
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Weighted) {
		p.Weighted = false
	}
	if utils.IsEmpty(p.SorryServer) {
		p.SorryServer = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}

}

func (p *UpdateGslbParam) validate() error {
	var errors []error

	{
		validator := define.Resources["GSLB"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["update"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateGslbParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *UpdateGslbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateGslbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateGslbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateGslbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateGslbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateGslbParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateGslbParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateGslbParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *UpdateGslbParam) GetProtocol() string {
	return p.Protocol
}
func (p *UpdateGslbParam) SetHostHeader(v string) {
	p.HostHeader = v
}

func (p *UpdateGslbParam) GetHostHeader() string {
	return p.HostHeader
}
func (p *UpdateGslbParam) SetPath(v string) {
	p.Path = v
}

func (p *UpdateGslbParam) GetPath() string {
	return p.Path
}
func (p *UpdateGslbParam) SetResponseCode(v int) {
	p.ResponseCode = v
}

func (p *UpdateGslbParam) GetResponseCode() int {
	return p.ResponseCode
}
func (p *UpdateGslbParam) SetPort(v int) {
	p.Port = v
}

func (p *UpdateGslbParam) GetPort() int {
	return p.Port
}
func (p *UpdateGslbParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *UpdateGslbParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *UpdateGslbParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateGslbParam) GetName() string {
	return p.Name
}
func (p *UpdateGslbParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateGslbParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateGslbParam) SetWeighted(v bool) {
	p.Weighted = v
}

func (p *UpdateGslbParam) GetWeighted() bool {
	return p.Weighted
}
func (p *UpdateGslbParam) SetSorryServer(v string) {
	p.SorryServer = v
}

func (p *UpdateGslbParam) GetSorryServer() string {
	return p.SorryServer
}
func (p *UpdateGslbParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateGslbParam) GetDescription() string {
	return p.Description
}

// DeleteGslbParam is input parameters for the sacloud API
type DeleteGslbParam struct {
	input Input
}

// NewDeleteGslbParam return new DeleteGslbParam
func NewDeleteGslbParam() *DeleteGslbParam {
	return &DeleteGslbParam{}
}

// Initialize init DeleteGslbParam
func (p *DeleteGslbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteGslbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteGslbParam) fillValueToSkeleton() {

}

func (p *DeleteGslbParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteGslbParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *DeleteGslbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteGslbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteGslbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteGslbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteGslbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListGSLBParam is input parameters for the sacloud API
type ListGSLBParam struct {
	Sort []string
	Name []string
	Tags []string
	Id   []sacloud.ID
	From int
	Max  int

	input Input
}

// NewListGSLBParam return new ListGSLBParam
func NewListGSLBParam() *ListGSLBParam {
	return &ListGSLBParam{}
}

// Initialize init ListGSLBParam
func (p *ListGSLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListGSLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListGSLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}

}

func (p *ListGSLBParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListGSLBParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ListGSLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListGSLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListGSLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListGSLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListGSLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListGSLBParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListGSLBParam) GetSort() []string {
	return p.Sort
}
func (p *ListGSLBParam) SetName(v []string) {
	p.Name = v
}

func (p *ListGSLBParam) GetName() []string {
	return p.Name
}
func (p *ListGSLBParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListGSLBParam) GetTags() []string {
	return p.Tags
}
func (p *ListGSLBParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListGSLBParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListGSLBParam) SetFrom(v int) {
	p.From = v
}

func (p *ListGSLBParam) GetFrom() int {
	return p.From
}
func (p *ListGSLBParam) SetMax(v int) {
	p.Max = v
}

func (p *ListGSLBParam) GetMax() int {
	return p.Max
}

// ServerInfoGSLBParam is input parameters for the sacloud API
type ServerInfoGSLBParam struct {
	input Input
}

// NewServerInfoGSLBParam return new ServerInfoGSLBParam
func NewServerInfoGSLBParam() *ServerInfoGSLBParam {
	return &ServerInfoGSLBParam{}
}

// Initialize init ServerInfoGSLBParam
func (p *ServerInfoGSLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerInfoGSLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerInfoGSLBParam) fillValueToSkeleton() {

}

func (p *ServerInfoGSLBParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ServerInfoGSLBParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ServerInfoGSLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-info"]
}

func (p *ServerInfoGSLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerInfoGSLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerInfoGSLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerInfoGSLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// CreateGSLBParam is input parameters for the sacloud API
type CreateGSLBParam struct {
	IconId       sacloud.ID
	Protocol     string
	DelayLoop    int
	Weighted     bool
	SorryServer  string
	Name         string
	Description  string
	Tags         []string
	HostHeader   string
	Path         string
	ResponseCode int
	Port         int

	input Input
}

// NewCreateGSLBParam return new CreateGSLBParam
func NewCreateGSLBParam() *CreateGSLBParam {
	return &CreateGSLBParam{
		Protocol: "ping", DelayLoop: 10, Weighted: true, Path: "/", ResponseCode: 200}
}

// Initialize init CreateGSLBParam
func (p *CreateGSLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateGSLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateGSLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if utils.IsEmpty(p.Weighted) {
		p.Weighted = false
	}
	if utils.IsEmpty(p.SorryServer) {
		p.SorryServer = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.HostHeader) {
		p.HostHeader = ""
	}
	if utils.IsEmpty(p.Path) {
		p.Path = ""
	}
	if utils.IsEmpty(p.ResponseCode) {
		p.ResponseCode = 0
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}

}

func (p *CreateGSLBParam) validate() error {
	var errors []error

	{
		validator := define.Resources["GSLB"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["create"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateGSLBParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *CreateGSLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateGSLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateGSLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateGSLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateGSLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateGSLBParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateGSLBParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateGSLBParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *CreateGSLBParam) GetProtocol() string {
	return p.Protocol
}
func (p *CreateGSLBParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *CreateGSLBParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *CreateGSLBParam) SetWeighted(v bool) {
	p.Weighted = v
}

func (p *CreateGSLBParam) GetWeighted() bool {
	return p.Weighted
}
func (p *CreateGSLBParam) SetSorryServer(v string) {
	p.SorryServer = v
}

func (p *CreateGSLBParam) GetSorryServer() string {
	return p.SorryServer
}
func (p *CreateGSLBParam) SetName(v string) {
	p.Name = v
}

func (p *CreateGSLBParam) GetName() string {
	return p.Name
}
func (p *CreateGSLBParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateGSLBParam) GetDescription() string {
	return p.Description
}
func (p *CreateGSLBParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateGSLBParam) GetTags() []string {
	return p.Tags
}
func (p *CreateGSLBParam) SetHostHeader(v string) {
	p.HostHeader = v
}

func (p *CreateGSLBParam) GetHostHeader() string {
	return p.HostHeader
}
func (p *CreateGSLBParam) SetPath(v string) {
	p.Path = v
}

func (p *CreateGSLBParam) GetPath() string {
	return p.Path
}
func (p *CreateGSLBParam) SetResponseCode(v int) {
	p.ResponseCode = v
}

func (p *CreateGSLBParam) GetResponseCode() int {
	return p.ResponseCode
}
func (p *CreateGSLBParam) SetPort(v int) {
	p.Port = v
}

func (p *CreateGSLBParam) GetPort() int {
	return p.Port
}

// ServerAddGSLBParam is input parameters for the sacloud API
type ServerAddGSLBParam struct {
	Ipaddress string
	Disabled  bool
	Weight    int

	input Input
}

// NewServerAddGSLBParam return new ServerAddGSLBParam
func NewServerAddGSLBParam() *ServerAddGSLBParam {
	return &ServerAddGSLBParam{}
}

// Initialize init ServerAddGSLBParam
func (p *ServerAddGSLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerAddGSLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerAddGSLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.Weight) {
		p.Weight = 0
	}

}

func (p *ServerAddGSLBParam) validate() error {
	var errors []error

	{
		validator := define.Resources["GSLB"].Commands["server-add"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["server-add"].Params["weight"].ValidateFunc
		errs := validator("--weight", p.Weight)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerAddGSLBParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ServerAddGSLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-add"]
}

func (p *ServerAddGSLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerAddGSLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerAddGSLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerAddGSLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerAddGSLBParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerAddGSLBParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerAddGSLBParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *ServerAddGSLBParam) GetDisabled() bool {
	return p.Disabled
}
func (p *ServerAddGSLBParam) SetWeight(v int) {
	p.Weight = v
}

func (p *ServerAddGSLBParam) GetWeight() int {
	return p.Weight
}

// ReadGSLBParam is input parameters for the sacloud API
type ReadGSLBParam struct {
	input Input
}

// NewReadGSLBParam return new ReadGSLBParam
func NewReadGSLBParam() *ReadGSLBParam {
	return &ReadGSLBParam{}
}

// Initialize init ReadGSLBParam
func (p *ReadGSLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadGSLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadGSLBParam) fillValueToSkeleton() {

}

func (p *ReadGSLBParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadGSLBParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ReadGSLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadGSLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadGSLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadGSLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadGSLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ServerUpdateGSLBParam is input parameters for the sacloud API
type ServerUpdateGSLBParam struct {
	Index     int
	Ipaddress string
	Disabled  bool
	Weight    int

	input Input
}

// NewServerUpdateGSLBParam return new ServerUpdateGSLBParam
func NewServerUpdateGSLBParam() *ServerUpdateGSLBParam {
	return &ServerUpdateGSLBParam{}
}

// Initialize init ServerUpdateGSLBParam
func (p *ServerUpdateGSLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerUpdateGSLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerUpdateGSLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.Weight) {
		p.Weight = 0
	}

}

func (p *ServerUpdateGSLBParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["server-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["server-update"].Params["weight"].ValidateFunc
		errs := validator("--weight", p.Weight)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerUpdateGSLBParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ServerUpdateGSLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-update"]
}

func (p *ServerUpdateGSLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerUpdateGSLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerUpdateGSLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerUpdateGSLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerUpdateGSLBParam) SetIndex(v int) {
	p.Index = v
}

func (p *ServerUpdateGSLBParam) GetIndex() int {
	return p.Index
}
func (p *ServerUpdateGSLBParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerUpdateGSLBParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerUpdateGSLBParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *ServerUpdateGSLBParam) GetDisabled() bool {
	return p.Disabled
}
func (p *ServerUpdateGSLBParam) SetWeight(v int) {
	p.Weight = v
}

func (p *ServerUpdateGSLBParam) GetWeight() int {
	return p.Weight
}

// ServerDeleteGSLBParam is input parameters for the sacloud API
type ServerDeleteGSLBParam struct {
	Index int

	input Input
}

// NewServerDeleteGSLBParam return new ServerDeleteGSLBParam
func NewServerDeleteGSLBParam() *ServerDeleteGSLBParam {
	return &ServerDeleteGSLBParam{}
}

// Initialize init ServerDeleteGSLBParam
func (p *ServerDeleteGSLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerDeleteGSLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerDeleteGSLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *ServerDeleteGSLBParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerDeleteGSLBParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ServerDeleteGSLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-delete"]
}

func (p *ServerDeleteGSLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerDeleteGSLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerDeleteGSLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerDeleteGSLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerDeleteGSLBParam) SetIndex(v int) {
	p.Index = v
}

func (p *ServerDeleteGSLBParam) GetIndex() int {
	return p.Index
}

// UpdateGSLBParam is input parameters for the sacloud API
type UpdateGSLBParam struct {
	Description  string
	Tags         []string
	Protocol     string
	HostHeader   string
	Path         string
	ResponseCode int
	DelayLoop    int
	Port         int
	Weighted     bool
	SorryServer  string
	Name         string
	IconId       sacloud.ID

	input Input
}

// NewUpdateGSLBParam return new UpdateGSLBParam
func NewUpdateGSLBParam() *UpdateGSLBParam {
	return &UpdateGSLBParam{}
}

// Initialize init UpdateGSLBParam
func (p *UpdateGSLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateGSLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateGSLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.HostHeader) {
		p.HostHeader = ""
	}
	if utils.IsEmpty(p.Path) {
		p.Path = ""
	}
	if utils.IsEmpty(p.ResponseCode) {
		p.ResponseCode = 0
	}
	if utils.IsEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.Weighted) {
		p.Weighted = false
	}
	if utils.IsEmpty(p.SorryServer) {
		p.SorryServer = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}

}

func (p *UpdateGSLBParam) validate() error {
	var errors []error

	{
		validator := define.Resources["GSLB"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["update"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["GSLB"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateGSLBParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *UpdateGSLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateGSLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateGSLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateGSLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateGSLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateGSLBParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateGSLBParam) GetDescription() string {
	return p.Description
}
func (p *UpdateGSLBParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateGSLBParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateGSLBParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *UpdateGSLBParam) GetProtocol() string {
	return p.Protocol
}
func (p *UpdateGSLBParam) SetHostHeader(v string) {
	p.HostHeader = v
}

func (p *UpdateGSLBParam) GetHostHeader() string {
	return p.HostHeader
}
func (p *UpdateGSLBParam) SetPath(v string) {
	p.Path = v
}

func (p *UpdateGSLBParam) GetPath() string {
	return p.Path
}
func (p *UpdateGSLBParam) SetResponseCode(v int) {
	p.ResponseCode = v
}

func (p *UpdateGSLBParam) GetResponseCode() int {
	return p.ResponseCode
}
func (p *UpdateGSLBParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *UpdateGSLBParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *UpdateGSLBParam) SetPort(v int) {
	p.Port = v
}

func (p *UpdateGSLBParam) GetPort() int {
	return p.Port
}
func (p *UpdateGSLBParam) SetWeighted(v bool) {
	p.Weighted = v
}

func (p *UpdateGSLBParam) GetWeighted() bool {
	return p.Weighted
}
func (p *UpdateGSLBParam) SetSorryServer(v string) {
	p.SorryServer = v
}

func (p *UpdateGSLBParam) GetSorryServer() string {
	return p.SorryServer
}
func (p *UpdateGSLBParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateGSLBParam) GetName() string {
	return p.Name
}
func (p *UpdateGSLBParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateGSLBParam) GetIconId() sacloud.ID {
	return p.IconId
}

// DeleteGSLBParam is input parameters for the sacloud API
type DeleteGSLBParam struct {
	input Input
}

// NewDeleteGSLBParam return new DeleteGSLBParam
func NewDeleteGSLBParam() *DeleteGSLBParam {
	return &DeleteGSLBParam{}
}

// Initialize init DeleteGSLBParam
func (p *DeleteGSLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteGSLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteGSLBParam) fillValueToSkeleton() {

}

func (p *DeleteGSLBParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteGSLBParam) ResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *DeleteGSLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteGSLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteGSLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteGSLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteGSLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListDnsParam is input parameters for the sacloud API
type ListDnsParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Tags              []string     `json:"tags"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`

	input Input
}

// NewListDnsParam return new ListDnsParam
func NewListDnsParam(in Input) (*ListDnsParam, error) {
	v := &ListDnsParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListDnsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListDnsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListDnsParam) validate() error {
	var errors []error
	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListDnsParam) ResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *ListDnsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListDnsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListDnsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListDnsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListDnsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListDnsParam) SetName(v []string) {
	p.Name = v
}

func (p *ListDnsParam) GetName() []string {
	return p.Name
}
func (p *ListDnsParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListDnsParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListDnsParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListDnsParam) GetTags() []string {
	return p.Tags
}
func (p *ListDnsParam) SetFrom(v int) {
	p.From = v
}

func (p *ListDnsParam) GetFrom() int {
	return p.From
}
func (p *ListDnsParam) SetMax(v int) {
	p.Max = v
}

func (p *ListDnsParam) GetMax() int {
	return p.Max
}
func (p *ListDnsParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListDnsParam) GetSort() []string {
	return p.Sort
}
func (p *ListDnsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListDnsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListDnsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListDnsParam) GetParameters() string {
	return p.Parameters
}
func (p *ListDnsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListDnsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListDnsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListDnsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListDnsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListDnsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListDnsParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListDnsParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListDnsParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListDnsParam) GetColumn() []string {
	return p.Column
}
func (p *ListDnsParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListDnsParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListDnsParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListDnsParam) GetFormat() string {
	return p.Format
}
func (p *ListDnsParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListDnsParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListDnsParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListDnsParam) GetQuery() string {
	return p.Query
}
func (p *ListDnsParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListDnsParam) GetQueryFile() string {
	return p.QueryFile
}

// RecordInfoDnsParam is input parameters for the sacloud API
type RecordInfoDnsParam struct {
	Name              string     `json:"name"`
	Type              string     `json:"type"`
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewRecordInfoDnsParam return new RecordInfoDnsParam
func NewRecordInfoDnsParam(in Input) (*RecordInfoDnsParam, error) {
	v := &RecordInfoDnsParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *RecordInfoDnsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *RecordInfoDnsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Type) {
		p.Type = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *RecordInfoDnsParam) validate() error {
	var errors []error
	{
		validator := define.Resources["DNS"].Commands["record-info"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-info"].Params["type"].ValidateFunc
		errs := validator("--type", p.Type)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *RecordInfoDnsParam) ResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *RecordInfoDnsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["record-info"]
}

func (p *RecordInfoDnsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *RecordInfoDnsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *RecordInfoDnsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *RecordInfoDnsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *RecordInfoDnsParam) SetName(v string) {
	p.Name = v
}

func (p *RecordInfoDnsParam) GetName() string {
	return p.Name
}
func (p *RecordInfoDnsParam) SetType(v string) {
	p.Type = v
}

func (p *RecordInfoDnsParam) GetType() string {
	return p.Type
}
func (p *RecordInfoDnsParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *RecordInfoDnsParam) GetSelector() []string {
	return p.Selector
}
func (p *RecordInfoDnsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *RecordInfoDnsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *RecordInfoDnsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *RecordInfoDnsParam) GetParameters() string {
	return p.Parameters
}
func (p *RecordInfoDnsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *RecordInfoDnsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *RecordInfoDnsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *RecordInfoDnsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *RecordInfoDnsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *RecordInfoDnsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *RecordInfoDnsParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *RecordInfoDnsParam) GetOutputType() string {
	return p.OutputType
}
func (p *RecordInfoDnsParam) SetColumn(v []string) {
	p.Column = v
}

func (p *RecordInfoDnsParam) GetColumn() []string {
	return p.Column
}
func (p *RecordInfoDnsParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *RecordInfoDnsParam) GetQuiet() bool {
	return p.Quiet
}
func (p *RecordInfoDnsParam) SetFormat(v string) {
	p.Format = v
}

func (p *RecordInfoDnsParam) GetFormat() string {
	return p.Format
}
func (p *RecordInfoDnsParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *RecordInfoDnsParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *RecordInfoDnsParam) SetQuery(v string) {
	p.Query = v
}

func (p *RecordInfoDnsParam) GetQuery() string {
	return p.Query
}
func (p *RecordInfoDnsParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *RecordInfoDnsParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *RecordInfoDnsParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *RecordInfoDnsParam) GetId() sacloud.ID {
	return p.Id
}

// RecordBulkUpdateDnsParam is input parameters for the sacloud API
type RecordBulkUpdateDnsParam struct {
	File              string     `json:"file"`
	Mode              string     `json:"mode"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewRecordBulkUpdateDnsParam return new RecordBulkUpdateDnsParam
func NewRecordBulkUpdateDnsParam(in Input) (*RecordBulkUpdateDnsParam, error) {
	v := &RecordBulkUpdateDnsParam{
		Mode: "upsert-only", input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *RecordBulkUpdateDnsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *RecordBulkUpdateDnsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.File) {
		p.File = ""
	}
	if utils.IsEmpty(p.Mode) {
		p.Mode = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *RecordBulkUpdateDnsParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--file", p.File)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-bulk-update"].Params["file"].ValidateFunc
		errs := validator("--file", p.File)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--mode", p.Mode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-bulk-update"].Params["mode"].ValidateFunc
		errs := validator("--mode", p.Mode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *RecordBulkUpdateDnsParam) ResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *RecordBulkUpdateDnsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["record-bulk-update"]
}

func (p *RecordBulkUpdateDnsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *RecordBulkUpdateDnsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *RecordBulkUpdateDnsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *RecordBulkUpdateDnsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *RecordBulkUpdateDnsParam) SetFile(v string) {
	p.File = v
}

func (p *RecordBulkUpdateDnsParam) GetFile() string {
	return p.File
}
func (p *RecordBulkUpdateDnsParam) SetMode(v string) {
	p.Mode = v
}

func (p *RecordBulkUpdateDnsParam) GetMode() string {
	return p.Mode
}
func (p *RecordBulkUpdateDnsParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *RecordBulkUpdateDnsParam) GetSelector() []string {
	return p.Selector
}
func (p *RecordBulkUpdateDnsParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *RecordBulkUpdateDnsParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *RecordBulkUpdateDnsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *RecordBulkUpdateDnsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *RecordBulkUpdateDnsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *RecordBulkUpdateDnsParam) GetParameters() string {
	return p.Parameters
}
func (p *RecordBulkUpdateDnsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *RecordBulkUpdateDnsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *RecordBulkUpdateDnsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *RecordBulkUpdateDnsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *RecordBulkUpdateDnsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *RecordBulkUpdateDnsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *RecordBulkUpdateDnsParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *RecordBulkUpdateDnsParam) GetOutputType() string {
	return p.OutputType
}
func (p *RecordBulkUpdateDnsParam) SetColumn(v []string) {
	p.Column = v
}

func (p *RecordBulkUpdateDnsParam) GetColumn() []string {
	return p.Column
}
func (p *RecordBulkUpdateDnsParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *RecordBulkUpdateDnsParam) GetQuiet() bool {
	return p.Quiet
}
func (p *RecordBulkUpdateDnsParam) SetFormat(v string) {
	p.Format = v
}

func (p *RecordBulkUpdateDnsParam) GetFormat() string {
	return p.Format
}
func (p *RecordBulkUpdateDnsParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *RecordBulkUpdateDnsParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *RecordBulkUpdateDnsParam) SetQuery(v string) {
	p.Query = v
}

func (p *RecordBulkUpdateDnsParam) GetQuery() string {
	return p.Query
}
func (p *RecordBulkUpdateDnsParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *RecordBulkUpdateDnsParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *RecordBulkUpdateDnsParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *RecordBulkUpdateDnsParam) GetId() sacloud.ID {
	return p.Id
}

// CreateDnsParam is input parameters for the sacloud API
type CreateDnsParam struct {
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`

	input Input
}

// NewCreateDnsParam return new CreateDnsParam
func NewCreateDnsParam(in Input) (*CreateDnsParam, error) {
	v := &CreateDnsParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateDnsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateDnsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *CreateDnsParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateDnsParam) ResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *CreateDnsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateDnsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateDnsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateDnsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateDnsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateDnsParam) SetName(v string) {
	p.Name = v
}

func (p *CreateDnsParam) GetName() string {
	return p.Name
}
func (p *CreateDnsParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateDnsParam) GetDescription() string {
	return p.Description
}
func (p *CreateDnsParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateDnsParam) GetTags() []string {
	return p.Tags
}
func (p *CreateDnsParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateDnsParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateDnsParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateDnsParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateDnsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateDnsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateDnsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateDnsParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateDnsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateDnsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateDnsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateDnsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateDnsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateDnsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateDnsParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateDnsParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateDnsParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateDnsParam) GetColumn() []string {
	return p.Column
}
func (p *CreateDnsParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateDnsParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateDnsParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateDnsParam) GetFormat() string {
	return p.Format
}
func (p *CreateDnsParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateDnsParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateDnsParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateDnsParam) GetQuery() string {
	return p.Query
}
func (p *CreateDnsParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateDnsParam) GetQueryFile() string {
	return p.QueryFile
}

// RecordAddDnsParam is input parameters for the sacloud API
type RecordAddDnsParam struct {
	Name              string     `json:"name"`
	Type              string     `json:"type"`
	Value             string     `json:"value"`
	Ttl               int        `json:"ttl"`
	MxPriority        int        `json:"mx-priority"`
	SrvPriority       int        `json:"srv-priority"`
	SrvWeight         int        `json:"srv-weight"`
	SrvPort           int        `json:"srv-port"`
	SrvTarget         string     `json:"srv-target"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewRecordAddDnsParam return new RecordAddDnsParam
func NewRecordAddDnsParam(in Input) (*RecordAddDnsParam, error) {
	v := &RecordAddDnsParam{
		Ttl: 3600, MxPriority: 10, input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *RecordAddDnsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *RecordAddDnsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Type) {
		p.Type = ""
	}
	if utils.IsEmpty(p.Value) {
		p.Value = ""
	}
	if utils.IsEmpty(p.Ttl) {
		p.Ttl = 0
	}
	if utils.IsEmpty(p.MxPriority) {
		p.MxPriority = 0
	}
	if utils.IsEmpty(p.SrvPriority) {
		p.SrvPriority = 0
	}
	if utils.IsEmpty(p.SrvWeight) {
		p.SrvWeight = 0
	}
	if utils.IsEmpty(p.SrvPort) {
		p.SrvPort = 0
	}
	if utils.IsEmpty(p.SrvTarget) {
		p.SrvTarget = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *RecordAddDnsParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--type", p.Type)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["type"].ValidateFunc
		errs := validator("--type", p.Type)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["ttl"].ValidateFunc
		errs := validator("--ttl", p.Ttl)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["mx-priority"].ValidateFunc
		errs := validator("--mx-priority", p.MxPriority)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["srv-priority"].ValidateFunc
		errs := validator("--srv-priority", p.SrvPriority)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["srv-weight"].ValidateFunc
		errs := validator("--srv-weight", p.SrvWeight)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["srv-port"].ValidateFunc
		errs := validator("--srv-port", p.SrvPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["srv-target"].ValidateFunc
		errs := validator("--srv-target", p.SrvTarget)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *RecordAddDnsParam) ResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *RecordAddDnsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["record-add"]
}

func (p *RecordAddDnsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *RecordAddDnsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *RecordAddDnsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *RecordAddDnsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *RecordAddDnsParam) SetName(v string) {
	p.Name = v
}

func (p *RecordAddDnsParam) GetName() string {
	return p.Name
}
func (p *RecordAddDnsParam) SetType(v string) {
	p.Type = v
}

func (p *RecordAddDnsParam) GetType() string {
	return p.Type
}
func (p *RecordAddDnsParam) SetValue(v string) {
	p.Value = v
}

func (p *RecordAddDnsParam) GetValue() string {
	return p.Value
}
func (p *RecordAddDnsParam) SetTtl(v int) {
	p.Ttl = v
}

func (p *RecordAddDnsParam) GetTtl() int {
	return p.Ttl
}
func (p *RecordAddDnsParam) SetMxPriority(v int) {
	p.MxPriority = v
}

func (p *RecordAddDnsParam) GetMxPriority() int {
	return p.MxPriority
}
func (p *RecordAddDnsParam) SetSrvPriority(v int) {
	p.SrvPriority = v
}

func (p *RecordAddDnsParam) GetSrvPriority() int {
	return p.SrvPriority
}
func (p *RecordAddDnsParam) SetSrvWeight(v int) {
	p.SrvWeight = v
}

func (p *RecordAddDnsParam) GetSrvWeight() int {
	return p.SrvWeight
}
func (p *RecordAddDnsParam) SetSrvPort(v int) {
	p.SrvPort = v
}

func (p *RecordAddDnsParam) GetSrvPort() int {
	return p.SrvPort
}
func (p *RecordAddDnsParam) SetSrvTarget(v string) {
	p.SrvTarget = v
}

func (p *RecordAddDnsParam) GetSrvTarget() string {
	return p.SrvTarget
}
func (p *RecordAddDnsParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *RecordAddDnsParam) GetSelector() []string {
	return p.Selector
}
func (p *RecordAddDnsParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *RecordAddDnsParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *RecordAddDnsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *RecordAddDnsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *RecordAddDnsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *RecordAddDnsParam) GetParameters() string {
	return p.Parameters
}
func (p *RecordAddDnsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *RecordAddDnsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *RecordAddDnsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *RecordAddDnsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *RecordAddDnsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *RecordAddDnsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *RecordAddDnsParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *RecordAddDnsParam) GetOutputType() string {
	return p.OutputType
}
func (p *RecordAddDnsParam) SetColumn(v []string) {
	p.Column = v
}

func (p *RecordAddDnsParam) GetColumn() []string {
	return p.Column
}
func (p *RecordAddDnsParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *RecordAddDnsParam) GetQuiet() bool {
	return p.Quiet
}
func (p *RecordAddDnsParam) SetFormat(v string) {
	p.Format = v
}

func (p *RecordAddDnsParam) GetFormat() string {
	return p.Format
}
func (p *RecordAddDnsParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *RecordAddDnsParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *RecordAddDnsParam) SetQuery(v string) {
	p.Query = v
}

func (p *RecordAddDnsParam) GetQuery() string {
	return p.Query
}
func (p *RecordAddDnsParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *RecordAddDnsParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *RecordAddDnsParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *RecordAddDnsParam) GetId() sacloud.ID {
	return p.Id
}

// ReadDnsParam is input parameters for the sacloud API
type ReadDnsParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewReadDnsParam return new ReadDnsParam
func NewReadDnsParam(in Input) (*ReadDnsParam, error) {
	v := &ReadDnsParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadDnsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadDnsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReadDnsParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ReadDnsParam) ResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *ReadDnsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadDnsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadDnsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadDnsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadDnsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReadDnsParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadDnsParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadDnsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadDnsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadDnsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadDnsParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadDnsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadDnsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadDnsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadDnsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadDnsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadDnsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadDnsParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadDnsParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadDnsParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadDnsParam) GetColumn() []string {
	return p.Column
}
func (p *ReadDnsParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadDnsParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadDnsParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadDnsParam) GetFormat() string {
	return p.Format
}
func (p *ReadDnsParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadDnsParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadDnsParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadDnsParam) GetQuery() string {
	return p.Query
}
func (p *ReadDnsParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadDnsParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadDnsParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadDnsParam) GetId() sacloud.ID {
	return p.Id
}

// RecordUpdateDnsParam is input parameters for the sacloud API
type RecordUpdateDnsParam struct {
	Index             int        `json:"index"`
	Name              string     `json:"name"`
	Type              string     `json:"type"`
	Value             string     `json:"value"`
	Ttl               int        `json:"ttl"`
	MxPriority        int        `json:"mx-priority"`
	SrvPriority       int        `json:"srv-priority"`
	SrvWeight         int        `json:"srv-weight"`
	SrvPort           int        `json:"srv-port"`
	SrvTarget         string     `json:"srv-target"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewRecordUpdateDnsParam return new RecordUpdateDnsParam
func NewRecordUpdateDnsParam(in Input) (*RecordUpdateDnsParam, error) {
	v := &RecordUpdateDnsParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *RecordUpdateDnsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *RecordUpdateDnsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Type) {
		p.Type = ""
	}
	if utils.IsEmpty(p.Value) {
		p.Value = ""
	}
	if utils.IsEmpty(p.Ttl) {
		p.Ttl = 0
	}
	if utils.IsEmpty(p.MxPriority) {
		p.MxPriority = 0
	}
	if utils.IsEmpty(p.SrvPriority) {
		p.SrvPriority = 0
	}
	if utils.IsEmpty(p.SrvWeight) {
		p.SrvWeight = 0
	}
	if utils.IsEmpty(p.SrvPort) {
		p.SrvPort = 0
	}
	if utils.IsEmpty(p.SrvTarget) {
		p.SrvTarget = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *RecordUpdateDnsParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["type"].ValidateFunc
		errs := validator("--type", p.Type)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["ttl"].ValidateFunc
		errs := validator("--ttl", p.Ttl)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["mx-priority"].ValidateFunc
		errs := validator("--mx-priority", p.MxPriority)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["srv-priority"].ValidateFunc
		errs := validator("--srv-priority", p.SrvPriority)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["srv-weight"].ValidateFunc
		errs := validator("--srv-weight", p.SrvWeight)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["srv-port"].ValidateFunc
		errs := validator("--srv-port", p.SrvPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["srv-target"].ValidateFunc
		errs := validator("--srv-target", p.SrvTarget)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *RecordUpdateDnsParam) ResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *RecordUpdateDnsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["record-update"]
}

func (p *RecordUpdateDnsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *RecordUpdateDnsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *RecordUpdateDnsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *RecordUpdateDnsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *RecordUpdateDnsParam) SetIndex(v int) {
	p.Index = v
}

func (p *RecordUpdateDnsParam) GetIndex() int {
	return p.Index
}
func (p *RecordUpdateDnsParam) SetName(v string) {
	p.Name = v
}

func (p *RecordUpdateDnsParam) GetName() string {
	return p.Name
}
func (p *RecordUpdateDnsParam) SetType(v string) {
	p.Type = v
}

func (p *RecordUpdateDnsParam) GetType() string {
	return p.Type
}
func (p *RecordUpdateDnsParam) SetValue(v string) {
	p.Value = v
}

func (p *RecordUpdateDnsParam) GetValue() string {
	return p.Value
}
func (p *RecordUpdateDnsParam) SetTtl(v int) {
	p.Ttl = v
}

func (p *RecordUpdateDnsParam) GetTtl() int {
	return p.Ttl
}
func (p *RecordUpdateDnsParam) SetMxPriority(v int) {
	p.MxPriority = v
}

func (p *RecordUpdateDnsParam) GetMxPriority() int {
	return p.MxPriority
}
func (p *RecordUpdateDnsParam) SetSrvPriority(v int) {
	p.SrvPriority = v
}

func (p *RecordUpdateDnsParam) GetSrvPriority() int {
	return p.SrvPriority
}
func (p *RecordUpdateDnsParam) SetSrvWeight(v int) {
	p.SrvWeight = v
}

func (p *RecordUpdateDnsParam) GetSrvWeight() int {
	return p.SrvWeight
}
func (p *RecordUpdateDnsParam) SetSrvPort(v int) {
	p.SrvPort = v
}

func (p *RecordUpdateDnsParam) GetSrvPort() int {
	return p.SrvPort
}
func (p *RecordUpdateDnsParam) SetSrvTarget(v string) {
	p.SrvTarget = v
}

func (p *RecordUpdateDnsParam) GetSrvTarget() string {
	return p.SrvTarget
}
func (p *RecordUpdateDnsParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *RecordUpdateDnsParam) GetSelector() []string {
	return p.Selector
}
func (p *RecordUpdateDnsParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *RecordUpdateDnsParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *RecordUpdateDnsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *RecordUpdateDnsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *RecordUpdateDnsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *RecordUpdateDnsParam) GetParameters() string {
	return p.Parameters
}
func (p *RecordUpdateDnsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *RecordUpdateDnsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *RecordUpdateDnsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *RecordUpdateDnsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *RecordUpdateDnsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *RecordUpdateDnsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *RecordUpdateDnsParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *RecordUpdateDnsParam) GetOutputType() string {
	return p.OutputType
}
func (p *RecordUpdateDnsParam) SetColumn(v []string) {
	p.Column = v
}

func (p *RecordUpdateDnsParam) GetColumn() []string {
	return p.Column
}
func (p *RecordUpdateDnsParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *RecordUpdateDnsParam) GetQuiet() bool {
	return p.Quiet
}
func (p *RecordUpdateDnsParam) SetFormat(v string) {
	p.Format = v
}

func (p *RecordUpdateDnsParam) GetFormat() string {
	return p.Format
}
func (p *RecordUpdateDnsParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *RecordUpdateDnsParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *RecordUpdateDnsParam) SetQuery(v string) {
	p.Query = v
}

func (p *RecordUpdateDnsParam) GetQuery() string {
	return p.Query
}
func (p *RecordUpdateDnsParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *RecordUpdateDnsParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *RecordUpdateDnsParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *RecordUpdateDnsParam) GetId() sacloud.ID {
	return p.Id
}

// RecordDeleteDnsParam is input parameters for the sacloud API
type RecordDeleteDnsParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewRecordDeleteDnsParam return new RecordDeleteDnsParam
func NewRecordDeleteDnsParam(in Input) (*RecordDeleteDnsParam, error) {
	v := &RecordDeleteDnsParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *RecordDeleteDnsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *RecordDeleteDnsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *RecordDeleteDnsParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *RecordDeleteDnsParam) ResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *RecordDeleteDnsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["record-delete"]
}

func (p *RecordDeleteDnsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *RecordDeleteDnsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *RecordDeleteDnsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *RecordDeleteDnsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *RecordDeleteDnsParam) SetIndex(v int) {
	p.Index = v
}

func (p *RecordDeleteDnsParam) GetIndex() int {
	return p.Index
}
func (p *RecordDeleteDnsParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *RecordDeleteDnsParam) GetSelector() []string {
	return p.Selector
}
func (p *RecordDeleteDnsParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *RecordDeleteDnsParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *RecordDeleteDnsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *RecordDeleteDnsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *RecordDeleteDnsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *RecordDeleteDnsParam) GetParameters() string {
	return p.Parameters
}
func (p *RecordDeleteDnsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *RecordDeleteDnsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *RecordDeleteDnsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *RecordDeleteDnsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *RecordDeleteDnsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *RecordDeleteDnsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *RecordDeleteDnsParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *RecordDeleteDnsParam) GetOutputType() string {
	return p.OutputType
}
func (p *RecordDeleteDnsParam) SetColumn(v []string) {
	p.Column = v
}

func (p *RecordDeleteDnsParam) GetColumn() []string {
	return p.Column
}
func (p *RecordDeleteDnsParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *RecordDeleteDnsParam) GetQuiet() bool {
	return p.Quiet
}
func (p *RecordDeleteDnsParam) SetFormat(v string) {
	p.Format = v
}

func (p *RecordDeleteDnsParam) GetFormat() string {
	return p.Format
}
func (p *RecordDeleteDnsParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *RecordDeleteDnsParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *RecordDeleteDnsParam) SetQuery(v string) {
	p.Query = v
}

func (p *RecordDeleteDnsParam) GetQuery() string {
	return p.Query
}
func (p *RecordDeleteDnsParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *RecordDeleteDnsParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *RecordDeleteDnsParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *RecordDeleteDnsParam) GetId() sacloud.ID {
	return p.Id
}

// UpdateDnsParam is input parameters for the sacloud API
type UpdateDnsParam struct {
	Selector          []string   `json:"selector"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewUpdateDnsParam return new UpdateDnsParam
func NewUpdateDnsParam(in Input) (*UpdateDnsParam, error) {
	v := &UpdateDnsParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateDnsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateDnsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UpdateDnsParam) validate() error {
	var errors []error
	{
		validator := define.Resources["DNS"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateDnsParam) ResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *UpdateDnsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateDnsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateDnsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateDnsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateDnsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateDnsParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateDnsParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateDnsParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateDnsParam) GetDescription() string {
	return p.Description
}
func (p *UpdateDnsParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateDnsParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateDnsParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateDnsParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateDnsParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateDnsParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateDnsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateDnsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateDnsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateDnsParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateDnsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateDnsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateDnsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateDnsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateDnsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateDnsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateDnsParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateDnsParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateDnsParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateDnsParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateDnsParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateDnsParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateDnsParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateDnsParam) GetFormat() string {
	return p.Format
}
func (p *UpdateDnsParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateDnsParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateDnsParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateDnsParam) GetQuery() string {
	return p.Query
}
func (p *UpdateDnsParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateDnsParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateDnsParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateDnsParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteDnsParam is input parameters for the sacloud API
type DeleteDnsParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewDeleteDnsParam return new DeleteDnsParam
func NewDeleteDnsParam(in Input) (*DeleteDnsParam, error) {
	v := &DeleteDnsParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteDnsParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteDnsParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DeleteDnsParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DeleteDnsParam) ResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *DeleteDnsParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteDnsParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteDnsParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteDnsParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteDnsParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteDnsParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteDnsParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteDnsParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteDnsParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteDnsParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteDnsParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteDnsParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteDnsParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteDnsParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteDnsParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteDnsParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteDnsParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteDnsParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteDnsParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteDnsParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteDnsParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteDnsParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteDnsParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteDnsParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteDnsParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteDnsParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteDnsParam) GetFormat() string {
	return p.Format
}
func (p *DeleteDnsParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteDnsParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteDnsParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteDnsParam) GetQuery() string {
	return p.Query
}
func (p *DeleteDnsParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteDnsParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteDnsParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteDnsParam) GetId() sacloud.ID {
	return p.Id
}

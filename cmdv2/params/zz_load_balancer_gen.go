// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListLoadBalancerParam is input parameters for the sacloud API
type ListLoadBalancerParam struct {
	From int
	Max  int
	Sort []string
	Name []string
	Id   []sacloud.ID
	Tags []string

	input Input
}

// NewListLoadBalancerParam return new ListLoadBalancerParam
func NewListLoadBalancerParam() *ListLoadBalancerParam {
	return &ListLoadBalancerParam{}
}

// Initialize init ListLoadBalancerParam
func (p *ListLoadBalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListLoadBalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListLoadBalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}

}

func (p *ListLoadBalancerParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListLoadBalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ListLoadBalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListLoadBalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListLoadBalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListLoadBalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListLoadBalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListLoadBalancerParam) SetFrom(v int) {
	p.From = v
}

func (p *ListLoadBalancerParam) GetFrom() int {
	return p.From
}
func (p *ListLoadBalancerParam) SetMax(v int) {
	p.Max = v
}

func (p *ListLoadBalancerParam) GetMax() int {
	return p.Max
}
func (p *ListLoadBalancerParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListLoadBalancerParam) GetSort() []string {
	return p.Sort
}
func (p *ListLoadBalancerParam) SetName(v []string) {
	p.Name = v
}

func (p *ListLoadBalancerParam) GetName() []string {
	return p.Name
}
func (p *ListLoadBalancerParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListLoadBalancerParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListLoadBalancerParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListLoadBalancerParam) GetTags() []string {
	return p.Tags
}

// CreateLoadBalancerParam is input parameters for the sacloud API
type CreateLoadBalancerParam struct {
	Description      string
	Tags             []string
	Ipaddress1       string
	NwMaskLen        int
	DefaultRoute     string
	Name             string
	Ipaddress2       string
	IconId           sacloud.ID
	SwitchId         sacloud.ID
	Vrid             int
	HighAvailability bool
	Plan             string

	input Input
}

// NewCreateLoadBalancerParam return new CreateLoadBalancerParam
func NewCreateLoadBalancerParam() *CreateLoadBalancerParam {
	return &CreateLoadBalancerParam{
		Vrid: 1, Plan: "standard"}
}

// Initialize init CreateLoadBalancerParam
func (p *CreateLoadBalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateLoadBalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateLoadBalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Ipaddress1) {
		p.Ipaddress1 = ""
	}
	if utils.IsEmpty(p.NwMaskLen) {
		p.NwMaskLen = 0
	}
	if utils.IsEmpty(p.DefaultRoute) {
		p.DefaultRoute = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Ipaddress2) {
		p.Ipaddress2 = ""
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Vrid) {
		p.Vrid = 0
	}
	if utils.IsEmpty(p.HighAvailability) {
		p.HighAvailability = false
	}
	if utils.IsEmpty(p.Plan) {
		p.Plan = ""
	}

}

func (p *CreateLoadBalancerParam) validate() error {
	var errors []error

	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--nw-mask-len", p.NwMaskLen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["nw-mask-len"].ValidateFunc
		errs := validator("--nw-mask-len", p.NwMaskLen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["default-route"].ValidateFunc
		errs := validator("--default-route", p.DefaultRoute)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["ipaddress2"].ValidateFunc
		errs := validator("--ipaddress-2", p.Ipaddress2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--vrid", p.Vrid)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateLoadBalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *CreateLoadBalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateLoadBalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateLoadBalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateLoadBalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateLoadBalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateLoadBalancerParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateLoadBalancerParam) GetDescription() string {
	return p.Description
}
func (p *CreateLoadBalancerParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateLoadBalancerParam) GetTags() []string {
	return p.Tags
}
func (p *CreateLoadBalancerParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *CreateLoadBalancerParam) GetIpaddress1() string {
	return p.Ipaddress1
}
func (p *CreateLoadBalancerParam) SetNwMaskLen(v int) {
	p.NwMaskLen = v
}

func (p *CreateLoadBalancerParam) GetNwMaskLen() int {
	return p.NwMaskLen
}
func (p *CreateLoadBalancerParam) SetDefaultRoute(v string) {
	p.DefaultRoute = v
}

func (p *CreateLoadBalancerParam) GetDefaultRoute() string {
	return p.DefaultRoute
}
func (p *CreateLoadBalancerParam) SetName(v string) {
	p.Name = v
}

func (p *CreateLoadBalancerParam) GetName() string {
	return p.Name
}
func (p *CreateLoadBalancerParam) SetIpaddress2(v string) {
	p.Ipaddress2 = v
}

func (p *CreateLoadBalancerParam) GetIpaddress2() string {
	return p.Ipaddress2
}
func (p *CreateLoadBalancerParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateLoadBalancerParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateLoadBalancerParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *CreateLoadBalancerParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *CreateLoadBalancerParam) SetVrid(v int) {
	p.Vrid = v
}

func (p *CreateLoadBalancerParam) GetVrid() int {
	return p.Vrid
}
func (p *CreateLoadBalancerParam) SetHighAvailability(v bool) {
	p.HighAvailability = v
}

func (p *CreateLoadBalancerParam) GetHighAvailability() bool {
	return p.HighAvailability
}
func (p *CreateLoadBalancerParam) SetPlan(v string) {
	p.Plan = v
}

func (p *CreateLoadBalancerParam) GetPlan() string {
	return p.Plan
}

// ReadLoadBalancerParam is input parameters for the sacloud API
type ReadLoadBalancerParam struct {
	input Input
}

// NewReadLoadBalancerParam return new ReadLoadBalancerParam
func NewReadLoadBalancerParam() *ReadLoadBalancerParam {
	return &ReadLoadBalancerParam{}
}

// Initialize init ReadLoadBalancerParam
func (p *ReadLoadBalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadLoadBalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadLoadBalancerParam) fillValueToSkeleton() {

}

func (p *ReadLoadBalancerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadLoadBalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ReadLoadBalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadLoadBalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadLoadBalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadLoadBalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadLoadBalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdateLoadBalancerParam is input parameters for the sacloud API
type UpdateLoadBalancerParam struct {
	IconId      sacloud.ID
	Name        string
	Description string
	Tags        []string

	input Input
}

// NewUpdateLoadBalancerParam return new UpdateLoadBalancerParam
func NewUpdateLoadBalancerParam() *UpdateLoadBalancerParam {
	return &UpdateLoadBalancerParam{}
}

// Initialize init UpdateLoadBalancerParam
func (p *UpdateLoadBalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateLoadBalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateLoadBalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}

}

func (p *UpdateLoadBalancerParam) validate() error {
	var errors []error

	{
		validator := define.Resources["LoadBalancer"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateLoadBalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *UpdateLoadBalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateLoadBalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateLoadBalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateLoadBalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateLoadBalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateLoadBalancerParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateLoadBalancerParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateLoadBalancerParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateLoadBalancerParam) GetName() string {
	return p.Name
}
func (p *UpdateLoadBalancerParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateLoadBalancerParam) GetDescription() string {
	return p.Description
}
func (p *UpdateLoadBalancerParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateLoadBalancerParam) GetTags() []string {
	return p.Tags
}

// DeleteLoadBalancerParam is input parameters for the sacloud API
type DeleteLoadBalancerParam struct {
	Force bool

	input Input
}

// NewDeleteLoadBalancerParam return new DeleteLoadBalancerParam
func NewDeleteLoadBalancerParam() *DeleteLoadBalancerParam {
	return &DeleteLoadBalancerParam{}
}

// Initialize init DeleteLoadBalancerParam
func (p *DeleteLoadBalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteLoadBalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteLoadBalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Force) {
		p.Force = false
	}

}

func (p *DeleteLoadBalancerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteLoadBalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *DeleteLoadBalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteLoadBalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteLoadBalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteLoadBalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteLoadBalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteLoadBalancerParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteLoadBalancerParam) GetForce() bool {
	return p.Force
}

// BootLoadBalancerParam is input parameters for the sacloud API
type BootLoadBalancerParam struct {
	input Input
}

// NewBootLoadBalancerParam return new BootLoadBalancerParam
func NewBootLoadBalancerParam() *BootLoadBalancerParam {
	return &BootLoadBalancerParam{}
}

// Initialize init BootLoadBalancerParam
func (p *BootLoadBalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BootLoadBalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BootLoadBalancerParam) fillValueToSkeleton() {

}

func (p *BootLoadBalancerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *BootLoadBalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *BootLoadBalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["boot"]
}

func (p *BootLoadBalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BootLoadBalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BootLoadBalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BootLoadBalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ShutdownLoadBalancerParam is input parameters for the sacloud API
type ShutdownLoadBalancerParam struct {
	input Input
}

// NewShutdownLoadBalancerParam return new ShutdownLoadBalancerParam
func NewShutdownLoadBalancerParam() *ShutdownLoadBalancerParam {
	return &ShutdownLoadBalancerParam{}
}

// Initialize init ShutdownLoadBalancerParam
func (p *ShutdownLoadBalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownLoadBalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShutdownLoadBalancerParam) fillValueToSkeleton() {

}

func (p *ShutdownLoadBalancerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ShutdownLoadBalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ShutdownLoadBalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown"]
}

func (p *ShutdownLoadBalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownLoadBalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownLoadBalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownLoadBalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ShutdownForceLoadBalancerParam is input parameters for the sacloud API
type ShutdownForceLoadBalancerParam struct {
	input Input
}

// NewShutdownForceLoadBalancerParam return new ShutdownForceLoadBalancerParam
func NewShutdownForceLoadBalancerParam() *ShutdownForceLoadBalancerParam {
	return &ShutdownForceLoadBalancerParam{}
}

// Initialize init ShutdownForceLoadBalancerParam
func (p *ShutdownForceLoadBalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownForceLoadBalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShutdownForceLoadBalancerParam) fillValueToSkeleton() {

}

func (p *ShutdownForceLoadBalancerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ShutdownForceLoadBalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ShutdownForceLoadBalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown-force"]
}

func (p *ShutdownForceLoadBalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownForceLoadBalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownForceLoadBalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownForceLoadBalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ResetLoadBalancerParam is input parameters for the sacloud API
type ResetLoadBalancerParam struct {
	input Input
}

// NewResetLoadBalancerParam return new ResetLoadBalancerParam
func NewResetLoadBalancerParam() *ResetLoadBalancerParam {
	return &ResetLoadBalancerParam{}
}

// Initialize init ResetLoadBalancerParam
func (p *ResetLoadBalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResetLoadBalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResetLoadBalancerParam) fillValueToSkeleton() {

}

func (p *ResetLoadBalancerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ResetLoadBalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ResetLoadBalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["reset"]
}

func (p *ResetLoadBalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResetLoadBalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResetLoadBalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResetLoadBalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// WaitForBootLoadBalancerParam is input parameters for the sacloud API
type WaitForBootLoadBalancerParam struct {
	input Input
}

// NewWaitForBootLoadBalancerParam return new WaitForBootLoadBalancerParam
func NewWaitForBootLoadBalancerParam() *WaitForBootLoadBalancerParam {
	return &WaitForBootLoadBalancerParam{}
}

// Initialize init WaitForBootLoadBalancerParam
func (p *WaitForBootLoadBalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForBootLoadBalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForBootLoadBalancerParam) fillValueToSkeleton() {

}

func (p *WaitForBootLoadBalancerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *WaitForBootLoadBalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *WaitForBootLoadBalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-boot"]
}

func (p *WaitForBootLoadBalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForBootLoadBalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForBootLoadBalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForBootLoadBalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// WaitForDownLoadBalancerParam is input parameters for the sacloud API
type WaitForDownLoadBalancerParam struct {
	input Input
}

// NewWaitForDownLoadBalancerParam return new WaitForDownLoadBalancerParam
func NewWaitForDownLoadBalancerParam() *WaitForDownLoadBalancerParam {
	return &WaitForDownLoadBalancerParam{}
}

// Initialize init WaitForDownLoadBalancerParam
func (p *WaitForDownLoadBalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForDownLoadBalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForDownLoadBalancerParam) fillValueToSkeleton() {

}

func (p *WaitForDownLoadBalancerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *WaitForDownLoadBalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *WaitForDownLoadBalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-down"]
}

func (p *WaitForDownLoadBalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForDownLoadBalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForDownLoadBalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForDownLoadBalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// VipInfoLoadBalancerParam is input parameters for the sacloud API
type VipInfoLoadBalancerParam struct {
	input Input
}

// NewVipInfoLoadBalancerParam return new VipInfoLoadBalancerParam
func NewVipInfoLoadBalancerParam() *VipInfoLoadBalancerParam {
	return &VipInfoLoadBalancerParam{}
}

// Initialize init VipInfoLoadBalancerParam
func (p *VipInfoLoadBalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *VipInfoLoadBalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *VipInfoLoadBalancerParam) fillValueToSkeleton() {

}

func (p *VipInfoLoadBalancerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *VipInfoLoadBalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *VipInfoLoadBalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["vip-info"]
}

func (p *VipInfoLoadBalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *VipInfoLoadBalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *VipInfoLoadBalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *VipInfoLoadBalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// VipAddLoadBalancerParam is input parameters for the sacloud API
type VipAddLoadBalancerParam struct {
	Vip         string
	Port        int
	DelayLoop   int
	SorryServer string
	Description string

	input Input
}

// NewVipAddLoadBalancerParam return new VipAddLoadBalancerParam
func NewVipAddLoadBalancerParam() *VipAddLoadBalancerParam {
	return &VipAddLoadBalancerParam{
		DelayLoop: 10}
}

// Initialize init VipAddLoadBalancerParam
func (p *VipAddLoadBalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *VipAddLoadBalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *VipAddLoadBalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Vip) {
		p.Vip = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if utils.IsEmpty(p.SorryServer) {
		p.SorryServer = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}

}

func (p *VipAddLoadBalancerParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["vip-add"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["vip-add"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["vip-add"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["vip-add"].Params["sorry-server"].ValidateFunc
		errs := validator("--sorry-server", p.SorryServer)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *VipAddLoadBalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *VipAddLoadBalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["vip-add"]
}

func (p *VipAddLoadBalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *VipAddLoadBalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *VipAddLoadBalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *VipAddLoadBalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *VipAddLoadBalancerParam) SetVip(v string) {
	p.Vip = v
}

func (p *VipAddLoadBalancerParam) GetVip() string {
	return p.Vip
}
func (p *VipAddLoadBalancerParam) SetPort(v int) {
	p.Port = v
}

func (p *VipAddLoadBalancerParam) GetPort() int {
	return p.Port
}
func (p *VipAddLoadBalancerParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *VipAddLoadBalancerParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *VipAddLoadBalancerParam) SetSorryServer(v string) {
	p.SorryServer = v
}

func (p *VipAddLoadBalancerParam) GetSorryServer() string {
	return p.SorryServer
}
func (p *VipAddLoadBalancerParam) SetDescription(v string) {
	p.Description = v
}

func (p *VipAddLoadBalancerParam) GetDescription() string {
	return p.Description
}

// VipUpdateLoadBalancerParam is input parameters for the sacloud API
type VipUpdateLoadBalancerParam struct {
	DelayLoop   int
	SorryServer string
	Description string
	Index       int
	Vip         string
	Port        int

	input Input
}

// NewVipUpdateLoadBalancerParam return new VipUpdateLoadBalancerParam
func NewVipUpdateLoadBalancerParam() *VipUpdateLoadBalancerParam {
	return &VipUpdateLoadBalancerParam{
		DelayLoop: 10}
}

// Initialize init VipUpdateLoadBalancerParam
func (p *VipUpdateLoadBalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *VipUpdateLoadBalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *VipUpdateLoadBalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if utils.IsEmpty(p.SorryServer) {
		p.SorryServer = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Vip) {
		p.Vip = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}

}

func (p *VipUpdateLoadBalancerParam) validate() error {
	var errors []error

	{
		validator := define.Resources["LoadBalancer"].Commands["vip-update"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["vip-update"].Params["sorry-server"].ValidateFunc
		errs := validator("--sorry-server", p.SorryServer)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["vip-update"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["vip-update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *VipUpdateLoadBalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *VipUpdateLoadBalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["vip-update"]
}

func (p *VipUpdateLoadBalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *VipUpdateLoadBalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *VipUpdateLoadBalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *VipUpdateLoadBalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *VipUpdateLoadBalancerParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *VipUpdateLoadBalancerParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *VipUpdateLoadBalancerParam) SetSorryServer(v string) {
	p.SorryServer = v
}

func (p *VipUpdateLoadBalancerParam) GetSorryServer() string {
	return p.SorryServer
}
func (p *VipUpdateLoadBalancerParam) SetDescription(v string) {
	p.Description = v
}

func (p *VipUpdateLoadBalancerParam) GetDescription() string {
	return p.Description
}
func (p *VipUpdateLoadBalancerParam) SetIndex(v int) {
	p.Index = v
}

func (p *VipUpdateLoadBalancerParam) GetIndex() int {
	return p.Index
}
func (p *VipUpdateLoadBalancerParam) SetVip(v string) {
	p.Vip = v
}

func (p *VipUpdateLoadBalancerParam) GetVip() string {
	return p.Vip
}
func (p *VipUpdateLoadBalancerParam) SetPort(v int) {
	p.Port = v
}

func (p *VipUpdateLoadBalancerParam) GetPort() int {
	return p.Port
}

// VipDeleteLoadBalancerParam is input parameters for the sacloud API
type VipDeleteLoadBalancerParam struct {
	Index int

	input Input
}

// NewVipDeleteLoadBalancerParam return new VipDeleteLoadBalancerParam
func NewVipDeleteLoadBalancerParam() *VipDeleteLoadBalancerParam {
	return &VipDeleteLoadBalancerParam{}
}

// Initialize init VipDeleteLoadBalancerParam
func (p *VipDeleteLoadBalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *VipDeleteLoadBalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *VipDeleteLoadBalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *VipDeleteLoadBalancerParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *VipDeleteLoadBalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *VipDeleteLoadBalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["vip-delete"]
}

func (p *VipDeleteLoadBalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *VipDeleteLoadBalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *VipDeleteLoadBalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *VipDeleteLoadBalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *VipDeleteLoadBalancerParam) SetIndex(v int) {
	p.Index = v
}

func (p *VipDeleteLoadBalancerParam) GetIndex() int {
	return p.Index
}

// ServerInfoLoadBalancerParam is input parameters for the sacloud API
type ServerInfoLoadBalancerParam struct {
	VipIndex int
	Vip      string
	Port     int

	input Input
}

// NewServerInfoLoadBalancerParam return new ServerInfoLoadBalancerParam
func NewServerInfoLoadBalancerParam() *ServerInfoLoadBalancerParam {
	return &ServerInfoLoadBalancerParam{}
}

// Initialize init ServerInfoLoadBalancerParam
func (p *ServerInfoLoadBalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerInfoLoadBalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerInfoLoadBalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.VipIndex) {
		p.VipIndex = 0
	}
	if utils.IsEmpty(p.Vip) {
		p.Vip = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}

}

func (p *ServerInfoLoadBalancerParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--vip-index", p.VipIndex, map[string]interface{}{

			"--port": p.Port,
			"--vip":  p.Vip,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["server-info"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--vip", p.Vip, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["server-info"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--port", p.Port, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerInfoLoadBalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ServerInfoLoadBalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-info"]
}

func (p *ServerInfoLoadBalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerInfoLoadBalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerInfoLoadBalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerInfoLoadBalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerInfoLoadBalancerParam) SetVipIndex(v int) {
	p.VipIndex = v
}

func (p *ServerInfoLoadBalancerParam) GetVipIndex() int {
	return p.VipIndex
}
func (p *ServerInfoLoadBalancerParam) SetVip(v string) {
	p.Vip = v
}

func (p *ServerInfoLoadBalancerParam) GetVip() string {
	return p.Vip
}
func (p *ServerInfoLoadBalancerParam) SetPort(v int) {
	p.Port = v
}

func (p *ServerInfoLoadBalancerParam) GetPort() int {
	return p.Port
}

// ServerAddLoadBalancerParam is input parameters for the sacloud API
type ServerAddLoadBalancerParam struct {
	Disabled     bool
	VipIndex     int
	Vip          string
	Port         int
	Ipaddress    string
	Protocol     string
	Path         string
	ResponseCode int

	input Input
}

// NewServerAddLoadBalancerParam return new ServerAddLoadBalancerParam
func NewServerAddLoadBalancerParam() *ServerAddLoadBalancerParam {
	return &ServerAddLoadBalancerParam{
		Protocol: "ping"}
}

// Initialize init ServerAddLoadBalancerParam
func (p *ServerAddLoadBalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerAddLoadBalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerAddLoadBalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.VipIndex) {
		p.VipIndex = 0
	}
	if utils.IsEmpty(p.Vip) {
		p.Vip = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.Path) {
		p.Path = ""
	}
	if utils.IsEmpty(p.ResponseCode) {
		p.ResponseCode = 0
	}

}

func (p *ServerAddLoadBalancerParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--vip-index", p.VipIndex, map[string]interface{}{

			"--port": p.Port,
			"--vip":  p.Vip,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["server-add"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--vip", p.Vip, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["server-add"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--port", p.Port, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["server-add"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["server-add"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerAddLoadBalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ServerAddLoadBalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-add"]
}

func (p *ServerAddLoadBalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerAddLoadBalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerAddLoadBalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerAddLoadBalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerAddLoadBalancerParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *ServerAddLoadBalancerParam) GetDisabled() bool {
	return p.Disabled
}
func (p *ServerAddLoadBalancerParam) SetVipIndex(v int) {
	p.VipIndex = v
}

func (p *ServerAddLoadBalancerParam) GetVipIndex() int {
	return p.VipIndex
}
func (p *ServerAddLoadBalancerParam) SetVip(v string) {
	p.Vip = v
}

func (p *ServerAddLoadBalancerParam) GetVip() string {
	return p.Vip
}
func (p *ServerAddLoadBalancerParam) SetPort(v int) {
	p.Port = v
}

func (p *ServerAddLoadBalancerParam) GetPort() int {
	return p.Port
}
func (p *ServerAddLoadBalancerParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerAddLoadBalancerParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerAddLoadBalancerParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *ServerAddLoadBalancerParam) GetProtocol() string {
	return p.Protocol
}
func (p *ServerAddLoadBalancerParam) SetPath(v string) {
	p.Path = v
}

func (p *ServerAddLoadBalancerParam) GetPath() string {
	return p.Path
}
func (p *ServerAddLoadBalancerParam) SetResponseCode(v int) {
	p.ResponseCode = v
}

func (p *ServerAddLoadBalancerParam) GetResponseCode() int {
	return p.ResponseCode
}

// ServerUpdateLoadBalancerParam is input parameters for the sacloud API
type ServerUpdateLoadBalancerParam struct {
	VipIndex     int
	Vip          string
	Port         int
	Ipaddress    string
	Protocol     string
	Path         string
	ResponseCode int
	Disabled     bool

	input Input
}

// NewServerUpdateLoadBalancerParam return new ServerUpdateLoadBalancerParam
func NewServerUpdateLoadBalancerParam() *ServerUpdateLoadBalancerParam {
	return &ServerUpdateLoadBalancerParam{}
}

// Initialize init ServerUpdateLoadBalancerParam
func (p *ServerUpdateLoadBalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerUpdateLoadBalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerUpdateLoadBalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.VipIndex) {
		p.VipIndex = 0
	}
	if utils.IsEmpty(p.Vip) {
		p.Vip = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.Path) {
		p.Path = ""
	}
	if utils.IsEmpty(p.ResponseCode) {
		p.ResponseCode = 0
	}
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}

}

func (p *ServerUpdateLoadBalancerParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--vip-index", p.VipIndex, map[string]interface{}{

			"--port": p.Port,
			"--vip":  p.Vip,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["server-update"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--vip", p.Vip, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["server-update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--port", p.Port, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["server-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["server-update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerUpdateLoadBalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ServerUpdateLoadBalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-update"]
}

func (p *ServerUpdateLoadBalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerUpdateLoadBalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerUpdateLoadBalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerUpdateLoadBalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerUpdateLoadBalancerParam) SetVipIndex(v int) {
	p.VipIndex = v
}

func (p *ServerUpdateLoadBalancerParam) GetVipIndex() int {
	return p.VipIndex
}
func (p *ServerUpdateLoadBalancerParam) SetVip(v string) {
	p.Vip = v
}

func (p *ServerUpdateLoadBalancerParam) GetVip() string {
	return p.Vip
}
func (p *ServerUpdateLoadBalancerParam) SetPort(v int) {
	p.Port = v
}

func (p *ServerUpdateLoadBalancerParam) GetPort() int {
	return p.Port
}
func (p *ServerUpdateLoadBalancerParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerUpdateLoadBalancerParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerUpdateLoadBalancerParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *ServerUpdateLoadBalancerParam) GetProtocol() string {
	return p.Protocol
}
func (p *ServerUpdateLoadBalancerParam) SetPath(v string) {
	p.Path = v
}

func (p *ServerUpdateLoadBalancerParam) GetPath() string {
	return p.Path
}
func (p *ServerUpdateLoadBalancerParam) SetResponseCode(v int) {
	p.ResponseCode = v
}

func (p *ServerUpdateLoadBalancerParam) GetResponseCode() int {
	return p.ResponseCode
}
func (p *ServerUpdateLoadBalancerParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *ServerUpdateLoadBalancerParam) GetDisabled() bool {
	return p.Disabled
}

// ServerDeleteLoadBalancerParam is input parameters for the sacloud API
type ServerDeleteLoadBalancerParam struct {
	VipIndex  int
	Vip       string
	Port      int
	Ipaddress string

	input Input
}

// NewServerDeleteLoadBalancerParam return new ServerDeleteLoadBalancerParam
func NewServerDeleteLoadBalancerParam() *ServerDeleteLoadBalancerParam {
	return &ServerDeleteLoadBalancerParam{}
}

// Initialize init ServerDeleteLoadBalancerParam
func (p *ServerDeleteLoadBalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerDeleteLoadBalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerDeleteLoadBalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.VipIndex) {
		p.VipIndex = 0
	}
	if utils.IsEmpty(p.Vip) {
		p.Vip = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}

}

func (p *ServerDeleteLoadBalancerParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--vip-index", p.VipIndex, map[string]interface{}{

			"--port": p.Port,
			"--vip":  p.Vip,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["server-delete"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--vip", p.Vip, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["server-delete"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--port", p.Port, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["server-delete"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerDeleteLoadBalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ServerDeleteLoadBalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-delete"]
}

func (p *ServerDeleteLoadBalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerDeleteLoadBalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerDeleteLoadBalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerDeleteLoadBalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerDeleteLoadBalancerParam) SetVipIndex(v int) {
	p.VipIndex = v
}

func (p *ServerDeleteLoadBalancerParam) GetVipIndex() int {
	return p.VipIndex
}
func (p *ServerDeleteLoadBalancerParam) SetVip(v string) {
	p.Vip = v
}

func (p *ServerDeleteLoadBalancerParam) GetVip() string {
	return p.Vip
}
func (p *ServerDeleteLoadBalancerParam) SetPort(v int) {
	p.Port = v
}

func (p *ServerDeleteLoadBalancerParam) GetPort() int {
	return p.Port
}
func (p *ServerDeleteLoadBalancerParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerDeleteLoadBalancerParam) GetIpaddress() string {
	return p.Ipaddress
}

// MonitorLoadBalancerParam is input parameters for the sacloud API
type MonitorLoadBalancerParam struct {
	Start     string
	End       string
	KeyFormat string

	input Input
}

// NewMonitorLoadBalancerParam return new MonitorLoadBalancerParam
func NewMonitorLoadBalancerParam() *MonitorLoadBalancerParam {
	return &MonitorLoadBalancerParam{
		KeyFormat: "sakuracloud.loadbalancer.{{.ID}}.nic"}
}

// Initialize init MonitorLoadBalancerParam
func (p *MonitorLoadBalancerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorLoadBalancerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorLoadBalancerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}

}

func (p *MonitorLoadBalancerParam) validate() error {
	var errors []error

	{
		validator := define.Resources["LoadBalancer"].Commands["monitor"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["LoadBalancer"].Commands["monitor"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorLoadBalancerParam) ResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *MonitorLoadBalancerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor"]
}

func (p *MonitorLoadBalancerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorLoadBalancerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorLoadBalancerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorLoadBalancerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorLoadBalancerParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorLoadBalancerParam) GetStart() string {
	return p.Start
}
func (p *MonitorLoadBalancerParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorLoadBalancerParam) GetEnd() string {
	return p.End
}
func (p *MonitorLoadBalancerParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorLoadBalancerParam) GetKeyFormat() string {
	return p.KeyFormat
}

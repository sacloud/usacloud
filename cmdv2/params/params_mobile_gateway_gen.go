// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListMobilegatewayParam is input parameters for the sacloud API
type ListMobilegatewayParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Tags              []string     `json:"tags"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`

	input Input
}

// NewListMobilegatewayParam return new ListMobilegatewayParam
func NewListMobilegatewayParam(in Input) (*ListMobilegatewayParam, error) {
	v := &ListMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListMobilegatewayParam) validate() error {
	var errors []error
	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *ListMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListMobilegatewayParam) SetName(v []string) {
	p.Name = v
}

func (p *ListMobilegatewayParam) GetName() []string {
	return p.Name
}
func (p *ListMobilegatewayParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListMobilegatewayParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListMobilegatewayParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListMobilegatewayParam) GetTags() []string {
	return p.Tags
}
func (p *ListMobilegatewayParam) SetFrom(v int) {
	p.From = v
}

func (p *ListMobilegatewayParam) GetFrom() int {
	return p.From
}
func (p *ListMobilegatewayParam) SetMax(v int) {
	p.Max = v
}

func (p *ListMobilegatewayParam) GetMax() int {
	return p.Max
}
func (p *ListMobilegatewayParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListMobilegatewayParam) GetSort() []string {
	return p.Sort
}
func (p *ListMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *ListMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListMobilegatewayParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListMobilegatewayParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListMobilegatewayParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListMobilegatewayParam) GetColumn() []string {
	return p.Column
}
func (p *ListMobilegatewayParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListMobilegatewayParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListMobilegatewayParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListMobilegatewayParam) GetFormat() string {
	return p.Format
}
func (p *ListMobilegatewayParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListMobilegatewayParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListMobilegatewayParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListMobilegatewayParam) GetQuery() string {
	return p.Query
}
func (p *ListMobilegatewayParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListMobilegatewayParam) GetQueryFile() string {
	return p.QueryFile
}

// CreateMobilegatewayParam is input parameters for the sacloud API
type CreateMobilegatewayParam struct {
	InternetConnection bool       `json:"internet-connection"`
	Name               string     `json:"name"`
	Description        string     `json:"description"`
	Tags               []string   `json:"tags"`
	IconId             sacloud.ID `json:"icon-id"`
	Assumeyes          bool       `json:"assumeyes"`
	ParamTemplate      string     `json:"param-template"`
	Parameters         string     `json:"parameters"`
	ParamTemplateFile  string     `json:"param-template-file"`
	ParameterFile      string     `json:"parameter-file"`
	GenerateSkeleton   bool       `json:"generate-skeleton"`
	OutputType         string     `json:"output-type"`
	Column             []string   `json:"column"`
	Quiet              bool       `json:"quiet"`
	Format             string     `json:"format"`
	FormatFile         string     `json:"format-file"`
	Query              string     `json:"query"`
	QueryFile          string     `json:"query-file"`

	input Input
}

// NewCreateMobilegatewayParam return new CreateMobilegatewayParam
func NewCreateMobilegatewayParam(in Input) (*CreateMobilegatewayParam, error) {
	v := &CreateMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.InternetConnection) {
		p.InternetConnection = false
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *CreateMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *CreateMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateMobilegatewayParam) SetInternetConnection(v bool) {
	p.InternetConnection = v
}

func (p *CreateMobilegatewayParam) GetInternetConnection() bool {
	return p.InternetConnection
}
func (p *CreateMobilegatewayParam) SetName(v string) {
	p.Name = v
}

func (p *CreateMobilegatewayParam) GetName() string {
	return p.Name
}
func (p *CreateMobilegatewayParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateMobilegatewayParam) GetDescription() string {
	return p.Description
}
func (p *CreateMobilegatewayParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateMobilegatewayParam) GetTags() []string {
	return p.Tags
}
func (p *CreateMobilegatewayParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateMobilegatewayParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateMobilegatewayParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateMobilegatewayParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateMobilegatewayParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateMobilegatewayParam) GetColumn() []string {
	return p.Column
}
func (p *CreateMobilegatewayParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateMobilegatewayParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateMobilegatewayParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateMobilegatewayParam) GetFormat() string {
	return p.Format
}
func (p *CreateMobilegatewayParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateMobilegatewayParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateMobilegatewayParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateMobilegatewayParam) GetQuery() string {
	return p.Query
}
func (p *CreateMobilegatewayParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateMobilegatewayParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadMobilegatewayParam is input parameters for the sacloud API
type ReadMobilegatewayParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewReadMobilegatewayParam return new ReadMobilegatewayParam
func NewReadMobilegatewayParam(in Input) (*ReadMobilegatewayParam, error) {
	v := &ReadMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReadMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ReadMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *ReadMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReadMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadMobilegatewayParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadMobilegatewayParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadMobilegatewayParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadMobilegatewayParam) GetColumn() []string {
	return p.Column
}
func (p *ReadMobilegatewayParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadMobilegatewayParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadMobilegatewayParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadMobilegatewayParam) GetFormat() string {
	return p.Format
}
func (p *ReadMobilegatewayParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadMobilegatewayParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadMobilegatewayParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadMobilegatewayParam) GetQuery() string {
	return p.Query
}
func (p *ReadMobilegatewayParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadMobilegatewayParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// UpdateMobilegatewayParam is input parameters for the sacloud API
type UpdateMobilegatewayParam struct {
	InternetConnection bool       `json:"internet-connection"`
	Selector           []string   `json:"selector"`
	Name               string     `json:"name"`
	Description        string     `json:"description"`
	Tags               []string   `json:"tags"`
	IconId             sacloud.ID `json:"icon-id"`
	Assumeyes          bool       `json:"assumeyes"`
	ParamTemplate      string     `json:"param-template"`
	Parameters         string     `json:"parameters"`
	ParamTemplateFile  string     `json:"param-template-file"`
	ParameterFile      string     `json:"parameter-file"`
	GenerateSkeleton   bool       `json:"generate-skeleton"`
	OutputType         string     `json:"output-type"`
	Column             []string   `json:"column"`
	Quiet              bool       `json:"quiet"`
	Format             string     `json:"format"`
	FormatFile         string     `json:"format-file"`
	Query              string     `json:"query"`
	QueryFile          string     `json:"query-file"`
	Id                 sacloud.ID `json:"id"`

	input Input
}

// NewUpdateMobilegatewayParam return new UpdateMobilegatewayParam
func NewUpdateMobilegatewayParam(in Input) (*UpdateMobilegatewayParam, error) {
	v := &UpdateMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.InternetConnection) {
		p.InternetConnection = false
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UpdateMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := define.Resources["MobileGateway"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *UpdateMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateMobilegatewayParam) SetInternetConnection(v bool) {
	p.InternetConnection = v
}

func (p *UpdateMobilegatewayParam) GetInternetConnection() bool {
	return p.InternetConnection
}
func (p *UpdateMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateMobilegatewayParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateMobilegatewayParam) GetName() string {
	return p.Name
}
func (p *UpdateMobilegatewayParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateMobilegatewayParam) GetDescription() string {
	return p.Description
}
func (p *UpdateMobilegatewayParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateMobilegatewayParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateMobilegatewayParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateMobilegatewayParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateMobilegatewayParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateMobilegatewayParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateMobilegatewayParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateMobilegatewayParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateMobilegatewayParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateMobilegatewayParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateMobilegatewayParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateMobilegatewayParam) GetFormat() string {
	return p.Format
}
func (p *UpdateMobilegatewayParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateMobilegatewayParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateMobilegatewayParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateMobilegatewayParam) GetQuery() string {
	return p.Query
}
func (p *UpdateMobilegatewayParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateMobilegatewayParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteMobilegatewayParam is input parameters for the sacloud API
type DeleteMobilegatewayParam struct {
	Force             bool       `json:"force"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewDeleteMobilegatewayParam return new DeleteMobilegatewayParam
func NewDeleteMobilegatewayParam(in Input) (*DeleteMobilegatewayParam, error) {
	v := &DeleteMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Force) {
		p.Force = false
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DeleteMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DeleteMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *DeleteMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteMobilegatewayParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteMobilegatewayParam) GetForce() bool {
	return p.Force
}
func (p *DeleteMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteMobilegatewayParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteMobilegatewayParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteMobilegatewayParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteMobilegatewayParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteMobilegatewayParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteMobilegatewayParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteMobilegatewayParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteMobilegatewayParam) GetFormat() string {
	return p.Format
}
func (p *DeleteMobilegatewayParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteMobilegatewayParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteMobilegatewayParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteMobilegatewayParam) GetQuery() string {
	return p.Query
}
func (p *DeleteMobilegatewayParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteMobilegatewayParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// BootMobilegatewayParam is input parameters for the sacloud API
type BootMobilegatewayParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewBootMobilegatewayParam return new BootMobilegatewayParam
func NewBootMobilegatewayParam(in Input) (*BootMobilegatewayParam, error) {
	v := &BootMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BootMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BootMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *BootMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *BootMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *BootMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["boot"]
}

func (p *BootMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BootMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BootMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BootMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *BootMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *BootMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *BootMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BootMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BootMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BootMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BootMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *BootMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *BootMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BootMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BootMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *BootMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *BootMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BootMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BootMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *BootMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// ShutdownMobilegatewayParam is input parameters for the sacloud API
type ShutdownMobilegatewayParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewShutdownMobilegatewayParam return new ShutdownMobilegatewayParam
func NewShutdownMobilegatewayParam(in Input) (*ShutdownMobilegatewayParam, error) {
	v := &ShutdownMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShutdownMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ShutdownMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ShutdownMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *ShutdownMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown"]
}

func (p *ShutdownMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ShutdownMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ShutdownMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *ShutdownMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ShutdownMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ShutdownMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ShutdownMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ShutdownMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ShutdownMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *ShutdownMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ShutdownMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ShutdownMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ShutdownMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ShutdownMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ShutdownMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ShutdownMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ShutdownMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// ShutdownForceMobilegatewayParam is input parameters for the sacloud API
type ShutdownForceMobilegatewayParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewShutdownForceMobilegatewayParam return new ShutdownForceMobilegatewayParam
func NewShutdownForceMobilegatewayParam(in Input) (*ShutdownForceMobilegatewayParam, error) {
	v := &ShutdownForceMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownForceMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShutdownForceMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ShutdownForceMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ShutdownForceMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *ShutdownForceMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown-force"]
}

func (p *ShutdownForceMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownForceMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownForceMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownForceMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ShutdownForceMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ShutdownForceMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *ShutdownForceMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ShutdownForceMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ShutdownForceMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ShutdownForceMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ShutdownForceMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ShutdownForceMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *ShutdownForceMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ShutdownForceMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ShutdownForceMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ShutdownForceMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ShutdownForceMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ShutdownForceMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ShutdownForceMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ShutdownForceMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// ResetMobilegatewayParam is input parameters for the sacloud API
type ResetMobilegatewayParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewResetMobilegatewayParam return new ResetMobilegatewayParam
func NewResetMobilegatewayParam(in Input) (*ResetMobilegatewayParam, error) {
	v := &ResetMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResetMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResetMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ResetMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ResetMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *ResetMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["reset"]
}

func (p *ResetMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResetMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResetMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResetMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ResetMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ResetMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *ResetMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ResetMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ResetMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ResetMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ResetMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ResetMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *ResetMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ResetMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ResetMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ResetMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ResetMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ResetMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ResetMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ResetMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// WaitForBootMobilegatewayParam is input parameters for the sacloud API
type WaitForBootMobilegatewayParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewWaitForBootMobilegatewayParam return new WaitForBootMobilegatewayParam
func NewWaitForBootMobilegatewayParam(in Input) (*WaitForBootMobilegatewayParam, error) {
	v := &WaitForBootMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForBootMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForBootMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *WaitForBootMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *WaitForBootMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *WaitForBootMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-boot"]
}

func (p *WaitForBootMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForBootMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForBootMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForBootMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *WaitForBootMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *WaitForBootMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *WaitForBootMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForBootMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForBootMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *WaitForBootMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *WaitForBootMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForBootMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForBootMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *WaitForBootMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *WaitForBootMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForBootMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForBootMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *WaitForBootMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// WaitForDownMobilegatewayParam is input parameters for the sacloud API
type WaitForDownMobilegatewayParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewWaitForDownMobilegatewayParam return new WaitForDownMobilegatewayParam
func NewWaitForDownMobilegatewayParam(in Input) (*WaitForDownMobilegatewayParam, error) {
	v := &WaitForDownMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForDownMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForDownMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *WaitForDownMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *WaitForDownMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *WaitForDownMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-down"]
}

func (p *WaitForDownMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForDownMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForDownMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForDownMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *WaitForDownMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *WaitForDownMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *WaitForDownMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForDownMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForDownMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *WaitForDownMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *WaitForDownMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForDownMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForDownMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *WaitForDownMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *WaitForDownMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForDownMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForDownMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *WaitForDownMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// InterfaceInfoMobilegatewayParam is input parameters for the sacloud API
type InterfaceInfoMobilegatewayParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewInterfaceInfoMobilegatewayParam return new InterfaceInfoMobilegatewayParam
func NewInterfaceInfoMobilegatewayParam(in Input) (*InterfaceInfoMobilegatewayParam, error) {
	v := &InterfaceInfoMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceInfoMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceInfoMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *InterfaceInfoMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *InterfaceInfoMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *InterfaceInfoMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-info"]
}

func (p *InterfaceInfoMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceInfoMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceInfoMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceInfoMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceInfoMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *InterfaceInfoMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *InterfaceInfoMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceInfoMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceInfoMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *InterfaceInfoMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *InterfaceInfoMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceInfoMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceInfoMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *InterfaceInfoMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *InterfaceInfoMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceInfoMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceInfoMobilegatewayParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *InterfaceInfoMobilegatewayParam) GetOutputType() string {
	return p.OutputType
}
func (p *InterfaceInfoMobilegatewayParam) SetColumn(v []string) {
	p.Column = v
}

func (p *InterfaceInfoMobilegatewayParam) GetColumn() []string {
	return p.Column
}
func (p *InterfaceInfoMobilegatewayParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *InterfaceInfoMobilegatewayParam) GetQuiet() bool {
	return p.Quiet
}
func (p *InterfaceInfoMobilegatewayParam) SetFormat(v string) {
	p.Format = v
}

func (p *InterfaceInfoMobilegatewayParam) GetFormat() string {
	return p.Format
}
func (p *InterfaceInfoMobilegatewayParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *InterfaceInfoMobilegatewayParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *InterfaceInfoMobilegatewayParam) SetQuery(v string) {
	p.Query = v
}

func (p *InterfaceInfoMobilegatewayParam) GetQuery() string {
	return p.Query
}
func (p *InterfaceInfoMobilegatewayParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *InterfaceInfoMobilegatewayParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *InterfaceInfoMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *InterfaceInfoMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// InterfaceConnectMobilegatewayParam is input parameters for the sacloud API
type InterfaceConnectMobilegatewayParam struct {
	Ipaddress         string     `json:"ipaddress"`
	SwitchId          sacloud.ID `json:"switch-id"`
	NwMasklen         int        `json:"nw-masklen"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewInterfaceConnectMobilegatewayParam return new InterfaceConnectMobilegatewayParam
func NewInterfaceConnectMobilegatewayParam(in Input) (*InterfaceConnectMobilegatewayParam, error) {
	v := &InterfaceConnectMobilegatewayParam{
		NwMasklen: 24, input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceConnectMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceConnectMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *InterfaceConnectMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["interface-connect"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["interface-connect"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["interface-connect"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *InterfaceConnectMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *InterfaceConnectMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-connect"]
}

func (p *InterfaceConnectMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceConnectMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceConnectMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceConnectMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceConnectMobilegatewayParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *InterfaceConnectMobilegatewayParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *InterfaceConnectMobilegatewayParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *InterfaceConnectMobilegatewayParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *InterfaceConnectMobilegatewayParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *InterfaceConnectMobilegatewayParam) GetNwMasklen() int {
	return p.NwMasklen
}
func (p *InterfaceConnectMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *InterfaceConnectMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *InterfaceConnectMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceConnectMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceConnectMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceConnectMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceConnectMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *InterfaceConnectMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *InterfaceConnectMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceConnectMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceConnectMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *InterfaceConnectMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *InterfaceConnectMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceConnectMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceConnectMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *InterfaceConnectMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// InterfaceUpdateMobilegatewayParam is input parameters for the sacloud API
type InterfaceUpdateMobilegatewayParam struct {
	Ipaddress         string     `json:"ipaddress"`
	NwMasklen         int        `json:"nw-masklen"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewInterfaceUpdateMobilegatewayParam return new InterfaceUpdateMobilegatewayParam
func NewInterfaceUpdateMobilegatewayParam(in Input) (*InterfaceUpdateMobilegatewayParam, error) {
	v := &InterfaceUpdateMobilegatewayParam{
		NwMasklen: 24, input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceUpdateMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceUpdateMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *InterfaceUpdateMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := define.Resources["MobileGateway"].Commands["interface-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["interface-update"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *InterfaceUpdateMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *InterfaceUpdateMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-update"]
}

func (p *InterfaceUpdateMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceUpdateMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceUpdateMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceUpdateMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceUpdateMobilegatewayParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *InterfaceUpdateMobilegatewayParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *InterfaceUpdateMobilegatewayParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *InterfaceUpdateMobilegatewayParam) GetNwMasklen() int {
	return p.NwMasklen
}
func (p *InterfaceUpdateMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *InterfaceUpdateMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *InterfaceUpdateMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceUpdateMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceUpdateMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceUpdateMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceUpdateMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *InterfaceUpdateMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *InterfaceUpdateMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceUpdateMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceUpdateMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *InterfaceUpdateMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *InterfaceUpdateMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceUpdateMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceUpdateMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *InterfaceUpdateMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// InterfaceDisconnectMobilegatewayParam is input parameters for the sacloud API
type InterfaceDisconnectMobilegatewayParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewInterfaceDisconnectMobilegatewayParam return new InterfaceDisconnectMobilegatewayParam
func NewInterfaceDisconnectMobilegatewayParam(in Input) (*InterfaceDisconnectMobilegatewayParam, error) {
	v := &InterfaceDisconnectMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceDisconnectMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceDisconnectMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *InterfaceDisconnectMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *InterfaceDisconnectMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *InterfaceDisconnectMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-disconnect"]
}

func (p *InterfaceDisconnectMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceDisconnectMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceDisconnectMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceDisconnectMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceDisconnectMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *InterfaceDisconnectMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *InterfaceDisconnectMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceDisconnectMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceDisconnectMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceDisconnectMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceDisconnectMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *InterfaceDisconnectMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *InterfaceDisconnectMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceDisconnectMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceDisconnectMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *InterfaceDisconnectMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *InterfaceDisconnectMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceDisconnectMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceDisconnectMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *InterfaceDisconnectMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// TrafficControlInfoMobilegatewayParam is input parameters for the sacloud API
type TrafficControlInfoMobilegatewayParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewTrafficControlInfoMobilegatewayParam return new TrafficControlInfoMobilegatewayParam
func NewTrafficControlInfoMobilegatewayParam(in Input) (*TrafficControlInfoMobilegatewayParam, error) {
	v := &TrafficControlInfoMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *TrafficControlInfoMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *TrafficControlInfoMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *TrafficControlInfoMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *TrafficControlInfoMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *TrafficControlInfoMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["traffic-control-info"]
}

func (p *TrafficControlInfoMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *TrafficControlInfoMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *TrafficControlInfoMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *TrafficControlInfoMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *TrafficControlInfoMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *TrafficControlInfoMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *TrafficControlInfoMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *TrafficControlInfoMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *TrafficControlInfoMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *TrafficControlInfoMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *TrafficControlInfoMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *TrafficControlInfoMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *TrafficControlInfoMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *TrafficControlInfoMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *TrafficControlInfoMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *TrafficControlInfoMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *TrafficControlInfoMobilegatewayParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *TrafficControlInfoMobilegatewayParam) GetOutputType() string {
	return p.OutputType
}
func (p *TrafficControlInfoMobilegatewayParam) SetColumn(v []string) {
	p.Column = v
}

func (p *TrafficControlInfoMobilegatewayParam) GetColumn() []string {
	return p.Column
}
func (p *TrafficControlInfoMobilegatewayParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *TrafficControlInfoMobilegatewayParam) GetQuiet() bool {
	return p.Quiet
}
func (p *TrafficControlInfoMobilegatewayParam) SetFormat(v string) {
	p.Format = v
}

func (p *TrafficControlInfoMobilegatewayParam) GetFormat() string {
	return p.Format
}
func (p *TrafficControlInfoMobilegatewayParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *TrafficControlInfoMobilegatewayParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *TrafficControlInfoMobilegatewayParam) SetQuery(v string) {
	p.Query = v
}

func (p *TrafficControlInfoMobilegatewayParam) GetQuery() string {
	return p.Query
}
func (p *TrafficControlInfoMobilegatewayParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *TrafficControlInfoMobilegatewayParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *TrafficControlInfoMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *TrafficControlInfoMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// TrafficControlEnableMobilegatewayParam is input parameters for the sacloud API
type TrafficControlEnableMobilegatewayParam struct {
	Quota              int        `json:"quota"`
	BandWidthLimit     int        `json:"band-width-limit"`
	EnableEmail        bool       `json:"enable-email"`
	SlackWebhookUrl    string     `json:"slack-webhook-url"`
	AutoTrafficShaping bool       `json:"auto-traffic-shaping"`
	Selector           []string   `json:"selector"`
	Assumeyes          bool       `json:"assumeyes"`
	ParamTemplate      string     `json:"param-template"`
	Parameters         string     `json:"parameters"`
	ParamTemplateFile  string     `json:"param-template-file"`
	ParameterFile      string     `json:"parameter-file"`
	GenerateSkeleton   bool       `json:"generate-skeleton"`
	Id                 sacloud.ID `json:"id"`

	input Input
}

// NewTrafficControlEnableMobilegatewayParam return new TrafficControlEnableMobilegatewayParam
func NewTrafficControlEnableMobilegatewayParam(in Input) (*TrafficControlEnableMobilegatewayParam, error) {
	v := &TrafficControlEnableMobilegatewayParam{
		Quota: 512, input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *TrafficControlEnableMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *TrafficControlEnableMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Quota) {
		p.Quota = 0
	}
	if utils.IsEmpty(p.BandWidthLimit) {
		p.BandWidthLimit = 0
	}
	if utils.IsEmpty(p.EnableEmail) {
		p.EnableEmail = false
	}
	if utils.IsEmpty(p.SlackWebhookUrl) {
		p.SlackWebhookUrl = ""
	}
	if utils.IsEmpty(p.AutoTrafficShaping) {
		p.AutoTrafficShaping = false
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *TrafficControlEnableMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--quota", p.Quota)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["traffic-control-enable"].Params["quota"].ValidateFunc
		errs := validator("--quota", p.Quota)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["traffic-control-enable"].Params["band-width-limit"].ValidateFunc
		errs := validator("--band-width-limit", p.BandWidthLimit)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["traffic-control-enable"].Params["slack-webhook-url"].ValidateFunc
		errs := validator("--slack-webhook-url", p.SlackWebhookUrl)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *TrafficControlEnableMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *TrafficControlEnableMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["traffic-control-enable"]
}

func (p *TrafficControlEnableMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *TrafficControlEnableMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *TrafficControlEnableMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *TrafficControlEnableMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *TrafficControlEnableMobilegatewayParam) SetQuota(v int) {
	p.Quota = v
}

func (p *TrafficControlEnableMobilegatewayParam) GetQuota() int {
	return p.Quota
}
func (p *TrafficControlEnableMobilegatewayParam) SetBandWidthLimit(v int) {
	p.BandWidthLimit = v
}

func (p *TrafficControlEnableMobilegatewayParam) GetBandWidthLimit() int {
	return p.BandWidthLimit
}
func (p *TrafficControlEnableMobilegatewayParam) SetEnableEmail(v bool) {
	p.EnableEmail = v
}

func (p *TrafficControlEnableMobilegatewayParam) GetEnableEmail() bool {
	return p.EnableEmail
}
func (p *TrafficControlEnableMobilegatewayParam) SetSlackWebhookUrl(v string) {
	p.SlackWebhookUrl = v
}

func (p *TrafficControlEnableMobilegatewayParam) GetSlackWebhookUrl() string {
	return p.SlackWebhookUrl
}
func (p *TrafficControlEnableMobilegatewayParam) SetAutoTrafficShaping(v bool) {
	p.AutoTrafficShaping = v
}

func (p *TrafficControlEnableMobilegatewayParam) GetAutoTrafficShaping() bool {
	return p.AutoTrafficShaping
}
func (p *TrafficControlEnableMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *TrafficControlEnableMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *TrafficControlEnableMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *TrafficControlEnableMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *TrafficControlEnableMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *TrafficControlEnableMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *TrafficControlEnableMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *TrafficControlEnableMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *TrafficControlEnableMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *TrafficControlEnableMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *TrafficControlEnableMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *TrafficControlEnableMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *TrafficControlEnableMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *TrafficControlEnableMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *TrafficControlEnableMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *TrafficControlEnableMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// TrafficControlUpdateMobilegatewayParam is input parameters for the sacloud API
type TrafficControlUpdateMobilegatewayParam struct {
	Quota              int        `json:"quota"`
	BandWidthLimit     int        `json:"band-width-limit"`
	EnableEmail        bool       `json:"enable-email"`
	SlackWebhookUrl    string     `json:"slack-webhook-url"`
	AutoTrafficShaping bool       `json:"auto-traffic-shaping"`
	Selector           []string   `json:"selector"`
	Assumeyes          bool       `json:"assumeyes"`
	ParamTemplate      string     `json:"param-template"`
	Parameters         string     `json:"parameters"`
	ParamTemplateFile  string     `json:"param-template-file"`
	ParameterFile      string     `json:"parameter-file"`
	GenerateSkeleton   bool       `json:"generate-skeleton"`
	Id                 sacloud.ID `json:"id"`

	input Input
}

// NewTrafficControlUpdateMobilegatewayParam return new TrafficControlUpdateMobilegatewayParam
func NewTrafficControlUpdateMobilegatewayParam(in Input) (*TrafficControlUpdateMobilegatewayParam, error) {
	v := &TrafficControlUpdateMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *TrafficControlUpdateMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *TrafficControlUpdateMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Quota) {
		p.Quota = 0
	}
	if utils.IsEmpty(p.BandWidthLimit) {
		p.BandWidthLimit = 0
	}
	if utils.IsEmpty(p.EnableEmail) {
		p.EnableEmail = false
	}
	if utils.IsEmpty(p.SlackWebhookUrl) {
		p.SlackWebhookUrl = ""
	}
	if utils.IsEmpty(p.AutoTrafficShaping) {
		p.AutoTrafficShaping = false
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *TrafficControlUpdateMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := define.Resources["MobileGateway"].Commands["traffic-control-update"].Params["quota"].ValidateFunc
		errs := validator("--quota", p.Quota)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["traffic-control-update"].Params["band-width-limit"].ValidateFunc
		errs := validator("--band-width-limit", p.BandWidthLimit)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["traffic-control-update"].Params["slack-webhook-url"].ValidateFunc
		errs := validator("--slack-webhook-url", p.SlackWebhookUrl)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *TrafficControlUpdateMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *TrafficControlUpdateMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["traffic-control-update"]
}

func (p *TrafficControlUpdateMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *TrafficControlUpdateMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *TrafficControlUpdateMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *TrafficControlUpdateMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *TrafficControlUpdateMobilegatewayParam) SetQuota(v int) {
	p.Quota = v
}

func (p *TrafficControlUpdateMobilegatewayParam) GetQuota() int {
	return p.Quota
}
func (p *TrafficControlUpdateMobilegatewayParam) SetBandWidthLimit(v int) {
	p.BandWidthLimit = v
}

func (p *TrafficControlUpdateMobilegatewayParam) GetBandWidthLimit() int {
	return p.BandWidthLimit
}
func (p *TrafficControlUpdateMobilegatewayParam) SetEnableEmail(v bool) {
	p.EnableEmail = v
}

func (p *TrafficControlUpdateMobilegatewayParam) GetEnableEmail() bool {
	return p.EnableEmail
}
func (p *TrafficControlUpdateMobilegatewayParam) SetSlackWebhookUrl(v string) {
	p.SlackWebhookUrl = v
}

func (p *TrafficControlUpdateMobilegatewayParam) GetSlackWebhookUrl() string {
	return p.SlackWebhookUrl
}
func (p *TrafficControlUpdateMobilegatewayParam) SetAutoTrafficShaping(v bool) {
	p.AutoTrafficShaping = v
}

func (p *TrafficControlUpdateMobilegatewayParam) GetAutoTrafficShaping() bool {
	return p.AutoTrafficShaping
}
func (p *TrafficControlUpdateMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *TrafficControlUpdateMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *TrafficControlUpdateMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *TrafficControlUpdateMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *TrafficControlUpdateMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *TrafficControlUpdateMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *TrafficControlUpdateMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *TrafficControlUpdateMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *TrafficControlUpdateMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *TrafficControlUpdateMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *TrafficControlUpdateMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *TrafficControlUpdateMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *TrafficControlUpdateMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *TrafficControlUpdateMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *TrafficControlUpdateMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *TrafficControlUpdateMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// TrafficControlDisableMobilegatewayParam is input parameters for the sacloud API
type TrafficControlDisableMobilegatewayParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewTrafficControlDisableMobilegatewayParam return new TrafficControlDisableMobilegatewayParam
func NewTrafficControlDisableMobilegatewayParam(in Input) (*TrafficControlDisableMobilegatewayParam, error) {
	v := &TrafficControlDisableMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *TrafficControlDisableMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *TrafficControlDisableMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *TrafficControlDisableMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *TrafficControlDisableMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *TrafficControlDisableMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["traffic-control-disable"]
}

func (p *TrafficControlDisableMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *TrafficControlDisableMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *TrafficControlDisableMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *TrafficControlDisableMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *TrafficControlDisableMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *TrafficControlDisableMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *TrafficControlDisableMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *TrafficControlDisableMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *TrafficControlDisableMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *TrafficControlDisableMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *TrafficControlDisableMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *TrafficControlDisableMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *TrafficControlDisableMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *TrafficControlDisableMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *TrafficControlDisableMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *TrafficControlDisableMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *TrafficControlDisableMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *TrafficControlDisableMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *TrafficControlDisableMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *TrafficControlDisableMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// StaticRouteInfoMobilegatewayParam is input parameters for the sacloud API
type StaticRouteInfoMobilegatewayParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewStaticRouteInfoMobilegatewayParam return new StaticRouteInfoMobilegatewayParam
func NewStaticRouteInfoMobilegatewayParam(in Input) (*StaticRouteInfoMobilegatewayParam, error) {
	v := &StaticRouteInfoMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticRouteInfoMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticRouteInfoMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *StaticRouteInfoMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *StaticRouteInfoMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *StaticRouteInfoMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-info"]
}

func (p *StaticRouteInfoMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteInfoMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteInfoMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteInfoMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticRouteInfoMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticRouteInfoMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticRouteInfoMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticRouteInfoMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticRouteInfoMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticRouteInfoMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticRouteInfoMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticRouteInfoMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticRouteInfoMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticRouteInfoMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticRouteInfoMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticRouteInfoMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticRouteInfoMobilegatewayParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *StaticRouteInfoMobilegatewayParam) GetOutputType() string {
	return p.OutputType
}
func (p *StaticRouteInfoMobilegatewayParam) SetColumn(v []string) {
	p.Column = v
}

func (p *StaticRouteInfoMobilegatewayParam) GetColumn() []string {
	return p.Column
}
func (p *StaticRouteInfoMobilegatewayParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *StaticRouteInfoMobilegatewayParam) GetQuiet() bool {
	return p.Quiet
}
func (p *StaticRouteInfoMobilegatewayParam) SetFormat(v string) {
	p.Format = v
}

func (p *StaticRouteInfoMobilegatewayParam) GetFormat() string {
	return p.Format
}
func (p *StaticRouteInfoMobilegatewayParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *StaticRouteInfoMobilegatewayParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *StaticRouteInfoMobilegatewayParam) SetQuery(v string) {
	p.Query = v
}

func (p *StaticRouteInfoMobilegatewayParam) GetQuery() string {
	return p.Query
}
func (p *StaticRouteInfoMobilegatewayParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *StaticRouteInfoMobilegatewayParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *StaticRouteInfoMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticRouteInfoMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// StaticRouteAddMobilegatewayParam is input parameters for the sacloud API
type StaticRouteAddMobilegatewayParam struct {
	Prefix            string     `json:"prefix"`
	NextHop           string     `json:"next-hop"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewStaticRouteAddMobilegatewayParam return new StaticRouteAddMobilegatewayParam
func NewStaticRouteAddMobilegatewayParam(in Input) (*StaticRouteAddMobilegatewayParam, error) {
	v := &StaticRouteAddMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticRouteAddMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticRouteAddMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Prefix) {
		p.Prefix = ""
	}
	if utils.IsEmpty(p.NextHop) {
		p.NextHop = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *StaticRouteAddMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["static-route-add"].Params["prefix"].ValidateFunc
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["static-route-add"].Params["next-hop"].ValidateFunc
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *StaticRouteAddMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *StaticRouteAddMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-add"]
}

func (p *StaticRouteAddMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteAddMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteAddMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteAddMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticRouteAddMobilegatewayParam) SetPrefix(v string) {
	p.Prefix = v
}

func (p *StaticRouteAddMobilegatewayParam) GetPrefix() string {
	return p.Prefix
}
func (p *StaticRouteAddMobilegatewayParam) SetNextHop(v string) {
	p.NextHop = v
}

func (p *StaticRouteAddMobilegatewayParam) GetNextHop() string {
	return p.NextHop
}
func (p *StaticRouteAddMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticRouteAddMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticRouteAddMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticRouteAddMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticRouteAddMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticRouteAddMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticRouteAddMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticRouteAddMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticRouteAddMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticRouteAddMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticRouteAddMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticRouteAddMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticRouteAddMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticRouteAddMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticRouteAddMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticRouteAddMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// StaticRouteUpdateMobilegatewayParam is input parameters for the sacloud API
type StaticRouteUpdateMobilegatewayParam struct {
	Index             int        `json:"index"`
	Prefix            string     `json:"prefix"`
	NextHop           string     `json:"next-hop"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewStaticRouteUpdateMobilegatewayParam return new StaticRouteUpdateMobilegatewayParam
func NewStaticRouteUpdateMobilegatewayParam(in Input) (*StaticRouteUpdateMobilegatewayParam, error) {
	v := &StaticRouteUpdateMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticRouteUpdateMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticRouteUpdateMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Prefix) {
		p.Prefix = ""
	}
	if utils.IsEmpty(p.NextHop) {
		p.NextHop = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *StaticRouteUpdateMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["static-route-update"].Params["prefix"].ValidateFunc
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["static-route-update"].Params["next-hop"].ValidateFunc
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *StaticRouteUpdateMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *StaticRouteUpdateMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-update"]
}

func (p *StaticRouteUpdateMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteUpdateMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteUpdateMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteUpdateMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticRouteUpdateMobilegatewayParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticRouteUpdateMobilegatewayParam) GetIndex() int {
	return p.Index
}
func (p *StaticRouteUpdateMobilegatewayParam) SetPrefix(v string) {
	p.Prefix = v
}

func (p *StaticRouteUpdateMobilegatewayParam) GetPrefix() string {
	return p.Prefix
}
func (p *StaticRouteUpdateMobilegatewayParam) SetNextHop(v string) {
	p.NextHop = v
}

func (p *StaticRouteUpdateMobilegatewayParam) GetNextHop() string {
	return p.NextHop
}
func (p *StaticRouteUpdateMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticRouteUpdateMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticRouteUpdateMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticRouteUpdateMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticRouteUpdateMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticRouteUpdateMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticRouteUpdateMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticRouteUpdateMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticRouteUpdateMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticRouteUpdateMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticRouteUpdateMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticRouteUpdateMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticRouteUpdateMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticRouteUpdateMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticRouteUpdateMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticRouteUpdateMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// StaticRouteDeleteMobilegatewayParam is input parameters for the sacloud API
type StaticRouteDeleteMobilegatewayParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewStaticRouteDeleteMobilegatewayParam return new StaticRouteDeleteMobilegatewayParam
func NewStaticRouteDeleteMobilegatewayParam(in Input) (*StaticRouteDeleteMobilegatewayParam, error) {
	v := &StaticRouteDeleteMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *StaticRouteDeleteMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *StaticRouteDeleteMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *StaticRouteDeleteMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *StaticRouteDeleteMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *StaticRouteDeleteMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["static-route-delete"]
}

func (p *StaticRouteDeleteMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *StaticRouteDeleteMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *StaticRouteDeleteMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *StaticRouteDeleteMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *StaticRouteDeleteMobilegatewayParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticRouteDeleteMobilegatewayParam) GetIndex() int {
	return p.Index
}
func (p *StaticRouteDeleteMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticRouteDeleteMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticRouteDeleteMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticRouteDeleteMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticRouteDeleteMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticRouteDeleteMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticRouteDeleteMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticRouteDeleteMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticRouteDeleteMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticRouteDeleteMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticRouteDeleteMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticRouteDeleteMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticRouteDeleteMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticRouteDeleteMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticRouteDeleteMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticRouteDeleteMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// SimInfoMobilegatewayParam is input parameters for the sacloud API
type SimInfoMobilegatewayParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewSimInfoMobilegatewayParam return new SimInfoMobilegatewayParam
func NewSimInfoMobilegatewayParam(in Input) (*SimInfoMobilegatewayParam, error) {
	v := &SimInfoMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SimInfoMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SimInfoMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *SimInfoMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *SimInfoMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SimInfoMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-info"]
}

func (p *SimInfoMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SimInfoMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SimInfoMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SimInfoMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SimInfoMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SimInfoMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *SimInfoMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SimInfoMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SimInfoMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SimInfoMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *SimInfoMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SimInfoMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SimInfoMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SimInfoMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SimInfoMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SimInfoMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SimInfoMobilegatewayParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *SimInfoMobilegatewayParam) GetOutputType() string {
	return p.OutputType
}
func (p *SimInfoMobilegatewayParam) SetColumn(v []string) {
	p.Column = v
}

func (p *SimInfoMobilegatewayParam) GetColumn() []string {
	return p.Column
}
func (p *SimInfoMobilegatewayParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *SimInfoMobilegatewayParam) GetQuiet() bool {
	return p.Quiet
}
func (p *SimInfoMobilegatewayParam) SetFormat(v string) {
	p.Format = v
}

func (p *SimInfoMobilegatewayParam) GetFormat() string {
	return p.Format
}
func (p *SimInfoMobilegatewayParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *SimInfoMobilegatewayParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *SimInfoMobilegatewayParam) SetQuery(v string) {
	p.Query = v
}

func (p *SimInfoMobilegatewayParam) GetQuery() string {
	return p.Query
}
func (p *SimInfoMobilegatewayParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *SimInfoMobilegatewayParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *SimInfoMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SimInfoMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// SimAddMobilegatewayParam is input parameters for the sacloud API
type SimAddMobilegatewayParam struct {
	Ipaddress         string     `json:"ipaddress"`
	SimId             sacloud.ID `json:"sim-id"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewSimAddMobilegatewayParam return new SimAddMobilegatewayParam
func NewSimAddMobilegatewayParam(in Input) (*SimAddMobilegatewayParam, error) {
	v := &SimAddMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SimAddMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SimAddMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.SimId) {
		p.SimId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *SimAddMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["sim-add"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--sim-id", p.SimId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["sim-add"].Params["sim-id"].ValidateFunc
		errs := validator("--sim-id", p.SimId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *SimAddMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SimAddMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-add"]
}

func (p *SimAddMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SimAddMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SimAddMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SimAddMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SimAddMobilegatewayParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *SimAddMobilegatewayParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *SimAddMobilegatewayParam) SetSimId(v sacloud.ID) {
	p.SimId = v
}

func (p *SimAddMobilegatewayParam) GetSimId() sacloud.ID {
	return p.SimId
}
func (p *SimAddMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SimAddMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *SimAddMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SimAddMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SimAddMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SimAddMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SimAddMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SimAddMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *SimAddMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SimAddMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SimAddMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SimAddMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SimAddMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SimAddMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SimAddMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SimAddMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// SimUpdateMobilegatewayParam is input parameters for the sacloud API
type SimUpdateMobilegatewayParam struct {
	Ipaddress         string     `json:"ipaddress"`
	SimId             sacloud.ID `json:"sim-id"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewSimUpdateMobilegatewayParam return new SimUpdateMobilegatewayParam
func NewSimUpdateMobilegatewayParam(in Input) (*SimUpdateMobilegatewayParam, error) {
	v := &SimUpdateMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SimUpdateMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SimUpdateMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.SimId) {
		p.SimId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *SimUpdateMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := define.Resources["MobileGateway"].Commands["sim-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--sim-id", p.SimId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["sim-update"].Params["sim-id"].ValidateFunc
		errs := validator("--sim-id", p.SimId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *SimUpdateMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SimUpdateMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-update"]
}

func (p *SimUpdateMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SimUpdateMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SimUpdateMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SimUpdateMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SimUpdateMobilegatewayParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *SimUpdateMobilegatewayParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *SimUpdateMobilegatewayParam) SetSimId(v sacloud.ID) {
	p.SimId = v
}

func (p *SimUpdateMobilegatewayParam) GetSimId() sacloud.ID {
	return p.SimId
}
func (p *SimUpdateMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SimUpdateMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *SimUpdateMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SimUpdateMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SimUpdateMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SimUpdateMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SimUpdateMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SimUpdateMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *SimUpdateMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SimUpdateMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SimUpdateMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SimUpdateMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SimUpdateMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SimUpdateMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SimUpdateMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SimUpdateMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// SimDeleteMobilegatewayParam is input parameters for the sacloud API
type SimDeleteMobilegatewayParam struct {
	SimId             sacloud.ID `json:"sim-id"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewSimDeleteMobilegatewayParam return new SimDeleteMobilegatewayParam
func NewSimDeleteMobilegatewayParam(in Input) (*SimDeleteMobilegatewayParam, error) {
	v := &SimDeleteMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SimDeleteMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SimDeleteMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.SimId) {
		p.SimId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *SimDeleteMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--sim-id", p.SimId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["sim-delete"].Params["sim-id"].ValidateFunc
		errs := validator("--sim-id", p.SimId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *SimDeleteMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SimDeleteMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-delete"]
}

func (p *SimDeleteMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SimDeleteMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SimDeleteMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SimDeleteMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SimDeleteMobilegatewayParam) SetSimId(v sacloud.ID) {
	p.SimId = v
}

func (p *SimDeleteMobilegatewayParam) GetSimId() sacloud.ID {
	return p.SimId
}
func (p *SimDeleteMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SimDeleteMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *SimDeleteMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SimDeleteMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SimDeleteMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SimDeleteMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SimDeleteMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SimDeleteMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *SimDeleteMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SimDeleteMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SimDeleteMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SimDeleteMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SimDeleteMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SimDeleteMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SimDeleteMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SimDeleteMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// SimRouteInfoMobilegatewayParam is input parameters for the sacloud API
type SimRouteInfoMobilegatewayParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewSimRouteInfoMobilegatewayParam return new SimRouteInfoMobilegatewayParam
func NewSimRouteInfoMobilegatewayParam(in Input) (*SimRouteInfoMobilegatewayParam, error) {
	v := &SimRouteInfoMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SimRouteInfoMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SimRouteInfoMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *SimRouteInfoMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *SimRouteInfoMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SimRouteInfoMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-route-info"]
}

func (p *SimRouteInfoMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SimRouteInfoMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SimRouteInfoMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SimRouteInfoMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SimRouteInfoMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SimRouteInfoMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *SimRouteInfoMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SimRouteInfoMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SimRouteInfoMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SimRouteInfoMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *SimRouteInfoMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SimRouteInfoMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SimRouteInfoMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SimRouteInfoMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SimRouteInfoMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SimRouteInfoMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SimRouteInfoMobilegatewayParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *SimRouteInfoMobilegatewayParam) GetOutputType() string {
	return p.OutputType
}
func (p *SimRouteInfoMobilegatewayParam) SetColumn(v []string) {
	p.Column = v
}

func (p *SimRouteInfoMobilegatewayParam) GetColumn() []string {
	return p.Column
}
func (p *SimRouteInfoMobilegatewayParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *SimRouteInfoMobilegatewayParam) GetQuiet() bool {
	return p.Quiet
}
func (p *SimRouteInfoMobilegatewayParam) SetFormat(v string) {
	p.Format = v
}

func (p *SimRouteInfoMobilegatewayParam) GetFormat() string {
	return p.Format
}
func (p *SimRouteInfoMobilegatewayParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *SimRouteInfoMobilegatewayParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *SimRouteInfoMobilegatewayParam) SetQuery(v string) {
	p.Query = v
}

func (p *SimRouteInfoMobilegatewayParam) GetQuery() string {
	return p.Query
}
func (p *SimRouteInfoMobilegatewayParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *SimRouteInfoMobilegatewayParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *SimRouteInfoMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SimRouteInfoMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// SimRouteAddMobilegatewayParam is input parameters for the sacloud API
type SimRouteAddMobilegatewayParam struct {
	Prefix            string     `json:"prefix"`
	Sim               sacloud.ID `json:"sim"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewSimRouteAddMobilegatewayParam return new SimRouteAddMobilegatewayParam
func NewSimRouteAddMobilegatewayParam(in Input) (*SimRouteAddMobilegatewayParam, error) {
	v := &SimRouteAddMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SimRouteAddMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SimRouteAddMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Prefix) {
		p.Prefix = ""
	}
	if utils.IsEmpty(p.Sim) {
		p.Sim = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *SimRouteAddMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["sim-route-add"].Params["prefix"].ValidateFunc
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--sim", p.Sim)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["sim-route-add"].Params["sim"].ValidateFunc
		errs := validator("--sim", p.Sim)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *SimRouteAddMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SimRouteAddMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-route-add"]
}

func (p *SimRouteAddMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SimRouteAddMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SimRouteAddMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SimRouteAddMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SimRouteAddMobilegatewayParam) SetPrefix(v string) {
	p.Prefix = v
}

func (p *SimRouteAddMobilegatewayParam) GetPrefix() string {
	return p.Prefix
}
func (p *SimRouteAddMobilegatewayParam) SetSim(v sacloud.ID) {
	p.Sim = v
}

func (p *SimRouteAddMobilegatewayParam) GetSim() sacloud.ID {
	return p.Sim
}
func (p *SimRouteAddMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SimRouteAddMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *SimRouteAddMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SimRouteAddMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SimRouteAddMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SimRouteAddMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SimRouteAddMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SimRouteAddMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *SimRouteAddMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SimRouteAddMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SimRouteAddMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SimRouteAddMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SimRouteAddMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SimRouteAddMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SimRouteAddMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SimRouteAddMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// SimRouteUpdateMobilegatewayParam is input parameters for the sacloud API
type SimRouteUpdateMobilegatewayParam struct {
	Index             int        `json:"index"`
	Prefix            string     `json:"prefix"`
	Sim               sacloud.ID `json:"sim"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewSimRouteUpdateMobilegatewayParam return new SimRouteUpdateMobilegatewayParam
func NewSimRouteUpdateMobilegatewayParam(in Input) (*SimRouteUpdateMobilegatewayParam, error) {
	v := &SimRouteUpdateMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SimRouteUpdateMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SimRouteUpdateMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Prefix) {
		p.Prefix = ""
	}
	if utils.IsEmpty(p.Sim) {
		p.Sim = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *SimRouteUpdateMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["sim-route-update"].Params["prefix"].ValidateFunc
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["sim-route-update"].Params["sim"].ValidateFunc
		errs := validator("--sim", p.Sim)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *SimRouteUpdateMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SimRouteUpdateMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-route-update"]
}

func (p *SimRouteUpdateMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SimRouteUpdateMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SimRouteUpdateMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SimRouteUpdateMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SimRouteUpdateMobilegatewayParam) SetIndex(v int) {
	p.Index = v
}

func (p *SimRouteUpdateMobilegatewayParam) GetIndex() int {
	return p.Index
}
func (p *SimRouteUpdateMobilegatewayParam) SetPrefix(v string) {
	p.Prefix = v
}

func (p *SimRouteUpdateMobilegatewayParam) GetPrefix() string {
	return p.Prefix
}
func (p *SimRouteUpdateMobilegatewayParam) SetSim(v sacloud.ID) {
	p.Sim = v
}

func (p *SimRouteUpdateMobilegatewayParam) GetSim() sacloud.ID {
	return p.Sim
}
func (p *SimRouteUpdateMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SimRouteUpdateMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *SimRouteUpdateMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SimRouteUpdateMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SimRouteUpdateMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SimRouteUpdateMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SimRouteUpdateMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SimRouteUpdateMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *SimRouteUpdateMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SimRouteUpdateMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SimRouteUpdateMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SimRouteUpdateMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SimRouteUpdateMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SimRouteUpdateMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SimRouteUpdateMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SimRouteUpdateMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// SimRouteDeleteMobilegatewayParam is input parameters for the sacloud API
type SimRouteDeleteMobilegatewayParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewSimRouteDeleteMobilegatewayParam return new SimRouteDeleteMobilegatewayParam
func NewSimRouteDeleteMobilegatewayParam(in Input) (*SimRouteDeleteMobilegatewayParam, error) {
	v := &SimRouteDeleteMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SimRouteDeleteMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SimRouteDeleteMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *SimRouteDeleteMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *SimRouteDeleteMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *SimRouteDeleteMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["sim-route-delete"]
}

func (p *SimRouteDeleteMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SimRouteDeleteMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SimRouteDeleteMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SimRouteDeleteMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SimRouteDeleteMobilegatewayParam) SetIndex(v int) {
	p.Index = v
}

func (p *SimRouteDeleteMobilegatewayParam) GetIndex() int {
	return p.Index
}
func (p *SimRouteDeleteMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SimRouteDeleteMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *SimRouteDeleteMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SimRouteDeleteMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SimRouteDeleteMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SimRouteDeleteMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SimRouteDeleteMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SimRouteDeleteMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *SimRouteDeleteMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SimRouteDeleteMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SimRouteDeleteMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SimRouteDeleteMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SimRouteDeleteMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SimRouteDeleteMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SimRouteDeleteMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SimRouteDeleteMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// DnsUpdateMobilegatewayParam is input parameters for the sacloud API
type DnsUpdateMobilegatewayParam struct {
	Dns1              string     `json:"dns-1"`
	Dns2              string     `json:"dns-2"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewDnsUpdateMobilegatewayParam return new DnsUpdateMobilegatewayParam
func NewDnsUpdateMobilegatewayParam(in Input) (*DnsUpdateMobilegatewayParam, error) {
	v := &DnsUpdateMobilegatewayParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DnsUpdateMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DnsUpdateMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Dns1) {
		p.Dns1 = ""
	}
	if utils.IsEmpty(p.Dns2) {
		p.Dns2 = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DnsUpdateMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--dns-1", p.Dns1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["dns-update"].Params["dns1"].ValidateFunc
		errs := validator("--dns-1", p.Dns1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--dns-2", p.Dns2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["MobileGateway"].Commands["dns-update"].Params["dns2"].ValidateFunc
		errs := validator("--dns-2", p.Dns2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DnsUpdateMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *DnsUpdateMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["dns-update"]
}

func (p *DnsUpdateMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DnsUpdateMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DnsUpdateMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DnsUpdateMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DnsUpdateMobilegatewayParam) SetDns1(v string) {
	p.Dns1 = v
}

func (p *DnsUpdateMobilegatewayParam) GetDns1() string {
	return p.Dns1
}
func (p *DnsUpdateMobilegatewayParam) SetDns2(v string) {
	p.Dns2 = v
}

func (p *DnsUpdateMobilegatewayParam) GetDns2() string {
	return p.Dns2
}
func (p *DnsUpdateMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DnsUpdateMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *DnsUpdateMobilegatewayParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DnsUpdateMobilegatewayParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DnsUpdateMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DnsUpdateMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DnsUpdateMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DnsUpdateMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *DnsUpdateMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DnsUpdateMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DnsUpdateMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DnsUpdateMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DnsUpdateMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DnsUpdateMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DnsUpdateMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DnsUpdateMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

// LogsMobilegatewayParam is input parameters for the sacloud API
type LogsMobilegatewayParam struct {
	Follow            bool       `json:"follow"`
	RefreshInterval   int64      `json:"refresh-interval"`
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewLogsMobilegatewayParam return new LogsMobilegatewayParam
func NewLogsMobilegatewayParam(in Input) (*LogsMobilegatewayParam, error) {
	v := &LogsMobilegatewayParam{
		RefreshInterval: 3, input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *LogsMobilegatewayParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *LogsMobilegatewayParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Follow) {
		p.Follow = false
	}
	if utils.IsEmpty(p.RefreshInterval) {
		p.RefreshInterval = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *LogsMobilegatewayParam) validate() error {
	var errors []error
	{
		validator := define.Resources["MobileGateway"].Commands["logs"].Params["refresh-interval"].ValidateFunc
		errs := validator("--refresh-interval", p.RefreshInterval)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *LogsMobilegatewayParam) ResourceDef() *schema.Resource {
	return define.Resources["MobileGateway"]
}

func (p *LogsMobilegatewayParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["logs"]
}

func (p *LogsMobilegatewayParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *LogsMobilegatewayParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *LogsMobilegatewayParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *LogsMobilegatewayParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *LogsMobilegatewayParam) SetFollow(v bool) {
	p.Follow = v
}

func (p *LogsMobilegatewayParam) GetFollow() bool {
	return p.Follow
}
func (p *LogsMobilegatewayParam) SetRefreshInterval(v int64) {
	p.RefreshInterval = v
}

func (p *LogsMobilegatewayParam) GetRefreshInterval() int64 {
	return p.RefreshInterval
}
func (p *LogsMobilegatewayParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *LogsMobilegatewayParam) GetSelector() []string {
	return p.Selector
}
func (p *LogsMobilegatewayParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *LogsMobilegatewayParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *LogsMobilegatewayParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *LogsMobilegatewayParam) GetParameters() string {
	return p.Parameters
}
func (p *LogsMobilegatewayParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *LogsMobilegatewayParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *LogsMobilegatewayParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *LogsMobilegatewayParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *LogsMobilegatewayParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *LogsMobilegatewayParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *LogsMobilegatewayParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *LogsMobilegatewayParam) GetId() sacloud.ID {
	return p.Id
}

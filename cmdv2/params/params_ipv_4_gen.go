// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListIpv4Param is input parameters for the sacloud API
type ListIpv4Param struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`

	input Input
}

// NewListIpv4Param return new ListIpv4Param
func NewListIpv4Param(in Input) (*ListIpv4Param, error) {
	v := &ListIpv4Param{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListIpv4Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListIpv4Param) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListIpv4Param) validate() error {
	var errors []error
	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["IPv4"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListIpv4Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv4"]
}

func (p *ListIpv4Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListIpv4Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListIpv4Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListIpv4Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListIpv4Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListIpv4Param) SetName(v []string) {
	p.Name = v
}

func (p *ListIpv4Param) GetName() []string {
	return p.Name
}
func (p *ListIpv4Param) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListIpv4Param) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListIpv4Param) SetFrom(v int) {
	p.From = v
}

func (p *ListIpv4Param) GetFrom() int {
	return p.From
}
func (p *ListIpv4Param) SetMax(v int) {
	p.Max = v
}

func (p *ListIpv4Param) GetMax() int {
	return p.Max
}
func (p *ListIpv4Param) SetSort(v []string) {
	p.Sort = v
}

func (p *ListIpv4Param) GetSort() []string {
	return p.Sort
}
func (p *ListIpv4Param) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListIpv4Param) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListIpv4Param) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListIpv4Param) GetParameters() string {
	return p.Parameters
}
func (p *ListIpv4Param) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListIpv4Param) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListIpv4Param) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListIpv4Param) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListIpv4Param) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListIpv4Param) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListIpv4Param) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListIpv4Param) GetOutputType() string {
	return p.OutputType
}
func (p *ListIpv4Param) SetColumn(v []string) {
	p.Column = v
}

func (p *ListIpv4Param) GetColumn() []string {
	return p.Column
}
func (p *ListIpv4Param) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListIpv4Param) GetQuiet() bool {
	return p.Quiet
}
func (p *ListIpv4Param) SetFormat(v string) {
	p.Format = v
}

func (p *ListIpv4Param) GetFormat() string {
	return p.Format
}
func (p *ListIpv4Param) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListIpv4Param) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListIpv4Param) SetQuery(v string) {
	p.Query = v
}

func (p *ListIpv4Param) GetQuery() string {
	return p.Query
}
func (p *ListIpv4Param) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListIpv4Param) GetQueryFile() string {
	return p.QueryFile
}

// PtrAddIpv4Param is input parameters for the sacloud API
type PtrAddIpv4Param struct {
	Hostname          string   `json:"hostname"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	Parameters        string   `json:"parameters"`
	ParamTemplateFile string   `json:"param-template-file"`
	ParameterFile     string   `json:"parameter-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`

	input Input
}

// NewPtrAddIpv4Param return new PtrAddIpv4Param
func NewPtrAddIpv4Param(in Input) (*PtrAddIpv4Param, error) {
	v := &PtrAddIpv4Param{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PtrAddIpv4Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PtrAddIpv4Param) fillValueToSkeleton() {
	if utils.IsEmpty(p.Hostname) {
		p.Hostname = ""
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *PtrAddIpv4Param) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--hostname", p.Hostname)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PtrAddIpv4Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv4"]
}

func (p *PtrAddIpv4Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ptr-add"]
}

func (p *PtrAddIpv4Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PtrAddIpv4Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PtrAddIpv4Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PtrAddIpv4Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PtrAddIpv4Param) SetHostname(v string) {
	p.Hostname = v
}

func (p *PtrAddIpv4Param) GetHostname() string {
	return p.Hostname
}
func (p *PtrAddIpv4Param) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PtrAddIpv4Param) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PtrAddIpv4Param) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PtrAddIpv4Param) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PtrAddIpv4Param) SetParameters(v string) {
	p.Parameters = v
}

func (p *PtrAddIpv4Param) GetParameters() string {
	return p.Parameters
}
func (p *PtrAddIpv4Param) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PtrAddIpv4Param) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PtrAddIpv4Param) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PtrAddIpv4Param) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PtrAddIpv4Param) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PtrAddIpv4Param) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PtrAddIpv4Param) SetOutputType(v string) {
	p.OutputType = v
}

func (p *PtrAddIpv4Param) GetOutputType() string {
	return p.OutputType
}
func (p *PtrAddIpv4Param) SetColumn(v []string) {
	p.Column = v
}

func (p *PtrAddIpv4Param) GetColumn() []string {
	return p.Column
}
func (p *PtrAddIpv4Param) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *PtrAddIpv4Param) GetQuiet() bool {
	return p.Quiet
}
func (p *PtrAddIpv4Param) SetFormat(v string) {
	p.Format = v
}

func (p *PtrAddIpv4Param) GetFormat() string {
	return p.Format
}
func (p *PtrAddIpv4Param) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *PtrAddIpv4Param) GetFormatFile() string {
	return p.FormatFile
}
func (p *PtrAddIpv4Param) SetQuery(v string) {
	p.Query = v
}

func (p *PtrAddIpv4Param) GetQuery() string {
	return p.Query
}
func (p *PtrAddIpv4Param) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *PtrAddIpv4Param) GetQueryFile() string {
	return p.QueryFile
}

// PtrReadIpv4Param is input parameters for the sacloud API
type PtrReadIpv4Param struct {
	ParamTemplate     string   `json:"param-template"`
	Parameters        string   `json:"parameters"`
	ParamTemplateFile string   `json:"param-template-file"`
	ParameterFile     string   `json:"parameter-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`

	input Input
}

// NewPtrReadIpv4Param return new PtrReadIpv4Param
func NewPtrReadIpv4Param(in Input) (*PtrReadIpv4Param, error) {
	v := &PtrReadIpv4Param{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PtrReadIpv4Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PtrReadIpv4Param) fillValueToSkeleton() {
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *PtrReadIpv4Param) validate() error {
	var errors []error

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PtrReadIpv4Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv4"]
}

func (p *PtrReadIpv4Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ptr-read"]
}

func (p *PtrReadIpv4Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PtrReadIpv4Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PtrReadIpv4Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PtrReadIpv4Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PtrReadIpv4Param) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PtrReadIpv4Param) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PtrReadIpv4Param) SetParameters(v string) {
	p.Parameters = v
}

func (p *PtrReadIpv4Param) GetParameters() string {
	return p.Parameters
}
func (p *PtrReadIpv4Param) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PtrReadIpv4Param) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PtrReadIpv4Param) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PtrReadIpv4Param) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PtrReadIpv4Param) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PtrReadIpv4Param) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PtrReadIpv4Param) SetOutputType(v string) {
	p.OutputType = v
}

func (p *PtrReadIpv4Param) GetOutputType() string {
	return p.OutputType
}
func (p *PtrReadIpv4Param) SetColumn(v []string) {
	p.Column = v
}

func (p *PtrReadIpv4Param) GetColumn() []string {
	return p.Column
}
func (p *PtrReadIpv4Param) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *PtrReadIpv4Param) GetQuiet() bool {
	return p.Quiet
}
func (p *PtrReadIpv4Param) SetFormat(v string) {
	p.Format = v
}

func (p *PtrReadIpv4Param) GetFormat() string {
	return p.Format
}
func (p *PtrReadIpv4Param) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *PtrReadIpv4Param) GetFormatFile() string {
	return p.FormatFile
}
func (p *PtrReadIpv4Param) SetQuery(v string) {
	p.Query = v
}

func (p *PtrReadIpv4Param) GetQuery() string {
	return p.Query
}
func (p *PtrReadIpv4Param) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *PtrReadIpv4Param) GetQueryFile() string {
	return p.QueryFile
}

// PtrUpdateIpv4Param is input parameters for the sacloud API
type PtrUpdateIpv4Param struct {
	Hostname          string   `json:"hostname"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	Parameters        string   `json:"parameters"`
	ParamTemplateFile string   `json:"param-template-file"`
	ParameterFile     string   `json:"parameter-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`

	input Input
}

// NewPtrUpdateIpv4Param return new PtrUpdateIpv4Param
func NewPtrUpdateIpv4Param(in Input) (*PtrUpdateIpv4Param, error) {
	v := &PtrUpdateIpv4Param{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PtrUpdateIpv4Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PtrUpdateIpv4Param) fillValueToSkeleton() {
	if utils.IsEmpty(p.Hostname) {
		p.Hostname = ""
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *PtrUpdateIpv4Param) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--hostname", p.Hostname)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PtrUpdateIpv4Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv4"]
}

func (p *PtrUpdateIpv4Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ptr-update"]
}

func (p *PtrUpdateIpv4Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PtrUpdateIpv4Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PtrUpdateIpv4Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PtrUpdateIpv4Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PtrUpdateIpv4Param) SetHostname(v string) {
	p.Hostname = v
}

func (p *PtrUpdateIpv4Param) GetHostname() string {
	return p.Hostname
}
func (p *PtrUpdateIpv4Param) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PtrUpdateIpv4Param) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PtrUpdateIpv4Param) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PtrUpdateIpv4Param) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PtrUpdateIpv4Param) SetParameters(v string) {
	p.Parameters = v
}

func (p *PtrUpdateIpv4Param) GetParameters() string {
	return p.Parameters
}
func (p *PtrUpdateIpv4Param) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PtrUpdateIpv4Param) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PtrUpdateIpv4Param) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PtrUpdateIpv4Param) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PtrUpdateIpv4Param) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PtrUpdateIpv4Param) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PtrUpdateIpv4Param) SetOutputType(v string) {
	p.OutputType = v
}

func (p *PtrUpdateIpv4Param) GetOutputType() string {
	return p.OutputType
}
func (p *PtrUpdateIpv4Param) SetColumn(v []string) {
	p.Column = v
}

func (p *PtrUpdateIpv4Param) GetColumn() []string {
	return p.Column
}
func (p *PtrUpdateIpv4Param) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *PtrUpdateIpv4Param) GetQuiet() bool {
	return p.Quiet
}
func (p *PtrUpdateIpv4Param) SetFormat(v string) {
	p.Format = v
}

func (p *PtrUpdateIpv4Param) GetFormat() string {
	return p.Format
}
func (p *PtrUpdateIpv4Param) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *PtrUpdateIpv4Param) GetFormatFile() string {
	return p.FormatFile
}
func (p *PtrUpdateIpv4Param) SetQuery(v string) {
	p.Query = v
}

func (p *PtrUpdateIpv4Param) GetQuery() string {
	return p.Query
}
func (p *PtrUpdateIpv4Param) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *PtrUpdateIpv4Param) GetQueryFile() string {
	return p.QueryFile
}

// PtrDeleteIpv4Param is input parameters for the sacloud API
type PtrDeleteIpv4Param struct {
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	Parameters        string   `json:"parameters"`
	ParamTemplateFile string   `json:"param-template-file"`
	ParameterFile     string   `json:"parameter-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`

	input Input
}

// NewPtrDeleteIpv4Param return new PtrDeleteIpv4Param
func NewPtrDeleteIpv4Param(in Input) (*PtrDeleteIpv4Param, error) {
	v := &PtrDeleteIpv4Param{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PtrDeleteIpv4Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PtrDeleteIpv4Param) fillValueToSkeleton() {
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *PtrDeleteIpv4Param) validate() error {
	var errors []error

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PtrDeleteIpv4Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv4"]
}

func (p *PtrDeleteIpv4Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ptr-delete"]
}

func (p *PtrDeleteIpv4Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PtrDeleteIpv4Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PtrDeleteIpv4Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PtrDeleteIpv4Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PtrDeleteIpv4Param) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PtrDeleteIpv4Param) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PtrDeleteIpv4Param) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PtrDeleteIpv4Param) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PtrDeleteIpv4Param) SetParameters(v string) {
	p.Parameters = v
}

func (p *PtrDeleteIpv4Param) GetParameters() string {
	return p.Parameters
}
func (p *PtrDeleteIpv4Param) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PtrDeleteIpv4Param) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PtrDeleteIpv4Param) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PtrDeleteIpv4Param) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PtrDeleteIpv4Param) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PtrDeleteIpv4Param) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PtrDeleteIpv4Param) SetOutputType(v string) {
	p.OutputType = v
}

func (p *PtrDeleteIpv4Param) GetOutputType() string {
	return p.OutputType
}
func (p *PtrDeleteIpv4Param) SetColumn(v []string) {
	p.Column = v
}

func (p *PtrDeleteIpv4Param) GetColumn() []string {
	return p.Column
}
func (p *PtrDeleteIpv4Param) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *PtrDeleteIpv4Param) GetQuiet() bool {
	return p.Quiet
}
func (p *PtrDeleteIpv4Param) SetFormat(v string) {
	p.Format = v
}

func (p *PtrDeleteIpv4Param) GetFormat() string {
	return p.Format
}
func (p *PtrDeleteIpv4Param) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *PtrDeleteIpv4Param) GetFormatFile() string {
	return p.FormatFile
}
func (p *PtrDeleteIpv4Param) SetQuery(v string) {
	p.Query = v
}

func (p *PtrDeleteIpv4Param) GetQuery() string {
	return p.Query
}
func (p *PtrDeleteIpv4Param) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *PtrDeleteIpv4Param) GetQueryFile() string {
	return p.QueryFile
}

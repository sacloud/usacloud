// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListAutobackupParam is input parameters for the sacloud API
type ListAutobackupParam struct {
	Tags []string
	Id   []sacloud.ID
	From int
	Max  int
	Sort []string
	Name []string

	input Input
}

// NewListAutobackupParam return new ListAutobackupParam
func NewListAutobackupParam() *ListAutobackupParam {
	return &ListAutobackupParam{}
}

// Initialize init ListAutobackupParam
func (p *ListAutobackupParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListAutobackupParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListAutobackupParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}

}

func (p *ListAutobackupParam) validate() error {
	var errors []error

	{
		validator := define.Resources["AutoBackup"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["AutoBackup"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListAutobackupParam) ResourceDef() *schema.Resource {
	return define.Resources["AutoBackup"]
}

func (p *ListAutobackupParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListAutobackupParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListAutobackupParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListAutobackupParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListAutobackupParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListAutobackupParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListAutobackupParam) GetTags() []string {
	return p.Tags
}
func (p *ListAutobackupParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListAutobackupParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListAutobackupParam) SetFrom(v int) {
	p.From = v
}

func (p *ListAutobackupParam) GetFrom() int {
	return p.From
}
func (p *ListAutobackupParam) SetMax(v int) {
	p.Max = v
}

func (p *ListAutobackupParam) GetMax() int {
	return p.Max
}
func (p *ListAutobackupParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListAutobackupParam) GetSort() []string {
	return p.Sort
}
func (p *ListAutobackupParam) SetName(v []string) {
	p.Name = v
}

func (p *ListAutobackupParam) GetName() []string {
	return p.Name
}

// CreateAutobackupParam is input parameters for the sacloud API
type CreateAutobackupParam struct {
	Weekdays    []string
	Generation  int
	Name        string
	Description string
	Tags        []string
	IconId      sacloud.ID
	DiskId      sacloud.ID

	input Input
}

// NewCreateAutobackupParam return new CreateAutobackupParam
func NewCreateAutobackupParam() *CreateAutobackupParam {
	return &CreateAutobackupParam{
		Weekdays: []string{"all"}, Generation: 1}
}

// Initialize init CreateAutobackupParam
func (p *CreateAutobackupParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateAutobackupParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateAutobackupParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Weekdays) {
		p.Weekdays = []string{""}
	}
	if utils.IsEmpty(p.Generation) {
		p.Generation = 0
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.DiskId) {
		p.DiskId = sacloud.ID(0)
	}

}

func (p *CreateAutobackupParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--weekdays", p.Weekdays)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["AutoBackup"].Commands["create"].Params["weekdays"].ValidateFunc
		errs := validator("--weekdays", p.Weekdays)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--generation", p.Generation)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["AutoBackup"].Commands["create"].Params["generation"].ValidateFunc
		errs := validator("--generation", p.Generation)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["AutoBackup"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["AutoBackup"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["AutoBackup"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["AutoBackup"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--disk-id", p.DiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["AutoBackup"].Commands["create"].Params["disk-id"].ValidateFunc
		errs := validator("--disk-id", p.DiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateAutobackupParam) ResourceDef() *schema.Resource {
	return define.Resources["AutoBackup"]
}

func (p *CreateAutobackupParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateAutobackupParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateAutobackupParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateAutobackupParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateAutobackupParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateAutobackupParam) SetWeekdays(v []string) {
	p.Weekdays = v
}

func (p *CreateAutobackupParam) GetWeekdays() []string {
	return p.Weekdays
}
func (p *CreateAutobackupParam) SetGeneration(v int) {
	p.Generation = v
}

func (p *CreateAutobackupParam) GetGeneration() int {
	return p.Generation
}
func (p *CreateAutobackupParam) SetName(v string) {
	p.Name = v
}

func (p *CreateAutobackupParam) GetName() string {
	return p.Name
}
func (p *CreateAutobackupParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateAutobackupParam) GetDescription() string {
	return p.Description
}
func (p *CreateAutobackupParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateAutobackupParam) GetTags() []string {
	return p.Tags
}
func (p *CreateAutobackupParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateAutobackupParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateAutobackupParam) SetDiskId(v sacloud.ID) {
	p.DiskId = v
}

func (p *CreateAutobackupParam) GetDiskId() sacloud.ID {
	return p.DiskId
}

// ReadAutobackupParam is input parameters for the sacloud API
type ReadAutobackupParam struct {
	input Input
}

// NewReadAutobackupParam return new ReadAutobackupParam
func NewReadAutobackupParam() *ReadAutobackupParam {
	return &ReadAutobackupParam{}
}

// Initialize init ReadAutobackupParam
func (p *ReadAutobackupParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadAutobackupParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadAutobackupParam) fillValueToSkeleton() {

}

func (p *ReadAutobackupParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadAutobackupParam) ResourceDef() *schema.Resource {
	return define.Resources["AutoBackup"]
}

func (p *ReadAutobackupParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadAutobackupParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadAutobackupParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadAutobackupParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadAutobackupParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdateAutobackupParam is input parameters for the sacloud API
type UpdateAutobackupParam struct {
	Generation  int
	Name        string
	Description string
	Tags        []string
	IconId      sacloud.ID
	Weekdays    []string

	input Input
}

// NewUpdateAutobackupParam return new UpdateAutobackupParam
func NewUpdateAutobackupParam() *UpdateAutobackupParam {
	return &UpdateAutobackupParam{}
}

// Initialize init UpdateAutobackupParam
func (p *UpdateAutobackupParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateAutobackupParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateAutobackupParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Generation) {
		p.Generation = 0
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Weekdays) {
		p.Weekdays = []string{""}
	}

}

func (p *UpdateAutobackupParam) validate() error {
	var errors []error

	{
		validator := define.Resources["AutoBackup"].Commands["update"].Params["generation"].ValidateFunc
		errs := validator("--generation", p.Generation)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["AutoBackup"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["AutoBackup"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["AutoBackup"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["AutoBackup"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["AutoBackup"].Commands["update"].Params["weekdays"].ValidateFunc
		errs := validator("--weekdays", p.Weekdays)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateAutobackupParam) ResourceDef() *schema.Resource {
	return define.Resources["AutoBackup"]
}

func (p *UpdateAutobackupParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateAutobackupParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateAutobackupParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateAutobackupParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateAutobackupParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateAutobackupParam) SetGeneration(v int) {
	p.Generation = v
}

func (p *UpdateAutobackupParam) GetGeneration() int {
	return p.Generation
}
func (p *UpdateAutobackupParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateAutobackupParam) GetName() string {
	return p.Name
}
func (p *UpdateAutobackupParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateAutobackupParam) GetDescription() string {
	return p.Description
}
func (p *UpdateAutobackupParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateAutobackupParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateAutobackupParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateAutobackupParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateAutobackupParam) SetWeekdays(v []string) {
	p.Weekdays = v
}

func (p *UpdateAutobackupParam) GetWeekdays() []string {
	return p.Weekdays
}

// DeleteAutobackupParam is input parameters for the sacloud API
type DeleteAutobackupParam struct {
	input Input
}

// NewDeleteAutobackupParam return new DeleteAutobackupParam
func NewDeleteAutobackupParam() *DeleteAutobackupParam {
	return &DeleteAutobackupParam{}
}

// Initialize init DeleteAutobackupParam
func (p *DeleteAutobackupParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteAutobackupParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteAutobackupParam) fillValueToSkeleton() {

}

func (p *DeleteAutobackupParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteAutobackupParam) ResourceDef() *schema.Resource {
	return define.Resources["AutoBackup"]
}

func (p *DeleteAutobackupParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteAutobackupParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteAutobackupParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteAutobackupParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteAutobackupParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

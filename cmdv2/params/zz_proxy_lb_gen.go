// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListProxyLBParam is input parameters for the sacloud API
type ListProxyLBParam struct {
	Name []string
	Id   []sacloud.ID
	From int
	Max  int
	Sort []string
	Tags []string

	input Input
}

// NewListProxyLBParam return new ListProxyLBParam
func NewListProxyLBParam() *ListProxyLBParam {
	return &ListProxyLBParam{}
}

// Initialize init ListProxyLBParam
func (p *ListProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListProxyLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}

}

func (p *ListProxyLBParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ListProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListProxyLBParam) SetName(v []string) {
	p.Name = v
}

func (p *ListProxyLBParam) GetName() []string {
	return p.Name
}
func (p *ListProxyLBParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListProxyLBParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListProxyLBParam) SetFrom(v int) {
	p.From = v
}

func (p *ListProxyLBParam) GetFrom() int {
	return p.From
}
func (p *ListProxyLBParam) SetMax(v int) {
	p.Max = v
}

func (p *ListProxyLBParam) GetMax() int {
	return p.Max
}
func (p *ListProxyLBParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListProxyLBParam) GetSort() []string {
	return p.Sort
}
func (p *ListProxyLBParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListProxyLBParam) GetTags() []string {
	return p.Tags
}

// CreateProxyLBParam is input parameters for the sacloud API
type CreateProxyLBParam struct {
	SorryServerIpaddress string
	Name                 string
	Tags                 []string
	Plan                 int
	Path                 string
	DelayLoop            int
	SorryServerPort      int
	Timeout              int
	Description          string
	IconId               sacloud.ID
	Protocol             string
	HostHeader           string
	StickySession        bool

	input Input
}

// NewCreateProxyLBParam return new CreateProxyLBParam
func NewCreateProxyLBParam() *CreateProxyLBParam {
	return &CreateProxyLBParam{
		Plan: 1000, Path: "/", DelayLoop: 10, Timeout: 10, Protocol: "tcp"}
}

// Initialize init CreateProxyLBParam
func (p *CreateProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateProxyLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.SorryServerIpaddress) {
		p.SorryServerIpaddress = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Plan) {
		p.Plan = 0
	}
	if utils.IsEmpty(p.Path) {
		p.Path = ""
	}
	if utils.IsEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if utils.IsEmpty(p.SorryServerPort) {
		p.SorryServerPort = 0
	}
	if utils.IsEmpty(p.Timeout) {
		p.Timeout = 0
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.HostHeader) {
		p.HostHeader = ""
	}
	if utils.IsEmpty(p.StickySession) {
		p.StickySession = false
	}

}

func (p *CreateProxyLBParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["sorry-server-port"].ValidateFunc
		errs := validator("--sorry-server-port", p.SorryServerPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["timeout"].ValidateFunc
		errs := validator("--timeout", p.Timeout)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *CreateProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateProxyLBParam) SetSorryServerIpaddress(v string) {
	p.SorryServerIpaddress = v
}

func (p *CreateProxyLBParam) GetSorryServerIpaddress() string {
	return p.SorryServerIpaddress
}
func (p *CreateProxyLBParam) SetName(v string) {
	p.Name = v
}

func (p *CreateProxyLBParam) GetName() string {
	return p.Name
}
func (p *CreateProxyLBParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateProxyLBParam) GetTags() []string {
	return p.Tags
}
func (p *CreateProxyLBParam) SetPlan(v int) {
	p.Plan = v
}

func (p *CreateProxyLBParam) GetPlan() int {
	return p.Plan
}
func (p *CreateProxyLBParam) SetPath(v string) {
	p.Path = v
}

func (p *CreateProxyLBParam) GetPath() string {
	return p.Path
}
func (p *CreateProxyLBParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *CreateProxyLBParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *CreateProxyLBParam) SetSorryServerPort(v int) {
	p.SorryServerPort = v
}

func (p *CreateProxyLBParam) GetSorryServerPort() int {
	return p.SorryServerPort
}
func (p *CreateProxyLBParam) SetTimeout(v int) {
	p.Timeout = v
}

func (p *CreateProxyLBParam) GetTimeout() int {
	return p.Timeout
}
func (p *CreateProxyLBParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateProxyLBParam) GetDescription() string {
	return p.Description
}
func (p *CreateProxyLBParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateProxyLBParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateProxyLBParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *CreateProxyLBParam) GetProtocol() string {
	return p.Protocol
}
func (p *CreateProxyLBParam) SetHostHeader(v string) {
	p.HostHeader = v
}

func (p *CreateProxyLBParam) GetHostHeader() string {
	return p.HostHeader
}
func (p *CreateProxyLBParam) SetStickySession(v bool) {
	p.StickySession = v
}

func (p *CreateProxyLBParam) GetStickySession() bool {
	return p.StickySession
}

// ReadProxyLBParam is input parameters for the sacloud API
type ReadProxyLBParam struct {
	input Input
}

// NewReadProxyLBParam return new ReadProxyLBParam
func NewReadProxyLBParam() *ReadProxyLBParam {
	return &ReadProxyLBParam{}
}

// Initialize init ReadProxyLBParam
func (p *ReadProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadProxyLBParam) fillValueToSkeleton() {

}

func (p *ReadProxyLBParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ReadProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdateProxyLBParam is input parameters for the sacloud API
type UpdateProxyLBParam struct {
	SorryServerPort      int
	Timeout              int
	Name                 string
	IconId               sacloud.ID
	HostHeader           string
	Path                 string
	DelayLoop            int
	StickySession        bool
	SorryServerIpaddress string
	Description          string
	Tags                 []string
	Protocol             string

	input Input
}

// NewUpdateProxyLBParam return new UpdateProxyLBParam
func NewUpdateProxyLBParam() *UpdateProxyLBParam {
	return &UpdateProxyLBParam{
		Timeout: 10}
}

// Initialize init UpdateProxyLBParam
func (p *UpdateProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateProxyLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.SorryServerPort) {
		p.SorryServerPort = 0
	}
	if utils.IsEmpty(p.Timeout) {
		p.Timeout = 0
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.HostHeader) {
		p.HostHeader = ""
	}
	if utils.IsEmpty(p.Path) {
		p.Path = ""
	}
	if utils.IsEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if utils.IsEmpty(p.StickySession) {
		p.StickySession = false
	}
	if utils.IsEmpty(p.SorryServerIpaddress) {
		p.SorryServerIpaddress = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}

}

func (p *UpdateProxyLBParam) validate() error {
	var errors []error

	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["sorry-server-port"].ValidateFunc
		errs := validator("--sorry-server-port", p.SorryServerPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["timeout"].ValidateFunc
		errs := validator("--timeout", p.Timeout)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *UpdateProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateProxyLBParam) SetSorryServerPort(v int) {
	p.SorryServerPort = v
}

func (p *UpdateProxyLBParam) GetSorryServerPort() int {
	return p.SorryServerPort
}
func (p *UpdateProxyLBParam) SetTimeout(v int) {
	p.Timeout = v
}

func (p *UpdateProxyLBParam) GetTimeout() int {
	return p.Timeout
}
func (p *UpdateProxyLBParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateProxyLBParam) GetName() string {
	return p.Name
}
func (p *UpdateProxyLBParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateProxyLBParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateProxyLBParam) SetHostHeader(v string) {
	p.HostHeader = v
}

func (p *UpdateProxyLBParam) GetHostHeader() string {
	return p.HostHeader
}
func (p *UpdateProxyLBParam) SetPath(v string) {
	p.Path = v
}

func (p *UpdateProxyLBParam) GetPath() string {
	return p.Path
}
func (p *UpdateProxyLBParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *UpdateProxyLBParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *UpdateProxyLBParam) SetStickySession(v bool) {
	p.StickySession = v
}

func (p *UpdateProxyLBParam) GetStickySession() bool {
	return p.StickySession
}
func (p *UpdateProxyLBParam) SetSorryServerIpaddress(v string) {
	p.SorryServerIpaddress = v
}

func (p *UpdateProxyLBParam) GetSorryServerIpaddress() string {
	return p.SorryServerIpaddress
}
func (p *UpdateProxyLBParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateProxyLBParam) GetDescription() string {
	return p.Description
}
func (p *UpdateProxyLBParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateProxyLBParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateProxyLBParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *UpdateProxyLBParam) GetProtocol() string {
	return p.Protocol
}

// DeleteProxyLBParam is input parameters for the sacloud API
type DeleteProxyLBParam struct {
	input Input
}

// NewDeleteProxyLBParam return new DeleteProxyLBParam
func NewDeleteProxyLBParam() *DeleteProxyLBParam {
	return &DeleteProxyLBParam{}
}

// Initialize init DeleteProxyLBParam
func (p *DeleteProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteProxyLBParam) fillValueToSkeleton() {

}

func (p *DeleteProxyLBParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *DeleteProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// PlanChangeProxyLBParam is input parameters for the sacloud API
type PlanChangeProxyLBParam struct {
	Plan int

	input Input
}

// NewPlanChangeProxyLBParam return new PlanChangeProxyLBParam
func NewPlanChangeProxyLBParam() *PlanChangeProxyLBParam {
	return &PlanChangeProxyLBParam{}
}

// Initialize init PlanChangeProxyLBParam
func (p *PlanChangeProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PlanChangeProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PlanChangeProxyLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Plan) {
		p.Plan = 0
	}

}

func (p *PlanChangeProxyLBParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["plan-change"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PlanChangeProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *PlanChangeProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["plan-change"]
}

func (p *PlanChangeProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PlanChangeProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PlanChangeProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PlanChangeProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PlanChangeProxyLBParam) SetPlan(v int) {
	p.Plan = v
}

func (p *PlanChangeProxyLBParam) GetPlan() int {
	return p.Plan
}

// BindPortInfoProxyLBParam is input parameters for the sacloud API
type BindPortInfoProxyLBParam struct {
	input Input
}

// NewBindPortInfoProxyLBParam return new BindPortInfoProxyLBParam
func NewBindPortInfoProxyLBParam() *BindPortInfoProxyLBParam {
	return &BindPortInfoProxyLBParam{}
}

// Initialize init BindPortInfoProxyLBParam
func (p *BindPortInfoProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BindPortInfoProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BindPortInfoProxyLBParam) fillValueToSkeleton() {

}

func (p *BindPortInfoProxyLBParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *BindPortInfoProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *BindPortInfoProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["bind-port-info"]
}

func (p *BindPortInfoProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BindPortInfoProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BindPortInfoProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BindPortInfoProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// BindPortAddProxyLBParam is input parameters for the sacloud API
type BindPortAddProxyLBParam struct {
	Mode            string
	Port            int
	RedirectToHttps bool
	SupportHttp2    bool

	input Input
}

// NewBindPortAddProxyLBParam return new BindPortAddProxyLBParam
func NewBindPortAddProxyLBParam() *BindPortAddProxyLBParam {
	return &BindPortAddProxyLBParam{}
}

// Initialize init BindPortAddProxyLBParam
func (p *BindPortAddProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BindPortAddProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BindPortAddProxyLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Mode) {
		p.Mode = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.RedirectToHttps) {
		p.RedirectToHttps = false
	}
	if utils.IsEmpty(p.SupportHttp2) {
		p.SupportHttp2 = false
	}

}

func (p *BindPortAddProxyLBParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--mode", p.Mode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["bind-port-add"].Params["mode"].ValidateFunc
		errs := validator("--mode", p.Mode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["bind-port-add"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *BindPortAddProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *BindPortAddProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["bind-port-add"]
}

func (p *BindPortAddProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BindPortAddProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BindPortAddProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BindPortAddProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *BindPortAddProxyLBParam) SetMode(v string) {
	p.Mode = v
}

func (p *BindPortAddProxyLBParam) GetMode() string {
	return p.Mode
}
func (p *BindPortAddProxyLBParam) SetPort(v int) {
	p.Port = v
}

func (p *BindPortAddProxyLBParam) GetPort() int {
	return p.Port
}
func (p *BindPortAddProxyLBParam) SetRedirectToHttps(v bool) {
	p.RedirectToHttps = v
}

func (p *BindPortAddProxyLBParam) GetRedirectToHttps() bool {
	return p.RedirectToHttps
}
func (p *BindPortAddProxyLBParam) SetSupportHttp2(v bool) {
	p.SupportHttp2 = v
}

func (p *BindPortAddProxyLBParam) GetSupportHttp2() bool {
	return p.SupportHttp2
}

// BindPortUpdateProxyLBParam is input parameters for the sacloud API
type BindPortUpdateProxyLBParam struct {
	Index           int
	Mode            string
	Port            int
	RedirectToHttps bool
	SupportHttp2    bool

	input Input
}

// NewBindPortUpdateProxyLBParam return new BindPortUpdateProxyLBParam
func NewBindPortUpdateProxyLBParam() *BindPortUpdateProxyLBParam {
	return &BindPortUpdateProxyLBParam{}
}

// Initialize init BindPortUpdateProxyLBParam
func (p *BindPortUpdateProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BindPortUpdateProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BindPortUpdateProxyLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Mode) {
		p.Mode = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.RedirectToHttps) {
		p.RedirectToHttps = false
	}
	if utils.IsEmpty(p.SupportHttp2) {
		p.SupportHttp2 = false
	}

}

func (p *BindPortUpdateProxyLBParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["bind-port-update"].Params["mode"].ValidateFunc
		errs := validator("--mode", p.Mode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["bind-port-update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *BindPortUpdateProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *BindPortUpdateProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["bind-port-update"]
}

func (p *BindPortUpdateProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BindPortUpdateProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BindPortUpdateProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BindPortUpdateProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *BindPortUpdateProxyLBParam) SetIndex(v int) {
	p.Index = v
}

func (p *BindPortUpdateProxyLBParam) GetIndex() int {
	return p.Index
}
func (p *BindPortUpdateProxyLBParam) SetMode(v string) {
	p.Mode = v
}

func (p *BindPortUpdateProxyLBParam) GetMode() string {
	return p.Mode
}
func (p *BindPortUpdateProxyLBParam) SetPort(v int) {
	p.Port = v
}

func (p *BindPortUpdateProxyLBParam) GetPort() int {
	return p.Port
}
func (p *BindPortUpdateProxyLBParam) SetRedirectToHttps(v bool) {
	p.RedirectToHttps = v
}

func (p *BindPortUpdateProxyLBParam) GetRedirectToHttps() bool {
	return p.RedirectToHttps
}
func (p *BindPortUpdateProxyLBParam) SetSupportHttp2(v bool) {
	p.SupportHttp2 = v
}

func (p *BindPortUpdateProxyLBParam) GetSupportHttp2() bool {
	return p.SupportHttp2
}

// BindPortDeleteProxyLBParam is input parameters for the sacloud API
type BindPortDeleteProxyLBParam struct {
	Index int

	input Input
}

// NewBindPortDeleteProxyLBParam return new BindPortDeleteProxyLBParam
func NewBindPortDeleteProxyLBParam() *BindPortDeleteProxyLBParam {
	return &BindPortDeleteProxyLBParam{}
}

// Initialize init BindPortDeleteProxyLBParam
func (p *BindPortDeleteProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BindPortDeleteProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BindPortDeleteProxyLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *BindPortDeleteProxyLBParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *BindPortDeleteProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *BindPortDeleteProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["bind-port-delete"]
}

func (p *BindPortDeleteProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BindPortDeleteProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BindPortDeleteProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BindPortDeleteProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *BindPortDeleteProxyLBParam) SetIndex(v int) {
	p.Index = v
}

func (p *BindPortDeleteProxyLBParam) GetIndex() int {
	return p.Index
}

// ResponseHeaderInfoProxyLBParam is input parameters for the sacloud API
type ResponseHeaderInfoProxyLBParam struct {
	PortIndex int

	input Input
}

// NewResponseHeaderInfoProxyLBParam return new ResponseHeaderInfoProxyLBParam
func NewResponseHeaderInfoProxyLBParam() *ResponseHeaderInfoProxyLBParam {
	return &ResponseHeaderInfoProxyLBParam{}
}

// Initialize init ResponseHeaderInfoProxyLBParam
func (p *ResponseHeaderInfoProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResponseHeaderInfoProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResponseHeaderInfoProxyLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.PortIndex) {
		p.PortIndex = 0
	}

}

func (p *ResponseHeaderInfoProxyLBParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--port-index", p.PortIndex)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ResponseHeaderInfoProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ResponseHeaderInfoProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["response-header-info"]
}

func (p *ResponseHeaderInfoProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResponseHeaderInfoProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResponseHeaderInfoProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResponseHeaderInfoProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ResponseHeaderInfoProxyLBParam) SetPortIndex(v int) {
	p.PortIndex = v
}

func (p *ResponseHeaderInfoProxyLBParam) GetPortIndex() int {
	return p.PortIndex
}

// ResponseHeaderAddProxyLBParam is input parameters for the sacloud API
type ResponseHeaderAddProxyLBParam struct {
	PortIndex int
	Header    string
	Value     string

	input Input
}

// NewResponseHeaderAddProxyLBParam return new ResponseHeaderAddProxyLBParam
func NewResponseHeaderAddProxyLBParam() *ResponseHeaderAddProxyLBParam {
	return &ResponseHeaderAddProxyLBParam{}
}

// Initialize init ResponseHeaderAddProxyLBParam
func (p *ResponseHeaderAddProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResponseHeaderAddProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResponseHeaderAddProxyLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.PortIndex) {
		p.PortIndex = 0
	}
	if utils.IsEmpty(p.Header) {
		p.Header = ""
	}
	if utils.IsEmpty(p.Value) {
		p.Value = ""
	}

}

func (p *ResponseHeaderAddProxyLBParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--port-index", p.PortIndex)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--header", p.Header)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--value", p.Value)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ResponseHeaderAddProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ResponseHeaderAddProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["response-header-add"]
}

func (p *ResponseHeaderAddProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResponseHeaderAddProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResponseHeaderAddProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResponseHeaderAddProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ResponseHeaderAddProxyLBParam) SetPortIndex(v int) {
	p.PortIndex = v
}

func (p *ResponseHeaderAddProxyLBParam) GetPortIndex() int {
	return p.PortIndex
}
func (p *ResponseHeaderAddProxyLBParam) SetHeader(v string) {
	p.Header = v
}

func (p *ResponseHeaderAddProxyLBParam) GetHeader() string {
	return p.Header
}
func (p *ResponseHeaderAddProxyLBParam) SetValue(v string) {
	p.Value = v
}

func (p *ResponseHeaderAddProxyLBParam) GetValue() string {
	return p.Value
}

// ResponseHeaderUpdateProxyLBParam is input parameters for the sacloud API
type ResponseHeaderUpdateProxyLBParam struct {
	Index     int
	PortIndex int
	Header    string
	Value     string

	input Input
}

// NewResponseHeaderUpdateProxyLBParam return new ResponseHeaderUpdateProxyLBParam
func NewResponseHeaderUpdateProxyLBParam() *ResponseHeaderUpdateProxyLBParam {
	return &ResponseHeaderUpdateProxyLBParam{}
}

// Initialize init ResponseHeaderUpdateProxyLBParam
func (p *ResponseHeaderUpdateProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResponseHeaderUpdateProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResponseHeaderUpdateProxyLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.PortIndex) {
		p.PortIndex = 0
	}
	if utils.IsEmpty(p.Header) {
		p.Header = ""
	}
	if utils.IsEmpty(p.Value) {
		p.Value = ""
	}

}

func (p *ResponseHeaderUpdateProxyLBParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--port-index", p.PortIndex)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ResponseHeaderUpdateProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ResponseHeaderUpdateProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["response-header-update"]
}

func (p *ResponseHeaderUpdateProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResponseHeaderUpdateProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResponseHeaderUpdateProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResponseHeaderUpdateProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ResponseHeaderUpdateProxyLBParam) SetIndex(v int) {
	p.Index = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetIndex() int {
	return p.Index
}
func (p *ResponseHeaderUpdateProxyLBParam) SetPortIndex(v int) {
	p.PortIndex = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetPortIndex() int {
	return p.PortIndex
}
func (p *ResponseHeaderUpdateProxyLBParam) SetHeader(v string) {
	p.Header = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetHeader() string {
	return p.Header
}
func (p *ResponseHeaderUpdateProxyLBParam) SetValue(v string) {
	p.Value = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetValue() string {
	return p.Value
}

// ResponseHeaderDeleteProxyLBParam is input parameters for the sacloud API
type ResponseHeaderDeleteProxyLBParam struct {
	Index     int
	PortIndex int

	input Input
}

// NewResponseHeaderDeleteProxyLBParam return new ResponseHeaderDeleteProxyLBParam
func NewResponseHeaderDeleteProxyLBParam() *ResponseHeaderDeleteProxyLBParam {
	return &ResponseHeaderDeleteProxyLBParam{}
}

// Initialize init ResponseHeaderDeleteProxyLBParam
func (p *ResponseHeaderDeleteProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResponseHeaderDeleteProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResponseHeaderDeleteProxyLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.PortIndex) {
		p.PortIndex = 0
	}

}

func (p *ResponseHeaderDeleteProxyLBParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--port-index", p.PortIndex)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ResponseHeaderDeleteProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ResponseHeaderDeleteProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["response-header-delete"]
}

func (p *ResponseHeaderDeleteProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResponseHeaderDeleteProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResponseHeaderDeleteProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResponseHeaderDeleteProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ResponseHeaderDeleteProxyLBParam) SetIndex(v int) {
	p.Index = v
}

func (p *ResponseHeaderDeleteProxyLBParam) GetIndex() int {
	return p.Index
}
func (p *ResponseHeaderDeleteProxyLBParam) SetPortIndex(v int) {
	p.PortIndex = v
}

func (p *ResponseHeaderDeleteProxyLBParam) GetPortIndex() int {
	return p.PortIndex
}

// ACMEInfoProxyLBParam is input parameters for the sacloud API
type ACMEInfoProxyLBParam struct {
	input Input
}

// NewACMEInfoProxyLBParam return new ACMEInfoProxyLBParam
func NewACMEInfoProxyLBParam() *ACMEInfoProxyLBParam {
	return &ACMEInfoProxyLBParam{}
}

// Initialize init ACMEInfoProxyLBParam
func (p *ACMEInfoProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ACMEInfoProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ACMEInfoProxyLBParam) fillValueToSkeleton() {

}

func (p *ACMEInfoProxyLBParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ACMEInfoProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ACMEInfoProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["acme-info"]
}

func (p *ACMEInfoProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ACMEInfoProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ACMEInfoProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ACMEInfoProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ACMESettingProxyLBParam is input parameters for the sacloud API
type ACMESettingProxyLBParam struct {
	AcceptTos  bool
	CommonName string
	Disable    bool

	input Input
}

// NewACMESettingProxyLBParam return new ACMESettingProxyLBParam
func NewACMESettingProxyLBParam() *ACMESettingProxyLBParam {
	return &ACMESettingProxyLBParam{}
}

// Initialize init ACMESettingProxyLBParam
func (p *ACMESettingProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ACMESettingProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ACMESettingProxyLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.AcceptTos) {
		p.AcceptTos = false
	}
	if utils.IsEmpty(p.CommonName) {
		p.CommonName = ""
	}
	if utils.IsEmpty(p.Disable) {
		p.Disable = false
	}

}

func (p *ACMESettingProxyLBParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ACMESettingProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ACMESettingProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["acme-setting"]
}

func (p *ACMESettingProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ACMESettingProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ACMESettingProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ACMESettingProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ACMESettingProxyLBParam) SetAcceptTos(v bool) {
	p.AcceptTos = v
}

func (p *ACMESettingProxyLBParam) GetAcceptTos() bool {
	return p.AcceptTos
}
func (p *ACMESettingProxyLBParam) SetCommonName(v string) {
	p.CommonName = v
}

func (p *ACMESettingProxyLBParam) GetCommonName() string {
	return p.CommonName
}
func (p *ACMESettingProxyLBParam) SetDisable(v bool) {
	p.Disable = v
}

func (p *ACMESettingProxyLBParam) GetDisable() bool {
	return p.Disable
}

// ACMERenewProxyLBParam is input parameters for the sacloud API
type ACMERenewProxyLBParam struct {
	input Input
}

// NewACMERenewProxyLBParam return new ACMERenewProxyLBParam
func NewACMERenewProxyLBParam() *ACMERenewProxyLBParam {
	return &ACMERenewProxyLBParam{}
}

// Initialize init ACMERenewProxyLBParam
func (p *ACMERenewProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ACMERenewProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ACMERenewProxyLBParam) fillValueToSkeleton() {

}

func (p *ACMERenewProxyLBParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ACMERenewProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ACMERenewProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["acme-renew"]
}

func (p *ACMERenewProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ACMERenewProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ACMERenewProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ACMERenewProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ServerInfoProxyLBParam is input parameters for the sacloud API
type ServerInfoProxyLBParam struct {
	input Input
}

// NewServerInfoProxyLBParam return new ServerInfoProxyLBParam
func NewServerInfoProxyLBParam() *ServerInfoProxyLBParam {
	return &ServerInfoProxyLBParam{}
}

// Initialize init ServerInfoProxyLBParam
func (p *ServerInfoProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerInfoProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerInfoProxyLBParam) fillValueToSkeleton() {

}

func (p *ServerInfoProxyLBParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ServerInfoProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ServerInfoProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-info"]
}

func (p *ServerInfoProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerInfoProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerInfoProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerInfoProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ServerAddProxyLBParam is input parameters for the sacloud API
type ServerAddProxyLBParam struct {
	Ipaddress string
	Disabled  bool
	Port      int

	input Input
}

// NewServerAddProxyLBParam return new ServerAddProxyLBParam
func NewServerAddProxyLBParam() *ServerAddProxyLBParam {
	return &ServerAddProxyLBParam{}
}

// Initialize init ServerAddProxyLBParam
func (p *ServerAddProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerAddProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerAddProxyLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}

}

func (p *ServerAddProxyLBParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["server-add"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["server-add"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerAddProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ServerAddProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-add"]
}

func (p *ServerAddProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerAddProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerAddProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerAddProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerAddProxyLBParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerAddProxyLBParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerAddProxyLBParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *ServerAddProxyLBParam) GetDisabled() bool {
	return p.Disabled
}
func (p *ServerAddProxyLBParam) SetPort(v int) {
	p.Port = v
}

func (p *ServerAddProxyLBParam) GetPort() int {
	return p.Port
}

// ServerUpdateProxyLBParam is input parameters for the sacloud API
type ServerUpdateProxyLBParam struct {
	Index     int
	Ipaddress string
	Disabled  bool
	Port      int

	input Input
}

// NewServerUpdateProxyLBParam return new ServerUpdateProxyLBParam
func NewServerUpdateProxyLBParam() *ServerUpdateProxyLBParam {
	return &ServerUpdateProxyLBParam{}
}

// Initialize init ServerUpdateProxyLBParam
func (p *ServerUpdateProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerUpdateProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerUpdateProxyLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}

}

func (p *ServerUpdateProxyLBParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["server-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["server-update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerUpdateProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ServerUpdateProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-update"]
}

func (p *ServerUpdateProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerUpdateProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerUpdateProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerUpdateProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerUpdateProxyLBParam) SetIndex(v int) {
	p.Index = v
}

func (p *ServerUpdateProxyLBParam) GetIndex() int {
	return p.Index
}
func (p *ServerUpdateProxyLBParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerUpdateProxyLBParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerUpdateProxyLBParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *ServerUpdateProxyLBParam) GetDisabled() bool {
	return p.Disabled
}
func (p *ServerUpdateProxyLBParam) SetPort(v int) {
	p.Port = v
}

func (p *ServerUpdateProxyLBParam) GetPort() int {
	return p.Port
}

// ServerDeleteProxyLBParam is input parameters for the sacloud API
type ServerDeleteProxyLBParam struct {
	Index int

	input Input
}

// NewServerDeleteProxyLBParam return new ServerDeleteProxyLBParam
func NewServerDeleteProxyLBParam() *ServerDeleteProxyLBParam {
	return &ServerDeleteProxyLBParam{}
}

// Initialize init ServerDeleteProxyLBParam
func (p *ServerDeleteProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerDeleteProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerDeleteProxyLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *ServerDeleteProxyLBParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerDeleteProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ServerDeleteProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-delete"]
}

func (p *ServerDeleteProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerDeleteProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerDeleteProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerDeleteProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerDeleteProxyLBParam) SetIndex(v int) {
	p.Index = v
}

func (p *ServerDeleteProxyLBParam) GetIndex() int {
	return p.Index
}

// CertificateInfoProxyLBParam is input parameters for the sacloud API
type CertificateInfoProxyLBParam struct {
	input Input
}

// NewCertificateInfoProxyLBParam return new CertificateInfoProxyLBParam
func NewCertificateInfoProxyLBParam() *CertificateInfoProxyLBParam {
	return &CertificateInfoProxyLBParam{}
}

// Initialize init CertificateInfoProxyLBParam
func (p *CertificateInfoProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CertificateInfoProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CertificateInfoProxyLBParam) fillValueToSkeleton() {

}

func (p *CertificateInfoProxyLBParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *CertificateInfoProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *CertificateInfoProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["certificate-info"]
}

func (p *CertificateInfoProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CertificateInfoProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CertificateInfoProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CertificateInfoProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// CertificateAddProxyLBParam is input parameters for the sacloud API
type CertificateAddProxyLBParam struct {
	ServerCertificate       string
	IntermediateCertificate string
	PrivateKey              string

	input Input
}

// NewCertificateAddProxyLBParam return new CertificateAddProxyLBParam
func NewCertificateAddProxyLBParam() *CertificateAddProxyLBParam {
	return &CertificateAddProxyLBParam{}
}

// Initialize init CertificateAddProxyLBParam
func (p *CertificateAddProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CertificateAddProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CertificateAddProxyLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.ServerCertificate) {
		p.ServerCertificate = ""
	}
	if utils.IsEmpty(p.IntermediateCertificate) {
		p.IntermediateCertificate = ""
	}
	if utils.IsEmpty(p.PrivateKey) {
		p.PrivateKey = ""
	}

}

func (p *CertificateAddProxyLBParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--server-certificate", p.ServerCertificate)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--private-key", p.PrivateKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CertificateAddProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *CertificateAddProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["certificate-add"]
}

func (p *CertificateAddProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CertificateAddProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CertificateAddProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CertificateAddProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CertificateAddProxyLBParam) SetServerCertificate(v string) {
	p.ServerCertificate = v
}

func (p *CertificateAddProxyLBParam) GetServerCertificate() string {
	return p.ServerCertificate
}
func (p *CertificateAddProxyLBParam) SetIntermediateCertificate(v string) {
	p.IntermediateCertificate = v
}

func (p *CertificateAddProxyLBParam) GetIntermediateCertificate() string {
	return p.IntermediateCertificate
}
func (p *CertificateAddProxyLBParam) SetPrivateKey(v string) {
	p.PrivateKey = v
}

func (p *CertificateAddProxyLBParam) GetPrivateKey() string {
	return p.PrivateKey
}

// CertificateUpdateProxyLBParam is input parameters for the sacloud API
type CertificateUpdateProxyLBParam struct {
	ServerCertificate       string
	IntermediateCertificate string
	PrivateKey              string

	input Input
}

// NewCertificateUpdateProxyLBParam return new CertificateUpdateProxyLBParam
func NewCertificateUpdateProxyLBParam() *CertificateUpdateProxyLBParam {
	return &CertificateUpdateProxyLBParam{}
}

// Initialize init CertificateUpdateProxyLBParam
func (p *CertificateUpdateProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CertificateUpdateProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CertificateUpdateProxyLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.ServerCertificate) {
		p.ServerCertificate = ""
	}
	if utils.IsEmpty(p.IntermediateCertificate) {
		p.IntermediateCertificate = ""
	}
	if utils.IsEmpty(p.PrivateKey) {
		p.PrivateKey = ""
	}

}

func (p *CertificateUpdateProxyLBParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *CertificateUpdateProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *CertificateUpdateProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["certificate-update"]
}

func (p *CertificateUpdateProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CertificateUpdateProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CertificateUpdateProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CertificateUpdateProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CertificateUpdateProxyLBParam) SetServerCertificate(v string) {
	p.ServerCertificate = v
}

func (p *CertificateUpdateProxyLBParam) GetServerCertificate() string {
	return p.ServerCertificate
}
func (p *CertificateUpdateProxyLBParam) SetIntermediateCertificate(v string) {
	p.IntermediateCertificate = v
}

func (p *CertificateUpdateProxyLBParam) GetIntermediateCertificate() string {
	return p.IntermediateCertificate
}
func (p *CertificateUpdateProxyLBParam) SetPrivateKey(v string) {
	p.PrivateKey = v
}

func (p *CertificateUpdateProxyLBParam) GetPrivateKey() string {
	return p.PrivateKey
}

// CertificateDeleteProxyLBParam is input parameters for the sacloud API
type CertificateDeleteProxyLBParam struct {
	input Input
}

// NewCertificateDeleteProxyLBParam return new CertificateDeleteProxyLBParam
func NewCertificateDeleteProxyLBParam() *CertificateDeleteProxyLBParam {
	return &CertificateDeleteProxyLBParam{}
}

// Initialize init CertificateDeleteProxyLBParam
func (p *CertificateDeleteProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CertificateDeleteProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CertificateDeleteProxyLBParam) fillValueToSkeleton() {

}

func (p *CertificateDeleteProxyLBParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *CertificateDeleteProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *CertificateDeleteProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["certificate-delete"]
}

func (p *CertificateDeleteProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CertificateDeleteProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CertificateDeleteProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CertificateDeleteProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// MonitorProxyLBParam is input parameters for the sacloud API
type MonitorProxyLBParam struct {
	KeyFormat string
	Start     string
	End       string

	input Input
}

// NewMonitorProxyLBParam return new MonitorProxyLBParam
func NewMonitorProxyLBParam() *MonitorProxyLBParam {
	return &MonitorProxyLBParam{
		KeyFormat: "sakuracloud.proxylb.{{.ID}}"}
}

// Initialize init MonitorProxyLBParam
func (p *MonitorProxyLBParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorProxyLBParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorProxyLBParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}

}

func (p *MonitorProxyLBParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["monitor"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["monitor"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorProxyLBParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *MonitorProxyLBParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor"]
}

func (p *MonitorProxyLBParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorProxyLBParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorProxyLBParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorProxyLBParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorProxyLBParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorProxyLBParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorProxyLBParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorProxyLBParam) GetStart() string {
	return p.Start
}
func (p *MonitorProxyLBParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorProxyLBParam) GetEnd() string {
	return p.End
}

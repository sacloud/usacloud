// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListProxylbParam is input parameters for the sacloud API
type ListProxylbParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Tags              []string     `json:"tags"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`

	input Input
}

// NewListProxylbParam return new ListProxylbParam
func NewListProxylbParam(in Input) (*ListProxylbParam, error) {
	v := &ListProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListProxylbParam) validate() error {
	var errors []error
	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ListProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListProxylbParam) SetName(v []string) {
	p.Name = v
}

func (p *ListProxylbParam) GetName() []string {
	return p.Name
}
func (p *ListProxylbParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListProxylbParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListProxylbParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListProxylbParam) GetTags() []string {
	return p.Tags
}
func (p *ListProxylbParam) SetFrom(v int) {
	p.From = v
}

func (p *ListProxylbParam) GetFrom() int {
	return p.From
}
func (p *ListProxylbParam) SetMax(v int) {
	p.Max = v
}

func (p *ListProxylbParam) GetMax() int {
	return p.Max
}
func (p *ListProxylbParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListProxylbParam) GetSort() []string {
	return p.Sort
}
func (p *ListProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *ListProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *ListProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListProxylbParam) GetFormat() string {
	return p.Format
}
func (p *ListProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListProxylbParam) GetQuery() string {
	return p.Query
}
func (p *ListProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListProxylbParam) GetQueryFile() string {
	return p.QueryFile
}

// CreateProxylbParam is input parameters for the sacloud API
type CreateProxylbParam struct {
	Plan                 int        `json:"plan"`
	Protocol             string     `json:"protocol"`
	HostHeader           string     `json:"host-header"`
	Path                 string     `json:"path"`
	DelayLoop            int        `json:"delay-loop"`
	StickySession        bool       `json:"sticky-session"`
	SorryServerIpaddress string     `json:"sorry-server-ipaddress"`
	SorryServerPort      int        `json:"sorry-server-port"`
	Timeout              int        `json:"timeout"`
	Name                 string     `json:"name"`
	Description          string     `json:"description"`
	Tags                 []string   `json:"tags"`
	IconId               sacloud.ID `json:"icon-id"`
	Assumeyes            bool       `json:"assumeyes"`
	ParamTemplate        string     `json:"param-template"`
	Parameters           string     `json:"parameters"`
	ParamTemplateFile    string     `json:"param-template-file"`
	ParameterFile        string     `json:"parameter-file"`
	GenerateSkeleton     bool       `json:"generate-skeleton"`
	OutputType           string     `json:"output-type"`
	Column               []string   `json:"column"`
	Quiet                bool       `json:"quiet"`
	Format               string     `json:"format"`
	FormatFile           string     `json:"format-file"`
	Query                string     `json:"query"`
	QueryFile            string     `json:"query-file"`

	input Input
}

// NewCreateProxylbParam return new CreateProxylbParam
func NewCreateProxylbParam(in Input) (*CreateProxylbParam, error) {
	v := &CreateProxylbParam{
		Plan: 1000, Protocol: "tcp", Path: "/", DelayLoop: 10, Timeout: 10, input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Plan) {
		p.Plan = 0
	}
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.HostHeader) {
		p.HostHeader = ""
	}
	if utils.IsEmpty(p.Path) {
		p.Path = ""
	}
	if utils.IsEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if utils.IsEmpty(p.StickySession) {
		p.StickySession = false
	}
	if utils.IsEmpty(p.SorryServerIpaddress) {
		p.SorryServerIpaddress = ""
	}
	if utils.IsEmpty(p.SorryServerPort) {
		p.SorryServerPort = 0
	}
	if utils.IsEmpty(p.Timeout) {
		p.Timeout = 0
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *CreateProxylbParam) validate() error {
	var errors []error
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["sorry-server-port"].ValidateFunc
		errs := validator("--sorry-server-port", p.SorryServerPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["timeout"].ValidateFunc
		errs := validator("--timeout", p.Timeout)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *CreateProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateProxylbParam) SetPlan(v int) {
	p.Plan = v
}

func (p *CreateProxylbParam) GetPlan() int {
	return p.Plan
}
func (p *CreateProxylbParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *CreateProxylbParam) GetProtocol() string {
	return p.Protocol
}
func (p *CreateProxylbParam) SetHostHeader(v string) {
	p.HostHeader = v
}

func (p *CreateProxylbParam) GetHostHeader() string {
	return p.HostHeader
}
func (p *CreateProxylbParam) SetPath(v string) {
	p.Path = v
}

func (p *CreateProxylbParam) GetPath() string {
	return p.Path
}
func (p *CreateProxylbParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *CreateProxylbParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *CreateProxylbParam) SetStickySession(v bool) {
	p.StickySession = v
}

func (p *CreateProxylbParam) GetStickySession() bool {
	return p.StickySession
}
func (p *CreateProxylbParam) SetSorryServerIpaddress(v string) {
	p.SorryServerIpaddress = v
}

func (p *CreateProxylbParam) GetSorryServerIpaddress() string {
	return p.SorryServerIpaddress
}
func (p *CreateProxylbParam) SetSorryServerPort(v int) {
	p.SorryServerPort = v
}

func (p *CreateProxylbParam) GetSorryServerPort() int {
	return p.SorryServerPort
}
func (p *CreateProxylbParam) SetTimeout(v int) {
	p.Timeout = v
}

func (p *CreateProxylbParam) GetTimeout() int {
	return p.Timeout
}
func (p *CreateProxylbParam) SetName(v string) {
	p.Name = v
}

func (p *CreateProxylbParam) GetName() string {
	return p.Name
}
func (p *CreateProxylbParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateProxylbParam) GetDescription() string {
	return p.Description
}
func (p *CreateProxylbParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateProxylbParam) GetTags() []string {
	return p.Tags
}
func (p *CreateProxylbParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateProxylbParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateProxylbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateProxylbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *CreateProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateProxylbParam) GetFormat() string {
	return p.Format
}
func (p *CreateProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateProxylbParam) GetQuery() string {
	return p.Query
}
func (p *CreateProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateProxylbParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadProxylbParam is input parameters for the sacloud API
type ReadProxylbParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewReadProxylbParam return new ReadProxylbParam
func NewReadProxylbParam(in Input) (*ReadProxylbParam, error) {
	v := &ReadProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReadProxylbParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ReadProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ReadProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReadProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *ReadProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadProxylbParam) GetFormat() string {
	return p.Format
}
func (p *ReadProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadProxylbParam) GetQuery() string {
	return p.Query
}
func (p *ReadProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// UpdateProxylbParam is input parameters for the sacloud API
type UpdateProxylbParam struct {
	Protocol             string     `json:"protocol"`
	HostHeader           string     `json:"host-header"`
	Path                 string     `json:"path"`
	DelayLoop            int        `json:"delay-loop"`
	StickySession        bool       `json:"sticky-session"`
	SorryServerIpaddress string     `json:"sorry-server-ipaddress"`
	SorryServerPort      int        `json:"sorry-server-port"`
	Timeout              int        `json:"timeout"`
	Selector             []string   `json:"selector"`
	Name                 string     `json:"name"`
	Description          string     `json:"description"`
	Tags                 []string   `json:"tags"`
	IconId               sacloud.ID `json:"icon-id"`
	Assumeyes            bool       `json:"assumeyes"`
	ParamTemplate        string     `json:"param-template"`
	Parameters           string     `json:"parameters"`
	ParamTemplateFile    string     `json:"param-template-file"`
	ParameterFile        string     `json:"parameter-file"`
	GenerateSkeleton     bool       `json:"generate-skeleton"`
	OutputType           string     `json:"output-type"`
	Column               []string   `json:"column"`
	Quiet                bool       `json:"quiet"`
	Format               string     `json:"format"`
	FormatFile           string     `json:"format-file"`
	Query                string     `json:"query"`
	QueryFile            string     `json:"query-file"`
	Id                   sacloud.ID `json:"id"`

	input Input
}

// NewUpdateProxylbParam return new UpdateProxylbParam
func NewUpdateProxylbParam(in Input) (*UpdateProxylbParam, error) {
	v := &UpdateProxylbParam{
		Timeout: 10, input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.HostHeader) {
		p.HostHeader = ""
	}
	if utils.IsEmpty(p.Path) {
		p.Path = ""
	}
	if utils.IsEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if utils.IsEmpty(p.StickySession) {
		p.StickySession = false
	}
	if utils.IsEmpty(p.SorryServerIpaddress) {
		p.SorryServerIpaddress = ""
	}
	if utils.IsEmpty(p.SorryServerPort) {
		p.SorryServerPort = 0
	}
	if utils.IsEmpty(p.Timeout) {
		p.Timeout = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UpdateProxylbParam) validate() error {
	var errors []error
	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["sorry-server-port"].ValidateFunc
		errs := validator("--sorry-server-port", p.SorryServerPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["timeout"].ValidateFunc
		errs := validator("--timeout", p.Timeout)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *UpdateProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateProxylbParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *UpdateProxylbParam) GetProtocol() string {
	return p.Protocol
}
func (p *UpdateProxylbParam) SetHostHeader(v string) {
	p.HostHeader = v
}

func (p *UpdateProxylbParam) GetHostHeader() string {
	return p.HostHeader
}
func (p *UpdateProxylbParam) SetPath(v string) {
	p.Path = v
}

func (p *UpdateProxylbParam) GetPath() string {
	return p.Path
}
func (p *UpdateProxylbParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *UpdateProxylbParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *UpdateProxylbParam) SetStickySession(v bool) {
	p.StickySession = v
}

func (p *UpdateProxylbParam) GetStickySession() bool {
	return p.StickySession
}
func (p *UpdateProxylbParam) SetSorryServerIpaddress(v string) {
	p.SorryServerIpaddress = v
}

func (p *UpdateProxylbParam) GetSorryServerIpaddress() string {
	return p.SorryServerIpaddress
}
func (p *UpdateProxylbParam) SetSorryServerPort(v int) {
	p.SorryServerPort = v
}

func (p *UpdateProxylbParam) GetSorryServerPort() int {
	return p.SorryServerPort
}
func (p *UpdateProxylbParam) SetTimeout(v int) {
	p.Timeout = v
}

func (p *UpdateProxylbParam) GetTimeout() int {
	return p.Timeout
}
func (p *UpdateProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateProxylbParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateProxylbParam) GetName() string {
	return p.Name
}
func (p *UpdateProxylbParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateProxylbParam) GetDescription() string {
	return p.Description
}
func (p *UpdateProxylbParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateProxylbParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateProxylbParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateProxylbParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateProxylbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateProxylbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateProxylbParam) GetFormat() string {
	return p.Format
}
func (p *UpdateProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateProxylbParam) GetQuery() string {
	return p.Query
}
func (p *UpdateProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteProxylbParam is input parameters for the sacloud API
type DeleteProxylbParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewDeleteProxylbParam return new DeleteProxylbParam
func NewDeleteProxylbParam(in Input) (*DeleteProxylbParam, error) {
	v := &DeleteProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DeleteProxylbParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DeleteProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *DeleteProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteProxylbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteProxylbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteProxylbParam) GetFormat() string {
	return p.Format
}
func (p *DeleteProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteProxylbParam) GetQuery() string {
	return p.Query
}
func (p *DeleteProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// PlanChangeProxylbParam is input parameters for the sacloud API
type PlanChangeProxylbParam struct {
	Plan              int        `json:"plan"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewPlanChangeProxylbParam return new PlanChangeProxylbParam
func NewPlanChangeProxylbParam(in Input) (*PlanChangeProxylbParam, error) {
	v := &PlanChangeProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PlanChangeProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PlanChangeProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Plan) {
		p.Plan = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *PlanChangeProxylbParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["plan-change"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PlanChangeProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *PlanChangeProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["plan-change"]
}

func (p *PlanChangeProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PlanChangeProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PlanChangeProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PlanChangeProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PlanChangeProxylbParam) SetPlan(v int) {
	p.Plan = v
}

func (p *PlanChangeProxylbParam) GetPlan() int {
	return p.Plan
}
func (p *PlanChangeProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *PlanChangeProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *PlanChangeProxylbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PlanChangeProxylbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PlanChangeProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PlanChangeProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PlanChangeProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *PlanChangeProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *PlanChangeProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PlanChangeProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PlanChangeProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PlanChangeProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PlanChangeProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PlanChangeProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PlanChangeProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *PlanChangeProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *PlanChangeProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *PlanChangeProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *PlanChangeProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *PlanChangeProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *PlanChangeProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *PlanChangeProxylbParam) GetFormat() string {
	return p.Format
}
func (p *PlanChangeProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *PlanChangeProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *PlanChangeProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *PlanChangeProxylbParam) GetQuery() string {
	return p.Query
}
func (p *PlanChangeProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *PlanChangeProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *PlanChangeProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *PlanChangeProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// BindPortInfoProxylbParam is input parameters for the sacloud API
type BindPortInfoProxylbParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewBindPortInfoProxylbParam return new BindPortInfoProxylbParam
func NewBindPortInfoProxylbParam(in Input) (*BindPortInfoProxylbParam, error) {
	v := &BindPortInfoProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BindPortInfoProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BindPortInfoProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *BindPortInfoProxylbParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *BindPortInfoProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *BindPortInfoProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["bind-port-info"]
}

func (p *BindPortInfoProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BindPortInfoProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BindPortInfoProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BindPortInfoProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *BindPortInfoProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *BindPortInfoProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *BindPortInfoProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BindPortInfoProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BindPortInfoProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *BindPortInfoProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *BindPortInfoProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BindPortInfoProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BindPortInfoProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *BindPortInfoProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *BindPortInfoProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BindPortInfoProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BindPortInfoProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *BindPortInfoProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *BindPortInfoProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *BindPortInfoProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *BindPortInfoProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *BindPortInfoProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *BindPortInfoProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *BindPortInfoProxylbParam) GetFormat() string {
	return p.Format
}
func (p *BindPortInfoProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *BindPortInfoProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *BindPortInfoProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *BindPortInfoProxylbParam) GetQuery() string {
	return p.Query
}
func (p *BindPortInfoProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *BindPortInfoProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *BindPortInfoProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *BindPortInfoProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// BindPortAddProxylbParam is input parameters for the sacloud API
type BindPortAddProxylbParam struct {
	Mode              string     `json:"mode"`
	Port              int        `json:"port"`
	RedirectToHttps   bool       `json:"redirect-to-https"`
	SupportHttp2      bool       `json:"support-http-2"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewBindPortAddProxylbParam return new BindPortAddProxylbParam
func NewBindPortAddProxylbParam(in Input) (*BindPortAddProxylbParam, error) {
	v := &BindPortAddProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BindPortAddProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BindPortAddProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Mode) {
		p.Mode = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.RedirectToHttps) {
		p.RedirectToHttps = false
	}
	if utils.IsEmpty(p.SupportHttp2) {
		p.SupportHttp2 = false
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *BindPortAddProxylbParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--mode", p.Mode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["bind-port-add"].Params["mode"].ValidateFunc
		errs := validator("--mode", p.Mode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["bind-port-add"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *BindPortAddProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *BindPortAddProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["bind-port-add"]
}

func (p *BindPortAddProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BindPortAddProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BindPortAddProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BindPortAddProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *BindPortAddProxylbParam) SetMode(v string) {
	p.Mode = v
}

func (p *BindPortAddProxylbParam) GetMode() string {
	return p.Mode
}
func (p *BindPortAddProxylbParam) SetPort(v int) {
	p.Port = v
}

func (p *BindPortAddProxylbParam) GetPort() int {
	return p.Port
}
func (p *BindPortAddProxylbParam) SetRedirectToHttps(v bool) {
	p.RedirectToHttps = v
}

func (p *BindPortAddProxylbParam) GetRedirectToHttps() bool {
	return p.RedirectToHttps
}
func (p *BindPortAddProxylbParam) SetSupportHttp2(v bool) {
	p.SupportHttp2 = v
}

func (p *BindPortAddProxylbParam) GetSupportHttp2() bool {
	return p.SupportHttp2
}
func (p *BindPortAddProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *BindPortAddProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *BindPortAddProxylbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BindPortAddProxylbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BindPortAddProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BindPortAddProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BindPortAddProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *BindPortAddProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *BindPortAddProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BindPortAddProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BindPortAddProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *BindPortAddProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *BindPortAddProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BindPortAddProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BindPortAddProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *BindPortAddProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *BindPortAddProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *BindPortAddProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *BindPortAddProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *BindPortAddProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *BindPortAddProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *BindPortAddProxylbParam) GetFormat() string {
	return p.Format
}
func (p *BindPortAddProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *BindPortAddProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *BindPortAddProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *BindPortAddProxylbParam) GetQuery() string {
	return p.Query
}
func (p *BindPortAddProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *BindPortAddProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *BindPortAddProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *BindPortAddProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// BindPortUpdateProxylbParam is input parameters for the sacloud API
type BindPortUpdateProxylbParam struct {
	Index             int        `json:"index"`
	Mode              string     `json:"mode"`
	Port              int        `json:"port"`
	RedirectToHttps   bool       `json:"redirect-to-https"`
	SupportHttp2      bool       `json:"support-http-2"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewBindPortUpdateProxylbParam return new BindPortUpdateProxylbParam
func NewBindPortUpdateProxylbParam(in Input) (*BindPortUpdateProxylbParam, error) {
	v := &BindPortUpdateProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BindPortUpdateProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BindPortUpdateProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Mode) {
		p.Mode = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.RedirectToHttps) {
		p.RedirectToHttps = false
	}
	if utils.IsEmpty(p.SupportHttp2) {
		p.SupportHttp2 = false
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *BindPortUpdateProxylbParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["bind-port-update"].Params["mode"].ValidateFunc
		errs := validator("--mode", p.Mode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["bind-port-update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *BindPortUpdateProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *BindPortUpdateProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["bind-port-update"]
}

func (p *BindPortUpdateProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BindPortUpdateProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BindPortUpdateProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BindPortUpdateProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *BindPortUpdateProxylbParam) SetIndex(v int) {
	p.Index = v
}

func (p *BindPortUpdateProxylbParam) GetIndex() int {
	return p.Index
}
func (p *BindPortUpdateProxylbParam) SetMode(v string) {
	p.Mode = v
}

func (p *BindPortUpdateProxylbParam) GetMode() string {
	return p.Mode
}
func (p *BindPortUpdateProxylbParam) SetPort(v int) {
	p.Port = v
}

func (p *BindPortUpdateProxylbParam) GetPort() int {
	return p.Port
}
func (p *BindPortUpdateProxylbParam) SetRedirectToHttps(v bool) {
	p.RedirectToHttps = v
}

func (p *BindPortUpdateProxylbParam) GetRedirectToHttps() bool {
	return p.RedirectToHttps
}
func (p *BindPortUpdateProxylbParam) SetSupportHttp2(v bool) {
	p.SupportHttp2 = v
}

func (p *BindPortUpdateProxylbParam) GetSupportHttp2() bool {
	return p.SupportHttp2
}
func (p *BindPortUpdateProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *BindPortUpdateProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *BindPortUpdateProxylbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BindPortUpdateProxylbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BindPortUpdateProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BindPortUpdateProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BindPortUpdateProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *BindPortUpdateProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *BindPortUpdateProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BindPortUpdateProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BindPortUpdateProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *BindPortUpdateProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *BindPortUpdateProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BindPortUpdateProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BindPortUpdateProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *BindPortUpdateProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *BindPortUpdateProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *BindPortUpdateProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *BindPortUpdateProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *BindPortUpdateProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *BindPortUpdateProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *BindPortUpdateProxylbParam) GetFormat() string {
	return p.Format
}
func (p *BindPortUpdateProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *BindPortUpdateProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *BindPortUpdateProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *BindPortUpdateProxylbParam) GetQuery() string {
	return p.Query
}
func (p *BindPortUpdateProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *BindPortUpdateProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *BindPortUpdateProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *BindPortUpdateProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// BindPortDeleteProxylbParam is input parameters for the sacloud API
type BindPortDeleteProxylbParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewBindPortDeleteProxylbParam return new BindPortDeleteProxylbParam
func NewBindPortDeleteProxylbParam(in Input) (*BindPortDeleteProxylbParam, error) {
	v := &BindPortDeleteProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BindPortDeleteProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BindPortDeleteProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *BindPortDeleteProxylbParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *BindPortDeleteProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *BindPortDeleteProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["bind-port-delete"]
}

func (p *BindPortDeleteProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BindPortDeleteProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BindPortDeleteProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BindPortDeleteProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *BindPortDeleteProxylbParam) SetIndex(v int) {
	p.Index = v
}

func (p *BindPortDeleteProxylbParam) GetIndex() int {
	return p.Index
}
func (p *BindPortDeleteProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *BindPortDeleteProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *BindPortDeleteProxylbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BindPortDeleteProxylbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BindPortDeleteProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BindPortDeleteProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BindPortDeleteProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *BindPortDeleteProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *BindPortDeleteProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BindPortDeleteProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BindPortDeleteProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *BindPortDeleteProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *BindPortDeleteProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BindPortDeleteProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BindPortDeleteProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *BindPortDeleteProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *BindPortDeleteProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *BindPortDeleteProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *BindPortDeleteProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *BindPortDeleteProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *BindPortDeleteProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *BindPortDeleteProxylbParam) GetFormat() string {
	return p.Format
}
func (p *BindPortDeleteProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *BindPortDeleteProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *BindPortDeleteProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *BindPortDeleteProxylbParam) GetQuery() string {
	return p.Query
}
func (p *BindPortDeleteProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *BindPortDeleteProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *BindPortDeleteProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *BindPortDeleteProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// ResponseHeaderInfoProxylbParam is input parameters for the sacloud API
type ResponseHeaderInfoProxylbParam struct {
	PortIndex         int        `json:"port-index"`
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewResponseHeaderInfoProxylbParam return new ResponseHeaderInfoProxylbParam
func NewResponseHeaderInfoProxylbParam(in Input) (*ResponseHeaderInfoProxylbParam, error) {
	v := &ResponseHeaderInfoProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResponseHeaderInfoProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResponseHeaderInfoProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.PortIndex) {
		p.PortIndex = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ResponseHeaderInfoProxylbParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--port-index", p.PortIndex)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ResponseHeaderInfoProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ResponseHeaderInfoProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["response-header-info"]
}

func (p *ResponseHeaderInfoProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResponseHeaderInfoProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResponseHeaderInfoProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResponseHeaderInfoProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ResponseHeaderInfoProxylbParam) SetPortIndex(v int) {
	p.PortIndex = v
}

func (p *ResponseHeaderInfoProxylbParam) GetPortIndex() int {
	return p.PortIndex
}
func (p *ResponseHeaderInfoProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ResponseHeaderInfoProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *ResponseHeaderInfoProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ResponseHeaderInfoProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ResponseHeaderInfoProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ResponseHeaderInfoProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *ResponseHeaderInfoProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ResponseHeaderInfoProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ResponseHeaderInfoProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ResponseHeaderInfoProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ResponseHeaderInfoProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ResponseHeaderInfoProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ResponseHeaderInfoProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ResponseHeaderInfoProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *ResponseHeaderInfoProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ResponseHeaderInfoProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *ResponseHeaderInfoProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ResponseHeaderInfoProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ResponseHeaderInfoProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *ResponseHeaderInfoProxylbParam) GetFormat() string {
	return p.Format
}
func (p *ResponseHeaderInfoProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ResponseHeaderInfoProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ResponseHeaderInfoProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *ResponseHeaderInfoProxylbParam) GetQuery() string {
	return p.Query
}
func (p *ResponseHeaderInfoProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ResponseHeaderInfoProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ResponseHeaderInfoProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ResponseHeaderInfoProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// ResponseHeaderAddProxylbParam is input parameters for the sacloud API
type ResponseHeaderAddProxylbParam struct {
	PortIndex         int        `json:"port-index"`
	Header            string     `json:"header"`
	Value             string     `json:"value"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewResponseHeaderAddProxylbParam return new ResponseHeaderAddProxylbParam
func NewResponseHeaderAddProxylbParam(in Input) (*ResponseHeaderAddProxylbParam, error) {
	v := &ResponseHeaderAddProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResponseHeaderAddProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResponseHeaderAddProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.PortIndex) {
		p.PortIndex = 0
	}
	if utils.IsEmpty(p.Header) {
		p.Header = ""
	}
	if utils.IsEmpty(p.Value) {
		p.Value = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ResponseHeaderAddProxylbParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--port-index", p.PortIndex)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--header", p.Header)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--value", p.Value)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ResponseHeaderAddProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ResponseHeaderAddProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["response-header-add"]
}

func (p *ResponseHeaderAddProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResponseHeaderAddProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResponseHeaderAddProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResponseHeaderAddProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ResponseHeaderAddProxylbParam) SetPortIndex(v int) {
	p.PortIndex = v
}

func (p *ResponseHeaderAddProxylbParam) GetPortIndex() int {
	return p.PortIndex
}
func (p *ResponseHeaderAddProxylbParam) SetHeader(v string) {
	p.Header = v
}

func (p *ResponseHeaderAddProxylbParam) GetHeader() string {
	return p.Header
}
func (p *ResponseHeaderAddProxylbParam) SetValue(v string) {
	p.Value = v
}

func (p *ResponseHeaderAddProxylbParam) GetValue() string {
	return p.Value
}
func (p *ResponseHeaderAddProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ResponseHeaderAddProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *ResponseHeaderAddProxylbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ResponseHeaderAddProxylbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ResponseHeaderAddProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ResponseHeaderAddProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ResponseHeaderAddProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ResponseHeaderAddProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *ResponseHeaderAddProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ResponseHeaderAddProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ResponseHeaderAddProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ResponseHeaderAddProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ResponseHeaderAddProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ResponseHeaderAddProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ResponseHeaderAddProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ResponseHeaderAddProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *ResponseHeaderAddProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ResponseHeaderAddProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *ResponseHeaderAddProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ResponseHeaderAddProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ResponseHeaderAddProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *ResponseHeaderAddProxylbParam) GetFormat() string {
	return p.Format
}
func (p *ResponseHeaderAddProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ResponseHeaderAddProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ResponseHeaderAddProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *ResponseHeaderAddProxylbParam) GetQuery() string {
	return p.Query
}
func (p *ResponseHeaderAddProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ResponseHeaderAddProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ResponseHeaderAddProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ResponseHeaderAddProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// ResponseHeaderUpdateProxylbParam is input parameters for the sacloud API
type ResponseHeaderUpdateProxylbParam struct {
	Index             int        `json:"index"`
	PortIndex         int        `json:"port-index"`
	Header            string     `json:"header"`
	Value             string     `json:"value"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewResponseHeaderUpdateProxylbParam return new ResponseHeaderUpdateProxylbParam
func NewResponseHeaderUpdateProxylbParam(in Input) (*ResponseHeaderUpdateProxylbParam, error) {
	v := &ResponseHeaderUpdateProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResponseHeaderUpdateProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResponseHeaderUpdateProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.PortIndex) {
		p.PortIndex = 0
	}
	if utils.IsEmpty(p.Header) {
		p.Header = ""
	}
	if utils.IsEmpty(p.Value) {
		p.Value = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ResponseHeaderUpdateProxylbParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--port-index", p.PortIndex)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ResponseHeaderUpdateProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ResponseHeaderUpdateProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["response-header-update"]
}

func (p *ResponseHeaderUpdateProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResponseHeaderUpdateProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResponseHeaderUpdateProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResponseHeaderUpdateProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ResponseHeaderUpdateProxylbParam) SetIndex(v int) {
	p.Index = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetIndex() int {
	return p.Index
}
func (p *ResponseHeaderUpdateProxylbParam) SetPortIndex(v int) {
	p.PortIndex = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetPortIndex() int {
	return p.PortIndex
}
func (p *ResponseHeaderUpdateProxylbParam) SetHeader(v string) {
	p.Header = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetHeader() string {
	return p.Header
}
func (p *ResponseHeaderUpdateProxylbParam) SetValue(v string) {
	p.Value = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetValue() string {
	return p.Value
}
func (p *ResponseHeaderUpdateProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *ResponseHeaderUpdateProxylbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ResponseHeaderUpdateProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ResponseHeaderUpdateProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *ResponseHeaderUpdateProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ResponseHeaderUpdateProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ResponseHeaderUpdateProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ResponseHeaderUpdateProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *ResponseHeaderUpdateProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *ResponseHeaderUpdateProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ResponseHeaderUpdateProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetFormat() string {
	return p.Format
}
func (p *ResponseHeaderUpdateProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ResponseHeaderUpdateProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetQuery() string {
	return p.Query
}
func (p *ResponseHeaderUpdateProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ResponseHeaderUpdateProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// ResponseHeaderDeleteProxylbParam is input parameters for the sacloud API
type ResponseHeaderDeleteProxylbParam struct {
	Index             int        `json:"index"`
	PortIndex         int        `json:"port-index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewResponseHeaderDeleteProxylbParam return new ResponseHeaderDeleteProxylbParam
func NewResponseHeaderDeleteProxylbParam(in Input) (*ResponseHeaderDeleteProxylbParam, error) {
	v := &ResponseHeaderDeleteProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResponseHeaderDeleteProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResponseHeaderDeleteProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.PortIndex) {
		p.PortIndex = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ResponseHeaderDeleteProxylbParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--port-index", p.PortIndex)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ResponseHeaderDeleteProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ResponseHeaderDeleteProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["response-header-delete"]
}

func (p *ResponseHeaderDeleteProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResponseHeaderDeleteProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResponseHeaderDeleteProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResponseHeaderDeleteProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ResponseHeaderDeleteProxylbParam) SetIndex(v int) {
	p.Index = v
}

func (p *ResponseHeaderDeleteProxylbParam) GetIndex() int {
	return p.Index
}
func (p *ResponseHeaderDeleteProxylbParam) SetPortIndex(v int) {
	p.PortIndex = v
}

func (p *ResponseHeaderDeleteProxylbParam) GetPortIndex() int {
	return p.PortIndex
}
func (p *ResponseHeaderDeleteProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ResponseHeaderDeleteProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *ResponseHeaderDeleteProxylbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ResponseHeaderDeleteProxylbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ResponseHeaderDeleteProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ResponseHeaderDeleteProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ResponseHeaderDeleteProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ResponseHeaderDeleteProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *ResponseHeaderDeleteProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ResponseHeaderDeleteProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ResponseHeaderDeleteProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ResponseHeaderDeleteProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ResponseHeaderDeleteProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ResponseHeaderDeleteProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ResponseHeaderDeleteProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ResponseHeaderDeleteProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *ResponseHeaderDeleteProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ResponseHeaderDeleteProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *ResponseHeaderDeleteProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ResponseHeaderDeleteProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ResponseHeaderDeleteProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *ResponseHeaderDeleteProxylbParam) GetFormat() string {
	return p.Format
}
func (p *ResponseHeaderDeleteProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ResponseHeaderDeleteProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ResponseHeaderDeleteProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *ResponseHeaderDeleteProxylbParam) GetQuery() string {
	return p.Query
}
func (p *ResponseHeaderDeleteProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ResponseHeaderDeleteProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ResponseHeaderDeleteProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ResponseHeaderDeleteProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// AcmeInfoProxylbParam is input parameters for the sacloud API
type AcmeInfoProxylbParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewAcmeInfoProxylbParam return new AcmeInfoProxylbParam
func NewAcmeInfoProxylbParam(in Input) (*AcmeInfoProxylbParam, error) {
	v := &AcmeInfoProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *AcmeInfoProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *AcmeInfoProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *AcmeInfoProxylbParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *AcmeInfoProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *AcmeInfoProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["acme-info"]
}

func (p *AcmeInfoProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *AcmeInfoProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *AcmeInfoProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *AcmeInfoProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *AcmeInfoProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *AcmeInfoProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *AcmeInfoProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *AcmeInfoProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *AcmeInfoProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *AcmeInfoProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *AcmeInfoProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *AcmeInfoProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *AcmeInfoProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *AcmeInfoProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *AcmeInfoProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *AcmeInfoProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *AcmeInfoProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *AcmeInfoProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *AcmeInfoProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *AcmeInfoProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *AcmeInfoProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *AcmeInfoProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *AcmeInfoProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *AcmeInfoProxylbParam) GetFormat() string {
	return p.Format
}
func (p *AcmeInfoProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *AcmeInfoProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *AcmeInfoProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *AcmeInfoProxylbParam) GetQuery() string {
	return p.Query
}
func (p *AcmeInfoProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *AcmeInfoProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *AcmeInfoProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *AcmeInfoProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// AcmeSettingProxylbParam is input parameters for the sacloud API
type AcmeSettingProxylbParam struct {
	AcceptTos         bool       `json:"accept-tos"`
	CommonName        string     `json:"common-name"`
	Disable           bool       `json:"disable"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewAcmeSettingProxylbParam return new AcmeSettingProxylbParam
func NewAcmeSettingProxylbParam(in Input) (*AcmeSettingProxylbParam, error) {
	v := &AcmeSettingProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *AcmeSettingProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *AcmeSettingProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.AcceptTos) {
		p.AcceptTos = false
	}
	if utils.IsEmpty(p.CommonName) {
		p.CommonName = ""
	}
	if utils.IsEmpty(p.Disable) {
		p.Disable = false
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *AcmeSettingProxylbParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *AcmeSettingProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *AcmeSettingProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["acme-setting"]
}

func (p *AcmeSettingProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *AcmeSettingProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *AcmeSettingProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *AcmeSettingProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *AcmeSettingProxylbParam) SetAcceptTos(v bool) {
	p.AcceptTos = v
}

func (p *AcmeSettingProxylbParam) GetAcceptTos() bool {
	return p.AcceptTos
}
func (p *AcmeSettingProxylbParam) SetCommonName(v string) {
	p.CommonName = v
}

func (p *AcmeSettingProxylbParam) GetCommonName() string {
	return p.CommonName
}
func (p *AcmeSettingProxylbParam) SetDisable(v bool) {
	p.Disable = v
}

func (p *AcmeSettingProxylbParam) GetDisable() bool {
	return p.Disable
}
func (p *AcmeSettingProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *AcmeSettingProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *AcmeSettingProxylbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *AcmeSettingProxylbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *AcmeSettingProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *AcmeSettingProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *AcmeSettingProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *AcmeSettingProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *AcmeSettingProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *AcmeSettingProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *AcmeSettingProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *AcmeSettingProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *AcmeSettingProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *AcmeSettingProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *AcmeSettingProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *AcmeSettingProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *AcmeSettingProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *AcmeSettingProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *AcmeSettingProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *AcmeSettingProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *AcmeSettingProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *AcmeSettingProxylbParam) GetFormat() string {
	return p.Format
}
func (p *AcmeSettingProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *AcmeSettingProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *AcmeSettingProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *AcmeSettingProxylbParam) GetQuery() string {
	return p.Query
}
func (p *AcmeSettingProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *AcmeSettingProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *AcmeSettingProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *AcmeSettingProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// AcmeRenewProxylbParam is input parameters for the sacloud API
type AcmeRenewProxylbParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewAcmeRenewProxylbParam return new AcmeRenewProxylbParam
func NewAcmeRenewProxylbParam(in Input) (*AcmeRenewProxylbParam, error) {
	v := &AcmeRenewProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *AcmeRenewProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *AcmeRenewProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *AcmeRenewProxylbParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *AcmeRenewProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *AcmeRenewProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["acme-renew"]
}

func (p *AcmeRenewProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *AcmeRenewProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *AcmeRenewProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *AcmeRenewProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *AcmeRenewProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *AcmeRenewProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *AcmeRenewProxylbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *AcmeRenewProxylbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *AcmeRenewProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *AcmeRenewProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *AcmeRenewProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *AcmeRenewProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *AcmeRenewProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *AcmeRenewProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *AcmeRenewProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *AcmeRenewProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *AcmeRenewProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *AcmeRenewProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *AcmeRenewProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *AcmeRenewProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// ServerInfoProxylbParam is input parameters for the sacloud API
type ServerInfoProxylbParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewServerInfoProxylbParam return new ServerInfoProxylbParam
func NewServerInfoProxylbParam(in Input) (*ServerInfoProxylbParam, error) {
	v := &ServerInfoProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerInfoProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerInfoProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ServerInfoProxylbParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerInfoProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ServerInfoProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-info"]
}

func (p *ServerInfoProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerInfoProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerInfoProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerInfoProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerInfoProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerInfoProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerInfoProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerInfoProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerInfoProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerInfoProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerInfoProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerInfoProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerInfoProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerInfoProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerInfoProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerInfoProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerInfoProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerInfoProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerInfoProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerInfoProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *ServerInfoProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerInfoProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerInfoProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerInfoProxylbParam) GetFormat() string {
	return p.Format
}
func (p *ServerInfoProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerInfoProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerInfoProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerInfoProxylbParam) GetQuery() string {
	return p.Query
}
func (p *ServerInfoProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerInfoProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerInfoProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerInfoProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// ServerAddProxylbParam is input parameters for the sacloud API
type ServerAddProxylbParam struct {
	Ipaddress         string     `json:"ipaddress"`
	Disabled          bool       `json:"disabled"`
	Port              int        `json:"port"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewServerAddProxylbParam return new ServerAddProxylbParam
func NewServerAddProxylbParam(in Input) (*ServerAddProxylbParam, error) {
	v := &ServerAddProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerAddProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerAddProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ServerAddProxylbParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["server-add"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["server-add"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerAddProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ServerAddProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-add"]
}

func (p *ServerAddProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerAddProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerAddProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerAddProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerAddProxylbParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerAddProxylbParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerAddProxylbParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *ServerAddProxylbParam) GetDisabled() bool {
	return p.Disabled
}
func (p *ServerAddProxylbParam) SetPort(v int) {
	p.Port = v
}

func (p *ServerAddProxylbParam) GetPort() int {
	return p.Port
}
func (p *ServerAddProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerAddProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerAddProxylbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerAddProxylbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerAddProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerAddProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerAddProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerAddProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerAddProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerAddProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerAddProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerAddProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerAddProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerAddProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerAddProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerAddProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerAddProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerAddProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *ServerAddProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerAddProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerAddProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerAddProxylbParam) GetFormat() string {
	return p.Format
}
func (p *ServerAddProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerAddProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerAddProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerAddProxylbParam) GetQuery() string {
	return p.Query
}
func (p *ServerAddProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerAddProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerAddProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerAddProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// ServerUpdateProxylbParam is input parameters for the sacloud API
type ServerUpdateProxylbParam struct {
	Index             int        `json:"index"`
	Ipaddress         string     `json:"ipaddress"`
	Disabled          bool       `json:"disabled"`
	Port              int        `json:"port"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewServerUpdateProxylbParam return new ServerUpdateProxylbParam
func NewServerUpdateProxylbParam(in Input) (*ServerUpdateProxylbParam, error) {
	v := &ServerUpdateProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerUpdateProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerUpdateProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ServerUpdateProxylbParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["server-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["server-update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerUpdateProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ServerUpdateProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-update"]
}

func (p *ServerUpdateProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerUpdateProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerUpdateProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerUpdateProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerUpdateProxylbParam) SetIndex(v int) {
	p.Index = v
}

func (p *ServerUpdateProxylbParam) GetIndex() int {
	return p.Index
}
func (p *ServerUpdateProxylbParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerUpdateProxylbParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerUpdateProxylbParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *ServerUpdateProxylbParam) GetDisabled() bool {
	return p.Disabled
}
func (p *ServerUpdateProxylbParam) SetPort(v int) {
	p.Port = v
}

func (p *ServerUpdateProxylbParam) GetPort() int {
	return p.Port
}
func (p *ServerUpdateProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerUpdateProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerUpdateProxylbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerUpdateProxylbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerUpdateProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerUpdateProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerUpdateProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerUpdateProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerUpdateProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerUpdateProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerUpdateProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerUpdateProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerUpdateProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerUpdateProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerUpdateProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerUpdateProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerUpdateProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerUpdateProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *ServerUpdateProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerUpdateProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerUpdateProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerUpdateProxylbParam) GetFormat() string {
	return p.Format
}
func (p *ServerUpdateProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerUpdateProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerUpdateProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerUpdateProxylbParam) GetQuery() string {
	return p.Query
}
func (p *ServerUpdateProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerUpdateProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerUpdateProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerUpdateProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// ServerDeleteProxylbParam is input parameters for the sacloud API
type ServerDeleteProxylbParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewServerDeleteProxylbParam return new ServerDeleteProxylbParam
func NewServerDeleteProxylbParam(in Input) (*ServerDeleteProxylbParam, error) {
	v := &ServerDeleteProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerDeleteProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerDeleteProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ServerDeleteProxylbParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerDeleteProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ServerDeleteProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-delete"]
}

func (p *ServerDeleteProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerDeleteProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerDeleteProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerDeleteProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerDeleteProxylbParam) SetIndex(v int) {
	p.Index = v
}

func (p *ServerDeleteProxylbParam) GetIndex() int {
	return p.Index
}
func (p *ServerDeleteProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerDeleteProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerDeleteProxylbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerDeleteProxylbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerDeleteProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerDeleteProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerDeleteProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerDeleteProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerDeleteProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerDeleteProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerDeleteProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerDeleteProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerDeleteProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerDeleteProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerDeleteProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerDeleteProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerDeleteProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerDeleteProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *ServerDeleteProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerDeleteProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerDeleteProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerDeleteProxylbParam) GetFormat() string {
	return p.Format
}
func (p *ServerDeleteProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerDeleteProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerDeleteProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerDeleteProxylbParam) GetQuery() string {
	return p.Query
}
func (p *ServerDeleteProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerDeleteProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerDeleteProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerDeleteProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// CertificateInfoProxylbParam is input parameters for the sacloud API
type CertificateInfoProxylbParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewCertificateInfoProxylbParam return new CertificateInfoProxylbParam
func NewCertificateInfoProxylbParam(in Input) (*CertificateInfoProxylbParam, error) {
	v := &CertificateInfoProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CertificateInfoProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CertificateInfoProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *CertificateInfoProxylbParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CertificateInfoProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *CertificateInfoProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["certificate-info"]
}

func (p *CertificateInfoProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CertificateInfoProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CertificateInfoProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CertificateInfoProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CertificateInfoProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *CertificateInfoProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *CertificateInfoProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CertificateInfoProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CertificateInfoProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CertificateInfoProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *CertificateInfoProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CertificateInfoProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CertificateInfoProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CertificateInfoProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CertificateInfoProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CertificateInfoProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CertificateInfoProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CertificateInfoProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *CertificateInfoProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CertificateInfoProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *CertificateInfoProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CertificateInfoProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CertificateInfoProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *CertificateInfoProxylbParam) GetFormat() string {
	return p.Format
}
func (p *CertificateInfoProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CertificateInfoProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CertificateInfoProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *CertificateInfoProxylbParam) GetQuery() string {
	return p.Query
}
func (p *CertificateInfoProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CertificateInfoProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *CertificateInfoProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *CertificateInfoProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// CertificateAddProxylbParam is input parameters for the sacloud API
type CertificateAddProxylbParam struct {
	ServerCertificate       string     `json:"server-certificate"`
	IntermediateCertificate string     `json:"intermediate-certificate"`
	PrivateKey              string     `json:"private-key"`
	Selector                []string   `json:"selector"`
	Assumeyes               bool       `json:"assumeyes"`
	ParamTemplate           string     `json:"param-template"`
	Parameters              string     `json:"parameters"`
	ParamTemplateFile       string     `json:"param-template-file"`
	ParameterFile           string     `json:"parameter-file"`
	GenerateSkeleton        bool       `json:"generate-skeleton"`
	OutputType              string     `json:"output-type"`
	Column                  []string   `json:"column"`
	Quiet                   bool       `json:"quiet"`
	Format                  string     `json:"format"`
	FormatFile              string     `json:"format-file"`
	Query                   string     `json:"query"`
	QueryFile               string     `json:"query-file"`
	Id                      sacloud.ID `json:"id"`

	input Input
}

// NewCertificateAddProxylbParam return new CertificateAddProxylbParam
func NewCertificateAddProxylbParam(in Input) (*CertificateAddProxylbParam, error) {
	v := &CertificateAddProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CertificateAddProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CertificateAddProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.ServerCertificate) {
		p.ServerCertificate = ""
	}
	if utils.IsEmpty(p.IntermediateCertificate) {
		p.IntermediateCertificate = ""
	}
	if utils.IsEmpty(p.PrivateKey) {
		p.PrivateKey = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *CertificateAddProxylbParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--server-certificate", p.ServerCertificate)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--private-key", p.PrivateKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CertificateAddProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *CertificateAddProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["certificate-add"]
}

func (p *CertificateAddProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CertificateAddProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CertificateAddProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CertificateAddProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CertificateAddProxylbParam) SetServerCertificate(v string) {
	p.ServerCertificate = v
}

func (p *CertificateAddProxylbParam) GetServerCertificate() string {
	return p.ServerCertificate
}
func (p *CertificateAddProxylbParam) SetIntermediateCertificate(v string) {
	p.IntermediateCertificate = v
}

func (p *CertificateAddProxylbParam) GetIntermediateCertificate() string {
	return p.IntermediateCertificate
}
func (p *CertificateAddProxylbParam) SetPrivateKey(v string) {
	p.PrivateKey = v
}

func (p *CertificateAddProxylbParam) GetPrivateKey() string {
	return p.PrivateKey
}
func (p *CertificateAddProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *CertificateAddProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *CertificateAddProxylbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CertificateAddProxylbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CertificateAddProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CertificateAddProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CertificateAddProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CertificateAddProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *CertificateAddProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CertificateAddProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CertificateAddProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CertificateAddProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CertificateAddProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CertificateAddProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CertificateAddProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CertificateAddProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *CertificateAddProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CertificateAddProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *CertificateAddProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CertificateAddProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CertificateAddProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *CertificateAddProxylbParam) GetFormat() string {
	return p.Format
}
func (p *CertificateAddProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CertificateAddProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CertificateAddProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *CertificateAddProxylbParam) GetQuery() string {
	return p.Query
}
func (p *CertificateAddProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CertificateAddProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *CertificateAddProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *CertificateAddProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// CertificateUpdateProxylbParam is input parameters for the sacloud API
type CertificateUpdateProxylbParam struct {
	ServerCertificate       string     `json:"server-certificate"`
	IntermediateCertificate string     `json:"intermediate-certificate"`
	PrivateKey              string     `json:"private-key"`
	Selector                []string   `json:"selector"`
	Assumeyes               bool       `json:"assumeyes"`
	ParamTemplate           string     `json:"param-template"`
	Parameters              string     `json:"parameters"`
	ParamTemplateFile       string     `json:"param-template-file"`
	ParameterFile           string     `json:"parameter-file"`
	GenerateSkeleton        bool       `json:"generate-skeleton"`
	OutputType              string     `json:"output-type"`
	Column                  []string   `json:"column"`
	Quiet                   bool       `json:"quiet"`
	Format                  string     `json:"format"`
	FormatFile              string     `json:"format-file"`
	Query                   string     `json:"query"`
	QueryFile               string     `json:"query-file"`
	Id                      sacloud.ID `json:"id"`

	input Input
}

// NewCertificateUpdateProxylbParam return new CertificateUpdateProxylbParam
func NewCertificateUpdateProxylbParam(in Input) (*CertificateUpdateProxylbParam, error) {
	v := &CertificateUpdateProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CertificateUpdateProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CertificateUpdateProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.ServerCertificate) {
		p.ServerCertificate = ""
	}
	if utils.IsEmpty(p.IntermediateCertificate) {
		p.IntermediateCertificate = ""
	}
	if utils.IsEmpty(p.PrivateKey) {
		p.PrivateKey = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *CertificateUpdateProxylbParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CertificateUpdateProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *CertificateUpdateProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["certificate-update"]
}

func (p *CertificateUpdateProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CertificateUpdateProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CertificateUpdateProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CertificateUpdateProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CertificateUpdateProxylbParam) SetServerCertificate(v string) {
	p.ServerCertificate = v
}

func (p *CertificateUpdateProxylbParam) GetServerCertificate() string {
	return p.ServerCertificate
}
func (p *CertificateUpdateProxylbParam) SetIntermediateCertificate(v string) {
	p.IntermediateCertificate = v
}

func (p *CertificateUpdateProxylbParam) GetIntermediateCertificate() string {
	return p.IntermediateCertificate
}
func (p *CertificateUpdateProxylbParam) SetPrivateKey(v string) {
	p.PrivateKey = v
}

func (p *CertificateUpdateProxylbParam) GetPrivateKey() string {
	return p.PrivateKey
}
func (p *CertificateUpdateProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *CertificateUpdateProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *CertificateUpdateProxylbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CertificateUpdateProxylbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CertificateUpdateProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CertificateUpdateProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CertificateUpdateProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CertificateUpdateProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *CertificateUpdateProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CertificateUpdateProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CertificateUpdateProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CertificateUpdateProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CertificateUpdateProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CertificateUpdateProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CertificateUpdateProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CertificateUpdateProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *CertificateUpdateProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CertificateUpdateProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *CertificateUpdateProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CertificateUpdateProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CertificateUpdateProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *CertificateUpdateProxylbParam) GetFormat() string {
	return p.Format
}
func (p *CertificateUpdateProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CertificateUpdateProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CertificateUpdateProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *CertificateUpdateProxylbParam) GetQuery() string {
	return p.Query
}
func (p *CertificateUpdateProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CertificateUpdateProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *CertificateUpdateProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *CertificateUpdateProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// CertificateDeleteProxylbParam is input parameters for the sacloud API
type CertificateDeleteProxylbParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewCertificateDeleteProxylbParam return new CertificateDeleteProxylbParam
func NewCertificateDeleteProxylbParam(in Input) (*CertificateDeleteProxylbParam, error) {
	v := &CertificateDeleteProxylbParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CertificateDeleteProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CertificateDeleteProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *CertificateDeleteProxylbParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CertificateDeleteProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *CertificateDeleteProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["certificate-delete"]
}

func (p *CertificateDeleteProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CertificateDeleteProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CertificateDeleteProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CertificateDeleteProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CertificateDeleteProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *CertificateDeleteProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *CertificateDeleteProxylbParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CertificateDeleteProxylbParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CertificateDeleteProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CertificateDeleteProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CertificateDeleteProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CertificateDeleteProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *CertificateDeleteProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CertificateDeleteProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CertificateDeleteProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CertificateDeleteProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CertificateDeleteProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CertificateDeleteProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CertificateDeleteProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CertificateDeleteProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *CertificateDeleteProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CertificateDeleteProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *CertificateDeleteProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CertificateDeleteProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CertificateDeleteProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *CertificateDeleteProxylbParam) GetFormat() string {
	return p.Format
}
func (p *CertificateDeleteProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CertificateDeleteProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CertificateDeleteProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *CertificateDeleteProxylbParam) GetQuery() string {
	return p.Query
}
func (p *CertificateDeleteProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CertificateDeleteProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *CertificateDeleteProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *CertificateDeleteProxylbParam) GetId() sacloud.ID {
	return p.Id
}

// MonitorProxylbParam is input parameters for the sacloud API
type MonitorProxylbParam struct {
	Start             string     `json:"start"`
	End               string     `json:"end"`
	KeyFormat         string     `json:"key-format"`
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewMonitorProxylbParam return new MonitorProxylbParam
func NewMonitorProxylbParam(in Input) (*MonitorProxylbParam, error) {
	v := &MonitorProxylbParam{
		KeyFormat: "sakuracloud.proxylb.{{.ID}}", input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *MonitorProxylbParam) validate() error {
	var errors []error
	{
		validator := define.Resources["ProxyLB"].Commands["monitor"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["monitor"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *MonitorProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor"]
}

func (p *MonitorProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorProxylbParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorProxylbParam) GetStart() string {
	return p.Start
}
func (p *MonitorProxylbParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorProxylbParam) GetEnd() string {
	return p.End
}
func (p *MonitorProxylbParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorProxylbParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorProxylbParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *MonitorProxylbParam) GetSelector() []string {
	return p.Selector
}
func (p *MonitorProxylbParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *MonitorProxylbParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *MonitorProxylbParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *MonitorProxylbParam) GetParameters() string {
	return p.Parameters
}
func (p *MonitorProxylbParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *MonitorProxylbParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *MonitorProxylbParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *MonitorProxylbParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *MonitorProxylbParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *MonitorProxylbParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *MonitorProxylbParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *MonitorProxylbParam) GetOutputType() string {
	return p.OutputType
}
func (p *MonitorProxylbParam) SetColumn(v []string) {
	p.Column = v
}

func (p *MonitorProxylbParam) GetColumn() []string {
	return p.Column
}
func (p *MonitorProxylbParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *MonitorProxylbParam) GetQuiet() bool {
	return p.Quiet
}
func (p *MonitorProxylbParam) SetFormat(v string) {
	p.Format = v
}

func (p *MonitorProxylbParam) GetFormat() string {
	return p.Format
}
func (p *MonitorProxylbParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *MonitorProxylbParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *MonitorProxylbParam) SetQuery(v string) {
	p.Query = v
}

func (p *MonitorProxylbParam) GetQuery() string {
	return p.Query
}
func (p *MonitorProxylbParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *MonitorProxylbParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *MonitorProxylbParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *MonitorProxylbParam) GetId() sacloud.ID {
	return p.Id
}

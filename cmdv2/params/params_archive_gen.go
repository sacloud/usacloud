// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListArchiveParam is input parameters for the sacloud API
type ListArchiveParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Scope             string       `json:"scope"`
	Tags              []string     `json:"tags"`
	SourceArchiveId   sacloud.ID   `json:"source-archive-id"`
	SourceDiskId      sacloud.ID   `json:"source-disk-id"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`

	input Input
}

// NewListArchiveParam return new ListArchiveParam
func NewListArchiveParam(in Input) (*ListArchiveParam, error) {
	v := &ListArchiveParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListArchiveParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Scope) {
		p.Scope = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.SourceArchiveId) {
		p.SourceArchiveId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.SourceDiskId) {
		p.SourceDiskId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListArchiveParam) validate() error {
	var errors []error
	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["list"].Params["scope"].ValidateFunc
		errs := validator("--scope", p.Scope)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["list"].Params["source-archive-id"].ValidateFunc
		errs := validator("--source-archive-id", p.SourceArchiveId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["list"].Params["source-disk-id"].ValidateFunc
		errs := validator("--source-disk-id", p.SourceDiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *ListArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListArchiveParam) SetName(v []string) {
	p.Name = v
}

func (p *ListArchiveParam) GetName() []string {
	return p.Name
}
func (p *ListArchiveParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListArchiveParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListArchiveParam) SetScope(v string) {
	p.Scope = v
}

func (p *ListArchiveParam) GetScope() string {
	return p.Scope
}
func (p *ListArchiveParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListArchiveParam) GetTags() []string {
	return p.Tags
}
func (p *ListArchiveParam) SetSourceArchiveId(v sacloud.ID) {
	p.SourceArchiveId = v
}

func (p *ListArchiveParam) GetSourceArchiveId() sacloud.ID {
	return p.SourceArchiveId
}
func (p *ListArchiveParam) SetSourceDiskId(v sacloud.ID) {
	p.SourceDiskId = v
}

func (p *ListArchiveParam) GetSourceDiskId() sacloud.ID {
	return p.SourceDiskId
}
func (p *ListArchiveParam) SetFrom(v int) {
	p.From = v
}

func (p *ListArchiveParam) GetFrom() int {
	return p.From
}
func (p *ListArchiveParam) SetMax(v int) {
	p.Max = v
}

func (p *ListArchiveParam) GetMax() int {
	return p.Max
}
func (p *ListArchiveParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListArchiveParam) GetSort() []string {
	return p.Sort
}
func (p *ListArchiveParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListArchiveParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *ListArchiveParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListArchiveParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListArchiveParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListArchiveParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListArchiveParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListArchiveParam) GetColumn() []string {
	return p.Column
}
func (p *ListArchiveParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListArchiveParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListArchiveParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListArchiveParam) GetFormat() string {
	return p.Format
}
func (p *ListArchiveParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListArchiveParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListArchiveParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListArchiveParam) GetQuery() string {
	return p.Query
}
func (p *ListArchiveParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListArchiveParam) GetQueryFile() string {
	return p.QueryFile
}

// CreateArchiveParam is input parameters for the sacloud API
type CreateArchiveParam struct {
	SourceDiskId      sacloud.ID `json:"source-disk-id"`
	SourceArchiveId   sacloud.ID `json:"source-archive-id"`
	Size              int        `json:"size"`
	ArchiveFile       string     `json:"archive-file"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`

	input Input
}

// NewCreateArchiveParam return new CreateArchiveParam
func NewCreateArchiveParam(in Input) (*CreateArchiveParam, error) {
	v := &CreateArchiveParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateArchiveParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.SourceDiskId) {
		p.SourceDiskId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.SourceArchiveId) {
		p.SourceArchiveId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Size) {
		p.Size = 0
	}
	if utils.IsEmpty(p.ArchiveFile) {
		p.ArchiveFile = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *CreateArchiveParam) validate() error {
	var errors []error
	{
		validator := define.Resources["Archive"].Commands["create"].Params["source-disk-id"].ValidateFunc
		errs := validator("--source-disk-id", p.SourceDiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--source-disk-id", p.SourceDiskId, map[string]interface{}{

			"--archive-file":      p.ArchiveFile,
			"--size":              p.Size,
			"--source-archive-id": p.SourceArchiveId,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["create"].Params["source-archive-id"].ValidateFunc
		errs := validator("--source-archive-id", p.SourceArchiveId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--source-archive-id", p.SourceArchiveId, map[string]interface{}{

			"--archive-file":   p.ArchiveFile,
			"--size":           p.Size,
			"--source-disk-id": p.SourceDiskId,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["create"].Params["size"].ValidateFunc
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--size", p.Size, map[string]interface{}{

			"--source-archive-id": p.SourceArchiveId,
			"--source-disk-id":    p.SourceDiskId,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["create"].Params["archive-file"].ValidateFunc
		errs := validator("--archive-file", p.ArchiveFile)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--archive-file", p.ArchiveFile, map[string]interface{}{

			"--source-archive-id": p.SourceArchiveId,
			"--source-disk-id":    p.SourceDiskId,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *CreateArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateArchiveParam) SetSourceDiskId(v sacloud.ID) {
	p.SourceDiskId = v
}

func (p *CreateArchiveParam) GetSourceDiskId() sacloud.ID {
	return p.SourceDiskId
}
func (p *CreateArchiveParam) SetSourceArchiveId(v sacloud.ID) {
	p.SourceArchiveId = v
}

func (p *CreateArchiveParam) GetSourceArchiveId() sacloud.ID {
	return p.SourceArchiveId
}
func (p *CreateArchiveParam) SetSize(v int) {
	p.Size = v
}

func (p *CreateArchiveParam) GetSize() int {
	return p.Size
}
func (p *CreateArchiveParam) SetArchiveFile(v string) {
	p.ArchiveFile = v
}

func (p *CreateArchiveParam) GetArchiveFile() string {
	return p.ArchiveFile
}
func (p *CreateArchiveParam) SetName(v string) {
	p.Name = v
}

func (p *CreateArchiveParam) GetName() string {
	return p.Name
}
func (p *CreateArchiveParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateArchiveParam) GetDescription() string {
	return p.Description
}
func (p *CreateArchiveParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateArchiveParam) GetTags() []string {
	return p.Tags
}
func (p *CreateArchiveParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateArchiveParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateArchiveParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateArchiveParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateArchiveParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateArchiveParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateArchiveParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateArchiveParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateArchiveParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateArchiveParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateArchiveParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateArchiveParam) GetColumn() []string {
	return p.Column
}
func (p *CreateArchiveParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateArchiveParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateArchiveParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateArchiveParam) GetFormat() string {
	return p.Format
}
func (p *CreateArchiveParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateArchiveParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateArchiveParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateArchiveParam) GetQuery() string {
	return p.Query
}
func (p *CreateArchiveParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateArchiveParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadArchiveParam is input parameters for the sacloud API
type ReadArchiveParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewReadArchiveParam return new ReadArchiveParam
func NewReadArchiveParam(in Input) (*ReadArchiveParam, error) {
	v := &ReadArchiveParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadArchiveParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReadArchiveParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ReadArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *ReadArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReadArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadArchiveParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadArchiveParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadArchiveParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadArchiveParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadArchiveParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadArchiveParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadArchiveParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadArchiveParam) GetColumn() []string {
	return p.Column
}
func (p *ReadArchiveParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadArchiveParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadArchiveParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadArchiveParam) GetFormat() string {
	return p.Format
}
func (p *ReadArchiveParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadArchiveParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadArchiveParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadArchiveParam) GetQuery() string {
	return p.Query
}
func (p *ReadArchiveParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadArchiveParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadArchiveParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadArchiveParam) GetId() sacloud.ID {
	return p.Id
}

// UpdateArchiveParam is input parameters for the sacloud API
type UpdateArchiveParam struct {
	Selector          []string   `json:"selector"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewUpdateArchiveParam return new UpdateArchiveParam
func NewUpdateArchiveParam(in Input) (*UpdateArchiveParam, error) {
	v := &UpdateArchiveParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateArchiveParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UpdateArchiveParam) validate() error {
	var errors []error
	{
		validator := define.Resources["Archive"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *UpdateArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateArchiveParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateArchiveParam) GetName() string {
	return p.Name
}
func (p *UpdateArchiveParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateArchiveParam) GetDescription() string {
	return p.Description
}
func (p *UpdateArchiveParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateArchiveParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateArchiveParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateArchiveParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateArchiveParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateArchiveParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateArchiveParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateArchiveParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateArchiveParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateArchiveParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateArchiveParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateArchiveParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateArchiveParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateArchiveParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateArchiveParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateArchiveParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateArchiveParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateArchiveParam) GetFormat() string {
	return p.Format
}
func (p *UpdateArchiveParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateArchiveParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateArchiveParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateArchiveParam) GetQuery() string {
	return p.Query
}
func (p *UpdateArchiveParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateArchiveParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateArchiveParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateArchiveParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteArchiveParam is input parameters for the sacloud API
type DeleteArchiveParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewDeleteArchiveParam return new DeleteArchiveParam
func NewDeleteArchiveParam(in Input) (*DeleteArchiveParam, error) {
	v := &DeleteArchiveParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteArchiveParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DeleteArchiveParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DeleteArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *DeleteArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteArchiveParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteArchiveParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteArchiveParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteArchiveParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteArchiveParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteArchiveParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteArchiveParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteArchiveParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteArchiveParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteArchiveParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteArchiveParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteArchiveParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteArchiveParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteArchiveParam) GetFormat() string {
	return p.Format
}
func (p *DeleteArchiveParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteArchiveParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteArchiveParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteArchiveParam) GetQuery() string {
	return p.Query
}
func (p *DeleteArchiveParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteArchiveParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteArchiveParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteArchiveParam) GetId() sacloud.ID {
	return p.Id
}

// UploadArchiveParam is input parameters for the sacloud API
type UploadArchiveParam struct {
	ArchiveFile       string     `json:"archive-file"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewUploadArchiveParam return new UploadArchiveParam
func NewUploadArchiveParam(in Input) (*UploadArchiveParam, error) {
	v := &UploadArchiveParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UploadArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UploadArchiveParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.ArchiveFile) {
		p.ArchiveFile = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UploadArchiveParam) validate() error {
	var errors []error
	{
		validator := define.Resources["Archive"].Commands["upload"].Params["archive-file"].ValidateFunc
		errs := validator("--archive-file", p.ArchiveFile)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UploadArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *UploadArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["upload"]
}

func (p *UploadArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UploadArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UploadArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UploadArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UploadArchiveParam) SetArchiveFile(v string) {
	p.ArchiveFile = v
}

func (p *UploadArchiveParam) GetArchiveFile() string {
	return p.ArchiveFile
}
func (p *UploadArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UploadArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *UploadArchiveParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UploadArchiveParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UploadArchiveParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UploadArchiveParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UploadArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UploadArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *UploadArchiveParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UploadArchiveParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UploadArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UploadArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UploadArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UploadArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UploadArchiveParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UploadArchiveParam) GetOutputType() string {
	return p.OutputType
}
func (p *UploadArchiveParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UploadArchiveParam) GetColumn() []string {
	return p.Column
}
func (p *UploadArchiveParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UploadArchiveParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UploadArchiveParam) SetFormat(v string) {
	p.Format = v
}

func (p *UploadArchiveParam) GetFormat() string {
	return p.Format
}
func (p *UploadArchiveParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UploadArchiveParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UploadArchiveParam) SetQuery(v string) {
	p.Query = v
}

func (p *UploadArchiveParam) GetQuery() string {
	return p.Query
}
func (p *UploadArchiveParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UploadArchiveParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UploadArchiveParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UploadArchiveParam) GetId() sacloud.ID {
	return p.Id
}

// DownloadArchiveParam is input parameters for the sacloud API
type DownloadArchiveParam struct {
	FileDestination   string     `json:"file-destination"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewDownloadArchiveParam return new DownloadArchiveParam
func NewDownloadArchiveParam(in Input) (*DownloadArchiveParam, error) {
	v := &DownloadArchiveParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DownloadArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DownloadArchiveParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.FileDestination) {
		p.FileDestination = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DownloadArchiveParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DownloadArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *DownloadArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["download"]
}

func (p *DownloadArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DownloadArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DownloadArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DownloadArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DownloadArchiveParam) SetFileDestination(v string) {
	p.FileDestination = v
}

func (p *DownloadArchiveParam) GetFileDestination() string {
	return p.FileDestination
}
func (p *DownloadArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DownloadArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *DownloadArchiveParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DownloadArchiveParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DownloadArchiveParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DownloadArchiveParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DownloadArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DownloadArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *DownloadArchiveParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DownloadArchiveParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DownloadArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DownloadArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DownloadArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DownloadArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DownloadArchiveParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DownloadArchiveParam) GetId() sacloud.ID {
	return p.Id
}

// FtpOpenArchiveParam is input parameters for the sacloud API
type FtpOpenArchiveParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewFtpOpenArchiveParam return new FtpOpenArchiveParam
func NewFtpOpenArchiveParam(in Input) (*FtpOpenArchiveParam, error) {
	v := &FtpOpenArchiveParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *FtpOpenArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *FtpOpenArchiveParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *FtpOpenArchiveParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *FtpOpenArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *FtpOpenArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ftp-open"]
}

func (p *FtpOpenArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *FtpOpenArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *FtpOpenArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *FtpOpenArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *FtpOpenArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *FtpOpenArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *FtpOpenArchiveParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *FtpOpenArchiveParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *FtpOpenArchiveParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *FtpOpenArchiveParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *FtpOpenArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *FtpOpenArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *FtpOpenArchiveParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *FtpOpenArchiveParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *FtpOpenArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *FtpOpenArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *FtpOpenArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *FtpOpenArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *FtpOpenArchiveParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *FtpOpenArchiveParam) GetOutputType() string {
	return p.OutputType
}
func (p *FtpOpenArchiveParam) SetColumn(v []string) {
	p.Column = v
}

func (p *FtpOpenArchiveParam) GetColumn() []string {
	return p.Column
}
func (p *FtpOpenArchiveParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *FtpOpenArchiveParam) GetQuiet() bool {
	return p.Quiet
}
func (p *FtpOpenArchiveParam) SetFormat(v string) {
	p.Format = v
}

func (p *FtpOpenArchiveParam) GetFormat() string {
	return p.Format
}
func (p *FtpOpenArchiveParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *FtpOpenArchiveParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *FtpOpenArchiveParam) SetQuery(v string) {
	p.Query = v
}

func (p *FtpOpenArchiveParam) GetQuery() string {
	return p.Query
}
func (p *FtpOpenArchiveParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *FtpOpenArchiveParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *FtpOpenArchiveParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *FtpOpenArchiveParam) GetId() sacloud.ID {
	return p.Id
}

// FtpCloseArchiveParam is input parameters for the sacloud API
type FtpCloseArchiveParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewFtpCloseArchiveParam return new FtpCloseArchiveParam
func NewFtpCloseArchiveParam(in Input) (*FtpCloseArchiveParam, error) {
	v := &FtpCloseArchiveParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *FtpCloseArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *FtpCloseArchiveParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *FtpCloseArchiveParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *FtpCloseArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *FtpCloseArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ftp-close"]
}

func (p *FtpCloseArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *FtpCloseArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *FtpCloseArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *FtpCloseArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *FtpCloseArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *FtpCloseArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *FtpCloseArchiveParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *FtpCloseArchiveParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *FtpCloseArchiveParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *FtpCloseArchiveParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *FtpCloseArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *FtpCloseArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *FtpCloseArchiveParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *FtpCloseArchiveParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *FtpCloseArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *FtpCloseArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *FtpCloseArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *FtpCloseArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *FtpCloseArchiveParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *FtpCloseArchiveParam) GetId() sacloud.ID {
	return p.Id
}

// WaitForCopyArchiveParam is input parameters for the sacloud API
type WaitForCopyArchiveParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewWaitForCopyArchiveParam return new WaitForCopyArchiveParam
func NewWaitForCopyArchiveParam(in Input) (*WaitForCopyArchiveParam, error) {
	v := &WaitForCopyArchiveParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForCopyArchiveParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForCopyArchiveParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *WaitForCopyArchiveParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *WaitForCopyArchiveParam) ResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *WaitForCopyArchiveParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-copy"]
}

func (p *WaitForCopyArchiveParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForCopyArchiveParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForCopyArchiveParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForCopyArchiveParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *WaitForCopyArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *WaitForCopyArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *WaitForCopyArchiveParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForCopyArchiveParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForCopyArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *WaitForCopyArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *WaitForCopyArchiveParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForCopyArchiveParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForCopyArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *WaitForCopyArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *WaitForCopyArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForCopyArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForCopyArchiveParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *WaitForCopyArchiveParam) GetId() sacloud.ID {
	return p.Id
}

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListIconParam is input parameters for the sacloud API
type ListIconParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Scope             string       `json:"scope"`
	Tags              []string     `json:"tags"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`

	input Input
}

// NewListIconParam return new ListIconParam
func NewListIconParam(in Input) (*ListIconParam, error) {
	v := &ListIconParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListIconParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListIconParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Scope) {
		p.Scope = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListIconParam) validate() error {
	var errors []error
	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Icon"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Icon"].Commands["list"].Params["scope"].ValidateFunc
		errs := validator("--scope", p.Scope)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Icon"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListIconParam) ResourceDef() *schema.Resource {
	return define.Resources["Icon"]
}

func (p *ListIconParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListIconParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListIconParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListIconParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListIconParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListIconParam) SetName(v []string) {
	p.Name = v
}

func (p *ListIconParam) GetName() []string {
	return p.Name
}
func (p *ListIconParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListIconParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListIconParam) SetScope(v string) {
	p.Scope = v
}

func (p *ListIconParam) GetScope() string {
	return p.Scope
}
func (p *ListIconParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListIconParam) GetTags() []string {
	return p.Tags
}
func (p *ListIconParam) SetFrom(v int) {
	p.From = v
}

func (p *ListIconParam) GetFrom() int {
	return p.From
}
func (p *ListIconParam) SetMax(v int) {
	p.Max = v
}

func (p *ListIconParam) GetMax() int {
	return p.Max
}
func (p *ListIconParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListIconParam) GetSort() []string {
	return p.Sort
}
func (p *ListIconParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListIconParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListIconParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListIconParam) GetParameters() string {
	return p.Parameters
}
func (p *ListIconParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListIconParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListIconParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListIconParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListIconParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListIconParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListIconParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListIconParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListIconParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListIconParam) GetColumn() []string {
	return p.Column
}
func (p *ListIconParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListIconParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListIconParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListIconParam) GetFormat() string {
	return p.Format
}
func (p *ListIconParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListIconParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListIconParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListIconParam) GetQuery() string {
	return p.Query
}
func (p *ListIconParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListIconParam) GetQueryFile() string {
	return p.QueryFile
}

// CreateIconParam is input parameters for the sacloud API
type CreateIconParam struct {
	Image             string   `json:"image"`
	Name              string   `json:"name"`
	Tags              []string `json:"tags"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	Parameters        string   `json:"parameters"`
	ParamTemplateFile string   `json:"param-template-file"`
	ParameterFile     string   `json:"parameter-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`

	input Input
}

// NewCreateIconParam return new CreateIconParam
func NewCreateIconParam(in Input) (*CreateIconParam, error) {
	v := &CreateIconParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateIconParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateIconParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Image) {
		p.Image = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *CreateIconParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--image", p.Image)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Icon"].Commands["create"].Params["image"].ValidateFunc
		errs := validator("--image", p.Image)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Icon"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Icon"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateIconParam) ResourceDef() *schema.Resource {
	return define.Resources["Icon"]
}

func (p *CreateIconParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateIconParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateIconParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateIconParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateIconParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateIconParam) SetImage(v string) {
	p.Image = v
}

func (p *CreateIconParam) GetImage() string {
	return p.Image
}
func (p *CreateIconParam) SetName(v string) {
	p.Name = v
}

func (p *CreateIconParam) GetName() string {
	return p.Name
}
func (p *CreateIconParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateIconParam) GetTags() []string {
	return p.Tags
}
func (p *CreateIconParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateIconParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateIconParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateIconParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateIconParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateIconParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateIconParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateIconParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateIconParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateIconParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateIconParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateIconParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateIconParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateIconParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateIconParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateIconParam) GetColumn() []string {
	return p.Column
}
func (p *CreateIconParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateIconParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateIconParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateIconParam) GetFormat() string {
	return p.Format
}
func (p *CreateIconParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateIconParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateIconParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateIconParam) GetQuery() string {
	return p.Query
}
func (p *CreateIconParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateIconParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadIconParam is input parameters for the sacloud API
type ReadIconParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewReadIconParam return new ReadIconParam
func NewReadIconParam(in Input) (*ReadIconParam, error) {
	v := &ReadIconParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadIconParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadIconParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReadIconParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ReadIconParam) ResourceDef() *schema.Resource {
	return define.Resources["Icon"]
}

func (p *ReadIconParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadIconParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadIconParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadIconParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadIconParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReadIconParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadIconParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadIconParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadIconParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadIconParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadIconParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadIconParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadIconParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadIconParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadIconParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadIconParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadIconParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadIconParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadIconParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadIconParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadIconParam) GetColumn() []string {
	return p.Column
}
func (p *ReadIconParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadIconParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadIconParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadIconParam) GetFormat() string {
	return p.Format
}
func (p *ReadIconParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadIconParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadIconParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadIconParam) GetQuery() string {
	return p.Query
}
func (p *ReadIconParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadIconParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadIconParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadIconParam) GetId() sacloud.ID {
	return p.Id
}

// UpdateIconParam is input parameters for the sacloud API
type UpdateIconParam struct {
	Selector          []string   `json:"selector"`
	Name              string     `json:"name"`
	Tags              []string   `json:"tags"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewUpdateIconParam return new UpdateIconParam
func NewUpdateIconParam(in Input) (*UpdateIconParam, error) {
	v := &UpdateIconParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateIconParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateIconParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UpdateIconParam) validate() error {
	var errors []error
	{
		validator := define.Resources["Icon"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Icon"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateIconParam) ResourceDef() *schema.Resource {
	return define.Resources["Icon"]
}

func (p *UpdateIconParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateIconParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateIconParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateIconParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateIconParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateIconParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateIconParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateIconParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateIconParam) GetName() string {
	return p.Name
}
func (p *UpdateIconParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateIconParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateIconParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateIconParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateIconParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateIconParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateIconParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateIconParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateIconParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateIconParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateIconParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateIconParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateIconParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateIconParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateIconParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateIconParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateIconParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateIconParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateIconParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateIconParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateIconParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateIconParam) GetFormat() string {
	return p.Format
}
func (p *UpdateIconParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateIconParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateIconParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateIconParam) GetQuery() string {
	return p.Query
}
func (p *UpdateIconParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateIconParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateIconParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateIconParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteIconParam is input parameters for the sacloud API
type DeleteIconParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewDeleteIconParam return new DeleteIconParam
func NewDeleteIconParam(in Input) (*DeleteIconParam, error) {
	v := &DeleteIconParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteIconParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteIconParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DeleteIconParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DeleteIconParam) ResourceDef() *schema.Resource {
	return define.Resources["Icon"]
}

func (p *DeleteIconParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteIconParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteIconParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteIconParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteIconParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteIconParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteIconParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteIconParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteIconParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteIconParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteIconParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteIconParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteIconParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteIconParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteIconParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteIconParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteIconParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteIconParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteIconParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteIconParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteIconParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteIconParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteIconParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteIconParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteIconParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteIconParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteIconParam) GetFormat() string {
	return p.Format
}
func (p *DeleteIconParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteIconParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteIconParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteIconParam) GetQuery() string {
	return p.Query
}
func (p *DeleteIconParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteIconParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteIconParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteIconParam) GetId() sacloud.ID {
	return p.Id
}

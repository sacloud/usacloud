// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListIpv6Param is input parameters for the sacloud API
type ListIpv6Param struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Ipv6netId         sacloud.ID   `json:"ipv-6net-id"`
	InternetId        sacloud.ID   `json:"internet-id"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`

	input Input
}

// NewListIpv6Param return new ListIpv6Param
func NewListIpv6Param(in Input) (*ListIpv6Param, error) {
	v := &ListIpv6Param{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListIpv6Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListIpv6Param) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Ipv6netId) {
		p.Ipv6netId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.InternetId) {
		p.InternetId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListIpv6Param) validate() error {
	var errors []error
	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["IPv6"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["IPv6"].Commands["list"].Params["ipv6net-id"].ValidateFunc
		errs := validator("--ipv-6net-id", p.Ipv6netId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["IPv6"].Commands["list"].Params["internet-id"].ValidateFunc
		errs := validator("--internet-id", p.InternetId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListIpv6Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv6"]
}

func (p *ListIpv6Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListIpv6Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListIpv6Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListIpv6Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListIpv6Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListIpv6Param) SetName(v []string) {
	p.Name = v
}

func (p *ListIpv6Param) GetName() []string {
	return p.Name
}
func (p *ListIpv6Param) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListIpv6Param) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListIpv6Param) SetIpv6netId(v sacloud.ID) {
	p.Ipv6netId = v
}

func (p *ListIpv6Param) GetIpv6netId() sacloud.ID {
	return p.Ipv6netId
}
func (p *ListIpv6Param) SetInternetId(v sacloud.ID) {
	p.InternetId = v
}

func (p *ListIpv6Param) GetInternetId() sacloud.ID {
	return p.InternetId
}
func (p *ListIpv6Param) SetFrom(v int) {
	p.From = v
}

func (p *ListIpv6Param) GetFrom() int {
	return p.From
}
func (p *ListIpv6Param) SetMax(v int) {
	p.Max = v
}

func (p *ListIpv6Param) GetMax() int {
	return p.Max
}
func (p *ListIpv6Param) SetSort(v []string) {
	p.Sort = v
}

func (p *ListIpv6Param) GetSort() []string {
	return p.Sort
}
func (p *ListIpv6Param) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListIpv6Param) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListIpv6Param) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListIpv6Param) GetParameters() string {
	return p.Parameters
}
func (p *ListIpv6Param) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListIpv6Param) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListIpv6Param) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListIpv6Param) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListIpv6Param) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListIpv6Param) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListIpv6Param) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListIpv6Param) GetOutputType() string {
	return p.OutputType
}
func (p *ListIpv6Param) SetColumn(v []string) {
	p.Column = v
}

func (p *ListIpv6Param) GetColumn() []string {
	return p.Column
}
func (p *ListIpv6Param) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListIpv6Param) GetQuiet() bool {
	return p.Quiet
}
func (p *ListIpv6Param) SetFormat(v string) {
	p.Format = v
}

func (p *ListIpv6Param) GetFormat() string {
	return p.Format
}
func (p *ListIpv6Param) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListIpv6Param) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListIpv6Param) SetQuery(v string) {
	p.Query = v
}

func (p *ListIpv6Param) GetQuery() string {
	return p.Query
}
func (p *ListIpv6Param) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListIpv6Param) GetQueryFile() string {
	return p.QueryFile
}

// PtrAddIpv6Param is input parameters for the sacloud API
type PtrAddIpv6Param struct {
	Hostname          string   `json:"hostname"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	Parameters        string   `json:"parameters"`
	ParamTemplateFile string   `json:"param-template-file"`
	ParameterFile     string   `json:"parameter-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`

	input Input
}

// NewPtrAddIpv6Param return new PtrAddIpv6Param
func NewPtrAddIpv6Param(in Input) (*PtrAddIpv6Param, error) {
	v := &PtrAddIpv6Param{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PtrAddIpv6Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PtrAddIpv6Param) fillValueToSkeleton() {
	if utils.IsEmpty(p.Hostname) {
		p.Hostname = ""
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *PtrAddIpv6Param) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--hostname", p.Hostname)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PtrAddIpv6Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv6"]
}

func (p *PtrAddIpv6Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ptr-add"]
}

func (p *PtrAddIpv6Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PtrAddIpv6Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PtrAddIpv6Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PtrAddIpv6Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PtrAddIpv6Param) SetHostname(v string) {
	p.Hostname = v
}

func (p *PtrAddIpv6Param) GetHostname() string {
	return p.Hostname
}
func (p *PtrAddIpv6Param) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PtrAddIpv6Param) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PtrAddIpv6Param) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PtrAddIpv6Param) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PtrAddIpv6Param) SetParameters(v string) {
	p.Parameters = v
}

func (p *PtrAddIpv6Param) GetParameters() string {
	return p.Parameters
}
func (p *PtrAddIpv6Param) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PtrAddIpv6Param) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PtrAddIpv6Param) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PtrAddIpv6Param) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PtrAddIpv6Param) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PtrAddIpv6Param) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PtrAddIpv6Param) SetOutputType(v string) {
	p.OutputType = v
}

func (p *PtrAddIpv6Param) GetOutputType() string {
	return p.OutputType
}
func (p *PtrAddIpv6Param) SetColumn(v []string) {
	p.Column = v
}

func (p *PtrAddIpv6Param) GetColumn() []string {
	return p.Column
}
func (p *PtrAddIpv6Param) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *PtrAddIpv6Param) GetQuiet() bool {
	return p.Quiet
}
func (p *PtrAddIpv6Param) SetFormat(v string) {
	p.Format = v
}

func (p *PtrAddIpv6Param) GetFormat() string {
	return p.Format
}
func (p *PtrAddIpv6Param) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *PtrAddIpv6Param) GetFormatFile() string {
	return p.FormatFile
}
func (p *PtrAddIpv6Param) SetQuery(v string) {
	p.Query = v
}

func (p *PtrAddIpv6Param) GetQuery() string {
	return p.Query
}
func (p *PtrAddIpv6Param) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *PtrAddIpv6Param) GetQueryFile() string {
	return p.QueryFile
}

// PtrReadIpv6Param is input parameters for the sacloud API
type PtrReadIpv6Param struct {
	ParamTemplate     string   `json:"param-template"`
	Parameters        string   `json:"parameters"`
	ParamTemplateFile string   `json:"param-template-file"`
	ParameterFile     string   `json:"parameter-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`

	input Input
}

// NewPtrReadIpv6Param return new PtrReadIpv6Param
func NewPtrReadIpv6Param(in Input) (*PtrReadIpv6Param, error) {
	v := &PtrReadIpv6Param{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PtrReadIpv6Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PtrReadIpv6Param) fillValueToSkeleton() {
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *PtrReadIpv6Param) validate() error {
	var errors []error

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PtrReadIpv6Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv6"]
}

func (p *PtrReadIpv6Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ptr-read"]
}

func (p *PtrReadIpv6Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PtrReadIpv6Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PtrReadIpv6Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PtrReadIpv6Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PtrReadIpv6Param) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PtrReadIpv6Param) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PtrReadIpv6Param) SetParameters(v string) {
	p.Parameters = v
}

func (p *PtrReadIpv6Param) GetParameters() string {
	return p.Parameters
}
func (p *PtrReadIpv6Param) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PtrReadIpv6Param) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PtrReadIpv6Param) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PtrReadIpv6Param) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PtrReadIpv6Param) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PtrReadIpv6Param) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PtrReadIpv6Param) SetOutputType(v string) {
	p.OutputType = v
}

func (p *PtrReadIpv6Param) GetOutputType() string {
	return p.OutputType
}
func (p *PtrReadIpv6Param) SetColumn(v []string) {
	p.Column = v
}

func (p *PtrReadIpv6Param) GetColumn() []string {
	return p.Column
}
func (p *PtrReadIpv6Param) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *PtrReadIpv6Param) GetQuiet() bool {
	return p.Quiet
}
func (p *PtrReadIpv6Param) SetFormat(v string) {
	p.Format = v
}

func (p *PtrReadIpv6Param) GetFormat() string {
	return p.Format
}
func (p *PtrReadIpv6Param) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *PtrReadIpv6Param) GetFormatFile() string {
	return p.FormatFile
}
func (p *PtrReadIpv6Param) SetQuery(v string) {
	p.Query = v
}

func (p *PtrReadIpv6Param) GetQuery() string {
	return p.Query
}
func (p *PtrReadIpv6Param) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *PtrReadIpv6Param) GetQueryFile() string {
	return p.QueryFile
}

// PtrUpdateIpv6Param is input parameters for the sacloud API
type PtrUpdateIpv6Param struct {
	Hostname          string   `json:"hostname"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	Parameters        string   `json:"parameters"`
	ParamTemplateFile string   `json:"param-template-file"`
	ParameterFile     string   `json:"parameter-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`

	input Input
}

// NewPtrUpdateIpv6Param return new PtrUpdateIpv6Param
func NewPtrUpdateIpv6Param(in Input) (*PtrUpdateIpv6Param, error) {
	v := &PtrUpdateIpv6Param{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PtrUpdateIpv6Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PtrUpdateIpv6Param) fillValueToSkeleton() {
	if utils.IsEmpty(p.Hostname) {
		p.Hostname = ""
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *PtrUpdateIpv6Param) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--hostname", p.Hostname)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PtrUpdateIpv6Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv6"]
}

func (p *PtrUpdateIpv6Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ptr-update"]
}

func (p *PtrUpdateIpv6Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PtrUpdateIpv6Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PtrUpdateIpv6Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PtrUpdateIpv6Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PtrUpdateIpv6Param) SetHostname(v string) {
	p.Hostname = v
}

func (p *PtrUpdateIpv6Param) GetHostname() string {
	return p.Hostname
}
func (p *PtrUpdateIpv6Param) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PtrUpdateIpv6Param) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PtrUpdateIpv6Param) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PtrUpdateIpv6Param) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PtrUpdateIpv6Param) SetParameters(v string) {
	p.Parameters = v
}

func (p *PtrUpdateIpv6Param) GetParameters() string {
	return p.Parameters
}
func (p *PtrUpdateIpv6Param) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PtrUpdateIpv6Param) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PtrUpdateIpv6Param) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PtrUpdateIpv6Param) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PtrUpdateIpv6Param) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PtrUpdateIpv6Param) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PtrUpdateIpv6Param) SetOutputType(v string) {
	p.OutputType = v
}

func (p *PtrUpdateIpv6Param) GetOutputType() string {
	return p.OutputType
}
func (p *PtrUpdateIpv6Param) SetColumn(v []string) {
	p.Column = v
}

func (p *PtrUpdateIpv6Param) GetColumn() []string {
	return p.Column
}
func (p *PtrUpdateIpv6Param) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *PtrUpdateIpv6Param) GetQuiet() bool {
	return p.Quiet
}
func (p *PtrUpdateIpv6Param) SetFormat(v string) {
	p.Format = v
}

func (p *PtrUpdateIpv6Param) GetFormat() string {
	return p.Format
}
func (p *PtrUpdateIpv6Param) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *PtrUpdateIpv6Param) GetFormatFile() string {
	return p.FormatFile
}
func (p *PtrUpdateIpv6Param) SetQuery(v string) {
	p.Query = v
}

func (p *PtrUpdateIpv6Param) GetQuery() string {
	return p.Query
}
func (p *PtrUpdateIpv6Param) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *PtrUpdateIpv6Param) GetQueryFile() string {
	return p.QueryFile
}

// PtrDeleteIpv6Param is input parameters for the sacloud API
type PtrDeleteIpv6Param struct {
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	Parameters        string   `json:"parameters"`
	ParamTemplateFile string   `json:"param-template-file"`
	ParameterFile     string   `json:"parameter-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`

	input Input
}

// NewPtrDeleteIpv6Param return new PtrDeleteIpv6Param
func NewPtrDeleteIpv6Param(in Input) (*PtrDeleteIpv6Param, error) {
	v := &PtrDeleteIpv6Param{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PtrDeleteIpv6Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PtrDeleteIpv6Param) fillValueToSkeleton() {
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *PtrDeleteIpv6Param) validate() error {
	var errors []error

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PtrDeleteIpv6Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv6"]
}

func (p *PtrDeleteIpv6Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ptr-delete"]
}

func (p *PtrDeleteIpv6Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PtrDeleteIpv6Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PtrDeleteIpv6Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PtrDeleteIpv6Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PtrDeleteIpv6Param) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PtrDeleteIpv6Param) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PtrDeleteIpv6Param) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PtrDeleteIpv6Param) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PtrDeleteIpv6Param) SetParameters(v string) {
	p.Parameters = v
}

func (p *PtrDeleteIpv6Param) GetParameters() string {
	return p.Parameters
}
func (p *PtrDeleteIpv6Param) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PtrDeleteIpv6Param) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PtrDeleteIpv6Param) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PtrDeleteIpv6Param) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PtrDeleteIpv6Param) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PtrDeleteIpv6Param) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PtrDeleteIpv6Param) SetOutputType(v string) {
	p.OutputType = v
}

func (p *PtrDeleteIpv6Param) GetOutputType() string {
	return p.OutputType
}
func (p *PtrDeleteIpv6Param) SetColumn(v []string) {
	p.Column = v
}

func (p *PtrDeleteIpv6Param) GetColumn() []string {
	return p.Column
}
func (p *PtrDeleteIpv6Param) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *PtrDeleteIpv6Param) GetQuiet() bool {
	return p.Quiet
}
func (p *PtrDeleteIpv6Param) SetFormat(v string) {
	p.Format = v
}

func (p *PtrDeleteIpv6Param) GetFormat() string {
	return p.Format
}
func (p *PtrDeleteIpv6Param) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *PtrDeleteIpv6Param) GetFormatFile() string {
	return p.FormatFile
}
func (p *PtrDeleteIpv6Param) SetQuery(v string) {
	p.Query = v
}

func (p *PtrDeleteIpv6Param) GetQuery() string {
	return p.Query
}
func (p *PtrDeleteIpv6Param) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *PtrDeleteIpv6Param) GetQueryFile() string {
	return p.QueryFile
}

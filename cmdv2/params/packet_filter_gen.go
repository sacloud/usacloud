// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListPacketfilterParam is input parameters for the sacloud API
type ListPacketfilterParam struct {
	Sort []string
	Name []string
	Id   []sacloud.ID
	From int
	Max  int

	input Input
}

// NewListPacketfilterParam return new ListPacketfilterParam
func NewListPacketfilterParam() *ListPacketfilterParam {
	return &ListPacketfilterParam{}
}

// Initialize init ListPacketfilterParam
func (p *ListPacketfilterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListPacketfilterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListPacketfilterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}

}

func (p *ListPacketfilterParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListPacketfilterParam) ResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *ListPacketfilterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListPacketfilterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListPacketfilterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListPacketfilterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListPacketfilterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListPacketfilterParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListPacketfilterParam) GetSort() []string {
	return p.Sort
}
func (p *ListPacketfilterParam) SetName(v []string) {
	p.Name = v
}

func (p *ListPacketfilterParam) GetName() []string {
	return p.Name
}
func (p *ListPacketfilterParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListPacketfilterParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListPacketfilterParam) SetFrom(v int) {
	p.From = v
}

func (p *ListPacketfilterParam) GetFrom() int {
	return p.From
}
func (p *ListPacketfilterParam) SetMax(v int) {
	p.Max = v
}

func (p *ListPacketfilterParam) GetMax() int {
	return p.Max
}

// CreatePacketfilterParam is input parameters for the sacloud API
type CreatePacketfilterParam struct {
	Description string
	Name        string

	input Input
}

// NewCreatePacketfilterParam return new CreatePacketfilterParam
func NewCreatePacketfilterParam() *CreatePacketfilterParam {
	return &CreatePacketfilterParam{}
}

// Initialize init CreatePacketfilterParam
func (p *CreatePacketfilterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreatePacketfilterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreatePacketfilterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}

}

func (p *CreatePacketfilterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["PacketFilter"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreatePacketfilterParam) ResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *CreatePacketfilterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreatePacketfilterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreatePacketfilterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreatePacketfilterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreatePacketfilterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreatePacketfilterParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreatePacketfilterParam) GetDescription() string {
	return p.Description
}
func (p *CreatePacketfilterParam) SetName(v string) {
	p.Name = v
}

func (p *CreatePacketfilterParam) GetName() string {
	return p.Name
}

// ReadPacketfilterParam is input parameters for the sacloud API
type ReadPacketfilterParam struct {
	input Input
}

// NewReadPacketfilterParam return new ReadPacketfilterParam
func NewReadPacketfilterParam() *ReadPacketfilterParam {
	return &ReadPacketfilterParam{}
}

// Initialize init ReadPacketfilterParam
func (p *ReadPacketfilterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadPacketfilterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadPacketfilterParam) fillValueToSkeleton() {

}

func (p *ReadPacketfilterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadPacketfilterParam) ResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *ReadPacketfilterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadPacketfilterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadPacketfilterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadPacketfilterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadPacketfilterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdatePacketfilterParam is input parameters for the sacloud API
type UpdatePacketfilterParam struct {
	Name        string
	Description string

	input Input
}

// NewUpdatePacketfilterParam return new UpdatePacketfilterParam
func NewUpdatePacketfilterParam() *UpdatePacketfilterParam {
	return &UpdatePacketfilterParam{}
}

// Initialize init UpdatePacketfilterParam
func (p *UpdatePacketfilterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdatePacketfilterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdatePacketfilterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}

}

func (p *UpdatePacketfilterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["PacketFilter"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdatePacketfilterParam) ResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *UpdatePacketfilterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdatePacketfilterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdatePacketfilterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdatePacketfilterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdatePacketfilterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdatePacketfilterParam) SetName(v string) {
	p.Name = v
}

func (p *UpdatePacketfilterParam) GetName() string {
	return p.Name
}
func (p *UpdatePacketfilterParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdatePacketfilterParam) GetDescription() string {
	return p.Description
}

// DeletePacketfilterParam is input parameters for the sacloud API
type DeletePacketfilterParam struct {
	input Input
}

// NewDeletePacketfilterParam return new DeletePacketfilterParam
func NewDeletePacketfilterParam() *DeletePacketfilterParam {
	return &DeletePacketfilterParam{}
}

// Initialize init DeletePacketfilterParam
func (p *DeletePacketfilterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeletePacketfilterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeletePacketfilterParam) fillValueToSkeleton() {

}

func (p *DeletePacketfilterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeletePacketfilterParam) ResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *DeletePacketfilterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeletePacketfilterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeletePacketfilterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeletePacketfilterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeletePacketfilterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// RuleInfoPacketfilterParam is input parameters for the sacloud API
type RuleInfoPacketfilterParam struct {
	input Input
}

// NewRuleInfoPacketfilterParam return new RuleInfoPacketfilterParam
func NewRuleInfoPacketfilterParam() *RuleInfoPacketfilterParam {
	return &RuleInfoPacketfilterParam{}
}

// Initialize init RuleInfoPacketfilterParam
func (p *RuleInfoPacketfilterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *RuleInfoPacketfilterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *RuleInfoPacketfilterParam) fillValueToSkeleton() {

}

func (p *RuleInfoPacketfilterParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *RuleInfoPacketfilterParam) ResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *RuleInfoPacketfilterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["rule-info"]
}

func (p *RuleInfoPacketfilterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *RuleInfoPacketfilterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *RuleInfoPacketfilterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *RuleInfoPacketfilterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// RuleAddPacketfilterParam is input parameters for the sacloud API
type RuleAddPacketfilterParam struct {
	Description     string
	Index           int
	Protocol        string
	SourceNetwork   string
	SourcePort      string
	DestinationPort string
	Action          string

	input Input
}

// NewRuleAddPacketfilterParam return new RuleAddPacketfilterParam
func NewRuleAddPacketfilterParam() *RuleAddPacketfilterParam {
	return &RuleAddPacketfilterParam{
		Index: 1}
}

// Initialize init RuleAddPacketfilterParam
func (p *RuleAddPacketfilterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *RuleAddPacketfilterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *RuleAddPacketfilterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.SourceNetwork) {
		p.SourceNetwork = ""
	}
	if utils.IsEmpty(p.SourcePort) {
		p.SourcePort = ""
	}
	if utils.IsEmpty(p.DestinationPort) {
		p.DestinationPort = ""
	}
	if utils.IsEmpty(p.Action) {
		p.Action = ""
	}

}

func (p *RuleAddPacketfilterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["source-network"].ValidateFunc
		errs := validator("--source-network", p.SourceNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["source-port"].ValidateFunc
		errs := validator("--source-port", p.SourcePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["destination-port"].ValidateFunc
		errs := validator("--destination-port", p.DestinationPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["action"].ValidateFunc
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *RuleAddPacketfilterParam) ResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *RuleAddPacketfilterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["rule-add"]
}

func (p *RuleAddPacketfilterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *RuleAddPacketfilterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *RuleAddPacketfilterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *RuleAddPacketfilterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *RuleAddPacketfilterParam) SetDescription(v string) {
	p.Description = v
}

func (p *RuleAddPacketfilterParam) GetDescription() string {
	return p.Description
}
func (p *RuleAddPacketfilterParam) SetIndex(v int) {
	p.Index = v
}

func (p *RuleAddPacketfilterParam) GetIndex() int {
	return p.Index
}
func (p *RuleAddPacketfilterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *RuleAddPacketfilterParam) GetProtocol() string {
	return p.Protocol
}
func (p *RuleAddPacketfilterParam) SetSourceNetwork(v string) {
	p.SourceNetwork = v
}

func (p *RuleAddPacketfilterParam) GetSourceNetwork() string {
	return p.SourceNetwork
}
func (p *RuleAddPacketfilterParam) SetSourcePort(v string) {
	p.SourcePort = v
}

func (p *RuleAddPacketfilterParam) GetSourcePort() string {
	return p.SourcePort
}
func (p *RuleAddPacketfilterParam) SetDestinationPort(v string) {
	p.DestinationPort = v
}

func (p *RuleAddPacketfilterParam) GetDestinationPort() string {
	return p.DestinationPort
}
func (p *RuleAddPacketfilterParam) SetAction(v string) {
	p.Action = v
}

func (p *RuleAddPacketfilterParam) GetAction() string {
	return p.Action
}

// RuleUpdatePacketfilterParam is input parameters for the sacloud API
type RuleUpdatePacketfilterParam struct {
	SourceNetwork   string
	SourcePort      string
	DestinationPort string
	Action          string
	Description     string
	Index           int
	Protocol        string

	input Input
}

// NewRuleUpdatePacketfilterParam return new RuleUpdatePacketfilterParam
func NewRuleUpdatePacketfilterParam() *RuleUpdatePacketfilterParam {
	return &RuleUpdatePacketfilterParam{}
}

// Initialize init RuleUpdatePacketfilterParam
func (p *RuleUpdatePacketfilterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *RuleUpdatePacketfilterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *RuleUpdatePacketfilterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.SourceNetwork) {
		p.SourceNetwork = ""
	}
	if utils.IsEmpty(p.SourcePort) {
		p.SourcePort = ""
	}
	if utils.IsEmpty(p.DestinationPort) {
		p.DestinationPort = ""
	}
	if utils.IsEmpty(p.Action) {
		p.Action = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}

}

func (p *RuleUpdatePacketfilterParam) validate() error {
	var errors []error

	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["source-network"].ValidateFunc
		errs := validator("--source-network", p.SourceNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["source-port"].ValidateFunc
		errs := validator("--source-port", p.SourcePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["destination-port"].ValidateFunc
		errs := validator("--destination-port", p.DestinationPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["action"].ValidateFunc
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *RuleUpdatePacketfilterParam) ResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *RuleUpdatePacketfilterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["rule-update"]
}

func (p *RuleUpdatePacketfilterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *RuleUpdatePacketfilterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *RuleUpdatePacketfilterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *RuleUpdatePacketfilterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *RuleUpdatePacketfilterParam) SetSourceNetwork(v string) {
	p.SourceNetwork = v
}

func (p *RuleUpdatePacketfilterParam) GetSourceNetwork() string {
	return p.SourceNetwork
}
func (p *RuleUpdatePacketfilterParam) SetSourcePort(v string) {
	p.SourcePort = v
}

func (p *RuleUpdatePacketfilterParam) GetSourcePort() string {
	return p.SourcePort
}
func (p *RuleUpdatePacketfilterParam) SetDestinationPort(v string) {
	p.DestinationPort = v
}

func (p *RuleUpdatePacketfilterParam) GetDestinationPort() string {
	return p.DestinationPort
}
func (p *RuleUpdatePacketfilterParam) SetAction(v string) {
	p.Action = v
}

func (p *RuleUpdatePacketfilterParam) GetAction() string {
	return p.Action
}
func (p *RuleUpdatePacketfilterParam) SetDescription(v string) {
	p.Description = v
}

func (p *RuleUpdatePacketfilterParam) GetDescription() string {
	return p.Description
}
func (p *RuleUpdatePacketfilterParam) SetIndex(v int) {
	p.Index = v
}

func (p *RuleUpdatePacketfilterParam) GetIndex() int {
	return p.Index
}
func (p *RuleUpdatePacketfilterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *RuleUpdatePacketfilterParam) GetProtocol() string {
	return p.Protocol
}

// RuleDeletePacketfilterParam is input parameters for the sacloud API
type RuleDeletePacketfilterParam struct {
	Index int

	input Input
}

// NewRuleDeletePacketfilterParam return new RuleDeletePacketfilterParam
func NewRuleDeletePacketfilterParam() *RuleDeletePacketfilterParam {
	return &RuleDeletePacketfilterParam{}
}

// Initialize init RuleDeletePacketfilterParam
func (p *RuleDeletePacketfilterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *RuleDeletePacketfilterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *RuleDeletePacketfilterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *RuleDeletePacketfilterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *RuleDeletePacketfilterParam) ResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *RuleDeletePacketfilterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["rule-delete"]
}

func (p *RuleDeletePacketfilterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *RuleDeletePacketfilterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *RuleDeletePacketfilterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *RuleDeletePacketfilterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *RuleDeletePacketfilterParam) SetIndex(v int) {
	p.Index = v
}

func (p *RuleDeletePacketfilterParam) GetIndex() int {
	return p.Index
}

// InterfaceConnectPacketfilterParam is input parameters for the sacloud API
type InterfaceConnectPacketfilterParam struct {
	InterfaceId sacloud.ID

	input Input
}

// NewInterfaceConnectPacketfilterParam return new InterfaceConnectPacketfilterParam
func NewInterfaceConnectPacketfilterParam() *InterfaceConnectPacketfilterParam {
	return &InterfaceConnectPacketfilterParam{}
}

// Initialize init InterfaceConnectPacketfilterParam
func (p *InterfaceConnectPacketfilterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceConnectPacketfilterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceConnectPacketfilterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.InterfaceId) {
		p.InterfaceId = sacloud.ID(0)
	}

}

func (p *InterfaceConnectPacketfilterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--interface-id", p.InterfaceId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["interface-connect"].Params["interface-id"].ValidateFunc
		errs := validator("--interface-id", p.InterfaceId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *InterfaceConnectPacketfilterParam) ResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *InterfaceConnectPacketfilterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-connect"]
}

func (p *InterfaceConnectPacketfilterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceConnectPacketfilterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceConnectPacketfilterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceConnectPacketfilterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceConnectPacketfilterParam) SetInterfaceId(v sacloud.ID) {
	p.InterfaceId = v
}

func (p *InterfaceConnectPacketfilterParam) GetInterfaceId() sacloud.ID {
	return p.InterfaceId
}

// InterfaceDisconnectPacketfilterParam is input parameters for the sacloud API
type InterfaceDisconnectPacketfilterParam struct {
	InterfaceId sacloud.ID

	input Input
}

// NewInterfaceDisconnectPacketfilterParam return new InterfaceDisconnectPacketfilterParam
func NewInterfaceDisconnectPacketfilterParam() *InterfaceDisconnectPacketfilterParam {
	return &InterfaceDisconnectPacketfilterParam{}
}

// Initialize init InterfaceDisconnectPacketfilterParam
func (p *InterfaceDisconnectPacketfilterParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceDisconnectPacketfilterParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceDisconnectPacketfilterParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.InterfaceId) {
		p.InterfaceId = sacloud.ID(0)
	}

}

func (p *InterfaceDisconnectPacketfilterParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--interface-id", p.InterfaceId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["interface-disconnect"].Params["interface-id"].ValidateFunc
		errs := validator("--interface-id", p.InterfaceId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *InterfaceDisconnectPacketfilterParam) ResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *InterfaceDisconnectPacketfilterParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-disconnect"]
}

func (p *InterfaceDisconnectPacketfilterParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceDisconnectPacketfilterParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceDisconnectPacketfilterParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceDisconnectPacketfilterParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceDisconnectPacketfilterParam) SetInterfaceId(v sacloud.ID) {
	p.InterfaceId = v
}

func (p *InterfaceDisconnectPacketfilterParam) GetInterfaceId() sacloud.ID {
	return p.InterfaceId
}

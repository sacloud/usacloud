// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListSshkeyParam is input parameters for the sacloud API
type ListSshkeyParam struct {
	Sort []string
	Name []string
	Id   []sacloud.ID
	From int
	Max  int

	input Input
}

// NewListSshkeyParam return new ListSshkeyParam
func NewListSshkeyParam() *ListSshkeyParam {
	return &ListSshkeyParam{}
}

// Initialize init ListSshkeyParam
func (p *ListSshkeyParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListSshkeyParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListSshkeyParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}

}

func (p *ListSshkeyParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SSHKey"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListSshkeyParam) ResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *ListSshkeyParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListSshkeyParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListSshkeyParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListSshkeyParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListSshkeyParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListSshkeyParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListSshkeyParam) GetSort() []string {
	return p.Sort
}
func (p *ListSshkeyParam) SetName(v []string) {
	p.Name = v
}

func (p *ListSshkeyParam) GetName() []string {
	return p.Name
}
func (p *ListSshkeyParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListSshkeyParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListSshkeyParam) SetFrom(v int) {
	p.From = v
}

func (p *ListSshkeyParam) GetFrom() int {
	return p.From
}
func (p *ListSshkeyParam) SetMax(v int) {
	p.Max = v
}

func (p *ListSshkeyParam) GetMax() int {
	return p.Max
}

// CreateSshkeyParam is input parameters for the sacloud API
type CreateSshkeyParam struct {
	PublicKeyContent string
	PublicKey        string
	Name             string
	Description      string

	input Input
}

// NewCreateSshkeyParam return new CreateSshkeyParam
func NewCreateSshkeyParam() *CreateSshkeyParam {
	return &CreateSshkeyParam{}
}

// Initialize init CreateSshkeyParam
func (p *CreateSshkeyParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateSshkeyParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateSshkeyParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.PublicKeyContent) {
		p.PublicKeyContent = ""
	}
	if utils.IsEmpty(p.PublicKey) {
		p.PublicKey = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}

}

func (p *CreateSshkeyParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--public-key-content", p.PublicKeyContent, map[string]interface{}{

			"--public-key": p.PublicKey,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SSHKey"].Commands["create"].Params["public-key"].ValidateFunc
		errs := validator("--public-key", p.PublicKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SSHKey"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SSHKey"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateSshkeyParam) ResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *CreateSshkeyParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateSshkeyParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateSshkeyParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateSshkeyParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateSshkeyParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateSshkeyParam) SetPublicKeyContent(v string) {
	p.PublicKeyContent = v
}

func (p *CreateSshkeyParam) GetPublicKeyContent() string {
	return p.PublicKeyContent
}
func (p *CreateSshkeyParam) SetPublicKey(v string) {
	p.PublicKey = v
}

func (p *CreateSshkeyParam) GetPublicKey() string {
	return p.PublicKey
}
func (p *CreateSshkeyParam) SetName(v string) {
	p.Name = v
}

func (p *CreateSshkeyParam) GetName() string {
	return p.Name
}
func (p *CreateSshkeyParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateSshkeyParam) GetDescription() string {
	return p.Description
}

// ReadSshkeyParam is input parameters for the sacloud API
type ReadSshkeyParam struct {
	input Input
}

// NewReadSshkeyParam return new ReadSshkeyParam
func NewReadSshkeyParam() *ReadSshkeyParam {
	return &ReadSshkeyParam{}
}

// Initialize init ReadSshkeyParam
func (p *ReadSshkeyParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadSshkeyParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadSshkeyParam) fillValueToSkeleton() {

}

func (p *ReadSshkeyParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadSshkeyParam) ResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *ReadSshkeyParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadSshkeyParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadSshkeyParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadSshkeyParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadSshkeyParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdateSshkeyParam is input parameters for the sacloud API
type UpdateSshkeyParam struct {
	Name        string
	Description string

	input Input
}

// NewUpdateSshkeyParam return new UpdateSshkeyParam
func NewUpdateSshkeyParam() *UpdateSshkeyParam {
	return &UpdateSshkeyParam{}
}

// Initialize init UpdateSshkeyParam
func (p *UpdateSshkeyParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateSshkeyParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateSshkeyParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}

}

func (p *UpdateSshkeyParam) validate() error {
	var errors []error

	{
		validator := define.Resources["SSHKey"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SSHKey"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateSshkeyParam) ResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *UpdateSshkeyParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateSshkeyParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateSshkeyParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateSshkeyParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateSshkeyParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateSshkeyParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateSshkeyParam) GetName() string {
	return p.Name
}
func (p *UpdateSshkeyParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateSshkeyParam) GetDescription() string {
	return p.Description
}

// DeleteSshkeyParam is input parameters for the sacloud API
type DeleteSshkeyParam struct {
	input Input
}

// NewDeleteSshkeyParam return new DeleteSshkeyParam
func NewDeleteSshkeyParam() *DeleteSshkeyParam {
	return &DeleteSshkeyParam{}
}

// Initialize init DeleteSshkeyParam
func (p *DeleteSshkeyParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteSshkeyParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteSshkeyParam) fillValueToSkeleton() {

}

func (p *DeleteSshkeyParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteSshkeyParam) ResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *DeleteSshkeyParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteSshkeyParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteSshkeyParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteSshkeyParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteSshkeyParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// GenerateSshkeyParam is input parameters for the sacloud API
type GenerateSshkeyParam struct {
	PassPhrase       string
	PrivateKeyOutput string
	Name             string
	Description      string

	input Input
}

// NewGenerateSshkeyParam return new GenerateSshkeyParam
func NewGenerateSshkeyParam() *GenerateSshkeyParam {
	return &GenerateSshkeyParam{}
}

// Initialize init GenerateSshkeyParam
func (p *GenerateSshkeyParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *GenerateSshkeyParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *GenerateSshkeyParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.PassPhrase) {
		p.PassPhrase = ""
	}
	if utils.IsEmpty(p.PrivateKeyOutput) {
		p.PrivateKeyOutput = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}

}

func (p *GenerateSshkeyParam) validate() error {
	var errors []error

	{
		validator := define.Resources["SSHKey"].Commands["generate"].Params["pass-phrase"].ValidateFunc
		errs := validator("--pass-phrase", p.PassPhrase)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SSHKey"].Commands["generate"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SSHKey"].Commands["generate"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *GenerateSshkeyParam) ResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *GenerateSshkeyParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["generate"]
}

func (p *GenerateSshkeyParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *GenerateSshkeyParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *GenerateSshkeyParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *GenerateSshkeyParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *GenerateSshkeyParam) SetPassPhrase(v string) {
	p.PassPhrase = v
}

func (p *GenerateSshkeyParam) GetPassPhrase() string {
	return p.PassPhrase
}
func (p *GenerateSshkeyParam) SetPrivateKeyOutput(v string) {
	p.PrivateKeyOutput = v
}

func (p *GenerateSshkeyParam) GetPrivateKeyOutput() string {
	return p.PrivateKeyOutput
}
func (p *GenerateSshkeyParam) SetName(v string) {
	p.Name = v
}

func (p *GenerateSshkeyParam) GetName() string {
	return p.Name
}
func (p *GenerateSshkeyParam) SetDescription(v string) {
	p.Description = v
}

func (p *GenerateSshkeyParam) GetDescription() string {
	return p.Description
}

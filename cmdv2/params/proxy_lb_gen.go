// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListProxylbParam is input parameters for the sacloud API
type ListProxylbParam struct {
	Name []string
	Id   []sacloud.ID
	From int
	Max  int
	Sort []string
	Tags []string

	input Input
}

// NewListProxylbParam return new ListProxylbParam
func NewListProxylbParam() *ListProxylbParam {
	return &ListProxylbParam{}
}

// Initialize init ListProxylbParam
func (p *ListProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}

}

func (p *ListProxylbParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ListProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListProxylbParam) SetName(v []string) {
	p.Name = v
}

func (p *ListProxylbParam) GetName() []string {
	return p.Name
}
func (p *ListProxylbParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListProxylbParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListProxylbParam) SetFrom(v int) {
	p.From = v
}

func (p *ListProxylbParam) GetFrom() int {
	return p.From
}
func (p *ListProxylbParam) SetMax(v int) {
	p.Max = v
}

func (p *ListProxylbParam) GetMax() int {
	return p.Max
}
func (p *ListProxylbParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListProxylbParam) GetSort() []string {
	return p.Sort
}
func (p *ListProxylbParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListProxylbParam) GetTags() []string {
	return p.Tags
}

// CreateProxylbParam is input parameters for the sacloud API
type CreateProxylbParam struct {
	DelayLoop            int
	StickySession        bool
	SorryServerPort      int
	Description          string
	Tags                 []string
	Plan                 int
	HostHeader           string
	Path                 string
	IconId               sacloud.ID
	Name                 string
	Protocol             string
	SorryServerIpaddress string
	Timeout              int

	input Input
}

// NewCreateProxylbParam return new CreateProxylbParam
func NewCreateProxylbParam() *CreateProxylbParam {
	return &CreateProxylbParam{
		DelayLoop: 10, Plan: 1000, Path: "/", Protocol: "tcp", Timeout: 10}
}

// Initialize init CreateProxylbParam
func (p *CreateProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if utils.IsEmpty(p.StickySession) {
		p.StickySession = false
	}
	if utils.IsEmpty(p.SorryServerPort) {
		p.SorryServerPort = 0
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Plan) {
		p.Plan = 0
	}
	if utils.IsEmpty(p.HostHeader) {
		p.HostHeader = ""
	}
	if utils.IsEmpty(p.Path) {
		p.Path = ""
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.SorryServerIpaddress) {
		p.SorryServerIpaddress = ""
	}
	if utils.IsEmpty(p.Timeout) {
		p.Timeout = 0
	}

}

func (p *CreateProxylbParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["sorry-server-port"].ValidateFunc
		errs := validator("--sorry-server-port", p.SorryServerPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["timeout"].ValidateFunc
		errs := validator("--timeout", p.Timeout)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *CreateProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateProxylbParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *CreateProxylbParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *CreateProxylbParam) SetStickySession(v bool) {
	p.StickySession = v
}

func (p *CreateProxylbParam) GetStickySession() bool {
	return p.StickySession
}
func (p *CreateProxylbParam) SetSorryServerPort(v int) {
	p.SorryServerPort = v
}

func (p *CreateProxylbParam) GetSorryServerPort() int {
	return p.SorryServerPort
}
func (p *CreateProxylbParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateProxylbParam) GetDescription() string {
	return p.Description
}
func (p *CreateProxylbParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateProxylbParam) GetTags() []string {
	return p.Tags
}
func (p *CreateProxylbParam) SetPlan(v int) {
	p.Plan = v
}

func (p *CreateProxylbParam) GetPlan() int {
	return p.Plan
}
func (p *CreateProxylbParam) SetHostHeader(v string) {
	p.HostHeader = v
}

func (p *CreateProxylbParam) GetHostHeader() string {
	return p.HostHeader
}
func (p *CreateProxylbParam) SetPath(v string) {
	p.Path = v
}

func (p *CreateProxylbParam) GetPath() string {
	return p.Path
}
func (p *CreateProxylbParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateProxylbParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateProxylbParam) SetName(v string) {
	p.Name = v
}

func (p *CreateProxylbParam) GetName() string {
	return p.Name
}
func (p *CreateProxylbParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *CreateProxylbParam) GetProtocol() string {
	return p.Protocol
}
func (p *CreateProxylbParam) SetSorryServerIpaddress(v string) {
	p.SorryServerIpaddress = v
}

func (p *CreateProxylbParam) GetSorryServerIpaddress() string {
	return p.SorryServerIpaddress
}
func (p *CreateProxylbParam) SetTimeout(v int) {
	p.Timeout = v
}

func (p *CreateProxylbParam) GetTimeout() int {
	return p.Timeout
}

// ReadProxylbParam is input parameters for the sacloud API
type ReadProxylbParam struct {
	input Input
}

// NewReadProxylbParam return new ReadProxylbParam
func NewReadProxylbParam() *ReadProxylbParam {
	return &ReadProxylbParam{}
}

// Initialize init ReadProxylbParam
func (p *ReadProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadProxylbParam) fillValueToSkeleton() {

}

func (p *ReadProxylbParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ReadProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdateProxylbParam is input parameters for the sacloud API
type UpdateProxylbParam struct {
	Name                 string
	Path                 string
	Timeout              int
	DelayLoop            int
	StickySession        bool
	SorryServerIpaddress string
	SorryServerPort      int
	Description          string
	Tags                 []string
	Protocol             string
	HostHeader           string
	IconId               sacloud.ID

	input Input
}

// NewUpdateProxylbParam return new UpdateProxylbParam
func NewUpdateProxylbParam() *UpdateProxylbParam {
	return &UpdateProxylbParam{
		Timeout: 10}
}

// Initialize init UpdateProxylbParam
func (p *UpdateProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Path) {
		p.Path = ""
	}
	if utils.IsEmpty(p.Timeout) {
		p.Timeout = 0
	}
	if utils.IsEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if utils.IsEmpty(p.StickySession) {
		p.StickySession = false
	}
	if utils.IsEmpty(p.SorryServerIpaddress) {
		p.SorryServerIpaddress = ""
	}
	if utils.IsEmpty(p.SorryServerPort) {
		p.SorryServerPort = 0
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if utils.IsEmpty(p.HostHeader) {
		p.HostHeader = ""
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}

}

func (p *UpdateProxylbParam) validate() error {
	var errors []error

	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["timeout"].ValidateFunc
		errs := validator("--timeout", p.Timeout)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["sorry-server-port"].ValidateFunc
		errs := validator("--sorry-server-port", p.SorryServerPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *UpdateProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateProxylbParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateProxylbParam) GetName() string {
	return p.Name
}
func (p *UpdateProxylbParam) SetPath(v string) {
	p.Path = v
}

func (p *UpdateProxylbParam) GetPath() string {
	return p.Path
}
func (p *UpdateProxylbParam) SetTimeout(v int) {
	p.Timeout = v
}

func (p *UpdateProxylbParam) GetTimeout() int {
	return p.Timeout
}
func (p *UpdateProxylbParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *UpdateProxylbParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *UpdateProxylbParam) SetStickySession(v bool) {
	p.StickySession = v
}

func (p *UpdateProxylbParam) GetStickySession() bool {
	return p.StickySession
}
func (p *UpdateProxylbParam) SetSorryServerIpaddress(v string) {
	p.SorryServerIpaddress = v
}

func (p *UpdateProxylbParam) GetSorryServerIpaddress() string {
	return p.SorryServerIpaddress
}
func (p *UpdateProxylbParam) SetSorryServerPort(v int) {
	p.SorryServerPort = v
}

func (p *UpdateProxylbParam) GetSorryServerPort() int {
	return p.SorryServerPort
}
func (p *UpdateProxylbParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateProxylbParam) GetDescription() string {
	return p.Description
}
func (p *UpdateProxylbParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateProxylbParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateProxylbParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *UpdateProxylbParam) GetProtocol() string {
	return p.Protocol
}
func (p *UpdateProxylbParam) SetHostHeader(v string) {
	p.HostHeader = v
}

func (p *UpdateProxylbParam) GetHostHeader() string {
	return p.HostHeader
}
func (p *UpdateProxylbParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateProxylbParam) GetIconId() sacloud.ID {
	return p.IconId
}

// DeleteProxylbParam is input parameters for the sacloud API
type DeleteProxylbParam struct {
	input Input
}

// NewDeleteProxylbParam return new DeleteProxylbParam
func NewDeleteProxylbParam() *DeleteProxylbParam {
	return &DeleteProxylbParam{}
}

// Initialize init DeleteProxylbParam
func (p *DeleteProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteProxylbParam) fillValueToSkeleton() {

}

func (p *DeleteProxylbParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *DeleteProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// PlanChangeProxylbParam is input parameters for the sacloud API
type PlanChangeProxylbParam struct {
	Plan int

	input Input
}

// NewPlanChangeProxylbParam return new PlanChangeProxylbParam
func NewPlanChangeProxylbParam() *PlanChangeProxylbParam {
	return &PlanChangeProxylbParam{}
}

// Initialize init PlanChangeProxylbParam
func (p *PlanChangeProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PlanChangeProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PlanChangeProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Plan) {
		p.Plan = 0
	}

}

func (p *PlanChangeProxylbParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["plan-change"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PlanChangeProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *PlanChangeProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["plan-change"]
}

func (p *PlanChangeProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PlanChangeProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PlanChangeProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PlanChangeProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PlanChangeProxylbParam) SetPlan(v int) {
	p.Plan = v
}

func (p *PlanChangeProxylbParam) GetPlan() int {
	return p.Plan
}

// BindPortInfoProxylbParam is input parameters for the sacloud API
type BindPortInfoProxylbParam struct {
	input Input
}

// NewBindPortInfoProxylbParam return new BindPortInfoProxylbParam
func NewBindPortInfoProxylbParam() *BindPortInfoProxylbParam {
	return &BindPortInfoProxylbParam{}
}

// Initialize init BindPortInfoProxylbParam
func (p *BindPortInfoProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BindPortInfoProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BindPortInfoProxylbParam) fillValueToSkeleton() {

}

func (p *BindPortInfoProxylbParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *BindPortInfoProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *BindPortInfoProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["bind-port-info"]
}

func (p *BindPortInfoProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BindPortInfoProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BindPortInfoProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BindPortInfoProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// BindPortAddProxylbParam is input parameters for the sacloud API
type BindPortAddProxylbParam struct {
	Mode            string
	Port            int
	RedirectToHttps bool
	SupportHttp2    bool

	input Input
}

// NewBindPortAddProxylbParam return new BindPortAddProxylbParam
func NewBindPortAddProxylbParam() *BindPortAddProxylbParam {
	return &BindPortAddProxylbParam{}
}

// Initialize init BindPortAddProxylbParam
func (p *BindPortAddProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BindPortAddProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BindPortAddProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Mode) {
		p.Mode = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.RedirectToHttps) {
		p.RedirectToHttps = false
	}
	if utils.IsEmpty(p.SupportHttp2) {
		p.SupportHttp2 = false
	}

}

func (p *BindPortAddProxylbParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--mode", p.Mode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["bind-port-add"].Params["mode"].ValidateFunc
		errs := validator("--mode", p.Mode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["bind-port-add"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *BindPortAddProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *BindPortAddProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["bind-port-add"]
}

func (p *BindPortAddProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BindPortAddProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BindPortAddProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BindPortAddProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *BindPortAddProxylbParam) SetMode(v string) {
	p.Mode = v
}

func (p *BindPortAddProxylbParam) GetMode() string {
	return p.Mode
}
func (p *BindPortAddProxylbParam) SetPort(v int) {
	p.Port = v
}

func (p *BindPortAddProxylbParam) GetPort() int {
	return p.Port
}
func (p *BindPortAddProxylbParam) SetRedirectToHttps(v bool) {
	p.RedirectToHttps = v
}

func (p *BindPortAddProxylbParam) GetRedirectToHttps() bool {
	return p.RedirectToHttps
}
func (p *BindPortAddProxylbParam) SetSupportHttp2(v bool) {
	p.SupportHttp2 = v
}

func (p *BindPortAddProxylbParam) GetSupportHttp2() bool {
	return p.SupportHttp2
}

// BindPortUpdateProxylbParam is input parameters for the sacloud API
type BindPortUpdateProxylbParam struct {
	Index           int
	Mode            string
	Port            int
	RedirectToHttps bool
	SupportHttp2    bool

	input Input
}

// NewBindPortUpdateProxylbParam return new BindPortUpdateProxylbParam
func NewBindPortUpdateProxylbParam() *BindPortUpdateProxylbParam {
	return &BindPortUpdateProxylbParam{}
}

// Initialize init BindPortUpdateProxylbParam
func (p *BindPortUpdateProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BindPortUpdateProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BindPortUpdateProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.Mode) {
		p.Mode = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.RedirectToHttps) {
		p.RedirectToHttps = false
	}
	if utils.IsEmpty(p.SupportHttp2) {
		p.SupportHttp2 = false
	}

}

func (p *BindPortUpdateProxylbParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["bind-port-update"].Params["mode"].ValidateFunc
		errs := validator("--mode", p.Mode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["bind-port-update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *BindPortUpdateProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *BindPortUpdateProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["bind-port-update"]
}

func (p *BindPortUpdateProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BindPortUpdateProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BindPortUpdateProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BindPortUpdateProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *BindPortUpdateProxylbParam) SetIndex(v int) {
	p.Index = v
}

func (p *BindPortUpdateProxylbParam) GetIndex() int {
	return p.Index
}
func (p *BindPortUpdateProxylbParam) SetMode(v string) {
	p.Mode = v
}

func (p *BindPortUpdateProxylbParam) GetMode() string {
	return p.Mode
}
func (p *BindPortUpdateProxylbParam) SetPort(v int) {
	p.Port = v
}

func (p *BindPortUpdateProxylbParam) GetPort() int {
	return p.Port
}
func (p *BindPortUpdateProxylbParam) SetRedirectToHttps(v bool) {
	p.RedirectToHttps = v
}

func (p *BindPortUpdateProxylbParam) GetRedirectToHttps() bool {
	return p.RedirectToHttps
}
func (p *BindPortUpdateProxylbParam) SetSupportHttp2(v bool) {
	p.SupportHttp2 = v
}

func (p *BindPortUpdateProxylbParam) GetSupportHttp2() bool {
	return p.SupportHttp2
}

// BindPortDeleteProxylbParam is input parameters for the sacloud API
type BindPortDeleteProxylbParam struct {
	Index int

	input Input
}

// NewBindPortDeleteProxylbParam return new BindPortDeleteProxylbParam
func NewBindPortDeleteProxylbParam() *BindPortDeleteProxylbParam {
	return &BindPortDeleteProxylbParam{}
}

// Initialize init BindPortDeleteProxylbParam
func (p *BindPortDeleteProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BindPortDeleteProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BindPortDeleteProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *BindPortDeleteProxylbParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *BindPortDeleteProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *BindPortDeleteProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["bind-port-delete"]
}

func (p *BindPortDeleteProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BindPortDeleteProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BindPortDeleteProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BindPortDeleteProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *BindPortDeleteProxylbParam) SetIndex(v int) {
	p.Index = v
}

func (p *BindPortDeleteProxylbParam) GetIndex() int {
	return p.Index
}

// ResponseHeaderInfoProxylbParam is input parameters for the sacloud API
type ResponseHeaderInfoProxylbParam struct {
	PortIndex int

	input Input
}

// NewResponseHeaderInfoProxylbParam return new ResponseHeaderInfoProxylbParam
func NewResponseHeaderInfoProxylbParam() *ResponseHeaderInfoProxylbParam {
	return &ResponseHeaderInfoProxylbParam{}
}

// Initialize init ResponseHeaderInfoProxylbParam
func (p *ResponseHeaderInfoProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResponseHeaderInfoProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResponseHeaderInfoProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.PortIndex) {
		p.PortIndex = 0
	}

}

func (p *ResponseHeaderInfoProxylbParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--port-index", p.PortIndex)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ResponseHeaderInfoProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ResponseHeaderInfoProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["response-header-info"]
}

func (p *ResponseHeaderInfoProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResponseHeaderInfoProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResponseHeaderInfoProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResponseHeaderInfoProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ResponseHeaderInfoProxylbParam) SetPortIndex(v int) {
	p.PortIndex = v
}

func (p *ResponseHeaderInfoProxylbParam) GetPortIndex() int {
	return p.PortIndex
}

// ResponseHeaderAddProxylbParam is input parameters for the sacloud API
type ResponseHeaderAddProxylbParam struct {
	PortIndex int
	Header    string
	Value     string

	input Input
}

// NewResponseHeaderAddProxylbParam return new ResponseHeaderAddProxylbParam
func NewResponseHeaderAddProxylbParam() *ResponseHeaderAddProxylbParam {
	return &ResponseHeaderAddProxylbParam{}
}

// Initialize init ResponseHeaderAddProxylbParam
func (p *ResponseHeaderAddProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResponseHeaderAddProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResponseHeaderAddProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.PortIndex) {
		p.PortIndex = 0
	}
	if utils.IsEmpty(p.Header) {
		p.Header = ""
	}
	if utils.IsEmpty(p.Value) {
		p.Value = ""
	}

}

func (p *ResponseHeaderAddProxylbParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--port-index", p.PortIndex)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--header", p.Header)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--value", p.Value)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ResponseHeaderAddProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ResponseHeaderAddProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["response-header-add"]
}

func (p *ResponseHeaderAddProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResponseHeaderAddProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResponseHeaderAddProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResponseHeaderAddProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ResponseHeaderAddProxylbParam) SetPortIndex(v int) {
	p.PortIndex = v
}

func (p *ResponseHeaderAddProxylbParam) GetPortIndex() int {
	return p.PortIndex
}
func (p *ResponseHeaderAddProxylbParam) SetHeader(v string) {
	p.Header = v
}

func (p *ResponseHeaderAddProxylbParam) GetHeader() string {
	return p.Header
}
func (p *ResponseHeaderAddProxylbParam) SetValue(v string) {
	p.Value = v
}

func (p *ResponseHeaderAddProxylbParam) GetValue() string {
	return p.Value
}

// ResponseHeaderUpdateProxylbParam is input parameters for the sacloud API
type ResponseHeaderUpdateProxylbParam struct {
	Header    string
	Value     string
	Index     int
	PortIndex int

	input Input
}

// NewResponseHeaderUpdateProxylbParam return new ResponseHeaderUpdateProxylbParam
func NewResponseHeaderUpdateProxylbParam() *ResponseHeaderUpdateProxylbParam {
	return &ResponseHeaderUpdateProxylbParam{}
}

// Initialize init ResponseHeaderUpdateProxylbParam
func (p *ResponseHeaderUpdateProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResponseHeaderUpdateProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResponseHeaderUpdateProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Header) {
		p.Header = ""
	}
	if utils.IsEmpty(p.Value) {
		p.Value = ""
	}
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.PortIndex) {
		p.PortIndex = 0
	}

}

func (p *ResponseHeaderUpdateProxylbParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--port-index", p.PortIndex)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ResponseHeaderUpdateProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ResponseHeaderUpdateProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["response-header-update"]
}

func (p *ResponseHeaderUpdateProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResponseHeaderUpdateProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResponseHeaderUpdateProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResponseHeaderUpdateProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ResponseHeaderUpdateProxylbParam) SetHeader(v string) {
	p.Header = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetHeader() string {
	return p.Header
}
func (p *ResponseHeaderUpdateProxylbParam) SetValue(v string) {
	p.Value = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetValue() string {
	return p.Value
}
func (p *ResponseHeaderUpdateProxylbParam) SetIndex(v int) {
	p.Index = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetIndex() int {
	return p.Index
}
func (p *ResponseHeaderUpdateProxylbParam) SetPortIndex(v int) {
	p.PortIndex = v
}

func (p *ResponseHeaderUpdateProxylbParam) GetPortIndex() int {
	return p.PortIndex
}

// ResponseHeaderDeleteProxylbParam is input parameters for the sacloud API
type ResponseHeaderDeleteProxylbParam struct {
	Index     int
	PortIndex int

	input Input
}

// NewResponseHeaderDeleteProxylbParam return new ResponseHeaderDeleteProxylbParam
func NewResponseHeaderDeleteProxylbParam() *ResponseHeaderDeleteProxylbParam {
	return &ResponseHeaderDeleteProxylbParam{}
}

// Initialize init ResponseHeaderDeleteProxylbParam
func (p *ResponseHeaderDeleteProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResponseHeaderDeleteProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResponseHeaderDeleteProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}
	if utils.IsEmpty(p.PortIndex) {
		p.PortIndex = 0
	}

}

func (p *ResponseHeaderDeleteProxylbParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--port-index", p.PortIndex)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ResponseHeaderDeleteProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ResponseHeaderDeleteProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["response-header-delete"]
}

func (p *ResponseHeaderDeleteProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResponseHeaderDeleteProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResponseHeaderDeleteProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResponseHeaderDeleteProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ResponseHeaderDeleteProxylbParam) SetIndex(v int) {
	p.Index = v
}

func (p *ResponseHeaderDeleteProxylbParam) GetIndex() int {
	return p.Index
}
func (p *ResponseHeaderDeleteProxylbParam) SetPortIndex(v int) {
	p.PortIndex = v
}

func (p *ResponseHeaderDeleteProxylbParam) GetPortIndex() int {
	return p.PortIndex
}

// AcmeInfoProxylbParam is input parameters for the sacloud API
type AcmeInfoProxylbParam struct {
	input Input
}

// NewAcmeInfoProxylbParam return new AcmeInfoProxylbParam
func NewAcmeInfoProxylbParam() *AcmeInfoProxylbParam {
	return &AcmeInfoProxylbParam{}
}

// Initialize init AcmeInfoProxylbParam
func (p *AcmeInfoProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *AcmeInfoProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *AcmeInfoProxylbParam) fillValueToSkeleton() {

}

func (p *AcmeInfoProxylbParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *AcmeInfoProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *AcmeInfoProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["acme-info"]
}

func (p *AcmeInfoProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *AcmeInfoProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *AcmeInfoProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *AcmeInfoProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// AcmeSettingProxylbParam is input parameters for the sacloud API
type AcmeSettingProxylbParam struct {
	AcceptTos  bool
	CommonName string
	Disable    bool

	input Input
}

// NewAcmeSettingProxylbParam return new AcmeSettingProxylbParam
func NewAcmeSettingProxylbParam() *AcmeSettingProxylbParam {
	return &AcmeSettingProxylbParam{}
}

// Initialize init AcmeSettingProxylbParam
func (p *AcmeSettingProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *AcmeSettingProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *AcmeSettingProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.AcceptTos) {
		p.AcceptTos = false
	}
	if utils.IsEmpty(p.CommonName) {
		p.CommonName = ""
	}
	if utils.IsEmpty(p.Disable) {
		p.Disable = false
	}

}

func (p *AcmeSettingProxylbParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *AcmeSettingProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *AcmeSettingProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["acme-setting"]
}

func (p *AcmeSettingProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *AcmeSettingProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *AcmeSettingProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *AcmeSettingProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *AcmeSettingProxylbParam) SetAcceptTos(v bool) {
	p.AcceptTos = v
}

func (p *AcmeSettingProxylbParam) GetAcceptTos() bool {
	return p.AcceptTos
}
func (p *AcmeSettingProxylbParam) SetCommonName(v string) {
	p.CommonName = v
}

func (p *AcmeSettingProxylbParam) GetCommonName() string {
	return p.CommonName
}
func (p *AcmeSettingProxylbParam) SetDisable(v bool) {
	p.Disable = v
}

func (p *AcmeSettingProxylbParam) GetDisable() bool {
	return p.Disable
}

// AcmeRenewProxylbParam is input parameters for the sacloud API
type AcmeRenewProxylbParam struct {
	input Input
}

// NewAcmeRenewProxylbParam return new AcmeRenewProxylbParam
func NewAcmeRenewProxylbParam() *AcmeRenewProxylbParam {
	return &AcmeRenewProxylbParam{}
}

// Initialize init AcmeRenewProxylbParam
func (p *AcmeRenewProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *AcmeRenewProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *AcmeRenewProxylbParam) fillValueToSkeleton() {

}

func (p *AcmeRenewProxylbParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *AcmeRenewProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *AcmeRenewProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["acme-renew"]
}

func (p *AcmeRenewProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *AcmeRenewProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *AcmeRenewProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *AcmeRenewProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ServerInfoProxylbParam is input parameters for the sacloud API
type ServerInfoProxylbParam struct {
	input Input
}

// NewServerInfoProxylbParam return new ServerInfoProxylbParam
func NewServerInfoProxylbParam() *ServerInfoProxylbParam {
	return &ServerInfoProxylbParam{}
}

// Initialize init ServerInfoProxylbParam
func (p *ServerInfoProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerInfoProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerInfoProxylbParam) fillValueToSkeleton() {

}

func (p *ServerInfoProxylbParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ServerInfoProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ServerInfoProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-info"]
}

func (p *ServerInfoProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerInfoProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerInfoProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerInfoProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ServerAddProxylbParam is input parameters for the sacloud API
type ServerAddProxylbParam struct {
	Ipaddress string
	Disabled  bool
	Port      int

	input Input
}

// NewServerAddProxylbParam return new ServerAddProxylbParam
func NewServerAddProxylbParam() *ServerAddProxylbParam {
	return &ServerAddProxylbParam{}
}

// Initialize init ServerAddProxylbParam
func (p *ServerAddProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerAddProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerAddProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}

}

func (p *ServerAddProxylbParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["server-add"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["server-add"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerAddProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ServerAddProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-add"]
}

func (p *ServerAddProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerAddProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerAddProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerAddProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerAddProxylbParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerAddProxylbParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerAddProxylbParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *ServerAddProxylbParam) GetDisabled() bool {
	return p.Disabled
}
func (p *ServerAddProxylbParam) SetPort(v int) {
	p.Port = v
}

func (p *ServerAddProxylbParam) GetPort() int {
	return p.Port
}

// ServerUpdateProxylbParam is input parameters for the sacloud API
type ServerUpdateProxylbParam struct {
	Ipaddress string
	Disabled  bool
	Port      int
	Index     int

	input Input
}

// NewServerUpdateProxylbParam return new ServerUpdateProxylbParam
func NewServerUpdateProxylbParam() *ServerUpdateProxylbParam {
	return &ServerUpdateProxylbParam{}
}

// Initialize init ServerUpdateProxylbParam
func (p *ServerUpdateProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerUpdateProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerUpdateProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *ServerUpdateProxylbParam) validate() error {
	var errors []error

	{
		validator := define.Resources["ProxyLB"].Commands["server-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["server-update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerUpdateProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ServerUpdateProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-update"]
}

func (p *ServerUpdateProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerUpdateProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerUpdateProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerUpdateProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerUpdateProxylbParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerUpdateProxylbParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerUpdateProxylbParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *ServerUpdateProxylbParam) GetDisabled() bool {
	return p.Disabled
}
func (p *ServerUpdateProxylbParam) SetPort(v int) {
	p.Port = v
}

func (p *ServerUpdateProxylbParam) GetPort() int {
	return p.Port
}
func (p *ServerUpdateProxylbParam) SetIndex(v int) {
	p.Index = v
}

func (p *ServerUpdateProxylbParam) GetIndex() int {
	return p.Index
}

// ServerDeleteProxylbParam is input parameters for the sacloud API
type ServerDeleteProxylbParam struct {
	Index int

	input Input
}

// NewServerDeleteProxylbParam return new ServerDeleteProxylbParam
func NewServerDeleteProxylbParam() *ServerDeleteProxylbParam {
	return &ServerDeleteProxylbParam{}
}

// Initialize init ServerDeleteProxylbParam
func (p *ServerDeleteProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerDeleteProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerDeleteProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *ServerDeleteProxylbParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerDeleteProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ServerDeleteProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-delete"]
}

func (p *ServerDeleteProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerDeleteProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerDeleteProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerDeleteProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerDeleteProxylbParam) SetIndex(v int) {
	p.Index = v
}

func (p *ServerDeleteProxylbParam) GetIndex() int {
	return p.Index
}

// CertificateInfoProxylbParam is input parameters for the sacloud API
type CertificateInfoProxylbParam struct {
	input Input
}

// NewCertificateInfoProxylbParam return new CertificateInfoProxylbParam
func NewCertificateInfoProxylbParam() *CertificateInfoProxylbParam {
	return &CertificateInfoProxylbParam{}
}

// Initialize init CertificateInfoProxylbParam
func (p *CertificateInfoProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CertificateInfoProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CertificateInfoProxylbParam) fillValueToSkeleton() {

}

func (p *CertificateInfoProxylbParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *CertificateInfoProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *CertificateInfoProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["certificate-info"]
}

func (p *CertificateInfoProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CertificateInfoProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CertificateInfoProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CertificateInfoProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// CertificateAddProxylbParam is input parameters for the sacloud API
type CertificateAddProxylbParam struct {
	ServerCertificate       string
	IntermediateCertificate string
	PrivateKey              string

	input Input
}

// NewCertificateAddProxylbParam return new CertificateAddProxylbParam
func NewCertificateAddProxylbParam() *CertificateAddProxylbParam {
	return &CertificateAddProxylbParam{}
}

// Initialize init CertificateAddProxylbParam
func (p *CertificateAddProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CertificateAddProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CertificateAddProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.ServerCertificate) {
		p.ServerCertificate = ""
	}
	if utils.IsEmpty(p.IntermediateCertificate) {
		p.IntermediateCertificate = ""
	}
	if utils.IsEmpty(p.PrivateKey) {
		p.PrivateKey = ""
	}

}

func (p *CertificateAddProxylbParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--server-certificate", p.ServerCertificate)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--private-key", p.PrivateKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CertificateAddProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *CertificateAddProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["certificate-add"]
}

func (p *CertificateAddProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CertificateAddProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CertificateAddProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CertificateAddProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CertificateAddProxylbParam) SetServerCertificate(v string) {
	p.ServerCertificate = v
}

func (p *CertificateAddProxylbParam) GetServerCertificate() string {
	return p.ServerCertificate
}
func (p *CertificateAddProxylbParam) SetIntermediateCertificate(v string) {
	p.IntermediateCertificate = v
}

func (p *CertificateAddProxylbParam) GetIntermediateCertificate() string {
	return p.IntermediateCertificate
}
func (p *CertificateAddProxylbParam) SetPrivateKey(v string) {
	p.PrivateKey = v
}

func (p *CertificateAddProxylbParam) GetPrivateKey() string {
	return p.PrivateKey
}

// CertificateUpdateProxylbParam is input parameters for the sacloud API
type CertificateUpdateProxylbParam struct {
	ServerCertificate       string
	IntermediateCertificate string
	PrivateKey              string

	input Input
}

// NewCertificateUpdateProxylbParam return new CertificateUpdateProxylbParam
func NewCertificateUpdateProxylbParam() *CertificateUpdateProxylbParam {
	return &CertificateUpdateProxylbParam{}
}

// Initialize init CertificateUpdateProxylbParam
func (p *CertificateUpdateProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CertificateUpdateProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CertificateUpdateProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.ServerCertificate) {
		p.ServerCertificate = ""
	}
	if utils.IsEmpty(p.IntermediateCertificate) {
		p.IntermediateCertificate = ""
	}
	if utils.IsEmpty(p.PrivateKey) {
		p.PrivateKey = ""
	}

}

func (p *CertificateUpdateProxylbParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *CertificateUpdateProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *CertificateUpdateProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["certificate-update"]
}

func (p *CertificateUpdateProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CertificateUpdateProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CertificateUpdateProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CertificateUpdateProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CertificateUpdateProxylbParam) SetServerCertificate(v string) {
	p.ServerCertificate = v
}

func (p *CertificateUpdateProxylbParam) GetServerCertificate() string {
	return p.ServerCertificate
}
func (p *CertificateUpdateProxylbParam) SetIntermediateCertificate(v string) {
	p.IntermediateCertificate = v
}

func (p *CertificateUpdateProxylbParam) GetIntermediateCertificate() string {
	return p.IntermediateCertificate
}
func (p *CertificateUpdateProxylbParam) SetPrivateKey(v string) {
	p.PrivateKey = v
}

func (p *CertificateUpdateProxylbParam) GetPrivateKey() string {
	return p.PrivateKey
}

// CertificateDeleteProxylbParam is input parameters for the sacloud API
type CertificateDeleteProxylbParam struct {
	input Input
}

// NewCertificateDeleteProxylbParam return new CertificateDeleteProxylbParam
func NewCertificateDeleteProxylbParam() *CertificateDeleteProxylbParam {
	return &CertificateDeleteProxylbParam{}
}

// Initialize init CertificateDeleteProxylbParam
func (p *CertificateDeleteProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CertificateDeleteProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CertificateDeleteProxylbParam) fillValueToSkeleton() {

}

func (p *CertificateDeleteProxylbParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *CertificateDeleteProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *CertificateDeleteProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["certificate-delete"]
}

func (p *CertificateDeleteProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CertificateDeleteProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CertificateDeleteProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CertificateDeleteProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// MonitorProxylbParam is input parameters for the sacloud API
type MonitorProxylbParam struct {
	End       string
	KeyFormat string
	Start     string

	input Input
}

// NewMonitorProxylbParam return new MonitorProxylbParam
func NewMonitorProxylbParam() *MonitorProxylbParam {
	return &MonitorProxylbParam{
		KeyFormat: "sakuracloud.proxylb.{{.ID}}"}
}

// Initialize init MonitorProxylbParam
func (p *MonitorProxylbParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorProxylbParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorProxylbParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}

}

func (p *MonitorProxylbParam) validate() error {
	var errors []error

	{
		validator := define.Resources["ProxyLB"].Commands["monitor"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["ProxyLB"].Commands["monitor"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorProxylbParam) ResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *MonitorProxylbParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor"]
}

func (p *MonitorProxylbParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorProxylbParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorProxylbParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorProxylbParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorProxylbParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorProxylbParam) GetEnd() string {
	return p.End
}
func (p *MonitorProxylbParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorProxylbParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorProxylbParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorProxylbParam) GetStart() string {
	return p.Start
}

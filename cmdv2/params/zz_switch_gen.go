// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListSwitchParam is input parameters for the sacloud API
type ListSwitchParam struct {
	Tags []string
	Id   []sacloud.ID
	From int
	Max  int
	Sort []string
	Name []string

	input Input
}

// NewListSwitchParam return new ListSwitchParam
func NewListSwitchParam() *ListSwitchParam {
	return &ListSwitchParam{}
}

// Initialize init ListSwitchParam
func (p *ListSwitchParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListSwitchParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListSwitchParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}

}

func (p *ListSwitchParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Switch"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Switch"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListSwitchParam) ResourceDef() *schema.Resource {
	return define.Resources["Switch"]
}

func (p *ListSwitchParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListSwitchParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListSwitchParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListSwitchParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListSwitchParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListSwitchParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListSwitchParam) GetTags() []string {
	return p.Tags
}
func (p *ListSwitchParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListSwitchParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListSwitchParam) SetFrom(v int) {
	p.From = v
}

func (p *ListSwitchParam) GetFrom() int {
	return p.From
}
func (p *ListSwitchParam) SetMax(v int) {
	p.Max = v
}

func (p *ListSwitchParam) GetMax() int {
	return p.Max
}
func (p *ListSwitchParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListSwitchParam) GetSort() []string {
	return p.Sort
}
func (p *ListSwitchParam) SetName(v []string) {
	p.Name = v
}

func (p *ListSwitchParam) GetName() []string {
	return p.Name
}

// CreateSwitchParam is input parameters for the sacloud API
type CreateSwitchParam struct {
	Name        string
	Description string
	Tags        []string
	IconId      sacloud.ID

	input Input
}

// NewCreateSwitchParam return new CreateSwitchParam
func NewCreateSwitchParam() *CreateSwitchParam {
	return &CreateSwitchParam{}
}

// Initialize init CreateSwitchParam
func (p *CreateSwitchParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateSwitchParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateSwitchParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}

}

func (p *CreateSwitchParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Switch"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Switch"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Switch"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Switch"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateSwitchParam) ResourceDef() *schema.Resource {
	return define.Resources["Switch"]
}

func (p *CreateSwitchParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateSwitchParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateSwitchParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateSwitchParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateSwitchParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateSwitchParam) SetName(v string) {
	p.Name = v
}

func (p *CreateSwitchParam) GetName() string {
	return p.Name
}
func (p *CreateSwitchParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateSwitchParam) GetDescription() string {
	return p.Description
}
func (p *CreateSwitchParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateSwitchParam) GetTags() []string {
	return p.Tags
}
func (p *CreateSwitchParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateSwitchParam) GetIconId() sacloud.ID {
	return p.IconId
}

// ReadSwitchParam is input parameters for the sacloud API
type ReadSwitchParam struct {
	input Input
}

// NewReadSwitchParam return new ReadSwitchParam
func NewReadSwitchParam() *ReadSwitchParam {
	return &ReadSwitchParam{}
}

// Initialize init ReadSwitchParam
func (p *ReadSwitchParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadSwitchParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadSwitchParam) fillValueToSkeleton() {

}

func (p *ReadSwitchParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadSwitchParam) ResourceDef() *schema.Resource {
	return define.Resources["Switch"]
}

func (p *ReadSwitchParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadSwitchParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadSwitchParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadSwitchParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadSwitchParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdateSwitchParam is input parameters for the sacloud API
type UpdateSwitchParam struct {
	Name        string
	Description string
	Tags        []string
	IconId      sacloud.ID

	input Input
}

// NewUpdateSwitchParam return new UpdateSwitchParam
func NewUpdateSwitchParam() *UpdateSwitchParam {
	return &UpdateSwitchParam{}
}

// Initialize init UpdateSwitchParam
func (p *UpdateSwitchParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateSwitchParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateSwitchParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}

}

func (p *UpdateSwitchParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Switch"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Switch"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Switch"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Switch"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateSwitchParam) ResourceDef() *schema.Resource {
	return define.Resources["Switch"]
}

func (p *UpdateSwitchParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateSwitchParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateSwitchParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateSwitchParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateSwitchParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateSwitchParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateSwitchParam) GetName() string {
	return p.Name
}
func (p *UpdateSwitchParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateSwitchParam) GetDescription() string {
	return p.Description
}
func (p *UpdateSwitchParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateSwitchParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateSwitchParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateSwitchParam) GetIconId() sacloud.ID {
	return p.IconId
}

// DeleteSwitchParam is input parameters for the sacloud API
type DeleteSwitchParam struct {
	input Input
}

// NewDeleteSwitchParam return new DeleteSwitchParam
func NewDeleteSwitchParam() *DeleteSwitchParam {
	return &DeleteSwitchParam{}
}

// Initialize init DeleteSwitchParam
func (p *DeleteSwitchParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteSwitchParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteSwitchParam) fillValueToSkeleton() {

}

func (p *DeleteSwitchParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteSwitchParam) ResourceDef() *schema.Resource {
	return define.Resources["Switch"]
}

func (p *DeleteSwitchParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteSwitchParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteSwitchParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteSwitchParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteSwitchParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// BridgeConnectSwitchParam is input parameters for the sacloud API
type BridgeConnectSwitchParam struct {
	BridgeId sacloud.ID

	input Input
}

// NewBridgeConnectSwitchParam return new BridgeConnectSwitchParam
func NewBridgeConnectSwitchParam() *BridgeConnectSwitchParam {
	return &BridgeConnectSwitchParam{}
}

// Initialize init BridgeConnectSwitchParam
func (p *BridgeConnectSwitchParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BridgeConnectSwitchParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BridgeConnectSwitchParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.BridgeId) {
		p.BridgeId = sacloud.ID(0)
	}

}

func (p *BridgeConnectSwitchParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--bridge-id", p.BridgeId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Switch"].Commands["bridge-connect"].Params["bridge-id"].ValidateFunc
		errs := validator("--bridge-id", p.BridgeId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *BridgeConnectSwitchParam) ResourceDef() *schema.Resource {
	return define.Resources["Switch"]
}

func (p *BridgeConnectSwitchParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["bridge-connect"]
}

func (p *BridgeConnectSwitchParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BridgeConnectSwitchParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BridgeConnectSwitchParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BridgeConnectSwitchParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *BridgeConnectSwitchParam) SetBridgeId(v sacloud.ID) {
	p.BridgeId = v
}

func (p *BridgeConnectSwitchParam) GetBridgeId() sacloud.ID {
	return p.BridgeId
}

// BridgeDisconnectSwitchParam is input parameters for the sacloud API
type BridgeDisconnectSwitchParam struct {
	input Input
}

// NewBridgeDisconnectSwitchParam return new BridgeDisconnectSwitchParam
func NewBridgeDisconnectSwitchParam() *BridgeDisconnectSwitchParam {
	return &BridgeDisconnectSwitchParam{}
}

// Initialize init BridgeDisconnectSwitchParam
func (p *BridgeDisconnectSwitchParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BridgeDisconnectSwitchParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BridgeDisconnectSwitchParam) fillValueToSkeleton() {

}

func (p *BridgeDisconnectSwitchParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *BridgeDisconnectSwitchParam) ResourceDef() *schema.Resource {
	return define.Resources["Switch"]
}

func (p *BridgeDisconnectSwitchParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["bridge-disconnect"]
}

func (p *BridgeDisconnectSwitchParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BridgeDisconnectSwitchParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BridgeDisconnectSwitchParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BridgeDisconnectSwitchParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

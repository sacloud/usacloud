// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/schema"
)

// CurrentConfigParam is input parameters for the sacloud API
type CurrentConfigParam struct {
	input Input
}

// NewCurrentConfigParam return new CurrentConfigParam
func NewCurrentConfigParam() *CurrentConfigParam {
	return &CurrentConfigParam{}
}

// Initialize init CurrentConfigParam
func (p *CurrentConfigParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CurrentConfigParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CurrentConfigParam) fillValueToSkeleton() {

}

func (p *CurrentConfigParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *CurrentConfigParam) ResourceDef() *schema.Resource {
	return define.Resources["Config"]
}

func (p *CurrentConfigParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["current"]
}

func (p *CurrentConfigParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CurrentConfigParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CurrentConfigParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CurrentConfigParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// DeleteConfigParam is input parameters for the sacloud API
type DeleteConfigParam struct {
	input Input
}

// NewDeleteConfigParam return new DeleteConfigParam
func NewDeleteConfigParam() *DeleteConfigParam {
	return &DeleteConfigParam{}
}

// Initialize init DeleteConfigParam
func (p *DeleteConfigParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteConfigParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteConfigParam) fillValueToSkeleton() {

}

func (p *DeleteConfigParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteConfigParam) ResourceDef() *schema.Resource {
	return define.Resources["Config"]
}

func (p *DeleteConfigParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteConfigParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteConfigParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteConfigParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteConfigParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// EditConfigParam is input parameters for the sacloud API
type EditConfigParam struct {
	DefaultOutputType string
	Token             string
	Secret            string
	Zone              string

	input Input
}

// NewEditConfigParam return new EditConfigParam
func NewEditConfigParam() *EditConfigParam {
	return &EditConfigParam{}
}

// Initialize init EditConfigParam
func (p *EditConfigParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *EditConfigParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *EditConfigParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.DefaultOutputType) {
		p.DefaultOutputType = ""
	}
	if utils.IsEmpty(p.Token) {
		p.Token = ""
	}
	if utils.IsEmpty(p.Secret) {
		p.Secret = ""
	}
	if utils.IsEmpty(p.Zone) {
		p.Zone = ""
	}

}

func (p *EditConfigParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Config"].Commands["edit"].Params["default-output-type"].ValidateFunc
		errs := validator("--default-output-type", p.DefaultOutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Config"].Commands["edit"].Params["zone"].ValidateFunc
		errs := validator("--zone", p.Zone)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *EditConfigParam) ResourceDef() *schema.Resource {
	return define.Resources["Config"]
}

func (p *EditConfigParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["edit"]
}

func (p *EditConfigParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *EditConfigParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *EditConfigParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *EditConfigParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *EditConfigParam) SetDefaultOutputType(v string) {
	p.DefaultOutputType = v
}

func (p *EditConfigParam) GetDefaultOutputType() string {
	return p.DefaultOutputType
}
func (p *EditConfigParam) SetToken(v string) {
	p.Token = v
}

func (p *EditConfigParam) GetToken() string {
	return p.Token
}
func (p *EditConfigParam) SetSecret(v string) {
	p.Secret = v
}

func (p *EditConfigParam) GetSecret() string {
	return p.Secret
}
func (p *EditConfigParam) SetZone(v string) {
	p.Zone = v
}

func (p *EditConfigParam) GetZone() string {
	return p.Zone
}

// ListConfigParam is input parameters for the sacloud API
type ListConfigParam struct {
	input Input
}

// NewListConfigParam return new ListConfigParam
func NewListConfigParam() *ListConfigParam {
	return &ListConfigParam{}
}

// Initialize init ListConfigParam
func (p *ListConfigParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListConfigParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListConfigParam) fillValueToSkeleton() {

}

func (p *ListConfigParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ListConfigParam) ResourceDef() *schema.Resource {
	return define.Resources["Config"]
}

func (p *ListConfigParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListConfigParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListConfigParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListConfigParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListConfigParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// MigrateConfigParam is input parameters for the sacloud API
type MigrateConfigParam struct {
	input Input
}

// NewMigrateConfigParam return new MigrateConfigParam
func NewMigrateConfigParam() *MigrateConfigParam {
	return &MigrateConfigParam{}
}

// Initialize init MigrateConfigParam
func (p *MigrateConfigParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MigrateConfigParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MigrateConfigParam) fillValueToSkeleton() {

}

func (p *MigrateConfigParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *MigrateConfigParam) ResourceDef() *schema.Resource {
	return define.Resources["Config"]
}

func (p *MigrateConfigParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["migrate"]
}

func (p *MigrateConfigParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MigrateConfigParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MigrateConfigParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MigrateConfigParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ShowConfigParam is input parameters for the sacloud API
type ShowConfigParam struct {
	input Input
}

// NewShowConfigParam return new ShowConfigParam
func NewShowConfigParam() *ShowConfigParam {
	return &ShowConfigParam{}
}

// Initialize init ShowConfigParam
func (p *ShowConfigParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShowConfigParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShowConfigParam) fillValueToSkeleton() {

}

func (p *ShowConfigParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ShowConfigParam) ResourceDef() *schema.Resource {
	return define.Resources["Config"]
}

func (p *ShowConfigParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["show"]
}

func (p *ShowConfigParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShowConfigParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShowConfigParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShowConfigParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UseConfigParam is input parameters for the sacloud API
type UseConfigParam struct {
	input Input
}

// NewUseConfigParam return new UseConfigParam
func NewUseConfigParam() *UseConfigParam {
	return &UseConfigParam{}
}

// Initialize init UseConfigParam
func (p *UseConfigParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UseConfigParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UseConfigParam) fillValueToSkeleton() {

}

func (p *UseConfigParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *UseConfigParam) ResourceDef() *schema.Resource {
	return define.Resources["Config"]
}

func (p *UseConfigParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["use"]
}

func (p *UseConfigParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UseConfigParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UseConfigParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UseConfigParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

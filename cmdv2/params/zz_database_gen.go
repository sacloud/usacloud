// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListDatabaseParam is input parameters for the sacloud API
type ListDatabaseParam struct {
	Name []string
	Id   []sacloud.ID
	From int
	Max  int
	Sort []string
	Tags []string

	input Input
}

// NewListDatabaseParam return new ListDatabaseParam
func NewListDatabaseParam() *ListDatabaseParam {
	return &ListDatabaseParam{}
}

// Initialize init ListDatabaseParam
func (p *ListDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListDatabaseParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}

}

func (p *ListDatabaseParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *ListDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListDatabaseParam) SetName(v []string) {
	p.Name = v
}

func (p *ListDatabaseParam) GetName() []string {
	return p.Name
}
func (p *ListDatabaseParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListDatabaseParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListDatabaseParam) SetFrom(v int) {
	p.From = v
}

func (p *ListDatabaseParam) GetFrom() int {
	return p.From
}
func (p *ListDatabaseParam) SetMax(v int) {
	p.Max = v
}

func (p *ListDatabaseParam) GetMax() int {
	return p.Max
}
func (p *ListDatabaseParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListDatabaseParam) GetSort() []string {
	return p.Sort
}
func (p *ListDatabaseParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListDatabaseParam) GetTags() []string {
	return p.Tags
}

// CreateDatabaseParam is input parameters for the sacloud API
type CreateDatabaseParam struct {
	SwitchId            sacloud.ID
	Plan                int
	SourceNetworks      []string
	EnableWebUi         bool
	Ipaddress1          string
	Name                string
	Description         string
	IconId              sacloud.ID
	Username            string
	Password            string
	EnableBackup        bool
	BackupWeekdays      []string
	NwMaskLen           int
	DefaultRoute        string
	Tags                []string
	Database            string
	ReplicaUserPassword string
	BackupTime          string
	Port                int

	input Input
}

// NewCreateDatabaseParam return new CreateDatabaseParam
func NewCreateDatabaseParam() *CreateDatabaseParam {
	return &CreateDatabaseParam{
		Plan: 10, BackupWeekdays: []string{"all"}}
}

// Initialize init CreateDatabaseParam
func (p *CreateDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateDatabaseParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Plan) {
		p.Plan = 0
	}
	if utils.IsEmpty(p.SourceNetworks) {
		p.SourceNetworks = []string{""}
	}
	if utils.IsEmpty(p.EnableWebUi) {
		p.EnableWebUi = false
	}
	if utils.IsEmpty(p.Ipaddress1) {
		p.Ipaddress1 = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Username) {
		p.Username = ""
	}
	if utils.IsEmpty(p.Password) {
		p.Password = ""
	}
	if utils.IsEmpty(p.EnableBackup) {
		p.EnableBackup = false
	}
	if utils.IsEmpty(p.BackupWeekdays) {
		p.BackupWeekdays = []string{""}
	}
	if utils.IsEmpty(p.NwMaskLen) {
		p.NwMaskLen = 0
	}
	if utils.IsEmpty(p.DefaultRoute) {
		p.DefaultRoute = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.Database) {
		p.Database = ""
	}
	if utils.IsEmpty(p.ReplicaUserPassword) {
		p.ReplicaUserPassword = ""
	}
	if utils.IsEmpty(p.BackupTime) {
		p.BackupTime = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}

}

func (p *CreateDatabaseParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["create"].Params["source-networks"].ValidateFunc
		errs := validator("--source-networks", p.SourceNetworks)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--username", p.Username)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["username"].ValidateFunc
		errs := validator("--username", p.Username)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["password"].ValidateFunc
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["create"].Params["backup-weekdays"].ValidateFunc
		errs := validator("--backup-weekdays", p.BackupWeekdays)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--nw-mask-len", p.NwMaskLen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["nw-mask-len"].ValidateFunc
		errs := validator("--nw-mask-len", p.NwMaskLen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--default-route", p.DefaultRoute)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["default-route"].ValidateFunc
		errs := validator("--default-route", p.DefaultRoute)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--database", p.Database)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["database"].ValidateFunc
		errs := validator("--database", p.Database)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["create"].Params["replica-user-password"].ValidateFunc
		errs := validator("--replica-user-password", p.ReplicaUserPassword)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["create"].Params["backup-time"].ValidateFunc
		errs := validator("--backup-time", p.BackupTime)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["create"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *CreateDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateDatabaseParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *CreateDatabaseParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *CreateDatabaseParam) SetPlan(v int) {
	p.Plan = v
}

func (p *CreateDatabaseParam) GetPlan() int {
	return p.Plan
}
func (p *CreateDatabaseParam) SetSourceNetworks(v []string) {
	p.SourceNetworks = v
}

func (p *CreateDatabaseParam) GetSourceNetworks() []string {
	return p.SourceNetworks
}
func (p *CreateDatabaseParam) SetEnableWebUi(v bool) {
	p.EnableWebUi = v
}

func (p *CreateDatabaseParam) GetEnableWebUi() bool {
	return p.EnableWebUi
}
func (p *CreateDatabaseParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *CreateDatabaseParam) GetIpaddress1() string {
	return p.Ipaddress1
}
func (p *CreateDatabaseParam) SetName(v string) {
	p.Name = v
}

func (p *CreateDatabaseParam) GetName() string {
	return p.Name
}
func (p *CreateDatabaseParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateDatabaseParam) GetDescription() string {
	return p.Description
}
func (p *CreateDatabaseParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateDatabaseParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateDatabaseParam) SetUsername(v string) {
	p.Username = v
}

func (p *CreateDatabaseParam) GetUsername() string {
	return p.Username
}
func (p *CreateDatabaseParam) SetPassword(v string) {
	p.Password = v
}

func (p *CreateDatabaseParam) GetPassword() string {
	return p.Password
}
func (p *CreateDatabaseParam) SetEnableBackup(v bool) {
	p.EnableBackup = v
}

func (p *CreateDatabaseParam) GetEnableBackup() bool {
	return p.EnableBackup
}
func (p *CreateDatabaseParam) SetBackupWeekdays(v []string) {
	p.BackupWeekdays = v
}

func (p *CreateDatabaseParam) GetBackupWeekdays() []string {
	return p.BackupWeekdays
}
func (p *CreateDatabaseParam) SetNwMaskLen(v int) {
	p.NwMaskLen = v
}

func (p *CreateDatabaseParam) GetNwMaskLen() int {
	return p.NwMaskLen
}
func (p *CreateDatabaseParam) SetDefaultRoute(v string) {
	p.DefaultRoute = v
}

func (p *CreateDatabaseParam) GetDefaultRoute() string {
	return p.DefaultRoute
}
func (p *CreateDatabaseParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateDatabaseParam) GetTags() []string {
	return p.Tags
}
func (p *CreateDatabaseParam) SetDatabase(v string) {
	p.Database = v
}

func (p *CreateDatabaseParam) GetDatabase() string {
	return p.Database
}
func (p *CreateDatabaseParam) SetReplicaUserPassword(v string) {
	p.ReplicaUserPassword = v
}

func (p *CreateDatabaseParam) GetReplicaUserPassword() string {
	return p.ReplicaUserPassword
}
func (p *CreateDatabaseParam) SetBackupTime(v string) {
	p.BackupTime = v
}

func (p *CreateDatabaseParam) GetBackupTime() string {
	return p.BackupTime
}
func (p *CreateDatabaseParam) SetPort(v int) {
	p.Port = v
}

func (p *CreateDatabaseParam) GetPort() int {
	return p.Port
}

// ReadDatabaseParam is input parameters for the sacloud API
type ReadDatabaseParam struct {
	input Input
}

// NewReadDatabaseParam return new ReadDatabaseParam
func NewReadDatabaseParam() *ReadDatabaseParam {
	return &ReadDatabaseParam{}
}

// Initialize init ReadDatabaseParam
func (p *ReadDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadDatabaseParam) fillValueToSkeleton() {

}

func (p *ReadDatabaseParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *ReadDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdateDatabaseParam is input parameters for the sacloud API
type UpdateDatabaseParam struct {
	Tags                []string
	IconId              sacloud.ID
	Password            string
	ReplicaUserPassword string
	SourceNetworks      []string
	Name                string
	BackupWeekdays      []string
	BackupTime          string
	Description         string
	EnableReplication   bool
	Port                int
	EnableWebUi         bool
	EnableBackup        bool

	input Input
}

// NewUpdateDatabaseParam return new UpdateDatabaseParam
func NewUpdateDatabaseParam() *UpdateDatabaseParam {
	return &UpdateDatabaseParam{
		BackupWeekdays: []string{"all"}}
}

// Initialize init UpdateDatabaseParam
func (p *UpdateDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateDatabaseParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Password) {
		p.Password = ""
	}
	if utils.IsEmpty(p.ReplicaUserPassword) {
		p.ReplicaUserPassword = ""
	}
	if utils.IsEmpty(p.SourceNetworks) {
		p.SourceNetworks = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.BackupWeekdays) {
		p.BackupWeekdays = []string{""}
	}
	if utils.IsEmpty(p.BackupTime) {
		p.BackupTime = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.EnableReplication) {
		p.EnableReplication = false
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.EnableWebUi) {
		p.EnableWebUi = false
	}
	if utils.IsEmpty(p.EnableBackup) {
		p.EnableBackup = false
	}

}

func (p *UpdateDatabaseParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Database"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["update"].Params["password"].ValidateFunc
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["update"].Params["replica-user-password"].ValidateFunc
		errs := validator("--replica-user-password", p.ReplicaUserPassword)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["update"].Params["source-networks"].ValidateFunc
		errs := validator("--source-networks", p.SourceNetworks)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["update"].Params["backup-weekdays"].ValidateFunc
		errs := validator("--backup-weekdays", p.BackupWeekdays)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["update"].Params["backup-time"].ValidateFunc
		errs := validator("--backup-time", p.BackupTime)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *UpdateDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateDatabaseParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateDatabaseParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateDatabaseParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateDatabaseParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateDatabaseParam) SetPassword(v string) {
	p.Password = v
}

func (p *UpdateDatabaseParam) GetPassword() string {
	return p.Password
}
func (p *UpdateDatabaseParam) SetReplicaUserPassword(v string) {
	p.ReplicaUserPassword = v
}

func (p *UpdateDatabaseParam) GetReplicaUserPassword() string {
	return p.ReplicaUserPassword
}
func (p *UpdateDatabaseParam) SetSourceNetworks(v []string) {
	p.SourceNetworks = v
}

func (p *UpdateDatabaseParam) GetSourceNetworks() []string {
	return p.SourceNetworks
}
func (p *UpdateDatabaseParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateDatabaseParam) GetName() string {
	return p.Name
}
func (p *UpdateDatabaseParam) SetBackupWeekdays(v []string) {
	p.BackupWeekdays = v
}

func (p *UpdateDatabaseParam) GetBackupWeekdays() []string {
	return p.BackupWeekdays
}
func (p *UpdateDatabaseParam) SetBackupTime(v string) {
	p.BackupTime = v
}

func (p *UpdateDatabaseParam) GetBackupTime() string {
	return p.BackupTime
}
func (p *UpdateDatabaseParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateDatabaseParam) GetDescription() string {
	return p.Description
}
func (p *UpdateDatabaseParam) SetEnableReplication(v bool) {
	p.EnableReplication = v
}

func (p *UpdateDatabaseParam) GetEnableReplication() bool {
	return p.EnableReplication
}
func (p *UpdateDatabaseParam) SetPort(v int) {
	p.Port = v
}

func (p *UpdateDatabaseParam) GetPort() int {
	return p.Port
}
func (p *UpdateDatabaseParam) SetEnableWebUi(v bool) {
	p.EnableWebUi = v
}

func (p *UpdateDatabaseParam) GetEnableWebUi() bool {
	return p.EnableWebUi
}
func (p *UpdateDatabaseParam) SetEnableBackup(v bool) {
	p.EnableBackup = v
}

func (p *UpdateDatabaseParam) GetEnableBackup() bool {
	return p.EnableBackup
}

// DeleteDatabaseParam is input parameters for the sacloud API
type DeleteDatabaseParam struct {
	Force bool

	input Input
}

// NewDeleteDatabaseParam return new DeleteDatabaseParam
func NewDeleteDatabaseParam() *DeleteDatabaseParam {
	return &DeleteDatabaseParam{}
}

// Initialize init DeleteDatabaseParam
func (p *DeleteDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteDatabaseParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Force) {
		p.Force = false
	}

}

func (p *DeleteDatabaseParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *DeleteDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteDatabaseParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteDatabaseParam) GetForce() bool {
	return p.Force
}

// BootDatabaseParam is input parameters for the sacloud API
type BootDatabaseParam struct {
	input Input
}

// NewBootDatabaseParam return new BootDatabaseParam
func NewBootDatabaseParam() *BootDatabaseParam {
	return &BootDatabaseParam{}
}

// Initialize init BootDatabaseParam
func (p *BootDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BootDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BootDatabaseParam) fillValueToSkeleton() {

}

func (p *BootDatabaseParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *BootDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *BootDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["boot"]
}

func (p *BootDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BootDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BootDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BootDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ShutdownDatabaseParam is input parameters for the sacloud API
type ShutdownDatabaseParam struct {
	input Input
}

// NewShutdownDatabaseParam return new ShutdownDatabaseParam
func NewShutdownDatabaseParam() *ShutdownDatabaseParam {
	return &ShutdownDatabaseParam{}
}

// Initialize init ShutdownDatabaseParam
func (p *ShutdownDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShutdownDatabaseParam) fillValueToSkeleton() {

}

func (p *ShutdownDatabaseParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ShutdownDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *ShutdownDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown"]
}

func (p *ShutdownDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ShutdownForceDatabaseParam is input parameters for the sacloud API
type ShutdownForceDatabaseParam struct {
	input Input
}

// NewShutdownForceDatabaseParam return new ShutdownForceDatabaseParam
func NewShutdownForceDatabaseParam() *ShutdownForceDatabaseParam {
	return &ShutdownForceDatabaseParam{}
}

// Initialize init ShutdownForceDatabaseParam
func (p *ShutdownForceDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownForceDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShutdownForceDatabaseParam) fillValueToSkeleton() {

}

func (p *ShutdownForceDatabaseParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ShutdownForceDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *ShutdownForceDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown-force"]
}

func (p *ShutdownForceDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownForceDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownForceDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownForceDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ResetDatabaseParam is input parameters for the sacloud API
type ResetDatabaseParam struct {
	input Input
}

// NewResetDatabaseParam return new ResetDatabaseParam
func NewResetDatabaseParam() *ResetDatabaseParam {
	return &ResetDatabaseParam{}
}

// Initialize init ResetDatabaseParam
func (p *ResetDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResetDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResetDatabaseParam) fillValueToSkeleton() {

}

func (p *ResetDatabaseParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ResetDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *ResetDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["reset"]
}

func (p *ResetDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResetDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResetDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResetDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// WaitForBootDatabaseParam is input parameters for the sacloud API
type WaitForBootDatabaseParam struct {
	input Input
}

// NewWaitForBootDatabaseParam return new WaitForBootDatabaseParam
func NewWaitForBootDatabaseParam() *WaitForBootDatabaseParam {
	return &WaitForBootDatabaseParam{}
}

// Initialize init WaitForBootDatabaseParam
func (p *WaitForBootDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForBootDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForBootDatabaseParam) fillValueToSkeleton() {

}

func (p *WaitForBootDatabaseParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *WaitForBootDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *WaitForBootDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-boot"]
}

func (p *WaitForBootDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForBootDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForBootDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForBootDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// WaitForDownDatabaseParam is input parameters for the sacloud API
type WaitForDownDatabaseParam struct {
	input Input
}

// NewWaitForDownDatabaseParam return new WaitForDownDatabaseParam
func NewWaitForDownDatabaseParam() *WaitForDownDatabaseParam {
	return &WaitForDownDatabaseParam{}
}

// Initialize init WaitForDownDatabaseParam
func (p *WaitForDownDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForDownDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForDownDatabaseParam) fillValueToSkeleton() {

}

func (p *WaitForDownDatabaseParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *WaitForDownDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *WaitForDownDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-down"]
}

func (p *WaitForDownDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForDownDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForDownDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForDownDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// BackupInfoDatabaseParam is input parameters for the sacloud API
type BackupInfoDatabaseParam struct {
	input Input
}

// NewBackupInfoDatabaseParam return new BackupInfoDatabaseParam
func NewBackupInfoDatabaseParam() *BackupInfoDatabaseParam {
	return &BackupInfoDatabaseParam{}
}

// Initialize init BackupInfoDatabaseParam
func (p *BackupInfoDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BackupInfoDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BackupInfoDatabaseParam) fillValueToSkeleton() {

}

func (p *BackupInfoDatabaseParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *BackupInfoDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *BackupInfoDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["backup-info"]
}

func (p *BackupInfoDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BackupInfoDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BackupInfoDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BackupInfoDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// BackupCreateDatabaseParam is input parameters for the sacloud API
type BackupCreateDatabaseParam struct {
	input Input
}

// NewBackupCreateDatabaseParam return new BackupCreateDatabaseParam
func NewBackupCreateDatabaseParam() *BackupCreateDatabaseParam {
	return &BackupCreateDatabaseParam{}
}

// Initialize init BackupCreateDatabaseParam
func (p *BackupCreateDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BackupCreateDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BackupCreateDatabaseParam) fillValueToSkeleton() {

}

func (p *BackupCreateDatabaseParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *BackupCreateDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *BackupCreateDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["backup-create"]
}

func (p *BackupCreateDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BackupCreateDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BackupCreateDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BackupCreateDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// BackupRestoreDatabaseParam is input parameters for the sacloud API
type BackupRestoreDatabaseParam struct {
	Index int

	input Input
}

// NewBackupRestoreDatabaseParam return new BackupRestoreDatabaseParam
func NewBackupRestoreDatabaseParam() *BackupRestoreDatabaseParam {
	return &BackupRestoreDatabaseParam{}
}

// Initialize init BackupRestoreDatabaseParam
func (p *BackupRestoreDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BackupRestoreDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BackupRestoreDatabaseParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *BackupRestoreDatabaseParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["backup-restore"].Params["index"].ValidateFunc
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *BackupRestoreDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *BackupRestoreDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["backup-restore"]
}

func (p *BackupRestoreDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BackupRestoreDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BackupRestoreDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BackupRestoreDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *BackupRestoreDatabaseParam) SetIndex(v int) {
	p.Index = v
}

func (p *BackupRestoreDatabaseParam) GetIndex() int {
	return p.Index
}

// BackupLockDatabaseParam is input parameters for the sacloud API
type BackupLockDatabaseParam struct {
	Index int

	input Input
}

// NewBackupLockDatabaseParam return new BackupLockDatabaseParam
func NewBackupLockDatabaseParam() *BackupLockDatabaseParam {
	return &BackupLockDatabaseParam{}
}

// Initialize init BackupLockDatabaseParam
func (p *BackupLockDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BackupLockDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BackupLockDatabaseParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *BackupLockDatabaseParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["backup-lock"].Params["index"].ValidateFunc
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *BackupLockDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *BackupLockDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["backup-lock"]
}

func (p *BackupLockDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BackupLockDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BackupLockDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BackupLockDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *BackupLockDatabaseParam) SetIndex(v int) {
	p.Index = v
}

func (p *BackupLockDatabaseParam) GetIndex() int {
	return p.Index
}

// BackupUnlockDatabaseParam is input parameters for the sacloud API
type BackupUnlockDatabaseParam struct {
	Index int

	input Input
}

// NewBackupUnlockDatabaseParam return new BackupUnlockDatabaseParam
func NewBackupUnlockDatabaseParam() *BackupUnlockDatabaseParam {
	return &BackupUnlockDatabaseParam{}
}

// Initialize init BackupUnlockDatabaseParam
func (p *BackupUnlockDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BackupUnlockDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BackupUnlockDatabaseParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *BackupUnlockDatabaseParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["backup-unlock"].Params["index"].ValidateFunc
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *BackupUnlockDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *BackupUnlockDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["backup-unlock"]
}

func (p *BackupUnlockDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BackupUnlockDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BackupUnlockDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BackupUnlockDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *BackupUnlockDatabaseParam) SetIndex(v int) {
	p.Index = v
}

func (p *BackupUnlockDatabaseParam) GetIndex() int {
	return p.Index
}

// BackupRemoveDatabaseParam is input parameters for the sacloud API
type BackupRemoveDatabaseParam struct {
	Index int

	input Input
}

// NewBackupRemoveDatabaseParam return new BackupRemoveDatabaseParam
func NewBackupRemoveDatabaseParam() *BackupRemoveDatabaseParam {
	return &BackupRemoveDatabaseParam{}
}

// Initialize init BackupRemoveDatabaseParam
func (p *BackupRemoveDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BackupRemoveDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BackupRemoveDatabaseParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Index) {
		p.Index = 0
	}

}

func (p *BackupRemoveDatabaseParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["backup-remove"].Params["index"].ValidateFunc
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *BackupRemoveDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *BackupRemoveDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["backup-remove"]
}

func (p *BackupRemoveDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BackupRemoveDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BackupRemoveDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BackupRemoveDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *BackupRemoveDatabaseParam) SetIndex(v int) {
	p.Index = v
}

func (p *BackupRemoveDatabaseParam) GetIndex() int {
	return p.Index
}

// CloneDatabaseParam is input parameters for the sacloud API
type CloneDatabaseParam struct {
	Name                string
	Plan                int
	SourceNetworks      []string
	BackupWeekdays      []string
	Port                int
	Ipaddress1          string
	NwMaskLen           int
	DefaultRoute        string
	IconId              sacloud.ID
	EnableWebUi         bool
	BackupTime          string
	EnableBackup        bool
	Description         string
	Tags                []string
	SwitchId            sacloud.ID
	ReplicaUserPassword string

	input Input
}

// NewCloneDatabaseParam return new CloneDatabaseParam
func NewCloneDatabaseParam() *CloneDatabaseParam {
	return &CloneDatabaseParam{
		Plan: 10, BackupWeekdays: []string{"all"}}
}

// Initialize init CloneDatabaseParam
func (p *CloneDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CloneDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CloneDatabaseParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Plan) {
		p.Plan = 0
	}
	if utils.IsEmpty(p.SourceNetworks) {
		p.SourceNetworks = []string{""}
	}
	if utils.IsEmpty(p.BackupWeekdays) {
		p.BackupWeekdays = []string{""}
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.Ipaddress1) {
		p.Ipaddress1 = ""
	}
	if utils.IsEmpty(p.NwMaskLen) {
		p.NwMaskLen = 0
	}
	if utils.IsEmpty(p.DefaultRoute) {
		p.DefaultRoute = ""
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.EnableWebUi) {
		p.EnableWebUi = false
	}
	if utils.IsEmpty(p.BackupTime) {
		p.BackupTime = ""
	}
	if utils.IsEmpty(p.EnableBackup) {
		p.EnableBackup = false
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.ReplicaUserPassword) {
		p.ReplicaUserPassword = ""
	}

}

func (p *CloneDatabaseParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["clone"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["clone"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["clone"].Params["source-networks"].ValidateFunc
		errs := validator("--source-networks", p.SourceNetworks)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["clone"].Params["backup-weekdays"].ValidateFunc
		errs := validator("--backup-weekdays", p.BackupWeekdays)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["clone"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["clone"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["clone"].Params["nw-mask-len"].ValidateFunc
		errs := validator("--nw-mask-len", p.NwMaskLen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["clone"].Params["default-route"].ValidateFunc
		errs := validator("--default-route", p.DefaultRoute)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["clone"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["clone"].Params["backup-time"].ValidateFunc
		errs := validator("--backup-time", p.BackupTime)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["clone"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["clone"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["clone"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["clone"].Params["replica-user-password"].ValidateFunc
		errs := validator("--replica-user-password", p.ReplicaUserPassword)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CloneDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *CloneDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["clone"]
}

func (p *CloneDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CloneDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CloneDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CloneDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CloneDatabaseParam) SetName(v string) {
	p.Name = v
}

func (p *CloneDatabaseParam) GetName() string {
	return p.Name
}
func (p *CloneDatabaseParam) SetPlan(v int) {
	p.Plan = v
}

func (p *CloneDatabaseParam) GetPlan() int {
	return p.Plan
}
func (p *CloneDatabaseParam) SetSourceNetworks(v []string) {
	p.SourceNetworks = v
}

func (p *CloneDatabaseParam) GetSourceNetworks() []string {
	return p.SourceNetworks
}
func (p *CloneDatabaseParam) SetBackupWeekdays(v []string) {
	p.BackupWeekdays = v
}

func (p *CloneDatabaseParam) GetBackupWeekdays() []string {
	return p.BackupWeekdays
}
func (p *CloneDatabaseParam) SetPort(v int) {
	p.Port = v
}

func (p *CloneDatabaseParam) GetPort() int {
	return p.Port
}
func (p *CloneDatabaseParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *CloneDatabaseParam) GetIpaddress1() string {
	return p.Ipaddress1
}
func (p *CloneDatabaseParam) SetNwMaskLen(v int) {
	p.NwMaskLen = v
}

func (p *CloneDatabaseParam) GetNwMaskLen() int {
	return p.NwMaskLen
}
func (p *CloneDatabaseParam) SetDefaultRoute(v string) {
	p.DefaultRoute = v
}

func (p *CloneDatabaseParam) GetDefaultRoute() string {
	return p.DefaultRoute
}
func (p *CloneDatabaseParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CloneDatabaseParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CloneDatabaseParam) SetEnableWebUi(v bool) {
	p.EnableWebUi = v
}

func (p *CloneDatabaseParam) GetEnableWebUi() bool {
	return p.EnableWebUi
}
func (p *CloneDatabaseParam) SetBackupTime(v string) {
	p.BackupTime = v
}

func (p *CloneDatabaseParam) GetBackupTime() string {
	return p.BackupTime
}
func (p *CloneDatabaseParam) SetEnableBackup(v bool) {
	p.EnableBackup = v
}

func (p *CloneDatabaseParam) GetEnableBackup() bool {
	return p.EnableBackup
}
func (p *CloneDatabaseParam) SetDescription(v string) {
	p.Description = v
}

func (p *CloneDatabaseParam) GetDescription() string {
	return p.Description
}
func (p *CloneDatabaseParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CloneDatabaseParam) GetTags() []string {
	return p.Tags
}
func (p *CloneDatabaseParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *CloneDatabaseParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *CloneDatabaseParam) SetReplicaUserPassword(v string) {
	p.ReplicaUserPassword = v
}

func (p *CloneDatabaseParam) GetReplicaUserPassword() string {
	return p.ReplicaUserPassword
}

// ReplicaCreateDatabaseParam is input parameters for the sacloud API
type ReplicaCreateDatabaseParam struct {
	Description  string
	Tags         []string
	IconId       sacloud.ID
	SwitchId     sacloud.ID
	Ipaddress1   string
	NwMaskLen    int
	DefaultRoute string
	Name         string

	input Input
}

// NewReplicaCreateDatabaseParam return new ReplicaCreateDatabaseParam
func NewReplicaCreateDatabaseParam() *ReplicaCreateDatabaseParam {
	return &ReplicaCreateDatabaseParam{}
}

// Initialize init ReplicaCreateDatabaseParam
func (p *ReplicaCreateDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReplicaCreateDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReplicaCreateDatabaseParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Ipaddress1) {
		p.Ipaddress1 = ""
	}
	if utils.IsEmpty(p.NwMaskLen) {
		p.NwMaskLen = 0
	}
	if utils.IsEmpty(p.DefaultRoute) {
		p.DefaultRoute = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}

}

func (p *ReplicaCreateDatabaseParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Database"].Commands["replica-create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["replica-create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["replica-create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["replica-create"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["replica-create"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["replica-create"].Params["nw-mask-len"].ValidateFunc
		errs := validator("--nw-mask-len", p.NwMaskLen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["replica-create"].Params["default-route"].ValidateFunc
		errs := validator("--default-route", p.DefaultRoute)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["replica-create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ReplicaCreateDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *ReplicaCreateDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["replica-create"]
}

func (p *ReplicaCreateDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReplicaCreateDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReplicaCreateDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReplicaCreateDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReplicaCreateDatabaseParam) SetDescription(v string) {
	p.Description = v
}

func (p *ReplicaCreateDatabaseParam) GetDescription() string {
	return p.Description
}
func (p *ReplicaCreateDatabaseParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ReplicaCreateDatabaseParam) GetTags() []string {
	return p.Tags
}
func (p *ReplicaCreateDatabaseParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *ReplicaCreateDatabaseParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *ReplicaCreateDatabaseParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *ReplicaCreateDatabaseParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *ReplicaCreateDatabaseParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *ReplicaCreateDatabaseParam) GetIpaddress1() string {
	return p.Ipaddress1
}
func (p *ReplicaCreateDatabaseParam) SetNwMaskLen(v int) {
	p.NwMaskLen = v
}

func (p *ReplicaCreateDatabaseParam) GetNwMaskLen() int {
	return p.NwMaskLen
}
func (p *ReplicaCreateDatabaseParam) SetDefaultRoute(v string) {
	p.DefaultRoute = v
}

func (p *ReplicaCreateDatabaseParam) GetDefaultRoute() string {
	return p.DefaultRoute
}
func (p *ReplicaCreateDatabaseParam) SetName(v string) {
	p.Name = v
}

func (p *ReplicaCreateDatabaseParam) GetName() string {
	return p.Name
}

// MonitorCPUDatabaseParam is input parameters for the sacloud API
type MonitorCPUDatabaseParam struct {
	Start     string
	End       string
	KeyFormat string

	input Input
}

// NewMonitorCPUDatabaseParam return new MonitorCPUDatabaseParam
func NewMonitorCPUDatabaseParam() *MonitorCPUDatabaseParam {
	return &MonitorCPUDatabaseParam{
		KeyFormat: "sakuracloud.database.{{.ID}}.cpu"}
}

// Initialize init MonitorCPUDatabaseParam
func (p *MonitorCPUDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorCPUDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorCPUDatabaseParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}

}

func (p *MonitorCPUDatabaseParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Database"].Commands["monitor-cpu"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["monitor-cpu"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorCPUDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *MonitorCPUDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor-cpu"]
}

func (p *MonitorCPUDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorCPUDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorCPUDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorCPUDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorCPUDatabaseParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorCPUDatabaseParam) GetStart() string {
	return p.Start
}
func (p *MonitorCPUDatabaseParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorCPUDatabaseParam) GetEnd() string {
	return p.End
}
func (p *MonitorCPUDatabaseParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorCPUDatabaseParam) GetKeyFormat() string {
	return p.KeyFormat
}

// MonitorMemoryDatabaseParam is input parameters for the sacloud API
type MonitorMemoryDatabaseParam struct {
	Start     string
	End       string
	KeyFormat string

	input Input
}

// NewMonitorMemoryDatabaseParam return new MonitorMemoryDatabaseParam
func NewMonitorMemoryDatabaseParam() *MonitorMemoryDatabaseParam {
	return &MonitorMemoryDatabaseParam{
		KeyFormat: "sakuracloud.database.{{.ID}}.memory"}
}

// Initialize init MonitorMemoryDatabaseParam
func (p *MonitorMemoryDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorMemoryDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorMemoryDatabaseParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}

}

func (p *MonitorMemoryDatabaseParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Database"].Commands["monitor-memory"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["monitor-memory"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorMemoryDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *MonitorMemoryDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor-memory"]
}

func (p *MonitorMemoryDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorMemoryDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorMemoryDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorMemoryDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorMemoryDatabaseParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorMemoryDatabaseParam) GetStart() string {
	return p.Start
}
func (p *MonitorMemoryDatabaseParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorMemoryDatabaseParam) GetEnd() string {
	return p.End
}
func (p *MonitorMemoryDatabaseParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorMemoryDatabaseParam) GetKeyFormat() string {
	return p.KeyFormat
}

// MonitorNicDatabaseParam is input parameters for the sacloud API
type MonitorNicDatabaseParam struct {
	KeyFormat string
	Start     string
	End       string

	input Input
}

// NewMonitorNicDatabaseParam return new MonitorNicDatabaseParam
func NewMonitorNicDatabaseParam() *MonitorNicDatabaseParam {
	return &MonitorNicDatabaseParam{
		KeyFormat: "sakuracloud.database.{{.ID}}.nic"}
}

// Initialize init MonitorNicDatabaseParam
func (p *MonitorNicDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorNicDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorNicDatabaseParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}

}

func (p *MonitorNicDatabaseParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["monitor-nic"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["monitor-nic"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorNicDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *MonitorNicDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor-nic"]
}

func (p *MonitorNicDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorNicDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorNicDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorNicDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorNicDatabaseParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorNicDatabaseParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorNicDatabaseParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorNicDatabaseParam) GetStart() string {
	return p.Start
}
func (p *MonitorNicDatabaseParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorNicDatabaseParam) GetEnd() string {
	return p.End
}

// MonitorSystemDiskDatabaseParam is input parameters for the sacloud API
type MonitorSystemDiskDatabaseParam struct {
	Start     string
	End       string
	KeyFormat string

	input Input
}

// NewMonitorSystemDiskDatabaseParam return new MonitorSystemDiskDatabaseParam
func NewMonitorSystemDiskDatabaseParam() *MonitorSystemDiskDatabaseParam {
	return &MonitorSystemDiskDatabaseParam{
		KeyFormat: "sakuracloud.database.{{.ID}}.disk1"}
}

// Initialize init MonitorSystemDiskDatabaseParam
func (p *MonitorSystemDiskDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorSystemDiskDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorSystemDiskDatabaseParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}

}

func (p *MonitorSystemDiskDatabaseParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Database"].Commands["monitor-system-disk"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["monitor-system-disk"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorSystemDiskDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *MonitorSystemDiskDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor-system-disk"]
}

func (p *MonitorSystemDiskDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorSystemDiskDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorSystemDiskDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorSystemDiskDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorSystemDiskDatabaseParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorSystemDiskDatabaseParam) GetStart() string {
	return p.Start
}
func (p *MonitorSystemDiskDatabaseParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorSystemDiskDatabaseParam) GetEnd() string {
	return p.End
}
func (p *MonitorSystemDiskDatabaseParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorSystemDiskDatabaseParam) GetKeyFormat() string {
	return p.KeyFormat
}

// MonitorBackupDiskDatabaseParam is input parameters for the sacloud API
type MonitorBackupDiskDatabaseParam struct {
	End       string
	KeyFormat string
	Start     string

	input Input
}

// NewMonitorBackupDiskDatabaseParam return new MonitorBackupDiskDatabaseParam
func NewMonitorBackupDiskDatabaseParam() *MonitorBackupDiskDatabaseParam {
	return &MonitorBackupDiskDatabaseParam{
		KeyFormat: "sakuracloud.database.{{.ID}}.disk2"}
}

// Initialize init MonitorBackupDiskDatabaseParam
func (p *MonitorBackupDiskDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorBackupDiskDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorBackupDiskDatabaseParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}

}

func (p *MonitorBackupDiskDatabaseParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Database"].Commands["monitor-backup-disk"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["monitor-backup-disk"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorBackupDiskDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *MonitorBackupDiskDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor-backup-disk"]
}

func (p *MonitorBackupDiskDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorBackupDiskDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorBackupDiskDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorBackupDiskDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorBackupDiskDatabaseParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorBackupDiskDatabaseParam) GetEnd() string {
	return p.End
}
func (p *MonitorBackupDiskDatabaseParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorBackupDiskDatabaseParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorBackupDiskDatabaseParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorBackupDiskDatabaseParam) GetStart() string {
	return p.Start
}

// MonitorSystemDiskSizeDatabaseParam is input parameters for the sacloud API
type MonitorSystemDiskSizeDatabaseParam struct {
	KeyFormat string
	Start     string
	End       string

	input Input
}

// NewMonitorSystemDiskSizeDatabaseParam return new MonitorSystemDiskSizeDatabaseParam
func NewMonitorSystemDiskSizeDatabaseParam() *MonitorSystemDiskSizeDatabaseParam {
	return &MonitorSystemDiskSizeDatabaseParam{
		KeyFormat: "sakuracloud.database.{{.ID}}.disk1"}
}

// Initialize init MonitorSystemDiskSizeDatabaseParam
func (p *MonitorSystemDiskSizeDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorSystemDiskSizeDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorSystemDiskSizeDatabaseParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}

}

func (p *MonitorSystemDiskSizeDatabaseParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["monitor-system-disk-size"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["monitor-system-disk-size"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorSystemDiskSizeDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *MonitorSystemDiskSizeDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor-system-disk-size"]
}

func (p *MonitorSystemDiskSizeDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorSystemDiskSizeDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorSystemDiskSizeDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorSystemDiskSizeDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorSystemDiskSizeDatabaseParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorSystemDiskSizeDatabaseParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorSystemDiskSizeDatabaseParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorSystemDiskSizeDatabaseParam) GetStart() string {
	return p.Start
}
func (p *MonitorSystemDiskSizeDatabaseParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorSystemDiskSizeDatabaseParam) GetEnd() string {
	return p.End
}

// MonitorBackupDiskSizeDatabaseParam is input parameters for the sacloud API
type MonitorBackupDiskSizeDatabaseParam struct {
	End       string
	KeyFormat string
	Start     string

	input Input
}

// NewMonitorBackupDiskSizeDatabaseParam return new MonitorBackupDiskSizeDatabaseParam
func NewMonitorBackupDiskSizeDatabaseParam() *MonitorBackupDiskSizeDatabaseParam {
	return &MonitorBackupDiskSizeDatabaseParam{
		KeyFormat: "sakuracloud.database.{{.ID}}.disk2"}
}

// Initialize init MonitorBackupDiskSizeDatabaseParam
func (p *MonitorBackupDiskSizeDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorBackupDiskSizeDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorBackupDiskSizeDatabaseParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}

}

func (p *MonitorBackupDiskSizeDatabaseParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Database"].Commands["monitor-backup-disk-size"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Database"].Commands["monitor-backup-disk-size"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorBackupDiskSizeDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *MonitorBackupDiskSizeDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor-backup-disk-size"]
}

func (p *MonitorBackupDiskSizeDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorBackupDiskSizeDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorBackupDiskSizeDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorBackupDiskSizeDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorBackupDiskSizeDatabaseParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorBackupDiskSizeDatabaseParam) GetEnd() string {
	return p.End
}
func (p *MonitorBackupDiskSizeDatabaseParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorBackupDiskSizeDatabaseParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorBackupDiskSizeDatabaseParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorBackupDiskSizeDatabaseParam) GetStart() string {
	return p.Start
}

// LogsDatabaseParam is input parameters for the sacloud API
type LogsDatabaseParam struct {
	LogName         string
	Follow          bool
	RefreshInterval sacloud.ID
	ListLogNames    bool

	input Input
}

// NewLogsDatabaseParam return new LogsDatabaseParam
func NewLogsDatabaseParam() *LogsDatabaseParam {
	return &LogsDatabaseParam{
		LogName: "all", RefreshInterval: 0}
}

// Initialize init LogsDatabaseParam
func (p *LogsDatabaseParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *LogsDatabaseParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *LogsDatabaseParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.LogName) {
		p.LogName = ""
	}
	if utils.IsEmpty(p.Follow) {
		p.Follow = false
	}
	if utils.IsEmpty(p.RefreshInterval) {
		p.RefreshInterval = sacloud.ID(0)
	}
	if utils.IsEmpty(p.ListLogNames) {
		p.ListLogNames = false
	}

}

func (p *LogsDatabaseParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Database"].Commands["logs"].Params["refresh-interval"].ValidateFunc
		errs := validator("--refresh-interval", p.RefreshInterval)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *LogsDatabaseParam) ResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *LogsDatabaseParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["logs"]
}

func (p *LogsDatabaseParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *LogsDatabaseParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *LogsDatabaseParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *LogsDatabaseParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *LogsDatabaseParam) SetLogName(v string) {
	p.LogName = v
}

func (p *LogsDatabaseParam) GetLogName() string {
	return p.LogName
}
func (p *LogsDatabaseParam) SetFollow(v bool) {
	p.Follow = v
}

func (p *LogsDatabaseParam) GetFollow() bool {
	return p.Follow
}
func (p *LogsDatabaseParam) SetRefreshInterval(v sacloud.ID) {
	p.RefreshInterval = v
}

func (p *LogsDatabaseParam) GetRefreshInterval() sacloud.ID {
	return p.RefreshInterval
}
func (p *LogsDatabaseParam) SetListLogNames(v bool) {
	p.ListLogNames = v
}

func (p *LogsDatabaseParam) GetListLogNames() bool {
	return p.ListLogNames
}

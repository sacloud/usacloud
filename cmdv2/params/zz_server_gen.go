// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListServerParam is input parameters for the sacloud API
type ListServerParam struct {
	Name []string
	Id   []sacloud.ID
	From int
	Max  int
	Sort []string
	Tags []string

	input Input
}

// NewListServerParam return new ListServerParam
func NewListServerParam() *ListServerParam {
	return &ListServerParam{}
}

// Initialize init ListServerParam
func (p *ListServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}

}

func (p *ListServerParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *ListServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListServerParam) SetName(v []string) {
	p.Name = v
}

func (p *ListServerParam) GetName() []string {
	return p.Name
}
func (p *ListServerParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListServerParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListServerParam) SetFrom(v int) {
	p.From = v
}

func (p *ListServerParam) GetFrom() int {
	return p.From
}
func (p *ListServerParam) SetMax(v int) {
	p.Max = v
}

func (p *ListServerParam) GetMax() int {
	return p.Max
}
func (p *ListServerParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListServerParam) GetSort() []string {
	return p.Sort
}
func (p *ListServerParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListServerParam) GetTags() []string {
	return p.Tags
}

// BuildServerParam is input parameters for the sacloud API
type BuildServerParam struct {
	SSHKeyPrivateKeyOutput  string
	Name                    string
	IconId                  sacloud.ID
	Memory                  int
	DiskMode                string
	SourceDiskId            sacloud.ID
	Ipaddress               string
	NetworkMode             string
	Hostname                string
	SSHKeyPassPhrase        string
	PacketFilterId          sacloud.ID
	SSHKeyPublicKeys        []string
	SSHKeyPublicKeyFiles    []string
	StartupScriptIds        []sacloud.ID
	SSHKeyIds               []sacloud.ID
	OsType                  string
	DiskConnection          string
	DistantFrom             []sacloud.ID
	ISOImageId              sacloud.ID
	DisablePasswordAuth     bool
	SSHKeyMode              string
	SSHKeyDescription       string
	DiskPlan                string
	DiskSize                int
	DiskId                  sacloud.ID
	Password                string
	Description             string
	InterfaceDriver         string
	DefaultRoute            string
	StartupScripts          []string
	StartupScriptsEphemeral bool
	SSHKeyName              string
	SSHKeyEphemeral         bool
	UsKeyboard              bool
	Core                    int
	Commitment              string
	PrivateHostId           sacloud.ID
	NwMasklen               int
	SourceArchiveId         sacloud.ID
	SwitchId                sacloud.ID
	Tags                    []string
	DisableBootAfterCreate  bool

	input Input
}

// NewBuildServerParam return new BuildServerParam
func NewBuildServerParam() *BuildServerParam {
	return &BuildServerParam{
		Memory: 1, DiskMode: "create", NetworkMode: "shared", DiskConnection: "virtio", DiskPlan: "ssd", DiskSize: 20, InterfaceDriver: "virtio", StartupScriptsEphemeral: true, SSHKeyEphemeral: true, Core: 1, Commitment: "standard", NwMasklen: 24}
}

// Initialize init BuildServerParam
func (p *BuildServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BuildServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BuildServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.SSHKeyPrivateKeyOutput) {
		p.SSHKeyPrivateKeyOutput = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Memory) {
		p.Memory = 0
	}
	if utils.IsEmpty(p.DiskMode) {
		p.DiskMode = ""
	}
	if utils.IsEmpty(p.SourceDiskId) {
		p.SourceDiskId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.NetworkMode) {
		p.NetworkMode = ""
	}
	if utils.IsEmpty(p.Hostname) {
		p.Hostname = ""
	}
	if utils.IsEmpty(p.SSHKeyPassPhrase) {
		p.SSHKeyPassPhrase = ""
	}
	if utils.IsEmpty(p.PacketFilterId) {
		p.PacketFilterId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.SSHKeyPublicKeys) {
		p.SSHKeyPublicKeys = []string{""}
	}
	if utils.IsEmpty(p.SSHKeyPublicKeyFiles) {
		p.SSHKeyPublicKeyFiles = []string{""}
	}
	if utils.IsEmpty(p.StartupScriptIds) {
		p.StartupScriptIds = []sacloud.ID{}
	}
	if utils.IsEmpty(p.SSHKeyIds) {
		p.SSHKeyIds = []sacloud.ID{}
	}
	if utils.IsEmpty(p.OsType) {
		p.OsType = ""
	}
	if utils.IsEmpty(p.DiskConnection) {
		p.DiskConnection = ""
	}
	if utils.IsEmpty(p.DistantFrom) {
		p.DistantFrom = []sacloud.ID{}
	}
	if utils.IsEmpty(p.ISOImageId) {
		p.ISOImageId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.DisablePasswordAuth) {
		p.DisablePasswordAuth = false
	}
	if utils.IsEmpty(p.SSHKeyMode) {
		p.SSHKeyMode = ""
	}
	if utils.IsEmpty(p.SSHKeyDescription) {
		p.SSHKeyDescription = ""
	}
	if utils.IsEmpty(p.DiskPlan) {
		p.DiskPlan = ""
	}
	if utils.IsEmpty(p.DiskSize) {
		p.DiskSize = 0
	}
	if utils.IsEmpty(p.DiskId) {
		p.DiskId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Password) {
		p.Password = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.InterfaceDriver) {
		p.InterfaceDriver = ""
	}
	if utils.IsEmpty(p.DefaultRoute) {
		p.DefaultRoute = ""
	}
	if utils.IsEmpty(p.StartupScripts) {
		p.StartupScripts = []string{""}
	}
	if utils.IsEmpty(p.StartupScriptsEphemeral) {
		p.StartupScriptsEphemeral = false
	}
	if utils.IsEmpty(p.SSHKeyName) {
		p.SSHKeyName = ""
	}
	if utils.IsEmpty(p.SSHKeyEphemeral) {
		p.SSHKeyEphemeral = false
	}
	if utils.IsEmpty(p.UsKeyboard) {
		p.UsKeyboard = false
	}
	if utils.IsEmpty(p.Core) {
		p.Core = 0
	}
	if utils.IsEmpty(p.Commitment) {
		p.Commitment = ""
	}
	if utils.IsEmpty(p.PrivateHostId) {
		p.PrivateHostId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}
	if utils.IsEmpty(p.SourceArchiveId) {
		p.SourceArchiveId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.DisableBootAfterCreate) {
		p.DisableBootAfterCreate = false
	}

}

func (p *BuildServerParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--memory", p.Memory)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--disk-mode", p.DiskMode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["disk-mode"].ValidateFunc
		errs := validator("--disk-mode", p.DiskMode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["source-disk-id"].ValidateFunc
		errs := validator("--source-disk-id", p.SourceDiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--network-mode", p.NetworkMode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["network-mode"].ValidateFunc
		errs := validator("--network-mode", p.NetworkMode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["ssh-key-pass-phrase"].ValidateFunc
		errs := validator("--ssh-key-pass-phrase", p.SSHKeyPassPhrase)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["packet-filter-id"].ValidateFunc
		errs := validator("--packet-filter-id", p.PacketFilterId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["ssh-key-public-key-files"].ValidateFunc
		errs := validator("--ssh-key-public-key-files", p.SSHKeyPublicKeyFiles)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["startup-script-ids"].ValidateFunc
		errs := validator("--startup-script-ids", p.StartupScriptIds)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["ssh-key-ids"].ValidateFunc
		errs := validator("--ssh-key-ids", p.SSHKeyIds)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["os-type"].ValidateFunc
		errs := validator("--os-type", p.OsType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["disk-connection"].ValidateFunc
		errs := validator("--disk-connection", p.DiskConnection)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["distant-from"].ValidateFunc
		errs := validator("--distant-from", p.DistantFrom)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["iso-image-id"].ValidateFunc
		errs := validator("--iso-image-id", p.ISOImageId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["ssh-key-mode"].ValidateFunc
		errs := validator("--ssh-key-mode", p.SSHKeyMode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["disk-plan"].ValidateFunc
		errs := validator("--disk-plan", p.DiskPlan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["disk-size"].ValidateFunc
		errs := validator("--disk-size", p.DiskSize)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["disk-id"].ValidateFunc
		errs := validator("--disk-id", p.DiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["interface-driver"].ValidateFunc
		errs := validator("--interface-driver", p.InterfaceDriver)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["default-route"].ValidateFunc
		errs := validator("--default-route", p.DefaultRoute)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--core", p.Core)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["commitment"].ValidateFunc
		errs := validator("--commitment", p.Commitment)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["private-host-id"].ValidateFunc
		errs := validator("--private-host-id", p.PrivateHostId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["source-archive-id"].ValidateFunc
		errs := validator("--source-archive-id", p.SourceArchiveId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["build"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *BuildServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *BuildServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["build"]
}

func (p *BuildServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BuildServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BuildServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BuildServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *BuildServerParam) SetSSHKeyPrivateKeyOutput(v string) {
	p.SSHKeyPrivateKeyOutput = v
}

func (p *BuildServerParam) GetSSHKeyPrivateKeyOutput() string {
	return p.SSHKeyPrivateKeyOutput
}
func (p *BuildServerParam) SetName(v string) {
	p.Name = v
}

func (p *BuildServerParam) GetName() string {
	return p.Name
}
func (p *BuildServerParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *BuildServerParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *BuildServerParam) SetMemory(v int) {
	p.Memory = v
}

func (p *BuildServerParam) GetMemory() int {
	return p.Memory
}
func (p *BuildServerParam) SetDiskMode(v string) {
	p.DiskMode = v
}

func (p *BuildServerParam) GetDiskMode() string {
	return p.DiskMode
}
func (p *BuildServerParam) SetSourceDiskId(v sacloud.ID) {
	p.SourceDiskId = v
}

func (p *BuildServerParam) GetSourceDiskId() sacloud.ID {
	return p.SourceDiskId
}
func (p *BuildServerParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *BuildServerParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *BuildServerParam) SetNetworkMode(v string) {
	p.NetworkMode = v
}

func (p *BuildServerParam) GetNetworkMode() string {
	return p.NetworkMode
}
func (p *BuildServerParam) SetHostname(v string) {
	p.Hostname = v
}

func (p *BuildServerParam) GetHostname() string {
	return p.Hostname
}
func (p *BuildServerParam) SetSSHKeyPassPhrase(v string) {
	p.SSHKeyPassPhrase = v
}

func (p *BuildServerParam) GetSSHKeyPassPhrase() string {
	return p.SSHKeyPassPhrase
}
func (p *BuildServerParam) SetPacketFilterId(v sacloud.ID) {
	p.PacketFilterId = v
}

func (p *BuildServerParam) GetPacketFilterId() sacloud.ID {
	return p.PacketFilterId
}
func (p *BuildServerParam) SetSSHKeyPublicKeys(v []string) {
	p.SSHKeyPublicKeys = v
}

func (p *BuildServerParam) GetSSHKeyPublicKeys() []string {
	return p.SSHKeyPublicKeys
}
func (p *BuildServerParam) SetSSHKeyPublicKeyFiles(v []string) {
	p.SSHKeyPublicKeyFiles = v
}

func (p *BuildServerParam) GetSSHKeyPublicKeyFiles() []string {
	return p.SSHKeyPublicKeyFiles
}
func (p *BuildServerParam) SetStartupScriptIds(v []sacloud.ID) {
	p.StartupScriptIds = v
}

func (p *BuildServerParam) GetStartupScriptIds() []sacloud.ID {
	return p.StartupScriptIds
}
func (p *BuildServerParam) SetSSHKeyIds(v []sacloud.ID) {
	p.SSHKeyIds = v
}

func (p *BuildServerParam) GetSSHKeyIds() []sacloud.ID {
	return p.SSHKeyIds
}
func (p *BuildServerParam) SetOsType(v string) {
	p.OsType = v
}

func (p *BuildServerParam) GetOsType() string {
	return p.OsType
}
func (p *BuildServerParam) SetDiskConnection(v string) {
	p.DiskConnection = v
}

func (p *BuildServerParam) GetDiskConnection() string {
	return p.DiskConnection
}
func (p *BuildServerParam) SetDistantFrom(v []sacloud.ID) {
	p.DistantFrom = v
}

func (p *BuildServerParam) GetDistantFrom() []sacloud.ID {
	return p.DistantFrom
}
func (p *BuildServerParam) SetISOImageId(v sacloud.ID) {
	p.ISOImageId = v
}

func (p *BuildServerParam) GetISOImageId() sacloud.ID {
	return p.ISOImageId
}
func (p *BuildServerParam) SetDisablePasswordAuth(v bool) {
	p.DisablePasswordAuth = v
}

func (p *BuildServerParam) GetDisablePasswordAuth() bool {
	return p.DisablePasswordAuth
}
func (p *BuildServerParam) SetSSHKeyMode(v string) {
	p.SSHKeyMode = v
}

func (p *BuildServerParam) GetSSHKeyMode() string {
	return p.SSHKeyMode
}
func (p *BuildServerParam) SetSSHKeyDescription(v string) {
	p.SSHKeyDescription = v
}

func (p *BuildServerParam) GetSSHKeyDescription() string {
	return p.SSHKeyDescription
}
func (p *BuildServerParam) SetDiskPlan(v string) {
	p.DiskPlan = v
}

func (p *BuildServerParam) GetDiskPlan() string {
	return p.DiskPlan
}
func (p *BuildServerParam) SetDiskSize(v int) {
	p.DiskSize = v
}

func (p *BuildServerParam) GetDiskSize() int {
	return p.DiskSize
}
func (p *BuildServerParam) SetDiskId(v sacloud.ID) {
	p.DiskId = v
}

func (p *BuildServerParam) GetDiskId() sacloud.ID {
	return p.DiskId
}
func (p *BuildServerParam) SetPassword(v string) {
	p.Password = v
}

func (p *BuildServerParam) GetPassword() string {
	return p.Password
}
func (p *BuildServerParam) SetDescription(v string) {
	p.Description = v
}

func (p *BuildServerParam) GetDescription() string {
	return p.Description
}
func (p *BuildServerParam) SetInterfaceDriver(v string) {
	p.InterfaceDriver = v
}

func (p *BuildServerParam) GetInterfaceDriver() string {
	return p.InterfaceDriver
}
func (p *BuildServerParam) SetDefaultRoute(v string) {
	p.DefaultRoute = v
}

func (p *BuildServerParam) GetDefaultRoute() string {
	return p.DefaultRoute
}
func (p *BuildServerParam) SetStartupScripts(v []string) {
	p.StartupScripts = v
}

func (p *BuildServerParam) GetStartupScripts() []string {
	return p.StartupScripts
}
func (p *BuildServerParam) SetStartupScriptsEphemeral(v bool) {
	p.StartupScriptsEphemeral = v
}

func (p *BuildServerParam) GetStartupScriptsEphemeral() bool {
	return p.StartupScriptsEphemeral
}
func (p *BuildServerParam) SetSSHKeyName(v string) {
	p.SSHKeyName = v
}

func (p *BuildServerParam) GetSSHKeyName() string {
	return p.SSHKeyName
}
func (p *BuildServerParam) SetSSHKeyEphemeral(v bool) {
	p.SSHKeyEphemeral = v
}

func (p *BuildServerParam) GetSSHKeyEphemeral() bool {
	return p.SSHKeyEphemeral
}
func (p *BuildServerParam) SetUsKeyboard(v bool) {
	p.UsKeyboard = v
}

func (p *BuildServerParam) GetUsKeyboard() bool {
	return p.UsKeyboard
}
func (p *BuildServerParam) SetCore(v int) {
	p.Core = v
}

func (p *BuildServerParam) GetCore() int {
	return p.Core
}
func (p *BuildServerParam) SetCommitment(v string) {
	p.Commitment = v
}

func (p *BuildServerParam) GetCommitment() string {
	return p.Commitment
}
func (p *BuildServerParam) SetPrivateHostId(v sacloud.ID) {
	p.PrivateHostId = v
}

func (p *BuildServerParam) GetPrivateHostId() sacloud.ID {
	return p.PrivateHostId
}
func (p *BuildServerParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *BuildServerParam) GetNwMasklen() int {
	return p.NwMasklen
}
func (p *BuildServerParam) SetSourceArchiveId(v sacloud.ID) {
	p.SourceArchiveId = v
}

func (p *BuildServerParam) GetSourceArchiveId() sacloud.ID {
	return p.SourceArchiveId
}
func (p *BuildServerParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *BuildServerParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *BuildServerParam) SetTags(v []string) {
	p.Tags = v
}

func (p *BuildServerParam) GetTags() []string {
	return p.Tags
}
func (p *BuildServerParam) SetDisableBootAfterCreate(v bool) {
	p.DisableBootAfterCreate = v
}

func (p *BuildServerParam) GetDisableBootAfterCreate() bool {
	return p.DisableBootAfterCreate
}

// ReadServerParam is input parameters for the sacloud API
type ReadServerParam struct {
	input Input
}

// NewReadServerParam return new ReadServerParam
func NewReadServerParam() *ReadServerParam {
	return &ReadServerParam{}
}

// Initialize init ReadServerParam
func (p *ReadServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadServerParam) fillValueToSkeleton() {

}

func (p *ReadServerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *ReadServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdateServerParam is input parameters for the sacloud API
type UpdateServerParam struct {
	InterfaceDriver string
	Name            string
	Description     string
	Tags            []string
	IconId          sacloud.ID

	input Input
}

// NewUpdateServerParam return new UpdateServerParam
func NewUpdateServerParam() *UpdateServerParam {
	return &UpdateServerParam{
		InterfaceDriver: "virtio"}
}

// Initialize init UpdateServerParam
func (p *UpdateServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.InterfaceDriver) {
		p.InterfaceDriver = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}

}

func (p *UpdateServerParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Server"].Commands["update"].Params["interface-driver"].ValidateFunc
		errs := validator("--interface-driver", p.InterfaceDriver)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *UpdateServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateServerParam) SetInterfaceDriver(v string) {
	p.InterfaceDriver = v
}

func (p *UpdateServerParam) GetInterfaceDriver() string {
	return p.InterfaceDriver
}
func (p *UpdateServerParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateServerParam) GetName() string {
	return p.Name
}
func (p *UpdateServerParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateServerParam) GetDescription() string {
	return p.Description
}
func (p *UpdateServerParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateServerParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateServerParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateServerParam) GetIconId() sacloud.ID {
	return p.IconId
}

// DeleteServerParam is input parameters for the sacloud API
type DeleteServerParam struct {
	Force       bool
	WithoutDisk bool

	input Input
}

// NewDeleteServerParam return new DeleteServerParam
func NewDeleteServerParam() *DeleteServerParam {
	return &DeleteServerParam{}
}

// Initialize init DeleteServerParam
func (p *DeleteServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Force) {
		p.Force = false
	}
	if utils.IsEmpty(p.WithoutDisk) {
		p.WithoutDisk = false
	}

}

func (p *DeleteServerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *DeleteServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteServerParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteServerParam) GetForce() bool {
	return p.Force
}
func (p *DeleteServerParam) SetWithoutDisk(v bool) {
	p.WithoutDisk = v
}

func (p *DeleteServerParam) GetWithoutDisk() bool {
	return p.WithoutDisk
}

// PlanChangeServerParam is input parameters for the sacloud API
type PlanChangeServerParam struct {
	Core       int
	Memory     int
	Commitment string

	input Input
}

// NewPlanChangeServerParam return new PlanChangeServerParam
func NewPlanChangeServerParam() *PlanChangeServerParam {
	return &PlanChangeServerParam{
		Commitment: "standard"}
}

// Initialize init PlanChangeServerParam
func (p *PlanChangeServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PlanChangeServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PlanChangeServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Core) {
		p.Core = 0
	}
	if utils.IsEmpty(p.Memory) {
		p.Memory = 0
	}
	if utils.IsEmpty(p.Commitment) {
		p.Commitment = ""
	}

}

func (p *PlanChangeServerParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--core", p.Core)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--memory", p.Memory)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["plan-change"].Params["commitment"].ValidateFunc
		errs := validator("--commitment", p.Commitment)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PlanChangeServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *PlanChangeServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["plan-change"]
}

func (p *PlanChangeServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PlanChangeServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PlanChangeServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PlanChangeServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PlanChangeServerParam) SetCore(v int) {
	p.Core = v
}

func (p *PlanChangeServerParam) GetCore() int {
	return p.Core
}
func (p *PlanChangeServerParam) SetMemory(v int) {
	p.Memory = v
}

func (p *PlanChangeServerParam) GetMemory() int {
	return p.Memory
}
func (p *PlanChangeServerParam) SetCommitment(v string) {
	p.Commitment = v
}

func (p *PlanChangeServerParam) GetCommitment() string {
	return p.Commitment
}

// BootServerParam is input parameters for the sacloud API
type BootServerParam struct {
	input Input
}

// NewBootServerParam return new BootServerParam
func NewBootServerParam() *BootServerParam {
	return &BootServerParam{}
}

// Initialize init BootServerParam
func (p *BootServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BootServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BootServerParam) fillValueToSkeleton() {

}

func (p *BootServerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *BootServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *BootServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["boot"]
}

func (p *BootServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BootServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BootServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BootServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ShutdownServerParam is input parameters for the sacloud API
type ShutdownServerParam struct {
	input Input
}

// NewShutdownServerParam return new ShutdownServerParam
func NewShutdownServerParam() *ShutdownServerParam {
	return &ShutdownServerParam{}
}

// Initialize init ShutdownServerParam
func (p *ShutdownServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShutdownServerParam) fillValueToSkeleton() {

}

func (p *ShutdownServerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ShutdownServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *ShutdownServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown"]
}

func (p *ShutdownServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ShutdownForceServerParam is input parameters for the sacloud API
type ShutdownForceServerParam struct {
	input Input
}

// NewShutdownForceServerParam return new ShutdownForceServerParam
func NewShutdownForceServerParam() *ShutdownForceServerParam {
	return &ShutdownForceServerParam{}
}

// Initialize init ShutdownForceServerParam
func (p *ShutdownForceServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownForceServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShutdownForceServerParam) fillValueToSkeleton() {

}

func (p *ShutdownForceServerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ShutdownForceServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *ShutdownForceServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown-force"]
}

func (p *ShutdownForceServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownForceServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownForceServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownForceServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ResetServerParam is input parameters for the sacloud API
type ResetServerParam struct {
	input Input
}

// NewResetServerParam return new ResetServerParam
func NewResetServerParam() *ResetServerParam {
	return &ResetServerParam{}
}

// Initialize init ResetServerParam
func (p *ResetServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResetServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResetServerParam) fillValueToSkeleton() {

}

func (p *ResetServerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ResetServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *ResetServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["reset"]
}

func (p *ResetServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResetServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResetServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResetServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// WaitForBootServerParam is input parameters for the sacloud API
type WaitForBootServerParam struct {
	input Input
}

// NewWaitForBootServerParam return new WaitForBootServerParam
func NewWaitForBootServerParam() *WaitForBootServerParam {
	return &WaitForBootServerParam{}
}

// Initialize init WaitForBootServerParam
func (p *WaitForBootServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForBootServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForBootServerParam) fillValueToSkeleton() {

}

func (p *WaitForBootServerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *WaitForBootServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *WaitForBootServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-boot"]
}

func (p *WaitForBootServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForBootServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForBootServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForBootServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// WaitForDownServerParam is input parameters for the sacloud API
type WaitForDownServerParam struct {
	input Input
}

// NewWaitForDownServerParam return new WaitForDownServerParam
func NewWaitForDownServerParam() *WaitForDownServerParam {
	return &WaitForDownServerParam{}
}

// Initialize init WaitForDownServerParam
func (p *WaitForDownServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForDownServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForDownServerParam) fillValueToSkeleton() {

}

func (p *WaitForDownServerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *WaitForDownServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *WaitForDownServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-down"]
}

func (p *WaitForDownServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForDownServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForDownServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForDownServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// SSHServerParam is input parameters for the sacloud API
type SSHServerParam struct {
	Port     int
	Password string
	Quiet    bool
	Key      string
	User     string

	input Input
}

// NewSSHServerParam return new SSHServerParam
func NewSSHServerParam() *SSHServerParam {
	return &SSHServerParam{
		Port: 22}
}

// Initialize init SSHServerParam
func (p *SSHServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SSHServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SSHServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.Password) {
		p.Password = ""
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Key) {
		p.Key = ""
	}
	if utils.IsEmpty(p.User) {
		p.User = ""
	}

}

func (p *SSHServerParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["ssh"].Params["key"].ValidateFunc
		errs := validator("--key", p.Key)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *SSHServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *SSHServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ssh"]
}

func (p *SSHServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SSHServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SSHServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SSHServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SSHServerParam) SetPort(v int) {
	p.Port = v
}

func (p *SSHServerParam) GetPort() int {
	return p.Port
}
func (p *SSHServerParam) SetPassword(v string) {
	p.Password = v
}

func (p *SSHServerParam) GetPassword() string {
	return p.Password
}
func (p *SSHServerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *SSHServerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *SSHServerParam) SetKey(v string) {
	p.Key = v
}

func (p *SSHServerParam) GetKey() string {
	return p.Key
}
func (p *SSHServerParam) SetUser(v string) {
	p.User = v
}

func (p *SSHServerParam) GetUser() string {
	return p.User
}

// SSHExecServerParam is input parameters for the sacloud API
type SSHExecServerParam struct {
	Key      string
	User     string
	Port     int
	Password string
	Quiet    bool

	input Input
}

// NewSSHExecServerParam return new SSHExecServerParam
func NewSSHExecServerParam() *SSHExecServerParam {
	return &SSHExecServerParam{
		Port: 22}
}

// Initialize init SSHExecServerParam
func (p *SSHExecServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *SSHExecServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *SSHExecServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Key) {
		p.Key = ""
	}
	if utils.IsEmpty(p.User) {
		p.User = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.Password) {
		p.Password = ""
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}

}

func (p *SSHExecServerParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Server"].Commands["ssh-exec"].Params["key"].ValidateFunc
		errs := validator("--key", p.Key)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *SSHExecServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *SSHExecServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ssh-exec"]
}

func (p *SSHExecServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *SSHExecServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *SSHExecServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *SSHExecServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *SSHExecServerParam) SetKey(v string) {
	p.Key = v
}

func (p *SSHExecServerParam) GetKey() string {
	return p.Key
}
func (p *SSHExecServerParam) SetUser(v string) {
	p.User = v
}

func (p *SSHExecServerParam) GetUser() string {
	return p.User
}
func (p *SSHExecServerParam) SetPort(v int) {
	p.Port = v
}

func (p *SSHExecServerParam) GetPort() int {
	return p.Port
}
func (p *SSHExecServerParam) SetPassword(v string) {
	p.Password = v
}

func (p *SSHExecServerParam) GetPassword() string {
	return p.Password
}
func (p *SSHExecServerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *SSHExecServerParam) GetQuiet() bool {
	return p.Quiet
}

// ScpServerParam is input parameters for the sacloud API
type ScpServerParam struct {
	Recursive bool
	Quiet     bool
	Key       string
	User      string
	Port      int
	Password  string

	input Input
}

// NewScpServerParam return new ScpServerParam
func NewScpServerParam() *ScpServerParam {
	return &ScpServerParam{
		Port: 22}
}

// Initialize init ScpServerParam
func (p *ScpServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ScpServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ScpServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Recursive) {
		p.Recursive = false
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Key) {
		p.Key = ""
	}
	if utils.IsEmpty(p.User) {
		p.User = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}
	if utils.IsEmpty(p.Password) {
		p.Password = ""
	}

}

func (p *ScpServerParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Server"].Commands["scp"].Params["key"].ValidateFunc
		errs := validator("--key", p.Key)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ScpServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *ScpServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["scp"]
}

func (p *ScpServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ScpServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ScpServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ScpServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ScpServerParam) SetRecursive(v bool) {
	p.Recursive = v
}

func (p *ScpServerParam) GetRecursive() bool {
	return p.Recursive
}
func (p *ScpServerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ScpServerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ScpServerParam) SetKey(v string) {
	p.Key = v
}

func (p *ScpServerParam) GetKey() string {
	return p.Key
}
func (p *ScpServerParam) SetUser(v string) {
	p.User = v
}

func (p *ScpServerParam) GetUser() string {
	return p.User
}
func (p *ScpServerParam) SetPort(v int) {
	p.Port = v
}

func (p *ScpServerParam) GetPort() int {
	return p.Port
}
func (p *ScpServerParam) SetPassword(v string) {
	p.Password = v
}

func (p *ScpServerParam) GetPassword() string {
	return p.Password
}

// VncServerParam is input parameters for the sacloud API
type VncServerParam struct {
	WaitForBoot bool

	input Input
}

// NewVncServerParam return new VncServerParam
func NewVncServerParam() *VncServerParam {
	return &VncServerParam{}
}

// Initialize init VncServerParam
func (p *VncServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *VncServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *VncServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.WaitForBoot) {
		p.WaitForBoot = false
	}

}

func (p *VncServerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *VncServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *VncServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["vnc"]
}

func (p *VncServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *VncServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *VncServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *VncServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *VncServerParam) SetWaitForBoot(v bool) {
	p.WaitForBoot = v
}

func (p *VncServerParam) GetWaitForBoot() bool {
	return p.WaitForBoot
}

// VncInfoServerParam is input parameters for the sacloud API
type VncInfoServerParam struct {
	WaitForBoot bool

	input Input
}

// NewVncInfoServerParam return new VncInfoServerParam
func NewVncInfoServerParam() *VncInfoServerParam {
	return &VncInfoServerParam{}
}

// Initialize init VncInfoServerParam
func (p *VncInfoServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *VncInfoServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *VncInfoServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.WaitForBoot) {
		p.WaitForBoot = false
	}

}

func (p *VncInfoServerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *VncInfoServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *VncInfoServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["vnc-info"]
}

func (p *VncInfoServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *VncInfoServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *VncInfoServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *VncInfoServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *VncInfoServerParam) SetWaitForBoot(v bool) {
	p.WaitForBoot = v
}

func (p *VncInfoServerParam) GetWaitForBoot() bool {
	return p.WaitForBoot
}

// VncSendServerParam is input parameters for the sacloud API
type VncSendServerParam struct {
	CommandFile   string
	UseUsKeyboard bool
	Debug         bool
	WaitForBoot   bool
	Command       string

	input Input
}

// NewVncSendServerParam return new VncSendServerParam
func NewVncSendServerParam() *VncSendServerParam {
	return &VncSendServerParam{}
}

// Initialize init VncSendServerParam
func (p *VncSendServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *VncSendServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *VncSendServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.CommandFile) {
		p.CommandFile = ""
	}
	if utils.IsEmpty(p.UseUsKeyboard) {
		p.UseUsKeyboard = false
	}
	if utils.IsEmpty(p.Debug) {
		p.Debug = false
	}
	if utils.IsEmpty(p.WaitForBoot) {
		p.WaitForBoot = false
	}
	if utils.IsEmpty(p.Command) {
		p.Command = ""
	}

}

func (p *VncSendServerParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Server"].Commands["vnc-send"].Params["command-file"].ValidateFunc
		errs := validator("--command-file", p.CommandFile)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--command", p.Command, map[string]interface{}{

			"--command-file": p.CommandFile,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *VncSendServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *VncSendServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["vnc-send"]
}

func (p *VncSendServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *VncSendServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *VncSendServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *VncSendServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *VncSendServerParam) SetCommandFile(v string) {
	p.CommandFile = v
}

func (p *VncSendServerParam) GetCommandFile() string {
	return p.CommandFile
}
func (p *VncSendServerParam) SetUseUsKeyboard(v bool) {
	p.UseUsKeyboard = v
}

func (p *VncSendServerParam) GetUseUsKeyboard() bool {
	return p.UseUsKeyboard
}
func (p *VncSendServerParam) SetDebug(v bool) {
	p.Debug = v
}

func (p *VncSendServerParam) GetDebug() bool {
	return p.Debug
}
func (p *VncSendServerParam) SetWaitForBoot(v bool) {
	p.WaitForBoot = v
}

func (p *VncSendServerParam) GetWaitForBoot() bool {
	return p.WaitForBoot
}
func (p *VncSendServerParam) SetCommand(v string) {
	p.Command = v
}

func (p *VncSendServerParam) GetCommand() string {
	return p.Command
}

// VncSnapshotServerParam is input parameters for the sacloud API
type VncSnapshotServerParam struct {
	WaitForBoot bool
	OutputPath  string

	input Input
}

// NewVncSnapshotServerParam return new VncSnapshotServerParam
func NewVncSnapshotServerParam() *VncSnapshotServerParam {
	return &VncSnapshotServerParam{}
}

// Initialize init VncSnapshotServerParam
func (p *VncSnapshotServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *VncSnapshotServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *VncSnapshotServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.WaitForBoot) {
		p.WaitForBoot = false
	}
	if utils.IsEmpty(p.OutputPath) {
		p.OutputPath = ""
	}

}

func (p *VncSnapshotServerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *VncSnapshotServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *VncSnapshotServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["vnc-snapshot"]
}

func (p *VncSnapshotServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *VncSnapshotServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *VncSnapshotServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *VncSnapshotServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *VncSnapshotServerParam) SetWaitForBoot(v bool) {
	p.WaitForBoot = v
}

func (p *VncSnapshotServerParam) GetWaitForBoot() bool {
	return p.WaitForBoot
}
func (p *VncSnapshotServerParam) SetOutputPath(v string) {
	p.OutputPath = v
}

func (p *VncSnapshotServerParam) GetOutputPath() string {
	return p.OutputPath
}

// RemoteDesktopServerParam is input parameters for the sacloud API
type RemoteDesktopServerParam struct {
	User string
	Port int

	input Input
}

// NewRemoteDesktopServerParam return new RemoteDesktopServerParam
func NewRemoteDesktopServerParam() *RemoteDesktopServerParam {
	return &RemoteDesktopServerParam{
		User: "Administrator", Port: 3389}
}

// Initialize init RemoteDesktopServerParam
func (p *RemoteDesktopServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *RemoteDesktopServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *RemoteDesktopServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.User) {
		p.User = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}

}

func (p *RemoteDesktopServerParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--user", p.User)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *RemoteDesktopServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *RemoteDesktopServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["remote-desktop"]
}

func (p *RemoteDesktopServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *RemoteDesktopServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *RemoteDesktopServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *RemoteDesktopServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *RemoteDesktopServerParam) SetUser(v string) {
	p.User = v
}

func (p *RemoteDesktopServerParam) GetUser() string {
	return p.User
}
func (p *RemoteDesktopServerParam) SetPort(v int) {
	p.Port = v
}

func (p *RemoteDesktopServerParam) GetPort() int {
	return p.Port
}

// RemoteDesktopInfoServerParam is input parameters for the sacloud API
type RemoteDesktopInfoServerParam struct {
	User string
	Port int

	input Input
}

// NewRemoteDesktopInfoServerParam return new RemoteDesktopInfoServerParam
func NewRemoteDesktopInfoServerParam() *RemoteDesktopInfoServerParam {
	return &RemoteDesktopInfoServerParam{
		User: "Administrator", Port: 3389}
}

// Initialize init RemoteDesktopInfoServerParam
func (p *RemoteDesktopInfoServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *RemoteDesktopInfoServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *RemoteDesktopInfoServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.User) {
		p.User = ""
	}
	if utils.IsEmpty(p.Port) {
		p.Port = 0
	}

}

func (p *RemoteDesktopInfoServerParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--user", p.User)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *RemoteDesktopInfoServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *RemoteDesktopInfoServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["remote-desktop-info"]
}

func (p *RemoteDesktopInfoServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *RemoteDesktopInfoServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *RemoteDesktopInfoServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *RemoteDesktopInfoServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *RemoteDesktopInfoServerParam) SetUser(v string) {
	p.User = v
}

func (p *RemoteDesktopInfoServerParam) GetUser() string {
	return p.User
}
func (p *RemoteDesktopInfoServerParam) SetPort(v int) {
	p.Port = v
}

func (p *RemoteDesktopInfoServerParam) GetPort() int {
	return p.Port
}

// DiskInfoServerParam is input parameters for the sacloud API
type DiskInfoServerParam struct {
	input Input
}

// NewDiskInfoServerParam return new DiskInfoServerParam
func NewDiskInfoServerParam() *DiskInfoServerParam {
	return &DiskInfoServerParam{}
}

// Initialize init DiskInfoServerParam
func (p *DiskInfoServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DiskInfoServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DiskInfoServerParam) fillValueToSkeleton() {

}

func (p *DiskInfoServerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DiskInfoServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *DiskInfoServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["disk-info"]
}

func (p *DiskInfoServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DiskInfoServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DiskInfoServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DiskInfoServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// DiskConnectServerParam is input parameters for the sacloud API
type DiskConnectServerParam struct {
	DiskId sacloud.ID

	input Input
}

// NewDiskConnectServerParam return new DiskConnectServerParam
func NewDiskConnectServerParam() *DiskConnectServerParam {
	return &DiskConnectServerParam{}
}

// Initialize init DiskConnectServerParam
func (p *DiskConnectServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DiskConnectServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DiskConnectServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.DiskId) {
		p.DiskId = sacloud.ID(0)
	}

}

func (p *DiskConnectServerParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--disk-id", p.DiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["disk-connect"].Params["disk-id"].ValidateFunc
		errs := validator("--disk-id", p.DiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DiskConnectServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *DiskConnectServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["disk-connect"]
}

func (p *DiskConnectServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DiskConnectServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DiskConnectServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DiskConnectServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DiskConnectServerParam) SetDiskId(v sacloud.ID) {
	p.DiskId = v
}

func (p *DiskConnectServerParam) GetDiskId() sacloud.ID {
	return p.DiskId
}

// DiskDisconnectServerParam is input parameters for the sacloud API
type DiskDisconnectServerParam struct {
	DiskId sacloud.ID

	input Input
}

// NewDiskDisconnectServerParam return new DiskDisconnectServerParam
func NewDiskDisconnectServerParam() *DiskDisconnectServerParam {
	return &DiskDisconnectServerParam{}
}

// Initialize init DiskDisconnectServerParam
func (p *DiskDisconnectServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DiskDisconnectServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DiskDisconnectServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.DiskId) {
		p.DiskId = sacloud.ID(0)
	}

}

func (p *DiskDisconnectServerParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--disk-id", p.DiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["disk-disconnect"].Params["disk-id"].ValidateFunc
		errs := validator("--disk-id", p.DiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DiskDisconnectServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *DiskDisconnectServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["disk-disconnect"]
}

func (p *DiskDisconnectServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DiskDisconnectServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DiskDisconnectServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DiskDisconnectServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DiskDisconnectServerParam) SetDiskId(v sacloud.ID) {
	p.DiskId = v
}

func (p *DiskDisconnectServerParam) GetDiskId() sacloud.ID {
	return p.DiskId
}

// InterfaceInfoServerParam is input parameters for the sacloud API
type InterfaceInfoServerParam struct {
	input Input
}

// NewInterfaceInfoServerParam return new InterfaceInfoServerParam
func NewInterfaceInfoServerParam() *InterfaceInfoServerParam {
	return &InterfaceInfoServerParam{}
}

// Initialize init InterfaceInfoServerParam
func (p *InterfaceInfoServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceInfoServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceInfoServerParam) fillValueToSkeleton() {

}

func (p *InterfaceInfoServerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *InterfaceInfoServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *InterfaceInfoServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-info"]
}

func (p *InterfaceInfoServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceInfoServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceInfoServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceInfoServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// InterfaceAddForInternetServerParam is input parameters for the sacloud API
type InterfaceAddForInternetServerParam struct {
	WithoutDiskEdit bool

	input Input
}

// NewInterfaceAddForInternetServerParam return new InterfaceAddForInternetServerParam
func NewInterfaceAddForInternetServerParam() *InterfaceAddForInternetServerParam {
	return &InterfaceAddForInternetServerParam{}
}

// Initialize init InterfaceAddForInternetServerParam
func (p *InterfaceAddForInternetServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceAddForInternetServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceAddForInternetServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.WithoutDiskEdit) {
		p.WithoutDiskEdit = false
	}

}

func (p *InterfaceAddForInternetServerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *InterfaceAddForInternetServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *InterfaceAddForInternetServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-add-for-internet"]
}

func (p *InterfaceAddForInternetServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceAddForInternetServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceAddForInternetServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceAddForInternetServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceAddForInternetServerParam) SetWithoutDiskEdit(v bool) {
	p.WithoutDiskEdit = v
}

func (p *InterfaceAddForInternetServerParam) GetWithoutDiskEdit() bool {
	return p.WithoutDiskEdit
}

// InterfaceAddForRouterServerParam is input parameters for the sacloud API
type InterfaceAddForRouterServerParam struct {
	SwitchId        sacloud.ID
	WithoutDiskEdit bool
	Ipaddress       string
	DefaultRoute    string
	NwMasklen       int

	input Input
}

// NewInterfaceAddForRouterServerParam return new InterfaceAddForRouterServerParam
func NewInterfaceAddForRouterServerParam() *InterfaceAddForRouterServerParam {
	return &InterfaceAddForRouterServerParam{
		NwMasklen: 24}
}

// Initialize init InterfaceAddForRouterServerParam
func (p *InterfaceAddForRouterServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceAddForRouterServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceAddForRouterServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.WithoutDiskEdit) {
		p.WithoutDiskEdit = false
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.DefaultRoute) {
		p.DefaultRoute = ""
	}
	if utils.IsEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}

}

func (p *InterfaceAddForRouterServerParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["interface-add-for-router"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["interface-add-for-router"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["interface-add-for-router"].Params["default-route"].ValidateFunc
		errs := validator("--default-route", p.DefaultRoute)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["interface-add-for-router"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *InterfaceAddForRouterServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *InterfaceAddForRouterServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-add-for-router"]
}

func (p *InterfaceAddForRouterServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceAddForRouterServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceAddForRouterServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceAddForRouterServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceAddForRouterServerParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *InterfaceAddForRouterServerParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *InterfaceAddForRouterServerParam) SetWithoutDiskEdit(v bool) {
	p.WithoutDiskEdit = v
}

func (p *InterfaceAddForRouterServerParam) GetWithoutDiskEdit() bool {
	return p.WithoutDiskEdit
}
func (p *InterfaceAddForRouterServerParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *InterfaceAddForRouterServerParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *InterfaceAddForRouterServerParam) SetDefaultRoute(v string) {
	p.DefaultRoute = v
}

func (p *InterfaceAddForRouterServerParam) GetDefaultRoute() string {
	return p.DefaultRoute
}
func (p *InterfaceAddForRouterServerParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *InterfaceAddForRouterServerParam) GetNwMasklen() int {
	return p.NwMasklen
}

// InterfaceAddForSwitchServerParam is input parameters for the sacloud API
type InterfaceAddForSwitchServerParam struct {
	SwitchId        sacloud.ID
	WithoutDiskEdit bool
	Ipaddress       string
	DefaultRoute    string
	NwMasklen       int

	input Input
}

// NewInterfaceAddForSwitchServerParam return new InterfaceAddForSwitchServerParam
func NewInterfaceAddForSwitchServerParam() *InterfaceAddForSwitchServerParam {
	return &InterfaceAddForSwitchServerParam{
		NwMasklen: 24}
}

// Initialize init InterfaceAddForSwitchServerParam
func (p *InterfaceAddForSwitchServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceAddForSwitchServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceAddForSwitchServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.WithoutDiskEdit) {
		p.WithoutDiskEdit = false
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.DefaultRoute) {
		p.DefaultRoute = ""
	}
	if utils.IsEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}

}

func (p *InterfaceAddForSwitchServerParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["interface-add-for-switch"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["interface-add-for-switch"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["interface-add-for-switch"].Params["default-route"].ValidateFunc
		errs := validator("--default-route", p.DefaultRoute)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["interface-add-for-switch"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *InterfaceAddForSwitchServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *InterfaceAddForSwitchServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-add-for-switch"]
}

func (p *InterfaceAddForSwitchServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceAddForSwitchServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceAddForSwitchServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceAddForSwitchServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *InterfaceAddForSwitchServerParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *InterfaceAddForSwitchServerParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *InterfaceAddForSwitchServerParam) SetWithoutDiskEdit(v bool) {
	p.WithoutDiskEdit = v
}

func (p *InterfaceAddForSwitchServerParam) GetWithoutDiskEdit() bool {
	return p.WithoutDiskEdit
}
func (p *InterfaceAddForSwitchServerParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *InterfaceAddForSwitchServerParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *InterfaceAddForSwitchServerParam) SetDefaultRoute(v string) {
	p.DefaultRoute = v
}

func (p *InterfaceAddForSwitchServerParam) GetDefaultRoute() string {
	return p.DefaultRoute
}
func (p *InterfaceAddForSwitchServerParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *InterfaceAddForSwitchServerParam) GetNwMasklen() int {
	return p.NwMasklen
}

// InterfaceAddDisconnectedServerParam is input parameters for the sacloud API
type InterfaceAddDisconnectedServerParam struct {
	input Input
}

// NewInterfaceAddDisconnectedServerParam return new InterfaceAddDisconnectedServerParam
func NewInterfaceAddDisconnectedServerParam() *InterfaceAddDisconnectedServerParam {
	return &InterfaceAddDisconnectedServerParam{}
}

// Initialize init InterfaceAddDisconnectedServerParam
func (p *InterfaceAddDisconnectedServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *InterfaceAddDisconnectedServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *InterfaceAddDisconnectedServerParam) fillValueToSkeleton() {

}

func (p *InterfaceAddDisconnectedServerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *InterfaceAddDisconnectedServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *InterfaceAddDisconnectedServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["interface-add-disconnected"]
}

func (p *InterfaceAddDisconnectedServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *InterfaceAddDisconnectedServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *InterfaceAddDisconnectedServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *InterfaceAddDisconnectedServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ISOInfoServerParam is input parameters for the sacloud API
type ISOInfoServerParam struct {
	input Input
}

// NewISOInfoServerParam return new ISOInfoServerParam
func NewISOInfoServerParam() *ISOInfoServerParam {
	return &ISOInfoServerParam{}
}

// Initialize init ISOInfoServerParam
func (p *ISOInfoServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ISOInfoServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ISOInfoServerParam) fillValueToSkeleton() {

}

func (p *ISOInfoServerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ISOInfoServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *ISOInfoServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["iso-info"]
}

func (p *ISOInfoServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ISOInfoServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ISOInfoServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ISOInfoServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ISOInsertServerParam is input parameters for the sacloud API
type ISOInsertServerParam struct {
	Name        string
	Description string
	Tags        []string
	IconId      sacloud.ID
	ISOImageId  sacloud.ID
	Size        int
	ISOFile     string

	input Input
}

// NewISOInsertServerParam return new ISOInsertServerParam
func NewISOInsertServerParam() *ISOInsertServerParam {
	return &ISOInsertServerParam{
		Size: 5}
}

// Initialize init ISOInsertServerParam
func (p *ISOInsertServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ISOInsertServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ISOInsertServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.ISOImageId) {
		p.ISOImageId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Size) {
		p.Size = 0
	}
	if utils.IsEmpty(p.ISOFile) {
		p.ISOFile = ""
	}

}

func (p *ISOInsertServerParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Server"].Commands["iso-insert"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["iso-insert"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["iso-insert"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["iso-insert"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["iso-insert"].Params["iso-image-id"].ValidateFunc
		errs := validator("--iso-image-id", p.ISOImageId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["iso-insert"].Params["size"].ValidateFunc
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ISOInsertServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *ISOInsertServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["iso-insert"]
}

func (p *ISOInsertServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ISOInsertServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ISOInsertServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ISOInsertServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ISOInsertServerParam) SetName(v string) {
	p.Name = v
}

func (p *ISOInsertServerParam) GetName() string {
	return p.Name
}
func (p *ISOInsertServerParam) SetDescription(v string) {
	p.Description = v
}

func (p *ISOInsertServerParam) GetDescription() string {
	return p.Description
}
func (p *ISOInsertServerParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ISOInsertServerParam) GetTags() []string {
	return p.Tags
}
func (p *ISOInsertServerParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *ISOInsertServerParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *ISOInsertServerParam) SetISOImageId(v sacloud.ID) {
	p.ISOImageId = v
}

func (p *ISOInsertServerParam) GetISOImageId() sacloud.ID {
	return p.ISOImageId
}
func (p *ISOInsertServerParam) SetSize(v int) {
	p.Size = v
}

func (p *ISOInsertServerParam) GetSize() int {
	return p.Size
}
func (p *ISOInsertServerParam) SetISOFile(v string) {
	p.ISOFile = v
}

func (p *ISOInsertServerParam) GetISOFile() string {
	return p.ISOFile
}

// ISOEjectServerParam is input parameters for the sacloud API
type ISOEjectServerParam struct {
	input Input
}

// NewISOEjectServerParam return new ISOEjectServerParam
func NewISOEjectServerParam() *ISOEjectServerParam {
	return &ISOEjectServerParam{}
}

// Initialize init ISOEjectServerParam
func (p *ISOEjectServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ISOEjectServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ISOEjectServerParam) fillValueToSkeleton() {

}

func (p *ISOEjectServerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ISOEjectServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *ISOEjectServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["iso-eject"]
}

func (p *ISOEjectServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ISOEjectServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ISOEjectServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ISOEjectServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// MonitorCPUServerParam is input parameters for the sacloud API
type MonitorCPUServerParam struct {
	Start     string
	End       string
	KeyFormat string

	input Input
}

// NewMonitorCPUServerParam return new MonitorCPUServerParam
func NewMonitorCPUServerParam() *MonitorCPUServerParam {
	return &MonitorCPUServerParam{
		KeyFormat: "sakuracloud.server.{{.ID}}.cpu"}
}

// Initialize init MonitorCPUServerParam
func (p *MonitorCPUServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorCPUServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorCPUServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}

}

func (p *MonitorCPUServerParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Server"].Commands["monitor-cpu"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["monitor-cpu"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorCPUServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *MonitorCPUServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor-cpu"]
}

func (p *MonitorCPUServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorCPUServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorCPUServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorCPUServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorCPUServerParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorCPUServerParam) GetStart() string {
	return p.Start
}
func (p *MonitorCPUServerParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorCPUServerParam) GetEnd() string {
	return p.End
}
func (p *MonitorCPUServerParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorCPUServerParam) GetKeyFormat() string {
	return p.KeyFormat
}

// MonitorNicServerParam is input parameters for the sacloud API
type MonitorNicServerParam struct {
	End       string
	Index     []int
	KeyFormat string
	Start     string

	input Input
}

// NewMonitorNicServerParam return new MonitorNicServerParam
func NewMonitorNicServerParam() *MonitorNicServerParam {
	return &MonitorNicServerParam{
		KeyFormat: "sakuracloud.server.{{.ID}}.nic.{{.Index}}"}
}

// Initialize init MonitorNicServerParam
func (p *MonitorNicServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorNicServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorNicServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.Index) {
		p.Index = []int{0}
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}

}

func (p *MonitorNicServerParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Server"].Commands["monitor-nic"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["monitor-nic"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorNicServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *MonitorNicServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor-nic"]
}

func (p *MonitorNicServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorNicServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorNicServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorNicServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorNicServerParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorNicServerParam) GetEnd() string {
	return p.End
}
func (p *MonitorNicServerParam) SetIndex(v []int) {
	p.Index = v
}

func (p *MonitorNicServerParam) GetIndex() []int {
	return p.Index
}
func (p *MonitorNicServerParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorNicServerParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorNicServerParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorNicServerParam) GetStart() string {
	return p.Start
}

// MonitorDiskServerParam is input parameters for the sacloud API
type MonitorDiskServerParam struct {
	Start     string
	End       string
	Index     []int
	KeyFormat string

	input Input
}

// NewMonitorDiskServerParam return new MonitorDiskServerParam
func NewMonitorDiskServerParam() *MonitorDiskServerParam {
	return &MonitorDiskServerParam{
		KeyFormat: "sakuracloud.server.{{.ID}}.disk.{{.Index}}"}
}

// Initialize init MonitorDiskServerParam
func (p *MonitorDiskServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorDiskServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorDiskServerParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.Index) {
		p.Index = []int{0}
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}

}

func (p *MonitorDiskServerParam) validate() error {
	var errors []error

	{
		validator := define.Resources["Server"].Commands["monitor-disk"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["Server"].Commands["monitor-disk"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorDiskServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *MonitorDiskServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor-disk"]
}

func (p *MonitorDiskServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorDiskServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorDiskServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorDiskServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorDiskServerParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorDiskServerParam) GetStart() string {
	return p.Start
}
func (p *MonitorDiskServerParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorDiskServerParam) GetEnd() string {
	return p.End
}
func (p *MonitorDiskServerParam) SetIndex(v []int) {
	p.Index = v
}

func (p *MonitorDiskServerParam) GetIndex() []int {
	return p.Index
}
func (p *MonitorDiskServerParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorDiskServerParam) GetKeyFormat() string {
	return p.KeyFormat
}

// MaintenanceInfoServerParam is input parameters for the sacloud API
type MaintenanceInfoServerParam struct {
	input Input
}

// NewMaintenanceInfoServerParam return new MaintenanceInfoServerParam
func NewMaintenanceInfoServerParam() *MaintenanceInfoServerParam {
	return &MaintenanceInfoServerParam{}
}

// Initialize init MaintenanceInfoServerParam
func (p *MaintenanceInfoServerParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MaintenanceInfoServerParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MaintenanceInfoServerParam) fillValueToSkeleton() {

}

func (p *MaintenanceInfoServerParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *MaintenanceInfoServerParam) ResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *MaintenanceInfoServerParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["maintenance-info"]
}

func (p *MaintenanceInfoServerParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MaintenanceInfoServerParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MaintenanceInfoServerParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MaintenanceInfoServerParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

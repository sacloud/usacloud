// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListWebaccelParam is input parameters for the sacloud API
type ListWebaccelParam struct {
	input Input
}

// NewListWebaccelParam return new ListWebaccelParam
func NewListWebaccelParam() *ListWebaccelParam {
	return &ListWebaccelParam{}
}

// Initialize init ListWebaccelParam
func (p *ListWebaccelParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListWebaccelParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListWebaccelParam) fillValueToSkeleton() {

}

func (p *ListWebaccelParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ListWebaccelParam) ResourceDef() *schema.Resource {
	return define.Resources["WebAccel"]
}

func (p *ListWebaccelParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListWebaccelParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListWebaccelParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListWebaccelParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListWebaccelParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ReadWebaccelParam is input parameters for the sacloud API
type ReadWebaccelParam struct {
	input Input
}

// NewReadWebaccelParam return new ReadWebaccelParam
func NewReadWebaccelParam() *ReadWebaccelParam {
	return &ReadWebaccelParam{}
}

// Initialize init ReadWebaccelParam
func (p *ReadWebaccelParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadWebaccelParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadWebaccelParam) fillValueToSkeleton() {

}

func (p *ReadWebaccelParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadWebaccelParam) ResourceDef() *schema.Resource {
	return define.Resources["WebAccel"]
}

func (p *ReadWebaccelParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadWebaccelParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadWebaccelParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadWebaccelParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadWebaccelParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// CertificateInfoWebaccelParam is input parameters for the sacloud API
type CertificateInfoWebaccelParam struct {
	input Input
}

// NewCertificateInfoWebaccelParam return new CertificateInfoWebaccelParam
func NewCertificateInfoWebaccelParam() *CertificateInfoWebaccelParam {
	return &CertificateInfoWebaccelParam{}
}

// Initialize init CertificateInfoWebaccelParam
func (p *CertificateInfoWebaccelParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CertificateInfoWebaccelParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CertificateInfoWebaccelParam) fillValueToSkeleton() {

}

func (p *CertificateInfoWebaccelParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *CertificateInfoWebaccelParam) ResourceDef() *schema.Resource {
	return define.Resources["WebAccel"]
}

func (p *CertificateInfoWebaccelParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["certificate-info"]
}

func (p *CertificateInfoWebaccelParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CertificateInfoWebaccelParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CertificateInfoWebaccelParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CertificateInfoWebaccelParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// CertificateNewWebaccelParam is input parameters for the sacloud API
type CertificateNewWebaccelParam struct {
	Cert        string
	Key         string
	CertContent string
	KeyContent  string

	input Input
}

// NewCertificateNewWebaccelParam return new CertificateNewWebaccelParam
func NewCertificateNewWebaccelParam() *CertificateNewWebaccelParam {
	return &CertificateNewWebaccelParam{}
}

// Initialize init CertificateNewWebaccelParam
func (p *CertificateNewWebaccelParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CertificateNewWebaccelParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CertificateNewWebaccelParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Cert) {
		p.Cert = ""
	}
	if utils.IsEmpty(p.Key) {
		p.Key = ""
	}
	if utils.IsEmpty(p.CertContent) {
		p.CertContent = ""
	}
	if utils.IsEmpty(p.KeyContent) {
		p.KeyContent = ""
	}

}

func (p *CertificateNewWebaccelParam) validate() error {
	var errors []error

	{
		validator := define.Resources["WebAccel"].Commands["certificate-new"].Params["cert"].ValidateFunc
		errs := validator("--cert", p.Cert)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["WebAccel"].Commands["certificate-new"].Params["key"].ValidateFunc
		errs := validator("--key", p.Key)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--cert-content", p.CertContent, map[string]interface{}{

			"--cert": p.Cert,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--key-content", p.KeyContent, map[string]interface{}{

			"--key": p.Key,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CertificateNewWebaccelParam) ResourceDef() *schema.Resource {
	return define.Resources["WebAccel"]
}

func (p *CertificateNewWebaccelParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["certificate-new"]
}

func (p *CertificateNewWebaccelParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CertificateNewWebaccelParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CertificateNewWebaccelParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CertificateNewWebaccelParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CertificateNewWebaccelParam) SetCert(v string) {
	p.Cert = v
}

func (p *CertificateNewWebaccelParam) GetCert() string {
	return p.Cert
}
func (p *CertificateNewWebaccelParam) SetKey(v string) {
	p.Key = v
}

func (p *CertificateNewWebaccelParam) GetKey() string {
	return p.Key
}
func (p *CertificateNewWebaccelParam) SetCertContent(v string) {
	p.CertContent = v
}

func (p *CertificateNewWebaccelParam) GetCertContent() string {
	return p.CertContent
}
func (p *CertificateNewWebaccelParam) SetKeyContent(v string) {
	p.KeyContent = v
}

func (p *CertificateNewWebaccelParam) GetKeyContent() string {
	return p.KeyContent
}

// CertificateUpdateWebaccelParam is input parameters for the sacloud API
type CertificateUpdateWebaccelParam struct {
	CertContent string
	KeyContent  string
	Cert        string
	Key         string

	input Input
}

// NewCertificateUpdateWebaccelParam return new CertificateUpdateWebaccelParam
func NewCertificateUpdateWebaccelParam() *CertificateUpdateWebaccelParam {
	return &CertificateUpdateWebaccelParam{}
}

// Initialize init CertificateUpdateWebaccelParam
func (p *CertificateUpdateWebaccelParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CertificateUpdateWebaccelParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CertificateUpdateWebaccelParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.CertContent) {
		p.CertContent = ""
	}
	if utils.IsEmpty(p.KeyContent) {
		p.KeyContent = ""
	}
	if utils.IsEmpty(p.Cert) {
		p.Cert = ""
	}
	if utils.IsEmpty(p.Key) {
		p.Key = ""
	}

}

func (p *CertificateUpdateWebaccelParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--cert-content", p.CertContent, map[string]interface{}{

			"--cert": p.Cert,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validation.ConflictsWith("--key-content", p.KeyContent, map[string]interface{}{

			"--key": p.Key,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["WebAccel"].Commands["certificate-update"].Params["cert"].ValidateFunc
		errs := validator("--cert", p.Cert)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["WebAccel"].Commands["certificate-update"].Params["key"].ValidateFunc
		errs := validator("--key", p.Key)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CertificateUpdateWebaccelParam) ResourceDef() *schema.Resource {
	return define.Resources["WebAccel"]
}

func (p *CertificateUpdateWebaccelParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["certificate-update"]
}

func (p *CertificateUpdateWebaccelParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CertificateUpdateWebaccelParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CertificateUpdateWebaccelParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CertificateUpdateWebaccelParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CertificateUpdateWebaccelParam) SetCertContent(v string) {
	p.CertContent = v
}

func (p *CertificateUpdateWebaccelParam) GetCertContent() string {
	return p.CertContent
}
func (p *CertificateUpdateWebaccelParam) SetKeyContent(v string) {
	p.KeyContent = v
}

func (p *CertificateUpdateWebaccelParam) GetKeyContent() string {
	return p.KeyContent
}
func (p *CertificateUpdateWebaccelParam) SetCert(v string) {
	p.Cert = v
}

func (p *CertificateUpdateWebaccelParam) GetCert() string {
	return p.Cert
}
func (p *CertificateUpdateWebaccelParam) SetKey(v string) {
	p.Key = v
}

func (p *CertificateUpdateWebaccelParam) GetKey() string {
	return p.Key
}

// DeleteCacheWebaccelParam is input parameters for the sacloud API
type DeleteCacheWebaccelParam struct {
	input Input
}

// NewDeleteCacheWebaccelParam return new DeleteCacheWebaccelParam
func NewDeleteCacheWebaccelParam() *DeleteCacheWebaccelParam {
	return &DeleteCacheWebaccelParam{}
}

// Initialize init DeleteCacheWebaccelParam
func (p *DeleteCacheWebaccelParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteCacheWebaccelParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteCacheWebaccelParam) fillValueToSkeleton() {

}

func (p *DeleteCacheWebaccelParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteCacheWebaccelParam) ResourceDef() *schema.Resource {
	return define.Resources["WebAccel"]
}

func (p *DeleteCacheWebaccelParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete-cache"]
}

func (p *DeleteCacheWebaccelParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteCacheWebaccelParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteCacheWebaccelParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteCacheWebaccelParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

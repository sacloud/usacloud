// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListSIMParam is input parameters for the sacloud API
type ListSIMParam struct {
	Name []string
	Id   []sacloud.ID
	From int
	Max  int
	Sort []string
	Tags []string

	input Input
}

// NewListSIMParam return new ListSIMParam
func NewListSIMParam() *ListSIMParam {
	return &ListSIMParam{}
}

// Initialize init ListSIMParam
func (p *ListSIMParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListSIMParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}

}

func (p *ListSIMParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ListSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListSIMParam) SetName(v []string) {
	p.Name = v
}

func (p *ListSIMParam) GetName() []string {
	return p.Name
}
func (p *ListSIMParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListSIMParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListSIMParam) SetFrom(v int) {
	p.From = v
}

func (p *ListSIMParam) GetFrom() int {
	return p.From
}
func (p *ListSIMParam) SetMax(v int) {
	p.Max = v
}

func (p *ListSIMParam) GetMax() int {
	return p.Max
}
func (p *ListSIMParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListSIMParam) GetSort() []string {
	return p.Sort
}
func (p *ListSIMParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListSIMParam) GetTags() []string {
	return p.Tags
}

// CreateSIMParam is input parameters for the sacloud API
type CreateSIMParam struct {
	Carrier     []string
	Name        string
	Description string
	Iccid       string
	Passcode    string
	Disabled    bool
	Imei        string
	Tags        []string
	IconId      sacloud.ID

	input Input
}

// NewCreateSIMParam return new CreateSIMParam
func NewCreateSIMParam() *CreateSIMParam {
	return &CreateSIMParam{}
}

// Initialize init CreateSIMParam
func (p *CreateSIMParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateSIMParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Carrier) {
		p.Carrier = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Iccid) {
		p.Iccid = ""
	}
	if utils.IsEmpty(p.Passcode) {
		p.Passcode = ""
	}
	if utils.IsEmpty(p.Disabled) {
		p.Disabled = false
	}
	if utils.IsEmpty(p.Imei) {
		p.Imei = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}

}

func (p *CreateSIMParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--carrier", p.Carrier)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["create"].Params["carrier"].ValidateFunc
		errs := validator("--carrier", p.Carrier)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.SliceLenBetween("--carrier", p.Carrier, 1, 3)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--iccid", p.Iccid)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--passcode", p.Passcode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *CreateSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateSIMParam) SetCarrier(v []string) {
	p.Carrier = v
}

func (p *CreateSIMParam) GetCarrier() []string {
	return p.Carrier
}
func (p *CreateSIMParam) SetName(v string) {
	p.Name = v
}

func (p *CreateSIMParam) GetName() string {
	return p.Name
}
func (p *CreateSIMParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateSIMParam) GetDescription() string {
	return p.Description
}
func (p *CreateSIMParam) SetIccid(v string) {
	p.Iccid = v
}

func (p *CreateSIMParam) GetIccid() string {
	return p.Iccid
}
func (p *CreateSIMParam) SetPasscode(v string) {
	p.Passcode = v
}

func (p *CreateSIMParam) GetPasscode() string {
	return p.Passcode
}
func (p *CreateSIMParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *CreateSIMParam) GetDisabled() bool {
	return p.Disabled
}
func (p *CreateSIMParam) SetImei(v string) {
	p.Imei = v
}

func (p *CreateSIMParam) GetImei() string {
	return p.Imei
}
func (p *CreateSIMParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateSIMParam) GetTags() []string {
	return p.Tags
}
func (p *CreateSIMParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateSIMParam) GetIconId() sacloud.ID {
	return p.IconId
}

// ReadSIMParam is input parameters for the sacloud API
type ReadSIMParam struct {
	input Input
}

// NewReadSIMParam return new ReadSIMParam
func NewReadSIMParam() *ReadSIMParam {
	return &ReadSIMParam{}
}

// Initialize init ReadSIMParam
func (p *ReadSIMParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadSIMParam) fillValueToSkeleton() {

}

func (p *ReadSIMParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ReadSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdateSIMParam is input parameters for the sacloud API
type UpdateSIMParam struct {
	Name        string
	Description string
	Tags        []string
	IconId      sacloud.ID

	input Input
}

// NewUpdateSIMParam return new UpdateSIMParam
func NewUpdateSIMParam() *UpdateSIMParam {
	return &UpdateSIMParam{}
}

// Initialize init UpdateSIMParam
func (p *UpdateSIMParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateSIMParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}

}

func (p *UpdateSIMParam) validate() error {
	var errors []error

	{
		validator := define.Resources["SIM"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *UpdateSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateSIMParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateSIMParam) GetName() string {
	return p.Name
}
func (p *UpdateSIMParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateSIMParam) GetDescription() string {
	return p.Description
}
func (p *UpdateSIMParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateSIMParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateSIMParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateSIMParam) GetIconId() sacloud.ID {
	return p.IconId
}

// DeleteSIMParam is input parameters for the sacloud API
type DeleteSIMParam struct {
	Force bool

	input Input
}

// NewDeleteSIMParam return new DeleteSIMParam
func NewDeleteSIMParam() *DeleteSIMParam {
	return &DeleteSIMParam{}
}

// Initialize init DeleteSIMParam
func (p *DeleteSIMParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteSIMParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Force) {
		p.Force = false
	}

}

func (p *DeleteSIMParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *DeleteSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteSIMParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteSIMParam) GetForce() bool {
	return p.Force
}

// CarrierInfoSIMParam is input parameters for the sacloud API
type CarrierInfoSIMParam struct {
	input Input
}

// NewCarrierInfoSIMParam return new CarrierInfoSIMParam
func NewCarrierInfoSIMParam() *CarrierInfoSIMParam {
	return &CarrierInfoSIMParam{}
}

// Initialize init CarrierInfoSIMParam
func (p *CarrierInfoSIMParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CarrierInfoSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CarrierInfoSIMParam) fillValueToSkeleton() {

}

func (p *CarrierInfoSIMParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *CarrierInfoSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *CarrierInfoSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["carrier-info"]
}

func (p *CarrierInfoSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CarrierInfoSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CarrierInfoSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CarrierInfoSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// CarrierUpdateSIMParam is input parameters for the sacloud API
type CarrierUpdateSIMParam struct {
	Carrier []string

	input Input
}

// NewCarrierUpdateSIMParam return new CarrierUpdateSIMParam
func NewCarrierUpdateSIMParam() *CarrierUpdateSIMParam {
	return &CarrierUpdateSIMParam{}
}

// Initialize init CarrierUpdateSIMParam
func (p *CarrierUpdateSIMParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CarrierUpdateSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CarrierUpdateSIMParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Carrier) {
		p.Carrier = []string{""}
	}

}

func (p *CarrierUpdateSIMParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--carrier", p.Carrier)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["carrier-update"].Params["carrier"].ValidateFunc
		errs := validator("--carrier", p.Carrier)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.SliceLenBetween("--carrier", p.Carrier, 1, 3)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CarrierUpdateSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *CarrierUpdateSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["carrier-update"]
}

func (p *CarrierUpdateSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CarrierUpdateSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CarrierUpdateSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CarrierUpdateSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CarrierUpdateSIMParam) SetCarrier(v []string) {
	p.Carrier = v
}

func (p *CarrierUpdateSIMParam) GetCarrier() []string {
	return p.Carrier
}

// ActivateSIMParam is input parameters for the sacloud API
type ActivateSIMParam struct {
	input Input
}

// NewActivateSIMParam return new ActivateSIMParam
func NewActivateSIMParam() *ActivateSIMParam {
	return &ActivateSIMParam{}
}

// Initialize init ActivateSIMParam
func (p *ActivateSIMParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ActivateSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ActivateSIMParam) fillValueToSkeleton() {

}

func (p *ActivateSIMParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ActivateSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ActivateSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["activate"]
}

func (p *ActivateSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ActivateSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ActivateSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ActivateSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// DeactivateSIMParam is input parameters for the sacloud API
type DeactivateSIMParam struct {
	input Input
}

// NewDeactivateSIMParam return new DeactivateSIMParam
func NewDeactivateSIMParam() *DeactivateSIMParam {
	return &DeactivateSIMParam{}
}

// Initialize init DeactivateSIMParam
func (p *DeactivateSIMParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeactivateSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeactivateSIMParam) fillValueToSkeleton() {

}

func (p *DeactivateSIMParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeactivateSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *DeactivateSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["deactivate"]
}

func (p *DeactivateSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeactivateSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeactivateSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeactivateSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ImeiLockSIMParam is input parameters for the sacloud API
type ImeiLockSIMParam struct {
	Imei string

	input Input
}

// NewImeiLockSIMParam return new ImeiLockSIMParam
func NewImeiLockSIMParam() *ImeiLockSIMParam {
	return &ImeiLockSIMParam{}
}

// Initialize init ImeiLockSIMParam
func (p *ImeiLockSIMParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ImeiLockSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ImeiLockSIMParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Imei) {
		p.Imei = ""
	}

}

func (p *ImeiLockSIMParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--imei", p.Imei)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ImeiLockSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ImeiLockSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["imei-lock"]
}

func (p *ImeiLockSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ImeiLockSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ImeiLockSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ImeiLockSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ImeiLockSIMParam) SetImei(v string) {
	p.Imei = v
}

func (p *ImeiLockSIMParam) GetImei() string {
	return p.Imei
}

// IpAddSIMParam is input parameters for the sacloud API
type IpAddSIMParam struct {
	Ip string

	input Input
}

// NewIpAddSIMParam return new IpAddSIMParam
func NewIpAddSIMParam() *IpAddSIMParam {
	return &IpAddSIMParam{}
}

// Initialize init IpAddSIMParam
func (p *IpAddSIMParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *IpAddSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *IpAddSIMParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Ip) {
		p.Ip = ""
	}

}

func (p *IpAddSIMParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--ip", p.Ip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["ip-add"].Params["ip"].ValidateFunc
		errs := validator("--ip", p.Ip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *IpAddSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *IpAddSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ip-add"]
}

func (p *IpAddSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *IpAddSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *IpAddSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *IpAddSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *IpAddSIMParam) SetIp(v string) {
	p.Ip = v
}

func (p *IpAddSIMParam) GetIp() string {
	return p.Ip
}

// ImeiUnlockSIMParam is input parameters for the sacloud API
type ImeiUnlockSIMParam struct {
	input Input
}

// NewImeiUnlockSIMParam return new ImeiUnlockSIMParam
func NewImeiUnlockSIMParam() *ImeiUnlockSIMParam {
	return &ImeiUnlockSIMParam{}
}

// Initialize init ImeiUnlockSIMParam
func (p *ImeiUnlockSIMParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ImeiUnlockSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ImeiUnlockSIMParam) fillValueToSkeleton() {

}

func (p *ImeiUnlockSIMParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ImeiUnlockSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ImeiUnlockSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["imei-unlock"]
}

func (p *ImeiUnlockSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ImeiUnlockSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ImeiUnlockSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ImeiUnlockSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// IpDeleteSIMParam is input parameters for the sacloud API
type IpDeleteSIMParam struct {
	input Input
}

// NewIpDeleteSIMParam return new IpDeleteSIMParam
func NewIpDeleteSIMParam() *IpDeleteSIMParam {
	return &IpDeleteSIMParam{}
}

// Initialize init IpDeleteSIMParam
func (p *IpDeleteSIMParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *IpDeleteSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *IpDeleteSIMParam) fillValueToSkeleton() {

}

func (p *IpDeleteSIMParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *IpDeleteSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *IpDeleteSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ip-delete"]
}

func (p *IpDeleteSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *IpDeleteSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *IpDeleteSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *IpDeleteSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// LogsSIMParam is input parameters for the sacloud API
type LogsSIMParam struct {
	RefreshInterval int64
	Follow          bool

	input Input
}

// NewLogsSIMParam return new LogsSIMParam
func NewLogsSIMParam() *LogsSIMParam {
	return &LogsSIMParam{
		RefreshInterval: 3}
}

// Initialize init LogsSIMParam
func (p *LogsSIMParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *LogsSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *LogsSIMParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.RefreshInterval) {
		p.RefreshInterval = 0
	}
	if utils.IsEmpty(p.Follow) {
		p.Follow = false
	}

}

func (p *LogsSIMParam) validate() error {
	var errors []error

	{
		validator := define.Resources["SIM"].Commands["logs"].Params["refresh-interval"].ValidateFunc
		errs := validator("--refresh-interval", p.RefreshInterval)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *LogsSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *LogsSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["logs"]
}

func (p *LogsSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *LogsSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *LogsSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *LogsSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *LogsSIMParam) SetRefreshInterval(v int64) {
	p.RefreshInterval = v
}

func (p *LogsSIMParam) GetRefreshInterval() int64 {
	return p.RefreshInterval
}
func (p *LogsSIMParam) SetFollow(v bool) {
	p.Follow = v
}

func (p *LogsSIMParam) GetFollow() bool {
	return p.Follow
}

// MonitorSIMParam is input parameters for the sacloud API
type MonitorSIMParam struct {
	Start     string
	End       string
	KeyFormat string

	input Input
}

// NewMonitorSIMParam return new MonitorSIMParam
func NewMonitorSIMParam() *MonitorSIMParam {
	return &MonitorSIMParam{
		KeyFormat: "sakuracloud.sim.{{.ID}}"}
}

// Initialize init MonitorSIMParam
func (p *MonitorSIMParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorSIMParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorSIMParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}

}

func (p *MonitorSIMParam) validate() error {
	var errors []error

	{
		validator := define.Resources["SIM"].Commands["monitor"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["SIM"].Commands["monitor"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorSIMParam) ResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *MonitorSIMParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor"]
}

func (p *MonitorSIMParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorSIMParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorSIMParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorSIMParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorSIMParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorSIMParam) GetStart() string {
	return p.Start
}
func (p *MonitorSIMParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorSIMParam) GetEnd() string {
	return p.End
}
func (p *MonitorSIMParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorSIMParam) GetKeyFormat() string {
	return p.KeyFormat
}

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListPrivatehostParam is input parameters for the sacloud API
type ListPrivatehostParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Tags              []string     `json:"tags"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`

	input Input
}

// NewListPrivatehostParam return new ListPrivatehostParam
func NewListPrivatehostParam(in Input) (*ListPrivatehostParam, error) {
	v := &ListPrivatehostParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListPrivatehostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListPrivatehostParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListPrivatehostParam) validate() error {
	var errors []error
	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListPrivatehostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *ListPrivatehostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListPrivatehostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListPrivatehostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListPrivatehostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListPrivatehostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListPrivatehostParam) SetName(v []string) {
	p.Name = v
}

func (p *ListPrivatehostParam) GetName() []string {
	return p.Name
}
func (p *ListPrivatehostParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListPrivatehostParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListPrivatehostParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListPrivatehostParam) GetTags() []string {
	return p.Tags
}
func (p *ListPrivatehostParam) SetFrom(v int) {
	p.From = v
}

func (p *ListPrivatehostParam) GetFrom() int {
	return p.From
}
func (p *ListPrivatehostParam) SetMax(v int) {
	p.Max = v
}

func (p *ListPrivatehostParam) GetMax() int {
	return p.Max
}
func (p *ListPrivatehostParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListPrivatehostParam) GetSort() []string {
	return p.Sort
}
func (p *ListPrivatehostParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListPrivatehostParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListPrivatehostParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListPrivatehostParam) GetParameters() string {
	return p.Parameters
}
func (p *ListPrivatehostParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListPrivatehostParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListPrivatehostParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListPrivatehostParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListPrivatehostParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListPrivatehostParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListPrivatehostParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListPrivatehostParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListPrivatehostParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListPrivatehostParam) GetColumn() []string {
	return p.Column
}
func (p *ListPrivatehostParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListPrivatehostParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListPrivatehostParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListPrivatehostParam) GetFormat() string {
	return p.Format
}
func (p *ListPrivatehostParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListPrivatehostParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListPrivatehostParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListPrivatehostParam) GetQuery() string {
	return p.Query
}
func (p *ListPrivatehostParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListPrivatehostParam) GetQueryFile() string {
	return p.QueryFile
}

// CreatePrivatehostParam is input parameters for the sacloud API
type CreatePrivatehostParam struct {
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`

	input Input
}

// NewCreatePrivatehostParam return new CreatePrivatehostParam
func NewCreatePrivatehostParam(in Input) (*CreatePrivatehostParam, error) {
	v := &CreatePrivatehostParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreatePrivatehostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreatePrivatehostParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *CreatePrivatehostParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreatePrivatehostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *CreatePrivatehostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreatePrivatehostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreatePrivatehostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreatePrivatehostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreatePrivatehostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreatePrivatehostParam) SetName(v string) {
	p.Name = v
}

func (p *CreatePrivatehostParam) GetName() string {
	return p.Name
}
func (p *CreatePrivatehostParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreatePrivatehostParam) GetDescription() string {
	return p.Description
}
func (p *CreatePrivatehostParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreatePrivatehostParam) GetTags() []string {
	return p.Tags
}
func (p *CreatePrivatehostParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreatePrivatehostParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreatePrivatehostParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreatePrivatehostParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreatePrivatehostParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreatePrivatehostParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreatePrivatehostParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreatePrivatehostParam) GetParameters() string {
	return p.Parameters
}
func (p *CreatePrivatehostParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreatePrivatehostParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreatePrivatehostParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreatePrivatehostParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreatePrivatehostParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreatePrivatehostParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreatePrivatehostParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreatePrivatehostParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreatePrivatehostParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreatePrivatehostParam) GetColumn() []string {
	return p.Column
}
func (p *CreatePrivatehostParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreatePrivatehostParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreatePrivatehostParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreatePrivatehostParam) GetFormat() string {
	return p.Format
}
func (p *CreatePrivatehostParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreatePrivatehostParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreatePrivatehostParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreatePrivatehostParam) GetQuery() string {
	return p.Query
}
func (p *CreatePrivatehostParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreatePrivatehostParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadPrivatehostParam is input parameters for the sacloud API
type ReadPrivatehostParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewReadPrivatehostParam return new ReadPrivatehostParam
func NewReadPrivatehostParam(in Input) (*ReadPrivatehostParam, error) {
	v := &ReadPrivatehostParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadPrivatehostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadPrivatehostParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReadPrivatehostParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ReadPrivatehostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *ReadPrivatehostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadPrivatehostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadPrivatehostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadPrivatehostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadPrivatehostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReadPrivatehostParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadPrivatehostParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadPrivatehostParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadPrivatehostParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadPrivatehostParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadPrivatehostParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadPrivatehostParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadPrivatehostParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadPrivatehostParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadPrivatehostParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadPrivatehostParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadPrivatehostParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadPrivatehostParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadPrivatehostParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadPrivatehostParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadPrivatehostParam) GetColumn() []string {
	return p.Column
}
func (p *ReadPrivatehostParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadPrivatehostParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadPrivatehostParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadPrivatehostParam) GetFormat() string {
	return p.Format
}
func (p *ReadPrivatehostParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadPrivatehostParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadPrivatehostParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadPrivatehostParam) GetQuery() string {
	return p.Query
}
func (p *ReadPrivatehostParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadPrivatehostParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadPrivatehostParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadPrivatehostParam) GetId() sacloud.ID {
	return p.Id
}

// UpdatePrivatehostParam is input parameters for the sacloud API
type UpdatePrivatehostParam struct {
	Selector          []string   `json:"selector"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewUpdatePrivatehostParam return new UpdatePrivatehostParam
func NewUpdatePrivatehostParam(in Input) (*UpdatePrivatehostParam, error) {
	v := &UpdatePrivatehostParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdatePrivatehostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdatePrivatehostParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UpdatePrivatehostParam) validate() error {
	var errors []error
	{
		validator := define.Resources["PrivateHost"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdatePrivatehostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *UpdatePrivatehostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdatePrivatehostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdatePrivatehostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdatePrivatehostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdatePrivatehostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdatePrivatehostParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdatePrivatehostParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdatePrivatehostParam) SetName(v string) {
	p.Name = v
}

func (p *UpdatePrivatehostParam) GetName() string {
	return p.Name
}
func (p *UpdatePrivatehostParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdatePrivatehostParam) GetDescription() string {
	return p.Description
}
func (p *UpdatePrivatehostParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdatePrivatehostParam) GetTags() []string {
	return p.Tags
}
func (p *UpdatePrivatehostParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdatePrivatehostParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdatePrivatehostParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdatePrivatehostParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdatePrivatehostParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdatePrivatehostParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdatePrivatehostParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdatePrivatehostParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdatePrivatehostParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdatePrivatehostParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdatePrivatehostParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdatePrivatehostParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdatePrivatehostParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdatePrivatehostParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdatePrivatehostParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdatePrivatehostParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdatePrivatehostParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdatePrivatehostParam) GetColumn() []string {
	return p.Column
}
func (p *UpdatePrivatehostParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdatePrivatehostParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdatePrivatehostParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdatePrivatehostParam) GetFormat() string {
	return p.Format
}
func (p *UpdatePrivatehostParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdatePrivatehostParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdatePrivatehostParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdatePrivatehostParam) GetQuery() string {
	return p.Query
}
func (p *UpdatePrivatehostParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdatePrivatehostParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdatePrivatehostParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdatePrivatehostParam) GetId() sacloud.ID {
	return p.Id
}

// DeletePrivatehostParam is input parameters for the sacloud API
type DeletePrivatehostParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewDeletePrivatehostParam return new DeletePrivatehostParam
func NewDeletePrivatehostParam(in Input) (*DeletePrivatehostParam, error) {
	v := &DeletePrivatehostParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeletePrivatehostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeletePrivatehostParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DeletePrivatehostParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *DeletePrivatehostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *DeletePrivatehostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeletePrivatehostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeletePrivatehostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeletePrivatehostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeletePrivatehostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeletePrivatehostParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeletePrivatehostParam) GetSelector() []string {
	return p.Selector
}
func (p *DeletePrivatehostParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeletePrivatehostParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeletePrivatehostParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeletePrivatehostParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeletePrivatehostParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeletePrivatehostParam) GetParameters() string {
	return p.Parameters
}
func (p *DeletePrivatehostParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeletePrivatehostParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeletePrivatehostParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeletePrivatehostParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeletePrivatehostParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeletePrivatehostParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeletePrivatehostParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeletePrivatehostParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeletePrivatehostParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeletePrivatehostParam) GetColumn() []string {
	return p.Column
}
func (p *DeletePrivatehostParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeletePrivatehostParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeletePrivatehostParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeletePrivatehostParam) GetFormat() string {
	return p.Format
}
func (p *DeletePrivatehostParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeletePrivatehostParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeletePrivatehostParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeletePrivatehostParam) GetQuery() string {
	return p.Query
}
func (p *DeletePrivatehostParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeletePrivatehostParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeletePrivatehostParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeletePrivatehostParam) GetId() sacloud.ID {
	return p.Id
}

// ServerInfoPrivatehostParam is input parameters for the sacloud API
type ServerInfoPrivatehostParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewServerInfoPrivatehostParam return new ServerInfoPrivatehostParam
func NewServerInfoPrivatehostParam(in Input) (*ServerInfoPrivatehostParam, error) {
	v := &ServerInfoPrivatehostParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerInfoPrivatehostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerInfoPrivatehostParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ServerInfoPrivatehostParam) validate() error {
	var errors []error
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerInfoPrivatehostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *ServerInfoPrivatehostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-info"]
}

func (p *ServerInfoPrivatehostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerInfoPrivatehostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerInfoPrivatehostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerInfoPrivatehostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerInfoPrivatehostParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerInfoPrivatehostParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerInfoPrivatehostParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerInfoPrivatehostParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerInfoPrivatehostParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerInfoPrivatehostParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerInfoPrivatehostParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerInfoPrivatehostParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerInfoPrivatehostParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerInfoPrivatehostParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerInfoPrivatehostParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerInfoPrivatehostParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerInfoPrivatehostParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerInfoPrivatehostParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerInfoPrivatehostParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerInfoPrivatehostParam) GetColumn() []string {
	return p.Column
}
func (p *ServerInfoPrivatehostParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerInfoPrivatehostParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerInfoPrivatehostParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerInfoPrivatehostParam) GetFormat() string {
	return p.Format
}
func (p *ServerInfoPrivatehostParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerInfoPrivatehostParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerInfoPrivatehostParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerInfoPrivatehostParam) GetQuery() string {
	return p.Query
}
func (p *ServerInfoPrivatehostParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerInfoPrivatehostParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerInfoPrivatehostParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerInfoPrivatehostParam) GetId() sacloud.ID {
	return p.Id
}

// ServerAddPrivatehostParam is input parameters for the sacloud API
type ServerAddPrivatehostParam struct {
	ServerId          sacloud.ID `json:"server-id"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewServerAddPrivatehostParam return new ServerAddPrivatehostParam
func NewServerAddPrivatehostParam(in Input) (*ServerAddPrivatehostParam, error) {
	v := &ServerAddPrivatehostParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerAddPrivatehostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerAddPrivatehostParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.ServerId) {
		p.ServerId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ServerAddPrivatehostParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--server-id", p.ServerId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["server-add"].Params["server-id"].ValidateFunc
		errs := validator("--server-id", p.ServerId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerAddPrivatehostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *ServerAddPrivatehostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-add"]
}

func (p *ServerAddPrivatehostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerAddPrivatehostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerAddPrivatehostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerAddPrivatehostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerAddPrivatehostParam) SetServerId(v sacloud.ID) {
	p.ServerId = v
}

func (p *ServerAddPrivatehostParam) GetServerId() sacloud.ID {
	return p.ServerId
}
func (p *ServerAddPrivatehostParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerAddPrivatehostParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerAddPrivatehostParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerAddPrivatehostParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerAddPrivatehostParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerAddPrivatehostParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerAddPrivatehostParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerAddPrivatehostParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerAddPrivatehostParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerAddPrivatehostParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerAddPrivatehostParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerAddPrivatehostParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerAddPrivatehostParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerAddPrivatehostParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerAddPrivatehostParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerAddPrivatehostParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerAddPrivatehostParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerAddPrivatehostParam) GetColumn() []string {
	return p.Column
}
func (p *ServerAddPrivatehostParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerAddPrivatehostParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerAddPrivatehostParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerAddPrivatehostParam) GetFormat() string {
	return p.Format
}
func (p *ServerAddPrivatehostParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerAddPrivatehostParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerAddPrivatehostParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerAddPrivatehostParam) GetQuery() string {
	return p.Query
}
func (p *ServerAddPrivatehostParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerAddPrivatehostParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerAddPrivatehostParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerAddPrivatehostParam) GetId() sacloud.ID {
	return p.Id
}

// ServerDeletePrivatehostParam is input parameters for the sacloud API
type ServerDeletePrivatehostParam struct {
	ServerId          sacloud.ID `json:"server-id"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`

	input Input
}

// NewServerDeletePrivatehostParam return new ServerDeletePrivatehostParam
func NewServerDeletePrivatehostParam(in Input) (*ServerDeletePrivatehostParam, error) {
	v := &ServerDeletePrivatehostParam{
		input: in,
	}
	if err := v.validate(); err != nil {
		return nil, err
	}
	if err := loadParameters(v); err != nil {
		return nil, err
	}
	return v, nil
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ServerDeletePrivatehostParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ServerDeletePrivatehostParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.ServerId) {
		p.ServerId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ServerDeletePrivatehostParam) validate() error {
	var errors []error
	{
		validator := validateRequired
		errs := validator("--server-id", p.ServerId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["server-delete"].Params["server-id"].ValidateFunc
		errs := validator("--server-id", p.ServerId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ServerDeletePrivatehostParam) ResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *ServerDeletePrivatehostParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["server-delete"]
}

func (p *ServerDeletePrivatehostParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ServerDeletePrivatehostParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ServerDeletePrivatehostParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ServerDeletePrivatehostParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ServerDeletePrivatehostParam) SetServerId(v sacloud.ID) {
	p.ServerId = v
}

func (p *ServerDeletePrivatehostParam) GetServerId() sacloud.ID {
	return p.ServerId
}
func (p *ServerDeletePrivatehostParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerDeletePrivatehostParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerDeletePrivatehostParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerDeletePrivatehostParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerDeletePrivatehostParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerDeletePrivatehostParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerDeletePrivatehostParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerDeletePrivatehostParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerDeletePrivatehostParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerDeletePrivatehostParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerDeletePrivatehostParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerDeletePrivatehostParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerDeletePrivatehostParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerDeletePrivatehostParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerDeletePrivatehostParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerDeletePrivatehostParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerDeletePrivatehostParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerDeletePrivatehostParam) GetColumn() []string {
	return p.Column
}
func (p *ServerDeletePrivatehostParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerDeletePrivatehostParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerDeletePrivatehostParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerDeletePrivatehostParam) GetFormat() string {
	return p.Format
}
func (p *ServerDeletePrivatehostParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerDeletePrivatehostParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerDeletePrivatehostParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerDeletePrivatehostParam) GetQuery() string {
	return p.Query
}
func (p *ServerDeletePrivatehostParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerDeletePrivatehostParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerDeletePrivatehostParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerDeletePrivatehostParam) GetId() sacloud.ID {
	return p.Id
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	v0params "github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListNFSParam is input parameters for the sacloud API
type ListNFSParam struct {
	Name              []string
	Id                []sacloud.ID
	Tags              []string
	From              int
	Max               int
	Sort              []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string

	input Input
}

// NewListNFSParam return new ListNFSParam
func NewListNFSParam() *ListNFSParam {
	return &ListNFSParam{}
}

// Initialize init ListNFSParam
func (p *ListNFSParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ListNFSParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *ListNFSParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ListNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ListNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ListNFSParam) GetResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ListNFSParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListNFSParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListNFSParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListNFSParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListNFSParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListNFSParam) SetName(v []string) {
	p.Name = v
}

func (p *ListNFSParam) GetName() []string {
	return p.Name
}
func (p *ListNFSParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListNFSParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListNFSParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListNFSParam) GetTags() []string {
	return p.Tags
}
func (p *ListNFSParam) SetFrom(v int) {
	p.From = v
}

func (p *ListNFSParam) GetFrom() int {
	return p.From
}
func (p *ListNFSParam) SetMax(v int) {
	p.Max = v
}

func (p *ListNFSParam) GetMax() int {
	return p.Max
}
func (p *ListNFSParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListNFSParam) GetSort() []string {
	return p.Sort
}
func (p *ListNFSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListNFSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListNFSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListNFSParam) GetParameters() string {
	return p.Parameters
}
func (p *ListNFSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListNFSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListNFSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListNFSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListNFSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListNFSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListNFSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListNFSParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListNFSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListNFSParam) GetColumn() []string {
	return p.Column
}
func (p *ListNFSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListNFSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListNFSParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListNFSParam) GetFormat() string {
	return p.Format
}
func (p *ListNFSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListNFSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListNFSParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListNFSParam) GetQuery() string {
	return p.Query
}
func (p *ListNFSParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListNFSParam) GetQueryFile() string {
	return p.QueryFile
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ListNFSParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *ListNFSParam) ToV0() *v0params.ListNFSParam {
	return &v0params.ListNFSParam{
		Name:              p.Name,
		Id:                p.Id,
		Tags:              p.Tags,
		From:              p.From,
		Max:               p.Max,
		Sort:              p.Sort,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		OutputType:        p.OutputType,
		Column:            p.Column,
		Quiet:             p.Quiet,
		Format:            p.Format,
		FormatFile:        p.FormatFile,
		Query:             p.Query,
		QueryFile:         p.QueryFile,
	}
}

// CreateNFSParam is input parameters for the sacloud API
type CreateNFSParam struct {
	SwitchId          sacloud.ID
	Plan              string
	Size              int
	Ipaddress         string
	NwMaskLen         int
	DefaultRoute      string
	Name              string
	Description       string
	Tags              []string
	IconId            sacloud.ID
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string

	input Input
}

// NewCreateNFSParam return new CreateNFSParam
func NewCreateNFSParam() *CreateNFSParam {
	return &CreateNFSParam{
		Plan: "hdd", Size: 100}
}

// Initialize init CreateNFSParam
func (p *CreateNFSParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *CreateNFSParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Plan) {
		p.Plan = ""
	}
	if utils.IsEmpty(p.Size) {
		p.Size = 0
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.NwMaskLen) {
		p.NwMaskLen = 0
	}
	if utils.IsEmpty(p.DefaultRoute) {
		p.DefaultRoute = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

func (p *CreateNFSParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["size"].ValidateFunc
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--nw-mask-len", p.NwMaskLen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["nw-mask-len"].ValidateFunc
		errs := validator("--nw-mask-len", p.NwMaskLen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["create"].Params["default-route"].ValidateFunc
		errs := validator("--default-route", p.DefaultRoute)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *CreateNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *CreateNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *CreateNFSParam) GetResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *CreateNFSParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateNFSParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateNFSParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateNFSParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateNFSParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateNFSParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *CreateNFSParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *CreateNFSParam) SetPlan(v string) {
	p.Plan = v
}

func (p *CreateNFSParam) GetPlan() string {
	return p.Plan
}
func (p *CreateNFSParam) SetSize(v int) {
	p.Size = v
}

func (p *CreateNFSParam) GetSize() int {
	return p.Size
}
func (p *CreateNFSParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *CreateNFSParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *CreateNFSParam) SetNwMaskLen(v int) {
	p.NwMaskLen = v
}

func (p *CreateNFSParam) GetNwMaskLen() int {
	return p.NwMaskLen
}
func (p *CreateNFSParam) SetDefaultRoute(v string) {
	p.DefaultRoute = v
}

func (p *CreateNFSParam) GetDefaultRoute() string {
	return p.DefaultRoute
}
func (p *CreateNFSParam) SetName(v string) {
	p.Name = v
}

func (p *CreateNFSParam) GetName() string {
	return p.Name
}
func (p *CreateNFSParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateNFSParam) GetDescription() string {
	return p.Description
}
func (p *CreateNFSParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateNFSParam) GetTags() []string {
	return p.Tags
}
func (p *CreateNFSParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateNFSParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateNFSParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateNFSParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateNFSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateNFSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateNFSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateNFSParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateNFSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateNFSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateNFSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateNFSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateNFSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateNFSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateNFSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateNFSParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateNFSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateNFSParam) GetColumn() []string {
	return p.Column
}
func (p *CreateNFSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateNFSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateNFSParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateNFSParam) GetFormat() string {
	return p.Format
}
func (p *CreateNFSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateNFSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateNFSParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateNFSParam) GetQuery() string {
	return p.Query
}
func (p *CreateNFSParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateNFSParam) GetQueryFile() string {
	return p.QueryFile
}

// Changed usacloud v0系との互換性維持のための実装
func (p *CreateNFSParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *CreateNFSParam) ToV0() *v0params.CreateNFSParam {
	return &v0params.CreateNFSParam{
		SwitchId:          p.SwitchId,
		Plan:              p.Plan,
		Size:              p.Size,
		Ipaddress:         p.Ipaddress,
		NwMaskLen:         p.NwMaskLen,
		DefaultRoute:      p.DefaultRoute,
		Name:              p.Name,
		Description:       p.Description,
		Tags:              p.Tags,
		IconId:            p.IconId,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		OutputType:        p.OutputType,
		Column:            p.Column,
		Quiet:             p.Quiet,
		Format:            p.Format,
		FormatFile:        p.FormatFile,
		Query:             p.Query,
		QueryFile:         p.QueryFile,
	}
}

// ReadNFSParam is input parameters for the sacloud API
type ReadNFSParam struct {
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewReadNFSParam return new ReadNFSParam
func NewReadNFSParam() *ReadNFSParam {
	return &ReadNFSParam{}
}

// Initialize init ReadNFSParam
func (p *ReadNFSParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ReadNFSParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ReadNFSParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ReadNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ReadNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ReadNFSParam) GetResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ReadNFSParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadNFSParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadNFSParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadNFSParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadNFSParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ReadNFSParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadNFSParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadNFSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadNFSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadNFSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadNFSParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadNFSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadNFSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadNFSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadNFSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadNFSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadNFSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadNFSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadNFSParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadNFSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadNFSParam) GetColumn() []string {
	return p.Column
}
func (p *ReadNFSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadNFSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadNFSParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadNFSParam) GetFormat() string {
	return p.Format
}
func (p *ReadNFSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadNFSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadNFSParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadNFSParam) GetQuery() string {
	return p.Query
}
func (p *ReadNFSParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadNFSParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadNFSParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadNFSParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ReadNFSParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *ReadNFSParam) ToV0() *v0params.ReadNFSParam {
	return &v0params.ReadNFSParam{
		Selector:          p.Selector,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		OutputType:        p.OutputType,
		Column:            p.Column,
		Quiet:             p.Quiet,
		Format:            p.Format,
		FormatFile:        p.FormatFile,
		Query:             p.Query,
		QueryFile:         p.QueryFile,
		Id:                p.Id,
	}
}

// UpdateNFSParam is input parameters for the sacloud API
type UpdateNFSParam struct {
	Selector          []string
	Name              string
	Description       string
	Tags              []string
	IconId            sacloud.ID
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewUpdateNFSParam return new UpdateNFSParam
func NewUpdateNFSParam() *UpdateNFSParam {
	return &UpdateNFSParam{}
}

// Initialize init UpdateNFSParam
func (p *UpdateNFSParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *UpdateNFSParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *UpdateNFSParam) validate() error {
	var errors []error

	{
		validator := define.Resources["NFS"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *UpdateNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *UpdateNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *UpdateNFSParam) GetResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *UpdateNFSParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateNFSParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateNFSParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateNFSParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateNFSParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateNFSParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateNFSParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateNFSParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateNFSParam) GetName() string {
	return p.Name
}
func (p *UpdateNFSParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateNFSParam) GetDescription() string {
	return p.Description
}
func (p *UpdateNFSParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateNFSParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateNFSParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateNFSParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateNFSParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateNFSParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateNFSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateNFSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateNFSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateNFSParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateNFSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateNFSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateNFSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateNFSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateNFSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateNFSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateNFSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateNFSParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateNFSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateNFSParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateNFSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateNFSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateNFSParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateNFSParam) GetFormat() string {
	return p.Format
}
func (p *UpdateNFSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateNFSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateNFSParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateNFSParam) GetQuery() string {
	return p.Query
}
func (p *UpdateNFSParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateNFSParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateNFSParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateNFSParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *UpdateNFSParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *UpdateNFSParam) ToV0() *v0params.UpdateNFSParam {
	return &v0params.UpdateNFSParam{
		Selector:          p.Selector,
		Name:              p.Name,
		Description:       p.Description,
		Tags:              p.Tags,
		IconId:            p.IconId,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		OutputType:        p.OutputType,
		Column:            p.Column,
		Quiet:             p.Quiet,
		Format:            p.Format,
		FormatFile:        p.FormatFile,
		Query:             p.Query,
		QueryFile:         p.QueryFile,
		Id:                p.Id,
	}
}

// DeleteNFSParam is input parameters for the sacloud API
type DeleteNFSParam struct {
	Force             bool
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewDeleteNFSParam return new DeleteNFSParam
func NewDeleteNFSParam() *DeleteNFSParam {
	return &DeleteNFSParam{}
}

// Initialize init DeleteNFSParam
func (p *DeleteNFSParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *DeleteNFSParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Force) {
		p.Force = false
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *DeleteNFSParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *DeleteNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *DeleteNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *DeleteNFSParam) GetResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *DeleteNFSParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteNFSParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteNFSParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteNFSParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteNFSParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteNFSParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteNFSParam) GetForce() bool {
	return p.Force
}
func (p *DeleteNFSParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteNFSParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteNFSParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteNFSParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteNFSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteNFSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteNFSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteNFSParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteNFSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteNFSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteNFSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteNFSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteNFSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteNFSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteNFSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteNFSParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteNFSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteNFSParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteNFSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteNFSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteNFSParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteNFSParam) GetFormat() string {
	return p.Format
}
func (p *DeleteNFSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteNFSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteNFSParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteNFSParam) GetQuery() string {
	return p.Query
}
func (p *DeleteNFSParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteNFSParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteNFSParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteNFSParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *DeleteNFSParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *DeleteNFSParam) ToV0() *v0params.DeleteNFSParam {
	return &v0params.DeleteNFSParam{
		Force:             p.Force,
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		OutputType:        p.OutputType,
		Column:            p.Column,
		Quiet:             p.Quiet,
		Format:            p.Format,
		FormatFile:        p.FormatFile,
		Query:             p.Query,
		QueryFile:         p.QueryFile,
		Id:                p.Id,
	}
}

// BootNFSParam is input parameters for the sacloud API
type BootNFSParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewBootNFSParam return new BootNFSParam
func NewBootNFSParam() *BootNFSParam {
	return &BootNFSParam{}
}

// Initialize init BootNFSParam
func (p *BootNFSParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BootNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *BootNFSParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *BootNFSParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *BootNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *BootNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["boot"]
}

func (p *BootNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BootNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BootNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BootNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *BootNFSParam) GetResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *BootNFSParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["boot"]
}

func (p *BootNFSParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BootNFSParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BootNFSParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BootNFSParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *BootNFSParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *BootNFSParam) GetSelector() []string {
	return p.Selector
}
func (p *BootNFSParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BootNFSParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BootNFSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BootNFSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BootNFSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *BootNFSParam) GetParameters() string {
	return p.Parameters
}
func (p *BootNFSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BootNFSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BootNFSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *BootNFSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *BootNFSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BootNFSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BootNFSParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *BootNFSParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *BootNFSParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *BootNFSParam) ToV0() *v0params.BootNFSParam {
	return &v0params.BootNFSParam{
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// ShutdownNFSParam is input parameters for the sacloud API
type ShutdownNFSParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewShutdownNFSParam return new ShutdownNFSParam
func NewShutdownNFSParam() *ShutdownNFSParam {
	return &ShutdownNFSParam{}
}

// Initialize init ShutdownNFSParam
func (p *ShutdownNFSParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ShutdownNFSParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ShutdownNFSParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ShutdownNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ShutdownNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown"]
}

func (p *ShutdownNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ShutdownNFSParam) GetResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ShutdownNFSParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown"]
}

func (p *ShutdownNFSParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownNFSParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownNFSParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownNFSParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ShutdownNFSParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ShutdownNFSParam) GetSelector() []string {
	return p.Selector
}
func (p *ShutdownNFSParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ShutdownNFSParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ShutdownNFSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ShutdownNFSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ShutdownNFSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ShutdownNFSParam) GetParameters() string {
	return p.Parameters
}
func (p *ShutdownNFSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ShutdownNFSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ShutdownNFSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ShutdownNFSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ShutdownNFSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ShutdownNFSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ShutdownNFSParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ShutdownNFSParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ShutdownNFSParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *ShutdownNFSParam) ToV0() *v0params.ShutdownNFSParam {
	return &v0params.ShutdownNFSParam{
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// ShutdownForceNFSParam is input parameters for the sacloud API
type ShutdownForceNFSParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewShutdownForceNFSParam return new ShutdownForceNFSParam
func NewShutdownForceNFSParam() *ShutdownForceNFSParam {
	return &ShutdownForceNFSParam{}
}

// Initialize init ShutdownForceNFSParam
func (p *ShutdownForceNFSParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownForceNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ShutdownForceNFSParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ShutdownForceNFSParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ShutdownForceNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ShutdownForceNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown-force"]
}

func (p *ShutdownForceNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownForceNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownForceNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownForceNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ShutdownForceNFSParam) GetResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ShutdownForceNFSParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown-force"]
}

func (p *ShutdownForceNFSParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownForceNFSParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownForceNFSParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownForceNFSParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ShutdownForceNFSParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ShutdownForceNFSParam) GetSelector() []string {
	return p.Selector
}
func (p *ShutdownForceNFSParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ShutdownForceNFSParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ShutdownForceNFSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ShutdownForceNFSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ShutdownForceNFSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ShutdownForceNFSParam) GetParameters() string {
	return p.Parameters
}
func (p *ShutdownForceNFSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ShutdownForceNFSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ShutdownForceNFSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ShutdownForceNFSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ShutdownForceNFSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ShutdownForceNFSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ShutdownForceNFSParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ShutdownForceNFSParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ShutdownForceNFSParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *ShutdownForceNFSParam) ToV0() *v0params.ShutdownForceNFSParam {
	return &v0params.ShutdownForceNFSParam{
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// ResetNFSParam is input parameters for the sacloud API
type ResetNFSParam struct {
	Selector          []string
	Assumeyes         bool
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewResetNFSParam return new ResetNFSParam
func NewResetNFSParam() *ResetNFSParam {
	return &ResetNFSParam{}
}

// Initialize init ResetNFSParam
func (p *ResetNFSParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResetNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *ResetNFSParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *ResetNFSParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *ResetNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ResetNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["reset"]
}

func (p *ResetNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResetNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResetNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResetNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *ResetNFSParam) GetResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ResetNFSParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["reset"]
}

func (p *ResetNFSParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResetNFSParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResetNFSParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResetNFSParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ResetNFSParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ResetNFSParam) GetSelector() []string {
	return p.Selector
}
func (p *ResetNFSParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ResetNFSParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ResetNFSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ResetNFSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ResetNFSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ResetNFSParam) GetParameters() string {
	return p.Parameters
}
func (p *ResetNFSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ResetNFSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ResetNFSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ResetNFSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ResetNFSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ResetNFSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ResetNFSParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ResetNFSParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *ResetNFSParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *ResetNFSParam) ToV0() *v0params.ResetNFSParam {
	return &v0params.ResetNFSParam{
		Selector:          p.Selector,
		Assumeyes:         p.Assumeyes,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// WaitForBootNFSParam is input parameters for the sacloud API
type WaitForBootNFSParam struct {
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewWaitForBootNFSParam return new WaitForBootNFSParam
func NewWaitForBootNFSParam() *WaitForBootNFSParam {
	return &WaitForBootNFSParam{}
}

// Initialize init WaitForBootNFSParam
func (p *WaitForBootNFSParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForBootNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *WaitForBootNFSParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *WaitForBootNFSParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *WaitForBootNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *WaitForBootNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-boot"]
}

func (p *WaitForBootNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForBootNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForBootNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForBootNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *WaitForBootNFSParam) GetResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *WaitForBootNFSParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-boot"]
}

func (p *WaitForBootNFSParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForBootNFSParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForBootNFSParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForBootNFSParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *WaitForBootNFSParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *WaitForBootNFSParam) GetSelector() []string {
	return p.Selector
}
func (p *WaitForBootNFSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForBootNFSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForBootNFSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *WaitForBootNFSParam) GetParameters() string {
	return p.Parameters
}
func (p *WaitForBootNFSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForBootNFSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForBootNFSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *WaitForBootNFSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *WaitForBootNFSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForBootNFSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForBootNFSParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *WaitForBootNFSParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *WaitForBootNFSParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *WaitForBootNFSParam) ToV0() *v0params.WaitForBootNFSParam {
	return &v0params.WaitForBootNFSParam{
		Selector:          p.Selector,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// WaitForDownNFSParam is input parameters for the sacloud API
type WaitForDownNFSParam struct {
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	Id                sacloud.ID

	input Input
}

// NewWaitForDownNFSParam return new WaitForDownNFSParam
func NewWaitForDownNFSParam() *WaitForDownNFSParam {
	return &WaitForDownNFSParam{}
}

// Initialize init WaitForDownNFSParam
func (p *WaitForDownNFSParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForDownNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *WaitForDownNFSParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *WaitForDownNFSParam) validate() error {
	var errors []error

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *WaitForDownNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *WaitForDownNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-down"]
}

func (p *WaitForDownNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForDownNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForDownNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForDownNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *WaitForDownNFSParam) GetResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *WaitForDownNFSParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-down"]
}

func (p *WaitForDownNFSParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForDownNFSParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForDownNFSParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForDownNFSParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *WaitForDownNFSParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *WaitForDownNFSParam) GetSelector() []string {
	return p.Selector
}
func (p *WaitForDownNFSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForDownNFSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForDownNFSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *WaitForDownNFSParam) GetParameters() string {
	return p.Parameters
}
func (p *WaitForDownNFSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForDownNFSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForDownNFSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *WaitForDownNFSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *WaitForDownNFSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForDownNFSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForDownNFSParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *WaitForDownNFSParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *WaitForDownNFSParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *WaitForDownNFSParam) ToV0() *v0params.WaitForDownNFSParam {
	return &v0params.WaitForDownNFSParam{
		Selector:          p.Selector,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		Id:                p.Id,
	}
}

// MonitorNicNFSParam is input parameters for the sacloud API
type MonitorNicNFSParam struct {
	Start             string
	End               string
	KeyFormat         string
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewMonitorNicNFSParam return new MonitorNicNFSParam
func NewMonitorNicNFSParam() *MonitorNicNFSParam {
	return &MonitorNicNFSParam{
		KeyFormat: "sakuracloud.disk.{{.ID}}.nic"}
}

// Initialize init MonitorNicNFSParam
func (p *MonitorNicNFSParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorNicNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *MonitorNicNFSParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *MonitorNicNFSParam) validate() error {
	var errors []error

	{
		validator := define.Resources["NFS"].Commands["monitor-nic"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["monitor-nic"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *MonitorNicNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *MonitorNicNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor-nic"]
}

func (p *MonitorNicNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorNicNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorNicNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorNicNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *MonitorNicNFSParam) GetResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *MonitorNicNFSParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor-nic"]
}

func (p *MonitorNicNFSParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorNicNFSParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorNicNFSParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorNicNFSParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorNicNFSParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorNicNFSParam) GetStart() string {
	return p.Start
}
func (p *MonitorNicNFSParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorNicNFSParam) GetEnd() string {
	return p.End
}
func (p *MonitorNicNFSParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorNicNFSParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorNicNFSParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *MonitorNicNFSParam) GetSelector() []string {
	return p.Selector
}
func (p *MonitorNicNFSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *MonitorNicNFSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *MonitorNicNFSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *MonitorNicNFSParam) GetParameters() string {
	return p.Parameters
}
func (p *MonitorNicNFSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *MonitorNicNFSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *MonitorNicNFSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *MonitorNicNFSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *MonitorNicNFSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *MonitorNicNFSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *MonitorNicNFSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *MonitorNicNFSParam) GetOutputType() string {
	return p.OutputType
}
func (p *MonitorNicNFSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *MonitorNicNFSParam) GetColumn() []string {
	return p.Column
}
func (p *MonitorNicNFSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *MonitorNicNFSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *MonitorNicNFSParam) SetFormat(v string) {
	p.Format = v
}

func (p *MonitorNicNFSParam) GetFormat() string {
	return p.Format
}
func (p *MonitorNicNFSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *MonitorNicNFSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *MonitorNicNFSParam) SetQuery(v string) {
	p.Query = v
}

func (p *MonitorNicNFSParam) GetQuery() string {
	return p.Query
}
func (p *MonitorNicNFSParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *MonitorNicNFSParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *MonitorNicNFSParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *MonitorNicNFSParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *MonitorNicNFSParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *MonitorNicNFSParam) ToV0() *v0params.MonitorNicNFSParam {
	return &v0params.MonitorNicNFSParam{
		Start:             p.Start,
		End:               p.End,
		KeyFormat:         p.KeyFormat,
		Selector:          p.Selector,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		OutputType:        p.OutputType,
		Column:            p.Column,
		Quiet:             p.Quiet,
		Format:            p.Format,
		FormatFile:        p.FormatFile,
		Query:             p.Query,
		QueryFile:         p.QueryFile,
		Id:                p.Id,
	}
}

// MonitorFreeDiskSizeNFSParam is input parameters for the sacloud API
type MonitorFreeDiskSizeNFSParam struct {
	Start             string
	End               string
	KeyFormat         string
	Selector          []string
	ParamTemplate     string
	Parameters        string
	ParamTemplateFile string
	ParameterFile     string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Query             string
	QueryFile         string
	Id                sacloud.ID

	input Input
}

// NewMonitorFreeDiskSizeNFSParam return new MonitorFreeDiskSizeNFSParam
func NewMonitorFreeDiskSizeNFSParam() *MonitorFreeDiskSizeNFSParam {
	return &MonitorFreeDiskSizeNFSParam{
		KeyFormat: "sakuracloud.disk.{{.ID}}.free-disk-size"}
}

// Initialize init MonitorFreeDiskSizeNFSParam
func (p *MonitorFreeDiskSizeNFSParam) Initialize(in Input, args []string) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorFreeDiskSizeNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

// FillValueToSkeleton fills empty value to the parameter
func (p *MonitorFreeDiskSizeNFSParam) FillValueToSkeleton() {
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if utils.IsEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if utils.IsEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if utils.IsEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if utils.IsEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if utils.IsEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if utils.IsEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if utils.IsEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if utils.IsEmpty(p.Column) {
		p.Column = []string{""}
	}
	if utils.IsEmpty(p.Quiet) {
		p.Quiet = false
	}
	if utils.IsEmpty(p.Format) {
		p.Format = ""
	}
	if utils.IsEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if utils.IsEmpty(p.Query) {
		p.Query = ""
	}
	if utils.IsEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if utils.IsEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

func (p *MonitorFreeDiskSizeNFSParam) validate() error {
	var errors []error

	{
		validator := define.Resources["NFS"].Commands["monitor-free-disk-size"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["monitor-free-disk-size"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		errs := validateParameterOptions(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	return utils.FlattenErrors(errors)
}

func (p *MonitorFreeDiskSizeNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *MonitorFreeDiskSizeNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor-free-disk-size"]
}

func (p *MonitorFreeDiskSizeNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorFreeDiskSizeNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorFreeDiskSizeNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorFreeDiskSizeNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

/*
 * v0系との互換性維持のための実装
 */
func (p *MonitorFreeDiskSizeNFSParam) GetResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *MonitorFreeDiskSizeNFSParam) GetCommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor-free-disk-size"]
}

func (p *MonitorFreeDiskSizeNFSParam) GetIncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorFreeDiskSizeNFSParam) GetExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorFreeDiskSizeNFSParam) GetTableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorFreeDiskSizeNFSParam) GetColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorFreeDiskSizeNFSParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorFreeDiskSizeNFSParam) GetStart() string {
	return p.Start
}
func (p *MonitorFreeDiskSizeNFSParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorFreeDiskSizeNFSParam) GetEnd() string {
	return p.End
}
func (p *MonitorFreeDiskSizeNFSParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorFreeDiskSizeNFSParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorFreeDiskSizeNFSParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *MonitorFreeDiskSizeNFSParam) GetSelector() []string {
	return p.Selector
}
func (p *MonitorFreeDiskSizeNFSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *MonitorFreeDiskSizeNFSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *MonitorFreeDiskSizeNFSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *MonitorFreeDiskSizeNFSParam) GetParameters() string {
	return p.Parameters
}
func (p *MonitorFreeDiskSizeNFSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *MonitorFreeDiskSizeNFSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *MonitorFreeDiskSizeNFSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *MonitorFreeDiskSizeNFSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *MonitorFreeDiskSizeNFSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *MonitorFreeDiskSizeNFSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *MonitorFreeDiskSizeNFSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *MonitorFreeDiskSizeNFSParam) GetOutputType() string {
	return p.OutputType
}
func (p *MonitorFreeDiskSizeNFSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *MonitorFreeDiskSizeNFSParam) GetColumn() []string {
	return p.Column
}
func (p *MonitorFreeDiskSizeNFSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *MonitorFreeDiskSizeNFSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *MonitorFreeDiskSizeNFSParam) SetFormat(v string) {
	p.Format = v
}

func (p *MonitorFreeDiskSizeNFSParam) GetFormat() string {
	return p.Format
}
func (p *MonitorFreeDiskSizeNFSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *MonitorFreeDiskSizeNFSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *MonitorFreeDiskSizeNFSParam) SetQuery(v string) {
	p.Query = v
}

func (p *MonitorFreeDiskSizeNFSParam) GetQuery() string {
	return p.Query
}
func (p *MonitorFreeDiskSizeNFSParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *MonitorFreeDiskSizeNFSParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *MonitorFreeDiskSizeNFSParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *MonitorFreeDiskSizeNFSParam) GetId() sacloud.ID {
	return p.Id
}

// Changed usacloud v0系との互換性維持のための実装
func (p *MonitorFreeDiskSizeNFSParam) Changed(name string) bool {
	return p.input.Changed(name)
}

func (p *MonitorFreeDiskSizeNFSParam) ToV0() *v0params.MonitorFreeDiskSizeNFSParam {
	return &v0params.MonitorFreeDiskSizeNFSParam{
		Start:             p.Start,
		End:               p.End,
		KeyFormat:         p.KeyFormat,
		Selector:          p.Selector,
		ParamTemplate:     p.ParamTemplate,
		Parameters:        p.Parameters,
		ParamTemplateFile: p.ParamTemplateFile,
		ParameterFile:     p.ParameterFile,
		GenerateSkeleton:  p.GenerateSkeleton,
		OutputType:        p.OutputType,
		Column:            p.Column,
		Quiet:             p.Quiet,
		Format:            p.Format,
		FormatFile:        p.FormatFile,
		Query:             p.Query,
		QueryFile:         p.QueryFile,
		Id:                p.Id,
	}
}

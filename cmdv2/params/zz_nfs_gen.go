// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListNFSParam is input parameters for the sacloud API
type ListNFSParam struct {
	Name []string
	Id   []sacloud.ID
	From int
	Max  int
	Sort []string
	Tags []string

	input Input
}

// NewListNFSParam return new ListNFSParam
func NewListNFSParam() *ListNFSParam {
	return &ListNFSParam{}
}

// Initialize init ListNFSParam
func (p *ListNFSParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListNFSParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}

}

func (p *ListNFSParam) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ListNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListNFSParam) SetName(v []string) {
	p.Name = v
}

func (p *ListNFSParam) GetName() []string {
	return p.Name
}
func (p *ListNFSParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListNFSParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListNFSParam) SetFrom(v int) {
	p.From = v
}

func (p *ListNFSParam) GetFrom() int {
	return p.From
}
func (p *ListNFSParam) SetMax(v int) {
	p.Max = v
}

func (p *ListNFSParam) GetMax() int {
	return p.Max
}
func (p *ListNFSParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListNFSParam) GetSort() []string {
	return p.Sort
}
func (p *ListNFSParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListNFSParam) GetTags() []string {
	return p.Tags
}

// CreateNFSParam is input parameters for the sacloud API
type CreateNFSParam struct {
	NwMaskLen    int
	DefaultRoute string
	Name         string
	Description  string
	IconId       sacloud.ID
	Plan         string
	Size         int
	Ipaddress    string
	SwitchId     sacloud.ID
	Tags         []string

	input Input
}

// NewCreateNFSParam return new CreateNFSParam
func NewCreateNFSParam() *CreateNFSParam {
	return &CreateNFSParam{
		Plan: "hdd", Size: 100}
}

// Initialize init CreateNFSParam
func (p *CreateNFSParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *CreateNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *CreateNFSParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.NwMaskLen) {
		p.NwMaskLen = 0
	}
	if utils.IsEmpty(p.DefaultRoute) {
		p.DefaultRoute = ""
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Plan) {
		p.Plan = ""
	}
	if utils.IsEmpty(p.Size) {
		p.Size = 0
	}
	if utils.IsEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if utils.IsEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}

}

func (p *CreateNFSParam) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--nw-mask-len", p.NwMaskLen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["nw-mask-len"].ValidateFunc
		errs := validator("--nw-mask-len", p.NwMaskLen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["create"].Params["default-route"].ValidateFunc
		errs := validator("--default-route", p.DefaultRoute)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["size"].ValidateFunc
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["NFS"].Commands["create"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *CreateNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *CreateNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["create"]
}

func (p *CreateNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *CreateNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *CreateNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *CreateNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *CreateNFSParam) SetNwMaskLen(v int) {
	p.NwMaskLen = v
}

func (p *CreateNFSParam) GetNwMaskLen() int {
	return p.NwMaskLen
}
func (p *CreateNFSParam) SetDefaultRoute(v string) {
	p.DefaultRoute = v
}

func (p *CreateNFSParam) GetDefaultRoute() string {
	return p.DefaultRoute
}
func (p *CreateNFSParam) SetName(v string) {
	p.Name = v
}

func (p *CreateNFSParam) GetName() string {
	return p.Name
}
func (p *CreateNFSParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateNFSParam) GetDescription() string {
	return p.Description
}
func (p *CreateNFSParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateNFSParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateNFSParam) SetPlan(v string) {
	p.Plan = v
}

func (p *CreateNFSParam) GetPlan() string {
	return p.Plan
}
func (p *CreateNFSParam) SetSize(v int) {
	p.Size = v
}

func (p *CreateNFSParam) GetSize() int {
	return p.Size
}
func (p *CreateNFSParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *CreateNFSParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *CreateNFSParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *CreateNFSParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *CreateNFSParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateNFSParam) GetTags() []string {
	return p.Tags
}

// ReadNFSParam is input parameters for the sacloud API
type ReadNFSParam struct {
	input Input
}

// NewReadNFSParam return new ReadNFSParam
func NewReadNFSParam() *ReadNFSParam {
	return &ReadNFSParam{}
}

// Initialize init ReadNFSParam
func (p *ReadNFSParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ReadNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ReadNFSParam) fillValueToSkeleton() {

}

func (p *ReadNFSParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ReadNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ReadNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["read"]
}

func (p *ReadNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ReadNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ReadNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ReadNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// UpdateNFSParam is input parameters for the sacloud API
type UpdateNFSParam struct {
	Tags        []string
	IconId      sacloud.ID
	Name        string
	Description string

	input Input
}

// NewUpdateNFSParam return new UpdateNFSParam
func NewUpdateNFSParam() *UpdateNFSParam {
	return &UpdateNFSParam{}
}

// Initialize init UpdateNFSParam
func (p *UpdateNFSParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *UpdateNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *UpdateNFSParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if utils.IsEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if utils.IsEmpty(p.Name) {
		p.Name = ""
	}
	if utils.IsEmpty(p.Description) {
		p.Description = ""
	}

}

func (p *UpdateNFSParam) validate() error {
	var errors []error

	{
		validator := define.Resources["NFS"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *UpdateNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *UpdateNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["update"]
}

func (p *UpdateNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *UpdateNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *UpdateNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *UpdateNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *UpdateNFSParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateNFSParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateNFSParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateNFSParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateNFSParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateNFSParam) GetName() string {
	return p.Name
}
func (p *UpdateNFSParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateNFSParam) GetDescription() string {
	return p.Description
}

// DeleteNFSParam is input parameters for the sacloud API
type DeleteNFSParam struct {
	Force bool

	input Input
}

// NewDeleteNFSParam return new DeleteNFSParam
func NewDeleteNFSParam() *DeleteNFSParam {
	return &DeleteNFSParam{}
}

// Initialize init DeleteNFSParam
func (p *DeleteNFSParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *DeleteNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *DeleteNFSParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Force) {
		p.Force = false
	}

}

func (p *DeleteNFSParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *DeleteNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *DeleteNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["delete"]
}

func (p *DeleteNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *DeleteNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *DeleteNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *DeleteNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *DeleteNFSParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteNFSParam) GetForce() bool {
	return p.Force
}

// BootNFSParam is input parameters for the sacloud API
type BootNFSParam struct {
	input Input
}

// NewBootNFSParam return new BootNFSParam
func NewBootNFSParam() *BootNFSParam {
	return &BootNFSParam{}
}

// Initialize init BootNFSParam
func (p *BootNFSParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *BootNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *BootNFSParam) fillValueToSkeleton() {

}

func (p *BootNFSParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *BootNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *BootNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["boot"]
}

func (p *BootNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *BootNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *BootNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *BootNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ShutdownNFSParam is input parameters for the sacloud API
type ShutdownNFSParam struct {
	input Input
}

// NewShutdownNFSParam return new ShutdownNFSParam
func NewShutdownNFSParam() *ShutdownNFSParam {
	return &ShutdownNFSParam{}
}

// Initialize init ShutdownNFSParam
func (p *ShutdownNFSParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShutdownNFSParam) fillValueToSkeleton() {

}

func (p *ShutdownNFSParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ShutdownNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ShutdownNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown"]
}

func (p *ShutdownNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ShutdownForceNFSParam is input parameters for the sacloud API
type ShutdownForceNFSParam struct {
	input Input
}

// NewShutdownForceNFSParam return new ShutdownForceNFSParam
func NewShutdownForceNFSParam() *ShutdownForceNFSParam {
	return &ShutdownForceNFSParam{}
}

// Initialize init ShutdownForceNFSParam
func (p *ShutdownForceNFSParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ShutdownForceNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ShutdownForceNFSParam) fillValueToSkeleton() {

}

func (p *ShutdownForceNFSParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ShutdownForceNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ShutdownForceNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["shutdown-force"]
}

func (p *ShutdownForceNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ShutdownForceNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ShutdownForceNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ShutdownForceNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// ResetNFSParam is input parameters for the sacloud API
type ResetNFSParam struct {
	input Input
}

// NewResetNFSParam return new ResetNFSParam
func NewResetNFSParam() *ResetNFSParam {
	return &ResetNFSParam{}
}

// Initialize init ResetNFSParam
func (p *ResetNFSParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ResetNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ResetNFSParam) fillValueToSkeleton() {

}

func (p *ResetNFSParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *ResetNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *ResetNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["reset"]
}

func (p *ResetNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ResetNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ResetNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ResetNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// WaitForBootNFSParam is input parameters for the sacloud API
type WaitForBootNFSParam struct {
	input Input
}

// NewWaitForBootNFSParam return new WaitForBootNFSParam
func NewWaitForBootNFSParam() *WaitForBootNFSParam {
	return &WaitForBootNFSParam{}
}

// Initialize init WaitForBootNFSParam
func (p *WaitForBootNFSParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForBootNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForBootNFSParam) fillValueToSkeleton() {

}

func (p *WaitForBootNFSParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *WaitForBootNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *WaitForBootNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-boot"]
}

func (p *WaitForBootNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForBootNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForBootNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForBootNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// WaitForDownNFSParam is input parameters for the sacloud API
type WaitForDownNFSParam struct {
	input Input
}

// NewWaitForDownNFSParam return new WaitForDownNFSParam
func NewWaitForDownNFSParam() *WaitForDownNFSParam {
	return &WaitForDownNFSParam{}
}

// Initialize init WaitForDownNFSParam
func (p *WaitForDownNFSParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *WaitForDownNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *WaitForDownNFSParam) fillValueToSkeleton() {

}

func (p *WaitForDownNFSParam) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *WaitForDownNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *WaitForDownNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["wait-for-down"]
}

func (p *WaitForDownNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *WaitForDownNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *WaitForDownNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *WaitForDownNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// MonitorNicNFSParam is input parameters for the sacloud API
type MonitorNicNFSParam struct {
	End       string
	KeyFormat string
	Start     string

	input Input
}

// NewMonitorNicNFSParam return new MonitorNicNFSParam
func NewMonitorNicNFSParam() *MonitorNicNFSParam {
	return &MonitorNicNFSParam{
		KeyFormat: "sakuracloud.disk.{{.ID}}.nic"}
}

// Initialize init MonitorNicNFSParam
func (p *MonitorNicNFSParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorNicNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorNicNFSParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}

}

func (p *MonitorNicNFSParam) validate() error {
	var errors []error

	{
		validator := define.Resources["NFS"].Commands["monitor-nic"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["monitor-nic"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorNicNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *MonitorNicNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor-nic"]
}

func (p *MonitorNicNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorNicNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorNicNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorNicNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorNicNFSParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorNicNFSParam) GetEnd() string {
	return p.End
}
func (p *MonitorNicNFSParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorNicNFSParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorNicNFSParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorNicNFSParam) GetStart() string {
	return p.Start
}

// MonitorFreeDiskSizeNFSParam is input parameters for the sacloud API
type MonitorFreeDiskSizeNFSParam struct {
	Start     string
	End       string
	KeyFormat string

	input Input
}

// NewMonitorFreeDiskSizeNFSParam return new MonitorFreeDiskSizeNFSParam
func NewMonitorFreeDiskSizeNFSParam() *MonitorFreeDiskSizeNFSParam {
	return &MonitorFreeDiskSizeNFSParam{
		KeyFormat: "sakuracloud.disk.{{.ID}}.free-disk-size"}
}

// Initialize init MonitorFreeDiskSizeNFSParam
func (p *MonitorFreeDiskSizeNFSParam) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *MonitorFreeDiskSizeNFSParam) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *MonitorFreeDiskSizeNFSParam) fillValueToSkeleton() {
	if utils.IsEmpty(p.Start) {
		p.Start = ""
	}
	if utils.IsEmpty(p.End) {
		p.End = ""
	}
	if utils.IsEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}

}

func (p *MonitorFreeDiskSizeNFSParam) validate() error {
	var errors []error

	{
		validator := define.Resources["NFS"].Commands["monitor-free-disk-size"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["NFS"].Commands["monitor-free-disk-size"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *MonitorFreeDiskSizeNFSParam) ResourceDef() *schema.Resource {
	return define.Resources["NFS"]
}

func (p *MonitorFreeDiskSizeNFSParam) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["monitor-free-disk-size"]
}

func (p *MonitorFreeDiskSizeNFSParam) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *MonitorFreeDiskSizeNFSParam) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *MonitorFreeDiskSizeNFSParam) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *MonitorFreeDiskSizeNFSParam) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *MonitorFreeDiskSizeNFSParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorFreeDiskSizeNFSParam) GetStart() string {
	return p.Start
}
func (p *MonitorFreeDiskSizeNFSParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorFreeDiskSizeNFSParam) GetEnd() string {
	return p.End
}
func (p *MonitorFreeDiskSizeNFSParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorFreeDiskSizeNFSParam) GetKeyFormat() string {
	return p.KeyFormat
}

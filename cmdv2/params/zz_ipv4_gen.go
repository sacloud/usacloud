// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"io"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/sacloud/usacloud/pkg/validation"
	"github.com/sacloud/usacloud/schema"
)

// ListIPv4Param is input parameters for the sacloud API
type ListIPv4Param struct {
	From int
	Max  int
	Sort []string
	Name []string
	Id   []sacloud.ID

	input Input
}

// NewListIPv4Param return new ListIPv4Param
func NewListIPv4Param() *ListIPv4Param {
	return &ListIPv4Param{}
}

// Initialize init ListIPv4Param
func (p *ListIPv4Param) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *ListIPv4Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *ListIPv4Param) fillValueToSkeleton() {
	if utils.IsEmpty(p.From) {
		p.From = 0
	}
	if utils.IsEmpty(p.Max) {
		p.Max = 0
	}
	if utils.IsEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if utils.IsEmpty(p.Name) {
		p.Name = []string{""}
	}
	if utils.IsEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}

}

func (p *ListIPv4Param) validate() error {
	var errors []error

	{
		errs := validation.ConflictsWith("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := define.Resources["IPv4"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validation.ConflictsWith("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *ListIPv4Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv4"]
}

func (p *ListIPv4Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["list"]
}

func (p *ListIPv4Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *ListIPv4Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *ListIPv4Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *ListIPv4Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *ListIPv4Param) SetFrom(v int) {
	p.From = v
}

func (p *ListIPv4Param) GetFrom() int {
	return p.From
}
func (p *ListIPv4Param) SetMax(v int) {
	p.Max = v
}

func (p *ListIPv4Param) GetMax() int {
	return p.Max
}
func (p *ListIPv4Param) SetSort(v []string) {
	p.Sort = v
}

func (p *ListIPv4Param) GetSort() []string {
	return p.Sort
}
func (p *ListIPv4Param) SetName(v []string) {
	p.Name = v
}

func (p *ListIPv4Param) GetName() []string {
	return p.Name
}
func (p *ListIPv4Param) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListIPv4Param) GetId() []sacloud.ID {
	return p.Id
}

// PtrAddIPv4Param is input parameters for the sacloud API
type PtrAddIPv4Param struct {
	Hostname string

	input Input
}

// NewPtrAddIPv4Param return new PtrAddIPv4Param
func NewPtrAddIPv4Param() *PtrAddIPv4Param {
	return &PtrAddIPv4Param{}
}

// Initialize init PtrAddIPv4Param
func (p *PtrAddIPv4Param) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PtrAddIPv4Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PtrAddIPv4Param) fillValueToSkeleton() {
	if utils.IsEmpty(p.Hostname) {
		p.Hostname = ""
	}

}

func (p *PtrAddIPv4Param) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--hostname", p.Hostname)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PtrAddIPv4Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv4"]
}

func (p *PtrAddIPv4Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ptr-add"]
}

func (p *PtrAddIPv4Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PtrAddIPv4Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PtrAddIPv4Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PtrAddIPv4Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PtrAddIPv4Param) SetHostname(v string) {
	p.Hostname = v
}

func (p *PtrAddIPv4Param) GetHostname() string {
	return p.Hostname
}

// PtrReadIPv4Param is input parameters for the sacloud API
type PtrReadIPv4Param struct {
	input Input
}

// NewPtrReadIPv4Param return new PtrReadIPv4Param
func NewPtrReadIPv4Param() *PtrReadIPv4Param {
	return &PtrReadIPv4Param{}
}

// Initialize init PtrReadIPv4Param
func (p *PtrReadIPv4Param) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PtrReadIPv4Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PtrReadIPv4Param) fillValueToSkeleton() {

}

func (p *PtrReadIPv4Param) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *PtrReadIPv4Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv4"]
}

func (p *PtrReadIPv4Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ptr-read"]
}

func (p *PtrReadIPv4Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PtrReadIPv4Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PtrReadIPv4Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PtrReadIPv4Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// PtrUpdateIPv4Param is input parameters for the sacloud API
type PtrUpdateIPv4Param struct {
	Hostname string

	input Input
}

// NewPtrUpdateIPv4Param return new PtrUpdateIPv4Param
func NewPtrUpdateIPv4Param() *PtrUpdateIPv4Param {
	return &PtrUpdateIPv4Param{}
}

// Initialize init PtrUpdateIPv4Param
func (p *PtrUpdateIPv4Param) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PtrUpdateIPv4Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PtrUpdateIPv4Param) fillValueToSkeleton() {
	if utils.IsEmpty(p.Hostname) {
		p.Hostname = ""
	}

}

func (p *PtrUpdateIPv4Param) validate() error {
	var errors []error

	{
		validator := validateRequired
		errs := validator("--hostname", p.Hostname)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return utils.FlattenErrors(errors)
}

func (p *PtrUpdateIPv4Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv4"]
}

func (p *PtrUpdateIPv4Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ptr-update"]
}

func (p *PtrUpdateIPv4Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PtrUpdateIPv4Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PtrUpdateIPv4Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PtrUpdateIPv4Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

func (p *PtrUpdateIPv4Param) SetHostname(v string) {
	p.Hostname = v
}

func (p *PtrUpdateIPv4Param) GetHostname() string {
	return p.Hostname
}

// PtrDeleteIPv4Param is input parameters for the sacloud API
type PtrDeleteIPv4Param struct {
	input Input
}

// NewPtrDeleteIPv4Param return new PtrDeleteIPv4Param
func NewPtrDeleteIPv4Param() *PtrDeleteIPv4Param {
	return &PtrDeleteIPv4Param{}
}

// Initialize init PtrDeleteIPv4Param
func (p *PtrDeleteIPv4Param) Initialize(in Input) error {
	p.input = in
	if err := p.validate(); err != nil {
		return err
	}
	return loadParameters(p)
}

// WriteSkeleton writes skeleton of JSON encoded parameters to specified writer
func (p *PtrDeleteIPv4Param) WriteSkeleton(writer io.Writer) error {
	return writeSkeleton(p, writer)
}

func (p *PtrDeleteIPv4Param) fillValueToSkeleton() {

}

func (p *PtrDeleteIPv4Param) validate() error {
	var errors []error

	return utils.FlattenErrors(errors)
}

func (p *PtrDeleteIPv4Param) ResourceDef() *schema.Resource {
	return define.Resources["IPv4"]
}

func (p *PtrDeleteIPv4Param) CommandDef() *schema.Command {
	return p.ResourceDef().Commands["ptr-delete"]
}

func (p *PtrDeleteIPv4Param) IncludeFields() []string {
	return p.CommandDef().IncludeFields
}

func (p *PtrDeleteIPv4Param) ExcludeFields() []string {
	return p.CommandDef().ExcludeFields
}

func (p *PtrDeleteIPv4Param) TableType() output.TableType {
	return p.CommandDef().TableType
}

func (p *PtrDeleteIPv4Param) ColumnDefs() []output.ColumnDef {
	return p.CommandDef().TableColumnDefines
}

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

// serverCmd represents the server command
var serverCmd = &cobra.Command{
	Use:   "server",
	Short: "A manage commands of Server",
	Long:  `A manage commands of Server`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var serverListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List Server",
	Long:    `List Server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		listParam, err := params.NewListServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(listParam))
		return err
	},
}

var serverBuildCmd = &cobra.Command{
	Use: "build",

	Short: "Build Server",
	Long:  `Build Server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		buildParam, err := params.NewBuildServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("build parameter: \n%s\n", debugMarshalIndent(buildParam))
		return err
	},
}

var serverReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Server",
	Long:  `Read Server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		readParam, err := params.NewReadServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(readParam))
		return err
	},
}

var serverUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update Server",
	Long:  `Update Server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		updateParam, err := params.NewUpdateServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(updateParam))
		return err
	},
}

var serverDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Server",
	Long:    `Delete Server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		deleteParam, err := params.NewDeleteServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(deleteParam))
		return err
	},
}

var serverPlanChangeCmd = &cobra.Command{
	Use: "plan-change",

	Short: "Change server plan(core/memory)",
	Long:  `Change server plan(core/memory)`,
	RunE: func(cmd *cobra.Command, args []string) error {
		planChangeParam, err := params.NewPlanChangeServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("plan-change parameter: \n%s\n", debugMarshalIndent(planChangeParam))
		return err
	},
}

var serverBootCmd = &cobra.Command{
	Use:     "boot",
	Aliases: []string{"power-on"},
	Short:   "Boot Server",
	Long:    `Boot Server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		bootParam, err := params.NewBootServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("boot parameter: \n%s\n", debugMarshalIndent(bootParam))
		return err
	},
}

var serverShutdownCmd = &cobra.Command{
	Use:     "shutdown",
	Aliases: []string{"power-off"},
	Short:   "Shutdown Server",
	Long:    `Shutdown Server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		shutdownParam, err := params.NewShutdownServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("shutdown parameter: \n%s\n", debugMarshalIndent(shutdownParam))
		return err
	},
}

var serverShutdownForceCmd = &cobra.Command{
	Use:     "shutdown-force",
	Aliases: []string{"stop"},
	Short:   "ShutdownForce Server",
	Long:    `ShutdownForce Server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		shutdownForceParam, err := params.NewShutdownForceServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("shutdown-force parameter: \n%s\n", debugMarshalIndent(shutdownForceParam))
		return err
	},
}

var serverResetCmd = &cobra.Command{
	Use: "reset",

	Short: "Reset Server",
	Long:  `Reset Server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		resetParam, err := params.NewResetServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("reset parameter: \n%s\n", debugMarshalIndent(resetParam))
		return err
	},
}

var serverWaitForBootCmd = &cobra.Command{
	Use: "wait-for-boot",

	Short: "Wait until boot is completed",
	Long:  `Wait until boot is completed`,
	RunE: func(cmd *cobra.Command, args []string) error {
		waitForBootParam, err := params.NewWaitForBootServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("wait-for-boot parameter: \n%s\n", debugMarshalIndent(waitForBootParam))
		return err
	},
}

var serverWaitForDownCmd = &cobra.Command{
	Use: "wait-for-down",

	Short: "Wait until shutdown is completed",
	Long:  `Wait until shutdown is completed`,
	RunE: func(cmd *cobra.Command, args []string) error {
		waitForDownParam, err := params.NewWaitForDownServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("wait-for-down parameter: \n%s\n", debugMarshalIndent(waitForDownParam))
		return err
	},
}

var serverSshCmd = &cobra.Command{
	Use: "ssh",

	Short: "Connect to server by SSH",
	Long:  `Connect to server by SSH`,
	RunE: func(cmd *cobra.Command, args []string) error {
		sshParam, err := params.NewSshServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("ssh parameter: \n%s\n", debugMarshalIndent(sshParam))
		return err
	},
}

var serverSshExecCmd = &cobra.Command{
	Use: "ssh-exec",

	Short: "Execute command on server connected by SSH",
	Long:  `Execute command on server connected by SSH`,
	RunE: func(cmd *cobra.Command, args []string) error {
		sshExecParam, err := params.NewSshExecServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("ssh-exec parameter: \n%s\n", debugMarshalIndent(sshExecParam))
		return err
	},
}

var serverScpCmd = &cobra.Command{
	Use: "scp",

	Short: "Copy files/directories by SSH",
	Long:  `Copy files/directories by SSH`,
	RunE: func(cmd *cobra.Command, args []string) error {
		scpParam, err := params.NewScpServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("scp parameter: \n%s\n", debugMarshalIndent(scpParam))
		return err
	},
}

var serverVncCmd = &cobra.Command{
	Use: "vnc",

	Short: "Open VNC client using the OS's default application",
	Long:  `Open VNC client using the OS's default application`,
	RunE: func(cmd *cobra.Command, args []string) error {
		vncParam, err := params.NewVncServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("vnc parameter: \n%s\n", debugMarshalIndent(vncParam))
		return err
	},
}

var serverVncInfoCmd = &cobra.Command{
	Use: "vnc-info",

	Short: "Show VNC proxy information",
	Long:  `Show VNC proxy information`,
	RunE: func(cmd *cobra.Command, args []string) error {
		vncInfoParam, err := params.NewVncInfoServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("vnc-info parameter: \n%s\n", debugMarshalIndent(vncInfoParam))
		return err
	},
}

var serverVncSendCmd = &cobra.Command{
	Use: "vnc-send",

	Short: "Send keys over VNC connection",
	Long:  `Send keys over VNC connection`,
	RunE: func(cmd *cobra.Command, args []string) error {
		vncSendParam, err := params.NewVncSendServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("vnc-send parameter: \n%s\n", debugMarshalIndent(vncSendParam))
		return err
	},
}

var serverVncSnapshotCmd = &cobra.Command{
	Use: "vnc-snapshot",

	Short: "Capture VNC snapshot",
	Long:  `Capture VNC snapshot`,
	RunE: func(cmd *cobra.Command, args []string) error {
		vncSnapshotParam, err := params.NewVncSnapshotServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("vnc-snapshot parameter: \n%s\n", debugMarshalIndent(vncSnapshotParam))
		return err
	},
}

var serverRemoteDesktopCmd = &cobra.Command{
	Use:     "remote-desktop",
	Aliases: []string{"rdp"},
	Short:   "Open RDP client using the OS's default application",
	Long:    `Open RDP client using the OS's default application`,
	RunE: func(cmd *cobra.Command, args []string) error {
		remoteDesktopParam, err := params.NewRemoteDesktopServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("remote-desktop parameter: \n%s\n", debugMarshalIndent(remoteDesktopParam))
		return err
	},
}

var serverRemoteDesktopInfoCmd = &cobra.Command{
	Use:     "remote-desktop-info",
	Aliases: []string{"rdp-info"},
	Short:   "Show RDP information(.rdp)",
	Long:    `Show RDP information(.rdp)`,
	RunE: func(cmd *cobra.Command, args []string) error {
		remoteDesktopInfoParam, err := params.NewRemoteDesktopInfoServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("remote-desktop-info parameter: \n%s\n", debugMarshalIndent(remoteDesktopInfoParam))
		return err
	},
}

var serverDiskInfoCmd = &cobra.Command{
	Use:     "disk-info",
	Aliases: []string{"disk-list"},
	Short:   "Show information of disk(s) connected to server",
	Long:    `Show information of disk(s) connected to server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		diskInfoParam, err := params.NewDiskInfoServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("disk-info parameter: \n%s\n", debugMarshalIndent(diskInfoParam))
		return err
	},
}

var serverDiskConnectCmd = &cobra.Command{
	Use: "disk-connect",

	Short: "Connect disk to server",
	Long:  `Connect disk to server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		diskConnectParam, err := params.NewDiskConnectServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("disk-connect parameter: \n%s\n", debugMarshalIndent(diskConnectParam))
		return err
	},
}

var serverDiskDisconnectCmd = &cobra.Command{
	Use: "disk-disconnect",

	Short: "Disconnect disk from server",
	Long:  `Disconnect disk from server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		diskDisconnectParam, err := params.NewDiskDisconnectServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("disk-disconnect parameter: \n%s\n", debugMarshalIndent(diskDisconnectParam))
		return err
	},
}

var serverInterfaceInfoCmd = &cobra.Command{
	Use:     "interface-info",
	Aliases: []string{"interface-list"},
	Short:   "Show information of NIC(s) connected to server",
	Long:    `Show information of NIC(s) connected to server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		interfaceInfoParam, err := params.NewInterfaceInfoServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-info parameter: \n%s\n", debugMarshalIndent(interfaceInfoParam))
		return err
	},
}

var serverInterfaceAddForInternetCmd = &cobra.Command{
	Use: "interface-add-for-internet",

	Short: "Create and connect NIC connected to the internet",
	Long:  `Create and connect NIC connected to the internet`,
	RunE: func(cmd *cobra.Command, args []string) error {
		interfaceAddForInternetParam, err := params.NewInterfaceAddForInternetServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-add-for-internet parameter: \n%s\n", debugMarshalIndent(interfaceAddForInternetParam))
		return err
	},
}

var serverInterfaceAddForRouterCmd = &cobra.Command{
	Use: "interface-add-for-router",

	Short: "Create and connect NIC connected to the router",
	Long:  `Create and connect NIC connected to the router`,
	RunE: func(cmd *cobra.Command, args []string) error {
		interfaceAddForRouterParam, err := params.NewInterfaceAddForRouterServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-add-for-router parameter: \n%s\n", debugMarshalIndent(interfaceAddForRouterParam))
		return err
	},
}

var serverInterfaceAddForSwitchCmd = &cobra.Command{
	Use: "interface-add-for-switch",

	Short: "Create and connect NIC connected to the switch",
	Long:  `Create and connect NIC connected to the switch`,
	RunE: func(cmd *cobra.Command, args []string) error {
		interfaceAddForSwitchParam, err := params.NewInterfaceAddForSwitchServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-add-for-switch parameter: \n%s\n", debugMarshalIndent(interfaceAddForSwitchParam))
		return err
	},
}

var serverInterfaceAddDisconnectedCmd = &cobra.Command{
	Use: "interface-add-disconnected",

	Short: "Create and connect a disconnected NIC",
	Long:  `Create and connect a disconnected NIC`,
	RunE: func(cmd *cobra.Command, args []string) error {
		interfaceAddDisconnectedParam, err := params.NewInterfaceAddDisconnectedServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-add-disconnected parameter: \n%s\n", debugMarshalIndent(interfaceAddDisconnectedParam))
		return err
	},
}

var serverIsoInfoCmd = &cobra.Command{
	Use: "iso-info",

	Short: "Show information of ISO-Image inserted to server",
	Long:  `Show information of ISO-Image inserted to server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		isoInfoParam, err := params.NewIsoInfoServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("iso-info parameter: \n%s\n", debugMarshalIndent(isoInfoParam))
		return err
	},
}

var serverIsoInsertCmd = &cobra.Command{
	Use: "iso-insert",

	Short: "Insert ISO-Image to server",
	Long:  `Insert ISO-Image to server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		isoInsertParam, err := params.NewIsoInsertServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("iso-insert parameter: \n%s\n", debugMarshalIndent(isoInsertParam))
		return err
	},
}

var serverIsoEjectCmd = &cobra.Command{
	Use: "iso-eject",

	Short: "Eject ISO-Image from server",
	Long:  `Eject ISO-Image from server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		isoEjectParam, err := params.NewIsoEjectServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("iso-eject parameter: \n%s\n", debugMarshalIndent(isoEjectParam))
		return err
	},
}

var serverMonitorCpuCmd = &cobra.Command{
	Use: "monitor-cpu",

	Short: "Collect CPU monitor values",
	Long:  `Collect CPU monitor values`,
	RunE: func(cmd *cobra.Command, args []string) error {
		monitorCpuParam, err := params.NewMonitorCpuServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("monitor-cpu parameter: \n%s\n", debugMarshalIndent(monitorCpuParam))
		return err
	},
}

var serverMonitorNicCmd = &cobra.Command{
	Use: "monitor-nic",

	Short: "Collect NIC(s) monitor values",
	Long:  `Collect NIC(s) monitor values`,
	RunE: func(cmd *cobra.Command, args []string) error {
		monitorNicParam, err := params.NewMonitorNicServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("monitor-nic parameter: \n%s\n", debugMarshalIndent(monitorNicParam))
		return err
	},
}

var serverMonitorDiskCmd = &cobra.Command{
	Use: "monitor-disk",

	Short: "Collect Disk(s) monitor values",
	Long:  `Collect Disk(s) monitor values`,
	RunE: func(cmd *cobra.Command, args []string) error {
		monitorDiskParam, err := params.NewMonitorDiskServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("monitor-disk parameter: \n%s\n", debugMarshalIndent(monitorDiskParam))
		return err
	},
}

var serverMaintenanceInfoCmd = &cobra.Command{
	Use: "maintenance-info",

	Short: "MaintenanceInfo Server",
	Long:  `MaintenanceInfo Server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		maintenanceInfoParam, err := params.NewMaintenanceInfoServerParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("maintenance-info parameter: \n%s\n", debugMarshalIndent(maintenanceInfoParam))
		return err
	},
}

func init() {
	parent := serverCmd
	parent.AddCommand(serverListCmd)
	parent.AddCommand(serverBuildCmd)
	parent.AddCommand(serverReadCmd)
	parent.AddCommand(serverUpdateCmd)
	parent.AddCommand(serverDeleteCmd)
	parent.AddCommand(serverPlanChangeCmd)
	parent.AddCommand(serverBootCmd)
	parent.AddCommand(serverShutdownCmd)
	parent.AddCommand(serverShutdownForceCmd)
	parent.AddCommand(serverResetCmd)
	parent.AddCommand(serverWaitForBootCmd)
	parent.AddCommand(serverWaitForDownCmd)
	parent.AddCommand(serverSshCmd)
	parent.AddCommand(serverSshExecCmd)
	parent.AddCommand(serverScpCmd)
	parent.AddCommand(serverVncCmd)
	parent.AddCommand(serverVncInfoCmd)
	parent.AddCommand(serverVncSendCmd)
	parent.AddCommand(serverVncSnapshotCmd)
	parent.AddCommand(serverRemoteDesktopCmd)
	parent.AddCommand(serverRemoteDesktopInfoCmd)
	parent.AddCommand(serverDiskInfoCmd)
	parent.AddCommand(serverDiskConnectCmd)
	parent.AddCommand(serverDiskDisconnectCmd)
	parent.AddCommand(serverInterfaceInfoCmd)
	parent.AddCommand(serverInterfaceAddForInternetCmd)
	parent.AddCommand(serverInterfaceAddForRouterCmd)
	parent.AddCommand(serverInterfaceAddForSwitchCmd)
	parent.AddCommand(serverInterfaceAddDisconnectedCmd)
	parent.AddCommand(serverIsoInfoCmd)
	parent.AddCommand(serverIsoInsertCmd)
	parent.AddCommand(serverIsoEjectCmd)
	parent.AddCommand(serverMonitorCpuCmd)
	parent.AddCommand(serverMonitorNicCmd)
	parent.AddCommand(serverMonitorDiskCmd)
	parent.AddCommand(serverMaintenanceInfoCmd)
	rootCmd.AddCommand(serverCmd)
}

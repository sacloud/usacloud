// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"github.com/spf13/cobra"
)

// vpcrouterCmd represents the vpcrouter command
var vpcrouterCmd = &cobra.Command{
	Use:   "vpc-router",
	Short: "A manage commands of VPCRouter",
	Long:  `A manage commands of VPCRouter`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var vpcrouterListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List Vpcrouter",
	Long:    `List Vpcrouter`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create Vpcrouter",
	Long:  `Create Vpcrouter`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Vpcrouter",
	Long:  `Read Vpcrouter`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update Vpcrouter",
	Long:  `Update Vpcrouter`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Vpcrouter",
	Long:    `Delete Vpcrouter`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterBootCmd = &cobra.Command{
	Use:     "boot",
	Aliases: []string{"power-on"},
	Short:   "Boot Vpcrouter",
	Long:    `Boot Vpcrouter`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterShutdownCmd = &cobra.Command{
	Use:     "shutdown",
	Aliases: []string{"power-off"},
	Short:   "Shutdown Vpcrouter",
	Long:    `Shutdown Vpcrouter`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterShutdownForceCmd = &cobra.Command{
	Use:     "shutdown-force",
	Aliases: []string{"stop"},
	Short:   "ShutdownForce Vpcrouter",
	Long:    `ShutdownForce Vpcrouter`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterResetCmd = &cobra.Command{
	Use: "reset",

	Short: "Reset Vpcrouter",
	Long:  `Reset Vpcrouter`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterWaitForBootCmd = &cobra.Command{
	Use: "wait-for-boot",

	Short: "Wait until boot is completed",
	Long:  `Wait until boot is completed`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterWaitForDownCmd = &cobra.Command{
	Use: "wait-for-down",

	Short: "Wait until shutdown is completed",
	Long:  `Wait until shutdown is completed`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterEnableInternetConnectionCmd = &cobra.Command{
	Use: "enable-internet-connection",

	Short: "Enable internet connection from VPCRouter",
	Long:  `Enable internet connection from VPCRouter`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterDisableInternetConnectionCmd = &cobra.Command{
	Use: "disable-internet-connection",

	Short: "Enable internet connection from VPCRouter",
	Long:  `Enable internet connection from VPCRouter`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterInterfaceInfoCmd = &cobra.Command{
	Use:     "interface-info",
	Aliases: []string{"interface-list"},
	Short:   "Show information of NIC(s) connected to vpc-router",
	Long:    `Show information of NIC(s) connected to vpc-router`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterInterfaceConnectCmd = &cobra.Command{
	Use: "interface-connect",

	Short: "Connected to switch",
	Long:  `Connected to switch`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterInterfaceUpdateCmd = &cobra.Command{
	Use: "interface-update",

	Short: "Update interface",
	Long:  `Update interface`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterInterfaceDisconnectCmd = &cobra.Command{
	Use: "interface-disconnect",

	Short: "Disconnected to switch",
	Long:  `Disconnected to switch`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterStaticNatInfoCmd = &cobra.Command{
	Use:     "static-nat-info",
	Aliases: []string{"static-nat-list"},
	Short:   "Show information of static NAT settings",
	Long:    `Show information of static NAT settings`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterStaticNatAddCmd = &cobra.Command{
	Use: "static-nat-add",

	Short: "Add static NAT",
	Long:  `Add static NAT`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterStaticNatUpdateCmd = &cobra.Command{
	Use: "static-nat-update",

	Short: "Update static NAT",
	Long:  `Update static NAT`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterStaticNatDeleteCmd = &cobra.Command{
	Use: "static-nat-delete",

	Short: "Delete static NAT",
	Long:  `Delete static NAT`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterPortForwardingInfoCmd = &cobra.Command{
	Use:     "port-forwarding-info",
	Aliases: []string{"port-forwarding-list"},
	Short:   "Show information of port-forwarding settings",
	Long:    `Show information of port-forwarding settings`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterPortForwardingAddCmd = &cobra.Command{
	Use: "port-forwarding-add",

	Short: "Add port forwarding",
	Long:  `Add port forwarding`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterPortForwardingUpdateCmd = &cobra.Command{
	Use: "port-forwarding-update",

	Short: "Update port forwarding",
	Long:  `Update port forwarding`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterPortForwardingDeleteCmd = &cobra.Command{
	Use: "port-forwarding-delete",

	Short: "Delete port forwarding",
	Long:  `Delete port forwarding`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterFirewallInfoCmd = &cobra.Command{
	Use:     "firewall-info",
	Aliases: []string{"firewall-list"},
	Short:   "Show information of firewall rules",
	Long:    `Show information of firewall rules`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterFirewallAddCmd = &cobra.Command{
	Use: "firewall-add",

	Short: "Add firewall rule",
	Long:  `Add firewall rule`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterFirewallUpdateCmd = &cobra.Command{
	Use: "firewall-update",

	Short: "Update firewall rule",
	Long:  `Update firewall rule`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterFirewallDeleteCmd = &cobra.Command{
	Use: "firewall-delete",

	Short: "Delete firewall rule",
	Long:  `Delete firewall rule`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterDhcpServerInfoCmd = &cobra.Command{
	Use:     "dhcp-server-info",
	Aliases: []string{"dhcp-server-list"},
	Short:   "Show information of DHCP servers",
	Long:    `Show information of DHCP servers`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterDhcpServerAddCmd = &cobra.Command{
	Use: "dhcp-server-add",

	Short: "Add DHCP server",
	Long:  `Add DHCP server`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterDhcpServerUpdateCmd = &cobra.Command{
	Use: "dhcp-server-update",

	Short: "Update DHCP server",
	Long:  `Update DHCP server`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterDhcpServerDeleteCmd = &cobra.Command{
	Use: "dhcp-server-delete",

	Short: "Delete DHCP server",
	Long:  `Delete DHCP server`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterDhcpStaticMappingInfoCmd = &cobra.Command{
	Use:     "dhcp-static-mapping-info",
	Aliases: []string{"dhcp-static-mapping-list"},
	Short:   "Show information of DHCP static mapping",
	Long:    `Show information of DHCP static mapping`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterDhcpStaticMappingAddCmd = &cobra.Command{
	Use: "dhcp-static-mapping-add",

	Short: "Add DHCP static mapping",
	Long:  `Add DHCP static mapping`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterDhcpStaticMappingUpdateCmd = &cobra.Command{
	Use: "dhcp-static-mapping-update",

	Short: "Update DHCP static mapping",
	Long:  `Update DHCP static mapping`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterDhcpStaticMappingDeleteCmd = &cobra.Command{
	Use: "dhcp-static-mapping-delete",

	Short: "Delete DHCP static mapping",
	Long:  `Delete DHCP static mapping`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterPptpServerInfoCmd = &cobra.Command{
	Use: "pptp-server-info",

	Short: "Show information of PPTP server",
	Long:  `Show information of PPTP server`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterPptpServerUpdateCmd = &cobra.Command{
	Use: "pptp-server-update",

	Short: "Update PPTP server setting",
	Long:  `Update PPTP server setting`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterL2tpServerInfoCmd = &cobra.Command{
	Use: "l2tp-server-info",

	Short: "Show information of L2TP/IPSec server",
	Long:  `Show information of L2TP/IPSec server`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterL2tpServerUpdateCmd = &cobra.Command{
	Use: "l2tp-server-update",

	Short: "Update L2TP/IPSec server setting",
	Long:  `Update L2TP/IPSec server setting`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterUserInfoCmd = &cobra.Command{
	Use:     "user-info",
	Aliases: []string{"user-list"},
	Short:   "Show information of remote-access users",
	Long:    `Show information of remote-access users`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterUserAddCmd = &cobra.Command{
	Use: "user-add",

	Short: "Add remote-access user",
	Long:  `Add remote-access user`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterUserUpdateCmd = &cobra.Command{
	Use: "user-update",

	Short: "Update remote-access user",
	Long:  `Update remote-access user`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterUserDeleteCmd = &cobra.Command{
	Use: "user-delete",

	Short: "Delete remote-access user",
	Long:  `Delete remote-access user`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterSiteToSiteVpnInfoCmd = &cobra.Command{
	Use:     "site-to-site-vpn-info",
	Aliases: []string{"site-to-site-vpn-list"},
	Short:   "Show information of site-to-site IPSec VPN settings",
	Long:    `Show information of site-to-site IPSec VPN settings`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterSiteToSiteVpnAddCmd = &cobra.Command{
	Use: "site-to-site-vpn-add",

	Short: "Add site-to-site IPSec VPN setting",
	Long:  `Add site-to-site IPSec VPN setting`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterSiteToSiteVpnUpdateCmd = &cobra.Command{
	Use: "site-to-site-vpn-update",

	Short: "Update site-to-site IPSec VPN setting",
	Long:  `Update site-to-site IPSec VPN setting`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterSiteToSiteVpnDeleteCmd = &cobra.Command{
	Use: "site-to-site-vpn-delete",

	Short: "Delete site-to-site IPSec VPN setting",
	Long:  `Delete site-to-site IPSec VPN setting`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterSiteToSiteVpnPeersCmd = &cobra.Command{
	Use: "site-to-site-vpn-peers",

	Short: "Show status of site-to-site IPSec VPN peers",
	Long:  `Show status of site-to-site IPSec VPN peers`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterStaticRouteInfoCmd = &cobra.Command{
	Use:     "static-route-info",
	Aliases: []string{"static-route-list"},
	Short:   "Show information of static-routes",
	Long:    `Show information of static-routes`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterStaticRouteAddCmd = &cobra.Command{
	Use: "static-route-add",

	Short: "Add static-route",
	Long:  `Add static-route`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterStaticRouteUpdateCmd = &cobra.Command{
	Use: "static-route-update",

	Short: "Update static-route",
	Long:  `Update static-route`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterStaticRouteDeleteCmd = &cobra.Command{
	Use: "static-route-delete",

	Short: "Delete static-route",
	Long:  `Delete static-route`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterMonitorCmd = &cobra.Command{
	Use: "monitor",

	Short: "Monitor Vpcrouter",
	Long:  `Monitor Vpcrouter`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var vpcrouterLogsCmd = &cobra.Command{
	Use: "logs",

	Short: "Logs Vpcrouter",
	Long:  `Logs Vpcrouter`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

func init() {
	parent := vpcrouterCmd
	parent.AddCommand(vpcrouterListCmd)
	parent.AddCommand(vpcrouterCreateCmd)
	parent.AddCommand(vpcrouterReadCmd)
	parent.AddCommand(vpcrouterUpdateCmd)
	parent.AddCommand(vpcrouterDeleteCmd)
	parent.AddCommand(vpcrouterBootCmd)
	parent.AddCommand(vpcrouterShutdownCmd)
	parent.AddCommand(vpcrouterShutdownForceCmd)
	parent.AddCommand(vpcrouterResetCmd)
	parent.AddCommand(vpcrouterWaitForBootCmd)
	parent.AddCommand(vpcrouterWaitForDownCmd)
	parent.AddCommand(vpcrouterEnableInternetConnectionCmd)
	parent.AddCommand(vpcrouterDisableInternetConnectionCmd)
	parent.AddCommand(vpcrouterInterfaceInfoCmd)
	parent.AddCommand(vpcrouterInterfaceConnectCmd)
	parent.AddCommand(vpcrouterInterfaceUpdateCmd)
	parent.AddCommand(vpcrouterInterfaceDisconnectCmd)
	parent.AddCommand(vpcrouterStaticNatInfoCmd)
	parent.AddCommand(vpcrouterStaticNatAddCmd)
	parent.AddCommand(vpcrouterStaticNatUpdateCmd)
	parent.AddCommand(vpcrouterStaticNatDeleteCmd)
	parent.AddCommand(vpcrouterPortForwardingInfoCmd)
	parent.AddCommand(vpcrouterPortForwardingAddCmd)
	parent.AddCommand(vpcrouterPortForwardingUpdateCmd)
	parent.AddCommand(vpcrouterPortForwardingDeleteCmd)
	parent.AddCommand(vpcrouterFirewallInfoCmd)
	parent.AddCommand(vpcrouterFirewallAddCmd)
	parent.AddCommand(vpcrouterFirewallUpdateCmd)
	parent.AddCommand(vpcrouterFirewallDeleteCmd)
	parent.AddCommand(vpcrouterDhcpServerInfoCmd)
	parent.AddCommand(vpcrouterDhcpServerAddCmd)
	parent.AddCommand(vpcrouterDhcpServerUpdateCmd)
	parent.AddCommand(vpcrouterDhcpServerDeleteCmd)
	parent.AddCommand(vpcrouterDhcpStaticMappingInfoCmd)
	parent.AddCommand(vpcrouterDhcpStaticMappingAddCmd)
	parent.AddCommand(vpcrouterDhcpStaticMappingUpdateCmd)
	parent.AddCommand(vpcrouterDhcpStaticMappingDeleteCmd)
	parent.AddCommand(vpcrouterPptpServerInfoCmd)
	parent.AddCommand(vpcrouterPptpServerUpdateCmd)
	parent.AddCommand(vpcrouterL2tpServerInfoCmd)
	parent.AddCommand(vpcrouterL2tpServerUpdateCmd)
	parent.AddCommand(vpcrouterUserInfoCmd)
	parent.AddCommand(vpcrouterUserAddCmd)
	parent.AddCommand(vpcrouterUserUpdateCmd)
	parent.AddCommand(vpcrouterUserDeleteCmd)
	parent.AddCommand(vpcrouterSiteToSiteVpnInfoCmd)
	parent.AddCommand(vpcrouterSiteToSiteVpnAddCmd)
	parent.AddCommand(vpcrouterSiteToSiteVpnUpdateCmd)
	parent.AddCommand(vpcrouterSiteToSiteVpnDeleteCmd)
	parent.AddCommand(vpcrouterSiteToSiteVpnPeersCmd)
	parent.AddCommand(vpcrouterStaticRouteInfoCmd)
	parent.AddCommand(vpcrouterStaticRouteAddCmd)
	parent.AddCommand(vpcrouterStaticRouteUpdateCmd)
	parent.AddCommand(vpcrouterStaticRouteDeleteCmd)
	parent.AddCommand(vpcrouterMonitorCmd)
	parent.AddCommand(vpcrouterLogsCmd)
	rootCmd.AddCommand(vpcrouterCmd)
}

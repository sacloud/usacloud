// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

// vpcrouterCmd represents the vpcrouter command
var vpcrouterCmd = &cobra.Command{
	Use:   "vpc-router",
	Short: "A manage commands of VPCRouter",
	Long:  `A manage commands of VPCRouter`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var vpcrouterListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List Vpcrouter",
	Long:    `List Vpcrouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		listParam, err := params.NewListVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(listParam))
		return err
	},
}

var vpcrouterCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create Vpcrouter",
	Long:  `Create Vpcrouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		createParam, err := params.NewCreateVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(createParam))
		return err
	},
}

var vpcrouterReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Vpcrouter",
	Long:  `Read Vpcrouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		readParam, err := params.NewReadVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(readParam))
		return err
	},
}

var vpcrouterUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update Vpcrouter",
	Long:  `Update Vpcrouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		updateParam, err := params.NewUpdateVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(updateParam))
		return err
	},
}

var vpcrouterDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Vpcrouter",
	Long:    `Delete Vpcrouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		deleteParam, err := params.NewDeleteVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(deleteParam))
		return err
	},
}

var vpcrouterBootCmd = &cobra.Command{
	Use:     "boot",
	Aliases: []string{"power-on"},
	Short:   "Boot Vpcrouter",
	Long:    `Boot Vpcrouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		bootParam, err := params.NewBootVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("boot parameter: \n%s\n", debugMarshalIndent(bootParam))
		return err
	},
}

var vpcrouterShutdownCmd = &cobra.Command{
	Use:     "shutdown",
	Aliases: []string{"power-off"},
	Short:   "Shutdown Vpcrouter",
	Long:    `Shutdown Vpcrouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		shutdownParam, err := params.NewShutdownVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("shutdown parameter: \n%s\n", debugMarshalIndent(shutdownParam))
		return err
	},
}

var vpcrouterShutdownForceCmd = &cobra.Command{
	Use:     "shutdown-force",
	Aliases: []string{"stop"},
	Short:   "ShutdownForce Vpcrouter",
	Long:    `ShutdownForce Vpcrouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		shutdownForceParam, err := params.NewShutdownForceVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("shutdown-force parameter: \n%s\n", debugMarshalIndent(shutdownForceParam))
		return err
	},
}

var vpcrouterResetCmd = &cobra.Command{
	Use: "reset",

	Short: "Reset Vpcrouter",
	Long:  `Reset Vpcrouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		resetParam, err := params.NewResetVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("reset parameter: \n%s\n", debugMarshalIndent(resetParam))
		return err
	},
}

var vpcrouterWaitForBootCmd = &cobra.Command{
	Use: "wait-for-boot",

	Short: "Wait until boot is completed",
	Long:  `Wait until boot is completed`,
	RunE: func(cmd *cobra.Command, args []string) error {
		waitForBootParam, err := params.NewWaitForBootVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("wait-for-boot parameter: \n%s\n", debugMarshalIndent(waitForBootParam))
		return err
	},
}

var vpcrouterWaitForDownCmd = &cobra.Command{
	Use: "wait-for-down",

	Short: "Wait until shutdown is completed",
	Long:  `Wait until shutdown is completed`,
	RunE: func(cmd *cobra.Command, args []string) error {
		waitForDownParam, err := params.NewWaitForDownVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("wait-for-down parameter: \n%s\n", debugMarshalIndent(waitForDownParam))
		return err
	},
}

var vpcrouterEnableInternetConnectionCmd = &cobra.Command{
	Use: "enable-internet-connection",

	Short: "Enable internet connection from VPCRouter",
	Long:  `Enable internet connection from VPCRouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		enableInternetConnectionParam, err := params.NewEnableInternetConnectionVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("enable-internet-connection parameter: \n%s\n", debugMarshalIndent(enableInternetConnectionParam))
		return err
	},
}

var vpcrouterDisableInternetConnectionCmd = &cobra.Command{
	Use: "disable-internet-connection",

	Short: "Enable internet connection from VPCRouter",
	Long:  `Enable internet connection from VPCRouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		disableInternetConnectionParam, err := params.NewDisableInternetConnectionVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("disable-internet-connection parameter: \n%s\n", debugMarshalIndent(disableInternetConnectionParam))
		return err
	},
}

var vpcrouterInterfaceInfoCmd = &cobra.Command{
	Use:     "interface-info",
	Aliases: []string{"interface-list"},
	Short:   "Show information of NIC(s) connected to vpc-router",
	Long:    `Show information of NIC(s) connected to vpc-router`,
	RunE: func(cmd *cobra.Command, args []string) error {
		interfaceInfoParam, err := params.NewInterfaceInfoVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-info parameter: \n%s\n", debugMarshalIndent(interfaceInfoParam))
		return err
	},
}

var vpcrouterInterfaceConnectCmd = &cobra.Command{
	Use: "interface-connect",

	Short: "Connected to switch",
	Long:  `Connected to switch`,
	RunE: func(cmd *cobra.Command, args []string) error {
		interfaceConnectParam, err := params.NewInterfaceConnectVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-connect parameter: \n%s\n", debugMarshalIndent(interfaceConnectParam))
		return err
	},
}

var vpcrouterInterfaceUpdateCmd = &cobra.Command{
	Use: "interface-update",

	Short: "Update interface",
	Long:  `Update interface`,
	RunE: func(cmd *cobra.Command, args []string) error {
		interfaceUpdateParam, err := params.NewInterfaceUpdateVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-update parameter: \n%s\n", debugMarshalIndent(interfaceUpdateParam))
		return err
	},
}

var vpcrouterInterfaceDisconnectCmd = &cobra.Command{
	Use: "interface-disconnect",

	Short: "Disconnected to switch",
	Long:  `Disconnected to switch`,
	RunE: func(cmd *cobra.Command, args []string) error {
		interfaceDisconnectParam, err := params.NewInterfaceDisconnectVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-disconnect parameter: \n%s\n", debugMarshalIndent(interfaceDisconnectParam))
		return err
	},
}

var vpcrouterStaticNatInfoCmd = &cobra.Command{
	Use:     "static-nat-info",
	Aliases: []string{"static-nat-list"},
	Short:   "Show information of static NAT settings",
	Long:    `Show information of static NAT settings`,
	RunE: func(cmd *cobra.Command, args []string) error {
		staticNatInfoParam, err := params.NewStaticNatInfoVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-nat-info parameter: \n%s\n", debugMarshalIndent(staticNatInfoParam))
		return err
	},
}

var vpcrouterStaticNatAddCmd = &cobra.Command{
	Use: "static-nat-add",

	Short: "Add static NAT",
	Long:  `Add static NAT`,
	RunE: func(cmd *cobra.Command, args []string) error {
		staticNatAddParam, err := params.NewStaticNatAddVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-nat-add parameter: \n%s\n", debugMarshalIndent(staticNatAddParam))
		return err
	},
}

var vpcrouterStaticNatUpdateCmd = &cobra.Command{
	Use: "static-nat-update",

	Short: "Update static NAT",
	Long:  `Update static NAT`,
	RunE: func(cmd *cobra.Command, args []string) error {
		staticNatUpdateParam, err := params.NewStaticNatUpdateVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-nat-update parameter: \n%s\n", debugMarshalIndent(staticNatUpdateParam))
		return err
	},
}

var vpcrouterStaticNatDeleteCmd = &cobra.Command{
	Use: "static-nat-delete",

	Short: "Delete static NAT",
	Long:  `Delete static NAT`,
	RunE: func(cmd *cobra.Command, args []string) error {
		staticNatDeleteParam, err := params.NewStaticNatDeleteVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-nat-delete parameter: \n%s\n", debugMarshalIndent(staticNatDeleteParam))
		return err
	},
}

var vpcrouterPortForwardingInfoCmd = &cobra.Command{
	Use:     "port-forwarding-info",
	Aliases: []string{"port-forwarding-list"},
	Short:   "Show information of port-forwarding settings",
	Long:    `Show information of port-forwarding settings`,
	RunE: func(cmd *cobra.Command, args []string) error {
		portForwardingInfoParam, err := params.NewPortForwardingInfoVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("port-forwarding-info parameter: \n%s\n", debugMarshalIndent(portForwardingInfoParam))
		return err
	},
}

var vpcrouterPortForwardingAddCmd = &cobra.Command{
	Use: "port-forwarding-add",

	Short: "Add port forwarding",
	Long:  `Add port forwarding`,
	RunE: func(cmd *cobra.Command, args []string) error {
		portForwardingAddParam, err := params.NewPortForwardingAddVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("port-forwarding-add parameter: \n%s\n", debugMarshalIndent(portForwardingAddParam))
		return err
	},
}

var vpcrouterPortForwardingUpdateCmd = &cobra.Command{
	Use: "port-forwarding-update",

	Short: "Update port forwarding",
	Long:  `Update port forwarding`,
	RunE: func(cmd *cobra.Command, args []string) error {
		portForwardingUpdateParam, err := params.NewPortForwardingUpdateVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("port-forwarding-update parameter: \n%s\n", debugMarshalIndent(portForwardingUpdateParam))
		return err
	},
}

var vpcrouterPortForwardingDeleteCmd = &cobra.Command{
	Use: "port-forwarding-delete",

	Short: "Delete port forwarding",
	Long:  `Delete port forwarding`,
	RunE: func(cmd *cobra.Command, args []string) error {
		portForwardingDeleteParam, err := params.NewPortForwardingDeleteVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("port-forwarding-delete parameter: \n%s\n", debugMarshalIndent(portForwardingDeleteParam))
		return err
	},
}

var vpcrouterFirewallInfoCmd = &cobra.Command{
	Use:     "firewall-info",
	Aliases: []string{"firewall-list"},
	Short:   "Show information of firewall rules",
	Long:    `Show information of firewall rules`,
	RunE: func(cmd *cobra.Command, args []string) error {
		firewallInfoParam, err := params.NewFirewallInfoVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("firewall-info parameter: \n%s\n", debugMarshalIndent(firewallInfoParam))
		return err
	},
}

var vpcrouterFirewallAddCmd = &cobra.Command{
	Use: "firewall-add",

	Short: "Add firewall rule",
	Long:  `Add firewall rule`,
	RunE: func(cmd *cobra.Command, args []string) error {
		firewallAddParam, err := params.NewFirewallAddVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("firewall-add parameter: \n%s\n", debugMarshalIndent(firewallAddParam))
		return err
	},
}

var vpcrouterFirewallUpdateCmd = &cobra.Command{
	Use: "firewall-update",

	Short: "Update firewall rule",
	Long:  `Update firewall rule`,
	RunE: func(cmd *cobra.Command, args []string) error {
		firewallUpdateParam, err := params.NewFirewallUpdateVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("firewall-update parameter: \n%s\n", debugMarshalIndent(firewallUpdateParam))
		return err
	},
}

var vpcrouterFirewallDeleteCmd = &cobra.Command{
	Use: "firewall-delete",

	Short: "Delete firewall rule",
	Long:  `Delete firewall rule`,
	RunE: func(cmd *cobra.Command, args []string) error {
		firewallDeleteParam, err := params.NewFirewallDeleteVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("firewall-delete parameter: \n%s\n", debugMarshalIndent(firewallDeleteParam))
		return err
	},
}

var vpcrouterDhcpServerInfoCmd = &cobra.Command{
	Use:     "dhcp-server-info",
	Aliases: []string{"dhcp-server-list"},
	Short:   "Show information of DHCP servers",
	Long:    `Show information of DHCP servers`,
	RunE: func(cmd *cobra.Command, args []string) error {
		dhcpServerInfoParam, err := params.NewDhcpServerInfoVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-server-info parameter: \n%s\n", debugMarshalIndent(dhcpServerInfoParam))
		return err
	},
}

var vpcrouterDhcpServerAddCmd = &cobra.Command{
	Use: "dhcp-server-add",

	Short: "Add DHCP server",
	Long:  `Add DHCP server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		dhcpServerAddParam, err := params.NewDhcpServerAddVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-server-add parameter: \n%s\n", debugMarshalIndent(dhcpServerAddParam))
		return err
	},
}

var vpcrouterDhcpServerUpdateCmd = &cobra.Command{
	Use: "dhcp-server-update",

	Short: "Update DHCP server",
	Long:  `Update DHCP server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		dhcpServerUpdateParam, err := params.NewDhcpServerUpdateVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-server-update parameter: \n%s\n", debugMarshalIndent(dhcpServerUpdateParam))
		return err
	},
}

var vpcrouterDhcpServerDeleteCmd = &cobra.Command{
	Use: "dhcp-server-delete",

	Short: "Delete DHCP server",
	Long:  `Delete DHCP server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		dhcpServerDeleteParam, err := params.NewDhcpServerDeleteVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-server-delete parameter: \n%s\n", debugMarshalIndent(dhcpServerDeleteParam))
		return err
	},
}

var vpcrouterDhcpStaticMappingInfoCmd = &cobra.Command{
	Use:     "dhcp-static-mapping-info",
	Aliases: []string{"dhcp-static-mapping-list"},
	Short:   "Show information of DHCP static mapping",
	Long:    `Show information of DHCP static mapping`,
	RunE: func(cmd *cobra.Command, args []string) error {
		dhcpStaticMappingInfoParam, err := params.NewDhcpStaticMappingInfoVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-static-mapping-info parameter: \n%s\n", debugMarshalIndent(dhcpStaticMappingInfoParam))
		return err
	},
}

var vpcrouterDhcpStaticMappingAddCmd = &cobra.Command{
	Use: "dhcp-static-mapping-add",

	Short: "Add DHCP static mapping",
	Long:  `Add DHCP static mapping`,
	RunE: func(cmd *cobra.Command, args []string) error {
		dhcpStaticMappingAddParam, err := params.NewDhcpStaticMappingAddVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-static-mapping-add parameter: \n%s\n", debugMarshalIndent(dhcpStaticMappingAddParam))
		return err
	},
}

var vpcrouterDhcpStaticMappingUpdateCmd = &cobra.Command{
	Use: "dhcp-static-mapping-update",

	Short: "Update DHCP static mapping",
	Long:  `Update DHCP static mapping`,
	RunE: func(cmd *cobra.Command, args []string) error {
		dhcpStaticMappingUpdateParam, err := params.NewDhcpStaticMappingUpdateVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-static-mapping-update parameter: \n%s\n", debugMarshalIndent(dhcpStaticMappingUpdateParam))
		return err
	},
}

var vpcrouterDhcpStaticMappingDeleteCmd = &cobra.Command{
	Use: "dhcp-static-mapping-delete",

	Short: "Delete DHCP static mapping",
	Long:  `Delete DHCP static mapping`,
	RunE: func(cmd *cobra.Command, args []string) error {
		dhcpStaticMappingDeleteParam, err := params.NewDhcpStaticMappingDeleteVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-static-mapping-delete parameter: \n%s\n", debugMarshalIndent(dhcpStaticMappingDeleteParam))
		return err
	},
}

var vpcrouterPptpServerInfoCmd = &cobra.Command{
	Use: "pptp-server-info",

	Short: "Show information of PPTP server",
	Long:  `Show information of PPTP server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		pptpServerInfoParam, err := params.NewPptpServerInfoVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("pptp-server-info parameter: \n%s\n", debugMarshalIndent(pptpServerInfoParam))
		return err
	},
}

var vpcrouterPptpServerUpdateCmd = &cobra.Command{
	Use: "pptp-server-update",

	Short: "Update PPTP server setting",
	Long:  `Update PPTP server setting`,
	RunE: func(cmd *cobra.Command, args []string) error {
		pptpServerUpdateParam, err := params.NewPptpServerUpdateVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("pptp-server-update parameter: \n%s\n", debugMarshalIndent(pptpServerUpdateParam))
		return err
	},
}

var vpcrouterL2tpServerInfoCmd = &cobra.Command{
	Use: "l2tp-server-info",

	Short: "Show information of L2TP/IPSec server",
	Long:  `Show information of L2TP/IPSec server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		l2tpServerInfoParam, err := params.NewL2tpServerInfoVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("l2tp-server-info parameter: \n%s\n", debugMarshalIndent(l2tpServerInfoParam))
		return err
	},
}

var vpcrouterL2tpServerUpdateCmd = &cobra.Command{
	Use: "l2tp-server-update",

	Short: "Update L2TP/IPSec server setting",
	Long:  `Update L2TP/IPSec server setting`,
	RunE: func(cmd *cobra.Command, args []string) error {
		l2tpServerUpdateParam, err := params.NewL2tpServerUpdateVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("l2tp-server-update parameter: \n%s\n", debugMarshalIndent(l2tpServerUpdateParam))
		return err
	},
}

var vpcrouterUserInfoCmd = &cobra.Command{
	Use:     "user-info",
	Aliases: []string{"user-list"},
	Short:   "Show information of remote-access users",
	Long:    `Show information of remote-access users`,
	RunE: func(cmd *cobra.Command, args []string) error {
		userInfoParam, err := params.NewUserInfoVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("user-info parameter: \n%s\n", debugMarshalIndent(userInfoParam))
		return err
	},
}

var vpcrouterUserAddCmd = &cobra.Command{
	Use: "user-add",

	Short: "Add remote-access user",
	Long:  `Add remote-access user`,
	RunE: func(cmd *cobra.Command, args []string) error {
		userAddParam, err := params.NewUserAddVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("user-add parameter: \n%s\n", debugMarshalIndent(userAddParam))
		return err
	},
}

var vpcrouterUserUpdateCmd = &cobra.Command{
	Use: "user-update",

	Short: "Update remote-access user",
	Long:  `Update remote-access user`,
	RunE: func(cmd *cobra.Command, args []string) error {
		userUpdateParam, err := params.NewUserUpdateVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("user-update parameter: \n%s\n", debugMarshalIndent(userUpdateParam))
		return err
	},
}

var vpcrouterUserDeleteCmd = &cobra.Command{
	Use: "user-delete",

	Short: "Delete remote-access user",
	Long:  `Delete remote-access user`,
	RunE: func(cmd *cobra.Command, args []string) error {
		userDeleteParam, err := params.NewUserDeleteVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("user-delete parameter: \n%s\n", debugMarshalIndent(userDeleteParam))
		return err
	},
}

var vpcrouterSiteToSiteVpnInfoCmd = &cobra.Command{
	Use:     "site-to-site-vpn-info",
	Aliases: []string{"site-to-site-vpn-list"},
	Short:   "Show information of site-to-site IPSec VPN settings",
	Long:    `Show information of site-to-site IPSec VPN settings`,
	RunE: func(cmd *cobra.Command, args []string) error {
		siteToSiteVpnInfoParam, err := params.NewSiteToSiteVpnInfoVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("site-to-site-vpn-info parameter: \n%s\n", debugMarshalIndent(siteToSiteVpnInfoParam))
		return err
	},
}

var vpcrouterSiteToSiteVpnAddCmd = &cobra.Command{
	Use: "site-to-site-vpn-add",

	Short: "Add site-to-site IPSec VPN setting",
	Long:  `Add site-to-site IPSec VPN setting`,
	RunE: func(cmd *cobra.Command, args []string) error {
		siteToSiteVpnAddParam, err := params.NewSiteToSiteVpnAddVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("site-to-site-vpn-add parameter: \n%s\n", debugMarshalIndent(siteToSiteVpnAddParam))
		return err
	},
}

var vpcrouterSiteToSiteVpnUpdateCmd = &cobra.Command{
	Use: "site-to-site-vpn-update",

	Short: "Update site-to-site IPSec VPN setting",
	Long:  `Update site-to-site IPSec VPN setting`,
	RunE: func(cmd *cobra.Command, args []string) error {
		siteToSiteVpnUpdateParam, err := params.NewSiteToSiteVpnUpdateVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("site-to-site-vpn-update parameter: \n%s\n", debugMarshalIndent(siteToSiteVpnUpdateParam))
		return err
	},
}

var vpcrouterSiteToSiteVpnDeleteCmd = &cobra.Command{
	Use: "site-to-site-vpn-delete",

	Short: "Delete site-to-site IPSec VPN setting",
	Long:  `Delete site-to-site IPSec VPN setting`,
	RunE: func(cmd *cobra.Command, args []string) error {
		siteToSiteVpnDeleteParam, err := params.NewSiteToSiteVpnDeleteVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("site-to-site-vpn-delete parameter: \n%s\n", debugMarshalIndent(siteToSiteVpnDeleteParam))
		return err
	},
}

var vpcrouterSiteToSiteVpnPeersCmd = &cobra.Command{
	Use: "site-to-site-vpn-peers",

	Short: "Show status of site-to-site IPSec VPN peers",
	Long:  `Show status of site-to-site IPSec VPN peers`,
	RunE: func(cmd *cobra.Command, args []string) error {
		siteToSiteVpnPeersParam, err := params.NewSiteToSiteVpnPeersVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("site-to-site-vpn-peers parameter: \n%s\n", debugMarshalIndent(siteToSiteVpnPeersParam))
		return err
	},
}

var vpcrouterStaticRouteInfoCmd = &cobra.Command{
	Use:     "static-route-info",
	Aliases: []string{"static-route-list"},
	Short:   "Show information of static-routes",
	Long:    `Show information of static-routes`,
	RunE: func(cmd *cobra.Command, args []string) error {
		staticRouteInfoParam, err := params.NewStaticRouteInfoVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-route-info parameter: \n%s\n", debugMarshalIndent(staticRouteInfoParam))
		return err
	},
}

var vpcrouterStaticRouteAddCmd = &cobra.Command{
	Use: "static-route-add",

	Short: "Add static-route",
	Long:  `Add static-route`,
	RunE: func(cmd *cobra.Command, args []string) error {
		staticRouteAddParam, err := params.NewStaticRouteAddVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-route-add parameter: \n%s\n", debugMarshalIndent(staticRouteAddParam))
		return err
	},
}

var vpcrouterStaticRouteUpdateCmd = &cobra.Command{
	Use: "static-route-update",

	Short: "Update static-route",
	Long:  `Update static-route`,
	RunE: func(cmd *cobra.Command, args []string) error {
		staticRouteUpdateParam, err := params.NewStaticRouteUpdateVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-route-update parameter: \n%s\n", debugMarshalIndent(staticRouteUpdateParam))
		return err
	},
}

var vpcrouterStaticRouteDeleteCmd = &cobra.Command{
	Use: "static-route-delete",

	Short: "Delete static-route",
	Long:  `Delete static-route`,
	RunE: func(cmd *cobra.Command, args []string) error {
		staticRouteDeleteParam, err := params.NewStaticRouteDeleteVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-route-delete parameter: \n%s\n", debugMarshalIndent(staticRouteDeleteParam))
		return err
	},
}

var vpcrouterMonitorCmd = &cobra.Command{
	Use: "monitor",

	Short: "Monitor Vpcrouter",
	Long:  `Monitor Vpcrouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		monitorParam, err := params.NewMonitorVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("monitor parameter: \n%s\n", debugMarshalIndent(monitorParam))
		return err
	},
}

var vpcrouterLogsCmd = &cobra.Command{
	Use: "logs",

	Short: "Logs Vpcrouter",
	Long:  `Logs Vpcrouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		logsParam, err := params.NewLogsVpcrouterParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("logs parameter: \n%s\n", debugMarshalIndent(logsParam))
		return err
	},
}

func init() {
	parent := vpcrouterCmd
	parent.AddCommand(vpcrouterListCmd)
	parent.AddCommand(vpcrouterCreateCmd)
	parent.AddCommand(vpcrouterReadCmd)
	parent.AddCommand(vpcrouterUpdateCmd)
	parent.AddCommand(vpcrouterDeleteCmd)
	parent.AddCommand(vpcrouterBootCmd)
	parent.AddCommand(vpcrouterShutdownCmd)
	parent.AddCommand(vpcrouterShutdownForceCmd)
	parent.AddCommand(vpcrouterResetCmd)
	parent.AddCommand(vpcrouterWaitForBootCmd)
	parent.AddCommand(vpcrouterWaitForDownCmd)
	parent.AddCommand(vpcrouterEnableInternetConnectionCmd)
	parent.AddCommand(vpcrouterDisableInternetConnectionCmd)
	parent.AddCommand(vpcrouterInterfaceInfoCmd)
	parent.AddCommand(vpcrouterInterfaceConnectCmd)
	parent.AddCommand(vpcrouterInterfaceUpdateCmd)
	parent.AddCommand(vpcrouterInterfaceDisconnectCmd)
	parent.AddCommand(vpcrouterStaticNatInfoCmd)
	parent.AddCommand(vpcrouterStaticNatAddCmd)
	parent.AddCommand(vpcrouterStaticNatUpdateCmd)
	parent.AddCommand(vpcrouterStaticNatDeleteCmd)
	parent.AddCommand(vpcrouterPortForwardingInfoCmd)
	parent.AddCommand(vpcrouterPortForwardingAddCmd)
	parent.AddCommand(vpcrouterPortForwardingUpdateCmd)
	parent.AddCommand(vpcrouterPortForwardingDeleteCmd)
	parent.AddCommand(vpcrouterFirewallInfoCmd)
	parent.AddCommand(vpcrouterFirewallAddCmd)
	parent.AddCommand(vpcrouterFirewallUpdateCmd)
	parent.AddCommand(vpcrouterFirewallDeleteCmd)
	parent.AddCommand(vpcrouterDhcpServerInfoCmd)
	parent.AddCommand(vpcrouterDhcpServerAddCmd)
	parent.AddCommand(vpcrouterDhcpServerUpdateCmd)
	parent.AddCommand(vpcrouterDhcpServerDeleteCmd)
	parent.AddCommand(vpcrouterDhcpStaticMappingInfoCmd)
	parent.AddCommand(vpcrouterDhcpStaticMappingAddCmd)
	parent.AddCommand(vpcrouterDhcpStaticMappingUpdateCmd)
	parent.AddCommand(vpcrouterDhcpStaticMappingDeleteCmd)
	parent.AddCommand(vpcrouterPptpServerInfoCmd)
	parent.AddCommand(vpcrouterPptpServerUpdateCmd)
	parent.AddCommand(vpcrouterL2tpServerInfoCmd)
	parent.AddCommand(vpcrouterL2tpServerUpdateCmd)
	parent.AddCommand(vpcrouterUserInfoCmd)
	parent.AddCommand(vpcrouterUserAddCmd)
	parent.AddCommand(vpcrouterUserUpdateCmd)
	parent.AddCommand(vpcrouterUserDeleteCmd)
	parent.AddCommand(vpcrouterSiteToSiteVpnInfoCmd)
	parent.AddCommand(vpcrouterSiteToSiteVpnAddCmd)
	parent.AddCommand(vpcrouterSiteToSiteVpnUpdateCmd)
	parent.AddCommand(vpcrouterSiteToSiteVpnDeleteCmd)
	parent.AddCommand(vpcrouterSiteToSiteVpnPeersCmd)
	parent.AddCommand(vpcrouterStaticRouteInfoCmd)
	parent.AddCommand(vpcrouterStaticRouteAddCmd)
	parent.AddCommand(vpcrouterStaticRouteUpdateCmd)
	parent.AddCommand(vpcrouterStaticRouteDeleteCmd)
	parent.AddCommand(vpcrouterMonitorCmd)
	parent.AddCommand(vpcrouterLogsCmd)
	rootCmd.AddCommand(vpcrouterCmd)
}

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

// proxylbCmd represents the proxylb command
var proxylbCmd = &cobra.Command{
	Use:   "proxy-lb",
	Short: "A manage commands of ProxyLB",
	Long:  `A manage commands of ProxyLB`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var proxylbListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List Proxylb",
	Long:    `List Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		listParam, err := params.NewListProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(listParam))
		return err
	},
}

var proxylbCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create Proxylb",
	Long:  `Create Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		createParam, err := params.NewCreateProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(createParam))
		return err
	},
}

var proxylbReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Proxylb",
	Long:  `Read Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		readParam, err := params.NewReadProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(readParam))
		return err
	},
}

var proxylbUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update Proxylb",
	Long:  `Update Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		updateParam, err := params.NewUpdateProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(updateParam))
		return err
	},
}

var proxylbDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Proxylb",
	Long:    `Delete Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		deleteParam, err := params.NewDeleteProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(deleteParam))
		return err
	},
}

var proxylbPlanChangeCmd = &cobra.Command{
	Use: "plan-change",

	Short: "Change ProxyLB plan",
	Long:  `Change ProxyLB plan`,
	RunE: func(cmd *cobra.Command, args []string) error {
		planChangeParam, err := params.NewPlanChangeProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("plan-change parameter: \n%s\n", debugMarshalIndent(planChangeParam))
		return err
	},
}

var proxylbBindPortInfoCmd = &cobra.Command{
	Use:     "bind-port-info",
	Aliases: []string{"bind-port-list"},
	Short:   "BindPortInfo Proxylb",
	Long:    `BindPortInfo Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		bindPortInfoParam, err := params.NewBindPortInfoProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("bind-port-info parameter: \n%s\n", debugMarshalIndent(bindPortInfoParam))
		return err
	},
}

var proxylbBindPortAddCmd = &cobra.Command{
	Use: "bind-port-add",

	Short: "BindPortAdd Proxylb",
	Long:  `BindPortAdd Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		bindPortAddParam, err := params.NewBindPortAddProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("bind-port-add parameter: \n%s\n", debugMarshalIndent(bindPortAddParam))
		return err
	},
}

var proxylbBindPortUpdateCmd = &cobra.Command{
	Use: "bind-port-update",

	Short: "BindPortUpdate Proxylb",
	Long:  `BindPortUpdate Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		bindPortUpdateParam, err := params.NewBindPortUpdateProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("bind-port-update parameter: \n%s\n", debugMarshalIndent(bindPortUpdateParam))
		return err
	},
}

var proxylbBindPortDeleteCmd = &cobra.Command{
	Use: "bind-port-delete",

	Short: "BindPortDelete Proxylb",
	Long:  `BindPortDelete Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		bindPortDeleteParam, err := params.NewBindPortDeleteProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("bind-port-delete parameter: \n%s\n", debugMarshalIndent(bindPortDeleteParam))
		return err
	},
}

var proxylbResponseHeaderInfoCmd = &cobra.Command{
	Use:     "response-header-info",
	Aliases: []string{"response-header-list"},
	Short:   "ResponseHeaderInfo Proxylb",
	Long:    `ResponseHeaderInfo Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		responseHeaderInfoParam, err := params.NewResponseHeaderInfoProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("response-header-info parameter: \n%s\n", debugMarshalIndent(responseHeaderInfoParam))
		return err
	},
}

var proxylbResponseHeaderAddCmd = &cobra.Command{
	Use: "response-header-add",

	Short: "ResponseHeaderAdd Proxylb",
	Long:  `ResponseHeaderAdd Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		responseHeaderAddParam, err := params.NewResponseHeaderAddProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("response-header-add parameter: \n%s\n", debugMarshalIndent(responseHeaderAddParam))
		return err
	},
}

var proxylbResponseHeaderUpdateCmd = &cobra.Command{
	Use: "response-header-update",

	Short: "ResponseHeaderUpdate Proxylb",
	Long:  `ResponseHeaderUpdate Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		responseHeaderUpdateParam, err := params.NewResponseHeaderUpdateProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("response-header-update parameter: \n%s\n", debugMarshalIndent(responseHeaderUpdateParam))
		return err
	},
}

var proxylbResponseHeaderDeleteCmd = &cobra.Command{
	Use: "response-header-delete",

	Short: "ResponseHeaderDelete Proxylb",
	Long:  `ResponseHeaderDelete Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		responseHeaderDeleteParam, err := params.NewResponseHeaderDeleteProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("response-header-delete parameter: \n%s\n", debugMarshalIndent(responseHeaderDeleteParam))
		return err
	},
}

var proxylbAcmeInfoCmd = &cobra.Command{
	Use: "acme-info",

	Short: "AcmeInfo Proxylb",
	Long:  `AcmeInfo Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		acmeInfoParam, err := params.NewAcmeInfoProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("acme-info parameter: \n%s\n", debugMarshalIndent(acmeInfoParam))
		return err
	},
}

var proxylbAcmeSettingCmd = &cobra.Command{
	Use: "acme-setting",

	Short: "AcmeSetting Proxylb",
	Long:  `AcmeSetting Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		acmeSettingParam, err := params.NewAcmeSettingProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("acme-setting parameter: \n%s\n", debugMarshalIndent(acmeSettingParam))
		return err
	},
}

var proxylbAcmeRenewCmd = &cobra.Command{
	Use: "acme-renew",

	Short: "AcmeRenew Proxylb",
	Long:  `AcmeRenew Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		acmeRenewParam, err := params.NewAcmeRenewProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("acme-renew parameter: \n%s\n", debugMarshalIndent(acmeRenewParam))
		return err
	},
}

var proxylbServerInfoCmd = &cobra.Command{
	Use:     "server-info",
	Aliases: []string{"server-list"},
	Short:   "ServerInfo Proxylb",
	Long:    `ServerInfo Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		serverInfoParam, err := params.NewServerInfoProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("server-info parameter: \n%s\n", debugMarshalIndent(serverInfoParam))
		return err
	},
}

var proxylbServerAddCmd = &cobra.Command{
	Use: "server-add",

	Short: "ServerAdd Proxylb",
	Long:  `ServerAdd Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		serverAddParam, err := params.NewServerAddProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("server-add parameter: \n%s\n", debugMarshalIndent(serverAddParam))
		return err
	},
}

var proxylbServerUpdateCmd = &cobra.Command{
	Use: "server-update",

	Short: "ServerUpdate Proxylb",
	Long:  `ServerUpdate Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		serverUpdateParam, err := params.NewServerUpdateProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("server-update parameter: \n%s\n", debugMarshalIndent(serverUpdateParam))
		return err
	},
}

var proxylbServerDeleteCmd = &cobra.Command{
	Use: "server-delete",

	Short: "ServerDelete Proxylb",
	Long:  `ServerDelete Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		serverDeleteParam, err := params.NewServerDeleteProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("server-delete parameter: \n%s\n", debugMarshalIndent(serverDeleteParam))
		return err
	},
}

var proxylbCertificateInfoCmd = &cobra.Command{
	Use:     "certificate-info",
	Aliases: []string{"certificate-list", "cert-list", "cert-info"},
	Short:   "CertificateInfo Proxylb",
	Long:    `CertificateInfo Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		certificateInfoParam, err := params.NewCertificateInfoProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("certificate-info parameter: \n%s\n", debugMarshalIndent(certificateInfoParam))
		return err
	},
}

var proxylbCertificateAddCmd = &cobra.Command{
	Use:     "certificate-add",
	Aliases: []string{"cert-add"},
	Short:   "CertificateAdd Proxylb",
	Long:    `CertificateAdd Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		certificateAddParam, err := params.NewCertificateAddProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("certificate-add parameter: \n%s\n", debugMarshalIndent(certificateAddParam))
		return err
	},
}

var proxylbCertificateUpdateCmd = &cobra.Command{
	Use:     "certificate-update",
	Aliases: []string{"cert-update"},
	Short:   "CertificateUpdate Proxylb",
	Long:    `CertificateUpdate Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		certificateUpdateParam, err := params.NewCertificateUpdateProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("certificate-update parameter: \n%s\n", debugMarshalIndent(certificateUpdateParam))
		return err
	},
}

var proxylbCertificateDeleteCmd = &cobra.Command{
	Use:     "certificate-delete",
	Aliases: []string{"cert-delete"},
	Short:   "CertificateDelete Proxylb",
	Long:    `CertificateDelete Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		certificateDeleteParam, err := params.NewCertificateDeleteProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("certificate-delete parameter: \n%s\n", debugMarshalIndent(certificateDeleteParam))
		return err
	},
}

var proxylbMonitorCmd = &cobra.Command{
	Use: "monitor",

	Short: "Monitor Proxylb",
	Long:  `Monitor Proxylb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		monitorParam, err := params.NewMonitorProxylbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("monitor parameter: \n%s\n", debugMarshalIndent(monitorParam))
		return err
	},
}

func init() {
	parent := proxylbCmd
	parent.AddCommand(proxylbListCmd)
	parent.AddCommand(proxylbCreateCmd)
	parent.AddCommand(proxylbReadCmd)
	parent.AddCommand(proxylbUpdateCmd)
	parent.AddCommand(proxylbDeleteCmd)
	parent.AddCommand(proxylbPlanChangeCmd)
	parent.AddCommand(proxylbBindPortInfoCmd)
	parent.AddCommand(proxylbBindPortAddCmd)
	parent.AddCommand(proxylbBindPortUpdateCmd)
	parent.AddCommand(proxylbBindPortDeleteCmd)
	parent.AddCommand(proxylbResponseHeaderInfoCmd)
	parent.AddCommand(proxylbResponseHeaderAddCmd)
	parent.AddCommand(proxylbResponseHeaderUpdateCmd)
	parent.AddCommand(proxylbResponseHeaderDeleteCmd)
	parent.AddCommand(proxylbAcmeInfoCmd)
	parent.AddCommand(proxylbAcmeSettingCmd)
	parent.AddCommand(proxylbAcmeRenewCmd)
	parent.AddCommand(proxylbServerInfoCmd)
	parent.AddCommand(proxylbServerAddCmd)
	parent.AddCommand(proxylbServerUpdateCmd)
	parent.AddCommand(proxylbServerDeleteCmd)
	parent.AddCommand(proxylbCertificateInfoCmd)
	parent.AddCommand(proxylbCertificateAddCmd)
	parent.AddCommand(proxylbCertificateUpdateCmd)
	parent.AddCommand(proxylbCertificateDeleteCmd)
	parent.AddCommand(proxylbMonitorCmd)
	rootCmd.AddCommand(proxylbCmd)
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	packetFilterListParam                = params.NewListPacketFilterParam()
	packetFilterCreateParam              = params.NewCreatePacketFilterParam()
	packetFilterReadParam                = params.NewReadPacketFilterParam()
	packetFilterUpdateParam              = params.NewUpdatePacketFilterParam()
	packetFilterDeleteParam              = params.NewDeletePacketFilterParam()
	packetFilterRuleInfoParam            = params.NewRuleInfoPacketFilterParam()
	packetFilterRuleAddParam             = params.NewRuleAddPacketFilterParam()
	packetFilterRuleUpdateParam          = params.NewRuleUpdatePacketFilterParam()
	packetFilterRuleDeleteParam          = params.NewRuleDeletePacketFilterParam()
	packetFilterInterfaceConnectParam    = params.NewInterfaceConnectPacketFilterParam()
	packetFilterInterfaceDisconnectParam = params.NewInterfaceDisconnectPacketFilterParam()
)

// packetFilterCmd represents the command to manage SAKURAÂ Cloud PacketFilter
var packetFilterCmd = &cobra.Command{
	Use:   "packetFilter",
	Short: "A manage commands of PacketFilter",
	Long:  `A manage commands of PacketFilter`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var packetFilterListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find"},
	Short:   "List PacketFilter",
	Long:    `List PacketFilter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := packetFilterListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(packetFilterListParam))
		return err
	},
}

func packetFilterListCmdInit() {
	fs := packetFilterListCmd.Flags()
	fs.StringSliceVarP(&packetFilterListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &packetFilterListParam.Id), "id", "", "set filter by id(s)")
	fs.IntVarP(&packetFilterListParam.From, "from", "", 0, "set offset")
	fs.IntVarP(&packetFilterListParam.Max, "max", "", 0, "set limit")
	fs.StringSliceVarP(&packetFilterListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
}

var packetFilterCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create PacketFilter",
	Long:  `Create PacketFilter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := packetFilterCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(packetFilterCreateParam))
		return err
	},
}

func packetFilterCreateCmdInit() {
	fs := packetFilterCreateCmd.Flags()
	fs.StringVarP(&packetFilterCreateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&packetFilterCreateParam.Description, "description", "", "", "set resource description")
}

var packetFilterReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read PacketFilter",
	Long:  `Read PacketFilter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := packetFilterReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(packetFilterReadParam))
		return err
	},
}

func packetFilterReadCmdInit() {
}

var packetFilterUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update PacketFilter",
	Long:  `Update PacketFilter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := packetFilterUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(packetFilterUpdateParam))
		return err
	},
}

func packetFilterUpdateCmdInit() {
	fs := packetFilterUpdateCmd.Flags()
	fs.StringVarP(&packetFilterUpdateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&packetFilterUpdateParam.Description, "description", "", "", "set resource description")
}

var packetFilterDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete PacketFilter",
	Long:    `Delete PacketFilter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := packetFilterDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(packetFilterDeleteParam))
		return err
	},
}

func packetFilterDeleteCmdInit() {
}

var packetFilterRuleInfoCmd = &cobra.Command{
	Use:     "rule-info",
	Aliases: []string{"rules", "rule-list"},
	Short:   "RuleInfo PacketFilter",
	Long:    `RuleInfo PacketFilter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := packetFilterRuleInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("rule-info parameter: \n%s\n", debugMarshalIndent(packetFilterRuleInfoParam))
		return err
	},
}

func packetFilterRuleInfoCmdInit() {
}

var packetFilterRuleAddCmd = &cobra.Command{
	Use: "rule-add",

	Short: "RuleAdd PacketFilter",
	Long:  `RuleAdd PacketFilter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := packetFilterRuleAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("rule-add parameter: \n%s\n", debugMarshalIndent(packetFilterRuleAddParam))
		return err
	},
}

func packetFilterRuleAddCmdInit() {
	fs := packetFilterRuleAddCmd.Flags()
	fs.IntVarP(&packetFilterRuleAddParam.Index, "index", "", 1, "index to insert rule into")
	fs.StringVarP(&packetFilterRuleAddParam.Protocol, "protocol", "", "", "set target protocol[tcp/udp/icmp/fragment/ip]")
	fs.StringVarP(&packetFilterRuleAddParam.SourceNetwork, "source-network", "", "", "set source network[A.A.A.A] or [A.A.A.A/N (N=1..31)] or [A.A.A.A/M.M.M.M]")
	fs.StringVarP(&packetFilterRuleAddParam.SourcePort, "source-port", "", "", "set source port[N (N=0..65535)] or [N-N (N=0..65535)] or [0xPPPP/0xMMMM]")
	fs.StringVarP(&packetFilterRuleAddParam.DestinationPort, "destination-port", "", "", "set destination port[N (N=0..65535)] or [N-N (N=0..65535)] or [0xPPPP/0xMMMM]")
	fs.StringVarP(&packetFilterRuleAddParam.Action, "action", "", "", "set action[allow/deny]")
	fs.StringVarP(&packetFilterRuleAddParam.Description, "description", "", "", "set resource description")
}

var packetFilterRuleUpdateCmd = &cobra.Command{
	Use: "rule-update",

	Short: "RuleUpdate PacketFilter",
	Long:  `RuleUpdate PacketFilter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := packetFilterRuleUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("rule-update parameter: \n%s\n", debugMarshalIndent(packetFilterRuleUpdateParam))
		return err
	},
}

func packetFilterRuleUpdateCmdInit() {
	fs := packetFilterRuleUpdateCmd.Flags()
	fs.StringVarP(&packetFilterRuleUpdateParam.Protocol, "protocol", "", "", "set target protocol[tcp/udp/icmp/fragment/ip]")
	fs.StringVarP(&packetFilterRuleUpdateParam.SourceNetwork, "source-network", "", "", "set source network[A.A.A.A] or [A.A.A.A/N (N=1..31)] or [A.A.A.A/M.M.M.M]")
	fs.StringVarP(&packetFilterRuleUpdateParam.SourcePort, "source-port", "", "", "set source port[N (N=0..65535)] or [N-N (N=0..65535)] or [0xPPPP/0xMMMM]")
	fs.StringVarP(&packetFilterRuleUpdateParam.DestinationPort, "destination-port", "", "", "set destination port[N (N=0..65535)] or [N-N (N=0..65535)] or [0xPPPP/0xMMMM]")
	fs.StringVarP(&packetFilterRuleUpdateParam.Action, "action", "", "", "set action[allow/deny]")
	fs.StringVarP(&packetFilterRuleUpdateParam.Description, "description", "", "", "set resource description")
	fs.IntVarP(&packetFilterRuleUpdateParam.Index, "index", "", 0, "index of target rule")
}

var packetFilterRuleDeleteCmd = &cobra.Command{
	Use: "rule-delete",

	Short: "RuleDelete PacketFilter",
	Long:  `RuleDelete PacketFilter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := packetFilterRuleDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("rule-delete parameter: \n%s\n", debugMarshalIndent(packetFilterRuleDeleteParam))
		return err
	},
}

func packetFilterRuleDeleteCmdInit() {
	fs := packetFilterRuleDeleteCmd.Flags()
	fs.IntVarP(&packetFilterRuleDeleteParam.Index, "index", "", 0, "index of target rule")
}

var packetFilterInterfaceConnectCmd = &cobra.Command{
	Use: "interface-connect",

	Short: "InterfaceConnect PacketFilter",
	Long:  `InterfaceConnect PacketFilter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := packetFilterInterfaceConnectParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-connect parameter: \n%s\n", debugMarshalIndent(packetFilterInterfaceConnectParam))
		return err
	},
}

func packetFilterInterfaceConnectCmdInit() {
	fs := packetFilterInterfaceConnectCmd.Flags()
	fs.VarP(newIDValue(0, &packetFilterInterfaceConnectParam.InterfaceId), "interface-id", "", "set interface ID")
}

var packetFilterInterfaceDisconnectCmd = &cobra.Command{
	Use: "interface-disconnect",

	Short: "InterfaceDisconnect PacketFilter",
	Long:  `InterfaceDisconnect PacketFilter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := packetFilterInterfaceDisconnectParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-disconnect parameter: \n%s\n", debugMarshalIndent(packetFilterInterfaceDisconnectParam))
		return err
	},
}

func packetFilterInterfaceDisconnectCmdInit() {
	fs := packetFilterInterfaceDisconnectCmd.Flags()
	fs.VarP(newIDValue(0, &packetFilterInterfaceDisconnectParam.InterfaceId), "interface-id", "", "set interface ID")
}

func init() {
	parent := packetFilterCmd

	packetFilterListCmdInit()
	parent.AddCommand(packetFilterListCmd)

	packetFilterCreateCmdInit()
	parent.AddCommand(packetFilterCreateCmd)

	packetFilterReadCmdInit()
	parent.AddCommand(packetFilterReadCmd)

	packetFilterUpdateCmdInit()
	parent.AddCommand(packetFilterUpdateCmd)

	packetFilterDeleteCmdInit()
	parent.AddCommand(packetFilterDeleteCmd)

	packetFilterRuleInfoCmdInit()
	parent.AddCommand(packetFilterRuleInfoCmd)

	packetFilterRuleAddCmdInit()
	parent.AddCommand(packetFilterRuleAddCmd)

	packetFilterRuleUpdateCmdInit()
	parent.AddCommand(packetFilterRuleUpdateCmd)

	packetFilterRuleDeleteCmdInit()
	parent.AddCommand(packetFilterRuleDeleteCmd)

	packetFilterInterfaceConnectCmdInit()
	parent.AddCommand(packetFilterInterfaceConnectCmd)

	packetFilterInterfaceDisconnectCmdInit()
	parent.AddCommand(packetFilterInterfaceDisconnectCmd)

	rootCmd.AddCommand(parent)
}

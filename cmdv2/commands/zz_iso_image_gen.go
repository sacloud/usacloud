// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	isoImageListParam     = params.NewListISOImageParam()
	isoImageCreateParam   = params.NewCreateISOImageParam()
	isoImageReadParam     = params.NewReadISOImageParam()
	isoImageUpdateParam   = params.NewUpdateISOImageParam()
	isoImageDeleteParam   = params.NewDeleteISOImageParam()
	isoImageUploadParam   = params.NewUploadISOImageParam()
	isoImageDownloadParam = params.NewDownloadISOImageParam()
	isoImageFTPOpenParam  = params.NewFTPOpenISOImageParam()
	isoImageFTPCloseParam = params.NewFTPCloseISOImageParam()
)

// isoImageCmd represents the command to manage SAKURAÂ Cloud ISOImage
var isoImageCmd = &cobra.Command{
	Use:   "isoImage",
	Short: "A manage commands of ISOImage",
	Long:  `A manage commands of ISOImage`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var isoImageListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List ISOImage",
	Long:    `List ISOImage`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := isoImageListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(isoImageListParam))
		return err
	},
}

func isoImageListCmdInit() {
	fs := isoImageListCmd.Flags()
	fs.IntVarP(&isoImageListParam.Max, "max", "", 0, "set limit")
	fs.StringSliceVarP(&isoImageListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringSliceVarP(&isoImageListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &isoImageListParam.Id), "id", "", "set filter by id(s)")
	fs.IntVarP(&isoImageListParam.From, "from", "", 0, "set offset")
	fs.StringVarP(&isoImageListParam.Scope, "scope", "", "", "set filter by scope('user' or 'shared')")
	fs.StringSliceVarP(&isoImageListParam.Tags, "tags", "", []string{}, "set filter by tags(AND)")
}

var isoImageCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create ISOImage",
	Long:  `Create ISOImage`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := isoImageCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(isoImageCreateParam))
		return err
	},
}

func isoImageCreateCmdInit() {
	fs := isoImageCreateCmd.Flags()
	fs.StringSliceVarP(&isoImageCreateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &isoImageCreateParam.IconId), "icon-id", "", "set Icon ID")
	fs.IntVarP(&isoImageCreateParam.Size, "size", "", 5, "set iso size(GB)")
	fs.StringVarP(&isoImageCreateParam.ISOFile, "iso-file", "", "", "set iso image file")
	fs.StringVarP(&isoImageCreateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&isoImageCreateParam.Description, "description", "", "", "set resource description")
}

var isoImageReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read ISOImage",
	Long:  `Read ISOImage`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := isoImageReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(isoImageReadParam))
		return err
	},
}

func isoImageReadCmdInit() {
}

var isoImageUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update ISOImage",
	Long:  `Update ISOImage`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := isoImageUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(isoImageUpdateParam))
		return err
	},
}

func isoImageUpdateCmdInit() {
	fs := isoImageUpdateCmd.Flags()
	fs.StringVarP(&isoImageUpdateParam.Description, "description", "", "", "set resource description")
	fs.StringSliceVarP(&isoImageUpdateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &isoImageUpdateParam.IconId), "icon-id", "", "set Icon ID")
	fs.StringVarP(&isoImageUpdateParam.Name, "name", "", "", "set resource display name")
}

var isoImageDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete ISOImage",
	Long:    `Delete ISOImage`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := isoImageDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(isoImageDeleteParam))
		return err
	},
}

func isoImageDeleteCmdInit() {
}

var isoImageUploadCmd = &cobra.Command{
	Use: "upload",

	Short: "Upload ISOImage",
	Long:  `Upload ISOImage`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := isoImageUploadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("upload parameter: \n%s\n", debugMarshalIndent(isoImageUploadParam))
		return err
	},
}

func isoImageUploadCmdInit() {
	fs := isoImageUploadCmd.Flags()
	fs.StringVarP(&isoImageUploadParam.ISOFile, "iso-file", "", "", "set iso image file")
}

var isoImageDownloadCmd = &cobra.Command{
	Use: "download",

	Short: "Download ISOImage",
	Long:  `Download ISOImage`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := isoImageDownloadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("download parameter: \n%s\n", debugMarshalIndent(isoImageDownloadParam))
		return err
	},
}

func isoImageDownloadCmdInit() {
	fs := isoImageDownloadCmd.Flags()
	fs.StringVarP(&isoImageDownloadParam.FileDestination, "file-destination", "", "", "set file destination path")
}

var isoImageFTPOpenCmd = &cobra.Command{
	Use: "ftp-open",

	Short: "FTPOpen ISOImage",
	Long:  `FTPOpen ISOImage`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := isoImageFTPOpenParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("ftp-open parameter: \n%s\n", debugMarshalIndent(isoImageFTPOpenParam))
		return err
	},
}

func isoImageFTPOpenCmdInit() {
}

var isoImageFTPCloseCmd = &cobra.Command{
	Use: "ftp-close",

	Short: "FTPClose ISOImage",
	Long:  `FTPClose ISOImage`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := isoImageFTPCloseParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("ftp-close parameter: \n%s\n", debugMarshalIndent(isoImageFTPCloseParam))
		return err
	},
}

func isoImageFTPCloseCmdInit() {
}

func init() {
	parent := isoImageCmd

	isoImageListCmdInit()
	parent.AddCommand(isoImageListCmd)

	isoImageCreateCmdInit()
	parent.AddCommand(isoImageCreateCmd)

	isoImageReadCmdInit()
	parent.AddCommand(isoImageReadCmd)

	isoImageUpdateCmdInit()
	parent.AddCommand(isoImageUpdateCmd)

	isoImageDeleteCmdInit()
	parent.AddCommand(isoImageDeleteCmd)

	isoImageUploadCmdInit()
	parent.AddCommand(isoImageUploadCmd)

	isoImageDownloadCmdInit()
	parent.AddCommand(isoImageDownloadCmd)

	isoImageFTPOpenCmdInit()
	parent.AddCommand(isoImageFTPOpenCmd)

	isoImageFTPCloseCmdInit()
	parent.AddCommand(isoImageFTPCloseCmd)

	rootCmd.AddCommand(parent)
}

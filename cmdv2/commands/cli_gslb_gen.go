// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

// gslbCmd represents the gslb command
var gslbCmd = &cobra.Command{
	Use:   "gslb",
	Short: "A manage commands of GSLB",
	Long:  `A manage commands of GSLB`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var gslbListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List Gslb",
	Long:    `List Gslb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		listParam, err := params.NewListGslbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(listParam))
		return err
	},
}

var gslbServerInfoCmd = &cobra.Command{
	Use:     "server-info",
	Aliases: []string{"server-list"},
	Short:   "ServerInfo Gslb",
	Long:    `ServerInfo Gslb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		serverInfoParam, err := params.NewServerInfoGslbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("server-info parameter: \n%s\n", debugMarshalIndent(serverInfoParam))
		return err
	},
}

var gslbCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create Gslb",
	Long:  `Create Gslb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		createParam, err := params.NewCreateGslbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(createParam))
		return err
	},
}

var gslbServerAddCmd = &cobra.Command{
	Use: "server-add",

	Short: "ServerAdd Gslb",
	Long:  `ServerAdd Gslb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		serverAddParam, err := params.NewServerAddGslbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("server-add parameter: \n%s\n", debugMarshalIndent(serverAddParam))
		return err
	},
}

var gslbReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Gslb",
	Long:  `Read Gslb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		readParam, err := params.NewReadGslbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(readParam))
		return err
	},
}

var gslbServerUpdateCmd = &cobra.Command{
	Use: "server-update",

	Short: "ServerUpdate Gslb",
	Long:  `ServerUpdate Gslb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		serverUpdateParam, err := params.NewServerUpdateGslbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("server-update parameter: \n%s\n", debugMarshalIndent(serverUpdateParam))
		return err
	},
}

var gslbServerDeleteCmd = &cobra.Command{
	Use: "server-delete",

	Short: "ServerDelete Gslb",
	Long:  `ServerDelete Gslb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		serverDeleteParam, err := params.NewServerDeleteGslbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("server-delete parameter: \n%s\n", debugMarshalIndent(serverDeleteParam))
		return err
	},
}

var gslbUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update Gslb",
	Long:  `Update Gslb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		updateParam, err := params.NewUpdateGslbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(updateParam))
		return err
	},
}

var gslbDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Gslb",
	Long:    `Delete Gslb`,
	RunE: func(cmd *cobra.Command, args []string) error {
		deleteParam, err := params.NewDeleteGslbParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(deleteParam))
		return err
	},
}

func init() {
	parent := gslbCmd
	parent.AddCommand(gslbListCmd)
	parent.AddCommand(gslbServerInfoCmd)
	parent.AddCommand(gslbCreateCmd)
	parent.AddCommand(gslbServerAddCmd)
	parent.AddCommand(gslbReadCmd)
	parent.AddCommand(gslbServerUpdateCmd)
	parent.AddCommand(gslbServerDeleteCmd)
	parent.AddCommand(gslbUpdateCmd)
	parent.AddCommand(gslbDeleteCmd)
	rootCmd.AddCommand(gslbCmd)
}

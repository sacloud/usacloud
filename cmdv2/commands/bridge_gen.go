// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	bridgeListParam   = params.NewListBridgeParam()
	bridgeCreateParam = params.NewCreateBridgeParam()
	bridgeReadParam   = params.NewReadBridgeParam()
	bridgeUpdateParam = params.NewUpdateBridgeParam()
	bridgeDeleteParam = params.NewDeleteBridgeParam()
)

// bridgeCmd represents the command to manage SAKURAÂ Cloud Bridge
var bridgeCmd = &cobra.Command{
	Use:   "bridge",
	Short: "A manage commands of Bridge",
	Long:  `A manage commands of Bridge`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var bridgeListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find"},
	Short:   "List Bridge",
	Long:    `List Bridge`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := bridgeListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(bridgeListParam))
		return err
	},
}

func bridgeListCmdInit() {
	fs := bridgeListCmd.Flags()
	fs.StringSliceVarP(&bridgeListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &bridgeListParam.Id), "id", "", "set filter by id(s)")
	fs.IntVarP(&bridgeListParam.From, "from", "", 0, "set offset")
	fs.IntVarP(&bridgeListParam.Max, "max", "", 0, "set limit")
	fs.StringSliceVarP(&bridgeListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
}

var bridgeCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create Bridge",
	Long:  `Create Bridge`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := bridgeCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(bridgeCreateParam))
		return err
	},
}

func bridgeCreateCmdInit() {
	fs := bridgeCreateCmd.Flags()
	fs.StringVarP(&bridgeCreateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&bridgeCreateParam.Description, "description", "", "", "set resource description")
}

var bridgeReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Bridge",
	Long:  `Read Bridge`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := bridgeReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(bridgeReadParam))
		return err
	},
}

func bridgeReadCmdInit() {
}

var bridgeUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update Bridge",
	Long:  `Update Bridge`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := bridgeUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(bridgeUpdateParam))
		return err
	},
}

func bridgeUpdateCmdInit() {
	fs := bridgeUpdateCmd.Flags()
	fs.StringVarP(&bridgeUpdateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&bridgeUpdateParam.Description, "description", "", "", "set resource description")
}

var bridgeDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Bridge",
	Long:    `Delete Bridge`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := bridgeDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(bridgeDeleteParam))
		return err
	},
}

func bridgeDeleteCmdInit() {
}

func init() {
	parent := bridgeCmd

	bridgeListCmdInit()
	parent.AddCommand(bridgeListCmd)

	bridgeCreateCmdInit()
	parent.AddCommand(bridgeCreateCmd)

	bridgeReadCmdInit()
	parent.AddCommand(bridgeReadCmd)

	bridgeUpdateCmdInit()
	parent.AddCommand(bridgeUpdateCmd)

	bridgeDeleteCmdInit()
	parent.AddCommand(bridgeDeleteCmd)

	rootCmd.AddCommand(parent)
}

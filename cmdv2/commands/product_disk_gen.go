// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	productdiskListParam = params.NewListProductdiskParam()
	productdiskReadParam = params.NewReadProductdiskParam()
)

// productdiskCmd represents the command to manage SAKURAÂ Cloud ProductDisk
var productdiskCmd = &cobra.Command{
	Use:   "productdisk",
	Short: "A manage commands of ProductDisk",
	Long:  `A manage commands of ProductDisk`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements: call list func as default
	},
}

var productdiskListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find"},
	Short:   "List Productdisk (default)",
	Long:    `List Productdisk (default)`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := productdiskListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(productdiskListParam))
		return err
	},
}

func productdiskListCmdInit() {
	fs := productdiskListCmd.Flags()
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &productdiskListParam.Id), "id", "", "set filter by id(s)")
	fs.IntVarP(&productdiskListParam.From, "from", "", 0, "set offset")
	fs.IntVarP(&productdiskListParam.Max, "max", "", 0, "set limit")
	fs.StringSliceVarP(&productdiskListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringSliceVarP(&productdiskListParam.Name, "name", "", []string{}, "set filter by name(s)")
}

var productdiskReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Productdisk",
	Long:  `Read Productdisk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := productdiskReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(productdiskReadParam))
		return err
	},
}

func productdiskReadCmdInit() {
	fs := productdiskReadCmd.Flags()
	fs.VarP(newIDValue(0, &productdiskReadParam.Id), "id", "", "set resource ID")
}

func init() {
	parent := productdiskCmd

	productdiskListCmdInit()
	parent.AddCommand(productdiskListCmd)

	productdiskReadCmdInit()
	parent.AddCommand(productdiskReadCmd)

	rootCmd.AddCommand(parent)
}

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

// simCmd represents the sim command
var simCmd = &cobra.Command{
	Use:   "sim",
	Short: "A manage commands of SIM",
	Long:  `A manage commands of SIM`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var simListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List Sim",
	Long:    `List Sim`,
	RunE: func(cmd *cobra.Command, args []string) error {
		listParam, err := params.NewListSimParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(listParam))
		return err
	},
}

var simCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create Sim",
	Long:  `Create Sim`,
	RunE: func(cmd *cobra.Command, args []string) error {
		createParam, err := params.NewCreateSimParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(createParam))
		return err
	},
}

var simReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Sim",
	Long:  `Read Sim`,
	RunE: func(cmd *cobra.Command, args []string) error {
		readParam, err := params.NewReadSimParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(readParam))
		return err
	},
}

var simUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update Sim",
	Long:  `Update Sim`,
	RunE: func(cmd *cobra.Command, args []string) error {
		updateParam, err := params.NewUpdateSimParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(updateParam))
		return err
	},
}

var simDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Sim",
	Long:    `Delete Sim`,
	RunE: func(cmd *cobra.Command, args []string) error {
		deleteParam, err := params.NewDeleteSimParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(deleteParam))
		return err
	},
}

var simCarrierInfoCmd = &cobra.Command{
	Use:     "carrier-info",
	Aliases: []string{"carrier-list"},
	Short:   "CarrierInfo Sim",
	Long:    `CarrierInfo Sim`,
	RunE: func(cmd *cobra.Command, args []string) error {
		carrierInfoParam, err := params.NewCarrierInfoSimParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("carrier-info parameter: \n%s\n", debugMarshalIndent(carrierInfoParam))
		return err
	},
}

var simCarrierUpdateCmd = &cobra.Command{
	Use: "carrier-update",

	Short: "CarrierUpdate Sim",
	Long:  `CarrierUpdate Sim`,
	RunE: func(cmd *cobra.Command, args []string) error {
		carrierUpdateParam, err := params.NewCarrierUpdateSimParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("carrier-update parameter: \n%s\n", debugMarshalIndent(carrierUpdateParam))
		return err
	},
}

var simActivateCmd = &cobra.Command{
	Use: "activate",

	Short: "Activate Sim",
	Long:  `Activate Sim`,
	RunE: func(cmd *cobra.Command, args []string) error {
		activateParam, err := params.NewActivateSimParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("activate parameter: \n%s\n", debugMarshalIndent(activateParam))
		return err
	},
}

var simDeactivateCmd = &cobra.Command{
	Use: "deactivate",

	Short: "Deactivate Sim",
	Long:  `Deactivate Sim`,
	RunE: func(cmd *cobra.Command, args []string) error {
		deactivateParam, err := params.NewDeactivateSimParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("deactivate parameter: \n%s\n", debugMarshalIndent(deactivateParam))
		return err
	},
}

var simImeiLockCmd = &cobra.Command{
	Use: "imei-lock",

	Short: "ImeiLock Sim",
	Long:  `ImeiLock Sim`,
	RunE: func(cmd *cobra.Command, args []string) error {
		imeiLockParam, err := params.NewImeiLockSimParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("imei-lock parameter: \n%s\n", debugMarshalIndent(imeiLockParam))
		return err
	},
}

var simIpAddCmd = &cobra.Command{
	Use: "ip-add",

	Short: "IpAdd Sim",
	Long:  `IpAdd Sim`,
	RunE: func(cmd *cobra.Command, args []string) error {
		ipAddParam, err := params.NewIpAddSimParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("ip-add parameter: \n%s\n", debugMarshalIndent(ipAddParam))
		return err
	},
}

var simImeiUnlockCmd = &cobra.Command{
	Use: "imei-unlock",

	Short: "ImeiUnlock Sim",
	Long:  `ImeiUnlock Sim`,
	RunE: func(cmd *cobra.Command, args []string) error {
		imeiUnlockParam, err := params.NewImeiUnlockSimParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("imei-unlock parameter: \n%s\n", debugMarshalIndent(imeiUnlockParam))
		return err
	},
}

var simIpDeleteCmd = &cobra.Command{
	Use:     "ip-delete",
	Aliases: []string{"ip-del"},
	Short:   "IpDelete Sim",
	Long:    `IpDelete Sim`,
	RunE: func(cmd *cobra.Command, args []string) error {
		ipDeleteParam, err := params.NewIpDeleteSimParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("ip-delete parameter: \n%s\n", debugMarshalIndent(ipDeleteParam))
		return err
	},
}

var simLogsCmd = &cobra.Command{
	Use: "logs",

	Short: "Logs Sim",
	Long:  `Logs Sim`,
	RunE: func(cmd *cobra.Command, args []string) error {
		logsParam, err := params.NewLogsSimParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("logs parameter: \n%s\n", debugMarshalIndent(logsParam))
		return err
	},
}

var simMonitorCmd = &cobra.Command{
	Use: "monitor",

	Short: "Monitor Sim",
	Long:  `Monitor Sim`,
	RunE: func(cmd *cobra.Command, args []string) error {
		monitorParam, err := params.NewMonitorSimParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("monitor parameter: \n%s\n", debugMarshalIndent(monitorParam))
		return err
	},
}

func init() {
	parent := simCmd
	parent.AddCommand(simListCmd)
	parent.AddCommand(simCreateCmd)
	parent.AddCommand(simReadCmd)
	parent.AddCommand(simUpdateCmd)
	parent.AddCommand(simDeleteCmd)
	parent.AddCommand(simCarrierInfoCmd)
	parent.AddCommand(simCarrierUpdateCmd)
	parent.AddCommand(simActivateCmd)
	parent.AddCommand(simDeactivateCmd)
	parent.AddCommand(simImeiLockCmd)
	parent.AddCommand(simIpAddCmd)
	parent.AddCommand(simImeiUnlockCmd)
	parent.AddCommand(simIpDeleteCmd)
	parent.AddCommand(simLogsCmd)
	parent.AddCommand(simMonitorCmd)
	rootCmd.AddCommand(simCmd)
}

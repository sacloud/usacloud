// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"github.com/spf13/cobra"
)

// databaseCmd represents the database command
var databaseCmd = &cobra.Command{
	Use:   "database",
	Short: "A manage commands of Database",
	Long:  `A manage commands of Database`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var databaseListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List Database",
	Long:    `List Database`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create Database",
	Long:  `Create Database`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Database",
	Long:  `Read Database`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update Database",
	Long:  `Update Database`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Database",
	Long:    `Delete Database`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseBootCmd = &cobra.Command{
	Use:     "boot",
	Aliases: []string{"power-on"},
	Short:   "Boot Database",
	Long:    `Boot Database`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseShutdownCmd = &cobra.Command{
	Use:     "shutdown",
	Aliases: []string{"power-off"},
	Short:   "Shutdown Database",
	Long:    `Shutdown Database`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseShutdownForceCmd = &cobra.Command{
	Use:     "shutdown-force",
	Aliases: []string{"stop"},
	Short:   "ShutdownForce Database",
	Long:    `ShutdownForce Database`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseResetCmd = &cobra.Command{
	Use: "reset",

	Short: "Reset Database",
	Long:  `Reset Database`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseWaitForBootCmd = &cobra.Command{
	Use: "wait-for-boot",

	Short: "Wait until boot is completed",
	Long:  `Wait until boot is completed`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseWaitForDownCmd = &cobra.Command{
	Use: "wait-for-down",

	Short: "Wait until shutdown is completed",
	Long:  `Wait until shutdown is completed`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseBackupInfoCmd = &cobra.Command{
	Use:     "backup-info",
	Aliases: []string{"backups", "backup-list"},
	Short:   "Show information of backup",
	Long:    `Show information of backup`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseBackupCreateCmd = &cobra.Command{
	Use: "backup-create",

	Short: "Make new database backup",
	Long:  `Make new database backup`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseBackupRestoreCmd = &cobra.Command{
	Use: "backup-restore",

	Short: "Restore database from backup",
	Long:  `Restore database from backup`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseBackupLockCmd = &cobra.Command{
	Use: "backup-lock",

	Short: "Lock backup",
	Long:  `Lock backup`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseBackupUnlockCmd = &cobra.Command{
	Use: "backup-unlock",

	Short: "Unlock backup",
	Long:  `Unlock backup`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseBackupRemoveCmd = &cobra.Command{
	Use: "backup-remove",

	Short: "Remove backup",
	Long:  `Remove backup`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseCloneCmd = &cobra.Command{
	Use: "clone",

	Short: "Create clone instance",
	Long:  `Create clone instance`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseReplicaCreateCmd = &cobra.Command{
	Use: "replica-create",

	Short: "Create replication slave instance",
	Long:  `Create replication slave instance`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseMonitorCpuCmd = &cobra.Command{
	Use: "monitor-cpu",

	Short: "Collect CPU monitor values",
	Long:  `Collect CPU monitor values`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseMonitorMemoryCmd = &cobra.Command{
	Use: "monitor-memory",

	Short: "Collect memory monitor values",
	Long:  `Collect memory monitor values`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseMonitorNicCmd = &cobra.Command{
	Use: "monitor-nic",

	Short: "Collect NIC(s) monitor values",
	Long:  `Collect NIC(s) monitor values`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseMonitorSystemDiskCmd = &cobra.Command{
	Use: "monitor-system-disk",

	Short: "Collect system-disk monitor values(IO)",
	Long:  `Collect system-disk monitor values(IO)`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseMonitorBackupDiskCmd = &cobra.Command{
	Use: "monitor-backup-disk",

	Short: "Collect backup-disk monitor values(IO)",
	Long:  `Collect backup-disk monitor values(IO)`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseMonitorSystemDiskSizeCmd = &cobra.Command{
	Use: "monitor-system-disk-size",

	Short: "Collect system-disk monitor values(usage)",
	Long:  `Collect system-disk monitor values(usage)`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseMonitorBackupDiskSizeCmd = &cobra.Command{
	Use: "monitor-backup-disk-size",

	Short: "Collect backup-disk monitor values(usage)",
	Long:  `Collect backup-disk monitor values(usage)`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

var databaseLogsCmd = &cobra.Command{
	Use: "logs",

	Short: "Logs Database",
	Long:  `Logs Database`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements
	},
}

func init() {
	parent := databaseCmd
	parent.AddCommand(databaseListCmd)
	parent.AddCommand(databaseCreateCmd)
	parent.AddCommand(databaseReadCmd)
	parent.AddCommand(databaseUpdateCmd)
	parent.AddCommand(databaseDeleteCmd)
	parent.AddCommand(databaseBootCmd)
	parent.AddCommand(databaseShutdownCmd)
	parent.AddCommand(databaseShutdownForceCmd)
	parent.AddCommand(databaseResetCmd)
	parent.AddCommand(databaseWaitForBootCmd)
	parent.AddCommand(databaseWaitForDownCmd)
	parent.AddCommand(databaseBackupInfoCmd)
	parent.AddCommand(databaseBackupCreateCmd)
	parent.AddCommand(databaseBackupRestoreCmd)
	parent.AddCommand(databaseBackupLockCmd)
	parent.AddCommand(databaseBackupUnlockCmd)
	parent.AddCommand(databaseBackupRemoveCmd)
	parent.AddCommand(databaseCloneCmd)
	parent.AddCommand(databaseReplicaCreateCmd)
	parent.AddCommand(databaseMonitorCpuCmd)
	parent.AddCommand(databaseMonitorMemoryCmd)
	parent.AddCommand(databaseMonitorNicCmd)
	parent.AddCommand(databaseMonitorSystemDiskCmd)
	parent.AddCommand(databaseMonitorBackupDiskCmd)
	parent.AddCommand(databaseMonitorSystemDiskSizeCmd)
	parent.AddCommand(databaseMonitorBackupDiskSizeCmd)
	parent.AddCommand(databaseLogsCmd)
	rootCmd.AddCommand(databaseCmd)
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	nfsListParam                = params.NewListNFSParam()
	nfsCreateParam              = params.NewCreateNFSParam()
	nfsReadParam                = params.NewReadNFSParam()
	nfsUpdateParam              = params.NewUpdateNFSParam()
	nfsDeleteParam              = params.NewDeleteNFSParam()
	nfsBootParam                = params.NewBootNFSParam()
	nfsShutdownParam            = params.NewShutdownNFSParam()
	nfsShutdownForceParam       = params.NewShutdownForceNFSParam()
	nfsResetParam               = params.NewResetNFSParam()
	nfsWaitForBootParam         = params.NewWaitForBootNFSParam()
	nfsWaitForDownParam         = params.NewWaitForDownNFSParam()
	nfsMonitorNicParam          = params.NewMonitorNicNFSParam()
	nfsMonitorFreeDiskSizeParam = params.NewMonitorFreeDiskSizeNFSParam()
)

// nfsCmd represents the command to manage SAKURAÂ Cloud NFS
var nfsCmd = &cobra.Command{
	Use:   "nfs",
	Short: "A manage commands of NFS",
	Long:  `A manage commands of NFS`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var nfsListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List NFS",
	Long:    `List NFS`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := nfsListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(nfsListParam))
		return err
	},
}

func nfsListCmdInit() {
	fs := nfsListCmd.Flags()
	fs.StringSliceVarP(&nfsListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &nfsListParam.Id), "id", "", "set filter by id(s)")
	fs.IntVarP(&nfsListParam.From, "from", "", 0, "set offset")
	fs.IntVarP(&nfsListParam.Max, "max", "", 0, "set limit")
	fs.StringSliceVarP(&nfsListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringSliceVarP(&nfsListParam.Tags, "tags", "", []string{}, "set filter by tags(AND)")
}

var nfsCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create NFS",
	Long:  `Create NFS`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := nfsCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(nfsCreateParam))
		return err
	},
}

func nfsCreateCmdInit() {
	fs := nfsCreateCmd.Flags()
	fs.IntVarP(&nfsCreateParam.NwMaskLen, "nw-mask-len", "", 0, "set network mask length")
	fs.StringVarP(&nfsCreateParam.DefaultRoute, "default-route", "", "", "set default route")
	fs.StringVarP(&nfsCreateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&nfsCreateParam.Description, "description", "", "", "set resource description")
	fs.StringVarP(&nfsCreateParam.Plan, "plan", "", "hdd", "set plan[ssd/hdd]")
	fs.StringVarP(&nfsCreateParam.Ipaddress, "ipaddress", "", "", "set ipaddress(#)")
	fs.StringSliceVarP(&nfsCreateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &nfsCreateParam.IconId), "icon-id", "", "set Icon ID")
	fs.VarP(newIDValue(0, &nfsCreateParam.SwitchId), "switch-id", "", "set connect switch ID")
	fs.IntVarP(&nfsCreateParam.Size, "size", "", 100, "set plan[100/500/1024/2048/4096/8192/12288]")
}

var nfsReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read NFS",
	Long:  `Read NFS`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := nfsReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(nfsReadParam))
		return err
	},
}

func nfsReadCmdInit() {
}

var nfsUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update NFS",
	Long:  `Update NFS`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := nfsUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(nfsUpdateParam))
		return err
	},
}

func nfsUpdateCmdInit() {
	fs := nfsUpdateCmd.Flags()
	fs.VarP(newIDValue(0, &nfsUpdateParam.IconId), "icon-id", "", "set Icon ID")
	fs.StringVarP(&nfsUpdateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&nfsUpdateParam.Description, "description", "", "", "set resource description")
	fs.StringSliceVarP(&nfsUpdateParam.Tags, "tags", "", []string{}, "set resource tags")
}

var nfsDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete NFS",
	Long:    `Delete NFS`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := nfsDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(nfsDeleteParam))
		return err
	},
}

func nfsDeleteCmdInit() {
	fs := nfsDeleteCmd.Flags()
	fs.BoolVarP(&nfsDeleteParam.Force, "force", "f", false, "forced-shutdown flag if server is running")
}

var nfsBootCmd = &cobra.Command{
	Use:     "boot",
	Aliases: []string{"power-on"},
	Short:   "Boot NFS",
	Long:    `Boot NFS`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := nfsBootParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("boot parameter: \n%s\n", debugMarshalIndent(nfsBootParam))
		return err
	},
}

func nfsBootCmdInit() {
}

var nfsShutdownCmd = &cobra.Command{
	Use:     "shutdown",
	Aliases: []string{"power-off"},
	Short:   "Shutdown NFS",
	Long:    `Shutdown NFS`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := nfsShutdownParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("shutdown parameter: \n%s\n", debugMarshalIndent(nfsShutdownParam))
		return err
	},
}

func nfsShutdownCmdInit() {
}

var nfsShutdownForceCmd = &cobra.Command{
	Use:     "shutdown-force",
	Aliases: []string{"stop"},
	Short:   "ShutdownForce NFS",
	Long:    `ShutdownForce NFS`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := nfsShutdownForceParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("shutdown-force parameter: \n%s\n", debugMarshalIndent(nfsShutdownForceParam))
		return err
	},
}

func nfsShutdownForceCmdInit() {
}

var nfsResetCmd = &cobra.Command{
	Use: "reset",

	Short: "Reset NFS",
	Long:  `Reset NFS`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := nfsResetParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("reset parameter: \n%s\n", debugMarshalIndent(nfsResetParam))
		return err
	},
}

func nfsResetCmdInit() {
}

var nfsWaitForBootCmd = &cobra.Command{
	Use: "wait-for-boot",

	Short: "Wait until boot is completed",
	Long:  `Wait until boot is completed`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := nfsWaitForBootParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("wait-for-boot parameter: \n%s\n", debugMarshalIndent(nfsWaitForBootParam))
		return err
	},
}

func nfsWaitForBootCmdInit() {
}

var nfsWaitForDownCmd = &cobra.Command{
	Use: "wait-for-down",

	Short: "Wait until shutdown is completed",
	Long:  `Wait until shutdown is completed`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := nfsWaitForDownParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("wait-for-down parameter: \n%s\n", debugMarshalIndent(nfsWaitForDownParam))
		return err
	},
}

func nfsWaitForDownCmdInit() {
}

var nfsMonitorNicCmd = &cobra.Command{
	Use: "monitor-nic",

	Short: "Collect NIC(s) monitor values",
	Long:  `Collect NIC(s) monitor values`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := nfsMonitorNicParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("monitor-nic parameter: \n%s\n", debugMarshalIndent(nfsMonitorNicParam))
		return err
	},
}

func nfsMonitorNicCmdInit() {
	fs := nfsMonitorNicCmd.Flags()
	fs.StringVarP(&nfsMonitorNicParam.KeyFormat, "key-format", "", "sakuracloud.disk.{{.ID}}.nic", "set monitoring value key-format")
	fs.StringVarP(&nfsMonitorNicParam.Start, "start", "", "", "set start-time")
	fs.StringVarP(&nfsMonitorNicParam.End, "end", "", "", "set end-time")
}

var nfsMonitorFreeDiskSizeCmd = &cobra.Command{
	Use: "monitor-free-disk-size",

	Short: "Collect system-disk monitor values(IO)",
	Long:  `Collect system-disk monitor values(IO)`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := nfsMonitorFreeDiskSizeParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("monitor-free-disk-size parameter: \n%s\n", debugMarshalIndent(nfsMonitorFreeDiskSizeParam))
		return err
	},
}

func nfsMonitorFreeDiskSizeCmdInit() {
	fs := nfsMonitorFreeDiskSizeCmd.Flags()
	fs.StringVarP(&nfsMonitorFreeDiskSizeParam.End, "end", "", "", "set end-time")
	fs.StringVarP(&nfsMonitorFreeDiskSizeParam.KeyFormat, "key-format", "", "sakuracloud.disk.{{.ID}}.free-disk-size", "set monitoring value key-format")
	fs.StringVarP(&nfsMonitorFreeDiskSizeParam.Start, "start", "", "", "set start-time")
}

func init() {
	parent := nfsCmd

	nfsListCmdInit()
	parent.AddCommand(nfsListCmd)

	nfsCreateCmdInit()
	parent.AddCommand(nfsCreateCmd)

	nfsReadCmdInit()
	parent.AddCommand(nfsReadCmd)

	nfsUpdateCmdInit()
	parent.AddCommand(nfsUpdateCmd)

	nfsDeleteCmdInit()
	parent.AddCommand(nfsDeleteCmd)

	nfsBootCmdInit()
	parent.AddCommand(nfsBootCmd)

	nfsShutdownCmdInit()
	parent.AddCommand(nfsShutdownCmd)

	nfsShutdownForceCmdInit()
	parent.AddCommand(nfsShutdownForceCmd)

	nfsResetCmdInit()
	parent.AddCommand(nfsResetCmd)

	nfsWaitForBootCmdInit()
	parent.AddCommand(nfsWaitForBootCmd)

	nfsWaitForDownCmdInit()
	parent.AddCommand(nfsWaitForDownCmd)

	nfsMonitorNicCmdInit()
	parent.AddCommand(nfsMonitorNicCmd)

	nfsMonitorFreeDiskSizeCmdInit()
	parent.AddCommand(nfsMonitorFreeDiskSizeCmd)

	rootCmd.AddCommand(parent)
}

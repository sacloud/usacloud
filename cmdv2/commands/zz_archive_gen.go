// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

// archiveCmd represents the command to manage SAKURAÂ Cloud Archive
func archiveCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "archive",
		Short: "A manage commands of Archive",
		Long:  `A manage commands of Archive`,
		Run: func(cmd *cobra.Command, args []string) {
			cmd.HelpFunc()(cmd, args)
		},
	}
}

func archiveListCmd() *cobra.Command {
	archiveListParam := params.NewListArchiveParam()
	cmd := &cobra.Command{
		Use:     "list",
		Aliases: []string{"ls", "find", "selector"},
		Short:   "List Archive",
		Long:    `List Archive`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return archiveListParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), archiveListParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("list local parameter: \n%s\n", debugMarshalIndent(archiveListParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&archiveListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &archiveListParam.Id), "id", "", "set filter by id(s)")
	fs.StringVarP(&archiveListParam.Scope, "scope", "", "", "set filter by scope('user' or 'shared')")
	fs.StringSliceVarP(&archiveListParam.Tags, "tags", "", []string{}, "set filter by tags(AND)")
	fs.VarP(newIDValue(0, &archiveListParam.SourceArchiveId), "source-archive-id", "", "set filter by source-archive-id")
	fs.VarP(newIDValue(0, &archiveListParam.SourceDiskId), "source-disk-id", "", "set filter by source-disk-id")
	fs.IntVarP(&archiveListParam.From, "from", "", 0, "set offset")
	fs.IntVarP(&archiveListParam.Max, "max", "", 0, "set limit")
	fs.StringSliceVarP(&archiveListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringVarP(&archiveListParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&archiveListParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&archiveListParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&archiveListParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&archiveListParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&archiveListParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&archiveListParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&archiveListParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&archiveListParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&archiveListParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&archiveListParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&archiveListParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	return cmd
}

func archiveCreateCmd() *cobra.Command {
	archiveCreateParam := params.NewCreateArchiveParam()
	cmd := &cobra.Command{
		Use: "create",

		Short: "Create Archive",
		Long:  `Create Archive`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return archiveCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), archiveCreateParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("create local parameter: \n%s\n", debugMarshalIndent(archiveCreateParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.VarP(newIDValue(0, &archiveCreateParam.SourceDiskId), "source-disk-id", "", "set source disk ID")
	fs.VarP(newIDValue(0, &archiveCreateParam.SourceArchiveId), "source-archive-id", "", "set source archive ID")
	fs.IntVarP(&archiveCreateParam.Size, "size", "", 0, "set archive size(GB)")
	fs.StringVarP(&archiveCreateParam.ArchiveFile, "archive-file", "", "", "set archive image file")
	fs.StringVarP(&archiveCreateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&archiveCreateParam.Description, "description", "", "", "set resource description")
	fs.StringSliceVarP(&archiveCreateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &archiveCreateParam.IconId), "icon-id", "", "set Icon ID")
	fs.BoolVarP(&archiveCreateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&archiveCreateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&archiveCreateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&archiveCreateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&archiveCreateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&archiveCreateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&archiveCreateParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&archiveCreateParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&archiveCreateParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&archiveCreateParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&archiveCreateParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&archiveCreateParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&archiveCreateParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	return cmd
}

func archiveReadCmd() *cobra.Command {
	archiveReadParam := params.NewReadArchiveParam()
	cmd := &cobra.Command{
		Use: "read",

		Short: "Read Archive",
		Long:  `Read Archive`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return archiveReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), archiveReadParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("read local parameter: \n%s\n", debugMarshalIndent(archiveReadParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&archiveReadParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&archiveReadParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&archiveReadParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&archiveReadParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&archiveReadParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&archiveReadParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&archiveReadParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&archiveReadParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&archiveReadParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&archiveReadParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&archiveReadParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&archiveReadParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&archiveReadParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &archiveReadParam.Id), "id", "", "Set target ID")
	return cmd
}

func archiveUpdateCmd() *cobra.Command {
	archiveUpdateParam := params.NewUpdateArchiveParam()
	cmd := &cobra.Command{
		Use: "update",

		Short: "Update Archive",
		Long:  `Update Archive`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return archiveUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), archiveUpdateParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("update local parameter: \n%s\n", debugMarshalIndent(archiveUpdateParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&archiveUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&archiveUpdateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&archiveUpdateParam.Description, "description", "", "", "set resource description")
	fs.StringSliceVarP(&archiveUpdateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &archiveUpdateParam.IconId), "icon-id", "", "set Icon ID")
	fs.BoolVarP(&archiveUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&archiveUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&archiveUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&archiveUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&archiveUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&archiveUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&archiveUpdateParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&archiveUpdateParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&archiveUpdateParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&archiveUpdateParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&archiveUpdateParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&archiveUpdateParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&archiveUpdateParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &archiveUpdateParam.Id), "id", "", "Set target ID")
	return cmd
}

func archiveDeleteCmd() *cobra.Command {
	archiveDeleteParam := params.NewDeleteArchiveParam()
	cmd := &cobra.Command{
		Use:     "delete",
		Aliases: []string{"rm"},
		Short:   "Delete Archive",
		Long:    `Delete Archive`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return archiveDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), archiveDeleteParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("delete local parameter: \n%s\n", debugMarshalIndent(archiveDeleteParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&archiveDeleteParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&archiveDeleteParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&archiveDeleteParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&archiveDeleteParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&archiveDeleteParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&archiveDeleteParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&archiveDeleteParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&archiveDeleteParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&archiveDeleteParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&archiveDeleteParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&archiveDeleteParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&archiveDeleteParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&archiveDeleteParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&archiveDeleteParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &archiveDeleteParam.Id), "id", "", "Set target ID")
	return cmd
}

func archiveUploadCmd() *cobra.Command {
	archiveUploadParam := params.NewUploadArchiveParam()
	cmd := &cobra.Command{
		Use: "upload",

		Short: "Upload Archive",
		Long:  `Upload Archive`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return archiveUploadParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), archiveUploadParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("upload local parameter: \n%s\n", debugMarshalIndent(archiveUploadParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.StringVarP(&archiveUploadParam.ArchiveFile, "archive-file", "", "", "set archive image file")
	fs.StringSliceVarP(&archiveUploadParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&archiveUploadParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&archiveUploadParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&archiveUploadParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&archiveUploadParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&archiveUploadParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&archiveUploadParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&archiveUploadParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&archiveUploadParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&archiveUploadParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&archiveUploadParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&archiveUploadParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&archiveUploadParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&archiveUploadParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &archiveUploadParam.Id), "id", "", "Set target ID")
	return cmd
}

func archiveDownloadCmd() *cobra.Command {
	archiveDownloadParam := params.NewDownloadArchiveParam()
	cmd := &cobra.Command{
		Use: "download",

		Short: "Download Archive",
		Long:  `Download Archive`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return archiveDownloadParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), archiveDownloadParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("download local parameter: \n%s\n", debugMarshalIndent(archiveDownloadParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.StringVarP(&archiveDownloadParam.FileDestination, "file-destination", "", "", "set file destination path")
	fs.StringSliceVarP(&archiveDownloadParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&archiveDownloadParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&archiveDownloadParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&archiveDownloadParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&archiveDownloadParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&archiveDownloadParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&archiveDownloadParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &archiveDownloadParam.Id), "id", "", "Set target ID")
	return cmd
}

func archiveFTPOpenCmd() *cobra.Command {
	archiveFTPOpenParam := params.NewFTPOpenArchiveParam()
	cmd := &cobra.Command{
		Use: "ftp-open",

		Short: "FTPOpen Archive",
		Long:  `FTPOpen Archive`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return archiveFTPOpenParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), archiveFTPOpenParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("ftp-open local parameter: \n%s\n", debugMarshalIndent(archiveFTPOpenParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&archiveFTPOpenParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&archiveFTPOpenParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&archiveFTPOpenParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&archiveFTPOpenParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&archiveFTPOpenParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&archiveFTPOpenParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&archiveFTPOpenParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&archiveFTPOpenParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&archiveFTPOpenParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&archiveFTPOpenParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&archiveFTPOpenParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&archiveFTPOpenParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&archiveFTPOpenParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&archiveFTPOpenParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &archiveFTPOpenParam.Id), "id", "", "Set target ID")
	return cmd
}

func archiveFTPCloseCmd() *cobra.Command {
	archiveFTPCloseParam := params.NewFTPCloseArchiveParam()
	cmd := &cobra.Command{
		Use: "ftp-close",

		Short: "FTPClose Archive",
		Long:  `FTPClose Archive`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return archiveFTPCloseParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), archiveFTPCloseParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("ftp-close local parameter: \n%s\n", debugMarshalIndent(archiveFTPCloseParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&archiveFTPCloseParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&archiveFTPCloseParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&archiveFTPCloseParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&archiveFTPCloseParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&archiveFTPCloseParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&archiveFTPCloseParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&archiveFTPCloseParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &archiveFTPCloseParam.Id), "id", "", "Set target ID")
	return cmd
}

func archiveWaitForCopyCmd() *cobra.Command {
	archiveWaitForCopyParam := params.NewWaitForCopyArchiveParam()
	cmd := &cobra.Command{
		Use: "wait-for-copy",

		Short: "WaitForCopy Archive",
		Long:  `WaitForCopy Archive`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return archiveWaitForCopyParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), archiveWaitForCopyParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("wait-for-copy local parameter: \n%s\n", debugMarshalIndent(archiveWaitForCopyParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&archiveWaitForCopyParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&archiveWaitForCopyParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&archiveWaitForCopyParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&archiveWaitForCopyParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&archiveWaitForCopyParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&archiveWaitForCopyParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &archiveWaitForCopyParam.Id), "id", "", "Set target ID")
	return cmd
}

func init() {
	parent := archiveCmd()
	parent.AddCommand(archiveListCmd())
	parent.AddCommand(archiveCreateCmd())
	parent.AddCommand(archiveReadCmd())
	parent.AddCommand(archiveUpdateCmd())
	parent.AddCommand(archiveDeleteCmd())
	parent.AddCommand(archiveUploadCmd())
	parent.AddCommand(archiveDownloadCmd())
	parent.AddCommand(archiveFTPOpenCmd())
	parent.AddCommand(archiveFTPCloseCmd())
	parent.AddCommand(archiveWaitForCopyCmd())
	rootCmd.AddCommand(parent)
}

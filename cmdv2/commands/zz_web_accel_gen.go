// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	webAccelListParam              = params.NewListWebAccelParam()
	webAccelReadParam              = params.NewReadWebAccelParam()
	webAccelCertificateInfoParam   = params.NewCertificateInfoWebAccelParam()
	webAccelCertificateNewParam    = params.NewCertificateNewWebAccelParam()
	webAccelCertificateUpdateParam = params.NewCertificateUpdateWebAccelParam()
	webAccelDeleteCacheParam       = params.NewDeleteCacheWebAccelParam()
)

// webAccelCmd represents the command to manage SAKURAÂ Cloud WebAccel
var webAccelCmd = &cobra.Command{
	Use:   "webAccel",
	Short: "A manage commands of WebAccel",
	Long:  `A manage commands of WebAccel`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var webAccelListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List WebAccel",
	Long:    `List WebAccel`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := webAccelListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(webAccelListParam))
		return err
	},
}

func webAccelListCmdInit() {
}

var webAccelReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read WebAccel",
	Long:  `Read WebAccel`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := webAccelReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(webAccelReadParam))
		return err
	},
}

func webAccelReadCmdInit() {
}

var webAccelCertificateInfoCmd = &cobra.Command{
	Use:     "certificate-info",
	Aliases: []string{"cert-info"},
	Short:   "CertificateInfo WebAccel",
	Long:    `CertificateInfo WebAccel`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := webAccelCertificateInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("certificate-info parameter: \n%s\n", debugMarshalIndent(webAccelCertificateInfoParam))
		return err
	},
}

func webAccelCertificateInfoCmdInit() {
}

var webAccelCertificateNewCmd = &cobra.Command{
	Use:     "certificate-new",
	Aliases: []string{"cert-new", "cert-create", "certificate-create"},
	Short:   "CertificateNew WebAccel",
	Long:    `CertificateNew WebAccel`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := webAccelCertificateNewParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("certificate-new parameter: \n%s\n", debugMarshalIndent(webAccelCertificateNewParam))
		return err
	},
}

func webAccelCertificateNewCmdInit() {
	fs := webAccelCertificateNewCmd.Flags()
	fs.StringVarP(&webAccelCertificateNewParam.CertContent, "cert-content", "", "", "set certificate(from text)")
	fs.StringVarP(&webAccelCertificateNewParam.KeyContent, "key-content", "", "", "set private key(from text)")
	fs.StringVarP(&webAccelCertificateNewParam.Cert, "cert", "", "", "set certificate(from file)")
	fs.StringVarP(&webAccelCertificateNewParam.Key, "key", "", "", "set private key(from file)")
}

var webAccelCertificateUpdateCmd = &cobra.Command{
	Use:     "certificate-update",
	Aliases: []string{"cert-update"},
	Short:   "CertificateUpdate WebAccel",
	Long:    `CertificateUpdate WebAccel`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := webAccelCertificateUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("certificate-update parameter: \n%s\n", debugMarshalIndent(webAccelCertificateUpdateParam))
		return err
	},
}

func webAccelCertificateUpdateCmdInit() {
	fs := webAccelCertificateUpdateCmd.Flags()
	fs.StringVarP(&webAccelCertificateUpdateParam.Cert, "cert", "", "", "set certificate(from file)")
	fs.StringVarP(&webAccelCertificateUpdateParam.Key, "key", "", "", "set private key(from file)")
	fs.StringVarP(&webAccelCertificateUpdateParam.CertContent, "cert-content", "", "", "set certificate(from text)")
	fs.StringVarP(&webAccelCertificateUpdateParam.KeyContent, "key-content", "", "", "set private key(from text)")
}

var webAccelDeleteCacheCmd = &cobra.Command{
	Use:     "delete-cache",
	Aliases: []string{"purge"},
	Short:   "DeleteCache WebAccel",
	Long:    `DeleteCache WebAccel`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := webAccelDeleteCacheParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete-cache parameter: \n%s\n", debugMarshalIndent(webAccelDeleteCacheParam))
		return err
	},
}

func webAccelDeleteCacheCmdInit() {
}

func init() {
	parent := webAccelCmd

	webAccelListCmdInit()
	parent.AddCommand(webAccelListCmd)

	webAccelReadCmdInit()
	parent.AddCommand(webAccelReadCmd)

	webAccelCertificateInfoCmdInit()
	parent.AddCommand(webAccelCertificateInfoCmd)

	webAccelCertificateNewCmdInit()
	parent.AddCommand(webAccelCertificateNewCmd)

	webAccelCertificateUpdateCmdInit()
	parent.AddCommand(webAccelCertificateUpdateCmd)

	webAccelDeleteCacheCmdInit()
	parent.AddCommand(webAccelDeleteCacheCmd)

	rootCmd.AddCommand(parent)
}

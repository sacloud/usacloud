// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	webAccelListParam              = params.NewListWebAccelParam()
	webAccelReadParam              = params.NewReadWebAccelParam()
	webAccelCertificateInfoParam   = params.NewCertificateInfoWebAccelParam()
	webAccelCertificateNewParam    = params.NewCertificateNewWebAccelParam()
	webAccelCertificateUpdateParam = params.NewCertificateUpdateWebAccelParam()
	webAccelDeleteCacheParam       = params.NewDeleteCacheWebAccelParam()
)

// webAccelCmd represents the command to manage SAKURAÂ Cloud WebAccel
var webAccelCmd = &cobra.Command{
	Use:   "web-accel",
	Short: "A manage commands of WebAccel",
	Long:  `A manage commands of WebAccel`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var webAccelListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List WebAccel",
	Long:    `List WebAccel`,
	PreRunE: func(cmd *cobra.Command, args []string) error {
		return webAccelListParam.Initialize(newParamsAdapter(cmd.Flags()))
	},
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx, err := newCLIContext(globalFlags(), webAccelListParam)
		if err != nil {
			return err
		}

		// TODO DEBUG
		fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
		fmt.Printf("list local parameter: \n%s\n", debugMarshalIndent(webAccelListParam))
		return nil
	},
}

func webAccelListCmdInit() {
	fs := webAccelListCmd.Flags()
	fs.StringVarP(&webAccelListParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&webAccelListParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&webAccelListParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&webAccelListParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&webAccelListParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&webAccelListParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&webAccelListParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&webAccelListParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&webAccelListParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&webAccelListParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&webAccelListParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&webAccelListParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
}

var webAccelReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read WebAccel",
	Long:  `Read WebAccel`,
	PreRunE: func(cmd *cobra.Command, args []string) error {
		return webAccelReadParam.Initialize(newParamsAdapter(cmd.Flags()))
	},
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx, err := newCLIContext(globalFlags(), webAccelReadParam)
		if err != nil {
			return err
		}

		// TODO DEBUG
		fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
		fmt.Printf("read local parameter: \n%s\n", debugMarshalIndent(webAccelReadParam))
		return nil
	},
}

func webAccelReadCmdInit() {
	fs := webAccelReadCmd.Flags()
	fs.StringSliceVarP(&webAccelReadParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&webAccelReadParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&webAccelReadParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&webAccelReadParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&webAccelReadParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&webAccelReadParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&webAccelReadParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&webAccelReadParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&webAccelReadParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&webAccelReadParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&webAccelReadParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&webAccelReadParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&webAccelReadParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &webAccelReadParam.Id), "id", "", "Set target ID")
}

var webAccelCertificateInfoCmd = &cobra.Command{
	Use:     "certificate-info",
	Aliases: []string{"cert-info"},
	Short:   "CertificateInfo WebAccel",
	Long:    `CertificateInfo WebAccel`,
	PreRunE: func(cmd *cobra.Command, args []string) error {
		return webAccelCertificateInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
	},
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx, err := newCLIContext(globalFlags(), webAccelCertificateInfoParam)
		if err != nil {
			return err
		}

		// TODO DEBUG
		fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
		fmt.Printf("certificate-info local parameter: \n%s\n", debugMarshalIndent(webAccelCertificateInfoParam))
		return nil
	},
}

func webAccelCertificateInfoCmdInit() {
	fs := webAccelCertificateInfoCmd.Flags()
	fs.StringSliceVarP(&webAccelCertificateInfoParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&webAccelCertificateInfoParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&webAccelCertificateInfoParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&webAccelCertificateInfoParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&webAccelCertificateInfoParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&webAccelCertificateInfoParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&webAccelCertificateInfoParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&webAccelCertificateInfoParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&webAccelCertificateInfoParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&webAccelCertificateInfoParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&webAccelCertificateInfoParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&webAccelCertificateInfoParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&webAccelCertificateInfoParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &webAccelCertificateInfoParam.Id), "id", "", "Set target ID")
}

var webAccelCertificateNewCmd = &cobra.Command{
	Use:     "certificate-new",
	Aliases: []string{"cert-new", "cert-create", "certificate-create"},
	Short:   "CertificateNew WebAccel",
	Long:    `CertificateNew WebAccel`,
	PreRunE: func(cmd *cobra.Command, args []string) error {
		return webAccelCertificateNewParam.Initialize(newParamsAdapter(cmd.Flags()))
	},
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx, err := newCLIContext(globalFlags(), webAccelCertificateNewParam)
		if err != nil {
			return err
		}

		// TODO DEBUG
		fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
		fmt.Printf("certificate-new local parameter: \n%s\n", debugMarshalIndent(webAccelCertificateNewParam))
		return nil
	},
}

func webAccelCertificateNewCmdInit() {
	fs := webAccelCertificateNewCmd.Flags()
	fs.StringVarP(&webAccelCertificateNewParam.Cert, "cert", "", "", "set certificate(from file)")
	fs.StringVarP(&webAccelCertificateNewParam.Key, "key", "", "", "set private key(from file)")
	fs.StringVarP(&webAccelCertificateNewParam.CertContent, "cert-content", "", "", "set certificate(from text)")
	fs.StringVarP(&webAccelCertificateNewParam.KeyContent, "key-content", "", "", "set private key(from text)")
	fs.StringSliceVarP(&webAccelCertificateNewParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&webAccelCertificateNewParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&webAccelCertificateNewParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&webAccelCertificateNewParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&webAccelCertificateNewParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&webAccelCertificateNewParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&webAccelCertificateNewParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&webAccelCertificateNewParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&webAccelCertificateNewParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&webAccelCertificateNewParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&webAccelCertificateNewParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&webAccelCertificateNewParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&webAccelCertificateNewParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&webAccelCertificateNewParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &webAccelCertificateNewParam.Id), "id", "", "Set target ID")
}

var webAccelCertificateUpdateCmd = &cobra.Command{
	Use:     "certificate-update",
	Aliases: []string{"cert-update"},
	Short:   "CertificateUpdate WebAccel",
	Long:    `CertificateUpdate WebAccel`,
	PreRunE: func(cmd *cobra.Command, args []string) error {
		return webAccelCertificateUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
	},
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx, err := newCLIContext(globalFlags(), webAccelCertificateUpdateParam)
		if err != nil {
			return err
		}

		// TODO DEBUG
		fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
		fmt.Printf("certificate-update local parameter: \n%s\n", debugMarshalIndent(webAccelCertificateUpdateParam))
		return nil
	},
}

func webAccelCertificateUpdateCmdInit() {
	fs := webAccelCertificateUpdateCmd.Flags()
	fs.StringVarP(&webAccelCertificateUpdateParam.Cert, "cert", "", "", "set certificate(from file)")
	fs.StringVarP(&webAccelCertificateUpdateParam.Key, "key", "", "", "set private key(from file)")
	fs.StringVarP(&webAccelCertificateUpdateParam.CertContent, "cert-content", "", "", "set certificate(from text)")
	fs.StringVarP(&webAccelCertificateUpdateParam.KeyContent, "key-content", "", "", "set private key(from text)")
	fs.StringSliceVarP(&webAccelCertificateUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&webAccelCertificateUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&webAccelCertificateUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&webAccelCertificateUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&webAccelCertificateUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&webAccelCertificateUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&webAccelCertificateUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&webAccelCertificateUpdateParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&webAccelCertificateUpdateParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&webAccelCertificateUpdateParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&webAccelCertificateUpdateParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&webAccelCertificateUpdateParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&webAccelCertificateUpdateParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&webAccelCertificateUpdateParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &webAccelCertificateUpdateParam.Id), "id", "", "Set target ID")
}

var webAccelDeleteCacheCmd = &cobra.Command{
	Use:     "delete-cache",
	Aliases: []string{"purge"},
	Short:   "DeleteCache WebAccel",
	Long:    `DeleteCache WebAccel`,
	PreRunE: func(cmd *cobra.Command, args []string) error {
		return webAccelDeleteCacheParam.Initialize(newParamsAdapter(cmd.Flags()))
	},
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx, err := newCLIContext(globalFlags(), webAccelDeleteCacheParam)
		if err != nil {
			return err
		}

		// TODO DEBUG
		fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
		fmt.Printf("delete-cache local parameter: \n%s\n", debugMarshalIndent(webAccelDeleteCacheParam))
		return nil
	},
}

func webAccelDeleteCacheCmdInit() {
	fs := webAccelDeleteCacheCmd.Flags()
	fs.BoolVarP(&webAccelDeleteCacheParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&webAccelDeleteCacheParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&webAccelDeleteCacheParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&webAccelDeleteCacheParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&webAccelDeleteCacheParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&webAccelDeleteCacheParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&webAccelDeleteCacheParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&webAccelDeleteCacheParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&webAccelDeleteCacheParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&webAccelDeleteCacheParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&webAccelDeleteCacheParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&webAccelDeleteCacheParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&webAccelDeleteCacheParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
}

func init() {
	parent := webAccelCmd

	webAccelListCmdInit()
	parent.AddCommand(webAccelListCmd)

	webAccelReadCmdInit()
	parent.AddCommand(webAccelReadCmd)

	webAccelCertificateInfoCmdInit()
	parent.AddCommand(webAccelCertificateInfoCmd)

	webAccelCertificateNewCmdInit()
	parent.AddCommand(webAccelCertificateNewCmd)

	webAccelCertificateUpdateCmdInit()
	parent.AddCommand(webAccelCertificateUpdateCmd)

	webAccelDeleteCacheCmdInit()
	parent.AddCommand(webAccelDeleteCacheCmd)

	rootCmd.AddCommand(parent)
}

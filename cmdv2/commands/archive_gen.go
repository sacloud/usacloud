// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	archiveListParam        = params.NewListArchiveParam()
	archiveCreateParam      = params.NewCreateArchiveParam()
	archiveReadParam        = params.NewReadArchiveParam()
	archiveUpdateParam      = params.NewUpdateArchiveParam()
	archiveDeleteParam      = params.NewDeleteArchiveParam()
	archiveUploadParam      = params.NewUploadArchiveParam()
	archiveDownloadParam    = params.NewDownloadArchiveParam()
	archiveFtpOpenParam     = params.NewFtpOpenArchiveParam()
	archiveFtpCloseParam    = params.NewFtpCloseArchiveParam()
	archiveWaitForCopyParam = params.NewWaitForCopyArchiveParam()
)

// archiveCmd represents the command to manage SAKURAÂ Cloud Archive
var archiveCmd = &cobra.Command{
	Use:   "archive",
	Short: "A manage commands of Archive",
	Long:  `A manage commands of Archive`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var archiveListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List Archive",
	Long:    `List Archive`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := archiveListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(archiveListParam))
		return err
	},
}

func archiveListCmdInit() {
	fs := archiveListCmd.Flags()
	fs.IntVarP(&archiveListParam.From, "from", "", 0, "set offset")
	fs.VarP(newIDValue(0, &archiveListParam.SourceArchiveId), "source-archive-id", "", "set filter by source-archive-id")
	fs.VarP(newIDValue(0, &archiveListParam.SourceDiskId), "source-disk-id", "", "set filter by source-disk-id")
	fs.StringSliceVarP(&archiveListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &archiveListParam.Id), "id", "", "set filter by id(s)")
	fs.StringVarP(&archiveListParam.Scope, "scope", "", "", "set filter by scope('user' or 'shared')")
	fs.StringSliceVarP(&archiveListParam.Tags, "tags", "", []string{}, "set filter by tags(AND)")
	fs.StringSliceVarP(&archiveListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.IntVarP(&archiveListParam.Max, "max", "", 0, "set limit")
}

var archiveCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create Archive",
	Long:  `Create Archive`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := archiveCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(archiveCreateParam))
		return err
	},
}

func archiveCreateCmdInit() {
	fs := archiveCreateCmd.Flags()
	fs.StringVarP(&archiveCreateParam.ArchiveFile, "archive-file", "", "", "set archive image file")
	fs.StringVarP(&archiveCreateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&archiveCreateParam.Description, "description", "", "", "set resource description")
	fs.StringSliceVarP(&archiveCreateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &archiveCreateParam.IconId), "icon-id", "", "set Icon ID")
	fs.VarP(newIDValue(0, &archiveCreateParam.SourceDiskId), "source-disk-id", "", "set source disk ID")
	fs.VarP(newIDValue(0, &archiveCreateParam.SourceArchiveId), "source-archive-id", "", "set source archive ID")
	fs.IntVarP(&archiveCreateParam.Size, "size", "", 0, "set archive size(GB)")
}

var archiveReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Archive",
	Long:  `Read Archive`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := archiveReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(archiveReadParam))
		return err
	},
}

func archiveReadCmdInit() {
}

var archiveUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update Archive",
	Long:  `Update Archive`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := archiveUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(archiveUpdateParam))
		return err
	},
}

func archiveUpdateCmdInit() {
	fs := archiveUpdateCmd.Flags()
	fs.StringVarP(&archiveUpdateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&archiveUpdateParam.Description, "description", "", "", "set resource description")
	fs.StringSliceVarP(&archiveUpdateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &archiveUpdateParam.IconId), "icon-id", "", "set Icon ID")
}

var archiveDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Archive",
	Long:    `Delete Archive`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := archiveDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(archiveDeleteParam))
		return err
	},
}

func archiveDeleteCmdInit() {
}

var archiveUploadCmd = &cobra.Command{
	Use: "upload",

	Short: "Upload Archive",
	Long:  `Upload Archive`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := archiveUploadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("upload parameter: \n%s\n", debugMarshalIndent(archiveUploadParam))
		return err
	},
}

func archiveUploadCmdInit() {
	fs := archiveUploadCmd.Flags()
	fs.StringVarP(&archiveUploadParam.ArchiveFile, "archive-file", "", "", "set archive image file")
}

var archiveDownloadCmd = &cobra.Command{
	Use: "download",

	Short: "Download Archive",
	Long:  `Download Archive`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := archiveDownloadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("download parameter: \n%s\n", debugMarshalIndent(archiveDownloadParam))
		return err
	},
}

func archiveDownloadCmdInit() {
	fs := archiveDownloadCmd.Flags()
	fs.StringVarP(&archiveDownloadParam.FileDestination, "file-destination", "", "", "set file destination path")
}

var archiveFtpOpenCmd = &cobra.Command{
	Use: "ftp-open",

	Short: "FtpOpen Archive",
	Long:  `FtpOpen Archive`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := archiveFtpOpenParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("ftp-open parameter: \n%s\n", debugMarshalIndent(archiveFtpOpenParam))
		return err
	},
}

func archiveFtpOpenCmdInit() {
}

var archiveFtpCloseCmd = &cobra.Command{
	Use: "ftp-close",

	Short: "FtpClose Archive",
	Long:  `FtpClose Archive`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := archiveFtpCloseParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("ftp-close parameter: \n%s\n", debugMarshalIndent(archiveFtpCloseParam))
		return err
	},
}

func archiveFtpCloseCmdInit() {
}

var archiveWaitForCopyCmd = &cobra.Command{
	Use: "wait-for-copy",

	Short: "WaitForCopy Archive",
	Long:  `WaitForCopy Archive`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := archiveWaitForCopyParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("wait-for-copy parameter: \n%s\n", debugMarshalIndent(archiveWaitForCopyParam))
		return err
	},
}

func archiveWaitForCopyCmdInit() {
}

func init() {
	parent := archiveCmd

	archiveListCmdInit()
	parent.AddCommand(archiveListCmd)

	archiveCreateCmdInit()
	parent.AddCommand(archiveCreateCmd)

	archiveReadCmdInit()
	parent.AddCommand(archiveReadCmd)

	archiveUpdateCmdInit()
	parent.AddCommand(archiveUpdateCmd)

	archiveDeleteCmdInit()
	parent.AddCommand(archiveDeleteCmd)

	archiveUploadCmdInit()
	parent.AddCommand(archiveUploadCmd)

	archiveDownloadCmdInit()
	parent.AddCommand(archiveDownloadCmd)

	archiveFtpOpenCmdInit()
	parent.AddCommand(archiveFtpOpenCmd)

	archiveFtpCloseCmdInit()
	parent.AddCommand(archiveFtpCloseCmd)

	archiveWaitForCopyCmdInit()
	parent.AddCommand(archiveWaitForCopyCmd)

	rootCmd.AddCommand(parent)
}

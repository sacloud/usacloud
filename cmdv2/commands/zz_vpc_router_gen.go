// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	vpcRouterListParam                      = params.NewListVPCRouterParam()
	vpcRouterCreateParam                    = params.NewCreateVPCRouterParam()
	vpcRouterReadParam                      = params.NewReadVPCRouterParam()
	vpcRouterUpdateParam                    = params.NewUpdateVPCRouterParam()
	vpcRouterDeleteParam                    = params.NewDeleteVPCRouterParam()
	vpcRouterBootParam                      = params.NewBootVPCRouterParam()
	vpcRouterShutdownParam                  = params.NewShutdownVPCRouterParam()
	vpcRouterShutdownForceParam             = params.NewShutdownForceVPCRouterParam()
	vpcRouterResetParam                     = params.NewResetVPCRouterParam()
	vpcRouterWaitForBootParam               = params.NewWaitForBootVPCRouterParam()
	vpcRouterWaitForDownParam               = params.NewWaitForDownVPCRouterParam()
	vpcRouterEnableInternetConnectionParam  = params.NewEnableInternetConnectionVPCRouterParam()
	vpcRouterDisableInternetConnectionParam = params.NewDisableInternetConnectionVPCRouterParam()
	vpcRouterInterfaceInfoParam             = params.NewInterfaceInfoVPCRouterParam()
	vpcRouterInterfaceConnectParam          = params.NewInterfaceConnectVPCRouterParam()
	vpcRouterInterfaceUpdateParam           = params.NewInterfaceUpdateVPCRouterParam()
	vpcRouterInterfaceDisconnectParam       = params.NewInterfaceDisconnectVPCRouterParam()
	vpcRouterStaticNatInfoParam             = params.NewStaticNatInfoVPCRouterParam()
	vpcRouterStaticNatAddParam              = params.NewStaticNatAddVPCRouterParam()
	vpcRouterStaticNatUpdateParam           = params.NewStaticNatUpdateVPCRouterParam()
	vpcRouterStaticNatDeleteParam           = params.NewStaticNatDeleteVPCRouterParam()
	vpcRouterPortForwardingInfoParam        = params.NewPortForwardingInfoVPCRouterParam()
	vpcRouterPortForwardingAddParam         = params.NewPortForwardingAddVPCRouterParam()
	vpcRouterPortForwardingUpdateParam      = params.NewPortForwardingUpdateVPCRouterParam()
	vpcRouterPortForwardingDeleteParam      = params.NewPortForwardingDeleteVPCRouterParam()
	vpcRouterFirewallInfoParam              = params.NewFirewallInfoVPCRouterParam()
	vpcRouterFirewallAddParam               = params.NewFirewallAddVPCRouterParam()
	vpcRouterFirewallUpdateParam            = params.NewFirewallUpdateVPCRouterParam()
	vpcRouterFirewallDeleteParam            = params.NewFirewallDeleteVPCRouterParam()
	vpcRouterDhcpServerInfoParam            = params.NewDhcpServerInfoVPCRouterParam()
	vpcRouterDhcpServerAddParam             = params.NewDhcpServerAddVPCRouterParam()
	vpcRouterDhcpServerUpdateParam          = params.NewDhcpServerUpdateVPCRouterParam()
	vpcRouterDhcpServerDeleteParam          = params.NewDhcpServerDeleteVPCRouterParam()
	vpcRouterDhcpStaticMappingInfoParam     = params.NewDhcpStaticMappingInfoVPCRouterParam()
	vpcRouterDhcpStaticMappingAddParam      = params.NewDhcpStaticMappingAddVPCRouterParam()
	vpcRouterDhcpStaticMappingUpdateParam   = params.NewDhcpStaticMappingUpdateVPCRouterParam()
	vpcRouterDhcpStaticMappingDeleteParam   = params.NewDhcpStaticMappingDeleteVPCRouterParam()
	vpcRouterPptpServerInfoParam            = params.NewPptpServerInfoVPCRouterParam()
	vpcRouterPptpServerUpdateParam          = params.NewPptpServerUpdateVPCRouterParam()
	vpcRouterL2TPServerInfoParam            = params.NewL2TPServerInfoVPCRouterParam()
	vpcRouterL2TPServerUpdateParam          = params.NewL2TPServerUpdateVPCRouterParam()
	vpcRouterUserInfoParam                  = params.NewUserInfoVPCRouterParam()
	vpcRouterUserAddParam                   = params.NewUserAddVPCRouterParam()
	vpcRouterUserUpdateParam                = params.NewUserUpdateVPCRouterParam()
	vpcRouterUserDeleteParam                = params.NewUserDeleteVPCRouterParam()
	vpcRouterSiteToSiteVPNInfoParam         = params.NewSiteToSiteVPNInfoVPCRouterParam()
	vpcRouterSiteToSiteVPNAddParam          = params.NewSiteToSiteVPNAddVPCRouterParam()
	vpcRouterSiteToSiteVPNUpdateParam       = params.NewSiteToSiteVPNUpdateVPCRouterParam()
	vpcRouterSiteToSiteVPNDeleteParam       = params.NewSiteToSiteVPNDeleteVPCRouterParam()
	vpcRouterSiteToSiteVPNPeersParam        = params.NewSiteToSiteVPNPeersVPCRouterParam()
	vpcRouterStaticRouteInfoParam           = params.NewStaticRouteInfoVPCRouterParam()
	vpcRouterStaticRouteAddParam            = params.NewStaticRouteAddVPCRouterParam()
	vpcRouterStaticRouteUpdateParam         = params.NewStaticRouteUpdateVPCRouterParam()
	vpcRouterStaticRouteDeleteParam         = params.NewStaticRouteDeleteVPCRouterParam()
	vpcRouterMonitorParam                   = params.NewMonitorVPCRouterParam()
	vpcRouterLogsParam                      = params.NewLogsVPCRouterParam()
)

// vpcRouterCmd represents the command to manage SAKURAÂ Cloud VPCRouter
var vpcRouterCmd = &cobra.Command{
	Use:   "vpcRouter",
	Short: "A manage commands of VPCRouter",
	Long:  `A manage commands of VPCRouter`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var vpcRouterListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List VPCRouter",
	Long:    `List VPCRouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(vpcRouterListParam))
		return err
	},
}

func vpcRouterListCmdInit() {
	fs := vpcRouterListCmd.Flags()
	fs.StringSliceVarP(&vpcRouterListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &vpcRouterListParam.Id), "id", "", "set filter by id(s)")
	fs.StringSliceVarP(&vpcRouterListParam.Tags, "tags", "", []string{}, "set filter by tags(AND)")
	fs.IntVarP(&vpcRouterListParam.From, "from", "", 0, "set offset")
	fs.IntVarP(&vpcRouterListParam.Max, "max", "", 0, "set limit")
	fs.StringSliceVarP(&vpcRouterListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringVarP(&vpcRouterListParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterListParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterListParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterListParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterListParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&vpcRouterListParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&vpcRouterListParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&vpcRouterListParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&vpcRouterListParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterListParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterListParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&vpcRouterListParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
}

var vpcRouterCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create VPCRouter",
	Long:  `Create VPCRouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(vpcRouterCreateParam))
		return err
	},
}

func vpcRouterCreateCmdInit() {
	fs := vpcRouterCreateCmd.Flags()
	fs.StringVarP(&vpcRouterCreateParam.Plan, "plan", "", "standard", "set plan[standard/premium/highspec/highspec1600/highspec4000]")
	fs.VarP(newIDValue(0, &vpcRouterCreateParam.SwitchId), "switch-id", "", "set connect switch ID")
	fs.IntVarP(&vpcRouterCreateParam.Vrid, "vrid", "", 1, "set VRID")
	fs.StringVarP(&vpcRouterCreateParam.Vip, "vip", "", "", "set virtual ipddress()")
	fs.StringVarP(&vpcRouterCreateParam.Ipaddress1, "ipaddress-1", "", "", "set ipaddress(#1)")
	fs.StringVarP(&vpcRouterCreateParam.Ipaddress2, "ipaddress-2", "", "", "set ipaddress(#2)")
	fs.BoolVarP(&vpcRouterCreateParam.DisableInternetConnection, "disable-internet-connection", "", false, "disable internet connection from VPCRouter")
	fs.BoolVarP(&vpcRouterCreateParam.BootAfterCreate, "boot-after-create", "", false, "boot after create")
	fs.StringVarP(&vpcRouterCreateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&vpcRouterCreateParam.Description, "description", "", "", "set resource description")
	fs.StringSliceVarP(&vpcRouterCreateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &vpcRouterCreateParam.IconId), "icon-id", "", "set Icon ID")
	fs.BoolVarP(&vpcRouterCreateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterCreateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterCreateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterCreateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterCreateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterCreateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&vpcRouterCreateParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&vpcRouterCreateParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&vpcRouterCreateParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&vpcRouterCreateParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterCreateParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterCreateParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&vpcRouterCreateParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
}

var vpcRouterReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read VPCRouter",
	Long:  `Read VPCRouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(vpcRouterReadParam))
		return err
	},
}

func vpcRouterReadCmdInit() {
	fs := vpcRouterReadCmd.Flags()
	fs.StringSliceVarP(&vpcRouterReadParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&vpcRouterReadParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterReadParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterReadParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterReadParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterReadParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&vpcRouterReadParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&vpcRouterReadParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&vpcRouterReadParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&vpcRouterReadParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterReadParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterReadParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&vpcRouterReadParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &vpcRouterReadParam.Id), "id", "", "Set target ID")
}

var vpcRouterUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update VPCRouter",
	Long:  `Update VPCRouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(vpcRouterUpdateParam))
		return err
	},
}

func vpcRouterUpdateCmdInit() {
	fs := vpcRouterUpdateCmd.Flags()
	fs.StringVarP(&vpcRouterUpdateParam.SyslogHost, "syslog-host", "", "", "set syslog host IPAddress")
	fs.BoolVarP(&vpcRouterUpdateParam.InternetConnection, "internet-connection", "", false, "set internet connection from VPCRouter")
	fs.StringSliceVarP(&vpcRouterUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&vpcRouterUpdateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&vpcRouterUpdateParam.Description, "description", "", "", "set resource description")
	fs.StringSliceVarP(&vpcRouterUpdateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &vpcRouterUpdateParam.IconId), "icon-id", "", "set Icon ID")
	fs.BoolVarP(&vpcRouterUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&vpcRouterUpdateParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&vpcRouterUpdateParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&vpcRouterUpdateParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&vpcRouterUpdateParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterUpdateParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterUpdateParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&vpcRouterUpdateParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &vpcRouterUpdateParam.Id), "id", "", "Set target ID")
}

var vpcRouterDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete VPCRouter",
	Long:    `Delete VPCRouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(vpcRouterDeleteParam))
		return err
	},
}

func vpcRouterDeleteCmdInit() {
	fs := vpcRouterDeleteCmd.Flags()
	fs.BoolVarP(&vpcRouterDeleteParam.Force, "force", "f", false, "forced-shutdown flag if server is running")
	fs.StringSliceVarP(&vpcRouterDeleteParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterDeleteParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterDeleteParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterDeleteParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterDeleteParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterDeleteParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterDeleteParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&vpcRouterDeleteParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&vpcRouterDeleteParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&vpcRouterDeleteParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&vpcRouterDeleteParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterDeleteParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterDeleteParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&vpcRouterDeleteParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &vpcRouterDeleteParam.Id), "id", "", "Set target ID")
}

var vpcRouterBootCmd = &cobra.Command{
	Use:     "boot",
	Aliases: []string{"power-on"},
	Short:   "Boot VPCRouter",
	Long:    `Boot VPCRouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterBootParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("boot parameter: \n%s\n", debugMarshalIndent(vpcRouterBootParam))
		return err
	},
}

func vpcRouterBootCmdInit() {
	fs := vpcRouterBootCmd.Flags()
	fs.StringSliceVarP(&vpcRouterBootParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterBootParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterBootParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterBootParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterBootParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterBootParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterBootParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterBootParam.Id), "id", "", "Set target ID")
}

var vpcRouterShutdownCmd = &cobra.Command{
	Use:     "shutdown",
	Aliases: []string{"power-off"},
	Short:   "Shutdown VPCRouter",
	Long:    `Shutdown VPCRouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterShutdownParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("shutdown parameter: \n%s\n", debugMarshalIndent(vpcRouterShutdownParam))
		return err
	},
}

func vpcRouterShutdownCmdInit() {
	fs := vpcRouterShutdownCmd.Flags()
	fs.StringSliceVarP(&vpcRouterShutdownParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterShutdownParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterShutdownParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterShutdownParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterShutdownParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterShutdownParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterShutdownParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterShutdownParam.Id), "id", "", "Set target ID")
}

var vpcRouterShutdownForceCmd = &cobra.Command{
	Use:     "shutdown-force",
	Aliases: []string{"stop"},
	Short:   "ShutdownForce VPCRouter",
	Long:    `ShutdownForce VPCRouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterShutdownForceParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("shutdown-force parameter: \n%s\n", debugMarshalIndent(vpcRouterShutdownForceParam))
		return err
	},
}

func vpcRouterShutdownForceCmdInit() {
	fs := vpcRouterShutdownForceCmd.Flags()
	fs.StringSliceVarP(&vpcRouterShutdownForceParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterShutdownForceParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterShutdownForceParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterShutdownForceParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterShutdownForceParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterShutdownForceParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterShutdownForceParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterShutdownForceParam.Id), "id", "", "Set target ID")
}

var vpcRouterResetCmd = &cobra.Command{
	Use: "reset",

	Short: "Reset VPCRouter",
	Long:  `Reset VPCRouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterResetParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("reset parameter: \n%s\n", debugMarshalIndent(vpcRouterResetParam))
		return err
	},
}

func vpcRouterResetCmdInit() {
	fs := vpcRouterResetCmd.Flags()
	fs.StringSliceVarP(&vpcRouterResetParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterResetParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterResetParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterResetParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterResetParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterResetParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterResetParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterResetParam.Id), "id", "", "Set target ID")
}

var vpcRouterWaitForBootCmd = &cobra.Command{
	Use: "wait-for-boot",

	Short: "Wait until boot is completed",
	Long:  `Wait until boot is completed`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterWaitForBootParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("wait-for-boot parameter: \n%s\n", debugMarshalIndent(vpcRouterWaitForBootParam))
		return err
	},
}

func vpcRouterWaitForBootCmdInit() {
	fs := vpcRouterWaitForBootCmd.Flags()
	fs.StringSliceVarP(&vpcRouterWaitForBootParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&vpcRouterWaitForBootParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterWaitForBootParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterWaitForBootParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterWaitForBootParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterWaitForBootParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterWaitForBootParam.Id), "id", "", "Set target ID")
}

var vpcRouterWaitForDownCmd = &cobra.Command{
	Use: "wait-for-down",

	Short: "Wait until shutdown is completed",
	Long:  `Wait until shutdown is completed`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterWaitForDownParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("wait-for-down parameter: \n%s\n", debugMarshalIndent(vpcRouterWaitForDownParam))
		return err
	},
}

func vpcRouterWaitForDownCmdInit() {
	fs := vpcRouterWaitForDownCmd.Flags()
	fs.StringSliceVarP(&vpcRouterWaitForDownParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&vpcRouterWaitForDownParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterWaitForDownParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterWaitForDownParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterWaitForDownParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterWaitForDownParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterWaitForDownParam.Id), "id", "", "Set target ID")
}

var vpcRouterEnableInternetConnectionCmd = &cobra.Command{
	Use: "enable-internet-connection",

	Short: "Enable internet connection from VPCRouter",
	Long:  `Enable internet connection from VPCRouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterEnableInternetConnectionParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("enable-internet-connection parameter: \n%s\n", debugMarshalIndent(vpcRouterEnableInternetConnectionParam))
		return err
	},
}

func vpcRouterEnableInternetConnectionCmdInit() {
	fs := vpcRouterEnableInternetConnectionCmd.Flags()
	fs.StringSliceVarP(&vpcRouterEnableInternetConnectionParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterEnableInternetConnectionParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterEnableInternetConnectionParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterEnableInternetConnectionParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterEnableInternetConnectionParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterEnableInternetConnectionParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterEnableInternetConnectionParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterEnableInternetConnectionParam.Id), "id", "", "Set target ID")
}

var vpcRouterDisableInternetConnectionCmd = &cobra.Command{
	Use: "disable-internet-connection",

	Short: "Enable internet connection from VPCRouter",
	Long:  `Enable internet connection from VPCRouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterDisableInternetConnectionParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("disable-internet-connection parameter: \n%s\n", debugMarshalIndent(vpcRouterDisableInternetConnectionParam))
		return err
	},
}

func vpcRouterDisableInternetConnectionCmdInit() {
	fs := vpcRouterDisableInternetConnectionCmd.Flags()
	fs.StringSliceVarP(&vpcRouterDisableInternetConnectionParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterDisableInternetConnectionParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterDisableInternetConnectionParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterDisableInternetConnectionParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterDisableInternetConnectionParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterDisableInternetConnectionParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterDisableInternetConnectionParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterDisableInternetConnectionParam.Id), "id", "", "Set target ID")
}

var vpcRouterInterfaceInfoCmd = &cobra.Command{
	Use:     "interface-info",
	Aliases: []string{"interface-list"},
	Short:   "Show information of NIC(s) connected to vpc-router",
	Long:    `Show information of NIC(s) connected to vpc-router`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterInterfaceInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-info parameter: \n%s\n", debugMarshalIndent(vpcRouterInterfaceInfoParam))
		return err
	},
}

func vpcRouterInterfaceInfoCmdInit() {
	fs := vpcRouterInterfaceInfoCmd.Flags()
	fs.StringSliceVarP(&vpcRouterInterfaceInfoParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&vpcRouterInterfaceInfoParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterInterfaceInfoParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterInterfaceInfoParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterInterfaceInfoParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterInterfaceInfoParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&vpcRouterInterfaceInfoParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&vpcRouterInterfaceInfoParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&vpcRouterInterfaceInfoParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&vpcRouterInterfaceInfoParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterInterfaceInfoParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterInterfaceInfoParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&vpcRouterInterfaceInfoParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &vpcRouterInterfaceInfoParam.Id), "id", "", "Set target ID")
}

var vpcRouterInterfaceConnectCmd = &cobra.Command{
	Use: "interface-connect",

	Short: "Connected to switch",
	Long:  `Connected to switch`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterInterfaceConnectParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-connect parameter: \n%s\n", debugMarshalIndent(vpcRouterInterfaceConnectParam))
		return err
	},
}

func vpcRouterInterfaceConnectCmdInit() {
	fs := vpcRouterInterfaceConnectCmd.Flags()
	fs.StringVarP(&vpcRouterInterfaceConnectParam.Interface, "interface", "", "", "index of target private-interface")
	fs.StringVarP(&vpcRouterInterfaceConnectParam.Ipaddress, "ipaddress", "", "", "set (virtual)ipaddress")
	fs.BoolVarP(&vpcRouterInterfaceConnectParam.WithReboot, "with-reboot", "", false, "reboot after connect")
	fs.StringVarP(&vpcRouterInterfaceConnectParam.Ipaddress1, "ipaddress-1", "", "", "set ipaddress(#1)")
	fs.VarP(newIDValue(0, &vpcRouterInterfaceConnectParam.SwitchId), "switch-id", "", "set connect switch ID")
	fs.StringVarP(&vpcRouterInterfaceConnectParam.Ipaddress2, "ipaddress-2", "", "", "set ipaddress(#2)")
	fs.IntVarP(&vpcRouterInterfaceConnectParam.NwMasklen, "nw-masklen", "", 24, "set ipaddress prefix")
	fs.StringSliceVarP(&vpcRouterInterfaceConnectParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterInterfaceConnectParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterInterfaceConnectParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterInterfaceConnectParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterInterfaceConnectParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterInterfaceConnectParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterInterfaceConnectParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterInterfaceConnectParam.Id), "id", "", "Set target ID")
}

var vpcRouterInterfaceUpdateCmd = &cobra.Command{
	Use: "interface-update",

	Short: "Update interface",
	Long:  `Update interface`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterInterfaceUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-update parameter: \n%s\n", debugMarshalIndent(vpcRouterInterfaceUpdateParam))
		return err
	},
}

func vpcRouterInterfaceUpdateCmdInit() {
	fs := vpcRouterInterfaceUpdateCmd.Flags()
	fs.StringVarP(&vpcRouterInterfaceUpdateParam.Interface, "interface", "", "", "index of target interface")
	fs.StringVarP(&vpcRouterInterfaceUpdateParam.Ipaddress, "ipaddress", "", "", "set (virtual)ipaddress")
	fs.BoolVarP(&vpcRouterInterfaceUpdateParam.WithReboot, "with-reboot", "", false, "reboot after connect")
	fs.StringVarP(&vpcRouterInterfaceUpdateParam.Ipaddress1, "ipaddress-1", "", "", "set ipaddress(#1)")
	fs.VarP(newIDValue(0, &vpcRouterInterfaceUpdateParam.SwitchId), "switch-id", "", "set connect switch ID")
	fs.StringVarP(&vpcRouterInterfaceUpdateParam.Ipaddress2, "ipaddress-2", "", "", "set ipaddress(#2)")
	fs.StringSliceVarP(&vpcRouterInterfaceUpdateParam.Alias, "alias", "", []string{}, "set ip aliases")
	fs.IntVarP(&vpcRouterInterfaceUpdateParam.NwMasklen, "nw-masklen", "", 24, "set ipaddress prefix")
	fs.StringSliceVarP(&vpcRouterInterfaceUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterInterfaceUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterInterfaceUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterInterfaceUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterInterfaceUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterInterfaceUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterInterfaceUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterInterfaceUpdateParam.Id), "id", "", "Set target ID")
}

var vpcRouterInterfaceDisconnectCmd = &cobra.Command{
	Use: "interface-disconnect",

	Short: "Disconnected to switch",
	Long:  `Disconnected to switch`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterInterfaceDisconnectParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-disconnect parameter: \n%s\n", debugMarshalIndent(vpcRouterInterfaceDisconnectParam))
		return err
	},
}

func vpcRouterInterfaceDisconnectCmdInit() {
	fs := vpcRouterInterfaceDisconnectCmd.Flags()
	fs.StringVarP(&vpcRouterInterfaceDisconnectParam.Interface, "interface", "", "", "index of target private-interface")
	fs.BoolVarP(&vpcRouterInterfaceDisconnectParam.WithReboot, "with-reboot", "", false, "reboot after connect")
	fs.StringSliceVarP(&vpcRouterInterfaceDisconnectParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterInterfaceDisconnectParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterInterfaceDisconnectParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterInterfaceDisconnectParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterInterfaceDisconnectParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterInterfaceDisconnectParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterInterfaceDisconnectParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterInterfaceDisconnectParam.Id), "id", "", "Set target ID")
}

var vpcRouterStaticNatInfoCmd = &cobra.Command{
	Use:     "static-nat-info",
	Aliases: []string{"static-nat-list"},
	Short:   "Show information of static NAT settings",
	Long:    `Show information of static NAT settings`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterStaticNatInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-nat-info parameter: \n%s\n", debugMarshalIndent(vpcRouterStaticNatInfoParam))
		return err
	},
}

func vpcRouterStaticNatInfoCmdInit() {
	fs := vpcRouterStaticNatInfoCmd.Flags()
	fs.StringSliceVarP(&vpcRouterStaticNatInfoParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&vpcRouterStaticNatInfoParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterStaticNatInfoParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterStaticNatInfoParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterStaticNatInfoParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterStaticNatInfoParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&vpcRouterStaticNatInfoParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&vpcRouterStaticNatInfoParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&vpcRouterStaticNatInfoParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&vpcRouterStaticNatInfoParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterStaticNatInfoParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterStaticNatInfoParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&vpcRouterStaticNatInfoParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &vpcRouterStaticNatInfoParam.Id), "id", "", "Set target ID")
}

var vpcRouterStaticNatAddCmd = &cobra.Command{
	Use: "static-nat-add",

	Short: "Add static NAT",
	Long:  `Add static NAT`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterStaticNatAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-nat-add parameter: \n%s\n", debugMarshalIndent(vpcRouterStaticNatAddParam))
		return err
	},
}

func vpcRouterStaticNatAddCmdInit() {
	fs := vpcRouterStaticNatAddCmd.Flags()
	fs.StringVarP(&vpcRouterStaticNatAddParam.Global, "global", "", "", "set global ipaddress")
	fs.StringVarP(&vpcRouterStaticNatAddParam.Private, "private", "", "", "set private ipaddress")
	fs.StringVarP(&vpcRouterStaticNatAddParam.Description, "description", "", "", "set description")
	fs.StringSliceVarP(&vpcRouterStaticNatAddParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterStaticNatAddParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterStaticNatAddParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterStaticNatAddParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterStaticNatAddParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterStaticNatAddParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterStaticNatAddParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterStaticNatAddParam.Id), "id", "", "Set target ID")
}

var vpcRouterStaticNatUpdateCmd = &cobra.Command{
	Use: "static-nat-update",

	Short: "Update static NAT",
	Long:  `Update static NAT`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterStaticNatUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-nat-update parameter: \n%s\n", debugMarshalIndent(vpcRouterStaticNatUpdateParam))
		return err
	},
}

func vpcRouterStaticNatUpdateCmdInit() {
	fs := vpcRouterStaticNatUpdateCmd.Flags()
	fs.IntVarP(&vpcRouterStaticNatUpdateParam.Index, "index", "", 0, "index of target static NAT")
	fs.StringVarP(&vpcRouterStaticNatUpdateParam.Global, "global", "", "", "set global ipaddress")
	fs.StringVarP(&vpcRouterStaticNatUpdateParam.Private, "private", "", "", "set private ipaddress")
	fs.StringVarP(&vpcRouterStaticNatUpdateParam.Description, "description", "", "", "set description")
	fs.StringSliceVarP(&vpcRouterStaticNatUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterStaticNatUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterStaticNatUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterStaticNatUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterStaticNatUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterStaticNatUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterStaticNatUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterStaticNatUpdateParam.Id), "id", "", "Set target ID")
}

var vpcRouterStaticNatDeleteCmd = &cobra.Command{
	Use: "static-nat-delete",

	Short: "Delete static NAT",
	Long:  `Delete static NAT`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterStaticNatDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-nat-delete parameter: \n%s\n", debugMarshalIndent(vpcRouterStaticNatDeleteParam))
		return err
	},
}

func vpcRouterStaticNatDeleteCmdInit() {
	fs := vpcRouterStaticNatDeleteCmd.Flags()
	fs.IntVarP(&vpcRouterStaticNatDeleteParam.Index, "index", "", 0, "index of target static NAT")
	fs.StringSliceVarP(&vpcRouterStaticNatDeleteParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterStaticNatDeleteParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterStaticNatDeleteParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterStaticNatDeleteParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterStaticNatDeleteParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterStaticNatDeleteParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterStaticNatDeleteParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterStaticNatDeleteParam.Id), "id", "", "Set target ID")
}

var vpcRouterPortForwardingInfoCmd = &cobra.Command{
	Use:     "port-forwarding-info",
	Aliases: []string{"port-forwarding-list"},
	Short:   "Show information of port-forwarding settings",
	Long:    `Show information of port-forwarding settings`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterPortForwardingInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("port-forwarding-info parameter: \n%s\n", debugMarshalIndent(vpcRouterPortForwardingInfoParam))
		return err
	},
}

func vpcRouterPortForwardingInfoCmdInit() {
	fs := vpcRouterPortForwardingInfoCmd.Flags()
	fs.StringSliceVarP(&vpcRouterPortForwardingInfoParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&vpcRouterPortForwardingInfoParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterPortForwardingInfoParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterPortForwardingInfoParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterPortForwardingInfoParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterPortForwardingInfoParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&vpcRouterPortForwardingInfoParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&vpcRouterPortForwardingInfoParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&vpcRouterPortForwardingInfoParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&vpcRouterPortForwardingInfoParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterPortForwardingInfoParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterPortForwardingInfoParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&vpcRouterPortForwardingInfoParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &vpcRouterPortForwardingInfoParam.Id), "id", "", "Set target ID")
}

var vpcRouterPortForwardingAddCmd = &cobra.Command{
	Use: "port-forwarding-add",

	Short: "Add port forwarding",
	Long:  `Add port forwarding`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterPortForwardingAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("port-forwarding-add parameter: \n%s\n", debugMarshalIndent(vpcRouterPortForwardingAddParam))
		return err
	},
}

func vpcRouterPortForwardingAddCmdInit() {
	fs := vpcRouterPortForwardingAddCmd.Flags()
	fs.StringVarP(&vpcRouterPortForwardingAddParam.Protocol, "protocol", "", "", "set target protocol")
	fs.IntVarP(&vpcRouterPortForwardingAddParam.GlobalPort, "global-port", "", 0, "set global ipaddress")
	fs.StringVarP(&vpcRouterPortForwardingAddParam.PrivateIpaddress, "private-ipaddress", "", "", "set private ipaddress")
	fs.IntVarP(&vpcRouterPortForwardingAddParam.PrivatePort, "private-port", "", 0, "set private ipaddress")
	fs.StringVarP(&vpcRouterPortForwardingAddParam.Description, "description", "", "", "set description")
	fs.StringSliceVarP(&vpcRouterPortForwardingAddParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterPortForwardingAddParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterPortForwardingAddParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterPortForwardingAddParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterPortForwardingAddParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterPortForwardingAddParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterPortForwardingAddParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterPortForwardingAddParam.Id), "id", "", "Set target ID")
}

var vpcRouterPortForwardingUpdateCmd = &cobra.Command{
	Use: "port-forwarding-update",

	Short: "Update port forwarding",
	Long:  `Update port forwarding`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterPortForwardingUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("port-forwarding-update parameter: \n%s\n", debugMarshalIndent(vpcRouterPortForwardingUpdateParam))
		return err
	},
}

func vpcRouterPortForwardingUpdateCmdInit() {
	fs := vpcRouterPortForwardingUpdateCmd.Flags()
	fs.IntVarP(&vpcRouterPortForwardingUpdateParam.Index, "index", "", 0, "index of target PortForward")
	fs.StringVarP(&vpcRouterPortForwardingUpdateParam.Protocol, "protocol", "", "", "set target protocol")
	fs.IntVarP(&vpcRouterPortForwardingUpdateParam.GlobalPort, "global-port", "", 0, "set global ipaddress")
	fs.StringVarP(&vpcRouterPortForwardingUpdateParam.PrivateIpaddress, "private-ipaddress", "", "", "set private ipaddress")
	fs.IntVarP(&vpcRouterPortForwardingUpdateParam.PrivatePort, "private-port", "", 0, "set private ipaddress")
	fs.StringVarP(&vpcRouterPortForwardingUpdateParam.Description, "description", "", "", "set description")
	fs.StringSliceVarP(&vpcRouterPortForwardingUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterPortForwardingUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterPortForwardingUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterPortForwardingUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterPortForwardingUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterPortForwardingUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterPortForwardingUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterPortForwardingUpdateParam.Id), "id", "", "Set target ID")
}

var vpcRouterPortForwardingDeleteCmd = &cobra.Command{
	Use: "port-forwarding-delete",

	Short: "Delete port forwarding",
	Long:  `Delete port forwarding`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterPortForwardingDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("port-forwarding-delete parameter: \n%s\n", debugMarshalIndent(vpcRouterPortForwardingDeleteParam))
		return err
	},
}

func vpcRouterPortForwardingDeleteCmdInit() {
	fs := vpcRouterPortForwardingDeleteCmd.Flags()
	fs.IntVarP(&vpcRouterPortForwardingDeleteParam.Index, "index", "", 0, "index of target PortForward")
	fs.StringSliceVarP(&vpcRouterPortForwardingDeleteParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterPortForwardingDeleteParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterPortForwardingDeleteParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterPortForwardingDeleteParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterPortForwardingDeleteParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterPortForwardingDeleteParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterPortForwardingDeleteParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterPortForwardingDeleteParam.Id), "id", "", "Set target ID")
}

var vpcRouterFirewallInfoCmd = &cobra.Command{
	Use:     "firewall-info",
	Aliases: []string{"firewall-list"},
	Short:   "Show information of firewall rules",
	Long:    `Show information of firewall rules`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterFirewallInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("firewall-info parameter: \n%s\n", debugMarshalIndent(vpcRouterFirewallInfoParam))
		return err
	},
}

func vpcRouterFirewallInfoCmdInit() {
	fs := vpcRouterFirewallInfoCmd.Flags()
	fs.IntVarP(&vpcRouterFirewallInfoParam.Interface, "interface", "", 0, "set target NIC index")
	fs.StringVarP(&vpcRouterFirewallInfoParam.Direction, "direction", "", "receive", "set target direction[send/receive]")
	fs.StringSliceVarP(&vpcRouterFirewallInfoParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&vpcRouterFirewallInfoParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterFirewallInfoParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterFirewallInfoParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterFirewallInfoParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterFirewallInfoParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&vpcRouterFirewallInfoParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&vpcRouterFirewallInfoParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&vpcRouterFirewallInfoParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&vpcRouterFirewallInfoParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterFirewallInfoParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterFirewallInfoParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&vpcRouterFirewallInfoParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &vpcRouterFirewallInfoParam.Id), "id", "", "Set target ID")
}

var vpcRouterFirewallAddCmd = &cobra.Command{
	Use: "firewall-add",

	Short: "Add firewall rule",
	Long:  `Add firewall rule`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterFirewallAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("firewall-add parameter: \n%s\n", debugMarshalIndent(vpcRouterFirewallAddParam))
		return err
	},
}

func vpcRouterFirewallAddCmdInit() {
	fs := vpcRouterFirewallAddCmd.Flags()
	fs.IntVarP(&vpcRouterFirewallAddParam.Interface, "interface", "", 0, "set target NIC index")
	fs.StringVarP(&vpcRouterFirewallAddParam.Direction, "direction", "", "receive", "set target direction[send/receive]")
	fs.StringVarP(&vpcRouterFirewallAddParam.Protocol, "protocol", "", "", "set target protocol")
	fs.StringVarP(&vpcRouterFirewallAddParam.SourceNetwork, "source-network", "", "", "set source ipaddress or network address")
	fs.IntVarP(&vpcRouterFirewallAddParam.SourcePort, "source-port", "", 0, "set source port")
	fs.StringVarP(&vpcRouterFirewallAddParam.DestinationNetwork, "destination-network", "", "", "set destination ipaddress or network address")
	fs.IntVarP(&vpcRouterFirewallAddParam.DestinationPort, "destination-port", "", 0, "set destination port")
	fs.StringVarP(&vpcRouterFirewallAddParam.Action, "action", "", "deny", "set action[allow/deny]")
	fs.BoolVarP(&vpcRouterFirewallAddParam.EnableLogging, "enable-logging", "", false, "enable logging")
	fs.StringVarP(&vpcRouterFirewallAddParam.Description, "description", "", "", "set description")
	fs.StringSliceVarP(&vpcRouterFirewallAddParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterFirewallAddParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterFirewallAddParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterFirewallAddParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterFirewallAddParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterFirewallAddParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterFirewallAddParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterFirewallAddParam.Id), "id", "", "Set target ID")
}

var vpcRouterFirewallUpdateCmd = &cobra.Command{
	Use: "firewall-update",

	Short: "Update firewall rule",
	Long:  `Update firewall rule`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterFirewallUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("firewall-update parameter: \n%s\n", debugMarshalIndent(vpcRouterFirewallUpdateParam))
		return err
	},
}

func vpcRouterFirewallUpdateCmdInit() {
	fs := vpcRouterFirewallUpdateCmd.Flags()
	fs.IntVarP(&vpcRouterFirewallUpdateParam.Interface, "interface", "", 0, "set target NIC index")
	fs.StringVarP(&vpcRouterFirewallUpdateParam.Direction, "direction", "", "receive", "set target direction[send/receive]")
	fs.IntVarP(&vpcRouterFirewallUpdateParam.Index, "index", "", 0, "index of target Firewall rule")
	fs.StringVarP(&vpcRouterFirewallUpdateParam.Protocol, "protocol", "", "", "set target protocol")
	fs.StringVarP(&vpcRouterFirewallUpdateParam.SourceNetwork, "source-network", "", "", "set source ipaddress or network address")
	fs.IntVarP(&vpcRouterFirewallUpdateParam.SourcePort, "source-port", "", 0, "set source port")
	fs.StringVarP(&vpcRouterFirewallUpdateParam.DestinationNetwork, "destination-network", "", "", "set destination ipaddress or network address")
	fs.IntVarP(&vpcRouterFirewallUpdateParam.DestinationPort, "destination-port", "", 0, "set destination port")
	fs.StringVarP(&vpcRouterFirewallUpdateParam.Action, "action", "", "deny", "set action[allow/deny]")
	fs.BoolVarP(&vpcRouterFirewallUpdateParam.EnableLogging, "enable-logging", "", false, "enable logging")
	fs.StringVarP(&vpcRouterFirewallUpdateParam.Description, "description", "", "", "set description")
	fs.StringSliceVarP(&vpcRouterFirewallUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterFirewallUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterFirewallUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterFirewallUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterFirewallUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterFirewallUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterFirewallUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterFirewallUpdateParam.Id), "id", "", "Set target ID")
}

var vpcRouterFirewallDeleteCmd = &cobra.Command{
	Use: "firewall-delete",

	Short: "Delete firewall rule",
	Long:  `Delete firewall rule`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterFirewallDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("firewall-delete parameter: \n%s\n", debugMarshalIndent(vpcRouterFirewallDeleteParam))
		return err
	},
}

func vpcRouterFirewallDeleteCmdInit() {
	fs := vpcRouterFirewallDeleteCmd.Flags()
	fs.IntVarP(&vpcRouterFirewallDeleteParam.Interface, "interface", "", 0, "set target NIC index")
	fs.StringVarP(&vpcRouterFirewallDeleteParam.Direction, "direction", "", "receive", "set target direction[send/receive]")
	fs.IntVarP(&vpcRouterFirewallDeleteParam.Index, "index", "", 0, "index of target Firewall rule")
	fs.StringSliceVarP(&vpcRouterFirewallDeleteParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterFirewallDeleteParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterFirewallDeleteParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterFirewallDeleteParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterFirewallDeleteParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterFirewallDeleteParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterFirewallDeleteParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterFirewallDeleteParam.Id), "id", "", "Set target ID")
}

var vpcRouterDhcpServerInfoCmd = &cobra.Command{
	Use:     "dhcp-server-info",
	Aliases: []string{"dhcp-server-list"},
	Short:   "Show information of DHCP servers",
	Long:    `Show information of DHCP servers`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterDhcpServerInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-server-info parameter: \n%s\n", debugMarshalIndent(vpcRouterDhcpServerInfoParam))
		return err
	},
}

func vpcRouterDhcpServerInfoCmdInit() {
	fs := vpcRouterDhcpServerInfoCmd.Flags()
	fs.StringSliceVarP(&vpcRouterDhcpServerInfoParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&vpcRouterDhcpServerInfoParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterDhcpServerInfoParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterDhcpServerInfoParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterDhcpServerInfoParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterDhcpServerInfoParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&vpcRouterDhcpServerInfoParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&vpcRouterDhcpServerInfoParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&vpcRouterDhcpServerInfoParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&vpcRouterDhcpServerInfoParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterDhcpServerInfoParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterDhcpServerInfoParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&vpcRouterDhcpServerInfoParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &vpcRouterDhcpServerInfoParam.Id), "id", "", "Set target ID")
}

var vpcRouterDhcpServerAddCmd = &cobra.Command{
	Use: "dhcp-server-add",

	Short: "Add DHCP server",
	Long:  `Add DHCP server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterDhcpServerAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-server-add parameter: \n%s\n", debugMarshalIndent(vpcRouterDhcpServerAddParam))
		return err
	},
}

func vpcRouterDhcpServerAddCmdInit() {
	fs := vpcRouterDhcpServerAddCmd.Flags()
	fs.IntVarP(&vpcRouterDhcpServerAddParam.Interface, "interface", "", 0, "set target NIC(private NIC index)")
	fs.StringVarP(&vpcRouterDhcpServerAddParam.RangeStart, "range-start", "", "", "set DHCP IPAddress Range(start)")
	fs.StringVarP(&vpcRouterDhcpServerAddParam.RangeStop, "range-stop", "", "", "set DHCP IPAddress Range(stop)")
	fs.StringSliceVarP(&vpcRouterDhcpServerAddParam.DNSServers, "dns-servers", "", []string{}, "set DNS Server IPAddress")
	fs.StringSliceVarP(&vpcRouterDhcpServerAddParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterDhcpServerAddParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterDhcpServerAddParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterDhcpServerAddParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterDhcpServerAddParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterDhcpServerAddParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterDhcpServerAddParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterDhcpServerAddParam.Id), "id", "", "Set target ID")
}

var vpcRouterDhcpServerUpdateCmd = &cobra.Command{
	Use: "dhcp-server-update",

	Short: "Update DHCP server",
	Long:  `Update DHCP server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterDhcpServerUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-server-update parameter: \n%s\n", debugMarshalIndent(vpcRouterDhcpServerUpdateParam))
		return err
	},
}

func vpcRouterDhcpServerUpdateCmdInit() {
	fs := vpcRouterDhcpServerUpdateCmd.Flags()
	fs.IntVarP(&vpcRouterDhcpServerUpdateParam.Interface, "interface", "", 0, "set target NIC(private NIC index)")
	fs.StringVarP(&vpcRouterDhcpServerUpdateParam.RangeStart, "range-start", "", "", "set DHCP IPAddress Range(start)")
	fs.StringVarP(&vpcRouterDhcpServerUpdateParam.RangeStop, "range-stop", "", "", "set DHCP IPAddress Range(stop)")
	fs.StringSliceVarP(&vpcRouterDhcpServerUpdateParam.DNSServers, "dns-servers", "", []string{}, "set DNS Server IPAddress")
	fs.StringSliceVarP(&vpcRouterDhcpServerUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterDhcpServerUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterDhcpServerUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterDhcpServerUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterDhcpServerUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterDhcpServerUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterDhcpServerUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterDhcpServerUpdateParam.Id), "id", "", "Set target ID")
}

var vpcRouterDhcpServerDeleteCmd = &cobra.Command{
	Use: "dhcp-server-delete",

	Short: "Delete DHCP server",
	Long:  `Delete DHCP server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterDhcpServerDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-server-delete parameter: \n%s\n", debugMarshalIndent(vpcRouterDhcpServerDeleteParam))
		return err
	},
}

func vpcRouterDhcpServerDeleteCmdInit() {
	fs := vpcRouterDhcpServerDeleteCmd.Flags()
	fs.IntVarP(&vpcRouterDhcpServerDeleteParam.Interface, "interface", "", 0, "set target NIC(private NIC index)")
	fs.StringSliceVarP(&vpcRouterDhcpServerDeleteParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterDhcpServerDeleteParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterDhcpServerDeleteParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterDhcpServerDeleteParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterDhcpServerDeleteParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterDhcpServerDeleteParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterDhcpServerDeleteParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterDhcpServerDeleteParam.Id), "id", "", "Set target ID")
}

var vpcRouterDhcpStaticMappingInfoCmd = &cobra.Command{
	Use:     "dhcp-static-mapping-info",
	Aliases: []string{"dhcp-static-mapping-list"},
	Short:   "Show information of DHCP static mapping",
	Long:    `Show information of DHCP static mapping`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterDhcpStaticMappingInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-static-mapping-info parameter: \n%s\n", debugMarshalIndent(vpcRouterDhcpStaticMappingInfoParam))
		return err
	},
}

func vpcRouterDhcpStaticMappingInfoCmdInit() {
	fs := vpcRouterDhcpStaticMappingInfoCmd.Flags()
	fs.StringSliceVarP(&vpcRouterDhcpStaticMappingInfoParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&vpcRouterDhcpStaticMappingInfoParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterDhcpStaticMappingInfoParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterDhcpStaticMappingInfoParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterDhcpStaticMappingInfoParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterDhcpStaticMappingInfoParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&vpcRouterDhcpStaticMappingInfoParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&vpcRouterDhcpStaticMappingInfoParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&vpcRouterDhcpStaticMappingInfoParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&vpcRouterDhcpStaticMappingInfoParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterDhcpStaticMappingInfoParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterDhcpStaticMappingInfoParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&vpcRouterDhcpStaticMappingInfoParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &vpcRouterDhcpStaticMappingInfoParam.Id), "id", "", "Set target ID")
}

var vpcRouterDhcpStaticMappingAddCmd = &cobra.Command{
	Use: "dhcp-static-mapping-add",

	Short: "Add DHCP static mapping",
	Long:  `Add DHCP static mapping`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterDhcpStaticMappingAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-static-mapping-add parameter: \n%s\n", debugMarshalIndent(vpcRouterDhcpStaticMappingAddParam))
		return err
	},
}

func vpcRouterDhcpStaticMappingAddCmdInit() {
	fs := vpcRouterDhcpStaticMappingAddCmd.Flags()
	fs.StringVarP(&vpcRouterDhcpStaticMappingAddParam.Macaddress, "macaddress", "", "", "set mac address")
	fs.StringVarP(&vpcRouterDhcpStaticMappingAddParam.Ipaddress, "ipaddress", "", "", "set ipaddress")
	fs.StringSliceVarP(&vpcRouterDhcpStaticMappingAddParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterDhcpStaticMappingAddParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterDhcpStaticMappingAddParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterDhcpStaticMappingAddParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterDhcpStaticMappingAddParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterDhcpStaticMappingAddParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterDhcpStaticMappingAddParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterDhcpStaticMappingAddParam.Id), "id", "", "Set target ID")
}

var vpcRouterDhcpStaticMappingUpdateCmd = &cobra.Command{
	Use: "dhcp-static-mapping-update",

	Short: "Update DHCP static mapping",
	Long:  `Update DHCP static mapping`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterDhcpStaticMappingUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-static-mapping-update parameter: \n%s\n", debugMarshalIndent(vpcRouterDhcpStaticMappingUpdateParam))
		return err
	},
}

func vpcRouterDhcpStaticMappingUpdateCmdInit() {
	fs := vpcRouterDhcpStaticMappingUpdateCmd.Flags()
	fs.IntVarP(&vpcRouterDhcpStaticMappingUpdateParam.Index, "index", "", 0, "index of target DHCP static mapping")
	fs.StringVarP(&vpcRouterDhcpStaticMappingUpdateParam.Macaddress, "macaddress", "", "", "set mac address")
	fs.StringVarP(&vpcRouterDhcpStaticMappingUpdateParam.Ipaddress, "ipaddress", "", "", "set ipaddress")
	fs.StringSliceVarP(&vpcRouterDhcpStaticMappingUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterDhcpStaticMappingUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterDhcpStaticMappingUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterDhcpStaticMappingUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterDhcpStaticMappingUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterDhcpStaticMappingUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterDhcpStaticMappingUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterDhcpStaticMappingUpdateParam.Id), "id", "", "Set target ID")
}

var vpcRouterDhcpStaticMappingDeleteCmd = &cobra.Command{
	Use: "dhcp-static-mapping-delete",

	Short: "Delete DHCP static mapping",
	Long:  `Delete DHCP static mapping`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterDhcpStaticMappingDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-static-mapping-delete parameter: \n%s\n", debugMarshalIndent(vpcRouterDhcpStaticMappingDeleteParam))
		return err
	},
}

func vpcRouterDhcpStaticMappingDeleteCmdInit() {
	fs := vpcRouterDhcpStaticMappingDeleteCmd.Flags()
	fs.IntVarP(&vpcRouterDhcpStaticMappingDeleteParam.Index, "index", "", 0, "index of target DHCP static mapping")
	fs.StringSliceVarP(&vpcRouterDhcpStaticMappingDeleteParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterDhcpStaticMappingDeleteParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterDhcpStaticMappingDeleteParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterDhcpStaticMappingDeleteParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterDhcpStaticMappingDeleteParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterDhcpStaticMappingDeleteParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterDhcpStaticMappingDeleteParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterDhcpStaticMappingDeleteParam.Id), "id", "", "Set target ID")
}

var vpcRouterPptpServerInfoCmd = &cobra.Command{
	Use: "pptp-server-info",

	Short: "Show information of PPTP server",
	Long:  `Show information of PPTP server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterPptpServerInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("pptp-server-info parameter: \n%s\n", debugMarshalIndent(vpcRouterPptpServerInfoParam))
		return err
	},
}

func vpcRouterPptpServerInfoCmdInit() {
	fs := vpcRouterPptpServerInfoCmd.Flags()
	fs.StringSliceVarP(&vpcRouterPptpServerInfoParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&vpcRouterPptpServerInfoParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterPptpServerInfoParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterPptpServerInfoParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterPptpServerInfoParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterPptpServerInfoParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&vpcRouterPptpServerInfoParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&vpcRouterPptpServerInfoParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&vpcRouterPptpServerInfoParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&vpcRouterPptpServerInfoParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterPptpServerInfoParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterPptpServerInfoParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&vpcRouterPptpServerInfoParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &vpcRouterPptpServerInfoParam.Id), "id", "", "Set target ID")
}

var vpcRouterPptpServerUpdateCmd = &cobra.Command{
	Use: "pptp-server-update",

	Short: "Update PPTP server setting",
	Long:  `Update PPTP server setting`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterPptpServerUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("pptp-server-update parameter: \n%s\n", debugMarshalIndent(vpcRouterPptpServerUpdateParam))
		return err
	},
}

func vpcRouterPptpServerUpdateCmdInit() {
	fs := vpcRouterPptpServerUpdateCmd.Flags()
	fs.BoolVarP(&vpcRouterPptpServerUpdateParam.Disabled, "disabled", "", false, "enable/disable PPTP server")
	fs.StringVarP(&vpcRouterPptpServerUpdateParam.RangeStart, "range-start", "", "", "set IPAddress Range(start)")
	fs.StringVarP(&vpcRouterPptpServerUpdateParam.RangeStop, "range-stop", "", "", "set IPAddress Range(stop)")
	fs.StringSliceVarP(&vpcRouterPptpServerUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterPptpServerUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterPptpServerUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterPptpServerUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterPptpServerUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterPptpServerUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterPptpServerUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterPptpServerUpdateParam.Id), "id", "", "Set target ID")
}

var vpcRouterL2TPServerInfoCmd = &cobra.Command{
	Use: "l2tp-server-info",

	Short: "Show information of L2TP/IPSec server",
	Long:  `Show information of L2TP/IPSec server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterL2TPServerInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("l2tp-server-info parameter: \n%s\n", debugMarshalIndent(vpcRouterL2TPServerInfoParam))
		return err
	},
}

func vpcRouterL2TPServerInfoCmdInit() {
	fs := vpcRouterL2TPServerInfoCmd.Flags()
	fs.StringSliceVarP(&vpcRouterL2TPServerInfoParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&vpcRouterL2TPServerInfoParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterL2TPServerInfoParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterL2TPServerInfoParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterL2TPServerInfoParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterL2TPServerInfoParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&vpcRouterL2TPServerInfoParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&vpcRouterL2TPServerInfoParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&vpcRouterL2TPServerInfoParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&vpcRouterL2TPServerInfoParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterL2TPServerInfoParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterL2TPServerInfoParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&vpcRouterL2TPServerInfoParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &vpcRouterL2TPServerInfoParam.Id), "id", "", "Set target ID")
}

var vpcRouterL2TPServerUpdateCmd = &cobra.Command{
	Use: "l2tp-server-update",

	Short: "Update L2TP/IPSec server setting",
	Long:  `Update L2TP/IPSec server setting`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterL2TPServerUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("l2tp-server-update parameter: \n%s\n", debugMarshalIndent(vpcRouterL2TPServerUpdateParam))
		return err
	},
}

func vpcRouterL2TPServerUpdateCmdInit() {
	fs := vpcRouterL2TPServerUpdateCmd.Flags()
	fs.BoolVarP(&vpcRouterL2TPServerUpdateParam.Disabled, "disabled", "", false, "enable/disable PPTP server")
	fs.StringVarP(&vpcRouterL2TPServerUpdateParam.RangeStart, "range-start", "", "", "set IPAddress Range(start)")
	fs.StringVarP(&vpcRouterL2TPServerUpdateParam.RangeStop, "range-stop", "", "", "set IPAddress Range(stop)")
	fs.StringVarP(&vpcRouterL2TPServerUpdateParam.PreSharedSecret, "pre-shared-secret", "", "", "set PreSharedSecret")
	fs.StringSliceVarP(&vpcRouterL2TPServerUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterL2TPServerUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterL2TPServerUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterL2TPServerUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterL2TPServerUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterL2TPServerUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterL2TPServerUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterL2TPServerUpdateParam.Id), "id", "", "Set target ID")
}

var vpcRouterUserInfoCmd = &cobra.Command{
	Use:     "user-info",
	Aliases: []string{"user-list"},
	Short:   "Show information of remote-access users",
	Long:    `Show information of remote-access users`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterUserInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("user-info parameter: \n%s\n", debugMarshalIndent(vpcRouterUserInfoParam))
		return err
	},
}

func vpcRouterUserInfoCmdInit() {
	fs := vpcRouterUserInfoCmd.Flags()
	fs.StringSliceVarP(&vpcRouterUserInfoParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&vpcRouterUserInfoParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterUserInfoParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterUserInfoParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterUserInfoParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterUserInfoParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&vpcRouterUserInfoParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&vpcRouterUserInfoParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&vpcRouterUserInfoParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&vpcRouterUserInfoParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterUserInfoParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterUserInfoParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&vpcRouterUserInfoParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &vpcRouterUserInfoParam.Id), "id", "", "Set target ID")
}

var vpcRouterUserAddCmd = &cobra.Command{
	Use: "user-add",

	Short: "Add remote-access user",
	Long:  `Add remote-access user`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterUserAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("user-add parameter: \n%s\n", debugMarshalIndent(vpcRouterUserAddParam))
		return err
	},
}

func vpcRouterUserAddCmdInit() {
	fs := vpcRouterUserAddCmd.Flags()
	fs.StringVarP(&vpcRouterUserAddParam.Username, "username", "", "", "set remote-access username")
	fs.StringVarP(&vpcRouterUserAddParam.Password, "password", "", "", "set remote-access password")
	fs.StringSliceVarP(&vpcRouterUserAddParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterUserAddParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterUserAddParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterUserAddParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterUserAddParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterUserAddParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterUserAddParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterUserAddParam.Id), "id", "", "Set target ID")
}

var vpcRouterUserUpdateCmd = &cobra.Command{
	Use: "user-update",

	Short: "Update remote-access user",
	Long:  `Update remote-access user`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterUserUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("user-update parameter: \n%s\n", debugMarshalIndent(vpcRouterUserUpdateParam))
		return err
	},
}

func vpcRouterUserUpdateCmdInit() {
	fs := vpcRouterUserUpdateCmd.Flags()
	fs.IntVarP(&vpcRouterUserUpdateParam.Index, "index", "", 0, "index of target remote-access user")
	fs.StringVarP(&vpcRouterUserUpdateParam.Username, "username", "", "", "set remote-access username")
	fs.StringVarP(&vpcRouterUserUpdateParam.Password, "password", "", "", "set remote-access password")
	fs.StringSliceVarP(&vpcRouterUserUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterUserUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterUserUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterUserUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterUserUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterUserUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterUserUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterUserUpdateParam.Id), "id", "", "Set target ID")
}

var vpcRouterUserDeleteCmd = &cobra.Command{
	Use: "user-delete",

	Short: "Delete remote-access user",
	Long:  `Delete remote-access user`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterUserDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("user-delete parameter: \n%s\n", debugMarshalIndent(vpcRouterUserDeleteParam))
		return err
	},
}

func vpcRouterUserDeleteCmdInit() {
	fs := vpcRouterUserDeleteCmd.Flags()
	fs.IntVarP(&vpcRouterUserDeleteParam.Index, "index", "", 0, "index of target remote-access user")
	fs.StringSliceVarP(&vpcRouterUserDeleteParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterUserDeleteParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterUserDeleteParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterUserDeleteParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterUserDeleteParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterUserDeleteParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterUserDeleteParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterUserDeleteParam.Id), "id", "", "Set target ID")
}

var vpcRouterSiteToSiteVPNInfoCmd = &cobra.Command{
	Use:     "site-to-site-vpn-info",
	Aliases: []string{"site-to-site-vpn-list"},
	Short:   "Show information of site-to-site IPSec VPN settings",
	Long:    `Show information of site-to-site IPSec VPN settings`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterSiteToSiteVPNInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("site-to-site-vpn-info parameter: \n%s\n", debugMarshalIndent(vpcRouterSiteToSiteVPNInfoParam))
		return err
	},
}

func vpcRouterSiteToSiteVPNInfoCmdInit() {
	fs := vpcRouterSiteToSiteVPNInfoCmd.Flags()
	fs.StringSliceVarP(&vpcRouterSiteToSiteVPNInfoParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&vpcRouterSiteToSiteVPNInfoParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterSiteToSiteVPNInfoParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterSiteToSiteVPNInfoParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterSiteToSiteVPNInfoParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterSiteToSiteVPNInfoParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&vpcRouterSiteToSiteVPNInfoParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&vpcRouterSiteToSiteVPNInfoParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&vpcRouterSiteToSiteVPNInfoParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&vpcRouterSiteToSiteVPNInfoParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterSiteToSiteVPNInfoParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterSiteToSiteVPNInfoParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&vpcRouterSiteToSiteVPNInfoParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &vpcRouterSiteToSiteVPNInfoParam.Id), "id", "", "Set target ID")
}

var vpcRouterSiteToSiteVPNAddCmd = &cobra.Command{
	Use: "site-to-site-vpn-add",

	Short: "Add site-to-site IPSec VPN setting",
	Long:  `Add site-to-site IPSec VPN setting`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterSiteToSiteVPNAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("site-to-site-vpn-add parameter: \n%s\n", debugMarshalIndent(vpcRouterSiteToSiteVPNAddParam))
		return err
	},
}

func vpcRouterSiteToSiteVPNAddCmdInit() {
	fs := vpcRouterSiteToSiteVPNAddCmd.Flags()
	fs.StringVarP(&vpcRouterSiteToSiteVPNAddParam.Peer, "peer", "", "", "set peer address")
	fs.StringVarP(&vpcRouterSiteToSiteVPNAddParam.RemoteId, "remote-id", "", "", "set remote-id")
	fs.StringVarP(&vpcRouterSiteToSiteVPNAddParam.PreSharedSecret, "pre-shared-secret", "", "", "set pre-shared-secret")
	fs.StringSliceVarP(&vpcRouterSiteToSiteVPNAddParam.Routes, "routes", "", []string{}, "set route list")
	fs.StringSliceVarP(&vpcRouterSiteToSiteVPNAddParam.LocalPrefix, "local-prefix", "", []string{}, "set local prefix list")
	fs.StringSliceVarP(&vpcRouterSiteToSiteVPNAddParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterSiteToSiteVPNAddParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterSiteToSiteVPNAddParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterSiteToSiteVPNAddParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterSiteToSiteVPNAddParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterSiteToSiteVPNAddParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterSiteToSiteVPNAddParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterSiteToSiteVPNAddParam.Id), "id", "", "Set target ID")
}

var vpcRouterSiteToSiteVPNUpdateCmd = &cobra.Command{
	Use: "site-to-site-vpn-update",

	Short: "Update site-to-site IPSec VPN setting",
	Long:  `Update site-to-site IPSec VPN setting`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterSiteToSiteVPNUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("site-to-site-vpn-update parameter: \n%s\n", debugMarshalIndent(vpcRouterSiteToSiteVPNUpdateParam))
		return err
	},
}

func vpcRouterSiteToSiteVPNUpdateCmdInit() {
	fs := vpcRouterSiteToSiteVPNUpdateCmd.Flags()
	fs.IntVarP(&vpcRouterSiteToSiteVPNUpdateParam.Index, "index", "", 0, "index of target remote-access user")
	fs.StringVarP(&vpcRouterSiteToSiteVPNUpdateParam.Peer, "peer", "", "", "set peer address")
	fs.StringVarP(&vpcRouterSiteToSiteVPNUpdateParam.RemoteId, "remote-id", "", "", "set remote-id")
	fs.StringVarP(&vpcRouterSiteToSiteVPNUpdateParam.PreSharedSecret, "pre-shared-secret", "", "", "set pre-shared-secret")
	fs.StringSliceVarP(&vpcRouterSiteToSiteVPNUpdateParam.Routes, "routes", "", []string{}, "set route list")
	fs.StringSliceVarP(&vpcRouterSiteToSiteVPNUpdateParam.LocalPrefix, "local-prefix", "", []string{}, "set local prefix list")
	fs.StringSliceVarP(&vpcRouterSiteToSiteVPNUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterSiteToSiteVPNUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterSiteToSiteVPNUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterSiteToSiteVPNUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterSiteToSiteVPNUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterSiteToSiteVPNUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterSiteToSiteVPNUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterSiteToSiteVPNUpdateParam.Id), "id", "", "Set target ID")
}

var vpcRouterSiteToSiteVPNDeleteCmd = &cobra.Command{
	Use: "site-to-site-vpn-delete",

	Short: "Delete site-to-site IPSec VPN setting",
	Long:  `Delete site-to-site IPSec VPN setting`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterSiteToSiteVPNDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("site-to-site-vpn-delete parameter: \n%s\n", debugMarshalIndent(vpcRouterSiteToSiteVPNDeleteParam))
		return err
	},
}

func vpcRouterSiteToSiteVPNDeleteCmdInit() {
	fs := vpcRouterSiteToSiteVPNDeleteCmd.Flags()
	fs.IntVarP(&vpcRouterSiteToSiteVPNDeleteParam.Index, "index", "", 0, "index of target remote-access user")
	fs.StringSliceVarP(&vpcRouterSiteToSiteVPNDeleteParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterSiteToSiteVPNDeleteParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterSiteToSiteVPNDeleteParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterSiteToSiteVPNDeleteParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterSiteToSiteVPNDeleteParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterSiteToSiteVPNDeleteParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterSiteToSiteVPNDeleteParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterSiteToSiteVPNDeleteParam.Id), "id", "", "Set target ID")
}

var vpcRouterSiteToSiteVPNPeersCmd = &cobra.Command{
	Use: "site-to-site-vpn-peers",

	Short: "Show status of site-to-site IPSec VPN peers",
	Long:  `Show status of site-to-site IPSec VPN peers`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterSiteToSiteVPNPeersParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("site-to-site-vpn-peers parameter: \n%s\n", debugMarshalIndent(vpcRouterSiteToSiteVPNPeersParam))
		return err
	},
}

func vpcRouterSiteToSiteVPNPeersCmdInit() {
	fs := vpcRouterSiteToSiteVPNPeersCmd.Flags()
	fs.StringSliceVarP(&vpcRouterSiteToSiteVPNPeersParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&vpcRouterSiteToSiteVPNPeersParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterSiteToSiteVPNPeersParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterSiteToSiteVPNPeersParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterSiteToSiteVPNPeersParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterSiteToSiteVPNPeersParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&vpcRouterSiteToSiteVPNPeersParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&vpcRouterSiteToSiteVPNPeersParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&vpcRouterSiteToSiteVPNPeersParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&vpcRouterSiteToSiteVPNPeersParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterSiteToSiteVPNPeersParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterSiteToSiteVPNPeersParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&vpcRouterSiteToSiteVPNPeersParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &vpcRouterSiteToSiteVPNPeersParam.Id), "id", "", "Set target ID")
}

var vpcRouterStaticRouteInfoCmd = &cobra.Command{
	Use:     "static-route-info",
	Aliases: []string{"static-route-list"},
	Short:   "Show information of static-routes",
	Long:    `Show information of static-routes`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterStaticRouteInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-route-info parameter: \n%s\n", debugMarshalIndent(vpcRouterStaticRouteInfoParam))
		return err
	},
}

func vpcRouterStaticRouteInfoCmdInit() {
	fs := vpcRouterStaticRouteInfoCmd.Flags()
	fs.StringSliceVarP(&vpcRouterStaticRouteInfoParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&vpcRouterStaticRouteInfoParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterStaticRouteInfoParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterStaticRouteInfoParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterStaticRouteInfoParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterStaticRouteInfoParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&vpcRouterStaticRouteInfoParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&vpcRouterStaticRouteInfoParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&vpcRouterStaticRouteInfoParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&vpcRouterStaticRouteInfoParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterStaticRouteInfoParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterStaticRouteInfoParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&vpcRouterStaticRouteInfoParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &vpcRouterStaticRouteInfoParam.Id), "id", "", "Set target ID")
}

var vpcRouterStaticRouteAddCmd = &cobra.Command{
	Use: "static-route-add",

	Short: "Add static-route",
	Long:  `Add static-route`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterStaticRouteAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-route-add parameter: \n%s\n", debugMarshalIndent(vpcRouterStaticRouteAddParam))
		return err
	},
}

func vpcRouterStaticRouteAddCmdInit() {
	fs := vpcRouterStaticRouteAddCmd.Flags()
	fs.StringVarP(&vpcRouterStaticRouteAddParam.Prefix, "prefix", "", "", "set prefix")
	fs.StringVarP(&vpcRouterStaticRouteAddParam.NextHop, "next-hop", "", "", "set next-hop")
	fs.StringSliceVarP(&vpcRouterStaticRouteAddParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterStaticRouteAddParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterStaticRouteAddParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterStaticRouteAddParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterStaticRouteAddParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterStaticRouteAddParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterStaticRouteAddParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterStaticRouteAddParam.Id), "id", "", "Set target ID")
}

var vpcRouterStaticRouteUpdateCmd = &cobra.Command{
	Use: "static-route-update",

	Short: "Update static-route",
	Long:  `Update static-route`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterStaticRouteUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-route-update parameter: \n%s\n", debugMarshalIndent(vpcRouterStaticRouteUpdateParam))
		return err
	},
}

func vpcRouterStaticRouteUpdateCmdInit() {
	fs := vpcRouterStaticRouteUpdateCmd.Flags()
	fs.IntVarP(&vpcRouterStaticRouteUpdateParam.Index, "index", "", 0, "index of target static-route")
	fs.StringVarP(&vpcRouterStaticRouteUpdateParam.Prefix, "prefix", "", "", "set prefix")
	fs.StringVarP(&vpcRouterStaticRouteUpdateParam.NextHop, "next-hop", "", "", "set next-hop")
	fs.StringSliceVarP(&vpcRouterStaticRouteUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterStaticRouteUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterStaticRouteUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterStaticRouteUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterStaticRouteUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterStaticRouteUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterStaticRouteUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterStaticRouteUpdateParam.Id), "id", "", "Set target ID")
}

var vpcRouterStaticRouteDeleteCmd = &cobra.Command{
	Use: "static-route-delete",

	Short: "Delete static-route",
	Long:  `Delete static-route`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterStaticRouteDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-route-delete parameter: \n%s\n", debugMarshalIndent(vpcRouterStaticRouteDeleteParam))
		return err
	},
}

func vpcRouterStaticRouteDeleteCmdInit() {
	fs := vpcRouterStaticRouteDeleteCmd.Flags()
	fs.IntVarP(&vpcRouterStaticRouteDeleteParam.Index, "index", "", 0, "index of target static-route")
	fs.StringSliceVarP(&vpcRouterStaticRouteDeleteParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&vpcRouterStaticRouteDeleteParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&vpcRouterStaticRouteDeleteParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterStaticRouteDeleteParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterStaticRouteDeleteParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterStaticRouteDeleteParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterStaticRouteDeleteParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterStaticRouteDeleteParam.Id), "id", "", "Set target ID")
}

var vpcRouterMonitorCmd = &cobra.Command{
	Use: "monitor",

	Short: "Monitor VPCRouter",
	Long:  `Monitor VPCRouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterMonitorParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("monitor parameter: \n%s\n", debugMarshalIndent(vpcRouterMonitorParam))
		return err
	},
}

func vpcRouterMonitorCmdInit() {
	fs := vpcRouterMonitorCmd.Flags()
	fs.StringVarP(&vpcRouterMonitorParam.Interface, "interface", "", "0", "index of target interface")
	fs.StringVarP(&vpcRouterMonitorParam.Start, "start", "", "", "set start-time")
	fs.StringVarP(&vpcRouterMonitorParam.End, "end", "", "", "set end-time")
	fs.StringVarP(&vpcRouterMonitorParam.KeyFormat, "key-format", "", "sakuracloud.vpcrouter.{{.ID}}.nic.{{.Index}}", "set monitoring value key-format")
	fs.StringSliceVarP(&vpcRouterMonitorParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&vpcRouterMonitorParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterMonitorParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterMonitorParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterMonitorParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterMonitorParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&vpcRouterMonitorParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&vpcRouterMonitorParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&vpcRouterMonitorParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&vpcRouterMonitorParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterMonitorParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&vpcRouterMonitorParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&vpcRouterMonitorParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &vpcRouterMonitorParam.Id), "id", "", "Set target ID")
}

var vpcRouterLogsCmd = &cobra.Command{
	Use: "logs",

	Short: "Logs VPCRouter",
	Long:  `Logs VPCRouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcRouterLogsParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("logs parameter: \n%s\n", debugMarshalIndent(vpcRouterLogsParam))
		return err
	},
}

func vpcRouterLogsCmdInit() {
	fs := vpcRouterLogsCmd.Flags()
	fs.StringVarP(&vpcRouterLogsParam.LogName, "log-name", "", "all", "set target logfile name")
	fs.BoolVarP(&vpcRouterLogsParam.Follow, "follow", "f", false, "follow log output")
	fs.Int64VarP(&vpcRouterLogsParam.RefreshInterval, "refresh-interval", "", 3, "log refresh interval second")
	fs.BoolVarP(&vpcRouterLogsParam.ListLogNames, "list-log-names", "", false, "show log-name list")
	fs.StringSliceVarP(&vpcRouterLogsParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&vpcRouterLogsParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&vpcRouterLogsParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&vpcRouterLogsParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&vpcRouterLogsParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&vpcRouterLogsParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &vpcRouterLogsParam.Id), "id", "", "Set target ID")
}

func init() {
	parent := vpcRouterCmd

	vpcRouterListCmdInit()
	parent.AddCommand(vpcRouterListCmd)

	vpcRouterCreateCmdInit()
	parent.AddCommand(vpcRouterCreateCmd)

	vpcRouterReadCmdInit()
	parent.AddCommand(vpcRouterReadCmd)

	vpcRouterUpdateCmdInit()
	parent.AddCommand(vpcRouterUpdateCmd)

	vpcRouterDeleteCmdInit()
	parent.AddCommand(vpcRouterDeleteCmd)

	vpcRouterBootCmdInit()
	parent.AddCommand(vpcRouterBootCmd)

	vpcRouterShutdownCmdInit()
	parent.AddCommand(vpcRouterShutdownCmd)

	vpcRouterShutdownForceCmdInit()
	parent.AddCommand(vpcRouterShutdownForceCmd)

	vpcRouterResetCmdInit()
	parent.AddCommand(vpcRouterResetCmd)

	vpcRouterWaitForBootCmdInit()
	parent.AddCommand(vpcRouterWaitForBootCmd)

	vpcRouterWaitForDownCmdInit()
	parent.AddCommand(vpcRouterWaitForDownCmd)

	vpcRouterEnableInternetConnectionCmdInit()
	parent.AddCommand(vpcRouterEnableInternetConnectionCmd)

	vpcRouterDisableInternetConnectionCmdInit()
	parent.AddCommand(vpcRouterDisableInternetConnectionCmd)

	vpcRouterInterfaceInfoCmdInit()
	parent.AddCommand(vpcRouterInterfaceInfoCmd)

	vpcRouterInterfaceConnectCmdInit()
	parent.AddCommand(vpcRouterInterfaceConnectCmd)

	vpcRouterInterfaceUpdateCmdInit()
	parent.AddCommand(vpcRouterInterfaceUpdateCmd)

	vpcRouterInterfaceDisconnectCmdInit()
	parent.AddCommand(vpcRouterInterfaceDisconnectCmd)

	vpcRouterStaticNatInfoCmdInit()
	parent.AddCommand(vpcRouterStaticNatInfoCmd)

	vpcRouterStaticNatAddCmdInit()
	parent.AddCommand(vpcRouterStaticNatAddCmd)

	vpcRouterStaticNatUpdateCmdInit()
	parent.AddCommand(vpcRouterStaticNatUpdateCmd)

	vpcRouterStaticNatDeleteCmdInit()
	parent.AddCommand(vpcRouterStaticNatDeleteCmd)

	vpcRouterPortForwardingInfoCmdInit()
	parent.AddCommand(vpcRouterPortForwardingInfoCmd)

	vpcRouterPortForwardingAddCmdInit()
	parent.AddCommand(vpcRouterPortForwardingAddCmd)

	vpcRouterPortForwardingUpdateCmdInit()
	parent.AddCommand(vpcRouterPortForwardingUpdateCmd)

	vpcRouterPortForwardingDeleteCmdInit()
	parent.AddCommand(vpcRouterPortForwardingDeleteCmd)

	vpcRouterFirewallInfoCmdInit()
	parent.AddCommand(vpcRouterFirewallInfoCmd)

	vpcRouterFirewallAddCmdInit()
	parent.AddCommand(vpcRouterFirewallAddCmd)

	vpcRouterFirewallUpdateCmdInit()
	parent.AddCommand(vpcRouterFirewallUpdateCmd)

	vpcRouterFirewallDeleteCmdInit()
	parent.AddCommand(vpcRouterFirewallDeleteCmd)

	vpcRouterDhcpServerInfoCmdInit()
	parent.AddCommand(vpcRouterDhcpServerInfoCmd)

	vpcRouterDhcpServerAddCmdInit()
	parent.AddCommand(vpcRouterDhcpServerAddCmd)

	vpcRouterDhcpServerUpdateCmdInit()
	parent.AddCommand(vpcRouterDhcpServerUpdateCmd)

	vpcRouterDhcpServerDeleteCmdInit()
	parent.AddCommand(vpcRouterDhcpServerDeleteCmd)

	vpcRouterDhcpStaticMappingInfoCmdInit()
	parent.AddCommand(vpcRouterDhcpStaticMappingInfoCmd)

	vpcRouterDhcpStaticMappingAddCmdInit()
	parent.AddCommand(vpcRouterDhcpStaticMappingAddCmd)

	vpcRouterDhcpStaticMappingUpdateCmdInit()
	parent.AddCommand(vpcRouterDhcpStaticMappingUpdateCmd)

	vpcRouterDhcpStaticMappingDeleteCmdInit()
	parent.AddCommand(vpcRouterDhcpStaticMappingDeleteCmd)

	vpcRouterPptpServerInfoCmdInit()
	parent.AddCommand(vpcRouterPptpServerInfoCmd)

	vpcRouterPptpServerUpdateCmdInit()
	parent.AddCommand(vpcRouterPptpServerUpdateCmd)

	vpcRouterL2TPServerInfoCmdInit()
	parent.AddCommand(vpcRouterL2TPServerInfoCmd)

	vpcRouterL2TPServerUpdateCmdInit()
	parent.AddCommand(vpcRouterL2TPServerUpdateCmd)

	vpcRouterUserInfoCmdInit()
	parent.AddCommand(vpcRouterUserInfoCmd)

	vpcRouterUserAddCmdInit()
	parent.AddCommand(vpcRouterUserAddCmd)

	vpcRouterUserUpdateCmdInit()
	parent.AddCommand(vpcRouterUserUpdateCmd)

	vpcRouterUserDeleteCmdInit()
	parent.AddCommand(vpcRouterUserDeleteCmd)

	vpcRouterSiteToSiteVPNInfoCmdInit()
	parent.AddCommand(vpcRouterSiteToSiteVPNInfoCmd)

	vpcRouterSiteToSiteVPNAddCmdInit()
	parent.AddCommand(vpcRouterSiteToSiteVPNAddCmd)

	vpcRouterSiteToSiteVPNUpdateCmdInit()
	parent.AddCommand(vpcRouterSiteToSiteVPNUpdateCmd)

	vpcRouterSiteToSiteVPNDeleteCmdInit()
	parent.AddCommand(vpcRouterSiteToSiteVPNDeleteCmd)

	vpcRouterSiteToSiteVPNPeersCmdInit()
	parent.AddCommand(vpcRouterSiteToSiteVPNPeersCmd)

	vpcRouterStaticRouteInfoCmdInit()
	parent.AddCommand(vpcRouterStaticRouteInfoCmd)

	vpcRouterStaticRouteAddCmdInit()
	parent.AddCommand(vpcRouterStaticRouteAddCmd)

	vpcRouterStaticRouteUpdateCmdInit()
	parent.AddCommand(vpcRouterStaticRouteUpdateCmd)

	vpcRouterStaticRouteDeleteCmdInit()
	parent.AddCommand(vpcRouterStaticRouteDeleteCmd)

	vpcRouterMonitorCmdInit()
	parent.AddCommand(vpcRouterMonitorCmd)

	vpcRouterLogsCmdInit()
	parent.AddCommand(vpcRouterLogsCmd)

	rootCmd.AddCommand(parent)
}

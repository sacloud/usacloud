// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	productserverListParam = params.NewListProductserverParam()
	productserverReadParam = params.NewReadProductserverParam()
)

// productserverCmd represents the command to manage SAKURAÂ Cloud ProductServer
var productserverCmd = &cobra.Command{
	Use:   "productserver",
	Short: "A manage commands of ProductServer",
	Long:  `A manage commands of ProductServer`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements: call list func as default
	},
}

var productserverListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find"},
	Short:   "List Productserver (default)",
	Long:    `List Productserver (default)`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := productserverListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(productserverListParam))
		return err
	},
}

func productserverListCmdInit() {
	fs := productserverListCmd.Flags()
	fs.IntVarP(&productserverListParam.From, "from", "", 0, "set offset")
	fs.IntVarP(&productserverListParam.Max, "max", "", 0, "set limit")
	fs.StringSliceVarP(&productserverListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringSliceVarP(&productserverListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &productserverListParam.Id), "id", "", "set filter by id(s)")
}

var productserverReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Productserver",
	Long:  `Read Productserver`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := productserverReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(productserverReadParam))
		return err
	},
}

func productserverReadCmdInit() {
	fs := productserverReadCmd.Flags()
	fs.VarP(newIDValue(0, &productserverReadParam.Id), "id", "", "set resource ID")
}

func init() {
	parent := productserverCmd

	productserverListCmdInit()
	parent.AddCommand(productserverListCmd)

	productserverReadCmdInit()
	parent.AddCommand(productserverReadCmd)

	rootCmd.AddCommand(parent)
}

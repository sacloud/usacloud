// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	vpcrouterListParam                      = params.NewListVpcrouterParam()
	vpcrouterCreateParam                    = params.NewCreateVpcrouterParam()
	vpcrouterReadParam                      = params.NewReadVpcrouterParam()
	vpcrouterUpdateParam                    = params.NewUpdateVpcrouterParam()
	vpcrouterDeleteParam                    = params.NewDeleteVpcrouterParam()
	vpcrouterBootParam                      = params.NewBootVpcrouterParam()
	vpcrouterShutdownParam                  = params.NewShutdownVpcrouterParam()
	vpcrouterShutdownForceParam             = params.NewShutdownForceVpcrouterParam()
	vpcrouterResetParam                     = params.NewResetVpcrouterParam()
	vpcrouterWaitForBootParam               = params.NewWaitForBootVpcrouterParam()
	vpcrouterWaitForDownParam               = params.NewWaitForDownVpcrouterParam()
	vpcrouterEnableInternetConnectionParam  = params.NewEnableInternetConnectionVpcrouterParam()
	vpcrouterDisableInternetConnectionParam = params.NewDisableInternetConnectionVpcrouterParam()
	vpcrouterInterfaceInfoParam             = params.NewInterfaceInfoVpcrouterParam()
	vpcrouterInterfaceConnectParam          = params.NewInterfaceConnectVpcrouterParam()
	vpcrouterInterfaceUpdateParam           = params.NewInterfaceUpdateVpcrouterParam()
	vpcrouterInterfaceDisconnectParam       = params.NewInterfaceDisconnectVpcrouterParam()
	vpcrouterStaticNatInfoParam             = params.NewStaticNatInfoVpcrouterParam()
	vpcrouterStaticNatAddParam              = params.NewStaticNatAddVpcrouterParam()
	vpcrouterStaticNatUpdateParam           = params.NewStaticNatUpdateVpcrouterParam()
	vpcrouterStaticNatDeleteParam           = params.NewStaticNatDeleteVpcrouterParam()
	vpcrouterPortForwardingInfoParam        = params.NewPortForwardingInfoVpcrouterParam()
	vpcrouterPortForwardingAddParam         = params.NewPortForwardingAddVpcrouterParam()
	vpcrouterPortForwardingUpdateParam      = params.NewPortForwardingUpdateVpcrouterParam()
	vpcrouterPortForwardingDeleteParam      = params.NewPortForwardingDeleteVpcrouterParam()
	vpcrouterFirewallInfoParam              = params.NewFirewallInfoVpcrouterParam()
	vpcrouterFirewallAddParam               = params.NewFirewallAddVpcrouterParam()
	vpcrouterFirewallUpdateParam            = params.NewFirewallUpdateVpcrouterParam()
	vpcrouterFirewallDeleteParam            = params.NewFirewallDeleteVpcrouterParam()
	vpcrouterDhcpServerInfoParam            = params.NewDhcpServerInfoVpcrouterParam()
	vpcrouterDhcpServerAddParam             = params.NewDhcpServerAddVpcrouterParam()
	vpcrouterDhcpServerUpdateParam          = params.NewDhcpServerUpdateVpcrouterParam()
	vpcrouterDhcpServerDeleteParam          = params.NewDhcpServerDeleteVpcrouterParam()
	vpcrouterDhcpStaticMappingInfoParam     = params.NewDhcpStaticMappingInfoVpcrouterParam()
	vpcrouterDhcpStaticMappingAddParam      = params.NewDhcpStaticMappingAddVpcrouterParam()
	vpcrouterDhcpStaticMappingUpdateParam   = params.NewDhcpStaticMappingUpdateVpcrouterParam()
	vpcrouterDhcpStaticMappingDeleteParam   = params.NewDhcpStaticMappingDeleteVpcrouterParam()
	vpcrouterPptpServerInfoParam            = params.NewPptpServerInfoVpcrouterParam()
	vpcrouterPptpServerUpdateParam          = params.NewPptpServerUpdateVpcrouterParam()
	vpcrouterL2tpServerInfoParam            = params.NewL2tpServerInfoVpcrouterParam()
	vpcrouterL2tpServerUpdateParam          = params.NewL2tpServerUpdateVpcrouterParam()
	vpcrouterUserInfoParam                  = params.NewUserInfoVpcrouterParam()
	vpcrouterUserAddParam                   = params.NewUserAddVpcrouterParam()
	vpcrouterUserUpdateParam                = params.NewUserUpdateVpcrouterParam()
	vpcrouterUserDeleteParam                = params.NewUserDeleteVpcrouterParam()
	vpcrouterSiteToSiteVpnInfoParam         = params.NewSiteToSiteVpnInfoVpcrouterParam()
	vpcrouterSiteToSiteVpnAddParam          = params.NewSiteToSiteVpnAddVpcrouterParam()
	vpcrouterSiteToSiteVpnUpdateParam       = params.NewSiteToSiteVpnUpdateVpcrouterParam()
	vpcrouterSiteToSiteVpnDeleteParam       = params.NewSiteToSiteVpnDeleteVpcrouterParam()
	vpcrouterSiteToSiteVpnPeersParam        = params.NewSiteToSiteVpnPeersVpcrouterParam()
	vpcrouterStaticRouteInfoParam           = params.NewStaticRouteInfoVpcrouterParam()
	vpcrouterStaticRouteAddParam            = params.NewStaticRouteAddVpcrouterParam()
	vpcrouterStaticRouteUpdateParam         = params.NewStaticRouteUpdateVpcrouterParam()
	vpcrouterStaticRouteDeleteParam         = params.NewStaticRouteDeleteVpcrouterParam()
	vpcrouterMonitorParam                   = params.NewMonitorVpcrouterParam()
	vpcrouterLogsParam                      = params.NewLogsVpcrouterParam()
)

// vpcrouterCmd represents the command to manage SAKURAÂ Cloud VPCRouter
var vpcrouterCmd = &cobra.Command{
	Use:   "vpcrouter",
	Short: "A manage commands of VPCRouter",
	Long:  `A manage commands of VPCRouter`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var vpcrouterListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List Vpcrouter",
	Long:    `List Vpcrouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(vpcrouterListParam))
		return err
	},
}

func vpcrouterListCmdInit() {
	fs := vpcrouterListCmd.Flags()
	fs.StringSliceVarP(&vpcrouterListParam.Tags, "tags", "", []string{}, "set filter by tags(AND)")
	fs.IntVarP(&vpcrouterListParam.Max, "max", "", 0, "set limit")
	fs.StringSliceVarP(&vpcrouterListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringSliceVarP(&vpcrouterListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &vpcrouterListParam.Id), "id", "", "set filter by id(s)")
	fs.IntVarP(&vpcrouterListParam.From, "from", "", 0, "set offset")
}

var vpcrouterCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create Vpcrouter",
	Long:  `Create Vpcrouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(vpcrouterCreateParam))
		return err
	},
}

func vpcrouterCreateCmdInit() {
	fs := vpcrouterCreateCmd.Flags()
	fs.BoolVarP(&vpcrouterCreateParam.DisableInternetConnection, "disable-internet-connection", "", false, "disable internet connection from VPCRouter")
	fs.StringVarP(&vpcrouterCreateParam.Description, "description", "", "", "set resource description")
	fs.VarP(newIDValue(0, &vpcrouterCreateParam.SwitchId), "switch-id", "", "set connect switch ID")
	fs.IntVarP(&vpcrouterCreateParam.Vrid, "vrid", "", 1, "set VRID")
	fs.StringVarP(&vpcrouterCreateParam.Ipaddress1, "ipaddress-1", "", "", "set ipaddress(#1)")
	fs.StringVarP(&vpcrouterCreateParam.Ipaddress2, "ipaddress-2", "", "", "set ipaddress(#2)")
	fs.StringSliceVarP(&vpcrouterCreateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &vpcrouterCreateParam.IconId), "icon-id", "", "set Icon ID")
	fs.StringVarP(&vpcrouterCreateParam.Plan, "plan", "", "standard", "set plan[standard/premium/highspec/highspec1600/highspec4000]")
	fs.StringVarP(&vpcrouterCreateParam.Vip, "vip", "", "", "set virtual ipddress()")
	fs.BoolVarP(&vpcrouterCreateParam.BootAfterCreate, "boot-after-create", "", false, "boot after create")
	fs.StringVarP(&vpcrouterCreateParam.Name, "name", "", "", "set resource display name")
}

var vpcrouterReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Vpcrouter",
	Long:  `Read Vpcrouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(vpcrouterReadParam))
		return err
	},
}

func vpcrouterReadCmdInit() {
}

var vpcrouterUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update Vpcrouter",
	Long:  `Update Vpcrouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(vpcrouterUpdateParam))
		return err
	},
}

func vpcrouterUpdateCmdInit() {
	fs := vpcrouterUpdateCmd.Flags()
	fs.StringVarP(&vpcrouterUpdateParam.SyslogHost, "syslog-host", "", "", "set syslog host IPAddress")
	fs.BoolVarP(&vpcrouterUpdateParam.InternetConnection, "internet-connection", "", false, "set internet connection from VPCRouter")
	fs.StringVarP(&vpcrouterUpdateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&vpcrouterUpdateParam.Description, "description", "", "", "set resource description")
	fs.StringSliceVarP(&vpcrouterUpdateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &vpcrouterUpdateParam.IconId), "icon-id", "", "set Icon ID")
}

var vpcrouterDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Vpcrouter",
	Long:    `Delete Vpcrouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(vpcrouterDeleteParam))
		return err
	},
}

func vpcrouterDeleteCmdInit() {
	fs := vpcrouterDeleteCmd.Flags()
	fs.BoolVarP(&vpcrouterDeleteParam.Force, "force", "f", false, "forced-shutdown flag if server is running")
}

var vpcrouterBootCmd = &cobra.Command{
	Use:     "boot",
	Aliases: []string{"power-on"},
	Short:   "Boot Vpcrouter",
	Long:    `Boot Vpcrouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterBootParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("boot parameter: \n%s\n", debugMarshalIndent(vpcrouterBootParam))
		return err
	},
}

func vpcrouterBootCmdInit() {
}

var vpcrouterShutdownCmd = &cobra.Command{
	Use:     "shutdown",
	Aliases: []string{"power-off"},
	Short:   "Shutdown Vpcrouter",
	Long:    `Shutdown Vpcrouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterShutdownParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("shutdown parameter: \n%s\n", debugMarshalIndent(vpcrouterShutdownParam))
		return err
	},
}

func vpcrouterShutdownCmdInit() {
}

var vpcrouterShutdownForceCmd = &cobra.Command{
	Use:     "shutdown-force",
	Aliases: []string{"stop"},
	Short:   "ShutdownForce Vpcrouter",
	Long:    `ShutdownForce Vpcrouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterShutdownForceParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("shutdown-force parameter: \n%s\n", debugMarshalIndent(vpcrouterShutdownForceParam))
		return err
	},
}

func vpcrouterShutdownForceCmdInit() {
}

var vpcrouterResetCmd = &cobra.Command{
	Use: "reset",

	Short: "Reset Vpcrouter",
	Long:  `Reset Vpcrouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterResetParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("reset parameter: \n%s\n", debugMarshalIndent(vpcrouterResetParam))
		return err
	},
}

func vpcrouterResetCmdInit() {
}

var vpcrouterWaitForBootCmd = &cobra.Command{
	Use: "wait-for-boot",

	Short: "Wait until boot is completed",
	Long:  `Wait until boot is completed`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterWaitForBootParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("wait-for-boot parameter: \n%s\n", debugMarshalIndent(vpcrouterWaitForBootParam))
		return err
	},
}

func vpcrouterWaitForBootCmdInit() {
}

var vpcrouterWaitForDownCmd = &cobra.Command{
	Use: "wait-for-down",

	Short: "Wait until shutdown is completed",
	Long:  `Wait until shutdown is completed`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterWaitForDownParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("wait-for-down parameter: \n%s\n", debugMarshalIndent(vpcrouterWaitForDownParam))
		return err
	},
}

func vpcrouterWaitForDownCmdInit() {
}

var vpcrouterEnableInternetConnectionCmd = &cobra.Command{
	Use: "enable-internet-connection",

	Short: "Enable internet connection from VPCRouter",
	Long:  `Enable internet connection from VPCRouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterEnableInternetConnectionParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("enable-internet-connection parameter: \n%s\n", debugMarshalIndent(vpcrouterEnableInternetConnectionParam))
		return err
	},
}

func vpcrouterEnableInternetConnectionCmdInit() {
}

var vpcrouterDisableInternetConnectionCmd = &cobra.Command{
	Use: "disable-internet-connection",

	Short: "Enable internet connection from VPCRouter",
	Long:  `Enable internet connection from VPCRouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterDisableInternetConnectionParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("disable-internet-connection parameter: \n%s\n", debugMarshalIndent(vpcrouterDisableInternetConnectionParam))
		return err
	},
}

func vpcrouterDisableInternetConnectionCmdInit() {
}

var vpcrouterInterfaceInfoCmd = &cobra.Command{
	Use:     "interface-info",
	Aliases: []string{"interface-list"},
	Short:   "Show information of NIC(s) connected to vpc-router",
	Long:    `Show information of NIC(s) connected to vpc-router`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterInterfaceInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-info parameter: \n%s\n", debugMarshalIndent(vpcrouterInterfaceInfoParam))
		return err
	},
}

func vpcrouterInterfaceInfoCmdInit() {
}

var vpcrouterInterfaceConnectCmd = &cobra.Command{
	Use: "interface-connect",

	Short: "Connected to switch",
	Long:  `Connected to switch`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterInterfaceConnectParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-connect parameter: \n%s\n", debugMarshalIndent(vpcrouterInterfaceConnectParam))
		return err
	},
}

func vpcrouterInterfaceConnectCmdInit() {
	fs := vpcrouterInterfaceConnectCmd.Flags()
	fs.IntVarP(&vpcrouterInterfaceConnectParam.NwMasklen, "nw-masklen", "", 24, "set ipaddress prefix")
	fs.BoolVarP(&vpcrouterInterfaceConnectParam.WithReboot, "with-reboot", "", false, "reboot after connect")
	fs.StringVarP(&vpcrouterInterfaceConnectParam.Interface, "interface", "", "", "index of target private-interface")
	fs.VarP(newIDValue(0, &vpcrouterInterfaceConnectParam.SwitchId), "switch-id", "", "set connect switch ID")
	fs.StringVarP(&vpcrouterInterfaceConnectParam.Ipaddress, "ipaddress", "", "", "set (virtual)ipaddress")
	fs.StringVarP(&vpcrouterInterfaceConnectParam.Ipaddress1, "ipaddress-1", "", "", "set ipaddress(#1)")
	fs.StringVarP(&vpcrouterInterfaceConnectParam.Ipaddress2, "ipaddress-2", "", "", "set ipaddress(#2)")
}

var vpcrouterInterfaceUpdateCmd = &cobra.Command{
	Use: "interface-update",

	Short: "Update interface",
	Long:  `Update interface`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterInterfaceUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-update parameter: \n%s\n", debugMarshalIndent(vpcrouterInterfaceUpdateParam))
		return err
	},
}

func vpcrouterInterfaceUpdateCmdInit() {
	fs := vpcrouterInterfaceUpdateCmd.Flags()
	fs.BoolVarP(&vpcrouterInterfaceUpdateParam.WithReboot, "with-reboot", "", false, "reboot after connect")
	fs.StringVarP(&vpcrouterInterfaceUpdateParam.Interface, "interface", "", "", "index of target interface")
	fs.VarP(newIDValue(0, &vpcrouterInterfaceUpdateParam.SwitchId), "switch-id", "", "set connect switch ID")
	fs.StringVarP(&vpcrouterInterfaceUpdateParam.Ipaddress, "ipaddress", "", "", "set (virtual)ipaddress")
	fs.StringVarP(&vpcrouterInterfaceUpdateParam.Ipaddress1, "ipaddress-1", "", "", "set ipaddress(#1)")
	fs.StringVarP(&vpcrouterInterfaceUpdateParam.Ipaddress2, "ipaddress-2", "", "", "set ipaddress(#2)")
	fs.StringSliceVarP(&vpcrouterInterfaceUpdateParam.Alias, "alias", "", []string{}, "set ip aliases")
	fs.IntVarP(&vpcrouterInterfaceUpdateParam.NwMasklen, "nw-masklen", "", 24, "set ipaddress prefix")
}

var vpcrouterInterfaceDisconnectCmd = &cobra.Command{
	Use: "interface-disconnect",

	Short: "Disconnected to switch",
	Long:  `Disconnected to switch`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterInterfaceDisconnectParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-disconnect parameter: \n%s\n", debugMarshalIndent(vpcrouterInterfaceDisconnectParam))
		return err
	},
}

func vpcrouterInterfaceDisconnectCmdInit() {
	fs := vpcrouterInterfaceDisconnectCmd.Flags()
	fs.StringVarP(&vpcrouterInterfaceDisconnectParam.Interface, "interface", "", "", "index of target private-interface")
	fs.BoolVarP(&vpcrouterInterfaceDisconnectParam.WithReboot, "with-reboot", "", false, "reboot after connect")
}

var vpcrouterStaticNatInfoCmd = &cobra.Command{
	Use:     "static-nat-info",
	Aliases: []string{"static-nat-list"},
	Short:   "Show information of static NAT settings",
	Long:    `Show information of static NAT settings`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterStaticNatInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-nat-info parameter: \n%s\n", debugMarshalIndent(vpcrouterStaticNatInfoParam))
		return err
	},
}

func vpcrouterStaticNatInfoCmdInit() {
}

var vpcrouterStaticNatAddCmd = &cobra.Command{
	Use: "static-nat-add",

	Short: "Add static NAT",
	Long:  `Add static NAT`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterStaticNatAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-nat-add parameter: \n%s\n", debugMarshalIndent(vpcrouterStaticNatAddParam))
		return err
	},
}

func vpcrouterStaticNatAddCmdInit() {
	fs := vpcrouterStaticNatAddCmd.Flags()
	fs.StringVarP(&vpcrouterStaticNatAddParam.Global, "global", "", "", "set global ipaddress")
	fs.StringVarP(&vpcrouterStaticNatAddParam.Private, "private", "", "", "set private ipaddress")
	fs.StringVarP(&vpcrouterStaticNatAddParam.Description, "description", "", "", "set description")
}

var vpcrouterStaticNatUpdateCmd = &cobra.Command{
	Use: "static-nat-update",

	Short: "Update static NAT",
	Long:  `Update static NAT`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterStaticNatUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-nat-update parameter: \n%s\n", debugMarshalIndent(vpcrouterStaticNatUpdateParam))
		return err
	},
}

func vpcrouterStaticNatUpdateCmdInit() {
	fs := vpcrouterStaticNatUpdateCmd.Flags()
	fs.IntVarP(&vpcrouterStaticNatUpdateParam.Index, "index", "", 0, "index of target static NAT")
	fs.StringVarP(&vpcrouterStaticNatUpdateParam.Global, "global", "", "", "set global ipaddress")
	fs.StringVarP(&vpcrouterStaticNatUpdateParam.Private, "private", "", "", "set private ipaddress")
	fs.StringVarP(&vpcrouterStaticNatUpdateParam.Description, "description", "", "", "set description")
}

var vpcrouterStaticNatDeleteCmd = &cobra.Command{
	Use: "static-nat-delete",

	Short: "Delete static NAT",
	Long:  `Delete static NAT`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterStaticNatDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-nat-delete parameter: \n%s\n", debugMarshalIndent(vpcrouterStaticNatDeleteParam))
		return err
	},
}

func vpcrouterStaticNatDeleteCmdInit() {
	fs := vpcrouterStaticNatDeleteCmd.Flags()
	fs.IntVarP(&vpcrouterStaticNatDeleteParam.Index, "index", "", 0, "index of target static NAT")
}

var vpcrouterPortForwardingInfoCmd = &cobra.Command{
	Use:     "port-forwarding-info",
	Aliases: []string{"port-forwarding-list"},
	Short:   "Show information of port-forwarding settings",
	Long:    `Show information of port-forwarding settings`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterPortForwardingInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("port-forwarding-info parameter: \n%s\n", debugMarshalIndent(vpcrouterPortForwardingInfoParam))
		return err
	},
}

func vpcrouterPortForwardingInfoCmdInit() {
}

var vpcrouterPortForwardingAddCmd = &cobra.Command{
	Use: "port-forwarding-add",

	Short: "Add port forwarding",
	Long:  `Add port forwarding`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterPortForwardingAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("port-forwarding-add parameter: \n%s\n", debugMarshalIndent(vpcrouterPortForwardingAddParam))
		return err
	},
}

func vpcrouterPortForwardingAddCmdInit() {
	fs := vpcrouterPortForwardingAddCmd.Flags()
	fs.StringVarP(&vpcrouterPortForwardingAddParam.Protocol, "protocol", "", "", "set target protocol")
	fs.IntVarP(&vpcrouterPortForwardingAddParam.GlobalPort, "global-port", "", 0, "set global ipaddress")
	fs.StringVarP(&vpcrouterPortForwardingAddParam.PrivateIpaddress, "private-ipaddress", "", "", "set private ipaddress")
	fs.IntVarP(&vpcrouterPortForwardingAddParam.PrivatePort, "private-port", "", 0, "set private ipaddress")
	fs.StringVarP(&vpcrouterPortForwardingAddParam.Description, "description", "", "", "set description")
}

var vpcrouterPortForwardingUpdateCmd = &cobra.Command{
	Use: "port-forwarding-update",

	Short: "Update port forwarding",
	Long:  `Update port forwarding`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterPortForwardingUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("port-forwarding-update parameter: \n%s\n", debugMarshalIndent(vpcrouterPortForwardingUpdateParam))
		return err
	},
}

func vpcrouterPortForwardingUpdateCmdInit() {
	fs := vpcrouterPortForwardingUpdateCmd.Flags()
	fs.IntVarP(&vpcrouterPortForwardingUpdateParam.PrivatePort, "private-port", "", 0, "set private ipaddress")
	fs.StringVarP(&vpcrouterPortForwardingUpdateParam.Description, "description", "", "", "set description")
	fs.IntVarP(&vpcrouterPortForwardingUpdateParam.Index, "index", "", 0, "index of target PortForward")
	fs.StringVarP(&vpcrouterPortForwardingUpdateParam.Protocol, "protocol", "", "", "set target protocol")
	fs.IntVarP(&vpcrouterPortForwardingUpdateParam.GlobalPort, "global-port", "", 0, "set global ipaddress")
	fs.StringVarP(&vpcrouterPortForwardingUpdateParam.PrivateIpaddress, "private-ipaddress", "", "", "set private ipaddress")
}

var vpcrouterPortForwardingDeleteCmd = &cobra.Command{
	Use: "port-forwarding-delete",

	Short: "Delete port forwarding",
	Long:  `Delete port forwarding`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterPortForwardingDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("port-forwarding-delete parameter: \n%s\n", debugMarshalIndent(vpcrouterPortForwardingDeleteParam))
		return err
	},
}

func vpcrouterPortForwardingDeleteCmdInit() {
	fs := vpcrouterPortForwardingDeleteCmd.Flags()
	fs.IntVarP(&vpcrouterPortForwardingDeleteParam.Index, "index", "", 0, "index of target PortForward")
}

var vpcrouterFirewallInfoCmd = &cobra.Command{
	Use:     "firewall-info",
	Aliases: []string{"firewall-list"},
	Short:   "Show information of firewall rules",
	Long:    `Show information of firewall rules`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterFirewallInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("firewall-info parameter: \n%s\n", debugMarshalIndent(vpcrouterFirewallInfoParam))
		return err
	},
}

func vpcrouterFirewallInfoCmdInit() {
	fs := vpcrouterFirewallInfoCmd.Flags()
	fs.IntVarP(&vpcrouterFirewallInfoParam.Interface, "interface", "", 0, "set target NIC index")
	fs.StringVarP(&vpcrouterFirewallInfoParam.Direction, "direction", "", "receive", "set target direction[send/receive]")
}

var vpcrouterFirewallAddCmd = &cobra.Command{
	Use: "firewall-add",

	Short: "Add firewall rule",
	Long:  `Add firewall rule`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterFirewallAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("firewall-add parameter: \n%s\n", debugMarshalIndent(vpcrouterFirewallAddParam))
		return err
	},
}

func vpcrouterFirewallAddCmdInit() {
	fs := vpcrouterFirewallAddCmd.Flags()
	fs.StringVarP(&vpcrouterFirewallAddParam.Direction, "direction", "", "receive", "set target direction[send/receive]")
	fs.StringVarP(&vpcrouterFirewallAddParam.SourceNetwork, "source-network", "", "", "set source ipaddress or network address")
	fs.StringVarP(&vpcrouterFirewallAddParam.DestinationNetwork, "destination-network", "", "", "set destination ipaddress or network address")
	fs.IntVarP(&vpcrouterFirewallAddParam.DestinationPort, "destination-port", "", 0, "set destination port")
	fs.StringVarP(&vpcrouterFirewallAddParam.Action, "action", "", "deny", "set action[allow/deny]")
	fs.BoolVarP(&vpcrouterFirewallAddParam.EnableLogging, "enable-logging", "", false, "enable logging")
	fs.StringVarP(&vpcrouterFirewallAddParam.Description, "description", "", "", "set description")
	fs.IntVarP(&vpcrouterFirewallAddParam.Interface, "interface", "", 0, "set target NIC index")
	fs.IntVarP(&vpcrouterFirewallAddParam.SourcePort, "source-port", "", 0, "set source port")
	fs.StringVarP(&vpcrouterFirewallAddParam.Protocol, "protocol", "", "", "set target protocol")
}

var vpcrouterFirewallUpdateCmd = &cobra.Command{
	Use: "firewall-update",

	Short: "Update firewall rule",
	Long:  `Update firewall rule`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterFirewallUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("firewall-update parameter: \n%s\n", debugMarshalIndent(vpcrouterFirewallUpdateParam))
		return err
	},
}

func vpcrouterFirewallUpdateCmdInit() {
	fs := vpcrouterFirewallUpdateCmd.Flags()
	fs.IntVarP(&vpcrouterFirewallUpdateParam.Interface, "interface", "", 0, "set target NIC index")
	fs.IntVarP(&vpcrouterFirewallUpdateParam.Index, "index", "", 0, "index of target Firewall rule")
	fs.StringVarP(&vpcrouterFirewallUpdateParam.Protocol, "protocol", "", "", "set target protocol")
	fs.StringVarP(&vpcrouterFirewallUpdateParam.SourceNetwork, "source-network", "", "", "set source ipaddress or network address")
	fs.StringVarP(&vpcrouterFirewallUpdateParam.DestinationNetwork, "destination-network", "", "", "set destination ipaddress or network address")
	fs.StringVarP(&vpcrouterFirewallUpdateParam.Direction, "direction", "", "receive", "set target direction[send/receive]")
	fs.IntVarP(&vpcrouterFirewallUpdateParam.SourcePort, "source-port", "", 0, "set source port")
	fs.IntVarP(&vpcrouterFirewallUpdateParam.DestinationPort, "destination-port", "", 0, "set destination port")
	fs.StringVarP(&vpcrouterFirewallUpdateParam.Action, "action", "", "deny", "set action[allow/deny]")
	fs.BoolVarP(&vpcrouterFirewallUpdateParam.EnableLogging, "enable-logging", "", false, "enable logging")
	fs.StringVarP(&vpcrouterFirewallUpdateParam.Description, "description", "", "", "set description")
}

var vpcrouterFirewallDeleteCmd = &cobra.Command{
	Use: "firewall-delete",

	Short: "Delete firewall rule",
	Long:  `Delete firewall rule`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterFirewallDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("firewall-delete parameter: \n%s\n", debugMarshalIndent(vpcrouterFirewallDeleteParam))
		return err
	},
}

func vpcrouterFirewallDeleteCmdInit() {
	fs := vpcrouterFirewallDeleteCmd.Flags()
	fs.IntVarP(&vpcrouterFirewallDeleteParam.Interface, "interface", "", 0, "set target NIC index")
	fs.StringVarP(&vpcrouterFirewallDeleteParam.Direction, "direction", "", "receive", "set target direction[send/receive]")
	fs.IntVarP(&vpcrouterFirewallDeleteParam.Index, "index", "", 0, "index of target Firewall rule")
}

var vpcrouterDhcpServerInfoCmd = &cobra.Command{
	Use:     "dhcp-server-info",
	Aliases: []string{"dhcp-server-list"},
	Short:   "Show information of DHCP servers",
	Long:    `Show information of DHCP servers`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterDhcpServerInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-server-info parameter: \n%s\n", debugMarshalIndent(vpcrouterDhcpServerInfoParam))
		return err
	},
}

func vpcrouterDhcpServerInfoCmdInit() {
}

var vpcrouterDhcpServerAddCmd = &cobra.Command{
	Use: "dhcp-server-add",

	Short: "Add DHCP server",
	Long:  `Add DHCP server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterDhcpServerAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-server-add parameter: \n%s\n", debugMarshalIndent(vpcrouterDhcpServerAddParam))
		return err
	},
}

func vpcrouterDhcpServerAddCmdInit() {
	fs := vpcrouterDhcpServerAddCmd.Flags()
	fs.IntVarP(&vpcrouterDhcpServerAddParam.Interface, "interface", "", 0, "set target NIC(private NIC index)")
	fs.StringVarP(&vpcrouterDhcpServerAddParam.RangeStart, "range-start", "", "", "set DHCP IPAddress Range(start)")
	fs.StringVarP(&vpcrouterDhcpServerAddParam.RangeStop, "range-stop", "", "", "set DHCP IPAddress Range(stop)")
	fs.StringSliceVarP(&vpcrouterDhcpServerAddParam.DnsServers, "dns-servers", "", []string{}, "set DNS Server IPAddress")
}

var vpcrouterDhcpServerUpdateCmd = &cobra.Command{
	Use: "dhcp-server-update",

	Short: "Update DHCP server",
	Long:  `Update DHCP server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterDhcpServerUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-server-update parameter: \n%s\n", debugMarshalIndent(vpcrouterDhcpServerUpdateParam))
		return err
	},
}

func vpcrouterDhcpServerUpdateCmdInit() {
	fs := vpcrouterDhcpServerUpdateCmd.Flags()
	fs.IntVarP(&vpcrouterDhcpServerUpdateParam.Interface, "interface", "", 0, "set target NIC(private NIC index)")
	fs.StringVarP(&vpcrouterDhcpServerUpdateParam.RangeStart, "range-start", "", "", "set DHCP IPAddress Range(start)")
	fs.StringVarP(&vpcrouterDhcpServerUpdateParam.RangeStop, "range-stop", "", "", "set DHCP IPAddress Range(stop)")
	fs.StringSliceVarP(&vpcrouterDhcpServerUpdateParam.DnsServers, "dns-servers", "", []string{}, "set DNS Server IPAddress")
}

var vpcrouterDhcpServerDeleteCmd = &cobra.Command{
	Use: "dhcp-server-delete",

	Short: "Delete DHCP server",
	Long:  `Delete DHCP server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterDhcpServerDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-server-delete parameter: \n%s\n", debugMarshalIndent(vpcrouterDhcpServerDeleteParam))
		return err
	},
}

func vpcrouterDhcpServerDeleteCmdInit() {
	fs := vpcrouterDhcpServerDeleteCmd.Flags()
	fs.IntVarP(&vpcrouterDhcpServerDeleteParam.Interface, "interface", "", 0, "set target NIC(private NIC index)")
}

var vpcrouterDhcpStaticMappingInfoCmd = &cobra.Command{
	Use:     "dhcp-static-mapping-info",
	Aliases: []string{"dhcp-static-mapping-list"},
	Short:   "Show information of DHCP static mapping",
	Long:    `Show information of DHCP static mapping`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterDhcpStaticMappingInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-static-mapping-info parameter: \n%s\n", debugMarshalIndent(vpcrouterDhcpStaticMappingInfoParam))
		return err
	},
}

func vpcrouterDhcpStaticMappingInfoCmdInit() {
}

var vpcrouterDhcpStaticMappingAddCmd = &cobra.Command{
	Use: "dhcp-static-mapping-add",

	Short: "Add DHCP static mapping",
	Long:  `Add DHCP static mapping`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterDhcpStaticMappingAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-static-mapping-add parameter: \n%s\n", debugMarshalIndent(vpcrouterDhcpStaticMappingAddParam))
		return err
	},
}

func vpcrouterDhcpStaticMappingAddCmdInit() {
	fs := vpcrouterDhcpStaticMappingAddCmd.Flags()
	fs.StringVarP(&vpcrouterDhcpStaticMappingAddParam.Macaddress, "macaddress", "", "", "set mac address")
	fs.StringVarP(&vpcrouterDhcpStaticMappingAddParam.Ipaddress, "ipaddress", "", "", "set ipaddress")
}

var vpcrouterDhcpStaticMappingUpdateCmd = &cobra.Command{
	Use: "dhcp-static-mapping-update",

	Short: "Update DHCP static mapping",
	Long:  `Update DHCP static mapping`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterDhcpStaticMappingUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-static-mapping-update parameter: \n%s\n", debugMarshalIndent(vpcrouterDhcpStaticMappingUpdateParam))
		return err
	},
}

func vpcrouterDhcpStaticMappingUpdateCmdInit() {
	fs := vpcrouterDhcpStaticMappingUpdateCmd.Flags()
	fs.IntVarP(&vpcrouterDhcpStaticMappingUpdateParam.Index, "index", "", 0, "index of target DHCP static mapping")
	fs.StringVarP(&vpcrouterDhcpStaticMappingUpdateParam.Macaddress, "macaddress", "", "", "set mac address")
	fs.StringVarP(&vpcrouterDhcpStaticMappingUpdateParam.Ipaddress, "ipaddress", "", "", "set ipaddress")
}

var vpcrouterDhcpStaticMappingDeleteCmd = &cobra.Command{
	Use: "dhcp-static-mapping-delete",

	Short: "Delete DHCP static mapping",
	Long:  `Delete DHCP static mapping`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterDhcpStaticMappingDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dhcp-static-mapping-delete parameter: \n%s\n", debugMarshalIndent(vpcrouterDhcpStaticMappingDeleteParam))
		return err
	},
}

func vpcrouterDhcpStaticMappingDeleteCmdInit() {
	fs := vpcrouterDhcpStaticMappingDeleteCmd.Flags()
	fs.IntVarP(&vpcrouterDhcpStaticMappingDeleteParam.Index, "index", "", 0, "index of target DHCP static mapping")
}

var vpcrouterPptpServerInfoCmd = &cobra.Command{
	Use: "pptp-server-info",

	Short: "Show information of PPTP server",
	Long:  `Show information of PPTP server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterPptpServerInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("pptp-server-info parameter: \n%s\n", debugMarshalIndent(vpcrouterPptpServerInfoParam))
		return err
	},
}

func vpcrouterPptpServerInfoCmdInit() {
}

var vpcrouterPptpServerUpdateCmd = &cobra.Command{
	Use: "pptp-server-update",

	Short: "Update PPTP server setting",
	Long:  `Update PPTP server setting`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterPptpServerUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("pptp-server-update parameter: \n%s\n", debugMarshalIndent(vpcrouterPptpServerUpdateParam))
		return err
	},
}

func vpcrouterPptpServerUpdateCmdInit() {
	fs := vpcrouterPptpServerUpdateCmd.Flags()
	fs.BoolVarP(&vpcrouterPptpServerUpdateParam.Disabled, "disabled", "", false, "enable/disable PPTP server")
	fs.StringVarP(&vpcrouterPptpServerUpdateParam.RangeStart, "range-start", "", "", "set IPAddress Range(start)")
	fs.StringVarP(&vpcrouterPptpServerUpdateParam.RangeStop, "range-stop", "", "", "set IPAddress Range(stop)")
}

var vpcrouterL2tpServerInfoCmd = &cobra.Command{
	Use: "l2tp-server-info",

	Short: "Show information of L2TP/IPSec server",
	Long:  `Show information of L2TP/IPSec server`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterL2tpServerInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("l2tp-server-info parameter: \n%s\n", debugMarshalIndent(vpcrouterL2tpServerInfoParam))
		return err
	},
}

func vpcrouterL2tpServerInfoCmdInit() {
}

var vpcrouterL2tpServerUpdateCmd = &cobra.Command{
	Use: "l2tp-server-update",

	Short: "Update L2TP/IPSec server setting",
	Long:  `Update L2TP/IPSec server setting`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterL2tpServerUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("l2tp-server-update parameter: \n%s\n", debugMarshalIndent(vpcrouterL2tpServerUpdateParam))
		return err
	},
}

func vpcrouterL2tpServerUpdateCmdInit() {
	fs := vpcrouterL2tpServerUpdateCmd.Flags()
	fs.BoolVarP(&vpcrouterL2tpServerUpdateParam.Disabled, "disabled", "", false, "enable/disable PPTP server")
	fs.StringVarP(&vpcrouterL2tpServerUpdateParam.RangeStart, "range-start", "", "", "set IPAddress Range(start)")
	fs.StringVarP(&vpcrouterL2tpServerUpdateParam.RangeStop, "range-stop", "", "", "set IPAddress Range(stop)")
	fs.StringVarP(&vpcrouterL2tpServerUpdateParam.PreSharedSecret, "pre-shared-secret", "", "", "set PreSharedSecret")
}

var vpcrouterUserInfoCmd = &cobra.Command{
	Use:     "user-info",
	Aliases: []string{"user-list"},
	Short:   "Show information of remote-access users",
	Long:    `Show information of remote-access users`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterUserInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("user-info parameter: \n%s\n", debugMarshalIndent(vpcrouterUserInfoParam))
		return err
	},
}

func vpcrouterUserInfoCmdInit() {
}

var vpcrouterUserAddCmd = &cobra.Command{
	Use: "user-add",

	Short: "Add remote-access user",
	Long:  `Add remote-access user`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterUserAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("user-add parameter: \n%s\n", debugMarshalIndent(vpcrouterUserAddParam))
		return err
	},
}

func vpcrouterUserAddCmdInit() {
	fs := vpcrouterUserAddCmd.Flags()
	fs.StringVarP(&vpcrouterUserAddParam.Username, "username", "", "", "set remote-access username")
	fs.StringVarP(&vpcrouterUserAddParam.Password, "password", "", "", "set remote-access password")
}

var vpcrouterUserUpdateCmd = &cobra.Command{
	Use: "user-update",

	Short: "Update remote-access user",
	Long:  `Update remote-access user`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterUserUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("user-update parameter: \n%s\n", debugMarshalIndent(vpcrouterUserUpdateParam))
		return err
	},
}

func vpcrouterUserUpdateCmdInit() {
	fs := vpcrouterUserUpdateCmd.Flags()
	fs.IntVarP(&vpcrouterUserUpdateParam.Index, "index", "", 0, "index of target remote-access user")
	fs.StringVarP(&vpcrouterUserUpdateParam.Username, "username", "", "", "set remote-access username")
	fs.StringVarP(&vpcrouterUserUpdateParam.Password, "password", "", "", "set remote-access password")
}

var vpcrouterUserDeleteCmd = &cobra.Command{
	Use: "user-delete",

	Short: "Delete remote-access user",
	Long:  `Delete remote-access user`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterUserDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("user-delete parameter: \n%s\n", debugMarshalIndent(vpcrouterUserDeleteParam))
		return err
	},
}

func vpcrouterUserDeleteCmdInit() {
	fs := vpcrouterUserDeleteCmd.Flags()
	fs.IntVarP(&vpcrouterUserDeleteParam.Index, "index", "", 0, "index of target remote-access user")
}

var vpcrouterSiteToSiteVpnInfoCmd = &cobra.Command{
	Use:     "site-to-site-vpn-info",
	Aliases: []string{"site-to-site-vpn-list"},
	Short:   "Show information of site-to-site IPSec VPN settings",
	Long:    `Show information of site-to-site IPSec VPN settings`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterSiteToSiteVpnInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("site-to-site-vpn-info parameter: \n%s\n", debugMarshalIndent(vpcrouterSiteToSiteVpnInfoParam))
		return err
	},
}

func vpcrouterSiteToSiteVpnInfoCmdInit() {
}

var vpcrouterSiteToSiteVpnAddCmd = &cobra.Command{
	Use: "site-to-site-vpn-add",

	Short: "Add site-to-site IPSec VPN setting",
	Long:  `Add site-to-site IPSec VPN setting`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterSiteToSiteVpnAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("site-to-site-vpn-add parameter: \n%s\n", debugMarshalIndent(vpcrouterSiteToSiteVpnAddParam))
		return err
	},
}

func vpcrouterSiteToSiteVpnAddCmdInit() {
	fs := vpcrouterSiteToSiteVpnAddCmd.Flags()
	fs.StringVarP(&vpcrouterSiteToSiteVpnAddParam.Peer, "peer", "", "", "set peer address")
	fs.StringVarP(&vpcrouterSiteToSiteVpnAddParam.RemoteId, "remote-id", "", "", "set remote-id")
	fs.StringVarP(&vpcrouterSiteToSiteVpnAddParam.PreSharedSecret, "pre-shared-secret", "", "", "set pre-shared-secret")
	fs.StringSliceVarP(&vpcrouterSiteToSiteVpnAddParam.Routes, "routes", "", []string{}, "set route list")
	fs.StringSliceVarP(&vpcrouterSiteToSiteVpnAddParam.LocalPrefix, "local-prefix", "", []string{}, "set local prefix list")
}

var vpcrouterSiteToSiteVpnUpdateCmd = &cobra.Command{
	Use: "site-to-site-vpn-update",

	Short: "Update site-to-site IPSec VPN setting",
	Long:  `Update site-to-site IPSec VPN setting`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterSiteToSiteVpnUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("site-to-site-vpn-update parameter: \n%s\n", debugMarshalIndent(vpcrouterSiteToSiteVpnUpdateParam))
		return err
	},
}

func vpcrouterSiteToSiteVpnUpdateCmdInit() {
	fs := vpcrouterSiteToSiteVpnUpdateCmd.Flags()
	fs.StringSliceVarP(&vpcrouterSiteToSiteVpnUpdateParam.Routes, "routes", "", []string{}, "set route list")
	fs.StringSliceVarP(&vpcrouterSiteToSiteVpnUpdateParam.LocalPrefix, "local-prefix", "", []string{}, "set local prefix list")
	fs.IntVarP(&vpcrouterSiteToSiteVpnUpdateParam.Index, "index", "", 0, "index of target remote-access user")
	fs.StringVarP(&vpcrouterSiteToSiteVpnUpdateParam.Peer, "peer", "", "", "set peer address")
	fs.StringVarP(&vpcrouterSiteToSiteVpnUpdateParam.RemoteId, "remote-id", "", "", "set remote-id")
	fs.StringVarP(&vpcrouterSiteToSiteVpnUpdateParam.PreSharedSecret, "pre-shared-secret", "", "", "set pre-shared-secret")
}

var vpcrouterSiteToSiteVpnDeleteCmd = &cobra.Command{
	Use: "site-to-site-vpn-delete",

	Short: "Delete site-to-site IPSec VPN setting",
	Long:  `Delete site-to-site IPSec VPN setting`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterSiteToSiteVpnDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("site-to-site-vpn-delete parameter: \n%s\n", debugMarshalIndent(vpcrouterSiteToSiteVpnDeleteParam))
		return err
	},
}

func vpcrouterSiteToSiteVpnDeleteCmdInit() {
	fs := vpcrouterSiteToSiteVpnDeleteCmd.Flags()
	fs.IntVarP(&vpcrouterSiteToSiteVpnDeleteParam.Index, "index", "", 0, "index of target remote-access user")
}

var vpcrouterSiteToSiteVpnPeersCmd = &cobra.Command{
	Use: "site-to-site-vpn-peers",

	Short: "Show status of site-to-site IPSec VPN peers",
	Long:  `Show status of site-to-site IPSec VPN peers`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterSiteToSiteVpnPeersParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("site-to-site-vpn-peers parameter: \n%s\n", debugMarshalIndent(vpcrouterSiteToSiteVpnPeersParam))
		return err
	},
}

func vpcrouterSiteToSiteVpnPeersCmdInit() {
}

var vpcrouterStaticRouteInfoCmd = &cobra.Command{
	Use:     "static-route-info",
	Aliases: []string{"static-route-list"},
	Short:   "Show information of static-routes",
	Long:    `Show information of static-routes`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterStaticRouteInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-route-info parameter: \n%s\n", debugMarshalIndent(vpcrouterStaticRouteInfoParam))
		return err
	},
}

func vpcrouterStaticRouteInfoCmdInit() {
}

var vpcrouterStaticRouteAddCmd = &cobra.Command{
	Use: "static-route-add",

	Short: "Add static-route",
	Long:  `Add static-route`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterStaticRouteAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-route-add parameter: \n%s\n", debugMarshalIndent(vpcrouterStaticRouteAddParam))
		return err
	},
}

func vpcrouterStaticRouteAddCmdInit() {
	fs := vpcrouterStaticRouteAddCmd.Flags()
	fs.StringVarP(&vpcrouterStaticRouteAddParam.Prefix, "prefix", "", "", "set prefix")
	fs.StringVarP(&vpcrouterStaticRouteAddParam.NextHop, "next-hop", "", "", "set next-hop")
}

var vpcrouterStaticRouteUpdateCmd = &cobra.Command{
	Use: "static-route-update",

	Short: "Update static-route",
	Long:  `Update static-route`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterStaticRouteUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-route-update parameter: \n%s\n", debugMarshalIndent(vpcrouterStaticRouteUpdateParam))
		return err
	},
}

func vpcrouterStaticRouteUpdateCmdInit() {
	fs := vpcrouterStaticRouteUpdateCmd.Flags()
	fs.IntVarP(&vpcrouterStaticRouteUpdateParam.Index, "index", "", 0, "index of target static-route")
	fs.StringVarP(&vpcrouterStaticRouteUpdateParam.Prefix, "prefix", "", "", "set prefix")
	fs.StringVarP(&vpcrouterStaticRouteUpdateParam.NextHop, "next-hop", "", "", "set next-hop")
}

var vpcrouterStaticRouteDeleteCmd = &cobra.Command{
	Use: "static-route-delete",

	Short: "Delete static-route",
	Long:  `Delete static-route`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterStaticRouteDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-route-delete parameter: \n%s\n", debugMarshalIndent(vpcrouterStaticRouteDeleteParam))
		return err
	},
}

func vpcrouterStaticRouteDeleteCmdInit() {
	fs := vpcrouterStaticRouteDeleteCmd.Flags()
	fs.IntVarP(&vpcrouterStaticRouteDeleteParam.Index, "index", "", 0, "index of target static-route")
}

var vpcrouterMonitorCmd = &cobra.Command{
	Use: "monitor",

	Short: "Monitor Vpcrouter",
	Long:  `Monitor Vpcrouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterMonitorParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("monitor parameter: \n%s\n", debugMarshalIndent(vpcrouterMonitorParam))
		return err
	},
}

func vpcrouterMonitorCmdInit() {
	fs := vpcrouterMonitorCmd.Flags()
	fs.StringVarP(&vpcrouterMonitorParam.End, "end", "", "", "set end-time")
	fs.StringVarP(&vpcrouterMonitorParam.KeyFormat, "key-format", "", "sakuracloud.vpcrouter.{{.ID}}.nic.{{.Index}}", "set monitoring value key-format")
	fs.StringVarP(&vpcrouterMonitorParam.Interface, "interface", "", "0", "index of target interface")
	fs.StringVarP(&vpcrouterMonitorParam.Start, "start", "", "", "set start-time")
}

var vpcrouterLogsCmd = &cobra.Command{
	Use: "logs",

	Short: "Logs Vpcrouter",
	Long:  `Logs Vpcrouter`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := vpcrouterLogsParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("logs parameter: \n%s\n", debugMarshalIndent(vpcrouterLogsParam))
		return err
	},
}

func vpcrouterLogsCmdInit() {
	fs := vpcrouterLogsCmd.Flags()
	fs.Int64VarP(&vpcrouterLogsParam.RefreshInterval, "refresh-interval", "", 3, "log refresh interval second")
	fs.BoolVarP(&vpcrouterLogsParam.ListLogNames, "list-log-names", "", false, "show log-name list")
	fs.StringVarP(&vpcrouterLogsParam.LogName, "log-name", "", "all", "set target logfile name")
	fs.BoolVarP(&vpcrouterLogsParam.Follow, "follow", "f", false, "follow log output")
}

func init() {
	parent := vpcrouterCmd

	vpcrouterListCmdInit()
	parent.AddCommand(vpcrouterListCmd)

	vpcrouterCreateCmdInit()
	parent.AddCommand(vpcrouterCreateCmd)

	vpcrouterReadCmdInit()
	parent.AddCommand(vpcrouterReadCmd)

	vpcrouterUpdateCmdInit()
	parent.AddCommand(vpcrouterUpdateCmd)

	vpcrouterDeleteCmdInit()
	parent.AddCommand(vpcrouterDeleteCmd)

	vpcrouterBootCmdInit()
	parent.AddCommand(vpcrouterBootCmd)

	vpcrouterShutdownCmdInit()
	parent.AddCommand(vpcrouterShutdownCmd)

	vpcrouterShutdownForceCmdInit()
	parent.AddCommand(vpcrouterShutdownForceCmd)

	vpcrouterResetCmdInit()
	parent.AddCommand(vpcrouterResetCmd)

	vpcrouterWaitForBootCmdInit()
	parent.AddCommand(vpcrouterWaitForBootCmd)

	vpcrouterWaitForDownCmdInit()
	parent.AddCommand(vpcrouterWaitForDownCmd)

	vpcrouterEnableInternetConnectionCmdInit()
	parent.AddCommand(vpcrouterEnableInternetConnectionCmd)

	vpcrouterDisableInternetConnectionCmdInit()
	parent.AddCommand(vpcrouterDisableInternetConnectionCmd)

	vpcrouterInterfaceInfoCmdInit()
	parent.AddCommand(vpcrouterInterfaceInfoCmd)

	vpcrouterInterfaceConnectCmdInit()
	parent.AddCommand(vpcrouterInterfaceConnectCmd)

	vpcrouterInterfaceUpdateCmdInit()
	parent.AddCommand(vpcrouterInterfaceUpdateCmd)

	vpcrouterInterfaceDisconnectCmdInit()
	parent.AddCommand(vpcrouterInterfaceDisconnectCmd)

	vpcrouterStaticNatInfoCmdInit()
	parent.AddCommand(vpcrouterStaticNatInfoCmd)

	vpcrouterStaticNatAddCmdInit()
	parent.AddCommand(vpcrouterStaticNatAddCmd)

	vpcrouterStaticNatUpdateCmdInit()
	parent.AddCommand(vpcrouterStaticNatUpdateCmd)

	vpcrouterStaticNatDeleteCmdInit()
	parent.AddCommand(vpcrouterStaticNatDeleteCmd)

	vpcrouterPortForwardingInfoCmdInit()
	parent.AddCommand(vpcrouterPortForwardingInfoCmd)

	vpcrouterPortForwardingAddCmdInit()
	parent.AddCommand(vpcrouterPortForwardingAddCmd)

	vpcrouterPortForwardingUpdateCmdInit()
	parent.AddCommand(vpcrouterPortForwardingUpdateCmd)

	vpcrouterPortForwardingDeleteCmdInit()
	parent.AddCommand(vpcrouterPortForwardingDeleteCmd)

	vpcrouterFirewallInfoCmdInit()
	parent.AddCommand(vpcrouterFirewallInfoCmd)

	vpcrouterFirewallAddCmdInit()
	parent.AddCommand(vpcrouterFirewallAddCmd)

	vpcrouterFirewallUpdateCmdInit()
	parent.AddCommand(vpcrouterFirewallUpdateCmd)

	vpcrouterFirewallDeleteCmdInit()
	parent.AddCommand(vpcrouterFirewallDeleteCmd)

	vpcrouterDhcpServerInfoCmdInit()
	parent.AddCommand(vpcrouterDhcpServerInfoCmd)

	vpcrouterDhcpServerAddCmdInit()
	parent.AddCommand(vpcrouterDhcpServerAddCmd)

	vpcrouterDhcpServerUpdateCmdInit()
	parent.AddCommand(vpcrouterDhcpServerUpdateCmd)

	vpcrouterDhcpServerDeleteCmdInit()
	parent.AddCommand(vpcrouterDhcpServerDeleteCmd)

	vpcrouterDhcpStaticMappingInfoCmdInit()
	parent.AddCommand(vpcrouterDhcpStaticMappingInfoCmd)

	vpcrouterDhcpStaticMappingAddCmdInit()
	parent.AddCommand(vpcrouterDhcpStaticMappingAddCmd)

	vpcrouterDhcpStaticMappingUpdateCmdInit()
	parent.AddCommand(vpcrouterDhcpStaticMappingUpdateCmd)

	vpcrouterDhcpStaticMappingDeleteCmdInit()
	parent.AddCommand(vpcrouterDhcpStaticMappingDeleteCmd)

	vpcrouterPptpServerInfoCmdInit()
	parent.AddCommand(vpcrouterPptpServerInfoCmd)

	vpcrouterPptpServerUpdateCmdInit()
	parent.AddCommand(vpcrouterPptpServerUpdateCmd)

	vpcrouterL2tpServerInfoCmdInit()
	parent.AddCommand(vpcrouterL2tpServerInfoCmd)

	vpcrouterL2tpServerUpdateCmdInit()
	parent.AddCommand(vpcrouterL2tpServerUpdateCmd)

	vpcrouterUserInfoCmdInit()
	parent.AddCommand(vpcrouterUserInfoCmd)

	vpcrouterUserAddCmdInit()
	parent.AddCommand(vpcrouterUserAddCmd)

	vpcrouterUserUpdateCmdInit()
	parent.AddCommand(vpcrouterUserUpdateCmd)

	vpcrouterUserDeleteCmdInit()
	parent.AddCommand(vpcrouterUserDeleteCmd)

	vpcrouterSiteToSiteVpnInfoCmdInit()
	parent.AddCommand(vpcrouterSiteToSiteVpnInfoCmd)

	vpcrouterSiteToSiteVpnAddCmdInit()
	parent.AddCommand(vpcrouterSiteToSiteVpnAddCmd)

	vpcrouterSiteToSiteVpnUpdateCmdInit()
	parent.AddCommand(vpcrouterSiteToSiteVpnUpdateCmd)

	vpcrouterSiteToSiteVpnDeleteCmdInit()
	parent.AddCommand(vpcrouterSiteToSiteVpnDeleteCmd)

	vpcrouterSiteToSiteVpnPeersCmdInit()
	parent.AddCommand(vpcrouterSiteToSiteVpnPeersCmd)

	vpcrouterStaticRouteInfoCmdInit()
	parent.AddCommand(vpcrouterStaticRouteInfoCmd)

	vpcrouterStaticRouteAddCmdInit()
	parent.AddCommand(vpcrouterStaticRouteAddCmd)

	vpcrouterStaticRouteUpdateCmdInit()
	parent.AddCommand(vpcrouterStaticRouteUpdateCmd)

	vpcrouterStaticRouteDeleteCmdInit()
	parent.AddCommand(vpcrouterStaticRouteDeleteCmd)

	vpcrouterMonitorCmdInit()
	parent.AddCommand(vpcrouterMonitorCmd)

	vpcrouterLogsCmdInit()
	parent.AddCommand(vpcrouterLogsCmd)

	rootCmd.AddCommand(parent)
}

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

// bridgeCmd represents the bridge command
var bridgeCmd = &cobra.Command{
	Use:   "bridge",
	Short: "A manage commands of Bridge",
	Long:  `A manage commands of Bridge`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var bridgeListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find"},
	Short:   "List Bridge",
	Long:    `List Bridge`,
	RunE: func(cmd *cobra.Command, args []string) error {
		listParam, err := params.NewListBridgeParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(listParam))
		return err
	},
}

var bridgeCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create Bridge",
	Long:  `Create Bridge`,
	RunE: func(cmd *cobra.Command, args []string) error {
		createParam, err := params.NewCreateBridgeParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(createParam))
		return err
	},
}

var bridgeReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Bridge",
	Long:  `Read Bridge`,
	RunE: func(cmd *cobra.Command, args []string) error {
		readParam, err := params.NewReadBridgeParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(readParam))
		return err
	},
}

var bridgeUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update Bridge",
	Long:  `Update Bridge`,
	RunE: func(cmd *cobra.Command, args []string) error {
		updateParam, err := params.NewUpdateBridgeParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(updateParam))
		return err
	},
}

var bridgeDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Bridge",
	Long:    `Delete Bridge`,
	RunE: func(cmd *cobra.Command, args []string) error {
		deleteParam, err := params.NewDeleteBridgeParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(deleteParam))
		return err
	},
}

func init() {
	parent := bridgeCmd
	parent.AddCommand(bridgeListCmd)
	parent.AddCommand(bridgeCreateCmd)
	parent.AddCommand(bridgeReadCmd)
	parent.AddCommand(bridgeUpdateCmd)
	parent.AddCommand(bridgeDeleteCmd)
	rootCmd.AddCommand(bridgeCmd)
}

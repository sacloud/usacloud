// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	startupScriptListParam   = params.NewListStartupScriptParam()
	startupScriptCreateParam = params.NewCreateStartupScriptParam()
	startupScriptReadParam   = params.NewReadStartupScriptParam()
	startupScriptUpdateParam = params.NewUpdateStartupScriptParam()
	startupScriptDeleteParam = params.NewDeleteStartupScriptParam()
)

// startupScriptCmd represents the command to manage SAKURAÂ Cloud StartupScript
var startupScriptCmd = &cobra.Command{
	Use:   "startupScript",
	Short: "A manage commands of StartupScript",
	Long:  `A manage commands of StartupScript`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var startupScriptListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List StartupScript",
	Long:    `List StartupScript`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := startupScriptListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(startupScriptListParam))
		return err
	},
}

func startupScriptListCmdInit() {
	fs := startupScriptListCmd.Flags()
	fs.IntVarP(&startupScriptListParam.Max, "max", "", 0, "set limit")
	fs.StringSliceVarP(&startupScriptListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringVarP(&startupScriptListParam.Scope, "scope", "", "", "set filter by scope('user' or 'shared')")
	fs.StringSliceVarP(&startupScriptListParam.Tags, "tags", "", []string{}, "set filter by tags(AND)")
	fs.StringSliceVarP(&startupScriptListParam.Class, "class", "", []string{}, "set filter by class(es)")
	fs.StringSliceVarP(&startupScriptListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &startupScriptListParam.Id), "id", "", "set filter by id(s)")
	fs.IntVarP(&startupScriptListParam.From, "from", "", 0, "set offset")
}

var startupScriptCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create StartupScript",
	Long:  `Create StartupScript`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := startupScriptCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(startupScriptCreateParam))
		return err
	},
}

func startupScriptCreateCmdInit() {
	fs := startupScriptCreateCmd.Flags()
	fs.StringVarP(&startupScriptCreateParam.Name, "name", "", "", "set resource display name")
	fs.StringSliceVarP(&startupScriptCreateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &startupScriptCreateParam.IconId), "icon-id", "", "set Icon ID")
	fs.StringVarP(&startupScriptCreateParam.ScriptContent, "script-content", "", "", "set script content")
	fs.StringVarP(&startupScriptCreateParam.Script, "script", "", "", "set script from file")
	fs.StringVarP(&startupScriptCreateParam.Class, "class", "", "shell", "set script class[shell/cloud-config-yaml]")
}

var startupScriptReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read StartupScript",
	Long:  `Read StartupScript`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := startupScriptReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(startupScriptReadParam))
		return err
	},
}

func startupScriptReadCmdInit() {
}

var startupScriptUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update StartupScript",
	Long:  `Update StartupScript`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := startupScriptUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(startupScriptUpdateParam))
		return err
	},
}

func startupScriptUpdateCmdInit() {
	fs := startupScriptUpdateCmd.Flags()
	fs.StringSliceVarP(&startupScriptUpdateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &startupScriptUpdateParam.IconId), "icon-id", "", "set Icon ID")
	fs.StringVarP(&startupScriptUpdateParam.ScriptContent, "script-content", "", "", "set script content")
	fs.StringVarP(&startupScriptUpdateParam.Script, "script", "", "", "set script from file")
	fs.StringVarP(&startupScriptUpdateParam.Class, "class", "", "", "set script class[shell/cloud-config-yaml]")
	fs.StringVarP(&startupScriptUpdateParam.Name, "name", "", "", "set resource display name")
}

var startupScriptDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete StartupScript",
	Long:    `Delete StartupScript`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := startupScriptDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(startupScriptDeleteParam))
		return err
	},
}

func startupScriptDeleteCmdInit() {
}

func init() {
	parent := startupScriptCmd

	startupScriptListCmdInit()
	parent.AddCommand(startupScriptListCmd)

	startupScriptCreateCmdInit()
	parent.AddCommand(startupScriptCreateCmd)

	startupScriptReadCmdInit()
	parent.AddCommand(startupScriptReadCmd)

	startupScriptUpdateCmdInit()
	parent.AddCommand(startupScriptUpdateCmd)

	startupScriptDeleteCmdInit()
	parent.AddCommand(startupScriptDeleteCmd)

	rootCmd.AddCommand(parent)
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	simplemonitorListParam   = params.NewListSimplemonitorParam()
	simplemonitorCreateParam = params.NewCreateSimplemonitorParam()
	simplemonitorReadParam   = params.NewReadSimplemonitorParam()
	simplemonitorUpdateParam = params.NewUpdateSimplemonitorParam()
	simplemonitorDeleteParam = params.NewDeleteSimplemonitorParam()
	simplemonitorHealthParam = params.NewHealthSimplemonitorParam()
)

// simplemonitorCmd represents the command to manage SAKURAÂ Cloud SimpleMonitor
var simplemonitorCmd = &cobra.Command{
	Use:   "simplemonitor",
	Short: "A manage commands of SimpleMonitor",
	Long:  `A manage commands of SimpleMonitor`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var simplemonitorListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List Simplemonitor",
	Long:    `List Simplemonitor`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := simplemonitorListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(simplemonitorListParam))
		return err
	},
}

func simplemonitorListCmdInit() {
	fs := simplemonitorListCmd.Flags()
	fs.IntVarP(&simplemonitorListParam.From, "from", "", 0, "set offset")
	fs.StringSliceVarP(&simplemonitorListParam.Tags, "tags", "", []string{}, "set filter by tags(AND)")
	fs.StringVarP(&simplemonitorListParam.Health, "health", "", "", "set filter by HealthCheck Status('up' or 'down' or 'unknown')")
	fs.IntVarP(&simplemonitorListParam.Max, "max", "", 0, "set limit")
	fs.StringSliceVarP(&simplemonitorListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringSliceVarP(&simplemonitorListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &simplemonitorListParam.Id), "id", "", "set filter by id(s)")
}

var simplemonitorCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create Simplemonitor",
	Long:  `Create Simplemonitor`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := simplemonitorCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(simplemonitorCreateParam))
		return err
	},
}

func simplemonitorCreateCmdInit() {
	fs := simplemonitorCreateCmd.Flags()
	fs.StringVarP(&simplemonitorCreateParam.DnsQname, "dns-qname", "", "", "set DNS query target name")
	fs.StringVarP(&simplemonitorCreateParam.DnsExcepted, "dns-excepted", "", "", "set DNS query excepted value")
	fs.IntVarP(&simplemonitorCreateParam.RemainingDays, "remaining-days", "", 30, "set SSL-Certificate remaining days")
	fs.StringVarP(&simplemonitorCreateParam.SlackWebhook, "slack-webhook", "", "", "set slack-webhook URL")
	fs.VarP(newIDValue(0, &simplemonitorCreateParam.IconId), "icon-id", "", "set Icon ID")
	fs.BoolVarP(&simplemonitorCreateParam.Disabled, "disabled", "", false, "set monitoring disable")
	fs.IntVarP(&simplemonitorCreateParam.DelayLoop, "delay-loop", "", 1, "set delay-loop of monitoring(minute)")
	fs.StringVarP(&simplemonitorCreateParam.Path, "path", "", "", "set path of http/https monitoring request")
	fs.BoolVarP(&simplemonitorCreateParam.Sni, "sni", "", false, "enable SNI support for https monitoring")
	fs.StringVarP(&simplemonitorCreateParam.Username, "username", "", "", "set Basic Auth user name")
	fs.StringVarP(&simplemonitorCreateParam.Description, "description", "", "", "set resource description")
	fs.StringVarP(&simplemonitorCreateParam.Target, "target", "", "", "set monitoring target IP or Hostname")
	fs.IntVarP(&simplemonitorCreateParam.NotifyInterval, "notify-interval", "", 2, "set notify-interval(hours)")
	fs.StringVarP(&simplemonitorCreateParam.Protocol, "protocol", "", "ping", "set monitoring protocol[http/https/ping/tcp/dns/ssh/smtp/pop3/ssl-certificate]")
	fs.StringVarP(&simplemonitorCreateParam.HostHeader, "host-header", "", "", "set host header of http/https monitoring request")
	fs.IntVarP(&simplemonitorCreateParam.ResponseCode, "response-code", "", 0, "set response-code of http/https monitoring request")
	fs.StringVarP(&simplemonitorCreateParam.Password, "password", "", "", "set Basic Auth password")
	fs.BoolVarP(&simplemonitorCreateParam.NotifyEmail, "notify-email", "", true, "enable e-mail notification")
	fs.StringVarP(&simplemonitorCreateParam.EmailType, "email-type", "", "text", "set e-mail type")
	fs.StringSliceVarP(&simplemonitorCreateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.IntVarP(&simplemonitorCreateParam.Port, "port", "", 0, "set port of tcp monitoring")
}

var simplemonitorReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Simplemonitor",
	Long:  `Read Simplemonitor`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := simplemonitorReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(simplemonitorReadParam))
		return err
	},
}

func simplemonitorReadCmdInit() {
}

var simplemonitorUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update Simplemonitor",
	Long:  `Update Simplemonitor`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := simplemonitorUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(simplemonitorUpdateParam))
		return err
	},
}

func simplemonitorUpdateCmdInit() {
	fs := simplemonitorUpdateCmd.Flags()
	fs.IntVarP(&simplemonitorUpdateParam.Port, "port", "", 0, "set port of tcp monitoring")
	fs.BoolVarP(&simplemonitorUpdateParam.Sni, "sni", "", false, "enable SNI support for https monitoring")
	fs.StringVarP(&simplemonitorUpdateParam.DnsQname, "dns-qname", "", "", "set DNS query target name")
	fs.StringVarP(&simplemonitorUpdateParam.Path, "path", "", "", "set path of http/https monitoring request")
	fs.IntVarP(&simplemonitorUpdateParam.RemainingDays, "remaining-days", "", 0, "set SSL-Certificate remaining days")
	fs.StringVarP(&simplemonitorUpdateParam.EmailType, "email-type", "", "", "set e-mail type")
	fs.IntVarP(&simplemonitorUpdateParam.NotifyInterval, "notify-interval", "", 2, "set notify-interval(hours)")
	fs.StringSliceVarP(&simplemonitorUpdateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.StringVarP(&simplemonitorUpdateParam.Password, "password", "", "", "set Basic Auth password")
	fs.StringVarP(&simplemonitorUpdateParam.SlackWebhook, "slack-webhook", "", "", "set slack-webhook URL")
	fs.StringVarP(&simplemonitorUpdateParam.Protocol, "protocol", "", "", "set monitoring protocol[http/https/ping/tcp/dns/ssh/smtp/pop3/ssl-certificate]")
	fs.IntVarP(&simplemonitorUpdateParam.DelayLoop, "delay-loop", "", 0, "set delay-loop of monitoring(minute)")
	fs.BoolVarP(&simplemonitorUpdateParam.Disabled, "disabled", "", false, "set monitoring enable/disable")
	fs.StringVarP(&simplemonitorUpdateParam.HostHeader, "host-header", "", "", "set host header of http/https monitoring request")
	fs.IntVarP(&simplemonitorUpdateParam.ResponseCode, "response-code", "", 0, "set response-code of http/https monitoring request")
	fs.StringVarP(&simplemonitorUpdateParam.Username, "username", "", "", "set Basic Auth user name")
	fs.StringVarP(&simplemonitorUpdateParam.DnsExcepted, "dns-excepted", "", "", "set DNS query excepted value")
	fs.BoolVarP(&simplemonitorUpdateParam.NotifyEmail, "notify-email", "", false, "enable e-mail notification")
	fs.StringVarP(&simplemonitorUpdateParam.Description, "description", "", "", "set resource description")
	fs.VarP(newIDValue(0, &simplemonitorUpdateParam.IconId), "icon-id", "", "set Icon ID")
}

var simplemonitorDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Simplemonitor",
	Long:    `Delete Simplemonitor`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := simplemonitorDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(simplemonitorDeleteParam))
		return err
	},
}

func simplemonitorDeleteCmdInit() {
}

var simplemonitorHealthCmd = &cobra.Command{
	Use: "health",

	Short: "Health Simplemonitor",
	Long:  `Health Simplemonitor`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := simplemonitorHealthParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("health parameter: \n%s\n", debugMarshalIndent(simplemonitorHealthParam))
		return err
	},
}

func simplemonitorHealthCmdInit() {
}

func init() {
	parent := simplemonitorCmd

	simplemonitorListCmdInit()
	parent.AddCommand(simplemonitorListCmd)

	simplemonitorCreateCmdInit()
	parent.AddCommand(simplemonitorCreateCmd)

	simplemonitorReadCmdInit()
	parent.AddCommand(simplemonitorReadCmd)

	simplemonitorUpdateCmdInit()
	parent.AddCommand(simplemonitorUpdateCmd)

	simplemonitorDeleteCmdInit()
	parent.AddCommand(simplemonitorDeleteCmd)

	simplemonitorHealthCmdInit()
	parent.AddCommand(simplemonitorHealthCmd)

	rootCmd.AddCommand(parent)
}

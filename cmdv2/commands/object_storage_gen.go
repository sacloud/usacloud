// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	objectstorageListParam   = params.NewListObjectstorageParam()
	objectstoragePutParam    = params.NewPutObjectstorageParam()
	objectstorageGetParam    = params.NewGetObjectstorageParam()
	objectstorageDeleteParam = params.NewDeleteObjectstorageParam()
)

// objectstorageCmd represents the command to manage SAKURAÂ Cloud ObjectStorage
var objectstorageCmd = &cobra.Command{
	Use:   "objectstorage",
	Short: "A manage commands of ObjectStorage",
	Long:  `A manage commands of ObjectStorage`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var objectstorageListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls"},
	Short:   "List Objectstorage",
	Long:    `List Objectstorage`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := objectstorageListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(objectstorageListParam))
		return err
	},
}

func objectstorageListCmdInit() {
	fs := objectstorageListCmd.Flags()
	fs.StringVarP(&objectstorageListParam.AccessKey, "access-key", "", "", "set access-key")
	fs.StringVarP(&objectstorageListParam.SecretKey, "secret-key", "", "", "set access-key")
	fs.StringVarP(&objectstorageListParam.Bucket, "bucket", "", "", "set bucket")
}

var objectstoragePutCmd = &cobra.Command{
	Use: "put",

	Short: "Put Objectstorage",
	Long:  `Put Objectstorage`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := objectstoragePutParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("put parameter: \n%s\n", debugMarshalIndent(objectstoragePutParam))
		return err
	},
}

func objectstoragePutCmdInit() {
	fs := objectstoragePutCmd.Flags()
	fs.StringVarP(&objectstoragePutParam.Bucket, "bucket", "", "", "set bucket")
	fs.StringVarP(&objectstoragePutParam.ContentType, "content-type", "", "application/octet-stream", "set content-type")
	fs.BoolVarP(&objectstoragePutParam.Recursive, "recursive", "r", false, "put objects recursive")
	fs.StringVarP(&objectstoragePutParam.AccessKey, "access-key", "", "", "set access-key")
	fs.StringVarP(&objectstoragePutParam.SecretKey, "secret-key", "", "", "set access-key")
}

var objectstorageGetCmd = &cobra.Command{
	Use: "get",

	Short: "Get Objectstorage",
	Long:  `Get Objectstorage`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := objectstorageGetParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("get parameter: \n%s\n", debugMarshalIndent(objectstorageGetParam))
		return err
	},
}

func objectstorageGetCmdInit() {
	fs := objectstorageGetCmd.Flags()
	fs.StringVarP(&objectstorageGetParam.Bucket, "bucket", "", "", "set bucket")
	fs.BoolVarP(&objectstorageGetParam.Recursive, "recursive", "r", false, "get objects recursive")
	fs.StringVarP(&objectstorageGetParam.AccessKey, "access-key", "", "", "set access-key")
	fs.StringVarP(&objectstorageGetParam.SecretKey, "secret-key", "", "", "set access-key")
}

var objectstorageDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm", "del"},
	Short:   "Delete Objectstorage",
	Long:    `Delete Objectstorage`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := objectstorageDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(objectstorageDeleteParam))
		return err
	},
}

func objectstorageDeleteCmdInit() {
	fs := objectstorageDeleteCmd.Flags()
	fs.StringVarP(&objectstorageDeleteParam.Bucket, "bucket", "", "", "set bucket")
	fs.BoolVarP(&objectstorageDeleteParam.Recursive, "recursive", "r", false, "delete objects recursive")
	fs.StringVarP(&objectstorageDeleteParam.AccessKey, "access-key", "", "", "set access-key")
	fs.StringVarP(&objectstorageDeleteParam.SecretKey, "secret-key", "", "", "set access-key")
}

func init() {
	parent := objectstorageCmd

	objectstorageListCmdInit()
	parent.AddCommand(objectstorageListCmd)

	objectstoragePutCmdInit()
	parent.AddCommand(objectstoragePutCmd)

	objectstorageGetCmdInit()
	parent.AddCommand(objectstorageGetCmd)

	objectstorageDeleteCmdInit()
	parent.AddCommand(objectstorageDeleteCmd)

	rootCmd.AddCommand(parent)
}

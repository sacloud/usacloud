// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	licenseListParam   = params.NewListLicenseParam()
	licenseCreateParam = params.NewCreateLicenseParam()
	licenseReadParam   = params.NewReadLicenseParam()
	licenseUpdateParam = params.NewUpdateLicenseParam()
	licenseDeleteParam = params.NewDeleteLicenseParam()
)

// licenseCmd represents the command to manage SAKURAÂ Cloud License
var licenseCmd = &cobra.Command{
	Use:   "license",
	Short: "A manage commands of License",
	Long:  `A manage commands of License`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var licenseListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find"},
	Short:   "List License",
	Long:    `List License`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := licenseListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(licenseListParam))
		return err
	},
}

func licenseListCmdInit() {
	fs := licenseListCmd.Flags()
	fs.IntVarP(&licenseListParam.Max, "max", "", 0, "set limit")
	fs.StringSliceVarP(&licenseListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringSliceVarP(&licenseListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &licenseListParam.Id), "id", "", "set filter by id(s)")
	fs.IntVarP(&licenseListParam.From, "from", "", 0, "set offset")
}

var licenseCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create License",
	Long:  `Create License`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := licenseCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(licenseCreateParam))
		return err
	},
}

func licenseCreateCmdInit() {
	fs := licenseCreateCmd.Flags()
	fs.StringVarP(&licenseCreateParam.Name, "name", "", "", "set resource display name")
	fs.VarP(newIDValue(0, &licenseCreateParam.LicenseInfoId), "license-info-id", "", "set LicenseInfo ID")
}

var licenseReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read License",
	Long:  `Read License`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := licenseReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(licenseReadParam))
		return err
	},
}

func licenseReadCmdInit() {
}

var licenseUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update License",
	Long:  `Update License`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := licenseUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(licenseUpdateParam))
		return err
	},
}

func licenseUpdateCmdInit() {
	fs := licenseUpdateCmd.Flags()
	fs.StringVarP(&licenseUpdateParam.Name, "name", "", "", "set resource display name")
}

var licenseDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete License",
	Long:    `Delete License`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := licenseDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(licenseDeleteParam))
		return err
	},
}

func licenseDeleteCmdInit() {
}

func init() {
	parent := licenseCmd

	licenseListCmdInit()
	parent.AddCommand(licenseListCmd)

	licenseCreateCmdInit()
	parent.AddCommand(licenseCreateCmd)

	licenseReadCmdInit()
	parent.AddCommand(licenseReadCmd)

	licenseUpdateCmdInit()
	parent.AddCommand(licenseUpdateCmd)

	licenseDeleteCmdInit()
	parent.AddCommand(licenseDeleteCmd)

	rootCmd.AddCommand(parent)
}

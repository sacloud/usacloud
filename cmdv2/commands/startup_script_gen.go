// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	startupscriptListParam   = params.NewListStartupscriptParam()
	startupscriptCreateParam = params.NewCreateStartupscriptParam()
	startupscriptReadParam   = params.NewReadStartupscriptParam()
	startupscriptUpdateParam = params.NewUpdateStartupscriptParam()
	startupscriptDeleteParam = params.NewDeleteStartupscriptParam()
)

// startupscriptCmd represents the command to manage SAKURAÂ Cloud StartupScript
var startupscriptCmd = &cobra.Command{
	Use:   "startupscript",
	Short: "A manage commands of StartupScript",
	Long:  `A manage commands of StartupScript`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var startupscriptListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List Startupscript",
	Long:    `List Startupscript`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := startupscriptListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(startupscriptListParam))
		return err
	},
}

func startupscriptListCmdInit() {
	fs := startupscriptListCmd.Flags()
	fs.StringSliceVarP(&startupscriptListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &startupscriptListParam.Id), "id", "", "set filter by id(s)")
	fs.IntVarP(&startupscriptListParam.From, "from", "", 0, "set offset")
	fs.IntVarP(&startupscriptListParam.Max, "max", "", 0, "set limit")
	fs.StringSliceVarP(&startupscriptListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringVarP(&startupscriptListParam.Scope, "scope", "", "", "set filter by scope('user' or 'shared')")
	fs.StringSliceVarP(&startupscriptListParam.Tags, "tags", "", []string{}, "set filter by tags(AND)")
	fs.StringSliceVarP(&startupscriptListParam.Class, "class", "", []string{}, "set filter by class(es)")
}

var startupscriptCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create Startupscript",
	Long:  `Create Startupscript`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := startupscriptCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(startupscriptCreateParam))
		return err
	},
}

func startupscriptCreateCmdInit() {
	fs := startupscriptCreateCmd.Flags()
	fs.VarP(newIDValue(0, &startupscriptCreateParam.IconId), "icon-id", "", "set Icon ID")
	fs.StringVarP(&startupscriptCreateParam.ScriptContent, "script-content", "", "", "set script content")
	fs.StringVarP(&startupscriptCreateParam.Script, "script", "", "", "set script from file")
	fs.StringVarP(&startupscriptCreateParam.Class, "class", "", "shell", "set script class[shell/cloud-config-yaml]")
	fs.StringVarP(&startupscriptCreateParam.Name, "name", "", "", "set resource display name")
	fs.StringSliceVarP(&startupscriptCreateParam.Tags, "tags", "", []string{}, "set resource tags")
}

var startupscriptReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Startupscript",
	Long:  `Read Startupscript`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := startupscriptReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(startupscriptReadParam))
		return err
	},
}

func startupscriptReadCmdInit() {
}

var startupscriptUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update Startupscript",
	Long:  `Update Startupscript`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := startupscriptUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(startupscriptUpdateParam))
		return err
	},
}

func startupscriptUpdateCmdInit() {
	fs := startupscriptUpdateCmd.Flags()
	fs.StringVarP(&startupscriptUpdateParam.ScriptContent, "script-content", "", "", "set script content")
	fs.StringVarP(&startupscriptUpdateParam.Script, "script", "", "", "set script from file")
	fs.StringVarP(&startupscriptUpdateParam.Class, "class", "", "", "set script class[shell/cloud-config-yaml]")
	fs.StringVarP(&startupscriptUpdateParam.Name, "name", "", "", "set resource display name")
	fs.StringSliceVarP(&startupscriptUpdateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &startupscriptUpdateParam.IconId), "icon-id", "", "set Icon ID")
}

var startupscriptDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Startupscript",
	Long:    `Delete Startupscript`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := startupscriptDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(startupscriptDeleteParam))
		return err
	},
}

func startupscriptDeleteCmdInit() {
}

func init() {
	parent := startupscriptCmd

	startupscriptListCmdInit()
	parent.AddCommand(startupscriptListCmd)

	startupscriptCreateCmdInit()
	parent.AddCommand(startupscriptCreateCmd)

	startupscriptReadCmdInit()
	parent.AddCommand(startupscriptReadCmd)

	startupscriptUpdateCmdInit()
	parent.AddCommand(startupscriptUpdateCmd)

	startupscriptDeleteCmdInit()
	parent.AddCommand(startupscriptDeleteCmd)

	rootCmd.AddCommand(parent)
}

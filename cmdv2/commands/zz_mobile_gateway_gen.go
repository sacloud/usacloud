// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	mobileGatewayListParam                  = params.NewListMobileGatewayParam()
	mobileGatewayCreateParam                = params.NewCreateMobileGatewayParam()
	mobileGatewayReadParam                  = params.NewReadMobileGatewayParam()
	mobileGatewayUpdateParam                = params.NewUpdateMobileGatewayParam()
	mobileGatewayDeleteParam                = params.NewDeleteMobileGatewayParam()
	mobileGatewayBootParam                  = params.NewBootMobileGatewayParam()
	mobileGatewayShutdownParam              = params.NewShutdownMobileGatewayParam()
	mobileGatewayShutdownForceParam         = params.NewShutdownForceMobileGatewayParam()
	mobileGatewayResetParam                 = params.NewResetMobileGatewayParam()
	mobileGatewayWaitForBootParam           = params.NewWaitForBootMobileGatewayParam()
	mobileGatewayWaitForDownParam           = params.NewWaitForDownMobileGatewayParam()
	mobileGatewayInterfaceInfoParam         = params.NewInterfaceInfoMobileGatewayParam()
	mobileGatewayInterfaceConnectParam      = params.NewInterfaceConnectMobileGatewayParam()
	mobileGatewayInterfaceUpdateParam       = params.NewInterfaceUpdateMobileGatewayParam()
	mobileGatewayInterfaceDisconnectParam   = params.NewInterfaceDisconnectMobileGatewayParam()
	mobileGatewayTrafficControlInfoParam    = params.NewTrafficControlInfoMobileGatewayParam()
	mobileGatewayTrafficControlEnableParam  = params.NewTrafficControlEnableMobileGatewayParam()
	mobileGatewayTrafficControlUpdateParam  = params.NewTrafficControlUpdateMobileGatewayParam()
	mobileGatewayTrafficControlDisableParam = params.NewTrafficControlDisableMobileGatewayParam()
	mobileGatewayStaticRouteInfoParam       = params.NewStaticRouteInfoMobileGatewayParam()
	mobileGatewayStaticRouteAddParam        = params.NewStaticRouteAddMobileGatewayParam()
	mobileGatewayStaticRouteUpdateParam     = params.NewStaticRouteUpdateMobileGatewayParam()
	mobileGatewayStaticRouteDeleteParam     = params.NewStaticRouteDeleteMobileGatewayParam()
	mobileGatewaySIMInfoParam               = params.NewSIMInfoMobileGatewayParam()
	mobileGatewaySIMAddParam                = params.NewSIMAddMobileGatewayParam()
	mobileGatewaySIMUpdateParam             = params.NewSIMUpdateMobileGatewayParam()
	mobileGatewaySIMDeleteParam             = params.NewSIMDeleteMobileGatewayParam()
	mobileGatewaySIMRouteInfoParam          = params.NewSIMRouteInfoMobileGatewayParam()
	mobileGatewaySIMRouteAddParam           = params.NewSIMRouteAddMobileGatewayParam()
	mobileGatewaySIMRouteUpdateParam        = params.NewSIMRouteUpdateMobileGatewayParam()
	mobileGatewaySIMRouteDeleteParam        = params.NewSIMRouteDeleteMobileGatewayParam()
	mobileGatewayDNSUpdateParam             = params.NewDNSUpdateMobileGatewayParam()
	mobileGatewayLogsParam                  = params.NewLogsMobileGatewayParam()
)

// mobileGatewayCmd represents the command to manage SAKURAÂ Cloud MobileGateway
var mobileGatewayCmd = &cobra.Command{
	Use:   "mobileGateway",
	Short: "A manage commands of MobileGateway",
	Long:  `A manage commands of MobileGateway`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var mobileGatewayListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List MobileGateway",
	Long:    `List MobileGateway`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(mobileGatewayListParam))
		return err
	},
}

func mobileGatewayListCmdInit() {
	fs := mobileGatewayListCmd.Flags()
	fs.StringSliceVarP(&mobileGatewayListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &mobileGatewayListParam.Id), "id", "", "set filter by id(s)")
	fs.IntVarP(&mobileGatewayListParam.From, "from", "", 0, "set offset")
	fs.StringSliceVarP(&mobileGatewayListParam.Tags, "tags", "", []string{}, "set filter by tags(AND)")
	fs.IntVarP(&mobileGatewayListParam.Max, "max", "", 0, "set limit")
	fs.StringSliceVarP(&mobileGatewayListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
}

var mobileGatewayCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create MobileGateway",
	Long:  `Create MobileGateway`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(mobileGatewayCreateParam))
		return err
	},
}

func mobileGatewayCreateCmdInit() {
	fs := mobileGatewayCreateCmd.Flags()
	fs.StringVarP(&mobileGatewayCreateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&mobileGatewayCreateParam.Description, "description", "", "", "set resource description")
	fs.StringSliceVarP(&mobileGatewayCreateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &mobileGatewayCreateParam.IconId), "icon-id", "", "set Icon ID")
	fs.BoolVarP(&mobileGatewayCreateParam.InternetConnection, "internet-connection", "", false, "connect to internet")
}

var mobileGatewayReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read MobileGateway",
	Long:  `Read MobileGateway`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(mobileGatewayReadParam))
		return err
	},
}

func mobileGatewayReadCmdInit() {
}

var mobileGatewayUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update MobileGateway",
	Long:  `Update MobileGateway`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(mobileGatewayUpdateParam))
		return err
	},
}

func mobileGatewayUpdateCmdInit() {
	fs := mobileGatewayUpdateCmd.Flags()
	fs.StringSliceVarP(&mobileGatewayUpdateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &mobileGatewayUpdateParam.IconId), "icon-id", "", "set Icon ID")
	fs.BoolVarP(&mobileGatewayUpdateParam.InternetConnection, "internet-connection", "", false, "connect to internet")
	fs.StringVarP(&mobileGatewayUpdateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&mobileGatewayUpdateParam.Description, "description", "", "", "set resource description")
}

var mobileGatewayDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete MobileGateway",
	Long:    `Delete MobileGateway`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(mobileGatewayDeleteParam))
		return err
	},
}

func mobileGatewayDeleteCmdInit() {
	fs := mobileGatewayDeleteCmd.Flags()
	fs.BoolVarP(&mobileGatewayDeleteParam.Force, "force", "f", false, "forced-shutdown flag if mobile-gateway is running")
}

var mobileGatewayBootCmd = &cobra.Command{
	Use:     "boot",
	Aliases: []string{"power-on"},
	Short:   "Boot MobileGateway",
	Long:    `Boot MobileGateway`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayBootParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("boot parameter: \n%s\n", debugMarshalIndent(mobileGatewayBootParam))
		return err
	},
}

func mobileGatewayBootCmdInit() {
}

var mobileGatewayShutdownCmd = &cobra.Command{
	Use:     "shutdown",
	Aliases: []string{"power-off"},
	Short:   "Shutdown MobileGateway",
	Long:    `Shutdown MobileGateway`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayShutdownParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("shutdown parameter: \n%s\n", debugMarshalIndent(mobileGatewayShutdownParam))
		return err
	},
}

func mobileGatewayShutdownCmdInit() {
}

var mobileGatewayShutdownForceCmd = &cobra.Command{
	Use:     "shutdown-force",
	Aliases: []string{"stop"},
	Short:   "ShutdownForce MobileGateway",
	Long:    `ShutdownForce MobileGateway`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayShutdownForceParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("shutdown-force parameter: \n%s\n", debugMarshalIndent(mobileGatewayShutdownForceParam))
		return err
	},
}

func mobileGatewayShutdownForceCmdInit() {
}

var mobileGatewayResetCmd = &cobra.Command{
	Use: "reset",

	Short: "Reset MobileGateway",
	Long:  `Reset MobileGateway`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayResetParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("reset parameter: \n%s\n", debugMarshalIndent(mobileGatewayResetParam))
		return err
	},
}

func mobileGatewayResetCmdInit() {
}

var mobileGatewayWaitForBootCmd = &cobra.Command{
	Use: "wait-for-boot",

	Short: "Wait until boot is completed",
	Long:  `Wait until boot is completed`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayWaitForBootParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("wait-for-boot parameter: \n%s\n", debugMarshalIndent(mobileGatewayWaitForBootParam))
		return err
	},
}

func mobileGatewayWaitForBootCmdInit() {
}

var mobileGatewayWaitForDownCmd = &cobra.Command{
	Use: "wait-for-down",

	Short: "Wait until shutdown is completed",
	Long:  `Wait until shutdown is completed`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayWaitForDownParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("wait-for-down parameter: \n%s\n", debugMarshalIndent(mobileGatewayWaitForDownParam))
		return err
	},
}

func mobileGatewayWaitForDownCmdInit() {
}

var mobileGatewayInterfaceInfoCmd = &cobra.Command{
	Use:     "interface-info",
	Aliases: []string{"interface-list"},
	Short:   "Show information of NIC(s) connected to mobile-gateway",
	Long:    `Show information of NIC(s) connected to mobile-gateway`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayInterfaceInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-info parameter: \n%s\n", debugMarshalIndent(mobileGatewayInterfaceInfoParam))
		return err
	},
}

func mobileGatewayInterfaceInfoCmdInit() {
}

var mobileGatewayInterfaceConnectCmd = &cobra.Command{
	Use: "interface-connect",

	Short: "Connected to switch",
	Long:  `Connected to switch`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayInterfaceConnectParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-connect parameter: \n%s\n", debugMarshalIndent(mobileGatewayInterfaceConnectParam))
		return err
	},
}

func mobileGatewayInterfaceConnectCmdInit() {
	fs := mobileGatewayInterfaceConnectCmd.Flags()
	fs.IntVarP(&mobileGatewayInterfaceConnectParam.NwMasklen, "nw-masklen", "", 24, "set ipaddress prefix")
	fs.VarP(newIDValue(0, &mobileGatewayInterfaceConnectParam.SwitchId), "switch-id", "", "set connect switch ID")
	fs.StringVarP(&mobileGatewayInterfaceConnectParam.Ipaddress, "ipaddress", "", "", "set ipaddress")
}

var mobileGatewayInterfaceUpdateCmd = &cobra.Command{
	Use: "interface-update",

	Short: "Update interface",
	Long:  `Update interface`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayInterfaceUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-update parameter: \n%s\n", debugMarshalIndent(mobileGatewayInterfaceUpdateParam))
		return err
	},
}

func mobileGatewayInterfaceUpdateCmdInit() {
	fs := mobileGatewayInterfaceUpdateCmd.Flags()
	fs.StringVarP(&mobileGatewayInterfaceUpdateParam.Ipaddress, "ipaddress", "", "", "set ipaddress")
	fs.IntVarP(&mobileGatewayInterfaceUpdateParam.NwMasklen, "nw-masklen", "", 24, "set ipaddress prefix")
}

var mobileGatewayInterfaceDisconnectCmd = &cobra.Command{
	Use: "interface-disconnect",

	Short: "Disconnected to switch",
	Long:  `Disconnected to switch`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayInterfaceDisconnectParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("interface-disconnect parameter: \n%s\n", debugMarshalIndent(mobileGatewayInterfaceDisconnectParam))
		return err
	},
}

func mobileGatewayInterfaceDisconnectCmdInit() {
}

var mobileGatewayTrafficControlInfoCmd = &cobra.Command{
	Use: "traffic-control-info",

	Short: "Show information of traffic-control",
	Long:  `Show information of traffic-control`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayTrafficControlInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("traffic-control-info parameter: \n%s\n", debugMarshalIndent(mobileGatewayTrafficControlInfoParam))
		return err
	},
}

func mobileGatewayTrafficControlInfoCmdInit() {
}

var mobileGatewayTrafficControlEnableCmd = &cobra.Command{
	Use: "traffic-control-enable",

	Short: "Enable traffic-control",
	Long:  `Enable traffic-control`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayTrafficControlEnableParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("traffic-control-enable parameter: \n%s\n", debugMarshalIndent(mobileGatewayTrafficControlEnableParam))
		return err
	},
}

func mobileGatewayTrafficControlEnableCmdInit() {
	fs := mobileGatewayTrafficControlEnableCmd.Flags()
	fs.IntVarP(&mobileGatewayTrafficControlEnableParam.Quota, "quota", "", 512, "")
	fs.IntVarP(&mobileGatewayTrafficControlEnableParam.BandWidthLimit, "band-width-limit", "", 0, "")
	fs.BoolVarP(&mobileGatewayTrafficControlEnableParam.EnableEmail, "enable-email", "", false, "")
	fs.StringVarP(&mobileGatewayTrafficControlEnableParam.SlackWebhookUrl, "slack-webhook-url", "", "", "")
	fs.BoolVarP(&mobileGatewayTrafficControlEnableParam.AutoTrafficShaping, "auto-traffic-shaping", "", false, "")
}

var mobileGatewayTrafficControlUpdateCmd = &cobra.Command{
	Use: "traffic-control-update",

	Short: "Update traffic-control config",
	Long:  `Update traffic-control config`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayTrafficControlUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("traffic-control-update parameter: \n%s\n", debugMarshalIndent(mobileGatewayTrafficControlUpdateParam))
		return err
	},
}

func mobileGatewayTrafficControlUpdateCmdInit() {
	fs := mobileGatewayTrafficControlUpdateCmd.Flags()
	fs.StringVarP(&mobileGatewayTrafficControlUpdateParam.SlackWebhookUrl, "slack-webhook-url", "", "", "")
	fs.BoolVarP(&mobileGatewayTrafficControlUpdateParam.AutoTrafficShaping, "auto-traffic-shaping", "", false, "")
	fs.IntVarP(&mobileGatewayTrafficControlUpdateParam.Quota, "quota", "", 0, "")
	fs.IntVarP(&mobileGatewayTrafficControlUpdateParam.BandWidthLimit, "band-width-limit", "", 0, "")
	fs.BoolVarP(&mobileGatewayTrafficControlUpdateParam.EnableEmail, "enable-email", "", false, "")
}

var mobileGatewayTrafficControlDisableCmd = &cobra.Command{
	Use:     "traffic-control-disable",
	Aliases: []string{"traffic-control-delete"},
	Short:   "Disable traffic-control config",
	Long:    `Disable traffic-control config`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayTrafficControlDisableParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("traffic-control-disable parameter: \n%s\n", debugMarshalIndent(mobileGatewayTrafficControlDisableParam))
		return err
	},
}

func mobileGatewayTrafficControlDisableCmdInit() {
}

var mobileGatewayStaticRouteInfoCmd = &cobra.Command{
	Use:     "static-route-info",
	Aliases: []string{"static-route-list"},
	Short:   "Show information of static-routes",
	Long:    `Show information of static-routes`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayStaticRouteInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-route-info parameter: \n%s\n", debugMarshalIndent(mobileGatewayStaticRouteInfoParam))
		return err
	},
}

func mobileGatewayStaticRouteInfoCmdInit() {
}

var mobileGatewayStaticRouteAddCmd = &cobra.Command{
	Use: "static-route-add",

	Short: "Add static-route",
	Long:  `Add static-route`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayStaticRouteAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-route-add parameter: \n%s\n", debugMarshalIndent(mobileGatewayStaticRouteAddParam))
		return err
	},
}

func mobileGatewayStaticRouteAddCmdInit() {
	fs := mobileGatewayStaticRouteAddCmd.Flags()
	fs.StringVarP(&mobileGatewayStaticRouteAddParam.Prefix, "prefix", "", "", "set prefix")
	fs.StringVarP(&mobileGatewayStaticRouteAddParam.NextHop, "next-hop", "", "", "set next-hop")
}

var mobileGatewayStaticRouteUpdateCmd = &cobra.Command{
	Use: "static-route-update",

	Short: "Update static-route",
	Long:  `Update static-route`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayStaticRouteUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-route-update parameter: \n%s\n", debugMarshalIndent(mobileGatewayStaticRouteUpdateParam))
		return err
	},
}

func mobileGatewayStaticRouteUpdateCmdInit() {
	fs := mobileGatewayStaticRouteUpdateCmd.Flags()
	fs.IntVarP(&mobileGatewayStaticRouteUpdateParam.Index, "index", "", 0, "index of target static-route")
	fs.StringVarP(&mobileGatewayStaticRouteUpdateParam.Prefix, "prefix", "", "", "set prefix")
	fs.StringVarP(&mobileGatewayStaticRouteUpdateParam.NextHop, "next-hop", "", "", "set next-hop")
}

var mobileGatewayStaticRouteDeleteCmd = &cobra.Command{
	Use: "static-route-delete",

	Short: "Delete static-route",
	Long:  `Delete static-route`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayStaticRouteDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("static-route-delete parameter: \n%s\n", debugMarshalIndent(mobileGatewayStaticRouteDeleteParam))
		return err
	},
}

func mobileGatewayStaticRouteDeleteCmdInit() {
	fs := mobileGatewayStaticRouteDeleteCmd.Flags()
	fs.IntVarP(&mobileGatewayStaticRouteDeleteParam.Index, "index", "", 0, "index of target static-route")
}

var mobileGatewaySIMInfoCmd = &cobra.Command{
	Use:     "sim-info",
	Aliases: []string{"interface-list"},
	Short:   "Show information of NIC(s) connected to mobile-gateway",
	Long:    `Show information of NIC(s) connected to mobile-gateway`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewaySIMInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("sim-info parameter: \n%s\n", debugMarshalIndent(mobileGatewaySIMInfoParam))
		return err
	},
}

func mobileGatewaySIMInfoCmdInit() {
}

var mobileGatewaySIMAddCmd = &cobra.Command{
	Use: "sim-add",

	Short: "Connected to switch",
	Long:  `Connected to switch`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewaySIMAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("sim-add parameter: \n%s\n", debugMarshalIndent(mobileGatewaySIMAddParam))
		return err
	},
}

func mobileGatewaySIMAddCmdInit() {
	fs := mobileGatewaySIMAddCmd.Flags()
	fs.VarP(newIDValue(0, &mobileGatewaySIMAddParam.SIMId), "sim-id", "", "")
	fs.StringVarP(&mobileGatewaySIMAddParam.Ipaddress, "ipaddress", "", "", "set ipaddress")
}

var mobileGatewaySIMUpdateCmd = &cobra.Command{
	Use: "sim-update",

	Short: "Connected to switch",
	Long:  `Connected to switch`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewaySIMUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("sim-update parameter: \n%s\n", debugMarshalIndent(mobileGatewaySIMUpdateParam))
		return err
	},
}

func mobileGatewaySIMUpdateCmdInit() {
	fs := mobileGatewaySIMUpdateCmd.Flags()
	fs.StringVarP(&mobileGatewaySIMUpdateParam.Ipaddress, "ipaddress", "", "", "set ipaddress")
	fs.VarP(newIDValue(0, &mobileGatewaySIMUpdateParam.SIMId), "sim-id", "", "")
}

var mobileGatewaySIMDeleteCmd = &cobra.Command{
	Use: "sim-delete",

	Short: "Disconnected to switch",
	Long:  `Disconnected to switch`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewaySIMDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("sim-delete parameter: \n%s\n", debugMarshalIndent(mobileGatewaySIMDeleteParam))
		return err
	},
}

func mobileGatewaySIMDeleteCmdInit() {
	fs := mobileGatewaySIMDeleteCmd.Flags()
	fs.VarP(newIDValue(0, &mobileGatewaySIMDeleteParam.SIMId), "sim-id", "", "")
}

var mobileGatewaySIMRouteInfoCmd = &cobra.Command{
	Use:     "sim-route-info",
	Aliases: []string{"sim-route-list"},
	Short:   "Show information of sim-routes",
	Long:    `Show information of sim-routes`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewaySIMRouteInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("sim-route-info parameter: \n%s\n", debugMarshalIndent(mobileGatewaySIMRouteInfoParam))
		return err
	},
}

func mobileGatewaySIMRouteInfoCmdInit() {
}

var mobileGatewaySIMRouteAddCmd = &cobra.Command{
	Use: "sim-route-add",

	Short: "Add sim-route",
	Long:  `Add sim-route`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewaySIMRouteAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("sim-route-add parameter: \n%s\n", debugMarshalIndent(mobileGatewaySIMRouteAddParam))
		return err
	},
}

func mobileGatewaySIMRouteAddCmdInit() {
	fs := mobileGatewaySIMRouteAddCmd.Flags()
	fs.StringVarP(&mobileGatewaySIMRouteAddParam.Prefix, "prefix", "", "", "set prefix")
	fs.VarP(newIDValue(0, &mobileGatewaySIMRouteAddParam.SIM), "sim", "", "set sim")
}

var mobileGatewaySIMRouteUpdateCmd = &cobra.Command{
	Use: "sim-route-update",

	Short: "Update sim-route",
	Long:  `Update sim-route`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewaySIMRouteUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("sim-route-update parameter: \n%s\n", debugMarshalIndent(mobileGatewaySIMRouteUpdateParam))
		return err
	},
}

func mobileGatewaySIMRouteUpdateCmdInit() {
	fs := mobileGatewaySIMRouteUpdateCmd.Flags()
	fs.IntVarP(&mobileGatewaySIMRouteUpdateParam.Index, "index", "", 0, "index of target sim-route")
	fs.StringVarP(&mobileGatewaySIMRouteUpdateParam.Prefix, "prefix", "", "", "set prefix")
	fs.VarP(newIDValue(0, &mobileGatewaySIMRouteUpdateParam.SIM), "sim", "", "set sim")
}

var mobileGatewaySIMRouteDeleteCmd = &cobra.Command{
	Use: "sim-route-delete",

	Short: "Delete sim-route",
	Long:  `Delete sim-route`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewaySIMRouteDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("sim-route-delete parameter: \n%s\n", debugMarshalIndent(mobileGatewaySIMRouteDeleteParam))
		return err
	},
}

func mobileGatewaySIMRouteDeleteCmdInit() {
	fs := mobileGatewaySIMRouteDeleteCmd.Flags()
	fs.IntVarP(&mobileGatewaySIMRouteDeleteParam.Index, "index", "", 0, "index of target sim-route")
}

var mobileGatewayDNSUpdateCmd = &cobra.Command{
	Use: "dns-update",

	Short: "Update interface",
	Long:  `Update interface`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayDNSUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("dns-update parameter: \n%s\n", debugMarshalIndent(mobileGatewayDNSUpdateParam))
		return err
	},
}

func mobileGatewayDNSUpdateCmdInit() {
	fs := mobileGatewayDNSUpdateCmd.Flags()
	fs.StringVarP(&mobileGatewayDNSUpdateParam.DNS1, "dns-1", "", "", "set DNS server address")
	fs.StringVarP(&mobileGatewayDNSUpdateParam.DNS2, "dns-2", "", "", "set DNS server address")
}

var mobileGatewayLogsCmd = &cobra.Command{
	Use: "logs",

	Short: "Logs MobileGateway",
	Long:  `Logs MobileGateway`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := mobileGatewayLogsParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("logs parameter: \n%s\n", debugMarshalIndent(mobileGatewayLogsParam))
		return err
	},
}

func mobileGatewayLogsCmdInit() {
	fs := mobileGatewayLogsCmd.Flags()
	fs.BoolVarP(&mobileGatewayLogsParam.Follow, "follow", "f", false, "follow log output")
	fs.Int64VarP(&mobileGatewayLogsParam.RefreshInterval, "refresh-interval", "", 3, "log refresh interval second")
}

func init() {
	parent := mobileGatewayCmd

	mobileGatewayListCmdInit()
	parent.AddCommand(mobileGatewayListCmd)

	mobileGatewayCreateCmdInit()
	parent.AddCommand(mobileGatewayCreateCmd)

	mobileGatewayReadCmdInit()
	parent.AddCommand(mobileGatewayReadCmd)

	mobileGatewayUpdateCmdInit()
	parent.AddCommand(mobileGatewayUpdateCmd)

	mobileGatewayDeleteCmdInit()
	parent.AddCommand(mobileGatewayDeleteCmd)

	mobileGatewayBootCmdInit()
	parent.AddCommand(mobileGatewayBootCmd)

	mobileGatewayShutdownCmdInit()
	parent.AddCommand(mobileGatewayShutdownCmd)

	mobileGatewayShutdownForceCmdInit()
	parent.AddCommand(mobileGatewayShutdownForceCmd)

	mobileGatewayResetCmdInit()
	parent.AddCommand(mobileGatewayResetCmd)

	mobileGatewayWaitForBootCmdInit()
	parent.AddCommand(mobileGatewayWaitForBootCmd)

	mobileGatewayWaitForDownCmdInit()
	parent.AddCommand(mobileGatewayWaitForDownCmd)

	mobileGatewayInterfaceInfoCmdInit()
	parent.AddCommand(mobileGatewayInterfaceInfoCmd)

	mobileGatewayInterfaceConnectCmdInit()
	parent.AddCommand(mobileGatewayInterfaceConnectCmd)

	mobileGatewayInterfaceUpdateCmdInit()
	parent.AddCommand(mobileGatewayInterfaceUpdateCmd)

	mobileGatewayInterfaceDisconnectCmdInit()
	parent.AddCommand(mobileGatewayInterfaceDisconnectCmd)

	mobileGatewayTrafficControlInfoCmdInit()
	parent.AddCommand(mobileGatewayTrafficControlInfoCmd)

	mobileGatewayTrafficControlEnableCmdInit()
	parent.AddCommand(mobileGatewayTrafficControlEnableCmd)

	mobileGatewayTrafficControlUpdateCmdInit()
	parent.AddCommand(mobileGatewayTrafficControlUpdateCmd)

	mobileGatewayTrafficControlDisableCmdInit()
	parent.AddCommand(mobileGatewayTrafficControlDisableCmd)

	mobileGatewayStaticRouteInfoCmdInit()
	parent.AddCommand(mobileGatewayStaticRouteInfoCmd)

	mobileGatewayStaticRouteAddCmdInit()
	parent.AddCommand(mobileGatewayStaticRouteAddCmd)

	mobileGatewayStaticRouteUpdateCmdInit()
	parent.AddCommand(mobileGatewayStaticRouteUpdateCmd)

	mobileGatewayStaticRouteDeleteCmdInit()
	parent.AddCommand(mobileGatewayStaticRouteDeleteCmd)

	mobileGatewaySIMInfoCmdInit()
	parent.AddCommand(mobileGatewaySIMInfoCmd)

	mobileGatewaySIMAddCmdInit()
	parent.AddCommand(mobileGatewaySIMAddCmd)

	mobileGatewaySIMUpdateCmdInit()
	parent.AddCommand(mobileGatewaySIMUpdateCmd)

	mobileGatewaySIMDeleteCmdInit()
	parent.AddCommand(mobileGatewaySIMDeleteCmd)

	mobileGatewaySIMRouteInfoCmdInit()
	parent.AddCommand(mobileGatewaySIMRouteInfoCmd)

	mobileGatewaySIMRouteAddCmdInit()
	parent.AddCommand(mobileGatewaySIMRouteAddCmd)

	mobileGatewaySIMRouteUpdateCmdInit()
	parent.AddCommand(mobileGatewaySIMRouteUpdateCmd)

	mobileGatewaySIMRouteDeleteCmdInit()
	parent.AddCommand(mobileGatewaySIMRouteDeleteCmd)

	mobileGatewayDNSUpdateCmdInit()
	parent.AddCommand(mobileGatewayDNSUpdateCmd)

	mobileGatewayLogsCmdInit()
	parent.AddCommand(mobileGatewayLogsCmd)

	rootCmd.AddCommand(parent)
}

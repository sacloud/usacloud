// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"errors"
	"sync"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/funcs"
	"github.com/sacloud/usacloud/pkg/utils"
	"github.com/spf13/cobra"
)

// mobileGatewayCmd represents the command to manage SAKURA Cloud MobileGateway
func mobileGatewayCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "mobile-gateway",
		Short: "A manage commands of MobileGateway",
		Long:  `A manage commands of MobileGateway`,
		Run: func(cmd *cobra.Command, args []string) {
			cmd.HelpFunc()(cmd, args)
		},
	}
}

func mobileGatewayListCmd() *cobra.Command {
	mobileGatewayListParam := params.NewListMobileGatewayParam()
	cmd := &cobra.Command{
		Use:          "list",
		Aliases:      []string{"ls", "find", "selector"},
		Short:        "List MobileGateway",
		Long:         `List MobileGateway`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayListParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayListParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayListParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayListParam)
			}

			return funcs.MobileGatewayList(ctx, mobileGatewayListParam.ToV0())

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&mobileGatewayListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &mobileGatewayListParam.Id), "id", "", "set filter by id(s)")
	fs.StringSliceVarP(&mobileGatewayListParam.Tags, "tags", "", []string{}, "set filter by tags(AND)")
	fs.IntVarP(&mobileGatewayListParam.From, "from", "", 0, "set offset")
	fs.IntVarP(&mobileGatewayListParam.Max, "max", "", 0, "set limit")
	fs.StringSliceVarP(&mobileGatewayListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringVarP(&mobileGatewayListParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayListParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayListParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayListParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayListParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&mobileGatewayListParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&mobileGatewayListParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&mobileGatewayListParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&mobileGatewayListParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&mobileGatewayListParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&mobileGatewayListParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&mobileGatewayListParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	buildFlagsUsage(cmd, mobileGatewayListFlagOrder(cmd))
	return cmd
}

func mobileGatewayCreateCmd() *cobra.Command {
	mobileGatewayCreateParam := params.NewCreateMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "create",

		Short:        "Create MobileGateway",
		Long:         `Create MobileGateway`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayCreateParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayCreateParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayCreateParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayCreateParam)
			}

			// confirm
			if !mobileGatewayCreateParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("create", ctx.IO().In(), ctx.IO().Out())
				if err != nil || !result {
					return err
				}
			}

			return funcs.MobileGatewayCreate(ctx, mobileGatewayCreateParam.ToV0())

		},
	}

	fs := cmd.Flags()
	fs.BoolVarP(&mobileGatewayCreateParam.InternetConnection, "internet-connection", "", false, "connect to internet")
	fs.StringVarP(&mobileGatewayCreateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&mobileGatewayCreateParam.Description, "description", "", "", "set resource description")
	fs.StringSliceVarP(&mobileGatewayCreateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &mobileGatewayCreateParam.IconId), "icon-id", "", "set Icon ID")
	fs.BoolVarP(&mobileGatewayCreateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewayCreateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayCreateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayCreateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayCreateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayCreateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&mobileGatewayCreateParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&mobileGatewayCreateParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&mobileGatewayCreateParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&mobileGatewayCreateParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&mobileGatewayCreateParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&mobileGatewayCreateParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&mobileGatewayCreateParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	buildFlagsUsage(cmd, mobileGatewayCreateFlagOrder(cmd))
	return cmd
}

func mobileGatewayReadCmd() *cobra.Command {
	mobileGatewayReadParam := params.NewReadMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "read",

		Short:        "Read MobileGateway",
		Long:         `Read MobileGateway`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayReadParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayReadParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayReadParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayReadParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayReadTargets(ctx, mobileGatewayReadParam)
			if err != nil {
				return err
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayReadParam.SetId(id)
				go func(p *params.ReadMobileGatewayParam) {
					err := funcs.MobileGatewayRead(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayReadParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&mobileGatewayReadParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&mobileGatewayReadParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayReadParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayReadParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayReadParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayReadParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&mobileGatewayReadParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&mobileGatewayReadParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&mobileGatewayReadParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&mobileGatewayReadParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&mobileGatewayReadParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&mobileGatewayReadParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&mobileGatewayReadParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &mobileGatewayReadParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayReadFlagOrder(cmd))
	return cmd
}

func mobileGatewayUpdateCmd() *cobra.Command {
	mobileGatewayUpdateParam := params.NewUpdateMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "update",

		Short:        "Update MobileGateway",
		Long:         `Update MobileGateway`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayUpdateParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayUpdateParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayUpdateParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayUpdateParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayUpdateTargets(ctx, mobileGatewayUpdateParam)
			if err != nil {
				return err
			}

			// confirm
			if !mobileGatewayUpdateParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("update", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayUpdateParam.SetId(id)
				go func(p *params.UpdateMobileGatewayParam) {
					err := funcs.MobileGatewayUpdate(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayUpdateParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.BoolVarP(&mobileGatewayUpdateParam.InternetConnection, "internet-connection", "", false, "connect to internet")
	fs.StringSliceVarP(&mobileGatewayUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&mobileGatewayUpdateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&mobileGatewayUpdateParam.Description, "description", "", "", "set resource description")
	fs.StringSliceVarP(&mobileGatewayUpdateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &mobileGatewayUpdateParam.IconId), "icon-id", "", "set Icon ID")
	fs.BoolVarP(&mobileGatewayUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewayUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&mobileGatewayUpdateParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&mobileGatewayUpdateParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&mobileGatewayUpdateParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&mobileGatewayUpdateParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&mobileGatewayUpdateParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&mobileGatewayUpdateParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&mobileGatewayUpdateParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &mobileGatewayUpdateParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayUpdateFlagOrder(cmd))
	return cmd
}

func mobileGatewayDeleteCmd() *cobra.Command {
	mobileGatewayDeleteParam := params.NewDeleteMobileGatewayParam()
	cmd := &cobra.Command{
		Use:          "delete",
		Aliases:      []string{"rm"},
		Short:        "Delete MobileGateway",
		Long:         `Delete MobileGateway`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayDeleteParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayDeleteParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayDeleteParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayDeleteParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayDeleteTargets(ctx, mobileGatewayDeleteParam)
			if err != nil {
				return err
			}

			// confirm
			if !mobileGatewayDeleteParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("delete", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayDeleteParam.SetId(id)
				go func(p *params.DeleteMobileGatewayParam) {
					err := funcs.MobileGatewayDelete(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayDeleteParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.BoolVarP(&mobileGatewayDeleteParam.Force, "force", "f", false, "forced-shutdown flag if mobile-gateway is running")
	fs.StringSliceVarP(&mobileGatewayDeleteParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&mobileGatewayDeleteParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewayDeleteParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayDeleteParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayDeleteParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayDeleteParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayDeleteParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&mobileGatewayDeleteParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&mobileGatewayDeleteParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&mobileGatewayDeleteParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&mobileGatewayDeleteParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&mobileGatewayDeleteParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&mobileGatewayDeleteParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&mobileGatewayDeleteParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &mobileGatewayDeleteParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayDeleteFlagOrder(cmd))
	return cmd
}

func mobileGatewayBootCmd() *cobra.Command {
	mobileGatewayBootParam := params.NewBootMobileGatewayParam()
	cmd := &cobra.Command{
		Use:          "boot",
		Aliases:      []string{"power-on"},
		Short:        "Boot MobileGateway",
		Long:         `Boot MobileGateway`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayBootParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayBootParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayBootParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayBootParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayBootTargets(ctx, mobileGatewayBootParam)
			if err != nil {
				return err
			}

			// confirm
			if !mobileGatewayBootParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("boot", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayBootParam.SetId(id)
				go func(p *params.BootMobileGatewayParam) {
					err := funcs.MobileGatewayBoot(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayBootParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&mobileGatewayBootParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&mobileGatewayBootParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewayBootParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayBootParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayBootParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayBootParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayBootParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewayBootParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayBootFlagOrder(cmd))
	return cmd
}

func mobileGatewayShutdownCmd() *cobra.Command {
	mobileGatewayShutdownParam := params.NewShutdownMobileGatewayParam()
	cmd := &cobra.Command{
		Use:          "shutdown",
		Aliases:      []string{"power-off"},
		Short:        "Shutdown MobileGateway",
		Long:         `Shutdown MobileGateway`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayShutdownParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayShutdownParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayShutdownParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayShutdownParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayShutdownTargets(ctx, mobileGatewayShutdownParam)
			if err != nil {
				return err
			}

			// confirm
			if !mobileGatewayShutdownParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("shutdown", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayShutdownParam.SetId(id)
				go func(p *params.ShutdownMobileGatewayParam) {
					err := funcs.MobileGatewayShutdown(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayShutdownParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&mobileGatewayShutdownParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&mobileGatewayShutdownParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewayShutdownParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayShutdownParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayShutdownParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayShutdownParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayShutdownParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewayShutdownParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayShutdownFlagOrder(cmd))
	return cmd
}

func mobileGatewayShutdownForceCmd() *cobra.Command {
	mobileGatewayShutdownForceParam := params.NewShutdownForceMobileGatewayParam()
	cmd := &cobra.Command{
		Use:          "shutdown-force",
		Aliases:      []string{"stop"},
		Short:        "ShutdownForce MobileGateway",
		Long:         `ShutdownForce MobileGateway`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayShutdownForceParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayShutdownForceParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayShutdownForceParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayShutdownForceParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayShutdownForceTargets(ctx, mobileGatewayShutdownForceParam)
			if err != nil {
				return err
			}

			// confirm
			if !mobileGatewayShutdownForceParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("shutdown-force", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayShutdownForceParam.SetId(id)
				go func(p *params.ShutdownForceMobileGatewayParam) {
					err := funcs.MobileGatewayShutdownForce(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayShutdownForceParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&mobileGatewayShutdownForceParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&mobileGatewayShutdownForceParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewayShutdownForceParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayShutdownForceParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayShutdownForceParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayShutdownForceParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayShutdownForceParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewayShutdownForceParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayShutdownForceFlagOrder(cmd))
	return cmd
}

func mobileGatewayResetCmd() *cobra.Command {
	mobileGatewayResetParam := params.NewResetMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "reset",

		Short:        "Reset MobileGateway",
		Long:         `Reset MobileGateway`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayResetParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayResetParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayResetParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayResetParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayResetTargets(ctx, mobileGatewayResetParam)
			if err != nil {
				return err
			}

			// confirm
			if !mobileGatewayResetParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("reset", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayResetParam.SetId(id)
				go func(p *params.ResetMobileGatewayParam) {
					err := funcs.MobileGatewayReset(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayResetParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&mobileGatewayResetParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&mobileGatewayResetParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewayResetParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayResetParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayResetParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayResetParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayResetParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewayResetParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayResetFlagOrder(cmd))
	return cmd
}

func mobileGatewayWaitForBootCmd() *cobra.Command {
	mobileGatewayWaitForBootParam := params.NewWaitForBootMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "wait-for-boot",

		Short:        "Wait until boot is completed",
		Long:         `Wait until boot is completed`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayWaitForBootParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayWaitForBootParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayWaitForBootParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayWaitForBootParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayWaitForBootTargets(ctx, mobileGatewayWaitForBootParam)
			if err != nil {
				return err
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayWaitForBootParam.SetId(id)
				go func(p *params.WaitForBootMobileGatewayParam) {
					err := funcs.MobileGatewayWaitForBoot(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayWaitForBootParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&mobileGatewayWaitForBootParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&mobileGatewayWaitForBootParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayWaitForBootParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayWaitForBootParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayWaitForBootParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayWaitForBootParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewayWaitForBootParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayWaitForBootFlagOrder(cmd))
	return cmd
}

func mobileGatewayWaitForDownCmd() *cobra.Command {
	mobileGatewayWaitForDownParam := params.NewWaitForDownMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "wait-for-down",

		Short:        "Wait until shutdown is completed",
		Long:         `Wait until shutdown is completed`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayWaitForDownParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayWaitForDownParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayWaitForDownParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayWaitForDownParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayWaitForDownTargets(ctx, mobileGatewayWaitForDownParam)
			if err != nil {
				return err
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayWaitForDownParam.SetId(id)
				go func(p *params.WaitForDownMobileGatewayParam) {
					err := funcs.MobileGatewayWaitForDown(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayWaitForDownParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&mobileGatewayWaitForDownParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&mobileGatewayWaitForDownParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayWaitForDownParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayWaitForDownParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayWaitForDownParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayWaitForDownParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewayWaitForDownParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayWaitForDownFlagOrder(cmd))
	return cmd
}

func mobileGatewayInterfaceInfoCmd() *cobra.Command {
	mobileGatewayInterfaceInfoParam := params.NewInterfaceInfoMobileGatewayParam()
	cmd := &cobra.Command{
		Use:          "interface-info",
		Aliases:      []string{"interface-list"},
		Short:        "Show information of NIC(s) connected to mobile-gateway",
		Long:         `Show information of NIC(s) connected to mobile-gateway`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayInterfaceInfoParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayInterfaceInfoParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayInterfaceInfoParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayInterfaceInfoParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayInterfaceInfoTargets(ctx, mobileGatewayInterfaceInfoParam)
			if err != nil {
				return err
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayInterfaceInfoParam.SetId(id)
				go func(p *params.InterfaceInfoMobileGatewayParam) {
					err := funcs.MobileGatewayInterfaceInfo(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayInterfaceInfoParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&mobileGatewayInterfaceInfoParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&mobileGatewayInterfaceInfoParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayInterfaceInfoParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayInterfaceInfoParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayInterfaceInfoParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayInterfaceInfoParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&mobileGatewayInterfaceInfoParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&mobileGatewayInterfaceInfoParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&mobileGatewayInterfaceInfoParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&mobileGatewayInterfaceInfoParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&mobileGatewayInterfaceInfoParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&mobileGatewayInterfaceInfoParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&mobileGatewayInterfaceInfoParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &mobileGatewayInterfaceInfoParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayInterfaceInfoFlagOrder(cmd))
	return cmd
}

func mobileGatewayInterfaceConnectCmd() *cobra.Command {
	mobileGatewayInterfaceConnectParam := params.NewInterfaceConnectMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "interface-connect",

		Short:        "Connected to switch",
		Long:         `Connected to switch`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayInterfaceConnectParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayInterfaceConnectParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayInterfaceConnectParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayInterfaceConnectParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayInterfaceConnectTargets(ctx, mobileGatewayInterfaceConnectParam)
			if err != nil {
				return err
			}

			// confirm
			if !mobileGatewayInterfaceConnectParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("interface-connect", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayInterfaceConnectParam.SetId(id)
				go func(p *params.InterfaceConnectMobileGatewayParam) {
					err := funcs.MobileGatewayInterfaceConnect(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayInterfaceConnectParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringVarP(&mobileGatewayInterfaceConnectParam.Ipaddress, "ipaddress", "", "", "set ipaddress")
	fs.VarP(newIDValue(0, &mobileGatewayInterfaceConnectParam.SwitchId), "switch-id", "", "set connect switch ID")
	fs.IntVarP(&mobileGatewayInterfaceConnectParam.NwMasklen, "nw-masklen", "", 24, "set ipaddress prefix")
	fs.StringSliceVarP(&mobileGatewayInterfaceConnectParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&mobileGatewayInterfaceConnectParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewayInterfaceConnectParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayInterfaceConnectParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayInterfaceConnectParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayInterfaceConnectParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayInterfaceConnectParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewayInterfaceConnectParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayInterfaceConnectFlagOrder(cmd))
	return cmd
}

func mobileGatewayInterfaceUpdateCmd() *cobra.Command {
	mobileGatewayInterfaceUpdateParam := params.NewInterfaceUpdateMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "interface-update",

		Short:        "Update interface",
		Long:         `Update interface`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayInterfaceUpdateParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayInterfaceUpdateParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayInterfaceUpdateParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayInterfaceUpdateParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayInterfaceUpdateTargets(ctx, mobileGatewayInterfaceUpdateParam)
			if err != nil {
				return err
			}

			// confirm
			if !mobileGatewayInterfaceUpdateParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("interface-update", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayInterfaceUpdateParam.SetId(id)
				go func(p *params.InterfaceUpdateMobileGatewayParam) {
					err := funcs.MobileGatewayInterfaceUpdate(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayInterfaceUpdateParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringVarP(&mobileGatewayInterfaceUpdateParam.Ipaddress, "ipaddress", "", "", "set ipaddress")
	fs.IntVarP(&mobileGatewayInterfaceUpdateParam.NwMasklen, "nw-masklen", "", 24, "set ipaddress prefix")
	fs.StringSliceVarP(&mobileGatewayInterfaceUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&mobileGatewayInterfaceUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewayInterfaceUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayInterfaceUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayInterfaceUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayInterfaceUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayInterfaceUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewayInterfaceUpdateParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayInterfaceUpdateFlagOrder(cmd))
	return cmd
}

func mobileGatewayInterfaceDisconnectCmd() *cobra.Command {
	mobileGatewayInterfaceDisconnectParam := params.NewInterfaceDisconnectMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "interface-disconnect",

		Short:        "Disconnected to switch",
		Long:         `Disconnected to switch`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayInterfaceDisconnectParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayInterfaceDisconnectParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayInterfaceDisconnectParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayInterfaceDisconnectParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayInterfaceDisconnectTargets(ctx, mobileGatewayInterfaceDisconnectParam)
			if err != nil {
				return err
			}

			// confirm
			if !mobileGatewayInterfaceDisconnectParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("interface-disconnect", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayInterfaceDisconnectParam.SetId(id)
				go func(p *params.InterfaceDisconnectMobileGatewayParam) {
					err := funcs.MobileGatewayInterfaceDisconnect(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayInterfaceDisconnectParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&mobileGatewayInterfaceDisconnectParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&mobileGatewayInterfaceDisconnectParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewayInterfaceDisconnectParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayInterfaceDisconnectParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayInterfaceDisconnectParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayInterfaceDisconnectParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayInterfaceDisconnectParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewayInterfaceDisconnectParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayInterfaceDisconnectFlagOrder(cmd))
	return cmd
}

func mobileGatewayTrafficControlInfoCmd() *cobra.Command {
	mobileGatewayTrafficControlInfoParam := params.NewTrafficControlInfoMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "traffic-control-info",

		Short:        "Show information of traffic-control",
		Long:         `Show information of traffic-control`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayTrafficControlInfoParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayTrafficControlInfoParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayTrafficControlInfoParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayTrafficControlInfoParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayTrafficControlInfoTargets(ctx, mobileGatewayTrafficControlInfoParam)
			if err != nil {
				return err
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayTrafficControlInfoParam.SetId(id)
				go func(p *params.TrafficControlInfoMobileGatewayParam) {
					err := funcs.MobileGatewayTrafficControlInfo(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayTrafficControlInfoParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&mobileGatewayTrafficControlInfoParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&mobileGatewayTrafficControlInfoParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayTrafficControlInfoParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayTrafficControlInfoParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayTrafficControlInfoParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayTrafficControlInfoParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&mobileGatewayTrafficControlInfoParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&mobileGatewayTrafficControlInfoParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&mobileGatewayTrafficControlInfoParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&mobileGatewayTrafficControlInfoParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&mobileGatewayTrafficControlInfoParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&mobileGatewayTrafficControlInfoParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&mobileGatewayTrafficControlInfoParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &mobileGatewayTrafficControlInfoParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayTrafficControlInfoFlagOrder(cmd))
	return cmd
}

func mobileGatewayTrafficControlEnableCmd() *cobra.Command {
	mobileGatewayTrafficControlEnableParam := params.NewTrafficControlEnableMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "traffic-control-enable",

		Short:        "Enable traffic-control",
		Long:         `Enable traffic-control`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayTrafficControlEnableParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayTrafficControlEnableParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayTrafficControlEnableParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayTrafficControlEnableParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayTrafficControlEnableTargets(ctx, mobileGatewayTrafficControlEnableParam)
			if err != nil {
				return err
			}

			// confirm
			if !mobileGatewayTrafficControlEnableParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("traffic-control-enable", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayTrafficControlEnableParam.SetId(id)
				go func(p *params.TrafficControlEnableMobileGatewayParam) {
					err := funcs.MobileGatewayTrafficControlEnable(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayTrafficControlEnableParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.IntVarP(&mobileGatewayTrafficControlEnableParam.Quota, "quota", "", 512, "")
	fs.IntVarP(&mobileGatewayTrafficControlEnableParam.BandWidthLimit, "band-width-limit", "", 0, "")
	fs.BoolVarP(&mobileGatewayTrafficControlEnableParam.EnableEmail, "enable-email", "", false, "")
	fs.StringVarP(&mobileGatewayTrafficControlEnableParam.SlackWebhookUrl, "slack-webhook-url", "", "", "")
	fs.BoolVarP(&mobileGatewayTrafficControlEnableParam.AutoTrafficShaping, "auto-traffic-shaping", "", false, "")
	fs.StringSliceVarP(&mobileGatewayTrafficControlEnableParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&mobileGatewayTrafficControlEnableParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewayTrafficControlEnableParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayTrafficControlEnableParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayTrafficControlEnableParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayTrafficControlEnableParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayTrafficControlEnableParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewayTrafficControlEnableParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayTrafficControlEnableFlagOrder(cmd))
	return cmd
}

func mobileGatewayTrafficControlUpdateCmd() *cobra.Command {
	mobileGatewayTrafficControlUpdateParam := params.NewTrafficControlUpdateMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "traffic-control-update",

		Short:        "Update traffic-control config",
		Long:         `Update traffic-control config`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayTrafficControlUpdateParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayTrafficControlUpdateParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayTrafficControlUpdateParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayTrafficControlUpdateParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayTrafficControlUpdateTargets(ctx, mobileGatewayTrafficControlUpdateParam)
			if err != nil {
				return err
			}

			// confirm
			if !mobileGatewayTrafficControlUpdateParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("traffic-control-update", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayTrafficControlUpdateParam.SetId(id)
				go func(p *params.TrafficControlUpdateMobileGatewayParam) {
					err := funcs.MobileGatewayTrafficControlUpdate(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayTrafficControlUpdateParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.IntVarP(&mobileGatewayTrafficControlUpdateParam.Quota, "quota", "", 0, "")
	fs.IntVarP(&mobileGatewayTrafficControlUpdateParam.BandWidthLimit, "band-width-limit", "", 0, "")
	fs.BoolVarP(&mobileGatewayTrafficControlUpdateParam.EnableEmail, "enable-email", "", false, "")
	fs.StringVarP(&mobileGatewayTrafficControlUpdateParam.SlackWebhookUrl, "slack-webhook-url", "", "", "")
	fs.BoolVarP(&mobileGatewayTrafficControlUpdateParam.AutoTrafficShaping, "auto-traffic-shaping", "", false, "")
	fs.StringSliceVarP(&mobileGatewayTrafficControlUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&mobileGatewayTrafficControlUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewayTrafficControlUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayTrafficControlUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayTrafficControlUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayTrafficControlUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayTrafficControlUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewayTrafficControlUpdateParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayTrafficControlUpdateFlagOrder(cmd))
	return cmd
}

func mobileGatewayTrafficControlDisableCmd() *cobra.Command {
	mobileGatewayTrafficControlDisableParam := params.NewTrafficControlDisableMobileGatewayParam()
	cmd := &cobra.Command{
		Use:          "traffic-control-disable",
		Aliases:      []string{"traffic-control-delete"},
		Short:        "Disable traffic-control config",
		Long:         `Disable traffic-control config`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayTrafficControlDisableParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayTrafficControlDisableParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayTrafficControlDisableParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayTrafficControlDisableParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayTrafficControlDisableTargets(ctx, mobileGatewayTrafficControlDisableParam)
			if err != nil {
				return err
			}

			// confirm
			if !mobileGatewayTrafficControlDisableParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("traffic-control-disable", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayTrafficControlDisableParam.SetId(id)
				go func(p *params.TrafficControlDisableMobileGatewayParam) {
					err := funcs.MobileGatewayTrafficControlDisable(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayTrafficControlDisableParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&mobileGatewayTrafficControlDisableParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&mobileGatewayTrafficControlDisableParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewayTrafficControlDisableParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayTrafficControlDisableParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayTrafficControlDisableParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayTrafficControlDisableParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayTrafficControlDisableParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewayTrafficControlDisableParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayTrafficControlDisableFlagOrder(cmd))
	return cmd
}

func mobileGatewayStaticRouteInfoCmd() *cobra.Command {
	mobileGatewayStaticRouteInfoParam := params.NewStaticRouteInfoMobileGatewayParam()
	cmd := &cobra.Command{
		Use:          "static-route-info",
		Aliases:      []string{"static-route-list"},
		Short:        "Show information of static-routes",
		Long:         `Show information of static-routes`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayStaticRouteInfoParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayStaticRouteInfoParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayStaticRouteInfoParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayStaticRouteInfoParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayStaticRouteInfoTargets(ctx, mobileGatewayStaticRouteInfoParam)
			if err != nil {
				return err
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayStaticRouteInfoParam.SetId(id)
				go func(p *params.StaticRouteInfoMobileGatewayParam) {
					err := funcs.MobileGatewayStaticRouteInfo(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayStaticRouteInfoParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&mobileGatewayStaticRouteInfoParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&mobileGatewayStaticRouteInfoParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayStaticRouteInfoParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayStaticRouteInfoParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayStaticRouteInfoParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayStaticRouteInfoParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&mobileGatewayStaticRouteInfoParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&mobileGatewayStaticRouteInfoParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&mobileGatewayStaticRouteInfoParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&mobileGatewayStaticRouteInfoParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&mobileGatewayStaticRouteInfoParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&mobileGatewayStaticRouteInfoParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&mobileGatewayStaticRouteInfoParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &mobileGatewayStaticRouteInfoParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayStaticRouteInfoFlagOrder(cmd))
	return cmd
}

func mobileGatewayStaticRouteAddCmd() *cobra.Command {
	mobileGatewayStaticRouteAddParam := params.NewStaticRouteAddMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "static-route-add",

		Short:        "Add static-route",
		Long:         `Add static-route`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayStaticRouteAddParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayStaticRouteAddParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayStaticRouteAddParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayStaticRouteAddParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayStaticRouteAddTargets(ctx, mobileGatewayStaticRouteAddParam)
			if err != nil {
				return err
			}

			// confirm
			if !mobileGatewayStaticRouteAddParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("static-route-add", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayStaticRouteAddParam.SetId(id)
				go func(p *params.StaticRouteAddMobileGatewayParam) {
					err := funcs.MobileGatewayStaticRouteAdd(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayStaticRouteAddParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringVarP(&mobileGatewayStaticRouteAddParam.Prefix, "prefix", "", "", "set prefix")
	fs.StringVarP(&mobileGatewayStaticRouteAddParam.NextHop, "next-hop", "", "", "set next-hop")
	fs.StringSliceVarP(&mobileGatewayStaticRouteAddParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&mobileGatewayStaticRouteAddParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewayStaticRouteAddParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayStaticRouteAddParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayStaticRouteAddParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayStaticRouteAddParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayStaticRouteAddParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewayStaticRouteAddParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayStaticRouteAddFlagOrder(cmd))
	return cmd
}

func mobileGatewayStaticRouteUpdateCmd() *cobra.Command {
	mobileGatewayStaticRouteUpdateParam := params.NewStaticRouteUpdateMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "static-route-update",

		Short:        "Update static-route",
		Long:         `Update static-route`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayStaticRouteUpdateParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayStaticRouteUpdateParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayStaticRouteUpdateParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayStaticRouteUpdateParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayStaticRouteUpdateTargets(ctx, mobileGatewayStaticRouteUpdateParam)
			if err != nil {
				return err
			}

			// confirm
			if !mobileGatewayStaticRouteUpdateParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("static-route-update", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayStaticRouteUpdateParam.SetId(id)
				go func(p *params.StaticRouteUpdateMobileGatewayParam) {
					err := funcs.MobileGatewayStaticRouteUpdate(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayStaticRouteUpdateParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.IntVarP(&mobileGatewayStaticRouteUpdateParam.Index, "index", "", 0, "index of target static-route")
	fs.StringVarP(&mobileGatewayStaticRouteUpdateParam.Prefix, "prefix", "", "", "set prefix")
	fs.StringVarP(&mobileGatewayStaticRouteUpdateParam.NextHop, "next-hop", "", "", "set next-hop")
	fs.StringSliceVarP(&mobileGatewayStaticRouteUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&mobileGatewayStaticRouteUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewayStaticRouteUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayStaticRouteUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayStaticRouteUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayStaticRouteUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayStaticRouteUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewayStaticRouteUpdateParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayStaticRouteUpdateFlagOrder(cmd))
	return cmd
}

func mobileGatewayStaticRouteDeleteCmd() *cobra.Command {
	mobileGatewayStaticRouteDeleteParam := params.NewStaticRouteDeleteMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "static-route-delete",

		Short:        "Delete static-route",
		Long:         `Delete static-route`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayStaticRouteDeleteParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayStaticRouteDeleteParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayStaticRouteDeleteParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayStaticRouteDeleteParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayStaticRouteDeleteTargets(ctx, mobileGatewayStaticRouteDeleteParam)
			if err != nil {
				return err
			}

			// confirm
			if !mobileGatewayStaticRouteDeleteParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("static-route-delete", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayStaticRouteDeleteParam.SetId(id)
				go func(p *params.StaticRouteDeleteMobileGatewayParam) {
					err := funcs.MobileGatewayStaticRouteDelete(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayStaticRouteDeleteParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.IntVarP(&mobileGatewayStaticRouteDeleteParam.Index, "index", "", 0, "index of target static-route")
	fs.StringSliceVarP(&mobileGatewayStaticRouteDeleteParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&mobileGatewayStaticRouteDeleteParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewayStaticRouteDeleteParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayStaticRouteDeleteParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayStaticRouteDeleteParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayStaticRouteDeleteParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayStaticRouteDeleteParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewayStaticRouteDeleteParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayStaticRouteDeleteFlagOrder(cmd))
	return cmd
}

func mobileGatewaySIMInfoCmd() *cobra.Command {
	mobileGatewaySIMInfoParam := params.NewSIMInfoMobileGatewayParam()
	cmd := &cobra.Command{
		Use:          "sim-info",
		Aliases:      []string{"interface-list"},
		Short:        "Show information of NIC(s) connected to mobile-gateway",
		Long:         `Show information of NIC(s) connected to mobile-gateway`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewaySIMInfoParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewaySIMInfoParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewaySIMInfoParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewaySIMInfoParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewaySIMInfoTargets(ctx, mobileGatewaySIMInfoParam)
			if err != nil {
				return err
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewaySIMInfoParam.SetId(id)
				go func(p *params.SIMInfoMobileGatewayParam) {
					err := funcs.MobileGatewaySIMInfo(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewaySIMInfoParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&mobileGatewaySIMInfoParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&mobileGatewaySIMInfoParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewaySIMInfoParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewaySIMInfoParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewaySIMInfoParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewaySIMInfoParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&mobileGatewaySIMInfoParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&mobileGatewaySIMInfoParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&mobileGatewaySIMInfoParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&mobileGatewaySIMInfoParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&mobileGatewaySIMInfoParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&mobileGatewaySIMInfoParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&mobileGatewaySIMInfoParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &mobileGatewaySIMInfoParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewaySIMInfoFlagOrder(cmd))
	return cmd
}

func mobileGatewaySIMAddCmd() *cobra.Command {
	mobileGatewaySIMAddParam := params.NewSIMAddMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "sim-add",

		Short:        "Connected to switch",
		Long:         `Connected to switch`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewaySIMAddParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewaySIMAddParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewaySIMAddParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewaySIMAddParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewaySIMAddTargets(ctx, mobileGatewaySIMAddParam)
			if err != nil {
				return err
			}

			// confirm
			if !mobileGatewaySIMAddParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("sim-add", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewaySIMAddParam.SetId(id)
				go func(p *params.SIMAddMobileGatewayParam) {
					err := funcs.MobileGatewaySIMAdd(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewaySIMAddParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringVarP(&mobileGatewaySIMAddParam.Ipaddress, "ipaddress", "", "", "set ipaddress")
	fs.VarP(newIDValue(0, &mobileGatewaySIMAddParam.SIMId), "sim-id", "", "")
	fs.StringSliceVarP(&mobileGatewaySIMAddParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&mobileGatewaySIMAddParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewaySIMAddParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewaySIMAddParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewaySIMAddParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewaySIMAddParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewaySIMAddParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewaySIMAddParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewaySIMAddFlagOrder(cmd))
	return cmd
}

func mobileGatewaySIMUpdateCmd() *cobra.Command {
	mobileGatewaySIMUpdateParam := params.NewSIMUpdateMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "sim-update",

		Short:        "Connected to switch",
		Long:         `Connected to switch`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewaySIMUpdateParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewaySIMUpdateParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewaySIMUpdateParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewaySIMUpdateParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewaySIMUpdateTargets(ctx, mobileGatewaySIMUpdateParam)
			if err != nil {
				return err
			}

			// confirm
			if !mobileGatewaySIMUpdateParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("sim-update", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewaySIMUpdateParam.SetId(id)
				go func(p *params.SIMUpdateMobileGatewayParam) {
					err := funcs.MobileGatewaySIMUpdate(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewaySIMUpdateParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringVarP(&mobileGatewaySIMUpdateParam.Ipaddress, "ipaddress", "", "", "set ipaddress")
	fs.VarP(newIDValue(0, &mobileGatewaySIMUpdateParam.SIMId), "sim-id", "", "")
	fs.StringSliceVarP(&mobileGatewaySIMUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&mobileGatewaySIMUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewaySIMUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewaySIMUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewaySIMUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewaySIMUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewaySIMUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewaySIMUpdateParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewaySIMUpdateFlagOrder(cmd))
	return cmd
}

func mobileGatewaySIMDeleteCmd() *cobra.Command {
	mobileGatewaySIMDeleteParam := params.NewSIMDeleteMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "sim-delete",

		Short:        "Disconnected to switch",
		Long:         `Disconnected to switch`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewaySIMDeleteParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewaySIMDeleteParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewaySIMDeleteParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewaySIMDeleteParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewaySIMDeleteTargets(ctx, mobileGatewaySIMDeleteParam)
			if err != nil {
				return err
			}

			// confirm
			if !mobileGatewaySIMDeleteParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("sim-delete", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewaySIMDeleteParam.SetId(id)
				go func(p *params.SIMDeleteMobileGatewayParam) {
					err := funcs.MobileGatewaySIMDelete(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewaySIMDeleteParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.VarP(newIDValue(0, &mobileGatewaySIMDeleteParam.SIMId), "sim-id", "", "")
	fs.StringSliceVarP(&mobileGatewaySIMDeleteParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&mobileGatewaySIMDeleteParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewaySIMDeleteParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewaySIMDeleteParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewaySIMDeleteParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewaySIMDeleteParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewaySIMDeleteParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewaySIMDeleteParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewaySIMDeleteFlagOrder(cmd))
	return cmd
}

func mobileGatewaySIMRouteInfoCmd() *cobra.Command {
	mobileGatewaySIMRouteInfoParam := params.NewSIMRouteInfoMobileGatewayParam()
	cmd := &cobra.Command{
		Use:          "sim-route-info",
		Aliases:      []string{"sim-route-list"},
		Short:        "Show information of sim-routes",
		Long:         `Show information of sim-routes`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewaySIMRouteInfoParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewaySIMRouteInfoParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewaySIMRouteInfoParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewaySIMRouteInfoParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewaySIMRouteInfoTargets(ctx, mobileGatewaySIMRouteInfoParam)
			if err != nil {
				return err
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewaySIMRouteInfoParam.SetId(id)
				go func(p *params.SIMRouteInfoMobileGatewayParam) {
					err := funcs.MobileGatewaySIMRouteInfo(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewaySIMRouteInfoParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&mobileGatewaySIMRouteInfoParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&mobileGatewaySIMRouteInfoParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewaySIMRouteInfoParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewaySIMRouteInfoParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewaySIMRouteInfoParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewaySIMRouteInfoParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&mobileGatewaySIMRouteInfoParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&mobileGatewaySIMRouteInfoParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&mobileGatewaySIMRouteInfoParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&mobileGatewaySIMRouteInfoParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&mobileGatewaySIMRouteInfoParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&mobileGatewaySIMRouteInfoParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&mobileGatewaySIMRouteInfoParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &mobileGatewaySIMRouteInfoParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewaySIMRouteInfoFlagOrder(cmd))
	return cmd
}

func mobileGatewaySIMRouteAddCmd() *cobra.Command {
	mobileGatewaySIMRouteAddParam := params.NewSIMRouteAddMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "sim-route-add",

		Short:        "Add sim-route",
		Long:         `Add sim-route`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewaySIMRouteAddParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewaySIMRouteAddParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewaySIMRouteAddParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewaySIMRouteAddParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewaySIMRouteAddTargets(ctx, mobileGatewaySIMRouteAddParam)
			if err != nil {
				return err
			}

			// confirm
			if !mobileGatewaySIMRouteAddParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("sim-route-add", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewaySIMRouteAddParam.SetId(id)
				go func(p *params.SIMRouteAddMobileGatewayParam) {
					err := funcs.MobileGatewaySIMRouteAdd(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewaySIMRouteAddParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringVarP(&mobileGatewaySIMRouteAddParam.Prefix, "prefix", "", "", "set prefix")
	fs.VarP(newIDValue(0, &mobileGatewaySIMRouteAddParam.SIM), "sim", "", "set sim")
	fs.StringSliceVarP(&mobileGatewaySIMRouteAddParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&mobileGatewaySIMRouteAddParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewaySIMRouteAddParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewaySIMRouteAddParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewaySIMRouteAddParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewaySIMRouteAddParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewaySIMRouteAddParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewaySIMRouteAddParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewaySIMRouteAddFlagOrder(cmd))
	return cmd
}

func mobileGatewaySIMRouteUpdateCmd() *cobra.Command {
	mobileGatewaySIMRouteUpdateParam := params.NewSIMRouteUpdateMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "sim-route-update",

		Short:        "Update sim-route",
		Long:         `Update sim-route`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewaySIMRouteUpdateParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewaySIMRouteUpdateParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewaySIMRouteUpdateParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewaySIMRouteUpdateParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewaySIMRouteUpdateTargets(ctx, mobileGatewaySIMRouteUpdateParam)
			if err != nil {
				return err
			}

			// confirm
			if !mobileGatewaySIMRouteUpdateParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("sim-route-update", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewaySIMRouteUpdateParam.SetId(id)
				go func(p *params.SIMRouteUpdateMobileGatewayParam) {
					err := funcs.MobileGatewaySIMRouteUpdate(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewaySIMRouteUpdateParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.IntVarP(&mobileGatewaySIMRouteUpdateParam.Index, "index", "", 0, "index of target sim-route")
	fs.StringVarP(&mobileGatewaySIMRouteUpdateParam.Prefix, "prefix", "", "", "set prefix")
	fs.VarP(newIDValue(0, &mobileGatewaySIMRouteUpdateParam.SIM), "sim", "", "set sim")
	fs.StringSliceVarP(&mobileGatewaySIMRouteUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&mobileGatewaySIMRouteUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewaySIMRouteUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewaySIMRouteUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewaySIMRouteUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewaySIMRouteUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewaySIMRouteUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewaySIMRouteUpdateParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewaySIMRouteUpdateFlagOrder(cmd))
	return cmd
}

func mobileGatewaySIMRouteDeleteCmd() *cobra.Command {
	mobileGatewaySIMRouteDeleteParam := params.NewSIMRouteDeleteMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "sim-route-delete",

		Short:        "Delete sim-route",
		Long:         `Delete sim-route`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewaySIMRouteDeleteParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewaySIMRouteDeleteParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewaySIMRouteDeleteParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewaySIMRouteDeleteParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewaySIMRouteDeleteTargets(ctx, mobileGatewaySIMRouteDeleteParam)
			if err != nil {
				return err
			}

			// confirm
			if !mobileGatewaySIMRouteDeleteParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("sim-route-delete", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewaySIMRouteDeleteParam.SetId(id)
				go func(p *params.SIMRouteDeleteMobileGatewayParam) {
					err := funcs.MobileGatewaySIMRouteDelete(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewaySIMRouteDeleteParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.IntVarP(&mobileGatewaySIMRouteDeleteParam.Index, "index", "", 0, "index of target sim-route")
	fs.StringSliceVarP(&mobileGatewaySIMRouteDeleteParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&mobileGatewaySIMRouteDeleteParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewaySIMRouteDeleteParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewaySIMRouteDeleteParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewaySIMRouteDeleteParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewaySIMRouteDeleteParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewaySIMRouteDeleteParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewaySIMRouteDeleteParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewaySIMRouteDeleteFlagOrder(cmd))
	return cmd
}

func mobileGatewayDNSUpdateCmd() *cobra.Command {
	mobileGatewayDNSUpdateParam := params.NewDNSUpdateMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "dns-update",

		Short:        "Update interface",
		Long:         `Update interface`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayDNSUpdateParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayDNSUpdateParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayDNSUpdateParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayDNSUpdateParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayDNSUpdateTargets(ctx, mobileGatewayDNSUpdateParam)
			if err != nil {
				return err
			}

			// confirm
			if !mobileGatewayDNSUpdateParam.Assumeyes {
				if !utils.IsTerminal() {
					return errors.New("the confirm dialog cannot be used without the terminal. Please use --assumeyes(-y) option")
				}
				result, err := utils.ConfirmContinue("dns-update", ctx.IO().In(), ctx.IO().Out(), ids...)
				if err != nil || !result {
					return err
				}
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayDNSUpdateParam.SetId(id)
				go func(p *params.DNSUpdateMobileGatewayParam) {
					err := funcs.MobileGatewayDNSUpdate(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayDNSUpdateParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.StringVarP(&mobileGatewayDNSUpdateParam.DNS1, "dns-1", "", "", "set DNS server address")
	fs.StringVarP(&mobileGatewayDNSUpdateParam.DNS2, "dns-2", "", "", "set DNS server address")
	fs.StringSliceVarP(&mobileGatewayDNSUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&mobileGatewayDNSUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&mobileGatewayDNSUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayDNSUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayDNSUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayDNSUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayDNSUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewayDNSUpdateParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayDNSUpdateFlagOrder(cmd))
	return cmd
}

func mobileGatewayLogsCmd() *cobra.Command {
	mobileGatewayLogsParam := params.NewLogsMobileGatewayParam()
	cmd := &cobra.Command{
		Use: "logs",

		Short:        "Logs MobileGateway",
		Long:         `Logs MobileGateway`,
		SilenceUsage: true,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return mobileGatewayLogsParam.Initialize(newParamsAdapter(cmd.Flags()), args)
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), args, mobileGatewayLogsParam)
			if err != nil {
				return err
			}

			// Experiment warning
			ctx.PrintWarning("")

			if mobileGatewayLogsParam.GenerateSkeleton {
				return generateSkeleton(ctx, mobileGatewayLogsParam)
			}

			// parse ID or Name arguments(generated by tools/gen-resource-finder)
			ids, err := findMobileGatewayLogsTargets(ctx, mobileGatewayLogsParam)
			if err != nil {
				return err
			}

			// TODO v1で置き換えるまでの暫定実装
			var wg sync.WaitGroup
			var errs []error
			for _, id := range ids {
				wg.Add(1)
				mobileGatewayLogsParam.SetId(id)
				go func(p *params.LogsMobileGatewayParam) {
					err := funcs.MobileGatewayLogs(ctx, p.ToV0())
					if err != nil {
						errs = append(errs, err)
					}
					wg.Done()
				}(mobileGatewayLogsParam)
			}
			wg.Wait()
			return command.FlattenErrors(errs)

		},
	}

	fs := cmd.Flags()
	fs.BoolVarP(&mobileGatewayLogsParam.Follow, "follow", "f", false, "follow log output")
	fs.Int64VarP(&mobileGatewayLogsParam.RefreshInterval, "refresh-interval", "", 3, "log refresh interval second")
	fs.StringSliceVarP(&mobileGatewayLogsParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&mobileGatewayLogsParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&mobileGatewayLogsParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&mobileGatewayLogsParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&mobileGatewayLogsParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&mobileGatewayLogsParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &mobileGatewayLogsParam.Id), "id", "", "Set target ID")
	buildFlagsUsage(cmd, mobileGatewayLogsFlagOrder(cmd))
	return cmd
}

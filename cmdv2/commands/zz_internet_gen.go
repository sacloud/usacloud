// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	internetListParam            = params.NewListInternetParam()
	internetCreateParam          = params.NewCreateInternetParam()
	internetReadParam            = params.NewReadInternetParam()
	internetUpdateParam          = params.NewUpdateInternetParam()
	internetDeleteParam          = params.NewDeleteInternetParam()
	internetUpdateBandwidthParam = params.NewUpdateBandwidthInternetParam()
	internetSubnetInfoParam      = params.NewSubnetInfoInternetParam()
	internetSubnetAddParam       = params.NewSubnetAddInternetParam()
	internetSubnetDeleteParam    = params.NewSubnetDeleteInternetParam()
	internetSubnetUpdateParam    = params.NewSubnetUpdateInternetParam()
	internetIPv6InfoParam        = params.NewIPv6InfoInternetParam()
	internetIPv6EnableParam      = params.NewIPv6EnableInternetParam()
	internetIPv6DisableParam     = params.NewIPv6DisableInternetParam()
	internetMonitorParam         = params.NewMonitorInternetParam()
)

// internetCmd represents the command to manage SAKURAÂ Cloud Internet
var internetCmd = &cobra.Command{
	Use:   "internet",
	Short: "A manage commands of Internet",
	Long:  `A manage commands of Internet`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var internetListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List Internet",
	Long:    `List Internet`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := internetListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(internetListParam))
		return err
	},
}

func internetListCmdInit() {
	fs := internetListCmd.Flags()
	fs.IntVarP(&internetListParam.Max, "max", "", 0, "set limit")
	fs.StringSliceVarP(&internetListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringSliceVarP(&internetListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &internetListParam.Id), "id", "", "set filter by id(s)")
	fs.IntVarP(&internetListParam.From, "from", "", 0, "set offset")
	fs.StringSliceVarP(&internetListParam.Tags, "tags", "", []string{}, "set filter by tags(AND)")
}

var internetCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create Internet",
	Long:  `Create Internet`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := internetCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(internetCreateParam))
		return err
	},
}

func internetCreateCmdInit() {
	fs := internetCreateCmd.Flags()
	fs.VarP(newIDValue(0, &internetCreateParam.IconId), "icon-id", "", "set Icon ID")
	fs.IntVarP(&internetCreateParam.NwMasklen, "nw-masklen", "", 28, "set Global-IPAddress prefix")
	fs.IntVarP(&internetCreateParam.BandWidth, "band-width", "", 100, "set band-width(Mbpm)")
	fs.StringVarP(&internetCreateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&internetCreateParam.Description, "description", "", "", "set resource description")
	fs.StringSliceVarP(&internetCreateParam.Tags, "tags", "", []string{}, "set resource tags")
}

var internetReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Internet",
	Long:  `Read Internet`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := internetReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(internetReadParam))
		return err
	},
}

func internetReadCmdInit() {
}

var internetUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update Internet",
	Long:  `Update Internet`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := internetUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(internetUpdateParam))
		return err
	},
}

func internetUpdateCmdInit() {
	fs := internetUpdateCmd.Flags()
	fs.IntVarP(&internetUpdateParam.BandWidth, "band-width", "", 0, "set band-width(Mbpm)")
	fs.StringVarP(&internetUpdateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&internetUpdateParam.Description, "description", "", "", "set resource description")
	fs.StringSliceVarP(&internetUpdateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &internetUpdateParam.IconId), "icon-id", "", "set Icon ID")
}

var internetDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Internet",
	Long:    `Delete Internet`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := internetDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(internetDeleteParam))
		return err
	},
}

func internetDeleteCmdInit() {
}

var internetUpdateBandwidthCmd = &cobra.Command{
	Use: "update-bandwidth",

	Short: "UpdateBandwidth Internet",
	Long:  `UpdateBandwidth Internet`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := internetUpdateBandwidthParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update-bandwidth parameter: \n%s\n", debugMarshalIndent(internetUpdateBandwidthParam))
		return err
	},
}

func internetUpdateBandwidthCmdInit() {
	fs := internetUpdateBandwidthCmd.Flags()
	fs.IntVarP(&internetUpdateBandwidthParam.BandWidth, "band-width", "", 100, "set band-width(Mbpm)")
}

var internetSubnetInfoCmd = &cobra.Command{
	Use: "subnet-info",

	Short: "SubnetInfo Internet",
	Long:  `SubnetInfo Internet`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := internetSubnetInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("subnet-info parameter: \n%s\n", debugMarshalIndent(internetSubnetInfoParam))
		return err
	},
}

func internetSubnetInfoCmdInit() {
}

var internetSubnetAddCmd = &cobra.Command{
	Use: "subnet-add",

	Short: "SubnetAdd Internet",
	Long:  `SubnetAdd Internet`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := internetSubnetAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("subnet-add parameter: \n%s\n", debugMarshalIndent(internetSubnetAddParam))
		return err
	},
}

func internetSubnetAddCmdInit() {
	fs := internetSubnetAddCmd.Flags()
	fs.IntVarP(&internetSubnetAddParam.NwMasklen, "nw-masklen", "", 28, "set Global-IPAddress(subnet) prefix")
	fs.StringVarP(&internetSubnetAddParam.NextHop, "next-hop", "", "", "set NextHop IPAddress")
}

var internetSubnetDeleteCmd = &cobra.Command{
	Use: "subnet-delete",

	Short: "SubnetDelete Internet",
	Long:  `SubnetDelete Internet`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := internetSubnetDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("subnet-delete parameter: \n%s\n", debugMarshalIndent(internetSubnetDeleteParam))
		return err
	},
}

func internetSubnetDeleteCmdInit() {
	fs := internetSubnetDeleteCmd.Flags()
	fs.VarP(newIDValue(0, &internetSubnetDeleteParam.SubnetId), "subnet-id", "", "set Target Subnet ID")
}

var internetSubnetUpdateCmd = &cobra.Command{
	Use: "subnet-update",

	Short: "SubnetUpdate Internet",
	Long:  `SubnetUpdate Internet`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := internetSubnetUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("subnet-update parameter: \n%s\n", debugMarshalIndent(internetSubnetUpdateParam))
		return err
	},
}

func internetSubnetUpdateCmdInit() {
	fs := internetSubnetUpdateCmd.Flags()
	fs.VarP(newIDValue(0, &internetSubnetUpdateParam.SubnetId), "subnet-id", "", "set Target Subnet ID")
	fs.StringVarP(&internetSubnetUpdateParam.NextHop, "next-hop", "", "", "set NextHop IPAddress")
}

var internetIPv6InfoCmd = &cobra.Command{
	Use: "ipv6-info",

	Short: "IPv6Info Internet",
	Long:  `IPv6Info Internet`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := internetIPv6InfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("ipv6-info parameter: \n%s\n", debugMarshalIndent(internetIPv6InfoParam))
		return err
	},
}

func internetIPv6InfoCmdInit() {
}

var internetIPv6EnableCmd = &cobra.Command{
	Use: "ipv6-enable",

	Short: "IPv6Enable Internet",
	Long:  `IPv6Enable Internet`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := internetIPv6EnableParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("ipv6-enable parameter: \n%s\n", debugMarshalIndent(internetIPv6EnableParam))
		return err
	},
}

func internetIPv6EnableCmdInit() {
}

var internetIPv6DisableCmd = &cobra.Command{
	Use: "ipv6-disable",

	Short: "IPv6Disable Internet",
	Long:  `IPv6Disable Internet`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := internetIPv6DisableParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("ipv6-disable parameter: \n%s\n", debugMarshalIndent(internetIPv6DisableParam))
		return err
	},
}

func internetIPv6DisableCmdInit() {
}

var internetMonitorCmd = &cobra.Command{
	Use: "monitor",

	Short: "Monitor Internet",
	Long:  `Monitor Internet`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := internetMonitorParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("monitor parameter: \n%s\n", debugMarshalIndent(internetMonitorParam))
		return err
	},
}

func internetMonitorCmdInit() {
	fs := internetMonitorCmd.Flags()
	fs.StringVarP(&internetMonitorParam.Start, "start", "", "", "set start-time")
	fs.StringVarP(&internetMonitorParam.End, "end", "", "", "set end-time")
	fs.StringVarP(&internetMonitorParam.KeyFormat, "key-format", "", "sakuracloud.internet.{{.ID}}.nic", "set monitoring value key-format")
}

func init() {
	parent := internetCmd

	internetListCmdInit()
	parent.AddCommand(internetListCmd)

	internetCreateCmdInit()
	parent.AddCommand(internetCreateCmd)

	internetReadCmdInit()
	parent.AddCommand(internetReadCmd)

	internetUpdateCmdInit()
	parent.AddCommand(internetUpdateCmd)

	internetDeleteCmdInit()
	parent.AddCommand(internetDeleteCmd)

	internetUpdateBandwidthCmdInit()
	parent.AddCommand(internetUpdateBandwidthCmd)

	internetSubnetInfoCmdInit()
	parent.AddCommand(internetSubnetInfoCmd)

	internetSubnetAddCmdInit()
	parent.AddCommand(internetSubnetAddCmd)

	internetSubnetDeleteCmdInit()
	parent.AddCommand(internetSubnetDeleteCmd)

	internetSubnetUpdateCmdInit()
	parent.AddCommand(internetSubnetUpdateCmd)

	internetIPv6InfoCmdInit()
	parent.AddCommand(internetIPv6InfoCmd)

	internetIPv6EnableCmdInit()
	parent.AddCommand(internetIPv6EnableCmd)

	internetIPv6DisableCmdInit()
	parent.AddCommand(internetIPv6DisableCmd)

	internetMonitorCmdInit()
	parent.AddCommand(internetMonitorCmd)

	rootCmd.AddCommand(parent)
}

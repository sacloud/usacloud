// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	configCurrentParam = params.NewCurrentConfigParam()
	configDeleteParam  = params.NewDeleteConfigParam()
	configEditParam    = params.NewEditConfigParam()
	configListParam    = params.NewListConfigParam()
	configMigrateParam = params.NewMigrateConfigParam()
	configShowParam    = params.NewShowConfigParam()
	configUseParam     = params.NewUseConfigParam()
)

// configCmd represents the command to manage SAKURAÂ Cloud Config
var configCmd = &cobra.Command{
	Use:   "config",
	Short: "A manage command of APIKey settings",
	Long:  `A manage command of APIKey settings`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements: call edit func as default
	},
}

var configCurrentCmd = &cobra.Command{
	Use: "current",

	Short: "Current Config",
	Long:  `Current Config`,
	PreRunE: func(cmd *cobra.Command, args []string) error {
		return configCurrentParam.Initialize(newParamsAdapter(cmd.Flags()))
	},
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx, err := newCLIContext(globalFlags(), configCurrentParam)
		if err != nil {
			return err
		}

		// TODO DEBUG
		fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
		fmt.Printf("current local parameter: \n%s\n", debugMarshalIndent(configCurrentParam))
		return nil
	},
}

func configCurrentCmdInit() {
	fs := configCurrentCmd.Flags()
	fs.StringVarP(&configCurrentParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&configCurrentParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&configCurrentParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&configCurrentParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&configCurrentParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
}

var configDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Config",
	Long:    `Delete Config`,
	PreRunE: func(cmd *cobra.Command, args []string) error {
		return configDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
	},
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx, err := newCLIContext(globalFlags(), configDeleteParam)
		if err != nil {
			return err
		}

		// TODO DEBUG
		fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
		fmt.Printf("delete local parameter: \n%s\n", debugMarshalIndent(configDeleteParam))
		return nil
	},
}

func configDeleteCmdInit() {
	fs := configDeleteCmd.Flags()
	fs.BoolVarP(&configDeleteParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&configDeleteParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&configDeleteParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&configDeleteParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&configDeleteParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&configDeleteParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
}

var configEditCmd = &cobra.Command{
	Use: "edit",

	Short: "Edit Config (default)",
	Long:  `Edit Config (default)`,
	PreRunE: func(cmd *cobra.Command, args []string) error {
		return configEditParam.Initialize(newParamsAdapter(cmd.Flags()))
	},
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx, err := newCLIContext(globalFlags(), configEditParam)
		if err != nil {
			return err
		}

		// TODO DEBUG
		fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
		fmt.Printf("edit local parameter: \n%s\n", debugMarshalIndent(configEditParam))
		return nil
	},
}

func configEditCmdInit() {
	fs := configEditCmd.Flags()
	fs.StringVarP(&configEditParam.Token, "token", "", "", "API Token of SakuraCloud")
	fs.StringVarP(&configEditParam.Secret, "secret", "", "", "API Secret of SakuraCloud")
	fs.StringVarP(&configEditParam.Zone, "zone", "", "", "Target zone of SakuraCloud")
	fs.StringVarP(&configEditParam.DefaultOutputType, "default-output-type", "", "", "Default output format type")
	fs.StringVarP(&configEditParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&configEditParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&configEditParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&configEditParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&configEditParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
}

var configListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls"},
	Short:   "List Config",
	Long:    `List Config`,
	PreRunE: func(cmd *cobra.Command, args []string) error {
		return configListParam.Initialize(newParamsAdapter(cmd.Flags()))
	},
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx, err := newCLIContext(globalFlags(), configListParam)
		if err != nil {
			return err
		}

		// TODO DEBUG
		fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
		fmt.Printf("list local parameter: \n%s\n", debugMarshalIndent(configListParam))
		return nil
	},
}

func configListCmdInit() {
	fs := configListCmd.Flags()
	fs.StringVarP(&configListParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&configListParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&configListParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&configListParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&configListParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
}

var configMigrateCmd = &cobra.Command{
	Use: "migrate",

	Short: "Migrate Config",
	Long:  `Migrate Config`,
	PreRunE: func(cmd *cobra.Command, args []string) error {
		return configMigrateParam.Initialize(newParamsAdapter(cmd.Flags()))
	},
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx, err := newCLIContext(globalFlags(), configMigrateParam)
		if err != nil {
			return err
		}

		// TODO DEBUG
		fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
		fmt.Printf("migrate local parameter: \n%s\n", debugMarshalIndent(configMigrateParam))
		return nil
	},
}

func configMigrateCmdInit() {
	fs := configMigrateCmd.Flags()
	fs.StringVarP(&configMigrateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&configMigrateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&configMigrateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&configMigrateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&configMigrateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
}

var configShowCmd = &cobra.Command{
	Use: "show",

	Short: "Show Config",
	Long:  `Show Config`,
	PreRunE: func(cmd *cobra.Command, args []string) error {
		return configShowParam.Initialize(newParamsAdapter(cmd.Flags()))
	},
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx, err := newCLIContext(globalFlags(), configShowParam)
		if err != nil {
			return err
		}

		// TODO DEBUG
		fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
		fmt.Printf("show local parameter: \n%s\n", debugMarshalIndent(configShowParam))
		return nil
	},
}

func configShowCmdInit() {
	fs := configShowCmd.Flags()
	fs.StringVarP(&configShowParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&configShowParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&configShowParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&configShowParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&configShowParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
}

var configUseCmd = &cobra.Command{
	Use: "use",

	Short: "Use Config",
	Long:  `Use Config`,
	PreRunE: func(cmd *cobra.Command, args []string) error {
		return configUseParam.Initialize(newParamsAdapter(cmd.Flags()))
	},
	RunE: func(cmd *cobra.Command, args []string) error {
		ctx, err := newCLIContext(globalFlags(), configUseParam)
		if err != nil {
			return err
		}

		// TODO DEBUG
		fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
		fmt.Printf("use local parameter: \n%s\n", debugMarshalIndent(configUseParam))
		return nil
	},
}

func configUseCmdInit() {
	fs := configUseCmd.Flags()
	fs.StringVarP(&configUseParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&configUseParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&configUseParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&configUseParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&configUseParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
}

func init() {
	parent := configCmd

	configCurrentCmdInit()
	parent.AddCommand(configCurrentCmd)

	configDeleteCmdInit()
	parent.AddCommand(configDeleteCmd)

	configEditCmdInit()
	parent.AddCommand(configEditCmd)

	configListCmdInit()
	parent.AddCommand(configListCmd)

	configMigrateCmdInit()
	parent.AddCommand(configMigrateCmd)

	configShowCmdInit()
	parent.AddCommand(configShowCmd)

	configUseCmdInit()
	parent.AddCommand(configUseCmd)

	rootCmd.AddCommand(parent)
}

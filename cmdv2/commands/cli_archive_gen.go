// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

// archiveCmd represents the archive command
var archiveCmd = &cobra.Command{
	Use:   "archive",
	Short: "A manage commands of Archive",
	Long:  `A manage commands of Archive`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var archiveListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List Archive",
	Long:    `List Archive`,
	RunE: func(cmd *cobra.Command, args []string) error {
		listParam, err := params.NewListArchiveParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(listParam))
		return err
	},
}

var archiveCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create Archive",
	Long:  `Create Archive`,
	RunE: func(cmd *cobra.Command, args []string) error {
		createParam, err := params.NewCreateArchiveParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(createParam))
		return err
	},
}

var archiveReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Archive",
	Long:  `Read Archive`,
	RunE: func(cmd *cobra.Command, args []string) error {
		readParam, err := params.NewReadArchiveParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(readParam))
		return err
	},
}

var archiveUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update Archive",
	Long:  `Update Archive`,
	RunE: func(cmd *cobra.Command, args []string) error {
		updateParam, err := params.NewUpdateArchiveParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(updateParam))
		return err
	},
}

var archiveDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Archive",
	Long:    `Delete Archive`,
	RunE: func(cmd *cobra.Command, args []string) error {
		deleteParam, err := params.NewDeleteArchiveParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(deleteParam))
		return err
	},
}

var archiveUploadCmd = &cobra.Command{
	Use: "upload",

	Short: "Upload Archive",
	Long:  `Upload Archive`,
	RunE: func(cmd *cobra.Command, args []string) error {
		uploadParam, err := params.NewUploadArchiveParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("upload parameter: \n%s\n", debugMarshalIndent(uploadParam))
		return err
	},
}

var archiveDownloadCmd = &cobra.Command{
	Use: "download",

	Short: "Download Archive",
	Long:  `Download Archive`,
	RunE: func(cmd *cobra.Command, args []string) error {
		downloadParam, err := params.NewDownloadArchiveParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("download parameter: \n%s\n", debugMarshalIndent(downloadParam))
		return err
	},
}

var archiveFtpOpenCmd = &cobra.Command{
	Use: "ftp-open",

	Short: "FtpOpen Archive",
	Long:  `FtpOpen Archive`,
	RunE: func(cmd *cobra.Command, args []string) error {
		ftpOpenParam, err := params.NewFtpOpenArchiveParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("ftp-open parameter: \n%s\n", debugMarshalIndent(ftpOpenParam))
		return err
	},
}

var archiveFtpCloseCmd = &cobra.Command{
	Use: "ftp-close",

	Short: "FtpClose Archive",
	Long:  `FtpClose Archive`,
	RunE: func(cmd *cobra.Command, args []string) error {
		ftpCloseParam, err := params.NewFtpCloseArchiveParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("ftp-close parameter: \n%s\n", debugMarshalIndent(ftpCloseParam))
		return err
	},
}

var archiveWaitForCopyCmd = &cobra.Command{
	Use: "wait-for-copy",

	Short: "WaitForCopy Archive",
	Long:  `WaitForCopy Archive`,
	RunE: func(cmd *cobra.Command, args []string) error {
		waitForCopyParam, err := params.NewWaitForCopyArchiveParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("wait-for-copy parameter: \n%s\n", debugMarshalIndent(waitForCopyParam))
		return err
	},
}

func init() {
	parent := archiveCmd
	parent.AddCommand(archiveListCmd)
	parent.AddCommand(archiveCreateCmd)
	parent.AddCommand(archiveReadCmd)
	parent.AddCommand(archiveUpdateCmd)
	parent.AddCommand(archiveDeleteCmd)
	parent.AddCommand(archiveUploadCmd)
	parent.AddCommand(archiveDownloadCmd)
	parent.AddCommand(archiveFtpOpenCmd)
	parent.AddCommand(archiveFtpCloseCmd)
	parent.AddCommand(archiveWaitForCopyCmd)
	rootCmd.AddCommand(archiveCmd)
}

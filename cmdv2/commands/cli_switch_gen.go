// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

// switchCmd represents the switch command
var switchCmd = &cobra.Command{
	Use:   "switch",
	Short: "A manage commands of Switch",
	Long:  `A manage commands of Switch`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var switchListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List Switch",
	Long:    `List Switch`,
	RunE: func(cmd *cobra.Command, args []string) error {
		listParam, err := params.NewListSwitchParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(listParam))
		return err
	},
}

var switchCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create Switch",
	Long:  `Create Switch`,
	RunE: func(cmd *cobra.Command, args []string) error {
		createParam, err := params.NewCreateSwitchParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(createParam))
		return err
	},
}

var switchReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Switch",
	Long:  `Read Switch`,
	RunE: func(cmd *cobra.Command, args []string) error {
		readParam, err := params.NewReadSwitchParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(readParam))
		return err
	},
}

var switchUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update Switch",
	Long:  `Update Switch`,
	RunE: func(cmd *cobra.Command, args []string) error {
		updateParam, err := params.NewUpdateSwitchParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(updateParam))
		return err
	},
}

var switchDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Switch",
	Long:    `Delete Switch`,
	RunE: func(cmd *cobra.Command, args []string) error {
		deleteParam, err := params.NewDeleteSwitchParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(deleteParam))
		return err
	},
}

var switchBridgeConnectCmd = &cobra.Command{
	Use: "bridge-connect",

	Short: "BridgeConnect Switch",
	Long:  `BridgeConnect Switch`,
	RunE: func(cmd *cobra.Command, args []string) error {
		bridgeConnectParam, err := params.NewBridgeConnectSwitchParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("bridge-connect parameter: \n%s\n", debugMarshalIndent(bridgeConnectParam))
		return err
	},
}

var switchBridgeDisconnectCmd = &cobra.Command{
	Use: "bridge-disconnect",

	Short: "BridgeDisconnect Switch",
	Long:  `BridgeDisconnect Switch`,
	RunE: func(cmd *cobra.Command, args []string) error {
		bridgeDisconnectParam, err := params.NewBridgeDisconnectSwitchParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("bridge-disconnect parameter: \n%s\n", debugMarshalIndent(bridgeDisconnectParam))
		return err
	},
}

func init() {
	parent := switchCmd
	parent.AddCommand(switchListCmd)
	parent.AddCommand(switchCreateCmd)
	parent.AddCommand(switchReadCmd)
	parent.AddCommand(switchUpdateCmd)
	parent.AddCommand(switchDeleteCmd)
	parent.AddCommand(switchBridgeConnectCmd)
	parent.AddCommand(switchBridgeDisconnectCmd)
	rootCmd.AddCommand(switchCmd)
}

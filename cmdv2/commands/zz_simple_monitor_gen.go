// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	simpleMonitorListParam   = params.NewListSimpleMonitorParam()
	simpleMonitorCreateParam = params.NewCreateSimpleMonitorParam()
	simpleMonitorReadParam   = params.NewReadSimpleMonitorParam()
	simpleMonitorUpdateParam = params.NewUpdateSimpleMonitorParam()
	simpleMonitorDeleteParam = params.NewDeleteSimpleMonitorParam()
	simpleMonitorHealthParam = params.NewHealthSimpleMonitorParam()
)

// simpleMonitorCmd represents the command to manage SAKURAÂ Cloud SimpleMonitor
var simpleMonitorCmd = &cobra.Command{
	Use:   "simpleMonitor",
	Short: "A manage commands of SimpleMonitor",
	Long:  `A manage commands of SimpleMonitor`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var simpleMonitorListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List SimpleMonitor",
	Long:    `List SimpleMonitor`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := simpleMonitorListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(simpleMonitorListParam))
		return err
	},
}

func simpleMonitorListCmdInit() {
	fs := simpleMonitorListCmd.Flags()
	fs.IntVarP(&simpleMonitorListParam.From, "from", "", 0, "set offset")
	fs.IntVarP(&simpleMonitorListParam.Max, "max", "", 0, "set limit")
	fs.StringSliceVarP(&simpleMonitorListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringSliceVarP(&simpleMonitorListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &simpleMonitorListParam.Id), "id", "", "set filter by id(s)")
	fs.StringSliceVarP(&simpleMonitorListParam.Tags, "tags", "", []string{}, "set filter by tags(AND)")
	fs.StringVarP(&simpleMonitorListParam.Health, "health", "", "", "set filter by HealthCheck Status('up' or 'down' or 'unknown')")
}

var simpleMonitorCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create SimpleMonitor",
	Long:  `Create SimpleMonitor`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := simpleMonitorCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(simpleMonitorCreateParam))
		return err
	},
}

func simpleMonitorCreateCmdInit() {
	fs := simpleMonitorCreateCmd.Flags()
	fs.StringVarP(&simpleMonitorCreateParam.Path, "path", "", "", "set path of http/https monitoring request")
	fs.StringVarP(&simpleMonitorCreateParam.Password, "password", "", "", "set Basic Auth password")
	fs.StringVarP(&simpleMonitorCreateParam.DNSQname, "dns-qname", "", "", "set DNS query target name")
	fs.BoolVarP(&simpleMonitorCreateParam.NotifyEmail, "notify-email", "", true, "enable e-mail notification")
	fs.StringVarP(&simpleMonitorCreateParam.SlackWebhook, "slack-webhook", "", "", "set slack-webhook URL")
	fs.StringVarP(&simpleMonitorCreateParam.Description, "description", "", "", "set resource description")
	fs.StringVarP(&simpleMonitorCreateParam.HostHeader, "host-header", "", "", "set host header of http/https monitoring request")
	fs.BoolVarP(&simpleMonitorCreateParam.Sni, "sni", "", false, "enable SNI support for https monitoring")
	fs.StringVarP(&simpleMonitorCreateParam.Username, "username", "", "", "set Basic Auth user name")
	fs.StringVarP(&simpleMonitorCreateParam.EmailType, "email-type", "", "text", "set e-mail type")
	fs.IntVarP(&simpleMonitorCreateParam.DelayLoop, "delay-loop", "", 1, "set delay-loop of monitoring(minute)")
	fs.IntVarP(&simpleMonitorCreateParam.Port, "port", "", 0, "set port of tcp monitoring")
	fs.IntVarP(&simpleMonitorCreateParam.ResponseCode, "response-code", "", 0, "set response-code of http/https monitoring request")
	fs.StringVarP(&simpleMonitorCreateParam.DNSExcepted, "dns-excepted", "", "", "set DNS query excepted value")
	fs.IntVarP(&simpleMonitorCreateParam.NotifyInterval, "notify-interval", "", 2, "set notify-interval(hours)")
	fs.StringSliceVarP(&simpleMonitorCreateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &simpleMonitorCreateParam.IconId), "icon-id", "", "set Icon ID")
	fs.StringVarP(&simpleMonitorCreateParam.Target, "target", "", "", "set monitoring target IP or Hostname")
	fs.BoolVarP(&simpleMonitorCreateParam.Disabled, "disabled", "", false, "set monitoring disable")
	fs.IntVarP(&simpleMonitorCreateParam.RemainingDays, "remaining-days", "", 30, "set SSL-Certificate remaining days")
	fs.StringVarP(&simpleMonitorCreateParam.Protocol, "protocol", "", "ping", "set monitoring protocol[http/https/ping/tcp/dns/ssh/smtp/pop3/ssl-certificate]")
}

var simpleMonitorReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read SimpleMonitor",
	Long:  `Read SimpleMonitor`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := simpleMonitorReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(simpleMonitorReadParam))
		return err
	},
}

func simpleMonitorReadCmdInit() {
}

var simpleMonitorUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update SimpleMonitor",
	Long:  `Update SimpleMonitor`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := simpleMonitorUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(simpleMonitorUpdateParam))
		return err
	},
}

func simpleMonitorUpdateCmdInit() {
	fs := simpleMonitorUpdateCmd.Flags()
	fs.StringVarP(&simpleMonitorUpdateParam.HostHeader, "host-header", "", "", "set host header of http/https monitoring request")
	fs.StringVarP(&simpleMonitorUpdateParam.Path, "path", "", "", "set path of http/https monitoring request")
	fs.IntVarP(&simpleMonitorUpdateParam.ResponseCode, "response-code", "", 0, "set response-code of http/https monitoring request")
	fs.StringVarP(&simpleMonitorUpdateParam.EmailType, "email-type", "", "", "set e-mail type")
	fs.IntVarP(&simpleMonitorUpdateParam.NotifyInterval, "notify-interval", "", 2, "set notify-interval(hours)")
	fs.StringVarP(&simpleMonitorUpdateParam.Description, "description", "", "", "set resource description")
	fs.IntVarP(&simpleMonitorUpdateParam.Port, "port", "", 0, "set port of tcp monitoring")
	fs.BoolVarP(&simpleMonitorUpdateParam.Sni, "sni", "", false, "enable SNI support for https monitoring")
	fs.StringVarP(&simpleMonitorUpdateParam.Password, "password", "", "", "set Basic Auth password")
	fs.BoolVarP(&simpleMonitorUpdateParam.NotifyEmail, "notify-email", "", false, "enable e-mail notification")
	fs.StringSliceVarP(&simpleMonitorUpdateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &simpleMonitorUpdateParam.IconId), "icon-id", "", "set Icon ID")
	fs.IntVarP(&simpleMonitorUpdateParam.DelayLoop, "delay-loop", "", 0, "set delay-loop of monitoring(minute)")
	fs.BoolVarP(&simpleMonitorUpdateParam.Disabled, "disabled", "", false, "set monitoring enable/disable")
	fs.StringVarP(&simpleMonitorUpdateParam.Username, "username", "", "", "set Basic Auth user name")
	fs.StringVarP(&simpleMonitorUpdateParam.DNSExcepted, "dns-excepted", "", "", "set DNS query excepted value")
	fs.IntVarP(&simpleMonitorUpdateParam.RemainingDays, "remaining-days", "", 0, "set SSL-Certificate remaining days")
	fs.StringVarP(&simpleMonitorUpdateParam.SlackWebhook, "slack-webhook", "", "", "set slack-webhook URL")
	fs.StringVarP(&simpleMonitorUpdateParam.Protocol, "protocol", "", "", "set monitoring protocol[http/https/ping/tcp/dns/ssh/smtp/pop3/ssl-certificate]")
	fs.StringVarP(&simpleMonitorUpdateParam.DNSQname, "dns-qname", "", "", "set DNS query target name")
}

var simpleMonitorDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete SimpleMonitor",
	Long:    `Delete SimpleMonitor`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := simpleMonitorDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(simpleMonitorDeleteParam))
		return err
	},
}

func simpleMonitorDeleteCmdInit() {
}

var simpleMonitorHealthCmd = &cobra.Command{
	Use: "health",

	Short: "Health SimpleMonitor",
	Long:  `Health SimpleMonitor`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := simpleMonitorHealthParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("health parameter: \n%s\n", debugMarshalIndent(simpleMonitorHealthParam))
		return err
	},
}

func simpleMonitorHealthCmdInit() {
}

func init() {
	parent := simpleMonitorCmd

	simpleMonitorListCmdInit()
	parent.AddCommand(simpleMonitorListCmd)

	simpleMonitorCreateCmdInit()
	parent.AddCommand(simpleMonitorCreateCmd)

	simpleMonitorReadCmdInit()
	parent.AddCommand(simpleMonitorReadCmd)

	simpleMonitorUpdateCmdInit()
	parent.AddCommand(simpleMonitorUpdateCmd)

	simpleMonitorDeleteCmdInit()
	parent.AddCommand(simpleMonitorDeleteCmd)

	simpleMonitorHealthCmdInit()
	parent.AddCommand(simpleMonitorHealthCmd)

	rootCmd.AddCommand(parent)
}

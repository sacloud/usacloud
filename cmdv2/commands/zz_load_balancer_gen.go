// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

// loadBalancerCmd represents the command to manage SAKURAÂ Cloud LoadBalancer
func loadBalancerCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "load-balancer",
		Short: "A manage commands of LoadBalancer",
		Long:  `A manage commands of LoadBalancer`,
		Run: func(cmd *cobra.Command, args []string) {
			cmd.HelpFunc()(cmd, args)
		},
	}
}

func loadBalancerListCmd() *cobra.Command {
	loadBalancerListParam := params.NewListLoadBalancerParam()
	cmd := &cobra.Command{
		Use:     "list",
		Aliases: []string{"ls", "find", "selector"},
		Short:   "List LoadBalancer",
		Long:    `List LoadBalancer`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return loadBalancerListParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), loadBalancerListParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("list local parameter: \n%s\n", debugMarshalIndent(loadBalancerListParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&loadBalancerListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &loadBalancerListParam.Id), "id", "", "set filter by id(s)")
	fs.StringSliceVarP(&loadBalancerListParam.Tags, "tags", "", []string{}, "set filter by tags(AND)")
	fs.IntVarP(&loadBalancerListParam.From, "from", "", 0, "set offset")
	fs.IntVarP(&loadBalancerListParam.Max, "max", "", 0, "set limit")
	fs.StringSliceVarP(&loadBalancerListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringVarP(&loadBalancerListParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&loadBalancerListParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&loadBalancerListParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&loadBalancerListParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&loadBalancerListParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&loadBalancerListParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&loadBalancerListParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&loadBalancerListParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&loadBalancerListParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&loadBalancerListParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&loadBalancerListParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&loadBalancerListParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	return cmd
}

func loadBalancerCreateCmd() *cobra.Command {
	loadBalancerCreateParam := params.NewCreateLoadBalancerParam()
	cmd := &cobra.Command{
		Use: "create",

		Short: "Create LoadBalancer",
		Long:  `Create LoadBalancer`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return loadBalancerCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), loadBalancerCreateParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("create local parameter: \n%s\n", debugMarshalIndent(loadBalancerCreateParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.VarP(newIDValue(0, &loadBalancerCreateParam.SwitchId), "switch-id", "", "set connect switch ID")
	fs.IntVarP(&loadBalancerCreateParam.Vrid, "vrid", "", 1, "set VRID")
	fs.BoolVarP(&loadBalancerCreateParam.HighAvailability, "high-availability", "", false, "use HA(High-Availability) mode")
	fs.StringVarP(&loadBalancerCreateParam.Plan, "plan", "", "standard", "set plan[standard/highspec]")
	fs.StringVarP(&loadBalancerCreateParam.Ipaddress1, "ipaddress-1", "", "", "set ipaddress(#1)")
	fs.StringVarP(&loadBalancerCreateParam.Ipaddress2, "ipaddress-2", "", "", "set ipaddress(#2)")
	fs.IntVarP(&loadBalancerCreateParam.NwMaskLen, "nw-mask-len", "", 0, "set network mask length")
	fs.StringVarP(&loadBalancerCreateParam.DefaultRoute, "default-route", "", "", "set default route")
	fs.StringVarP(&loadBalancerCreateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&loadBalancerCreateParam.Description, "description", "", "", "set resource description")
	fs.StringSliceVarP(&loadBalancerCreateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &loadBalancerCreateParam.IconId), "icon-id", "", "set Icon ID")
	fs.BoolVarP(&loadBalancerCreateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&loadBalancerCreateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&loadBalancerCreateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&loadBalancerCreateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&loadBalancerCreateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&loadBalancerCreateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&loadBalancerCreateParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&loadBalancerCreateParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&loadBalancerCreateParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&loadBalancerCreateParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&loadBalancerCreateParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&loadBalancerCreateParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&loadBalancerCreateParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	return cmd
}

func loadBalancerReadCmd() *cobra.Command {
	loadBalancerReadParam := params.NewReadLoadBalancerParam()
	cmd := &cobra.Command{
		Use: "read",

		Short: "Read LoadBalancer",
		Long:  `Read LoadBalancer`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return loadBalancerReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), loadBalancerReadParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("read local parameter: \n%s\n", debugMarshalIndent(loadBalancerReadParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&loadBalancerReadParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&loadBalancerReadParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&loadBalancerReadParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&loadBalancerReadParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&loadBalancerReadParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&loadBalancerReadParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&loadBalancerReadParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&loadBalancerReadParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&loadBalancerReadParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&loadBalancerReadParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&loadBalancerReadParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&loadBalancerReadParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&loadBalancerReadParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &loadBalancerReadParam.Id), "id", "", "Set target ID")
	return cmd
}

func loadBalancerUpdateCmd() *cobra.Command {
	loadBalancerUpdateParam := params.NewUpdateLoadBalancerParam()
	cmd := &cobra.Command{
		Use: "update",

		Short: "Update LoadBalancer",
		Long:  `Update LoadBalancer`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return loadBalancerUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), loadBalancerUpdateParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("update local parameter: \n%s\n", debugMarshalIndent(loadBalancerUpdateParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&loadBalancerUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&loadBalancerUpdateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&loadBalancerUpdateParam.Description, "description", "", "", "set resource description")
	fs.StringSliceVarP(&loadBalancerUpdateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &loadBalancerUpdateParam.IconId), "icon-id", "", "set Icon ID")
	fs.BoolVarP(&loadBalancerUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&loadBalancerUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&loadBalancerUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&loadBalancerUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&loadBalancerUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&loadBalancerUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&loadBalancerUpdateParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&loadBalancerUpdateParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&loadBalancerUpdateParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&loadBalancerUpdateParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&loadBalancerUpdateParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&loadBalancerUpdateParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&loadBalancerUpdateParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &loadBalancerUpdateParam.Id), "id", "", "Set target ID")
	return cmd
}

func loadBalancerDeleteCmd() *cobra.Command {
	loadBalancerDeleteParam := params.NewDeleteLoadBalancerParam()
	cmd := &cobra.Command{
		Use:     "delete",
		Aliases: []string{"rm"},
		Short:   "Delete LoadBalancer",
		Long:    `Delete LoadBalancer`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return loadBalancerDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), loadBalancerDeleteParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("delete local parameter: \n%s\n", debugMarshalIndent(loadBalancerDeleteParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.BoolVarP(&loadBalancerDeleteParam.Force, "force", "f", false, "forced-shutdown flag if load-balancer is running")
	fs.StringSliceVarP(&loadBalancerDeleteParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&loadBalancerDeleteParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&loadBalancerDeleteParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&loadBalancerDeleteParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&loadBalancerDeleteParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&loadBalancerDeleteParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&loadBalancerDeleteParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&loadBalancerDeleteParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&loadBalancerDeleteParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&loadBalancerDeleteParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&loadBalancerDeleteParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&loadBalancerDeleteParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&loadBalancerDeleteParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&loadBalancerDeleteParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &loadBalancerDeleteParam.Id), "id", "", "Set target ID")
	return cmd
}

func loadBalancerBootCmd() *cobra.Command {
	loadBalancerBootParam := params.NewBootLoadBalancerParam()
	cmd := &cobra.Command{
		Use:     "boot",
		Aliases: []string{"power-on"},
		Short:   "Boot LoadBalancer",
		Long:    `Boot LoadBalancer`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return loadBalancerBootParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), loadBalancerBootParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("boot local parameter: \n%s\n", debugMarshalIndent(loadBalancerBootParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&loadBalancerBootParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&loadBalancerBootParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&loadBalancerBootParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&loadBalancerBootParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&loadBalancerBootParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&loadBalancerBootParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&loadBalancerBootParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &loadBalancerBootParam.Id), "id", "", "Set target ID")
	return cmd
}

func loadBalancerShutdownCmd() *cobra.Command {
	loadBalancerShutdownParam := params.NewShutdownLoadBalancerParam()
	cmd := &cobra.Command{
		Use:     "shutdown",
		Aliases: []string{"power-off"},
		Short:   "Shutdown LoadBalancer",
		Long:    `Shutdown LoadBalancer`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return loadBalancerShutdownParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), loadBalancerShutdownParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("shutdown local parameter: \n%s\n", debugMarshalIndent(loadBalancerShutdownParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&loadBalancerShutdownParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&loadBalancerShutdownParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&loadBalancerShutdownParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&loadBalancerShutdownParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&loadBalancerShutdownParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&loadBalancerShutdownParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&loadBalancerShutdownParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &loadBalancerShutdownParam.Id), "id", "", "Set target ID")
	return cmd
}

func loadBalancerShutdownForceCmd() *cobra.Command {
	loadBalancerShutdownForceParam := params.NewShutdownForceLoadBalancerParam()
	cmd := &cobra.Command{
		Use:     "shutdown-force",
		Aliases: []string{"stop"},
		Short:   "ShutdownForce LoadBalancer",
		Long:    `ShutdownForce LoadBalancer`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return loadBalancerShutdownForceParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), loadBalancerShutdownForceParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("shutdown-force local parameter: \n%s\n", debugMarshalIndent(loadBalancerShutdownForceParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&loadBalancerShutdownForceParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&loadBalancerShutdownForceParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&loadBalancerShutdownForceParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&loadBalancerShutdownForceParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&loadBalancerShutdownForceParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&loadBalancerShutdownForceParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&loadBalancerShutdownForceParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &loadBalancerShutdownForceParam.Id), "id", "", "Set target ID")
	return cmd
}

func loadBalancerResetCmd() *cobra.Command {
	loadBalancerResetParam := params.NewResetLoadBalancerParam()
	cmd := &cobra.Command{
		Use: "reset",

		Short: "Reset LoadBalancer",
		Long:  `Reset LoadBalancer`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return loadBalancerResetParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), loadBalancerResetParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("reset local parameter: \n%s\n", debugMarshalIndent(loadBalancerResetParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&loadBalancerResetParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&loadBalancerResetParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&loadBalancerResetParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&loadBalancerResetParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&loadBalancerResetParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&loadBalancerResetParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&loadBalancerResetParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &loadBalancerResetParam.Id), "id", "", "Set target ID")
	return cmd
}

func loadBalancerWaitForBootCmd() *cobra.Command {
	loadBalancerWaitForBootParam := params.NewWaitForBootLoadBalancerParam()
	cmd := &cobra.Command{
		Use: "wait-for-boot",

		Short: "Wait until boot is completed",
		Long:  `Wait until boot is completed`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return loadBalancerWaitForBootParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), loadBalancerWaitForBootParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("wait-for-boot local parameter: \n%s\n", debugMarshalIndent(loadBalancerWaitForBootParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&loadBalancerWaitForBootParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&loadBalancerWaitForBootParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&loadBalancerWaitForBootParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&loadBalancerWaitForBootParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&loadBalancerWaitForBootParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&loadBalancerWaitForBootParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &loadBalancerWaitForBootParam.Id), "id", "", "Set target ID")
	return cmd
}

func loadBalancerWaitForDownCmd() *cobra.Command {
	loadBalancerWaitForDownParam := params.NewWaitForDownLoadBalancerParam()
	cmd := &cobra.Command{
		Use: "wait-for-down",

		Short: "Wait until shutdown is completed",
		Long:  `Wait until shutdown is completed`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return loadBalancerWaitForDownParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), loadBalancerWaitForDownParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("wait-for-down local parameter: \n%s\n", debugMarshalIndent(loadBalancerWaitForDownParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&loadBalancerWaitForDownParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&loadBalancerWaitForDownParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&loadBalancerWaitForDownParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&loadBalancerWaitForDownParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&loadBalancerWaitForDownParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&loadBalancerWaitForDownParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &loadBalancerWaitForDownParam.Id), "id", "", "Set target ID")
	return cmd
}

func loadBalancerVipInfoCmd() *cobra.Command {
	loadBalancerVipInfoParam := params.NewVipInfoLoadBalancerParam()
	cmd := &cobra.Command{
		Use: "vip-info",

		Short: "Show information of VIP(s)",
		Long:  `Show information of VIP(s)`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return loadBalancerVipInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), loadBalancerVipInfoParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("vip-info local parameter: \n%s\n", debugMarshalIndent(loadBalancerVipInfoParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.StringSliceVarP(&loadBalancerVipInfoParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&loadBalancerVipInfoParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&loadBalancerVipInfoParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&loadBalancerVipInfoParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&loadBalancerVipInfoParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&loadBalancerVipInfoParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&loadBalancerVipInfoParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&loadBalancerVipInfoParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&loadBalancerVipInfoParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&loadBalancerVipInfoParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&loadBalancerVipInfoParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&loadBalancerVipInfoParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&loadBalancerVipInfoParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &loadBalancerVipInfoParam.Id), "id", "", "Set target ID")
	return cmd
}

func loadBalancerVipAddCmd() *cobra.Command {
	loadBalancerVipAddParam := params.NewVipAddLoadBalancerParam()
	cmd := &cobra.Command{
		Use: "vip-add",

		Short: "Add VIP to LoadBalancer",
		Long:  `Add VIP to LoadBalancer`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return loadBalancerVipAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), loadBalancerVipAddParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("vip-add local parameter: \n%s\n", debugMarshalIndent(loadBalancerVipAddParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.StringVarP(&loadBalancerVipAddParam.Vip, "vip", "", "", "set VirtualIPAddress")
	fs.IntVarP(&loadBalancerVipAddParam.Port, "port", "", 0, "set port")
	fs.IntVarP(&loadBalancerVipAddParam.DelayLoop, "delay-loop", "", 10, "set delay-loop")
	fs.StringVarP(&loadBalancerVipAddParam.SorryServer, "sorry-server", "", "", "set IPAddress of sorry-server")
	fs.StringVarP(&loadBalancerVipAddParam.Description, "description", "", "", "set Description of VIP")
	fs.StringSliceVarP(&loadBalancerVipAddParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&loadBalancerVipAddParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&loadBalancerVipAddParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&loadBalancerVipAddParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&loadBalancerVipAddParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&loadBalancerVipAddParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&loadBalancerVipAddParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &loadBalancerVipAddParam.Id), "id", "", "Set target ID")
	return cmd
}

func loadBalancerVipUpdateCmd() *cobra.Command {
	loadBalancerVipUpdateParam := params.NewVipUpdateLoadBalancerParam()
	cmd := &cobra.Command{
		Use: "vip-update",

		Short: "Update VIP",
		Long:  `Update VIP`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return loadBalancerVipUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), loadBalancerVipUpdateParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("vip-update local parameter: \n%s\n", debugMarshalIndent(loadBalancerVipUpdateParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.IntVarP(&loadBalancerVipUpdateParam.Index, "index", "", 0, "index of target VIP")
	fs.StringVarP(&loadBalancerVipUpdateParam.Vip, "vip", "", "", "set VirtualIPAddress")
	fs.IntVarP(&loadBalancerVipUpdateParam.Port, "port", "", 0, "set port")
	fs.IntVarP(&loadBalancerVipUpdateParam.DelayLoop, "delay-loop", "", 10, "set delay-loop")
	fs.StringVarP(&loadBalancerVipUpdateParam.SorryServer, "sorry-server", "", "", "set IPAddress of sorry-server")
	fs.StringVarP(&loadBalancerVipUpdateParam.Description, "description", "", "", "set Description of VIP")
	fs.StringSliceVarP(&loadBalancerVipUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&loadBalancerVipUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&loadBalancerVipUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&loadBalancerVipUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&loadBalancerVipUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&loadBalancerVipUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&loadBalancerVipUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &loadBalancerVipUpdateParam.Id), "id", "", "Set target ID")
	return cmd
}

func loadBalancerVipDeleteCmd() *cobra.Command {
	loadBalancerVipDeleteParam := params.NewVipDeleteLoadBalancerParam()
	cmd := &cobra.Command{
		Use: "vip-delete",

		Short: "Delete VIP from LoadBalancer",
		Long:  `Delete VIP from LoadBalancer`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return loadBalancerVipDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), loadBalancerVipDeleteParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("vip-delete local parameter: \n%s\n", debugMarshalIndent(loadBalancerVipDeleteParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.IntVarP(&loadBalancerVipDeleteParam.Index, "index", "", 0, "index of target VIP")
	fs.StringSliceVarP(&loadBalancerVipDeleteParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&loadBalancerVipDeleteParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&loadBalancerVipDeleteParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&loadBalancerVipDeleteParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&loadBalancerVipDeleteParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&loadBalancerVipDeleteParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&loadBalancerVipDeleteParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &loadBalancerVipDeleteParam.Id), "id", "", "Set target ID")
	return cmd
}

func loadBalancerServerInfoCmd() *cobra.Command {
	loadBalancerServerInfoParam := params.NewServerInfoLoadBalancerParam()
	cmd := &cobra.Command{
		Use: "server-info",

		Short: "Show servers under VIP(s)",
		Long:  `Show servers under VIP(s)`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return loadBalancerServerInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), loadBalancerServerInfoParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("server-info local parameter: \n%s\n", debugMarshalIndent(loadBalancerServerInfoParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.IntVarP(&loadBalancerServerInfoParam.VipIndex, "vip-index", "", 0, "index of target VIP")
	fs.StringVarP(&loadBalancerServerInfoParam.Vip, "vip", "", "", "set VirtualIPAddress")
	fs.IntVarP(&loadBalancerServerInfoParam.Port, "port", "", 0, "set port")
	fs.StringSliceVarP(&loadBalancerServerInfoParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&loadBalancerServerInfoParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&loadBalancerServerInfoParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&loadBalancerServerInfoParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&loadBalancerServerInfoParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&loadBalancerServerInfoParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&loadBalancerServerInfoParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&loadBalancerServerInfoParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&loadBalancerServerInfoParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&loadBalancerServerInfoParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&loadBalancerServerInfoParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&loadBalancerServerInfoParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&loadBalancerServerInfoParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &loadBalancerServerInfoParam.Id), "id", "", "Set target ID")
	return cmd
}

func loadBalancerServerAddCmd() *cobra.Command {
	loadBalancerServerAddParam := params.NewServerAddLoadBalancerParam()
	cmd := &cobra.Command{
		Use: "server-add",

		Short: "Add server under VIP(s)",
		Long:  `Add server under VIP(s)`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return loadBalancerServerAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), loadBalancerServerAddParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("server-add local parameter: \n%s\n", debugMarshalIndent(loadBalancerServerAddParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.IntVarP(&loadBalancerServerAddParam.VipIndex, "vip-index", "", 0, "index of target VIP")
	fs.StringVarP(&loadBalancerServerAddParam.Vip, "vip", "", "", "set VirtualIPAddress")
	fs.IntVarP(&loadBalancerServerAddParam.Port, "port", "", 0, "set port")
	fs.StringVarP(&loadBalancerServerAddParam.Ipaddress, "ipaddress", "", "", "set real server IPAddress")
	fs.StringVarP(&loadBalancerServerAddParam.Protocol, "protocol", "", "ping", "set health check protocol[http/https/ping/tcp]")
	fs.StringVarP(&loadBalancerServerAddParam.Path, "path", "", "", "set path of http/https health check request")
	fs.IntVarP(&loadBalancerServerAddParam.ResponseCode, "response-code", "", 0, "set expect response-code of http/https health check request")
	fs.BoolVarP(&loadBalancerServerAddParam.Disabled, "disabled", "", false, "set disable")
	fs.StringSliceVarP(&loadBalancerServerAddParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&loadBalancerServerAddParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&loadBalancerServerAddParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&loadBalancerServerAddParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&loadBalancerServerAddParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&loadBalancerServerAddParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&loadBalancerServerAddParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &loadBalancerServerAddParam.Id), "id", "", "Set target ID")
	return cmd
}

func loadBalancerServerUpdateCmd() *cobra.Command {
	loadBalancerServerUpdateParam := params.NewServerUpdateLoadBalancerParam()
	cmd := &cobra.Command{
		Use: "server-update",

		Short: "Update server under VIP(s)",
		Long:  `Update server under VIP(s)`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return loadBalancerServerUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), loadBalancerServerUpdateParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("server-update local parameter: \n%s\n", debugMarshalIndent(loadBalancerServerUpdateParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.IntVarP(&loadBalancerServerUpdateParam.VipIndex, "vip-index", "", 0, "index of target VIP")
	fs.StringVarP(&loadBalancerServerUpdateParam.Vip, "vip", "", "", "set VirtualIPAddress")
	fs.IntVarP(&loadBalancerServerUpdateParam.Port, "port", "", 0, "set port")
	fs.StringVarP(&loadBalancerServerUpdateParam.Ipaddress, "ipaddress", "", "", "set real server IPAddress")
	fs.StringVarP(&loadBalancerServerUpdateParam.Protocol, "protocol", "", "", "set health check protocol[http/https/ping/tcp]")
	fs.StringVarP(&loadBalancerServerUpdateParam.Path, "path", "", "", "set path of http/https health check request")
	fs.IntVarP(&loadBalancerServerUpdateParam.ResponseCode, "response-code", "", 0, "set expect response-code of http/https health check request")
	fs.BoolVarP(&loadBalancerServerUpdateParam.Disabled, "disabled", "", false, "set enable/disable")
	fs.StringSliceVarP(&loadBalancerServerUpdateParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&loadBalancerServerUpdateParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&loadBalancerServerUpdateParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&loadBalancerServerUpdateParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&loadBalancerServerUpdateParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&loadBalancerServerUpdateParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&loadBalancerServerUpdateParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &loadBalancerServerUpdateParam.Id), "id", "", "Set target ID")
	return cmd
}

func loadBalancerServerDeleteCmd() *cobra.Command {
	loadBalancerServerDeleteParam := params.NewServerDeleteLoadBalancerParam()
	cmd := &cobra.Command{
		Use: "server-delete",

		Short: "Delete server under VIP(s)",
		Long:  `Delete server under VIP(s)`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return loadBalancerServerDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), loadBalancerServerDeleteParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("server-delete local parameter: \n%s\n", debugMarshalIndent(loadBalancerServerDeleteParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.IntVarP(&loadBalancerServerDeleteParam.VipIndex, "vip-index", "", 0, "index of target VIP")
	fs.StringVarP(&loadBalancerServerDeleteParam.Vip, "vip", "", "", "set VirtualIPAddress")
	fs.IntVarP(&loadBalancerServerDeleteParam.Port, "port", "", 0, "set port")
	fs.StringVarP(&loadBalancerServerDeleteParam.Ipaddress, "ipaddress", "", "", "set real server IPAddress")
	fs.StringSliceVarP(&loadBalancerServerDeleteParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.BoolVarP(&loadBalancerServerDeleteParam.Assumeyes, "assumeyes", "y", false, "Assume that the answer to any question which would be asked is yes")
	fs.StringVarP(&loadBalancerServerDeleteParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&loadBalancerServerDeleteParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&loadBalancerServerDeleteParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&loadBalancerServerDeleteParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&loadBalancerServerDeleteParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.VarP(newIDValue(0, &loadBalancerServerDeleteParam.Id), "id", "", "Set target ID")
	return cmd
}

func loadBalancerMonitorCmd() *cobra.Command {
	loadBalancerMonitorParam := params.NewMonitorLoadBalancerParam()
	cmd := &cobra.Command{
		Use: "monitor",

		Short: "Monitor LoadBalancer",
		Long:  `Monitor LoadBalancer`,
		PreRunE: func(cmd *cobra.Command, args []string) error {
			return loadBalancerMonitorParam.Initialize(newParamsAdapter(cmd.Flags()))
		},
		RunE: func(cmd *cobra.Command, args []string) error {
			ctx, err := newCLIContext(globalFlags(), loadBalancerMonitorParam)
			if err != nil {
				return err
			}

			// TODO DEBUG
			fmt.Printf("global parameter: \n%s\n", debugMarshalIndent(ctx.Option()))
			fmt.Printf("monitor local parameter: \n%s\n", debugMarshalIndent(loadBalancerMonitorParam))
			return nil
		},
	}

	fs := cmd.Flags()
	fs.StringVarP(&loadBalancerMonitorParam.Start, "start", "", "", "set start-time")
	fs.StringVarP(&loadBalancerMonitorParam.End, "end", "", "", "set end-time")
	fs.StringVarP(&loadBalancerMonitorParam.KeyFormat, "key-format", "", "sakuracloud.loadbalancer.{{.ID}}.nic", "set monitoring value key-format")
	fs.StringSliceVarP(&loadBalancerMonitorParam.Selector, "selector", "", []string{}, "Set target filter by tag")
	fs.StringVarP(&loadBalancerMonitorParam.ParamTemplate, "param-template", "", "", "Set input parameter from string(JSON)")
	fs.StringVarP(&loadBalancerMonitorParam.Parameters, "parameters", "", "", "Set input parameters from JSON string")
	fs.StringVarP(&loadBalancerMonitorParam.ParamTemplateFile, "param-template-file", "", "", "Set input parameter from file")
	fs.StringVarP(&loadBalancerMonitorParam.ParameterFile, "parameter-file", "", "", "Set input parameters from file")
	fs.BoolVarP(&loadBalancerMonitorParam.GenerateSkeleton, "generate-skeleton", "", false, "Output skelton of parameter JSON")
	fs.StringVarP(&loadBalancerMonitorParam.OutputType, "output-type", "o", "", "Output type [table/json/csv/tsv]")
	fs.StringSliceVarP(&loadBalancerMonitorParam.Column, "column", "", []string{}, "Output columns(using when '--output-type' is in [csv/tsv] only)")
	fs.BoolVarP(&loadBalancerMonitorParam.Quiet, "quiet", "q", false, "Only display IDs")
	fs.StringVarP(&loadBalancerMonitorParam.Format, "format", "", "", "Output format(see text/template package document for detail)")
	fs.StringVarP(&loadBalancerMonitorParam.FormatFile, "format-file", "", "", "Output format from file(see text/template package document for detail)")
	fs.StringVarP(&loadBalancerMonitorParam.Query, "query", "", "", "JMESPath query(using when '--output-type' is json only)")
	fs.StringVarP(&loadBalancerMonitorParam.QueryFile, "query-file", "", "", "JMESPath query from file(using when '--output-type' is json only)")
	fs.VarP(newIDValue(0, &loadBalancerMonitorParam.Id), "id", "", "Set target ID")
	return cmd
}

func init() {
	parent := loadBalancerCmd()
	parent.AddCommand(loadBalancerListCmd())
	parent.AddCommand(loadBalancerCreateCmd())
	parent.AddCommand(loadBalancerReadCmd())
	parent.AddCommand(loadBalancerUpdateCmd())
	parent.AddCommand(loadBalancerDeleteCmd())
	parent.AddCommand(loadBalancerBootCmd())
	parent.AddCommand(loadBalancerShutdownCmd())
	parent.AddCommand(loadBalancerShutdownForceCmd())
	parent.AddCommand(loadBalancerResetCmd())
	parent.AddCommand(loadBalancerWaitForBootCmd())
	parent.AddCommand(loadBalancerWaitForDownCmd())
	parent.AddCommand(loadBalancerVipInfoCmd())
	parent.AddCommand(loadBalancerVipAddCmd())
	parent.AddCommand(loadBalancerVipUpdateCmd())
	parent.AddCommand(loadBalancerVipDeleteCmd())
	parent.AddCommand(loadBalancerServerInfoCmd())
	parent.AddCommand(loadBalancerServerAddCmd())
	parent.AddCommand(loadBalancerServerUpdateCmd())
	parent.AddCommand(loadBalancerServerDeleteCmd())
	parent.AddCommand(loadBalancerMonitorCmd())
	rootCmd.AddCommand(parent)
}

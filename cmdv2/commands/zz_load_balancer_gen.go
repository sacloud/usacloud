// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	loadBalancerListParam          = params.NewListLoadBalancerParam()
	loadBalancerCreateParam        = params.NewCreateLoadBalancerParam()
	loadBalancerReadParam          = params.NewReadLoadBalancerParam()
	loadBalancerUpdateParam        = params.NewUpdateLoadBalancerParam()
	loadBalancerDeleteParam        = params.NewDeleteLoadBalancerParam()
	loadBalancerBootParam          = params.NewBootLoadBalancerParam()
	loadBalancerShutdownParam      = params.NewShutdownLoadBalancerParam()
	loadBalancerShutdownForceParam = params.NewShutdownForceLoadBalancerParam()
	loadBalancerResetParam         = params.NewResetLoadBalancerParam()
	loadBalancerWaitForBootParam   = params.NewWaitForBootLoadBalancerParam()
	loadBalancerWaitForDownParam   = params.NewWaitForDownLoadBalancerParam()
	loadBalancerVipInfoParam       = params.NewVipInfoLoadBalancerParam()
	loadBalancerVipAddParam        = params.NewVipAddLoadBalancerParam()
	loadBalancerVipUpdateParam     = params.NewVipUpdateLoadBalancerParam()
	loadBalancerVipDeleteParam     = params.NewVipDeleteLoadBalancerParam()
	loadBalancerServerInfoParam    = params.NewServerInfoLoadBalancerParam()
	loadBalancerServerAddParam     = params.NewServerAddLoadBalancerParam()
	loadBalancerServerUpdateParam  = params.NewServerUpdateLoadBalancerParam()
	loadBalancerServerDeleteParam  = params.NewServerDeleteLoadBalancerParam()
	loadBalancerMonitorParam       = params.NewMonitorLoadBalancerParam()
)

// loadBalancerCmd represents the command to manage SAKURAÂ Cloud LoadBalancer
var loadBalancerCmd = &cobra.Command{
	Use:   "loadBalancer",
	Short: "A manage commands of LoadBalancer",
	Long:  `A manage commands of LoadBalancer`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var loadBalancerListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List LoadBalancer",
	Long:    `List LoadBalancer`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := loadBalancerListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(loadBalancerListParam))
		return err
	},
}

func loadBalancerListCmdInit() {
	fs := loadBalancerListCmd.Flags()
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &loadBalancerListParam.Id), "id", "", "set filter by id(s)")
	fs.IntVarP(&loadBalancerListParam.From, "from", "", 0, "set offset")
	fs.IntVarP(&loadBalancerListParam.Max, "max", "", 0, "set limit")
	fs.StringSliceVarP(&loadBalancerListParam.Tags, "tags", "", []string{}, "set filter by tags(AND)")
	fs.StringSliceVarP(&loadBalancerListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringSliceVarP(&loadBalancerListParam.Name, "name", "", []string{}, "set filter by name(s)")
}

var loadBalancerCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create LoadBalancer",
	Long:  `Create LoadBalancer`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := loadBalancerCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(loadBalancerCreateParam))
		return err
	},
}

func loadBalancerCreateCmdInit() {
	fs := loadBalancerCreateCmd.Flags()
	fs.StringVarP(&loadBalancerCreateParam.Ipaddress1, "ipaddress-1", "", "", "set ipaddress(#1)")
	fs.StringVarP(&loadBalancerCreateParam.Ipaddress2, "ipaddress-2", "", "", "set ipaddress(#2)")
	fs.IntVarP(&loadBalancerCreateParam.NwMaskLen, "nw-mask-len", "", 0, "set network mask length")
	fs.StringVarP(&loadBalancerCreateParam.Name, "name", "", "", "set resource display name")
	fs.StringSliceVarP(&loadBalancerCreateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.IntVarP(&loadBalancerCreateParam.Vrid, "vrid", "", 1, "set VRID")
	fs.StringVarP(&loadBalancerCreateParam.Plan, "plan", "", "standard", "set plan[standard/highspec]")
	fs.StringVarP(&loadBalancerCreateParam.DefaultRoute, "default-route", "", "", "set default route")
	fs.StringVarP(&loadBalancerCreateParam.Description, "description", "", "", "set resource description")
	fs.VarP(newIDValue(0, &loadBalancerCreateParam.IconId), "icon-id", "", "set Icon ID")
	fs.VarP(newIDValue(0, &loadBalancerCreateParam.SwitchId), "switch-id", "", "set connect switch ID")
	fs.BoolVarP(&loadBalancerCreateParam.HighAvailability, "high-availability", "", false, "use HA(High-Availability) mode")
}

var loadBalancerReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read LoadBalancer",
	Long:  `Read LoadBalancer`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := loadBalancerReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(loadBalancerReadParam))
		return err
	},
}

func loadBalancerReadCmdInit() {
}

var loadBalancerUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update LoadBalancer",
	Long:  `Update LoadBalancer`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := loadBalancerUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(loadBalancerUpdateParam))
		return err
	},
}

func loadBalancerUpdateCmdInit() {
	fs := loadBalancerUpdateCmd.Flags()
	fs.StringVarP(&loadBalancerUpdateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&loadBalancerUpdateParam.Description, "description", "", "", "set resource description")
	fs.StringSliceVarP(&loadBalancerUpdateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &loadBalancerUpdateParam.IconId), "icon-id", "", "set Icon ID")
}

var loadBalancerDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete LoadBalancer",
	Long:    `Delete LoadBalancer`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := loadBalancerDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(loadBalancerDeleteParam))
		return err
	},
}

func loadBalancerDeleteCmdInit() {
	fs := loadBalancerDeleteCmd.Flags()
	fs.BoolVarP(&loadBalancerDeleteParam.Force, "force", "f", false, "forced-shutdown flag if load-balancer is running")
}

var loadBalancerBootCmd = &cobra.Command{
	Use:     "boot",
	Aliases: []string{"power-on"},
	Short:   "Boot LoadBalancer",
	Long:    `Boot LoadBalancer`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := loadBalancerBootParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("boot parameter: \n%s\n", debugMarshalIndent(loadBalancerBootParam))
		return err
	},
}

func loadBalancerBootCmdInit() {
}

var loadBalancerShutdownCmd = &cobra.Command{
	Use:     "shutdown",
	Aliases: []string{"power-off"},
	Short:   "Shutdown LoadBalancer",
	Long:    `Shutdown LoadBalancer`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := loadBalancerShutdownParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("shutdown parameter: \n%s\n", debugMarshalIndent(loadBalancerShutdownParam))
		return err
	},
}

func loadBalancerShutdownCmdInit() {
}

var loadBalancerShutdownForceCmd = &cobra.Command{
	Use:     "shutdown-force",
	Aliases: []string{"stop"},
	Short:   "ShutdownForce LoadBalancer",
	Long:    `ShutdownForce LoadBalancer`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := loadBalancerShutdownForceParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("shutdown-force parameter: \n%s\n", debugMarshalIndent(loadBalancerShutdownForceParam))
		return err
	},
}

func loadBalancerShutdownForceCmdInit() {
}

var loadBalancerResetCmd = &cobra.Command{
	Use: "reset",

	Short: "Reset LoadBalancer",
	Long:  `Reset LoadBalancer`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := loadBalancerResetParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("reset parameter: \n%s\n", debugMarshalIndent(loadBalancerResetParam))
		return err
	},
}

func loadBalancerResetCmdInit() {
}

var loadBalancerWaitForBootCmd = &cobra.Command{
	Use: "wait-for-boot",

	Short: "Wait until boot is completed",
	Long:  `Wait until boot is completed`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := loadBalancerWaitForBootParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("wait-for-boot parameter: \n%s\n", debugMarshalIndent(loadBalancerWaitForBootParam))
		return err
	},
}

func loadBalancerWaitForBootCmdInit() {
}

var loadBalancerWaitForDownCmd = &cobra.Command{
	Use: "wait-for-down",

	Short: "Wait until shutdown is completed",
	Long:  `Wait until shutdown is completed`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := loadBalancerWaitForDownParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("wait-for-down parameter: \n%s\n", debugMarshalIndent(loadBalancerWaitForDownParam))
		return err
	},
}

func loadBalancerWaitForDownCmdInit() {
}

var loadBalancerVipInfoCmd = &cobra.Command{
	Use: "vip-info",

	Short: "Show information of VIP(s)",
	Long:  `Show information of VIP(s)`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := loadBalancerVipInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("vip-info parameter: \n%s\n", debugMarshalIndent(loadBalancerVipInfoParam))
		return err
	},
}

func loadBalancerVipInfoCmdInit() {
}

var loadBalancerVipAddCmd = &cobra.Command{
	Use: "vip-add",

	Short: "Add VIP to LoadBalancer",
	Long:  `Add VIP to LoadBalancer`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := loadBalancerVipAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("vip-add parameter: \n%s\n", debugMarshalIndent(loadBalancerVipAddParam))
		return err
	},
}

func loadBalancerVipAddCmdInit() {
	fs := loadBalancerVipAddCmd.Flags()
	fs.StringVarP(&loadBalancerVipAddParam.Vip, "vip", "", "", "set VirtualIPAddress")
	fs.IntVarP(&loadBalancerVipAddParam.Port, "port", "", 0, "set port")
	fs.IntVarP(&loadBalancerVipAddParam.DelayLoop, "delay-loop", "", 10, "set delay-loop")
	fs.StringVarP(&loadBalancerVipAddParam.SorryServer, "sorry-server", "", "", "set IPAddress of sorry-server")
	fs.StringVarP(&loadBalancerVipAddParam.Description, "description", "", "", "set Description of VIP")
}

var loadBalancerVipUpdateCmd = &cobra.Command{
	Use: "vip-update",

	Short: "Update VIP",
	Long:  `Update VIP`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := loadBalancerVipUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("vip-update parameter: \n%s\n", debugMarshalIndent(loadBalancerVipUpdateParam))
		return err
	},
}

func loadBalancerVipUpdateCmdInit() {
	fs := loadBalancerVipUpdateCmd.Flags()
	fs.StringVarP(&loadBalancerVipUpdateParam.SorryServer, "sorry-server", "", "", "set IPAddress of sorry-server")
	fs.StringVarP(&loadBalancerVipUpdateParam.Description, "description", "", "", "set Description of VIP")
	fs.IntVarP(&loadBalancerVipUpdateParam.Index, "index", "", 0, "index of target VIP")
	fs.StringVarP(&loadBalancerVipUpdateParam.Vip, "vip", "", "", "set VirtualIPAddress")
	fs.IntVarP(&loadBalancerVipUpdateParam.Port, "port", "", 0, "set port")
	fs.IntVarP(&loadBalancerVipUpdateParam.DelayLoop, "delay-loop", "", 10, "set delay-loop")
}

var loadBalancerVipDeleteCmd = &cobra.Command{
	Use: "vip-delete",

	Short: "Delete VIP from LoadBalancer",
	Long:  `Delete VIP from LoadBalancer`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := loadBalancerVipDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("vip-delete parameter: \n%s\n", debugMarshalIndent(loadBalancerVipDeleteParam))
		return err
	},
}

func loadBalancerVipDeleteCmdInit() {
	fs := loadBalancerVipDeleteCmd.Flags()
	fs.IntVarP(&loadBalancerVipDeleteParam.Index, "index", "", 0, "index of target VIP")
}

var loadBalancerServerInfoCmd = &cobra.Command{
	Use: "server-info",

	Short: "Show servers under VIP(s)",
	Long:  `Show servers under VIP(s)`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := loadBalancerServerInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("server-info parameter: \n%s\n", debugMarshalIndent(loadBalancerServerInfoParam))
		return err
	},
}

func loadBalancerServerInfoCmdInit() {
	fs := loadBalancerServerInfoCmd.Flags()
	fs.StringVarP(&loadBalancerServerInfoParam.Vip, "vip", "", "", "set VirtualIPAddress")
	fs.IntVarP(&loadBalancerServerInfoParam.Port, "port", "", 0, "set port")
	fs.IntVarP(&loadBalancerServerInfoParam.VipIndex, "vip-index", "", 0, "index of target VIP")
}

var loadBalancerServerAddCmd = &cobra.Command{
	Use: "server-add",

	Short: "Add server under VIP(s)",
	Long:  `Add server under VIP(s)`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := loadBalancerServerAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("server-add parameter: \n%s\n", debugMarshalIndent(loadBalancerServerAddParam))
		return err
	},
}

func loadBalancerServerAddCmdInit() {
	fs := loadBalancerServerAddCmd.Flags()
	fs.StringVarP(&loadBalancerServerAddParam.Path, "path", "", "", "set path of http/https health check request")
	fs.IntVarP(&loadBalancerServerAddParam.ResponseCode, "response-code", "", 0, "set expect response-code of http/https health check request")
	fs.BoolVarP(&loadBalancerServerAddParam.Disabled, "disabled", "", false, "set disable")
	fs.IntVarP(&loadBalancerServerAddParam.VipIndex, "vip-index", "", 0, "index of target VIP")
	fs.StringVarP(&loadBalancerServerAddParam.Vip, "vip", "", "", "set VirtualIPAddress")
	fs.IntVarP(&loadBalancerServerAddParam.Port, "port", "", 0, "set port")
	fs.StringVarP(&loadBalancerServerAddParam.Ipaddress, "ipaddress", "", "", "set real server IPAddress")
	fs.StringVarP(&loadBalancerServerAddParam.Protocol, "protocol", "", "ping", "set health check protocol[http/https/ping/tcp]")
}

var loadBalancerServerUpdateCmd = &cobra.Command{
	Use: "server-update",

	Short: "Update server under VIP(s)",
	Long:  `Update server under VIP(s)`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := loadBalancerServerUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("server-update parameter: \n%s\n", debugMarshalIndent(loadBalancerServerUpdateParam))
		return err
	},
}

func loadBalancerServerUpdateCmdInit() {
	fs := loadBalancerServerUpdateCmd.Flags()
	fs.StringVarP(&loadBalancerServerUpdateParam.Protocol, "protocol", "", "", "set health check protocol[http/https/ping/tcp]")
	fs.StringVarP(&loadBalancerServerUpdateParam.Path, "path", "", "", "set path of http/https health check request")
	fs.IntVarP(&loadBalancerServerUpdateParam.ResponseCode, "response-code", "", 0, "set expect response-code of http/https health check request")
	fs.BoolVarP(&loadBalancerServerUpdateParam.Disabled, "disabled", "", false, "set enable/disable")
	fs.IntVarP(&loadBalancerServerUpdateParam.VipIndex, "vip-index", "", 0, "index of target VIP")
	fs.StringVarP(&loadBalancerServerUpdateParam.Vip, "vip", "", "", "set VirtualIPAddress")
	fs.IntVarP(&loadBalancerServerUpdateParam.Port, "port", "", 0, "set port")
	fs.StringVarP(&loadBalancerServerUpdateParam.Ipaddress, "ipaddress", "", "", "set real server IPAddress")
}

var loadBalancerServerDeleteCmd = &cobra.Command{
	Use: "server-delete",

	Short: "Delete server under VIP(s)",
	Long:  `Delete server under VIP(s)`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := loadBalancerServerDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("server-delete parameter: \n%s\n", debugMarshalIndent(loadBalancerServerDeleteParam))
		return err
	},
}

func loadBalancerServerDeleteCmdInit() {
	fs := loadBalancerServerDeleteCmd.Flags()
	fs.StringVarP(&loadBalancerServerDeleteParam.Vip, "vip", "", "", "set VirtualIPAddress")
	fs.IntVarP(&loadBalancerServerDeleteParam.Port, "port", "", 0, "set port")
	fs.StringVarP(&loadBalancerServerDeleteParam.Ipaddress, "ipaddress", "", "", "set real server IPAddress")
	fs.IntVarP(&loadBalancerServerDeleteParam.VipIndex, "vip-index", "", 0, "index of target VIP")
}

var loadBalancerMonitorCmd = &cobra.Command{
	Use: "monitor",

	Short: "Monitor LoadBalancer",
	Long:  `Monitor LoadBalancer`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := loadBalancerMonitorParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("monitor parameter: \n%s\n", debugMarshalIndent(loadBalancerMonitorParam))
		return err
	},
}

func loadBalancerMonitorCmdInit() {
	fs := loadBalancerMonitorCmd.Flags()
	fs.StringVarP(&loadBalancerMonitorParam.Start, "start", "", "", "set start-time")
	fs.StringVarP(&loadBalancerMonitorParam.End, "end", "", "", "set end-time")
	fs.StringVarP(&loadBalancerMonitorParam.KeyFormat, "key-format", "", "sakuracloud.loadbalancer.{{.ID}}.nic", "set monitoring value key-format")
}

func init() {
	parent := loadBalancerCmd

	loadBalancerListCmdInit()
	parent.AddCommand(loadBalancerListCmd)

	loadBalancerCreateCmdInit()
	parent.AddCommand(loadBalancerCreateCmd)

	loadBalancerReadCmdInit()
	parent.AddCommand(loadBalancerReadCmd)

	loadBalancerUpdateCmdInit()
	parent.AddCommand(loadBalancerUpdateCmd)

	loadBalancerDeleteCmdInit()
	parent.AddCommand(loadBalancerDeleteCmd)

	loadBalancerBootCmdInit()
	parent.AddCommand(loadBalancerBootCmd)

	loadBalancerShutdownCmdInit()
	parent.AddCommand(loadBalancerShutdownCmd)

	loadBalancerShutdownForceCmdInit()
	parent.AddCommand(loadBalancerShutdownForceCmd)

	loadBalancerResetCmdInit()
	parent.AddCommand(loadBalancerResetCmd)

	loadBalancerWaitForBootCmdInit()
	parent.AddCommand(loadBalancerWaitForBootCmd)

	loadBalancerWaitForDownCmdInit()
	parent.AddCommand(loadBalancerWaitForDownCmd)

	loadBalancerVipInfoCmdInit()
	parent.AddCommand(loadBalancerVipInfoCmd)

	loadBalancerVipAddCmdInit()
	parent.AddCommand(loadBalancerVipAddCmd)

	loadBalancerVipUpdateCmdInit()
	parent.AddCommand(loadBalancerVipUpdateCmd)

	loadBalancerVipDeleteCmdInit()
	parent.AddCommand(loadBalancerVipDeleteCmd)

	loadBalancerServerInfoCmdInit()
	parent.AddCommand(loadBalancerServerInfoCmd)

	loadBalancerServerAddCmdInit()
	parent.AddCommand(loadBalancerServerAddCmd)

	loadBalancerServerUpdateCmdInit()
	parent.AddCommand(loadBalancerServerUpdateCmd)

	loadBalancerServerDeleteCmdInit()
	parent.AddCommand(loadBalancerServerDeleteCmd)

	loadBalancerMonitorCmdInit()
	parent.AddCommand(loadBalancerMonitorCmd)

	rootCmd.AddCommand(parent)
}

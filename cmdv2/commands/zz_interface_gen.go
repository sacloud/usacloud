// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	interfaceListParam                   = params.NewListInterfaceParam()
	interfacePacketFilterConnectParam    = params.NewPacketFilterConnectInterfaceParam()
	interfaceCreateParam                 = params.NewCreateInterfaceParam()
	interfacePacketFilterDisconnectParam = params.NewPacketFilterDisconnectInterfaceParam()
	interfaceReadParam                   = params.NewReadInterfaceParam()
	interfaceUpdateParam                 = params.NewUpdateInterfaceParam()
	interfaceDeleteParam                 = params.NewDeleteInterfaceParam()
)

// interfaceCmd represents the command to manage SAKURAÂ Cloud Interface
var interfaceCmd = &cobra.Command{
	Use:   "interface",
	Short: "A manage commands of Interface",
	Long:  `A manage commands of Interface`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var interfaceListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find"},
	Short:   "List Interface",
	Long:    `List Interface`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := interfaceListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(interfaceListParam))
		return err
	},
}

func interfaceListCmdInit() {
	fs := interfaceListCmd.Flags()
	fs.StringSliceVarP(&interfaceListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringSliceVarP(&interfaceListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &interfaceListParam.Id), "id", "", "set filter by id(s)")
	fs.IntVarP(&interfaceListParam.From, "from", "", 0, "set offset")
	fs.IntVarP(&interfaceListParam.Max, "max", "", 0, "set limit")
}

var interfacePacketFilterConnectCmd = &cobra.Command{
	Use: "packet-filter-connect",

	Short: "PacketFilterConnect Interface",
	Long:  `PacketFilterConnect Interface`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := interfacePacketFilterConnectParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("packet-filter-connect parameter: \n%s\n", debugMarshalIndent(interfacePacketFilterConnectParam))
		return err
	},
}

func interfacePacketFilterConnectCmdInit() {
	fs := interfacePacketFilterConnectCmd.Flags()
	fs.VarP(newIDValue(0, &interfacePacketFilterConnectParam.PacketFilterId), "packet-filter-id", "", "set packet filter ID")
}

var interfaceCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create Interface",
	Long:  `Create Interface`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := interfaceCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(interfaceCreateParam))
		return err
	},
}

func interfaceCreateCmdInit() {
	fs := interfaceCreateCmd.Flags()
	fs.VarP(newIDValue(0, &interfaceCreateParam.ServerId), "server-id", "", "set server ID")
}

var interfacePacketFilterDisconnectCmd = &cobra.Command{
	Use: "packet-filter-disconnect",

	Short: "PacketFilterDisconnect Interface",
	Long:  `PacketFilterDisconnect Interface`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := interfacePacketFilterDisconnectParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("packet-filter-disconnect parameter: \n%s\n", debugMarshalIndent(interfacePacketFilterDisconnectParam))
		return err
	},
}

func interfacePacketFilterDisconnectCmdInit() {
	fs := interfacePacketFilterDisconnectCmd.Flags()
	fs.VarP(newIDValue(0, &interfacePacketFilterDisconnectParam.PacketFilterId), "packet-filter-id", "", "set packet filter ID")
}

var interfaceReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Interface",
	Long:  `Read Interface`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := interfaceReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(interfaceReadParam))
		return err
	},
}

func interfaceReadCmdInit() {
}

var interfaceUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update Interface",
	Long:  `Update Interface`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := interfaceUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(interfaceUpdateParam))
		return err
	},
}

func interfaceUpdateCmdInit() {
	fs := interfaceUpdateCmd.Flags()
	fs.StringVarP(&interfaceUpdateParam.UserIpaddress, "user-ipaddress", "", "", "set user-ipaddress")
}

var interfaceDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Interface",
	Long:    `Delete Interface`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := interfaceDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(interfaceDeleteParam))
		return err
	},
}

func interfaceDeleteCmdInit() {
}

func init() {
	parent := interfaceCmd

	interfaceListCmdInit()
	parent.AddCommand(interfaceListCmd)

	interfacePacketFilterConnectCmdInit()
	parent.AddCommand(interfacePacketFilterConnectCmd)

	interfaceCreateCmdInit()
	parent.AddCommand(interfaceCreateCmd)

	interfacePacketFilterDisconnectCmdInit()
	parent.AddCommand(interfacePacketFilterDisconnectCmd)

	interfaceReadCmdInit()
	parent.AddCommand(interfaceReadCmd)

	interfaceUpdateCmdInit()
	parent.AddCommand(interfaceUpdateCmd)

	interfaceDeleteCmdInit()
	parent.AddCommand(interfaceDeleteCmd)

	rootCmd.AddCommand(parent)
}

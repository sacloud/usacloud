// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

// diskCmd represents the disk command
var diskCmd = &cobra.Command{
	Use:   "disk",
	Short: "A manage commands of Disk",
	Long:  `A manage commands of Disk`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var diskListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List Disk",
	Long:    `List Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		listParam, err := params.NewListDiskParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(listParam))
		return err
	},
}

var diskCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create Disk",
	Long:  `Create Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		createParam, err := params.NewCreateDiskParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(createParam))
		return err
	},
}

var diskReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Disk",
	Long:  `Read Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		readParam, err := params.NewReadDiskParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(readParam))
		return err
	},
}

var diskUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update Disk",
	Long:  `Update Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		updateParam, err := params.NewUpdateDiskParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(updateParam))
		return err
	},
}

var diskDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Disk",
	Long:    `Delete Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		deleteParam, err := params.NewDeleteDiskParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(deleteParam))
		return err
	},
}

var diskEditCmd = &cobra.Command{
	Use:     "edit",
	Aliases: []string{"config"},
	Short:   "Edit Disk",
	Long:    `Edit Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		editParam, err := params.NewEditDiskParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("edit parameter: \n%s\n", debugMarshalIndent(editParam))
		return err
	},
}

var diskResizePartitionCmd = &cobra.Command{
	Use: "resize-partition",

	Short: "ResizePartition Disk",
	Long:  `ResizePartition Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		resizePartitionParam, err := params.NewResizePartitionDiskParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("resize-partition parameter: \n%s\n", debugMarshalIndent(resizePartitionParam))
		return err
	},
}

var diskReinstallFromArchiveCmd = &cobra.Command{
	Use: "reinstall-from-archive",

	Short: "ReinstallFromArchive Disk",
	Long:  `ReinstallFromArchive Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		reinstallFromArchiveParam, err := params.NewReinstallFromArchiveDiskParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("reinstall-from-archive parameter: \n%s\n", debugMarshalIndent(reinstallFromArchiveParam))
		return err
	},
}

var diskReinstallFromDiskCmd = &cobra.Command{
	Use: "reinstall-from-disk",

	Short: "ReinstallFromDisk Disk",
	Long:  `ReinstallFromDisk Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		reinstallFromDiskParam, err := params.NewReinstallFromDiskDiskParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("reinstall-from-disk parameter: \n%s\n", debugMarshalIndent(reinstallFromDiskParam))
		return err
	},
}

var diskReinstallToBlankCmd = &cobra.Command{
	Use: "reinstall-to-blank",

	Short: "ReinstallToBlank Disk",
	Long:  `ReinstallToBlank Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		reinstallToBlankParam, err := params.NewReinstallToBlankDiskParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("reinstall-to-blank parameter: \n%s\n", debugMarshalIndent(reinstallToBlankParam))
		return err
	},
}

var diskServerConnectCmd = &cobra.Command{
	Use: "server-connect",

	Short: "ServerConnect Disk",
	Long:  `ServerConnect Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		serverConnectParam, err := params.NewServerConnectDiskParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("server-connect parameter: \n%s\n", debugMarshalIndent(serverConnectParam))
		return err
	},
}

var diskServerDisconnectCmd = &cobra.Command{
	Use: "server-disconnect",

	Short: "ServerDisconnect Disk",
	Long:  `ServerDisconnect Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		serverDisconnectParam, err := params.NewServerDisconnectDiskParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("server-disconnect parameter: \n%s\n", debugMarshalIndent(serverDisconnectParam))
		return err
	},
}

var diskMonitorCmd = &cobra.Command{
	Use: "monitor",

	Short: "Monitor Disk",
	Long:  `Monitor Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		monitorParam, err := params.NewMonitorDiskParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("monitor parameter: \n%s\n", debugMarshalIndent(monitorParam))
		return err
	},
}

var diskWaitForCopyCmd = &cobra.Command{
	Use:     "wait-for-copy",
	Aliases: []string{"wait"},
	Short:   "WaitForCopy Disk",
	Long:    `WaitForCopy Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		waitForCopyParam, err := params.NewWaitForCopyDiskParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("wait-for-copy parameter: \n%s\n", debugMarshalIndent(waitForCopyParam))
		return err
	},
}

func init() {
	parent := diskCmd
	parent.AddCommand(diskListCmd)
	parent.AddCommand(diskCreateCmd)
	parent.AddCommand(diskReadCmd)
	parent.AddCommand(diskUpdateCmd)
	parent.AddCommand(diskDeleteCmd)
	parent.AddCommand(diskEditCmd)
	parent.AddCommand(diskResizePartitionCmd)
	parent.AddCommand(diskReinstallFromArchiveCmd)
	parent.AddCommand(diskReinstallFromDiskCmd)
	parent.AddCommand(diskReinstallToBlankCmd)
	parent.AddCommand(diskServerConnectCmd)
	parent.AddCommand(diskServerDisconnectCmd)
	parent.AddCommand(diskMonitorCmd)
	parent.AddCommand(diskWaitForCopyCmd)
	rootCmd.AddCommand(diskCmd)
}

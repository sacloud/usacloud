// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	gslbListParam         = params.NewListGSLBParam()
	gslbServerInfoParam   = params.NewServerInfoGSLBParam()
	gslbCreateParam       = params.NewCreateGSLBParam()
	gslbServerAddParam    = params.NewServerAddGSLBParam()
	gslbReadParam         = params.NewReadGSLBParam()
	gslbServerUpdateParam = params.NewServerUpdateGSLBParam()
	gslbServerDeleteParam = params.NewServerDeleteGSLBParam()
	gslbUpdateParam       = params.NewUpdateGSLBParam()
	gslbDeleteParam       = params.NewDeleteGSLBParam()
)

// gslbCmd represents the command to manage SAKURAÂ Cloud GSLB
var gslbCmd = &cobra.Command{
	Use:   "gslb",
	Short: "A manage commands of GSLB",
	Long:  `A manage commands of GSLB`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var gslbListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List GSLB",
	Long:    `List GSLB`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := gslbListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(gslbListParam))
		return err
	},
}

func gslbListCmdInit() {
	fs := gslbListCmd.Flags()
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &gslbListParam.Id), "id", "", "set filter by id(s)")
	fs.IntVarP(&gslbListParam.From, "from", "", 0, "set offset")
	fs.IntVarP(&gslbListParam.Max, "max", "", 0, "set limit")
	fs.StringSliceVarP(&gslbListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringSliceVarP(&gslbListParam.Tags, "tags", "", []string{}, "set filter by tags(AND)")
	fs.StringSliceVarP(&gslbListParam.Name, "name", "", []string{}, "set filter by name(s)")
}

var gslbServerInfoCmd = &cobra.Command{
	Use:     "server-info",
	Aliases: []string{"server-list"},
	Short:   "ServerInfo GSLB",
	Long:    `ServerInfo GSLB`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := gslbServerInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("server-info parameter: \n%s\n", debugMarshalIndent(gslbServerInfoParam))
		return err
	},
}

func gslbServerInfoCmdInit() {
}

var gslbCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create GSLB",
	Long:  `Create GSLB`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := gslbCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(gslbCreateParam))
		return err
	},
}

func gslbCreateCmdInit() {
	fs := gslbCreateCmd.Flags()
	fs.StringSliceVarP(&gslbCreateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.StringVarP(&gslbCreateParam.Protocol, "protocol", "", "ping", "set healthcheck protocol[http/https/ping/tcp]")
	fs.IntVarP(&gslbCreateParam.DelayLoop, "delay-loop", "", 10, "set delay-loop of healthcheck")
	fs.BoolVarP(&gslbCreateParam.Weighted, "weighted", "", true, "enable weighted")
	fs.StringVarP(&gslbCreateParam.SorryServer, "sorry-server", "", "", "set sorry-server hostname/ipaddress")
	fs.StringVarP(&gslbCreateParam.Description, "description", "", "", "set resource description")
	fs.VarP(newIDValue(0, &gslbCreateParam.IconId), "icon-id", "", "set Icon ID")
	fs.StringVarP(&gslbCreateParam.HostHeader, "host-header", "", "", "set host header of http/https healthcheck request")
	fs.StringVarP(&gslbCreateParam.Path, "path", "", "/", "set path of http/https healthcheck request")
	fs.IntVarP(&gslbCreateParam.ResponseCode, "response-code", "", 200, "set response-code of http/https healthcheck request")
	fs.IntVarP(&gslbCreateParam.Port, "port", "", 0, "set port of tcp healthcheck")
	fs.StringVarP(&gslbCreateParam.Name, "name", "", "", "set resource display name")
}

var gslbServerAddCmd = &cobra.Command{
	Use: "server-add",

	Short: "ServerAdd GSLB",
	Long:  `ServerAdd GSLB`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := gslbServerAddParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("server-add parameter: \n%s\n", debugMarshalIndent(gslbServerAddParam))
		return err
	},
}

func gslbServerAddCmdInit() {
	fs := gslbServerAddCmd.Flags()
	fs.StringVarP(&gslbServerAddParam.Ipaddress, "ipaddress", "", "", "set target ipaddress")
	fs.BoolVarP(&gslbServerAddParam.Disabled, "disabled", "", false, "set disabled")
	fs.IntVarP(&gslbServerAddParam.Weight, "weight", "", 0, "set weight")
}

var gslbReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read GSLB",
	Long:  `Read GSLB`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := gslbReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(gslbReadParam))
		return err
	},
}

func gslbReadCmdInit() {
}

var gslbServerUpdateCmd = &cobra.Command{
	Use: "server-update",

	Short: "ServerUpdate GSLB",
	Long:  `ServerUpdate GSLB`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := gslbServerUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("server-update parameter: \n%s\n", debugMarshalIndent(gslbServerUpdateParam))
		return err
	},
}

func gslbServerUpdateCmdInit() {
	fs := gslbServerUpdateCmd.Flags()
	fs.IntVarP(&gslbServerUpdateParam.Index, "index", "", 0, "index of target server")
	fs.StringVarP(&gslbServerUpdateParam.Ipaddress, "ipaddress", "", "", "set target ipaddress")
	fs.BoolVarP(&gslbServerUpdateParam.Disabled, "disabled", "", false, "set disabled")
	fs.IntVarP(&gslbServerUpdateParam.Weight, "weight", "", 0, "set weight")
}

var gslbServerDeleteCmd = &cobra.Command{
	Use: "server-delete",

	Short: "ServerDelete GSLB",
	Long:  `ServerDelete GSLB`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := gslbServerDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("server-delete parameter: \n%s\n", debugMarshalIndent(gslbServerDeleteParam))
		return err
	},
}

func gslbServerDeleteCmdInit() {
	fs := gslbServerDeleteCmd.Flags()
	fs.IntVarP(&gslbServerDeleteParam.Index, "index", "", 0, "index of target server")
}

var gslbUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update GSLB",
	Long:  `Update GSLB`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := gslbUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(gslbUpdateParam))
		return err
	},
}

func gslbUpdateCmdInit() {
	fs := gslbUpdateCmd.Flags()
	fs.IntVarP(&gslbUpdateParam.ResponseCode, "response-code", "", 0, "set response-code of http/https healthcheck request")
	fs.IntVarP(&gslbUpdateParam.Port, "port", "", 0, "set port of tcp healthcheck")
	fs.IntVarP(&gslbUpdateParam.DelayLoop, "delay-loop", "", 0, "set delay-loop of healthcheck")
	fs.StringVarP(&gslbUpdateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&gslbUpdateParam.Description, "description", "", "", "set resource description")
	fs.StringSliceVarP(&gslbUpdateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.StringVarP(&gslbUpdateParam.Protocol, "protocol", "", "", "set healthcheck protocol[http/https/ping/tcp]")
	fs.StringVarP(&gslbUpdateParam.HostHeader, "host-header", "", "", "set host header of http/https healthcheck request")
	fs.StringVarP(&gslbUpdateParam.Path, "path", "", "", "set path of http/https healthcheck request")
	fs.BoolVarP(&gslbUpdateParam.Weighted, "weighted", "", false, "enable weighted")
	fs.StringVarP(&gslbUpdateParam.SorryServer, "sorry-server", "", "", "set sorry-server hostname/ipaddress")
	fs.VarP(newIDValue(0, &gslbUpdateParam.IconId), "icon-id", "", "set Icon ID")
}

var gslbDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete GSLB",
	Long:    `Delete GSLB`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := gslbDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(gslbDeleteParam))
		return err
	},
}

func gslbDeleteCmdInit() {
}

func init() {
	parent := gslbCmd

	gslbListCmdInit()
	parent.AddCommand(gslbListCmd)

	gslbServerInfoCmdInit()
	parent.AddCommand(gslbServerInfoCmd)

	gslbCreateCmdInit()
	parent.AddCommand(gslbCreateCmd)

	gslbServerAddCmdInit()
	parent.AddCommand(gslbServerAddCmd)

	gslbReadCmdInit()
	parent.AddCommand(gslbReadCmd)

	gslbServerUpdateCmdInit()
	parent.AddCommand(gslbServerUpdateCmd)

	gslbServerDeleteCmdInit()
	parent.AddCommand(gslbServerDeleteCmd)

	gslbUpdateCmdInit()
	parent.AddCommand(gslbUpdateCmd)

	gslbDeleteCmdInit()
	parent.AddCommand(gslbDeleteCmd)

	rootCmd.AddCommand(parent)
}

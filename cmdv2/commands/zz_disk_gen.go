// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	diskListParam                 = params.NewListDiskParam()
	diskCreateParam               = params.NewCreateDiskParam()
	diskReadParam                 = params.NewReadDiskParam()
	diskUpdateParam               = params.NewUpdateDiskParam()
	diskDeleteParam               = params.NewDeleteDiskParam()
	diskEditParam                 = params.NewEditDiskParam()
	diskResizePartitionParam      = params.NewResizePartitionDiskParam()
	diskReinstallFromArchiveParam = params.NewReinstallFromArchiveDiskParam()
	diskReinstallFromDiskParam    = params.NewReinstallFromDiskDiskParam()
	diskReinstallToBlankParam     = params.NewReinstallToBlankDiskParam()
	diskServerConnectParam        = params.NewServerConnectDiskParam()
	diskServerDisconnectParam     = params.NewServerDisconnectDiskParam()
	diskMonitorParam              = params.NewMonitorDiskParam()
	diskWaitForCopyParam          = params.NewWaitForCopyDiskParam()
)

// diskCmd represents the command to manage SAKURAÂ Cloud Disk
var diskCmd = &cobra.Command{
	Use:   "disk",
	Short: "A manage commands of Disk",
	Long:  `A manage commands of Disk`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var diskListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List Disk",
	Long:    `List Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := diskListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(diskListParam))
		return err
	},
}

func diskListCmdInit() {
	fs := diskListCmd.Flags()
	fs.IntVarP(&diskListParam.From, "from", "", 0, "set offset")
	fs.StringSliceVarP(&diskListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringVarP(&diskListParam.Scope, "scope", "", "", "set filter by scope('user' or 'shared')")
	fs.VarP(newIDValue(0, &diskListParam.SourceArchiveId), "source-archive-id", "", "set filter by source-archive-id")
	fs.VarP(newIDValue(0, &diskListParam.SourceDiskId), "source-disk-id", "", "set filter by source-disk-id")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &diskListParam.Id), "id", "", "set filter by id(s)")
	fs.IntVarP(&diskListParam.Max, "max", "", 0, "set limit")
	fs.StringSliceVarP(&diskListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.StringSliceVarP(&diskListParam.Tags, "tags", "", []string{}, "set filter by tags(AND)")
	fs.StringVarP(&diskListParam.Storage, "storage", "", "", "set filter by storage-name")
}

var diskCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create Disk",
	Long:  `Create Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := diskCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(diskCreateParam))
		return err
	},
}

func diskCreateCmdInit() {
	fs := diskCreateCmd.Flags()
	fs.StringVarP(&diskCreateParam.Name, "name", "", "", "set resource display name")
	fs.StringSliceVarP(&diskCreateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.StringVarP(&diskCreateParam.Plan, "plan", "", "ssd", "set disk plan('hdd' or 'ssd')")
	fs.IntVarP(&diskCreateParam.Size, "size", "", 20, "set disk size(GB)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &diskCreateParam.DistantFrom), "distant-from", "", "set distant from disk IDs")
	fs.StringVarP(&diskCreateParam.Description, "description", "", "", "set resource description")
	fs.VarP(newIDValue(0, &diskCreateParam.IconId), "icon-id", "", "set Icon ID")
	fs.StringVarP(&diskCreateParam.Connection, "connection", "", "virtio", "set disk connection('virtio' or 'ide')")
	fs.VarP(newIDValue(0, &diskCreateParam.SourceArchiveId), "source-archive-id", "", "set source disk ID")
	fs.VarP(newIDValue(0, &diskCreateParam.SourceDiskId), "source-disk-id", "", "set source disk ID")
}

var diskReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Disk",
	Long:  `Read Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := diskReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(diskReadParam))
		return err
	},
}

func diskReadCmdInit() {
}

var diskUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update Disk",
	Long:  `Update Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := diskUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(diskUpdateParam))
		return err
	},
}

func diskUpdateCmdInit() {
	fs := diskUpdateCmd.Flags()
	fs.StringVarP(&diskUpdateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&diskUpdateParam.Description, "description", "", "", "set resource description")
	fs.StringSliceVarP(&diskUpdateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &diskUpdateParam.IconId), "icon-id", "", "set Icon ID")
	fs.StringVarP(&diskUpdateParam.Connection, "connection", "", "", "set disk connection('virtio' or 'ide')")
}

var diskDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Disk",
	Long:    `Delete Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := diskDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(diskDeleteParam))
		return err
	},
}

func diskDeleteCmdInit() {
}

var diskEditCmd = &cobra.Command{
	Use:     "edit",
	Aliases: []string{"config"},
	Short:   "Edit Disk",
	Long:    `Edit Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := diskEditParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("edit parameter: \n%s\n", debugMarshalIndent(diskEditParam))
		return err
	},
}

func diskEditCmdInit() {
	fs := diskEditCmd.Flags()
	fs.BoolVarP(&diskEditParam.DisablePasswordAuth, "disable-password-auth", "", false, "disable password auth on SSH")
	fs.StringVarP(&diskEditParam.Ipaddress, "ipaddress", "", "", "set ipaddress")
	fs.StringVarP(&diskEditParam.DefaultRoute, "default-route", "", "", "set default gateway")
	fs.IntVarP(&diskEditParam.NwMasklen, "nw-masklen", "", 24, "set ipaddress  prefix")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &diskEditParam.StartupScriptIds), "startup-script-ids", "", "set startup-script ID(s)")
	fs.StringVarP(&diskEditParam.Hostname, "hostname", "", "", "set hostname")
	fs.StringVarP(&diskEditParam.Password, "password", "", "", "set password")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &diskEditParam.SSHKeyIds), "ssh-key-ids", "", "set ssh-key ID(s)")
}

var diskResizePartitionCmd = &cobra.Command{
	Use: "resize-partition",

	Short: "ResizePartition Disk",
	Long:  `ResizePartition Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := diskResizePartitionParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("resize-partition parameter: \n%s\n", debugMarshalIndent(diskResizePartitionParam))
		return err
	},
}

func diskResizePartitionCmdInit() {
}

var diskReinstallFromArchiveCmd = &cobra.Command{
	Use: "reinstall-from-archive",

	Short: "ReinstallFromArchive Disk",
	Long:  `ReinstallFromArchive Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := diskReinstallFromArchiveParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("reinstall-from-archive parameter: \n%s\n", debugMarshalIndent(diskReinstallFromArchiveParam))
		return err
	},
}

func diskReinstallFromArchiveCmdInit() {
	fs := diskReinstallFromArchiveCmd.Flags()
	fs.VarP(newIDValue(0, &diskReinstallFromArchiveParam.SourceArchiveId), "source-archive-id", "", "set source archive ID")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &diskReinstallFromArchiveParam.DistantFrom), "distant-from", "", "set distant from disk IDs")
}

var diskReinstallFromDiskCmd = &cobra.Command{
	Use: "reinstall-from-disk",

	Short: "ReinstallFromDisk Disk",
	Long:  `ReinstallFromDisk Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := diskReinstallFromDiskParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("reinstall-from-disk parameter: \n%s\n", debugMarshalIndent(diskReinstallFromDiskParam))
		return err
	},
}

func diskReinstallFromDiskCmdInit() {
	fs := diskReinstallFromDiskCmd.Flags()
	fs.VarP(newIDValue(0, &diskReinstallFromDiskParam.SourceDiskId), "source-disk-id", "", "set source disk ID")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &diskReinstallFromDiskParam.DistantFrom), "distant-from", "", "set distant from disk IDs")
}

var diskReinstallToBlankCmd = &cobra.Command{
	Use: "reinstall-to-blank",

	Short: "ReinstallToBlank Disk",
	Long:  `ReinstallToBlank Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := diskReinstallToBlankParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("reinstall-to-blank parameter: \n%s\n", debugMarshalIndent(diskReinstallToBlankParam))
		return err
	},
}

func diskReinstallToBlankCmdInit() {
	fs := diskReinstallToBlankCmd.Flags()
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &diskReinstallToBlankParam.DistantFrom), "distant-from", "", "set distant from disk IDs")
}

var diskServerConnectCmd = &cobra.Command{
	Use: "server-connect",

	Short: "ServerConnect Disk",
	Long:  `ServerConnect Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := diskServerConnectParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("server-connect parameter: \n%s\n", debugMarshalIndent(diskServerConnectParam))
		return err
	},
}

func diskServerConnectCmdInit() {
	fs := diskServerConnectCmd.Flags()
	fs.VarP(newIDValue(0, &diskServerConnectParam.ServerId), "server-id", "", "set target server ID")
}

var diskServerDisconnectCmd = &cobra.Command{
	Use: "server-disconnect",

	Short: "ServerDisconnect Disk",
	Long:  `ServerDisconnect Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := diskServerDisconnectParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("server-disconnect parameter: \n%s\n", debugMarshalIndent(diskServerDisconnectParam))
		return err
	},
}

func diskServerDisconnectCmdInit() {
}

var diskMonitorCmd = &cobra.Command{
	Use: "monitor",

	Short: "Monitor Disk",
	Long:  `Monitor Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := diskMonitorParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("monitor parameter: \n%s\n", debugMarshalIndent(diskMonitorParam))
		return err
	},
}

func diskMonitorCmdInit() {
	fs := diskMonitorCmd.Flags()
	fs.StringVarP(&diskMonitorParam.Start, "start", "", "", "set start-time")
	fs.StringVarP(&diskMonitorParam.End, "end", "", "", "set end-time")
	fs.StringVarP(&diskMonitorParam.KeyFormat, "key-format", "", "sakuracloud.disk.{{.ID}}.disk", "set monitoring value key-format")
}

var diskWaitForCopyCmd = &cobra.Command{
	Use:     "wait-for-copy",
	Aliases: []string{"wait"},
	Short:   "WaitForCopy Disk",
	Long:    `WaitForCopy Disk`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := diskWaitForCopyParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("wait-for-copy parameter: \n%s\n", debugMarshalIndent(diskWaitForCopyParam))
		return err
	},
}

func diskWaitForCopyCmdInit() {
}

func init() {
	parent := diskCmd

	diskListCmdInit()
	parent.AddCommand(diskListCmd)

	diskCreateCmdInit()
	parent.AddCommand(diskCreateCmd)

	diskReadCmdInit()
	parent.AddCommand(diskReadCmd)

	diskUpdateCmdInit()
	parent.AddCommand(diskUpdateCmd)

	diskDeleteCmdInit()
	parent.AddCommand(diskDeleteCmd)

	diskEditCmdInit()
	parent.AddCommand(diskEditCmd)

	diskResizePartitionCmdInit()
	parent.AddCommand(diskResizePartitionCmd)

	diskReinstallFromArchiveCmdInit()
	parent.AddCommand(diskReinstallFromArchiveCmd)

	diskReinstallFromDiskCmdInit()
	parent.AddCommand(diskReinstallFromDiskCmd)

	diskReinstallToBlankCmdInit()
	parent.AddCommand(diskReinstallToBlankCmd)

	diskServerConnectCmdInit()
	parent.AddCommand(diskServerConnectCmd)

	diskServerDisconnectCmdInit()
	parent.AddCommand(diskServerDisconnectCmd)

	diskMonitorCmdInit()
	parent.AddCommand(diskMonitorCmd)

	diskWaitForCopyCmdInit()
	parent.AddCommand(diskWaitForCopyCmd)

	rootCmd.AddCommand(parent)
}

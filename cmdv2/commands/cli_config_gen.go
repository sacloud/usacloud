// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

// configCmd represents the config command
var configCmd = &cobra.Command{
	Use:   "config",
	Short: "A manage command of APIKey settings",
	Long:  `A manage command of APIKey settings`,
	Run: func(cmd *cobra.Command, args []string) {
		// TODO not implements: call edit func as default
	},
}

var configCurrentCmd = &cobra.Command{
	Use: "current",

	Short: "Current Config",
	Long:  `Current Config`,
	RunE: func(cmd *cobra.Command, args []string) error {
		currentParam, err := params.NewCurrentConfigParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("current parameter: \n%s\n", debugMarshalIndent(currentParam))
		return err
	},
}

var configDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Config",
	Long:    `Delete Config`,
	RunE: func(cmd *cobra.Command, args []string) error {
		deleteParam, err := params.NewDeleteConfigParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(deleteParam))
		return err
	},
}

var configEditCmd = &cobra.Command{
	Use: "edit",

	Short: "Edit Config (default)",
	Long:  `Edit Config (default)`,
	RunE: func(cmd *cobra.Command, args []string) error {
		editParam, err := params.NewEditConfigParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("edit parameter: \n%s\n", debugMarshalIndent(editParam))
		return err
	},
}

var configListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls"},
	Short:   "List Config",
	Long:    `List Config`,
	RunE: func(cmd *cobra.Command, args []string) error {
		listParam, err := params.NewListConfigParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(listParam))
		return err
	},
}

var configMigrateCmd = &cobra.Command{
	Use: "migrate",

	Short: "Migrate Config",
	Long:  `Migrate Config`,
	RunE: func(cmd *cobra.Command, args []string) error {
		migrateParam, err := params.NewMigrateConfigParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("migrate parameter: \n%s\n", debugMarshalIndent(migrateParam))
		return err
	},
}

var configShowCmd = &cobra.Command{
	Use: "show",

	Short: "Show Config",
	Long:  `Show Config`,
	RunE: func(cmd *cobra.Command, args []string) error {
		showParam, err := params.NewShowConfigParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("show parameter: \n%s\n", debugMarshalIndent(showParam))
		return err
	},
}

var configUseCmd = &cobra.Command{
	Use: "use",

	Short: "Use Config",
	Long:  `Use Config`,
	RunE: func(cmd *cobra.Command, args []string) error {
		useParam, err := params.NewUseConfigParam(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("use parameter: \n%s\n", debugMarshalIndent(useParam))
		return err
	},
}

func init() {
	parent := configCmd
	parent.AddCommand(configCurrentCmd)
	parent.AddCommand(configDeleteCmd)
	parent.AddCommand(configEditCmd)
	parent.AddCommand(configListCmd)
	parent.AddCommand(configMigrateCmd)
	parent.AddCommand(configShowCmd)
	parent.AddCommand(configUseCmd)
	rootCmd.AddCommand(configCmd)
}

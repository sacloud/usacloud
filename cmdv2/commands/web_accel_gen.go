// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	webaccelListParam              = params.NewListWebaccelParam()
	webaccelReadParam              = params.NewReadWebaccelParam()
	webaccelCertificateInfoParam   = params.NewCertificateInfoWebaccelParam()
	webaccelCertificateNewParam    = params.NewCertificateNewWebaccelParam()
	webaccelCertificateUpdateParam = params.NewCertificateUpdateWebaccelParam()
	webaccelDeleteCacheParam       = params.NewDeleteCacheWebaccelParam()
)

// webaccelCmd represents the command to manage SAKURAÂ Cloud WebAccel
var webaccelCmd = &cobra.Command{
	Use:   "webaccel",
	Short: "A manage commands of WebAccel",
	Long:  `A manage commands of WebAccel`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var webaccelListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List Webaccel",
	Long:    `List Webaccel`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := webaccelListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(webaccelListParam))
		return err
	},
}

func webaccelListCmdInit() {
}

var webaccelReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Webaccel",
	Long:  `Read Webaccel`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := webaccelReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(webaccelReadParam))
		return err
	},
}

func webaccelReadCmdInit() {
}

var webaccelCertificateInfoCmd = &cobra.Command{
	Use:     "certificate-info",
	Aliases: []string{"cert-info"},
	Short:   "CertificateInfo Webaccel",
	Long:    `CertificateInfo Webaccel`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := webaccelCertificateInfoParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("certificate-info parameter: \n%s\n", debugMarshalIndent(webaccelCertificateInfoParam))
		return err
	},
}

func webaccelCertificateInfoCmdInit() {
}

var webaccelCertificateNewCmd = &cobra.Command{
	Use:     "certificate-new",
	Aliases: []string{"cert-new", "cert-create", "certificate-create"},
	Short:   "CertificateNew Webaccel",
	Long:    `CertificateNew Webaccel`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := webaccelCertificateNewParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("certificate-new parameter: \n%s\n", debugMarshalIndent(webaccelCertificateNewParam))
		return err
	},
}

func webaccelCertificateNewCmdInit() {
	fs := webaccelCertificateNewCmd.Flags()
	fs.StringVarP(&webaccelCertificateNewParam.Cert, "cert", "", "", "set certificate(from file)")
	fs.StringVarP(&webaccelCertificateNewParam.Key, "key", "", "", "set private key(from file)")
	fs.StringVarP(&webaccelCertificateNewParam.CertContent, "cert-content", "", "", "set certificate(from text)")
	fs.StringVarP(&webaccelCertificateNewParam.KeyContent, "key-content", "", "", "set private key(from text)")
}

var webaccelCertificateUpdateCmd = &cobra.Command{
	Use:     "certificate-update",
	Aliases: []string{"cert-update"},
	Short:   "CertificateUpdate Webaccel",
	Long:    `CertificateUpdate Webaccel`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := webaccelCertificateUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("certificate-update parameter: \n%s\n", debugMarshalIndent(webaccelCertificateUpdateParam))
		return err
	},
}

func webaccelCertificateUpdateCmdInit() {
	fs := webaccelCertificateUpdateCmd.Flags()
	fs.StringVarP(&webaccelCertificateUpdateParam.KeyContent, "key-content", "", "", "set private key(from text)")
	fs.StringVarP(&webaccelCertificateUpdateParam.Cert, "cert", "", "", "set certificate(from file)")
	fs.StringVarP(&webaccelCertificateUpdateParam.Key, "key", "", "", "set private key(from file)")
	fs.StringVarP(&webaccelCertificateUpdateParam.CertContent, "cert-content", "", "", "set certificate(from text)")
}

var webaccelDeleteCacheCmd = &cobra.Command{
	Use:     "delete-cache",
	Aliases: []string{"purge"},
	Short:   "DeleteCache Webaccel",
	Long:    `DeleteCache Webaccel`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := webaccelDeleteCacheParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete-cache parameter: \n%s\n", debugMarshalIndent(webaccelDeleteCacheParam))
		return err
	},
}

func webaccelDeleteCacheCmdInit() {
}

func init() {
	parent := webaccelCmd

	webaccelListCmdInit()
	parent.AddCommand(webaccelListCmd)

	webaccelReadCmdInit()
	parent.AddCommand(webaccelReadCmd)

	webaccelCertificateInfoCmdInit()
	parent.AddCommand(webaccelCertificateInfoCmd)

	webaccelCertificateNewCmdInit()
	parent.AddCommand(webaccelCertificateNewCmd)

	webaccelCertificateUpdateCmdInit()
	parent.AddCommand(webaccelCertificateUpdateCmd)

	webaccelDeleteCacheCmdInit()
	parent.AddCommand(webaccelDeleteCacheCmd)

	rootCmd.AddCommand(parent)
}

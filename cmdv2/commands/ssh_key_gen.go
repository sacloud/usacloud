// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	sshkeyListParam     = params.NewListSshkeyParam()
	sshkeyCreateParam   = params.NewCreateSshkeyParam()
	sshkeyReadParam     = params.NewReadSshkeyParam()
	sshkeyUpdateParam   = params.NewUpdateSshkeyParam()
	sshkeyDeleteParam   = params.NewDeleteSshkeyParam()
	sshkeyGenerateParam = params.NewGenerateSshkeyParam()
)

// sshkeyCmd represents the command to manage SAKURAÂ Cloud SSHKey
var sshkeyCmd = &cobra.Command{
	Use:   "sshkey",
	Short: "A manage commands of SSHKey",
	Long:  `A manage commands of SSHKey`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var sshkeyListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find"},
	Short:   "List Sshkey",
	Long:    `List Sshkey`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := sshkeyListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(sshkeyListParam))
		return err
	},
}

func sshkeyListCmdInit() {
	fs := sshkeyListCmd.Flags()
	fs.StringSliceVarP(&sshkeyListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringSliceVarP(&sshkeyListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &sshkeyListParam.Id), "id", "", "set filter by id(s)")
	fs.IntVarP(&sshkeyListParam.From, "from", "", 0, "set offset")
	fs.IntVarP(&sshkeyListParam.Max, "max", "", 0, "set limit")
}

var sshkeyCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create Sshkey",
	Long:  `Create Sshkey`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := sshkeyCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(sshkeyCreateParam))
		return err
	},
}

func sshkeyCreateCmdInit() {
	fs := sshkeyCreateCmd.Flags()
	fs.StringVarP(&sshkeyCreateParam.PublicKey, "public-key", "", "", "set public-key from file")
	fs.StringVarP(&sshkeyCreateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&sshkeyCreateParam.Description, "description", "", "", "set resource description")
	fs.StringVarP(&sshkeyCreateParam.PublicKeyContent, "public-key-content", "", "", "set public-key")
}

var sshkeyReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Sshkey",
	Long:  `Read Sshkey`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := sshkeyReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(sshkeyReadParam))
		return err
	},
}

func sshkeyReadCmdInit() {
}

var sshkeyUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update Sshkey",
	Long:  `Update Sshkey`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := sshkeyUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(sshkeyUpdateParam))
		return err
	},
}

func sshkeyUpdateCmdInit() {
	fs := sshkeyUpdateCmd.Flags()
	fs.StringVarP(&sshkeyUpdateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&sshkeyUpdateParam.Description, "description", "", "", "set resource description")
}

var sshkeyDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Sshkey",
	Long:    `Delete Sshkey`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := sshkeyDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(sshkeyDeleteParam))
		return err
	},
}

func sshkeyDeleteCmdInit() {
}

var sshkeyGenerateCmd = &cobra.Command{
	Use:     "generate",
	Aliases: []string{"gen"},
	Short:   "Generate Sshkey",
	Long:    `Generate Sshkey`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := sshkeyGenerateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("generate parameter: \n%s\n", debugMarshalIndent(sshkeyGenerateParam))
		return err
	},
}

func sshkeyGenerateCmdInit() {
	fs := sshkeyGenerateCmd.Flags()
	fs.StringVarP(&sshkeyGenerateParam.Description, "description", "", "", "set resource description")
	fs.StringVarP(&sshkeyGenerateParam.PassPhrase, "pass-phrase", "", "", "set ssh-key pass phrase")
	fs.StringVarP(&sshkeyGenerateParam.PrivateKeyOutput, "private-key-output", "", "", "set ssh-key privatekey output path")
	fs.StringVarP(&sshkeyGenerateParam.Name, "name", "", "", "set resource display name")
}

func init() {
	parent := sshkeyCmd

	sshkeyListCmdInit()
	parent.AddCommand(sshkeyListCmd)

	sshkeyCreateCmdInit()
	parent.AddCommand(sshkeyCreateCmd)

	sshkeyReadCmdInit()
	parent.AddCommand(sshkeyReadCmd)

	sshkeyUpdateCmdInit()
	parent.AddCommand(sshkeyUpdateCmd)

	sshkeyDeleteCmdInit()
	parent.AddCommand(sshkeyDeleteCmd)

	sshkeyGenerateCmdInit()
	parent.AddCommand(sshkeyGenerateCmd)

	rootCmd.AddCommand(parent)
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	sshKeyListParam     = params.NewListSSHKeyParam()
	sshKeyCreateParam   = params.NewCreateSSHKeyParam()
	sshKeyReadParam     = params.NewReadSSHKeyParam()
	sshKeyUpdateParam   = params.NewUpdateSSHKeyParam()
	sshKeyDeleteParam   = params.NewDeleteSSHKeyParam()
	sshKeyGenerateParam = params.NewGenerateSSHKeyParam()
)

// sshKeyCmd represents the command to manage SAKURAÂ Cloud SSHKey
var sshKeyCmd = &cobra.Command{
	Use:   "sshKey",
	Short: "A manage commands of SSHKey",
	Long:  `A manage commands of SSHKey`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var sshKeyListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find"},
	Short:   "List SSHKey",
	Long:    `List SSHKey`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := sshKeyListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(sshKeyListParam))
		return err
	},
}

func sshKeyListCmdInit() {
	fs := sshKeyListCmd.Flags()
	fs.StringSliceVarP(&sshKeyListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &sshKeyListParam.Id), "id", "", "set filter by id(s)")
	fs.IntVarP(&sshKeyListParam.From, "from", "", 0, "set offset")
	fs.IntVarP(&sshKeyListParam.Max, "max", "", 0, "set limit")
	fs.StringSliceVarP(&sshKeyListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
}

var sshKeyCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create SSHKey",
	Long:  `Create SSHKey`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := sshKeyCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(sshKeyCreateParam))
		return err
	},
}

func sshKeyCreateCmdInit() {
	fs := sshKeyCreateCmd.Flags()
	fs.StringVarP(&sshKeyCreateParam.PublicKeyContent, "public-key-content", "", "", "set public-key")
	fs.StringVarP(&sshKeyCreateParam.PublicKey, "public-key", "", "", "set public-key from file")
	fs.StringVarP(&sshKeyCreateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&sshKeyCreateParam.Description, "description", "", "", "set resource description")
}

var sshKeyReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read SSHKey",
	Long:  `Read SSHKey`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := sshKeyReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(sshKeyReadParam))
		return err
	},
}

func sshKeyReadCmdInit() {
}

var sshKeyUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update SSHKey",
	Long:  `Update SSHKey`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := sshKeyUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(sshKeyUpdateParam))
		return err
	},
}

func sshKeyUpdateCmdInit() {
	fs := sshKeyUpdateCmd.Flags()
	fs.StringVarP(&sshKeyUpdateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&sshKeyUpdateParam.Description, "description", "", "", "set resource description")
}

var sshKeyDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete SSHKey",
	Long:    `Delete SSHKey`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := sshKeyDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(sshKeyDeleteParam))
		return err
	},
}

func sshKeyDeleteCmdInit() {
}

var sshKeyGenerateCmd = &cobra.Command{
	Use:     "generate",
	Aliases: []string{"gen"},
	Short:   "Generate SSHKey",
	Long:    `Generate SSHKey`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := sshKeyGenerateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("generate parameter: \n%s\n", debugMarshalIndent(sshKeyGenerateParam))
		return err
	},
}

func sshKeyGenerateCmdInit() {
	fs := sshKeyGenerateCmd.Flags()
	fs.StringVarP(&sshKeyGenerateParam.PassPhrase, "pass-phrase", "", "", "set ssh-key pass phrase")
	fs.StringVarP(&sshKeyGenerateParam.PrivateKeyOutput, "private-key-output", "", "", "set ssh-key privatekey output path")
	fs.StringVarP(&sshKeyGenerateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&sshKeyGenerateParam.Description, "description", "", "", "set resource description")
}

func init() {
	parent := sshKeyCmd

	sshKeyListCmdInit()
	parent.AddCommand(sshKeyListCmd)

	sshKeyCreateCmdInit()
	parent.AddCommand(sshKeyCreateCmd)

	sshKeyReadCmdInit()
	parent.AddCommand(sshKeyReadCmd)

	sshKeyUpdateCmdInit()
	parent.AddCommand(sshKeyUpdateCmd)

	sshKeyDeleteCmdInit()
	parent.AddCommand(sshKeyDeleteCmd)

	sshKeyGenerateCmdInit()
	parent.AddCommand(sshKeyGenerateCmd)

	rootCmd.AddCommand(parent)
}

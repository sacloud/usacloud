// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-v2-commands'; DO NOT EDIT

package commands

import (
	"fmt"

	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/cmdv2/params"
	"github.com/spf13/cobra"
)

var (
	isoimageListParam     = params.NewListIsoimageParam()
	isoimageCreateParam   = params.NewCreateIsoimageParam()
	isoimageReadParam     = params.NewReadIsoimageParam()
	isoimageUpdateParam   = params.NewUpdateIsoimageParam()
	isoimageDeleteParam   = params.NewDeleteIsoimageParam()
	isoimageUploadParam   = params.NewUploadIsoimageParam()
	isoimageDownloadParam = params.NewDownloadIsoimageParam()
	isoimageFtpOpenParam  = params.NewFtpOpenIsoimageParam()
	isoimageFtpCloseParam = params.NewFtpCloseIsoimageParam()
)

// isoimageCmd represents the command to manage SAKURAÂ Cloud ISOImage
var isoimageCmd = &cobra.Command{
	Use:   "isoimage",
	Short: "A manage commands of ISOImage",
	Long:  `A manage commands of ISOImage`,
	Run: func(cmd *cobra.Command, args []string) {
		cmd.HelpFunc()(cmd, args)
	},
}

var isoimageListCmd = &cobra.Command{
	Use:     "list",
	Aliases: []string{"ls", "find", "selector"},
	Short:   "List Isoimage",
	Long:    `List Isoimage`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := isoimageListParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("list parameter: \n%s\n", debugMarshalIndent(isoimageListParam))
		return err
	},
}

func isoimageListCmdInit() {
	fs := isoimageListCmd.Flags()
	fs.StringSliceVarP(&isoimageListParam.Sort, "sort", "", []string{}, "set field(s) for sort")
	fs.StringSliceVarP(&isoimageListParam.Name, "name", "", []string{}, "set filter by name(s)")
	fs.VarP(newIDSliceValue([]sacloud.ID{}, &isoimageListParam.Id), "id", "", "set filter by id(s)")
	fs.IntVarP(&isoimageListParam.From, "from", "", 0, "set offset")
	fs.StringVarP(&isoimageListParam.Scope, "scope", "", "", "set filter by scope('user' or 'shared')")
	fs.StringSliceVarP(&isoimageListParam.Tags, "tags", "", []string{}, "set filter by tags(AND)")
	fs.IntVarP(&isoimageListParam.Max, "max", "", 0, "set limit")
}

var isoimageCreateCmd = &cobra.Command{
	Use: "create",

	Short: "Create Isoimage",
	Long:  `Create Isoimage`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := isoimageCreateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("create parameter: \n%s\n", debugMarshalIndent(isoimageCreateParam))
		return err
	},
}

func isoimageCreateCmdInit() {
	fs := isoimageCreateCmd.Flags()
	fs.IntVarP(&isoimageCreateParam.Size, "size", "", 5, "set iso size(GB)")
	fs.StringVarP(&isoimageCreateParam.IsoFile, "iso-file", "", "", "set iso image file")
	fs.StringVarP(&isoimageCreateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&isoimageCreateParam.Description, "description", "", "", "set resource description")
	fs.StringSliceVarP(&isoimageCreateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &isoimageCreateParam.IconId), "icon-id", "", "set Icon ID")
}

var isoimageReadCmd = &cobra.Command{
	Use: "read",

	Short: "Read Isoimage",
	Long:  `Read Isoimage`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := isoimageReadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("read parameter: \n%s\n", debugMarshalIndent(isoimageReadParam))
		return err
	},
}

func isoimageReadCmdInit() {
}

var isoimageUpdateCmd = &cobra.Command{
	Use: "update",

	Short: "Update Isoimage",
	Long:  `Update Isoimage`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := isoimageUpdateParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("update parameter: \n%s\n", debugMarshalIndent(isoimageUpdateParam))
		return err
	},
}

func isoimageUpdateCmdInit() {
	fs := isoimageUpdateCmd.Flags()
	fs.StringVarP(&isoimageUpdateParam.Name, "name", "", "", "set resource display name")
	fs.StringVarP(&isoimageUpdateParam.Description, "description", "", "", "set resource description")
	fs.StringSliceVarP(&isoimageUpdateParam.Tags, "tags", "", []string{}, "set resource tags")
	fs.VarP(newIDValue(0, &isoimageUpdateParam.IconId), "icon-id", "", "set Icon ID")
}

var isoimageDeleteCmd = &cobra.Command{
	Use:     "delete",
	Aliases: []string{"rm"},
	Short:   "Delete Isoimage",
	Long:    `Delete Isoimage`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := isoimageDeleteParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("delete parameter: \n%s\n", debugMarshalIndent(isoimageDeleteParam))
		return err
	},
}

func isoimageDeleteCmdInit() {
}

var isoimageUploadCmd = &cobra.Command{
	Use: "upload",

	Short: "Upload Isoimage",
	Long:  `Upload Isoimage`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := isoimageUploadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("upload parameter: \n%s\n", debugMarshalIndent(isoimageUploadParam))
		return err
	},
}

func isoimageUploadCmdInit() {
	fs := isoimageUploadCmd.Flags()
	fs.StringVarP(&isoimageUploadParam.IsoFile, "iso-file", "", "", "set iso image file")
}

var isoimageDownloadCmd = &cobra.Command{
	Use: "download",

	Short: "Download Isoimage",
	Long:  `Download Isoimage`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := isoimageDownloadParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("download parameter: \n%s\n", debugMarshalIndent(isoimageDownloadParam))
		return err
	},
}

func isoimageDownloadCmdInit() {
	fs := isoimageDownloadCmd.Flags()
	fs.StringVarP(&isoimageDownloadParam.FileDestination, "file-destination", "", "", "set file destination path")
}

var isoimageFtpOpenCmd = &cobra.Command{
	Use: "ftp-open",

	Short: "FtpOpen Isoimage",
	Long:  `FtpOpen Isoimage`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := isoimageFtpOpenParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("ftp-open parameter: \n%s\n", debugMarshalIndent(isoimageFtpOpenParam))
		return err
	},
}

func isoimageFtpOpenCmdInit() {
}

var isoimageFtpCloseCmd = &cobra.Command{
	Use: "ftp-close",

	Short: "FtpClose Isoimage",
	Long:  `FtpClose Isoimage`,
	RunE: func(cmd *cobra.Command, args []string) error {
		err := isoimageFtpCloseParam.Initialize(newParamsAdapter(cmd.Flags()))
		// TODO DEBUG
		fmt.Printf("ftp-close parameter: \n%s\n", debugMarshalIndent(isoimageFtpCloseParam))
		return err
	},
}

func isoimageFtpCloseCmdInit() {
}

func init() {
	parent := isoimageCmd

	isoimageListCmdInit()
	parent.AddCommand(isoimageListCmd)

	isoimageCreateCmdInit()
	parent.AddCommand(isoimageCreateCmd)

	isoimageReadCmdInit()
	parent.AddCommand(isoimageReadCmd)

	isoimageUpdateCmdInit()
	parent.AddCommand(isoimageUpdateCmd)

	isoimageDeleteCmdInit()
	parent.AddCommand(isoimageDeleteCmd)

	isoimageUploadCmdInit()
	parent.AddCommand(isoimageUploadCmd)

	isoimageDownloadCmdInit()
	parent.AddCommand(isoimageDownloadCmd)

	isoimageFtpOpenCmdInit()
	parent.AddCommand(isoimageFtpOpenCmd)

	isoimageFtpCloseCmdInit()
	parent.AddCommand(isoimageFtpCloseCmd)

	rootCmd.AddCommand(parent)
}

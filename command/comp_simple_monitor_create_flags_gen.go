// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-completion'; DO NOT EDIT

package command

import (
	"fmt"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/schema"
)

func SimpleMonitorCreateCompleteFlags(ctx Context, params *CreateSimpleMonitorParam, flagName string, currentValue string) {
	var comp schema.SchemaCompletionFunc

	switch flagName {
	case "delay-loop":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["delay-loop"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["description"].CompleteFunc
	case "dns-excepted":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["dns-excepted"].CompleteFunc
	case "dns-qname":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["dns-qname"].CompleteFunc
	case "email-type":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["email-type"].CompleteFunc
	case "enabled":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["enabled"].CompleteFunc
	case "host-header":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["host-header"].CompleteFunc
	case "icon-id":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["icon-id"].CompleteFunc
	case "notify-email":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["notify-email"].CompleteFunc
	case "path":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["path"].CompleteFunc
	case "port":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["port"].CompleteFunc
	case "protocol":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["protocol"].CompleteFunc
	case "response-code":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["response-code"].CompleteFunc
	case "slack-webhook":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["slack-webhook"].CompleteFunc
	case "tags":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["tags"].CompleteFunc
	case "target":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["target"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListPrivateHostParam is input parameters for the sacloud API
type ListPrivateHostParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Tags              []string     `json:"tags"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`
}

// NewListPrivateHostParam return new ListPrivateHostParam
func NewListPrivateHostParam() *ListPrivateHostParam {
	return &ListPrivateHostParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ListPrivateHostParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = []string{""}
	}
	if isEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.From) {
		p.From = 0
	}
	if isEmpty(p.Max) {
		p.Max = 0
	}
	if isEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *ListPrivateHostParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListPrivateHostParam) GetResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *ListPrivateHostParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListPrivateHostParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListPrivateHostParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListPrivateHostParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListPrivateHostParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListPrivateHostParam) SetName(v []string) {
	p.Name = v
}

func (p *ListPrivateHostParam) GetName() []string {
	return p.Name
}
func (p *ListPrivateHostParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListPrivateHostParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListPrivateHostParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListPrivateHostParam) GetTags() []string {
	return p.Tags
}
func (p *ListPrivateHostParam) SetFrom(v int) {
	p.From = v
}

func (p *ListPrivateHostParam) GetFrom() int {
	return p.From
}
func (p *ListPrivateHostParam) SetMax(v int) {
	p.Max = v
}

func (p *ListPrivateHostParam) GetMax() int {
	return p.Max
}
func (p *ListPrivateHostParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListPrivateHostParam) GetSort() []string {
	return p.Sort
}
func (p *ListPrivateHostParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListPrivateHostParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListPrivateHostParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListPrivateHostParam) GetParameters() string {
	return p.Parameters
}
func (p *ListPrivateHostParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListPrivateHostParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListPrivateHostParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListPrivateHostParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListPrivateHostParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListPrivateHostParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListPrivateHostParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListPrivateHostParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListPrivateHostParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListPrivateHostParam) GetColumn() []string {
	return p.Column
}
func (p *ListPrivateHostParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListPrivateHostParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListPrivateHostParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListPrivateHostParam) GetFormat() string {
	return p.Format
}
func (p *ListPrivateHostParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListPrivateHostParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListPrivateHostParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListPrivateHostParam) GetQuery() string {
	return p.Query
}
func (p *ListPrivateHostParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListPrivateHostParam) GetQueryFile() string {
	return p.QueryFile
}

// CreatePrivateHostParam is input parameters for the sacloud API
type CreatePrivateHostParam struct {
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
}

// NewCreatePrivateHostParam return new CreatePrivateHostParam
func NewCreatePrivateHostParam() *CreatePrivateHostParam {
	return &CreatePrivateHostParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *CreatePrivateHostParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *CreatePrivateHostParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreatePrivateHostParam) GetResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *CreatePrivateHostParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreatePrivateHostParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreatePrivateHostParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreatePrivateHostParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreatePrivateHostParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreatePrivateHostParam) SetName(v string) {
	p.Name = v
}

func (p *CreatePrivateHostParam) GetName() string {
	return p.Name
}
func (p *CreatePrivateHostParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreatePrivateHostParam) GetDescription() string {
	return p.Description
}
func (p *CreatePrivateHostParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreatePrivateHostParam) GetTags() []string {
	return p.Tags
}
func (p *CreatePrivateHostParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreatePrivateHostParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreatePrivateHostParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreatePrivateHostParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreatePrivateHostParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreatePrivateHostParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreatePrivateHostParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreatePrivateHostParam) GetParameters() string {
	return p.Parameters
}
func (p *CreatePrivateHostParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreatePrivateHostParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreatePrivateHostParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreatePrivateHostParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreatePrivateHostParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreatePrivateHostParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreatePrivateHostParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreatePrivateHostParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreatePrivateHostParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreatePrivateHostParam) GetColumn() []string {
	return p.Column
}
func (p *CreatePrivateHostParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreatePrivateHostParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreatePrivateHostParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreatePrivateHostParam) GetFormat() string {
	return p.Format
}
func (p *CreatePrivateHostParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreatePrivateHostParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreatePrivateHostParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreatePrivateHostParam) GetQuery() string {
	return p.Query
}
func (p *CreatePrivateHostParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreatePrivateHostParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadPrivateHostParam is input parameters for the sacloud API
type ReadPrivateHostParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewReadPrivateHostParam return new ReadPrivateHostParam
func NewReadPrivateHostParam() *ReadPrivateHostParam {
	return &ReadPrivateHostParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ReadPrivateHostParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ReadPrivateHostParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadPrivateHostParam) GetResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *ReadPrivateHostParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadPrivateHostParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadPrivateHostParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadPrivateHostParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadPrivateHostParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadPrivateHostParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadPrivateHostParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadPrivateHostParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadPrivateHostParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadPrivateHostParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadPrivateHostParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadPrivateHostParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadPrivateHostParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadPrivateHostParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadPrivateHostParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadPrivateHostParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadPrivateHostParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadPrivateHostParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadPrivateHostParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadPrivateHostParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadPrivateHostParam) GetColumn() []string {
	return p.Column
}
func (p *ReadPrivateHostParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadPrivateHostParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadPrivateHostParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadPrivateHostParam) GetFormat() string {
	return p.Format
}
func (p *ReadPrivateHostParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadPrivateHostParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadPrivateHostParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadPrivateHostParam) GetQuery() string {
	return p.Query
}
func (p *ReadPrivateHostParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadPrivateHostParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadPrivateHostParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadPrivateHostParam) GetId() sacloud.ID {
	return p.Id
}

// UpdatePrivateHostParam is input parameters for the sacloud API
type UpdatePrivateHostParam struct {
	Selector          []string   `json:"selector"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewUpdatePrivateHostParam return new UpdatePrivateHostParam
func NewUpdatePrivateHostParam() *UpdatePrivateHostParam {
	return &UpdatePrivateHostParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UpdatePrivateHostParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UpdatePrivateHostParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["PrivateHost"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdatePrivateHostParam) GetResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *UpdatePrivateHostParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdatePrivateHostParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdatePrivateHostParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdatePrivateHostParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdatePrivateHostParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdatePrivateHostParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdatePrivateHostParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdatePrivateHostParam) SetName(v string) {
	p.Name = v
}

func (p *UpdatePrivateHostParam) GetName() string {
	return p.Name
}
func (p *UpdatePrivateHostParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdatePrivateHostParam) GetDescription() string {
	return p.Description
}
func (p *UpdatePrivateHostParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdatePrivateHostParam) GetTags() []string {
	return p.Tags
}
func (p *UpdatePrivateHostParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdatePrivateHostParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdatePrivateHostParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdatePrivateHostParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdatePrivateHostParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdatePrivateHostParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdatePrivateHostParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdatePrivateHostParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdatePrivateHostParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdatePrivateHostParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdatePrivateHostParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdatePrivateHostParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdatePrivateHostParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdatePrivateHostParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdatePrivateHostParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdatePrivateHostParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdatePrivateHostParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdatePrivateHostParam) GetColumn() []string {
	return p.Column
}
func (p *UpdatePrivateHostParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdatePrivateHostParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdatePrivateHostParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdatePrivateHostParam) GetFormat() string {
	return p.Format
}
func (p *UpdatePrivateHostParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdatePrivateHostParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdatePrivateHostParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdatePrivateHostParam) GetQuery() string {
	return p.Query
}
func (p *UpdatePrivateHostParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdatePrivateHostParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdatePrivateHostParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdatePrivateHostParam) GetId() sacloud.ID {
	return p.Id
}

// DeletePrivateHostParam is input parameters for the sacloud API
type DeletePrivateHostParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewDeletePrivateHostParam return new DeletePrivateHostParam
func NewDeletePrivateHostParam() *DeletePrivateHostParam {
	return &DeletePrivateHostParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DeletePrivateHostParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DeletePrivateHostParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeletePrivateHostParam) GetResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *DeletePrivateHostParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeletePrivateHostParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeletePrivateHostParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeletePrivateHostParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeletePrivateHostParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeletePrivateHostParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeletePrivateHostParam) GetSelector() []string {
	return p.Selector
}
func (p *DeletePrivateHostParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeletePrivateHostParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeletePrivateHostParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeletePrivateHostParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeletePrivateHostParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeletePrivateHostParam) GetParameters() string {
	return p.Parameters
}
func (p *DeletePrivateHostParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeletePrivateHostParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeletePrivateHostParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeletePrivateHostParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeletePrivateHostParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeletePrivateHostParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeletePrivateHostParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeletePrivateHostParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeletePrivateHostParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeletePrivateHostParam) GetColumn() []string {
	return p.Column
}
func (p *DeletePrivateHostParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeletePrivateHostParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeletePrivateHostParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeletePrivateHostParam) GetFormat() string {
	return p.Format
}
func (p *DeletePrivateHostParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeletePrivateHostParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeletePrivateHostParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeletePrivateHostParam) GetQuery() string {
	return p.Query
}
func (p *DeletePrivateHostParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeletePrivateHostParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeletePrivateHostParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeletePrivateHostParam) GetId() sacloud.ID {
	return p.Id
}

// ServerInfoPrivateHostParam is input parameters for the sacloud API
type ServerInfoPrivateHostParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewServerInfoPrivateHostParam return new ServerInfoPrivateHostParam
func NewServerInfoPrivateHostParam() *ServerInfoPrivateHostParam {
	return &ServerInfoPrivateHostParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ServerInfoPrivateHostParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ServerInfoPrivateHostParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ServerInfoPrivateHostParam) GetResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *ServerInfoPrivateHostParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["server-info"]
}

func (p *ServerInfoPrivateHostParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ServerInfoPrivateHostParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ServerInfoPrivateHostParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ServerInfoPrivateHostParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ServerInfoPrivateHostParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerInfoPrivateHostParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerInfoPrivateHostParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerInfoPrivateHostParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerInfoPrivateHostParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerInfoPrivateHostParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerInfoPrivateHostParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerInfoPrivateHostParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerInfoPrivateHostParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerInfoPrivateHostParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerInfoPrivateHostParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerInfoPrivateHostParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerInfoPrivateHostParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerInfoPrivateHostParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerInfoPrivateHostParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerInfoPrivateHostParam) GetColumn() []string {
	return p.Column
}
func (p *ServerInfoPrivateHostParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerInfoPrivateHostParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerInfoPrivateHostParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerInfoPrivateHostParam) GetFormat() string {
	return p.Format
}
func (p *ServerInfoPrivateHostParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerInfoPrivateHostParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerInfoPrivateHostParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerInfoPrivateHostParam) GetQuery() string {
	return p.Query
}
func (p *ServerInfoPrivateHostParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerInfoPrivateHostParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerInfoPrivateHostParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerInfoPrivateHostParam) GetId() sacloud.ID {
	return p.Id
}

// ServerAddPrivateHostParam is input parameters for the sacloud API
type ServerAddPrivateHostParam struct {
	ServerId          sacloud.ID `json:"server-id"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewServerAddPrivateHostParam return new ServerAddPrivateHostParam
func NewServerAddPrivateHostParam() *ServerAddPrivateHostParam {
	return &ServerAddPrivateHostParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ServerAddPrivateHostParam) FillValueToSkeleton() {
	if isEmpty(p.ServerId) {
		p.ServerId = sacloud.ID(0)
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ServerAddPrivateHostParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--server-id", p.ServerId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["server-add"].Params["server-id"].ValidateFunc
		errs := validator("--server-id", p.ServerId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ServerAddPrivateHostParam) GetResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *ServerAddPrivateHostParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["server-add"]
}

func (p *ServerAddPrivateHostParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ServerAddPrivateHostParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ServerAddPrivateHostParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ServerAddPrivateHostParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ServerAddPrivateHostParam) SetServerId(v sacloud.ID) {
	p.ServerId = v
}

func (p *ServerAddPrivateHostParam) GetServerId() sacloud.ID {
	return p.ServerId
}
func (p *ServerAddPrivateHostParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerAddPrivateHostParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerAddPrivateHostParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerAddPrivateHostParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerAddPrivateHostParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerAddPrivateHostParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerAddPrivateHostParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerAddPrivateHostParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerAddPrivateHostParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerAddPrivateHostParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerAddPrivateHostParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerAddPrivateHostParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerAddPrivateHostParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerAddPrivateHostParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerAddPrivateHostParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerAddPrivateHostParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerAddPrivateHostParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerAddPrivateHostParam) GetColumn() []string {
	return p.Column
}
func (p *ServerAddPrivateHostParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerAddPrivateHostParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerAddPrivateHostParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerAddPrivateHostParam) GetFormat() string {
	return p.Format
}
func (p *ServerAddPrivateHostParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerAddPrivateHostParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerAddPrivateHostParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerAddPrivateHostParam) GetQuery() string {
	return p.Query
}
func (p *ServerAddPrivateHostParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerAddPrivateHostParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerAddPrivateHostParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerAddPrivateHostParam) GetId() sacloud.ID {
	return p.Id
}

// ServerDeletePrivateHostParam is input parameters for the sacloud API
type ServerDeletePrivateHostParam struct {
	ServerId          sacloud.ID `json:"server-id"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewServerDeletePrivateHostParam return new ServerDeletePrivateHostParam
func NewServerDeletePrivateHostParam() *ServerDeletePrivateHostParam {
	return &ServerDeletePrivateHostParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ServerDeletePrivateHostParam) FillValueToSkeleton() {
	if isEmpty(p.ServerId) {
		p.ServerId = sacloud.ID(0)
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ServerDeletePrivateHostParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--server-id", p.ServerId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PrivateHost"].Commands["server-delete"].Params["server-id"].ValidateFunc
		errs := validator("--server-id", p.ServerId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ServerDeletePrivateHostParam) GetResourceDef() *schema.Resource {
	return define.Resources["PrivateHost"]
}

func (p *ServerDeletePrivateHostParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["server-delete"]
}

func (p *ServerDeletePrivateHostParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ServerDeletePrivateHostParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ServerDeletePrivateHostParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ServerDeletePrivateHostParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ServerDeletePrivateHostParam) SetServerId(v sacloud.ID) {
	p.ServerId = v
}

func (p *ServerDeletePrivateHostParam) GetServerId() sacloud.ID {
	return p.ServerId
}
func (p *ServerDeletePrivateHostParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerDeletePrivateHostParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerDeletePrivateHostParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerDeletePrivateHostParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerDeletePrivateHostParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerDeletePrivateHostParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerDeletePrivateHostParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerDeletePrivateHostParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerDeletePrivateHostParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerDeletePrivateHostParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerDeletePrivateHostParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerDeletePrivateHostParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerDeletePrivateHostParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerDeletePrivateHostParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerDeletePrivateHostParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerDeletePrivateHostParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerDeletePrivateHostParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerDeletePrivateHostParam) GetColumn() []string {
	return p.Column
}
func (p *ServerDeletePrivateHostParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerDeletePrivateHostParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerDeletePrivateHostParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerDeletePrivateHostParam) GetFormat() string {
	return p.Format
}
func (p *ServerDeletePrivateHostParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerDeletePrivateHostParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerDeletePrivateHostParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerDeletePrivateHostParam) GetQuery() string {
	return p.Query
}
func (p *ServerDeletePrivateHostParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerDeletePrivateHostParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerDeletePrivateHostParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerDeletePrivateHostParam) GetId() sacloud.ID {
	return p.Id
}

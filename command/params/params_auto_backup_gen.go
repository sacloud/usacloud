// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListAutobackupParam is input parameters for the sacloud API
type ListAutobackupParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Tags              []string     `json:"tags"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`
}

// NewListAutobackupParam return new ListAutobackupParam
func NewListAutobackupParam() *ListAutobackupParam {
	return &ListAutobackupParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ListAutobackupParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = []string{""}
	}
	if isEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.From) {
		p.From = 0
	}
	if isEmpty(p.Max) {
		p.Max = 0
	}
	if isEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *ListAutobackupParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["AutoBackup"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["AutoBackup"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListAutobackupParam) GetResourceDef() *schema.Resource {
	return define.Resources["AutoBackup"]
}

func (p *ListAutobackupParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListAutobackupParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListAutobackupParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListAutobackupParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListAutobackupParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListAutobackupParam) SetName(v []string) {
	p.Name = v
}

func (p *ListAutobackupParam) GetName() []string {
	return p.Name
}
func (p *ListAutobackupParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListAutobackupParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListAutobackupParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListAutobackupParam) GetTags() []string {
	return p.Tags
}
func (p *ListAutobackupParam) SetFrom(v int) {
	p.From = v
}

func (p *ListAutobackupParam) GetFrom() int {
	return p.From
}
func (p *ListAutobackupParam) SetMax(v int) {
	p.Max = v
}

func (p *ListAutobackupParam) GetMax() int {
	return p.Max
}
func (p *ListAutobackupParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListAutobackupParam) GetSort() []string {
	return p.Sort
}
func (p *ListAutobackupParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListAutobackupParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListAutobackupParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListAutobackupParam) GetParameters() string {
	return p.Parameters
}
func (p *ListAutobackupParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListAutobackupParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListAutobackupParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListAutobackupParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListAutobackupParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListAutobackupParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListAutobackupParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListAutobackupParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListAutobackupParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListAutobackupParam) GetColumn() []string {
	return p.Column
}
func (p *ListAutobackupParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListAutobackupParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListAutobackupParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListAutobackupParam) GetFormat() string {
	return p.Format
}
func (p *ListAutobackupParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListAutobackupParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListAutobackupParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListAutobackupParam) GetQuery() string {
	return p.Query
}
func (p *ListAutobackupParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListAutobackupParam) GetQueryFile() string {
	return p.QueryFile
}

// CreateAutobackupParam is input parameters for the sacloud API
type CreateAutobackupParam struct {
	DiskId            sacloud.ID `json:"disk-id"`
	Weekdays          []string   `json:"weekdays"`
	Generation        int        `json:"generation"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
}

// NewCreateAutobackupParam return new CreateAutobackupParam
func NewCreateAutobackupParam() *CreateAutobackupParam {
	return &CreateAutobackupParam{

		Weekdays:   []string{"all"},
		Generation: 1,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *CreateAutobackupParam) FillValueToSkeleton() {
	if isEmpty(p.DiskId) {
		p.DiskId = sacloud.ID(0)
	}
	if isEmpty(p.Weekdays) {
		p.Weekdays = []string{""}
	}
	if isEmpty(p.Generation) {
		p.Generation = 0
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *CreateAutobackupParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--disk-id", p.DiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["AutoBackup"].Commands["create"].Params["disk-id"].ValidateFunc
		errs := validator("--disk-id", p.DiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--weekdays", p.Weekdays)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["AutoBackup"].Commands["create"].Params["weekdays"].ValidateFunc
		errs := validator("--weekdays", p.Weekdays)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--generation", p.Generation)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["AutoBackup"].Commands["create"].Params["generation"].ValidateFunc
		errs := validator("--generation", p.Generation)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["AutoBackup"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["AutoBackup"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["AutoBackup"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["AutoBackup"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreateAutobackupParam) GetResourceDef() *schema.Resource {
	return define.Resources["AutoBackup"]
}

func (p *CreateAutobackupParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreateAutobackupParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreateAutobackupParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreateAutobackupParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreateAutobackupParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreateAutobackupParam) SetDiskId(v sacloud.ID) {
	p.DiskId = v
}

func (p *CreateAutobackupParam) GetDiskId() sacloud.ID {
	return p.DiskId
}
func (p *CreateAutobackupParam) SetWeekdays(v []string) {
	p.Weekdays = v
}

func (p *CreateAutobackupParam) GetWeekdays() []string {
	return p.Weekdays
}
func (p *CreateAutobackupParam) SetGeneration(v int) {
	p.Generation = v
}

func (p *CreateAutobackupParam) GetGeneration() int {
	return p.Generation
}
func (p *CreateAutobackupParam) SetName(v string) {
	p.Name = v
}

func (p *CreateAutobackupParam) GetName() string {
	return p.Name
}
func (p *CreateAutobackupParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateAutobackupParam) GetDescription() string {
	return p.Description
}
func (p *CreateAutobackupParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateAutobackupParam) GetTags() []string {
	return p.Tags
}
func (p *CreateAutobackupParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateAutobackupParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateAutobackupParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateAutobackupParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateAutobackupParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateAutobackupParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateAutobackupParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateAutobackupParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateAutobackupParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateAutobackupParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateAutobackupParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateAutobackupParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateAutobackupParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateAutobackupParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateAutobackupParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateAutobackupParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateAutobackupParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateAutobackupParam) GetColumn() []string {
	return p.Column
}
func (p *CreateAutobackupParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateAutobackupParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateAutobackupParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateAutobackupParam) GetFormat() string {
	return p.Format
}
func (p *CreateAutobackupParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateAutobackupParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateAutobackupParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateAutobackupParam) GetQuery() string {
	return p.Query
}
func (p *CreateAutobackupParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateAutobackupParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadAutobackupParam is input parameters for the sacloud API
type ReadAutobackupParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewReadAutobackupParam return new ReadAutobackupParam
func NewReadAutobackupParam() *ReadAutobackupParam {
	return &ReadAutobackupParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ReadAutobackupParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ReadAutobackupParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadAutobackupParam) GetResourceDef() *schema.Resource {
	return define.Resources["AutoBackup"]
}

func (p *ReadAutobackupParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadAutobackupParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadAutobackupParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadAutobackupParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadAutobackupParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadAutobackupParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadAutobackupParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadAutobackupParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadAutobackupParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadAutobackupParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadAutobackupParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadAutobackupParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadAutobackupParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadAutobackupParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadAutobackupParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadAutobackupParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadAutobackupParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadAutobackupParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadAutobackupParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadAutobackupParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadAutobackupParam) GetColumn() []string {
	return p.Column
}
func (p *ReadAutobackupParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadAutobackupParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadAutobackupParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadAutobackupParam) GetFormat() string {
	return p.Format
}
func (p *ReadAutobackupParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadAutobackupParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadAutobackupParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadAutobackupParam) GetQuery() string {
	return p.Query
}
func (p *ReadAutobackupParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadAutobackupParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadAutobackupParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadAutobackupParam) GetId() sacloud.ID {
	return p.Id
}

// UpdateAutobackupParam is input parameters for the sacloud API
type UpdateAutobackupParam struct {
	Weekdays          []string   `json:"weekdays"`
	Generation        int        `json:"generation"`
	Selector          []string   `json:"selector"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewUpdateAutobackupParam return new UpdateAutobackupParam
func NewUpdateAutobackupParam() *UpdateAutobackupParam {
	return &UpdateAutobackupParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UpdateAutobackupParam) FillValueToSkeleton() {
	if isEmpty(p.Weekdays) {
		p.Weekdays = []string{""}
	}
	if isEmpty(p.Generation) {
		p.Generation = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UpdateAutobackupParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["AutoBackup"].Commands["update"].Params["weekdays"].ValidateFunc
		errs := validator("--weekdays", p.Weekdays)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["AutoBackup"].Commands["update"].Params["generation"].ValidateFunc
		errs := validator("--generation", p.Generation)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["AutoBackup"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["AutoBackup"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["AutoBackup"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["AutoBackup"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdateAutobackupParam) GetResourceDef() *schema.Resource {
	return define.Resources["AutoBackup"]
}

func (p *UpdateAutobackupParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdateAutobackupParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdateAutobackupParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdateAutobackupParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdateAutobackupParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdateAutobackupParam) SetWeekdays(v []string) {
	p.Weekdays = v
}

func (p *UpdateAutobackupParam) GetWeekdays() []string {
	return p.Weekdays
}
func (p *UpdateAutobackupParam) SetGeneration(v int) {
	p.Generation = v
}

func (p *UpdateAutobackupParam) GetGeneration() int {
	return p.Generation
}
func (p *UpdateAutobackupParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateAutobackupParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateAutobackupParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateAutobackupParam) GetName() string {
	return p.Name
}
func (p *UpdateAutobackupParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateAutobackupParam) GetDescription() string {
	return p.Description
}
func (p *UpdateAutobackupParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateAutobackupParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateAutobackupParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateAutobackupParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateAutobackupParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateAutobackupParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateAutobackupParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateAutobackupParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateAutobackupParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateAutobackupParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateAutobackupParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateAutobackupParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateAutobackupParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateAutobackupParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateAutobackupParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateAutobackupParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateAutobackupParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateAutobackupParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateAutobackupParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateAutobackupParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateAutobackupParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateAutobackupParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateAutobackupParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateAutobackupParam) GetFormat() string {
	return p.Format
}
func (p *UpdateAutobackupParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateAutobackupParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateAutobackupParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateAutobackupParam) GetQuery() string {
	return p.Query
}
func (p *UpdateAutobackupParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateAutobackupParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateAutobackupParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateAutobackupParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteAutobackupParam is input parameters for the sacloud API
type DeleteAutobackupParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewDeleteAutobackupParam return new DeleteAutobackupParam
func NewDeleteAutobackupParam() *DeleteAutobackupParam {
	return &DeleteAutobackupParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DeleteAutobackupParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DeleteAutobackupParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteAutobackupParam) GetResourceDef() *schema.Resource {
	return define.Resources["AutoBackup"]
}

func (p *DeleteAutobackupParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteAutobackupParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteAutobackupParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteAutobackupParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteAutobackupParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteAutobackupParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteAutobackupParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteAutobackupParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteAutobackupParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteAutobackupParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteAutobackupParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteAutobackupParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteAutobackupParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteAutobackupParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteAutobackupParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteAutobackupParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteAutobackupParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteAutobackupParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteAutobackupParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteAutobackupParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteAutobackupParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteAutobackupParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteAutobackupParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteAutobackupParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteAutobackupParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteAutobackupParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteAutobackupParam) GetFormat() string {
	return p.Format
}
func (p *DeleteAutobackupParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteAutobackupParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteAutobackupParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteAutobackupParam) GetQuery() string {
	return p.Query
}
func (p *DeleteAutobackupParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteAutobackupParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteAutobackupParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteAutobackupParam) GetId() sacloud.ID {
	return p.Id
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListArchiveParam is input parameters for the sacloud API
type ListArchiveParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Scope             string       `json:"scope"`
	Tags              []string     `json:"tags"`
	SourceArchiveId   sacloud.ID   `json:"source-archive-id"`
	SourceDiskId      sacloud.ID   `json:"source-disk-id"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`
}

// NewListArchiveParam return new ListArchiveParam
func NewListArchiveParam() *ListArchiveParam {
	return &ListArchiveParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ListArchiveParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = []string{""}
	}
	if isEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if isEmpty(p.Scope) {
		p.Scope = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.SourceArchiveId) {
		p.SourceArchiveId = sacloud.ID(0)
	}
	if isEmpty(p.SourceDiskId) {
		p.SourceDiskId = sacloud.ID(0)
	}
	if isEmpty(p.From) {
		p.From = 0
	}
	if isEmpty(p.Max) {
		p.Max = 0
	}
	if isEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *ListArchiveParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["list"].Params["scope"].ValidateFunc
		errs := validator("--scope", p.Scope)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["list"].Params["source-archive-id"].ValidateFunc
		errs := validator("--source-archive-id", p.SourceArchiveId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["list"].Params["source-disk-id"].ValidateFunc
		errs := validator("--source-disk-id", p.SourceDiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListArchiveParam) GetResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *ListArchiveParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListArchiveParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListArchiveParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListArchiveParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListArchiveParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListArchiveParam) SetName(v []string) {
	p.Name = v
}

func (p *ListArchiveParam) GetName() []string {
	return p.Name
}
func (p *ListArchiveParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListArchiveParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListArchiveParam) SetScope(v string) {
	p.Scope = v
}

func (p *ListArchiveParam) GetScope() string {
	return p.Scope
}
func (p *ListArchiveParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListArchiveParam) GetTags() []string {
	return p.Tags
}
func (p *ListArchiveParam) SetSourceArchiveId(v sacloud.ID) {
	p.SourceArchiveId = v
}

func (p *ListArchiveParam) GetSourceArchiveId() sacloud.ID {
	return p.SourceArchiveId
}
func (p *ListArchiveParam) SetSourceDiskId(v sacloud.ID) {
	p.SourceDiskId = v
}

func (p *ListArchiveParam) GetSourceDiskId() sacloud.ID {
	return p.SourceDiskId
}
func (p *ListArchiveParam) SetFrom(v int) {
	p.From = v
}

func (p *ListArchiveParam) GetFrom() int {
	return p.From
}
func (p *ListArchiveParam) SetMax(v int) {
	p.Max = v
}

func (p *ListArchiveParam) GetMax() int {
	return p.Max
}
func (p *ListArchiveParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListArchiveParam) GetSort() []string {
	return p.Sort
}
func (p *ListArchiveParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListArchiveParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *ListArchiveParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListArchiveParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListArchiveParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListArchiveParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListArchiveParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListArchiveParam) GetColumn() []string {
	return p.Column
}
func (p *ListArchiveParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListArchiveParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListArchiveParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListArchiveParam) GetFormat() string {
	return p.Format
}
func (p *ListArchiveParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListArchiveParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListArchiveParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListArchiveParam) GetQuery() string {
	return p.Query
}
func (p *ListArchiveParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListArchiveParam) GetQueryFile() string {
	return p.QueryFile
}

// CreateArchiveParam is input parameters for the sacloud API
type CreateArchiveParam struct {
	SourceDiskId      sacloud.ID `json:"source-disk-id"`
	SourceArchiveId   sacloud.ID `json:"source-archive-id"`
	Size              int        `json:"size"`
	ArchiveFile       string     `json:"archive-file"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
}

// NewCreateArchiveParam return new CreateArchiveParam
func NewCreateArchiveParam() *CreateArchiveParam {
	return &CreateArchiveParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *CreateArchiveParam) FillValueToSkeleton() {
	if isEmpty(p.SourceDiskId) {
		p.SourceDiskId = sacloud.ID(0)
	}
	if isEmpty(p.SourceArchiveId) {
		p.SourceArchiveId = sacloud.ID(0)
	}
	if isEmpty(p.Size) {
		p.Size = 0
	}
	if isEmpty(p.ArchiveFile) {
		p.ArchiveFile = ""
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *CreateArchiveParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["Archive"].Commands["create"].Params["source-disk-id"].ValidateFunc
		errs := validator("--source-disk-id", p.SourceDiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--source-disk-id", p.SourceDiskId, map[string]interface{}{

			"--archive-file":      p.ArchiveFile,
			"--size":              p.Size,
			"--source-archive-id": p.SourceArchiveId,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["create"].Params["source-archive-id"].ValidateFunc
		errs := validator("--source-archive-id", p.SourceArchiveId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--source-archive-id", p.SourceArchiveId, map[string]interface{}{

			"--archive-file":   p.ArchiveFile,
			"--size":           p.Size,
			"--source-disk-id": p.SourceDiskId,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["create"].Params["size"].ValidateFunc
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--size", p.Size, map[string]interface{}{

			"--source-archive-id": p.SourceArchiveId,
			"--source-disk-id":    p.SourceDiskId,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["create"].Params["archive-file"].ValidateFunc
		errs := validator("--archive-file", p.ArchiveFile)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--archive-file", p.ArchiveFile, map[string]interface{}{

			"--source-archive-id": p.SourceArchiveId,
			"--source-disk-id":    p.SourceDiskId,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreateArchiveParam) GetResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *CreateArchiveParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreateArchiveParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreateArchiveParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreateArchiveParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreateArchiveParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreateArchiveParam) SetSourceDiskId(v sacloud.ID) {
	p.SourceDiskId = v
}

func (p *CreateArchiveParam) GetSourceDiskId() sacloud.ID {
	return p.SourceDiskId
}
func (p *CreateArchiveParam) SetSourceArchiveId(v sacloud.ID) {
	p.SourceArchiveId = v
}

func (p *CreateArchiveParam) GetSourceArchiveId() sacloud.ID {
	return p.SourceArchiveId
}
func (p *CreateArchiveParam) SetSize(v int) {
	p.Size = v
}

func (p *CreateArchiveParam) GetSize() int {
	return p.Size
}
func (p *CreateArchiveParam) SetArchiveFile(v string) {
	p.ArchiveFile = v
}

func (p *CreateArchiveParam) GetArchiveFile() string {
	return p.ArchiveFile
}
func (p *CreateArchiveParam) SetName(v string) {
	p.Name = v
}

func (p *CreateArchiveParam) GetName() string {
	return p.Name
}
func (p *CreateArchiveParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateArchiveParam) GetDescription() string {
	return p.Description
}
func (p *CreateArchiveParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateArchiveParam) GetTags() []string {
	return p.Tags
}
func (p *CreateArchiveParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateArchiveParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateArchiveParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateArchiveParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateArchiveParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateArchiveParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateArchiveParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateArchiveParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateArchiveParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateArchiveParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateArchiveParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateArchiveParam) GetColumn() []string {
	return p.Column
}
func (p *CreateArchiveParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateArchiveParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateArchiveParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateArchiveParam) GetFormat() string {
	return p.Format
}
func (p *CreateArchiveParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateArchiveParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateArchiveParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateArchiveParam) GetQuery() string {
	return p.Query
}
func (p *CreateArchiveParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateArchiveParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadArchiveParam is input parameters for the sacloud API
type ReadArchiveParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewReadArchiveParam return new ReadArchiveParam
func NewReadArchiveParam() *ReadArchiveParam {
	return &ReadArchiveParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ReadArchiveParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ReadArchiveParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadArchiveParam) GetResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *ReadArchiveParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadArchiveParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadArchiveParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadArchiveParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadArchiveParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadArchiveParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadArchiveParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadArchiveParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadArchiveParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadArchiveParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadArchiveParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadArchiveParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadArchiveParam) GetColumn() []string {
	return p.Column
}
func (p *ReadArchiveParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadArchiveParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadArchiveParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadArchiveParam) GetFormat() string {
	return p.Format
}
func (p *ReadArchiveParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadArchiveParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadArchiveParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadArchiveParam) GetQuery() string {
	return p.Query
}
func (p *ReadArchiveParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadArchiveParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadArchiveParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadArchiveParam) GetId() sacloud.ID {
	return p.Id
}

// UpdateArchiveParam is input parameters for the sacloud API
type UpdateArchiveParam struct {
	Selector          []string   `json:"selector"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewUpdateArchiveParam return new UpdateArchiveParam
func NewUpdateArchiveParam() *UpdateArchiveParam {
	return &UpdateArchiveParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UpdateArchiveParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UpdateArchiveParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["Archive"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Archive"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdateArchiveParam) GetResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *UpdateArchiveParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdateArchiveParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdateArchiveParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdateArchiveParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdateArchiveParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdateArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateArchiveParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateArchiveParam) GetName() string {
	return p.Name
}
func (p *UpdateArchiveParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateArchiveParam) GetDescription() string {
	return p.Description
}
func (p *UpdateArchiveParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateArchiveParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateArchiveParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateArchiveParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateArchiveParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateArchiveParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateArchiveParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateArchiveParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateArchiveParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateArchiveParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateArchiveParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateArchiveParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateArchiveParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateArchiveParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateArchiveParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateArchiveParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateArchiveParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateArchiveParam) GetFormat() string {
	return p.Format
}
func (p *UpdateArchiveParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateArchiveParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateArchiveParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateArchiveParam) GetQuery() string {
	return p.Query
}
func (p *UpdateArchiveParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateArchiveParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateArchiveParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateArchiveParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteArchiveParam is input parameters for the sacloud API
type DeleteArchiveParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewDeleteArchiveParam return new DeleteArchiveParam
func NewDeleteArchiveParam() *DeleteArchiveParam {
	return &DeleteArchiveParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DeleteArchiveParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DeleteArchiveParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteArchiveParam) GetResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *DeleteArchiveParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteArchiveParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteArchiveParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteArchiveParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteArchiveParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteArchiveParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteArchiveParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteArchiveParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteArchiveParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteArchiveParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteArchiveParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteArchiveParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteArchiveParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteArchiveParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteArchiveParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteArchiveParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteArchiveParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteArchiveParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteArchiveParam) GetFormat() string {
	return p.Format
}
func (p *DeleteArchiveParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteArchiveParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteArchiveParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteArchiveParam) GetQuery() string {
	return p.Query
}
func (p *DeleteArchiveParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteArchiveParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteArchiveParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteArchiveParam) GetId() sacloud.ID {
	return p.Id
}

// UploadArchiveParam is input parameters for the sacloud API
type UploadArchiveParam struct {
	ArchiveFile       string     `json:"archive-file"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewUploadArchiveParam return new UploadArchiveParam
func NewUploadArchiveParam() *UploadArchiveParam {
	return &UploadArchiveParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UploadArchiveParam) FillValueToSkeleton() {
	if isEmpty(p.ArchiveFile) {
		p.ArchiveFile = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UploadArchiveParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["Archive"].Commands["upload"].Params["archive-file"].ValidateFunc
		errs := validator("--archive-file", p.ArchiveFile)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UploadArchiveParam) GetResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *UploadArchiveParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["upload"]
}

func (p *UploadArchiveParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UploadArchiveParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UploadArchiveParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UploadArchiveParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UploadArchiveParam) SetArchiveFile(v string) {
	p.ArchiveFile = v
}

func (p *UploadArchiveParam) GetArchiveFile() string {
	return p.ArchiveFile
}
func (p *UploadArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UploadArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *UploadArchiveParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UploadArchiveParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UploadArchiveParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UploadArchiveParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UploadArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UploadArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *UploadArchiveParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UploadArchiveParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UploadArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UploadArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UploadArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UploadArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UploadArchiveParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UploadArchiveParam) GetOutputType() string {
	return p.OutputType
}
func (p *UploadArchiveParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UploadArchiveParam) GetColumn() []string {
	return p.Column
}
func (p *UploadArchiveParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UploadArchiveParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UploadArchiveParam) SetFormat(v string) {
	p.Format = v
}

func (p *UploadArchiveParam) GetFormat() string {
	return p.Format
}
func (p *UploadArchiveParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UploadArchiveParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UploadArchiveParam) SetQuery(v string) {
	p.Query = v
}

func (p *UploadArchiveParam) GetQuery() string {
	return p.Query
}
func (p *UploadArchiveParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UploadArchiveParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UploadArchiveParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UploadArchiveParam) GetId() sacloud.ID {
	return p.Id
}

// DownloadArchiveParam is input parameters for the sacloud API
type DownloadArchiveParam struct {
	FileDestination   string     `json:"file-destination"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewDownloadArchiveParam return new DownloadArchiveParam
func NewDownloadArchiveParam() *DownloadArchiveParam {
	return &DownloadArchiveParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DownloadArchiveParam) FillValueToSkeleton() {
	if isEmpty(p.FileDestination) {
		p.FileDestination = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DownloadArchiveParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DownloadArchiveParam) GetResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *DownloadArchiveParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["download"]
}

func (p *DownloadArchiveParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DownloadArchiveParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DownloadArchiveParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DownloadArchiveParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DownloadArchiveParam) SetFileDestination(v string) {
	p.FileDestination = v
}

func (p *DownloadArchiveParam) GetFileDestination() string {
	return p.FileDestination
}
func (p *DownloadArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DownloadArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *DownloadArchiveParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DownloadArchiveParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DownloadArchiveParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DownloadArchiveParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DownloadArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DownloadArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *DownloadArchiveParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DownloadArchiveParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DownloadArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DownloadArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DownloadArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DownloadArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DownloadArchiveParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DownloadArchiveParam) GetId() sacloud.ID {
	return p.Id
}

// FTPOpenArchiveParam is input parameters for the sacloud API
type FTPOpenArchiveParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewFTPOpenArchiveParam return new FTPOpenArchiveParam
func NewFTPOpenArchiveParam() *FTPOpenArchiveParam {
	return &FTPOpenArchiveParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *FTPOpenArchiveParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *FTPOpenArchiveParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *FTPOpenArchiveParam) GetResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *FTPOpenArchiveParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["ftp-open"]
}

func (p *FTPOpenArchiveParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *FTPOpenArchiveParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *FTPOpenArchiveParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *FTPOpenArchiveParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *FTPOpenArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *FTPOpenArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *FTPOpenArchiveParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *FTPOpenArchiveParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *FTPOpenArchiveParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *FTPOpenArchiveParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *FTPOpenArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *FTPOpenArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *FTPOpenArchiveParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *FTPOpenArchiveParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *FTPOpenArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *FTPOpenArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *FTPOpenArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *FTPOpenArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *FTPOpenArchiveParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *FTPOpenArchiveParam) GetOutputType() string {
	return p.OutputType
}
func (p *FTPOpenArchiveParam) SetColumn(v []string) {
	p.Column = v
}

func (p *FTPOpenArchiveParam) GetColumn() []string {
	return p.Column
}
func (p *FTPOpenArchiveParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *FTPOpenArchiveParam) GetQuiet() bool {
	return p.Quiet
}
func (p *FTPOpenArchiveParam) SetFormat(v string) {
	p.Format = v
}

func (p *FTPOpenArchiveParam) GetFormat() string {
	return p.Format
}
func (p *FTPOpenArchiveParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *FTPOpenArchiveParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *FTPOpenArchiveParam) SetQuery(v string) {
	p.Query = v
}

func (p *FTPOpenArchiveParam) GetQuery() string {
	return p.Query
}
func (p *FTPOpenArchiveParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *FTPOpenArchiveParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *FTPOpenArchiveParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *FTPOpenArchiveParam) GetId() sacloud.ID {
	return p.Id
}

// FTPCloseArchiveParam is input parameters for the sacloud API
type FTPCloseArchiveParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewFTPCloseArchiveParam return new FTPCloseArchiveParam
func NewFTPCloseArchiveParam() *FTPCloseArchiveParam {
	return &FTPCloseArchiveParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *FTPCloseArchiveParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *FTPCloseArchiveParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *FTPCloseArchiveParam) GetResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *FTPCloseArchiveParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["ftp-close"]
}

func (p *FTPCloseArchiveParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *FTPCloseArchiveParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *FTPCloseArchiveParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *FTPCloseArchiveParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *FTPCloseArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *FTPCloseArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *FTPCloseArchiveParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *FTPCloseArchiveParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *FTPCloseArchiveParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *FTPCloseArchiveParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *FTPCloseArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *FTPCloseArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *FTPCloseArchiveParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *FTPCloseArchiveParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *FTPCloseArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *FTPCloseArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *FTPCloseArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *FTPCloseArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *FTPCloseArchiveParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *FTPCloseArchiveParam) GetId() sacloud.ID {
	return p.Id
}

// WaitForCopyArchiveParam is input parameters for the sacloud API
type WaitForCopyArchiveParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewWaitForCopyArchiveParam return new WaitForCopyArchiveParam
func NewWaitForCopyArchiveParam() *WaitForCopyArchiveParam {
	return &WaitForCopyArchiveParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *WaitForCopyArchiveParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *WaitForCopyArchiveParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *WaitForCopyArchiveParam) GetResourceDef() *schema.Resource {
	return define.Resources["Archive"]
}

func (p *WaitForCopyArchiveParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["wait-for-copy"]
}

func (p *WaitForCopyArchiveParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *WaitForCopyArchiveParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *WaitForCopyArchiveParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *WaitForCopyArchiveParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *WaitForCopyArchiveParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *WaitForCopyArchiveParam) GetSelector() []string {
	return p.Selector
}
func (p *WaitForCopyArchiveParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForCopyArchiveParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForCopyArchiveParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *WaitForCopyArchiveParam) GetParameters() string {
	return p.Parameters
}
func (p *WaitForCopyArchiveParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForCopyArchiveParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForCopyArchiveParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *WaitForCopyArchiveParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *WaitForCopyArchiveParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForCopyArchiveParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForCopyArchiveParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *WaitForCopyArchiveParam) GetId() sacloud.ID {
	return p.Id
}

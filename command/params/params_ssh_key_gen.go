// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListSshkeyParam is input parameters for the sacloud API
type ListSshkeyParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`
}

// NewListSshkeyParam return new ListSshkeyParam
func NewListSshkeyParam() *ListSshkeyParam {
	return &ListSshkeyParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ListSshkeyParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = []string{""}
	}
	if isEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if isEmpty(p.From) {
		p.From = 0
	}
	if isEmpty(p.Max) {
		p.Max = 0
	}
	if isEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *ListSshkeyParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SSHKey"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListSshkeyParam) GetResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *ListSshkeyParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListSshkeyParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListSshkeyParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListSshkeyParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListSshkeyParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListSshkeyParam) SetName(v []string) {
	p.Name = v
}

func (p *ListSshkeyParam) GetName() []string {
	return p.Name
}
func (p *ListSshkeyParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListSshkeyParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListSshkeyParam) SetFrom(v int) {
	p.From = v
}

func (p *ListSshkeyParam) GetFrom() int {
	return p.From
}
func (p *ListSshkeyParam) SetMax(v int) {
	p.Max = v
}

func (p *ListSshkeyParam) GetMax() int {
	return p.Max
}
func (p *ListSshkeyParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListSshkeyParam) GetSort() []string {
	return p.Sort
}
func (p *ListSshkeyParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListSshkeyParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListSshkeyParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListSshkeyParam) GetParameters() string {
	return p.Parameters
}
func (p *ListSshkeyParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListSshkeyParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListSshkeyParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListSshkeyParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListSshkeyParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListSshkeyParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListSshkeyParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListSshkeyParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListSshkeyParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListSshkeyParam) GetColumn() []string {
	return p.Column
}
func (p *ListSshkeyParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListSshkeyParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListSshkeyParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListSshkeyParam) GetFormat() string {
	return p.Format
}
func (p *ListSshkeyParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListSshkeyParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListSshkeyParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListSshkeyParam) GetQuery() string {
	return p.Query
}
func (p *ListSshkeyParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListSshkeyParam) GetQueryFile() string {
	return p.QueryFile
}

// CreateSshkeyParam is input parameters for the sacloud API
type CreateSshkeyParam struct {
	PublicKey         string   `json:"public-key"`
	Name              string   `json:"name"`
	Description       string   `json:"description"`
	Assumeyes         bool     `json:"assumeyes"`
	PublicKeyContent  string   `json:"public-key-content"`
	ParamTemplate     string   `json:"param-template"`
	Parameters        string   `json:"parameters"`
	ParamTemplateFile string   `json:"param-template-file"`
	ParameterFile     string   `json:"parameter-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`
}

// NewCreateSshkeyParam return new CreateSshkeyParam
func NewCreateSshkeyParam() *CreateSshkeyParam {
	return &CreateSshkeyParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *CreateSshkeyParam) FillValueToSkeleton() {
	if isEmpty(p.PublicKey) {
		p.PublicKey = ""
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.PublicKeyContent) {
		p.PublicKeyContent = ""
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *CreateSshkeyParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["SSHKey"].Commands["create"].Params["public-key"].ValidateFunc
		errs := validator("--public-key", p.PublicKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SSHKey"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SSHKey"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--public-key-content", p.PublicKeyContent, map[string]interface{}{

			"--public-key": p.PublicKey,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreateSshkeyParam) GetResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *CreateSshkeyParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreateSshkeyParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreateSshkeyParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreateSshkeyParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreateSshkeyParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreateSshkeyParam) SetPublicKey(v string) {
	p.PublicKey = v
}

func (p *CreateSshkeyParam) GetPublicKey() string {
	return p.PublicKey
}
func (p *CreateSshkeyParam) SetName(v string) {
	p.Name = v
}

func (p *CreateSshkeyParam) GetName() string {
	return p.Name
}
func (p *CreateSshkeyParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateSshkeyParam) GetDescription() string {
	return p.Description
}
func (p *CreateSshkeyParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateSshkeyParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateSshkeyParam) SetPublicKeyContent(v string) {
	p.PublicKeyContent = v
}

func (p *CreateSshkeyParam) GetPublicKeyContent() string {
	return p.PublicKeyContent
}
func (p *CreateSshkeyParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateSshkeyParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateSshkeyParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateSshkeyParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateSshkeyParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateSshkeyParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateSshkeyParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateSshkeyParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateSshkeyParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateSshkeyParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateSshkeyParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateSshkeyParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateSshkeyParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateSshkeyParam) GetColumn() []string {
	return p.Column
}
func (p *CreateSshkeyParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateSshkeyParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateSshkeyParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateSshkeyParam) GetFormat() string {
	return p.Format
}
func (p *CreateSshkeyParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateSshkeyParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateSshkeyParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateSshkeyParam) GetQuery() string {
	return p.Query
}
func (p *CreateSshkeyParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateSshkeyParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadSshkeyParam is input parameters for the sacloud API
type ReadSshkeyParam struct {
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewReadSshkeyParam return new ReadSshkeyParam
func NewReadSshkeyParam() *ReadSshkeyParam {
	return &ReadSshkeyParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ReadSshkeyParam) FillValueToSkeleton() {
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ReadSshkeyParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadSshkeyParam) GetResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *ReadSshkeyParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadSshkeyParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadSshkeyParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadSshkeyParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadSshkeyParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadSshkeyParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadSshkeyParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadSshkeyParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadSshkeyParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadSshkeyParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadSshkeyParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadSshkeyParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadSshkeyParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadSshkeyParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadSshkeyParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadSshkeyParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadSshkeyParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadSshkeyParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadSshkeyParam) GetColumn() []string {
	return p.Column
}
func (p *ReadSshkeyParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadSshkeyParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadSshkeyParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadSshkeyParam) GetFormat() string {
	return p.Format
}
func (p *ReadSshkeyParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadSshkeyParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadSshkeyParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadSshkeyParam) GetQuery() string {
	return p.Query
}
func (p *ReadSshkeyParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadSshkeyParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadSshkeyParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadSshkeyParam) GetId() sacloud.ID {
	return p.Id
}

// UpdateSshkeyParam is input parameters for the sacloud API
type UpdateSshkeyParam struct {
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewUpdateSshkeyParam return new UpdateSshkeyParam
func NewUpdateSshkeyParam() *UpdateSshkeyParam {
	return &UpdateSshkeyParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UpdateSshkeyParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UpdateSshkeyParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["SSHKey"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SSHKey"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdateSshkeyParam) GetResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *UpdateSshkeyParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdateSshkeyParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdateSshkeyParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdateSshkeyParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdateSshkeyParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdateSshkeyParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateSshkeyParam) GetName() string {
	return p.Name
}
func (p *UpdateSshkeyParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateSshkeyParam) GetDescription() string {
	return p.Description
}
func (p *UpdateSshkeyParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateSshkeyParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateSshkeyParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateSshkeyParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateSshkeyParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateSshkeyParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateSshkeyParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateSshkeyParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateSshkeyParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateSshkeyParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateSshkeyParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateSshkeyParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateSshkeyParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateSshkeyParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateSshkeyParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateSshkeyParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateSshkeyParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateSshkeyParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateSshkeyParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateSshkeyParam) GetFormat() string {
	return p.Format
}
func (p *UpdateSshkeyParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateSshkeyParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateSshkeyParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateSshkeyParam) GetQuery() string {
	return p.Query
}
func (p *UpdateSshkeyParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateSshkeyParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateSshkeyParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateSshkeyParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteSshkeyParam is input parameters for the sacloud API
type DeleteSshkeyParam struct {
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewDeleteSshkeyParam return new DeleteSshkeyParam
func NewDeleteSshkeyParam() *DeleteSshkeyParam {
	return &DeleteSshkeyParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DeleteSshkeyParam) FillValueToSkeleton() {
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DeleteSshkeyParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteSshkeyParam) GetResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *DeleteSshkeyParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteSshkeyParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteSshkeyParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteSshkeyParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteSshkeyParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteSshkeyParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteSshkeyParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteSshkeyParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteSshkeyParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteSshkeyParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteSshkeyParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteSshkeyParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteSshkeyParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteSshkeyParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteSshkeyParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteSshkeyParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteSshkeyParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteSshkeyParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteSshkeyParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteSshkeyParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteSshkeyParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteSshkeyParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteSshkeyParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteSshkeyParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteSshkeyParam) GetFormat() string {
	return p.Format
}
func (p *DeleteSshkeyParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteSshkeyParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteSshkeyParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteSshkeyParam) GetQuery() string {
	return p.Query
}
func (p *DeleteSshkeyParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteSshkeyParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteSshkeyParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteSshkeyParam) GetId() sacloud.ID {
	return p.Id
}

// GenerateSshkeyParam is input parameters for the sacloud API
type GenerateSshkeyParam struct {
	PassPhrase        string   `json:"pass-phrase"`
	Name              string   `json:"name"`
	Description       string   `json:"description"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	Parameters        string   `json:"parameters"`
	ParamTemplateFile string   `json:"param-template-file"`
	ParameterFile     string   `json:"parameter-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	PrivateKeyOutput  string   `json:"private-key-output"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`
}

// NewGenerateSshkeyParam return new GenerateSshkeyParam
func NewGenerateSshkeyParam() *GenerateSshkeyParam {
	return &GenerateSshkeyParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *GenerateSshkeyParam) FillValueToSkeleton() {
	if isEmpty(p.PassPhrase) {
		p.PassPhrase = ""
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.PrivateKeyOutput) {
		p.PrivateKeyOutput = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *GenerateSshkeyParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["SSHKey"].Commands["generate"].Params["pass-phrase"].ValidateFunc
		errs := validator("--pass-phrase", p.PassPhrase)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SSHKey"].Commands["generate"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SSHKey"].Commands["generate"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *GenerateSshkeyParam) GetResourceDef() *schema.Resource {
	return define.Resources["SSHKey"]
}

func (p *GenerateSshkeyParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["generate"]
}

func (p *GenerateSshkeyParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *GenerateSshkeyParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *GenerateSshkeyParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *GenerateSshkeyParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *GenerateSshkeyParam) SetPassPhrase(v string) {
	p.PassPhrase = v
}

func (p *GenerateSshkeyParam) GetPassPhrase() string {
	return p.PassPhrase
}
func (p *GenerateSshkeyParam) SetName(v string) {
	p.Name = v
}

func (p *GenerateSshkeyParam) GetName() string {
	return p.Name
}
func (p *GenerateSshkeyParam) SetDescription(v string) {
	p.Description = v
}

func (p *GenerateSshkeyParam) GetDescription() string {
	return p.Description
}
func (p *GenerateSshkeyParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *GenerateSshkeyParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *GenerateSshkeyParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *GenerateSshkeyParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *GenerateSshkeyParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *GenerateSshkeyParam) GetParameters() string {
	return p.Parameters
}
func (p *GenerateSshkeyParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *GenerateSshkeyParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *GenerateSshkeyParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *GenerateSshkeyParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *GenerateSshkeyParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *GenerateSshkeyParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *GenerateSshkeyParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *GenerateSshkeyParam) GetOutputType() string {
	return p.OutputType
}
func (p *GenerateSshkeyParam) SetPrivateKeyOutput(v string) {
	p.PrivateKeyOutput = v
}

func (p *GenerateSshkeyParam) GetPrivateKeyOutput() string {
	return p.PrivateKeyOutput
}
func (p *GenerateSshkeyParam) SetColumn(v []string) {
	p.Column = v
}

func (p *GenerateSshkeyParam) GetColumn() []string {
	return p.Column
}
func (p *GenerateSshkeyParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *GenerateSshkeyParam) GetQuiet() bool {
	return p.Quiet
}
func (p *GenerateSshkeyParam) SetFormat(v string) {
	p.Format = v
}

func (p *GenerateSshkeyParam) GetFormat() string {
	return p.Format
}
func (p *GenerateSshkeyParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *GenerateSshkeyParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *GenerateSshkeyParam) SetQuery(v string) {
	p.Query = v
}

func (p *GenerateSshkeyParam) GetQuery() string {
	return p.Query
}
func (p *GenerateSshkeyParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *GenerateSshkeyParam) GetQueryFile() string {
	return p.QueryFile
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListObjectstorageParam is input parameters for the sacloud API
type ListObjectstorageParam struct {
	AccessKey         string   `json:"access-key"`
	SecretKey         string   `json:"secret-key"`
	Bucket            string   `json:"bucket"`
	ParamTemplate     string   `json:"param-template"`
	Parameters        string   `json:"parameters"`
	ParamTemplateFile string   `json:"param-template-file"`
	ParameterFile     string   `json:"parameter-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`
}

// NewListObjectstorageParam return new ListObjectstorageParam
func NewListObjectstorageParam() *ListObjectstorageParam {
	return &ListObjectstorageParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ListObjectstorageParam) FillValueToSkeleton() {
	if isEmpty(p.AccessKey) {
		p.AccessKey = ""
	}
	if isEmpty(p.SecretKey) {
		p.SecretKey = ""
	}
	if isEmpty(p.Bucket) {
		p.Bucket = ""
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *ListObjectstorageParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--access-key", p.AccessKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--secret-key", p.SecretKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListObjectstorageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ObjectStorage"]
}

func (p *ListObjectstorageParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListObjectstorageParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListObjectstorageParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListObjectstorageParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListObjectstorageParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListObjectstorageParam) SetAccessKey(v string) {
	p.AccessKey = v
}

func (p *ListObjectstorageParam) GetAccessKey() string {
	return p.AccessKey
}
func (p *ListObjectstorageParam) SetSecretKey(v string) {
	p.SecretKey = v
}

func (p *ListObjectstorageParam) GetSecretKey() string {
	return p.SecretKey
}
func (p *ListObjectstorageParam) SetBucket(v string) {
	p.Bucket = v
}

func (p *ListObjectstorageParam) GetBucket() string {
	return p.Bucket
}
func (p *ListObjectstorageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListObjectstorageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListObjectstorageParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListObjectstorageParam) GetParameters() string {
	return p.Parameters
}
func (p *ListObjectstorageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListObjectstorageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListObjectstorageParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListObjectstorageParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListObjectstorageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListObjectstorageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListObjectstorageParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListObjectstorageParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListObjectstorageParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListObjectstorageParam) GetColumn() []string {
	return p.Column
}
func (p *ListObjectstorageParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListObjectstorageParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListObjectstorageParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListObjectstorageParam) GetFormat() string {
	return p.Format
}
func (p *ListObjectstorageParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListObjectstorageParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListObjectstorageParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListObjectstorageParam) GetQuery() string {
	return p.Query
}
func (p *ListObjectstorageParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListObjectstorageParam) GetQueryFile() string {
	return p.QueryFile
}

// PutObjectstorageParam is input parameters for the sacloud API
type PutObjectstorageParam struct {
	AccessKey         string `json:"access-key"`
	ContentType       string `json:"content-type"`
	Recursive         bool   `json:"recursive"`
	SecretKey         string `json:"secret-key"`
	Bucket            string `json:"bucket"`
	Assumeyes         bool   `json:"assumeyes"`
	ParamTemplate     string `json:"param-template"`
	Parameters        string `json:"parameters"`
	ParamTemplateFile string `json:"param-template-file"`
	ParameterFile     string `json:"parameter-file"`
	GenerateSkeleton  bool   `json:"generate-skeleton"`
}

// NewPutObjectstorageParam return new PutObjectstorageParam
func NewPutObjectstorageParam() *PutObjectstorageParam {
	return &PutObjectstorageParam{

		ContentType: "application/octet-stream",
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *PutObjectstorageParam) FillValueToSkeleton() {
	if isEmpty(p.AccessKey) {
		p.AccessKey = ""
	}
	if isEmpty(p.ContentType) {
		p.ContentType = ""
	}
	if isEmpty(p.Recursive) {
		p.Recursive = false
	}
	if isEmpty(p.SecretKey) {
		p.SecretKey = ""
	}
	if isEmpty(p.Bucket) {
		p.Bucket = ""
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}

}

// Validate checks current values in model
func (p *PutObjectstorageParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--access-key", p.AccessKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--secret-key", p.SecretKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *PutObjectstorageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ObjectStorage"]
}

func (p *PutObjectstorageParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["put"]
}

func (p *PutObjectstorageParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *PutObjectstorageParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *PutObjectstorageParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *PutObjectstorageParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *PutObjectstorageParam) SetAccessKey(v string) {
	p.AccessKey = v
}

func (p *PutObjectstorageParam) GetAccessKey() string {
	return p.AccessKey
}
func (p *PutObjectstorageParam) SetContentType(v string) {
	p.ContentType = v
}

func (p *PutObjectstorageParam) GetContentType() string {
	return p.ContentType
}
func (p *PutObjectstorageParam) SetRecursive(v bool) {
	p.Recursive = v
}

func (p *PutObjectstorageParam) GetRecursive() bool {
	return p.Recursive
}
func (p *PutObjectstorageParam) SetSecretKey(v string) {
	p.SecretKey = v
}

func (p *PutObjectstorageParam) GetSecretKey() string {
	return p.SecretKey
}
func (p *PutObjectstorageParam) SetBucket(v string) {
	p.Bucket = v
}

func (p *PutObjectstorageParam) GetBucket() string {
	return p.Bucket
}
func (p *PutObjectstorageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PutObjectstorageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PutObjectstorageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PutObjectstorageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PutObjectstorageParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *PutObjectstorageParam) GetParameters() string {
	return p.Parameters
}
func (p *PutObjectstorageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PutObjectstorageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PutObjectstorageParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PutObjectstorageParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PutObjectstorageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PutObjectstorageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}

// GetObjectstorageParam is input parameters for the sacloud API
type GetObjectstorageParam struct {
	AccessKey         string `json:"access-key"`
	Recursive         bool   `json:"recursive"`
	SecretKey         string `json:"secret-key"`
	Bucket            string `json:"bucket"`
	ParamTemplate     string `json:"param-template"`
	Parameters        string `json:"parameters"`
	ParamTemplateFile string `json:"param-template-file"`
	ParameterFile     string `json:"parameter-file"`
	GenerateSkeleton  bool   `json:"generate-skeleton"`
}

// NewGetObjectstorageParam return new GetObjectstorageParam
func NewGetObjectstorageParam() *GetObjectstorageParam {
	return &GetObjectstorageParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *GetObjectstorageParam) FillValueToSkeleton() {
	if isEmpty(p.AccessKey) {
		p.AccessKey = ""
	}
	if isEmpty(p.Recursive) {
		p.Recursive = false
	}
	if isEmpty(p.SecretKey) {
		p.SecretKey = ""
	}
	if isEmpty(p.Bucket) {
		p.Bucket = ""
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}

}

// Validate checks current values in model
func (p *GetObjectstorageParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--access-key", p.AccessKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--secret-key", p.SecretKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *GetObjectstorageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ObjectStorage"]
}

func (p *GetObjectstorageParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["get"]
}

func (p *GetObjectstorageParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *GetObjectstorageParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *GetObjectstorageParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *GetObjectstorageParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *GetObjectstorageParam) SetAccessKey(v string) {
	p.AccessKey = v
}

func (p *GetObjectstorageParam) GetAccessKey() string {
	return p.AccessKey
}
func (p *GetObjectstorageParam) SetRecursive(v bool) {
	p.Recursive = v
}

func (p *GetObjectstorageParam) GetRecursive() bool {
	return p.Recursive
}
func (p *GetObjectstorageParam) SetSecretKey(v string) {
	p.SecretKey = v
}

func (p *GetObjectstorageParam) GetSecretKey() string {
	return p.SecretKey
}
func (p *GetObjectstorageParam) SetBucket(v string) {
	p.Bucket = v
}

func (p *GetObjectstorageParam) GetBucket() string {
	return p.Bucket
}
func (p *GetObjectstorageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *GetObjectstorageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *GetObjectstorageParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *GetObjectstorageParam) GetParameters() string {
	return p.Parameters
}
func (p *GetObjectstorageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *GetObjectstorageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *GetObjectstorageParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *GetObjectstorageParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *GetObjectstorageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *GetObjectstorageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}

// DeleteObjectstorageParam is input parameters for the sacloud API
type DeleteObjectstorageParam struct {
	AccessKey         string `json:"access-key"`
	Recursive         bool   `json:"recursive"`
	SecretKey         string `json:"secret-key"`
	Bucket            string `json:"bucket"`
	Assumeyes         bool   `json:"assumeyes"`
	ParamTemplate     string `json:"param-template"`
	Parameters        string `json:"parameters"`
	ParamTemplateFile string `json:"param-template-file"`
	ParameterFile     string `json:"parameter-file"`
	GenerateSkeleton  bool   `json:"generate-skeleton"`
}

// NewDeleteObjectstorageParam return new DeleteObjectstorageParam
func NewDeleteObjectstorageParam() *DeleteObjectstorageParam {
	return &DeleteObjectstorageParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DeleteObjectstorageParam) FillValueToSkeleton() {
	if isEmpty(p.AccessKey) {
		p.AccessKey = ""
	}
	if isEmpty(p.Recursive) {
		p.Recursive = false
	}
	if isEmpty(p.SecretKey) {
		p.SecretKey = ""
	}
	if isEmpty(p.Bucket) {
		p.Bucket = ""
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}

}

// Validate checks current values in model
func (p *DeleteObjectstorageParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--access-key", p.AccessKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--secret-key", p.SecretKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteObjectstorageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ObjectStorage"]
}

func (p *DeleteObjectstorageParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteObjectstorageParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteObjectstorageParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteObjectstorageParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteObjectstorageParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteObjectstorageParam) SetAccessKey(v string) {
	p.AccessKey = v
}

func (p *DeleteObjectstorageParam) GetAccessKey() string {
	return p.AccessKey
}
func (p *DeleteObjectstorageParam) SetRecursive(v bool) {
	p.Recursive = v
}

func (p *DeleteObjectstorageParam) GetRecursive() bool {
	return p.Recursive
}
func (p *DeleteObjectstorageParam) SetSecretKey(v string) {
	p.SecretKey = v
}

func (p *DeleteObjectstorageParam) GetSecretKey() string {
	return p.SecretKey
}
func (p *DeleteObjectstorageParam) SetBucket(v string) {
	p.Bucket = v
}

func (p *DeleteObjectstorageParam) GetBucket() string {
	return p.Bucket
}
func (p *DeleteObjectstorageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteObjectstorageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteObjectstorageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteObjectstorageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteObjectstorageParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteObjectstorageParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteObjectstorageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteObjectstorageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteObjectstorageParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteObjectstorageParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteObjectstorageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteObjectstorageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListSimplemonitorParam is input parameters for the sacloud API
type ListSimplemonitorParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Tags              []string     `json:"tags"`
	Health            string       `json:"health"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`
}

// NewListSimplemonitorParam return new ListSimplemonitorParam
func NewListSimplemonitorParam() *ListSimplemonitorParam {
	return &ListSimplemonitorParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ListSimplemonitorParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = []string{""}
	}
	if isEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.Health) {
		p.Health = ""
	}
	if isEmpty(p.From) {
		p.From = 0
	}
	if isEmpty(p.Max) {
		p.Max = 0
	}
	if isEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *ListSimplemonitorParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SimpleMonitor"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SimpleMonitor"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SimpleMonitor"].Commands["list"].Params["health"].ValidateFunc
		errs := validator("--health", p.Health)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListSimplemonitorParam) GetResourceDef() *schema.Resource {
	return define.Resources["SimpleMonitor"]
}

func (p *ListSimplemonitorParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListSimplemonitorParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListSimplemonitorParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListSimplemonitorParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListSimplemonitorParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListSimplemonitorParam) SetName(v []string) {
	p.Name = v
}

func (p *ListSimplemonitorParam) GetName() []string {
	return p.Name
}
func (p *ListSimplemonitorParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListSimplemonitorParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListSimplemonitorParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListSimplemonitorParam) GetTags() []string {
	return p.Tags
}
func (p *ListSimplemonitorParam) SetHealth(v string) {
	p.Health = v
}

func (p *ListSimplemonitorParam) GetHealth() string {
	return p.Health
}
func (p *ListSimplemonitorParam) SetFrom(v int) {
	p.From = v
}

func (p *ListSimplemonitorParam) GetFrom() int {
	return p.From
}
func (p *ListSimplemonitorParam) SetMax(v int) {
	p.Max = v
}

func (p *ListSimplemonitorParam) GetMax() int {
	return p.Max
}
func (p *ListSimplemonitorParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListSimplemonitorParam) GetSort() []string {
	return p.Sort
}
func (p *ListSimplemonitorParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListSimplemonitorParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListSimplemonitorParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListSimplemonitorParam) GetParameters() string {
	return p.Parameters
}
func (p *ListSimplemonitorParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListSimplemonitorParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListSimplemonitorParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListSimplemonitorParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListSimplemonitorParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListSimplemonitorParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListSimplemonitorParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListSimplemonitorParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListSimplemonitorParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListSimplemonitorParam) GetColumn() []string {
	return p.Column
}
func (p *ListSimplemonitorParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListSimplemonitorParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListSimplemonitorParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListSimplemonitorParam) GetFormat() string {
	return p.Format
}
func (p *ListSimplemonitorParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListSimplemonitorParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListSimplemonitorParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListSimplemonitorParam) GetQuery() string {
	return p.Query
}
func (p *ListSimplemonitorParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListSimplemonitorParam) GetQueryFile() string {
	return p.QueryFile
}

// CreateSimplemonitorParam is input parameters for the sacloud API
type CreateSimplemonitorParam struct {
	Target            string     `json:"target"`
	Protocol          string     `json:"protocol"`
	Port              int        `json:"port"`
	DelayLoop         int        `json:"delay-loop"`
	Disabled          bool       `json:"disabled"`
	HostHeader        string     `json:"host-header"`
	Path              string     `json:"path"`
	ResponseCode      int        `json:"response-code"`
	Sni               bool       `json:"sni"`
	Username          string     `json:"username"`
	Password          string     `json:"password"`
	DnsQname          string     `json:"dns-qname"`
	DnsExcepted       string     `json:"dns-excepted"`
	RemainingDays     int        `json:"remaining-days"`
	NotifyEmail       bool       `json:"notify-email"`
	EmailType         string     `json:"email-type"`
	SlackWebhook      string     `json:"slack-webhook"`
	NotifyInterval    int        `json:"notify-interval"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
}

// NewCreateSimplemonitorParam return new CreateSimplemonitorParam
func NewCreateSimplemonitorParam() *CreateSimplemonitorParam {
	return &CreateSimplemonitorParam{

		Protocol:       "ping",
		DelayLoop:      1,
		RemainingDays:  30,
		NotifyEmail:    true,
		EmailType:      "text",
		NotifyInterval: 2,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *CreateSimplemonitorParam) FillValueToSkeleton() {
	if isEmpty(p.Target) {
		p.Target = ""
	}
	if isEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if isEmpty(p.Port) {
		p.Port = 0
	}
	if isEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if isEmpty(p.Disabled) {
		p.Disabled = false
	}
	if isEmpty(p.HostHeader) {
		p.HostHeader = ""
	}
	if isEmpty(p.Path) {
		p.Path = ""
	}
	if isEmpty(p.ResponseCode) {
		p.ResponseCode = 0
	}
	if isEmpty(p.Sni) {
		p.Sni = false
	}
	if isEmpty(p.Username) {
		p.Username = ""
	}
	if isEmpty(p.Password) {
		p.Password = ""
	}
	if isEmpty(p.DnsQname) {
		p.DnsQname = ""
	}
	if isEmpty(p.DnsExcepted) {
		p.DnsExcepted = ""
	}
	if isEmpty(p.RemainingDays) {
		p.RemainingDays = 0
	}
	if isEmpty(p.NotifyEmail) {
		p.NotifyEmail = false
	}
	if isEmpty(p.EmailType) {
		p.EmailType = ""
	}
	if isEmpty(p.SlackWebhook) {
		p.SlackWebhook = ""
	}
	if isEmpty(p.NotifyInterval) {
		p.NotifyInterval = 0
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *CreateSimplemonitorParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--target", p.Target)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SimpleMonitor"].Commands["create"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SimpleMonitor"].Commands["create"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SimpleMonitor"].Commands["create"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SimpleMonitor"].Commands["create"].Params["remaining-days"].ValidateFunc
		errs := validator("--remaining-days", p.RemainingDays)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SimpleMonitor"].Commands["create"].Params["email-type"].ValidateFunc
		errs := validator("--email-type", p.EmailType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SimpleMonitor"].Commands["create"].Params["notify-interval"].ValidateFunc
		errs := validator("--notify-interval", p.NotifyInterval)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SimpleMonitor"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SimpleMonitor"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SimpleMonitor"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreateSimplemonitorParam) GetResourceDef() *schema.Resource {
	return define.Resources["SimpleMonitor"]
}

func (p *CreateSimplemonitorParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreateSimplemonitorParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreateSimplemonitorParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreateSimplemonitorParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreateSimplemonitorParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreateSimplemonitorParam) SetTarget(v string) {
	p.Target = v
}

func (p *CreateSimplemonitorParam) GetTarget() string {
	return p.Target
}
func (p *CreateSimplemonitorParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *CreateSimplemonitorParam) GetProtocol() string {
	return p.Protocol
}
func (p *CreateSimplemonitorParam) SetPort(v int) {
	p.Port = v
}

func (p *CreateSimplemonitorParam) GetPort() int {
	return p.Port
}
func (p *CreateSimplemonitorParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *CreateSimplemonitorParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *CreateSimplemonitorParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *CreateSimplemonitorParam) GetDisabled() bool {
	return p.Disabled
}
func (p *CreateSimplemonitorParam) SetHostHeader(v string) {
	p.HostHeader = v
}

func (p *CreateSimplemonitorParam) GetHostHeader() string {
	return p.HostHeader
}
func (p *CreateSimplemonitorParam) SetPath(v string) {
	p.Path = v
}

func (p *CreateSimplemonitorParam) GetPath() string {
	return p.Path
}
func (p *CreateSimplemonitorParam) SetResponseCode(v int) {
	p.ResponseCode = v
}

func (p *CreateSimplemonitorParam) GetResponseCode() int {
	return p.ResponseCode
}
func (p *CreateSimplemonitorParam) SetSni(v bool) {
	p.Sni = v
}

func (p *CreateSimplemonitorParam) GetSni() bool {
	return p.Sni
}
func (p *CreateSimplemonitorParam) SetUsername(v string) {
	p.Username = v
}

func (p *CreateSimplemonitorParam) GetUsername() string {
	return p.Username
}
func (p *CreateSimplemonitorParam) SetPassword(v string) {
	p.Password = v
}

func (p *CreateSimplemonitorParam) GetPassword() string {
	return p.Password
}
func (p *CreateSimplemonitorParam) SetDnsQname(v string) {
	p.DnsQname = v
}

func (p *CreateSimplemonitorParam) GetDnsQname() string {
	return p.DnsQname
}
func (p *CreateSimplemonitorParam) SetDnsExcepted(v string) {
	p.DnsExcepted = v
}

func (p *CreateSimplemonitorParam) GetDnsExcepted() string {
	return p.DnsExcepted
}
func (p *CreateSimplemonitorParam) SetRemainingDays(v int) {
	p.RemainingDays = v
}

func (p *CreateSimplemonitorParam) GetRemainingDays() int {
	return p.RemainingDays
}
func (p *CreateSimplemonitorParam) SetNotifyEmail(v bool) {
	p.NotifyEmail = v
}

func (p *CreateSimplemonitorParam) GetNotifyEmail() bool {
	return p.NotifyEmail
}
func (p *CreateSimplemonitorParam) SetEmailType(v string) {
	p.EmailType = v
}

func (p *CreateSimplemonitorParam) GetEmailType() string {
	return p.EmailType
}
func (p *CreateSimplemonitorParam) SetSlackWebhook(v string) {
	p.SlackWebhook = v
}

func (p *CreateSimplemonitorParam) GetSlackWebhook() string {
	return p.SlackWebhook
}
func (p *CreateSimplemonitorParam) SetNotifyInterval(v int) {
	p.NotifyInterval = v
}

func (p *CreateSimplemonitorParam) GetNotifyInterval() int {
	return p.NotifyInterval
}
func (p *CreateSimplemonitorParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateSimplemonitorParam) GetDescription() string {
	return p.Description
}
func (p *CreateSimplemonitorParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateSimplemonitorParam) GetTags() []string {
	return p.Tags
}
func (p *CreateSimplemonitorParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateSimplemonitorParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateSimplemonitorParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateSimplemonitorParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateSimplemonitorParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateSimplemonitorParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateSimplemonitorParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateSimplemonitorParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateSimplemonitorParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateSimplemonitorParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateSimplemonitorParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateSimplemonitorParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateSimplemonitorParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateSimplemonitorParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateSimplemonitorParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateSimplemonitorParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateSimplemonitorParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateSimplemonitorParam) GetColumn() []string {
	return p.Column
}
func (p *CreateSimplemonitorParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateSimplemonitorParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateSimplemonitorParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateSimplemonitorParam) GetFormat() string {
	return p.Format
}
func (p *CreateSimplemonitorParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateSimplemonitorParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateSimplemonitorParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateSimplemonitorParam) GetQuery() string {
	return p.Query
}
func (p *CreateSimplemonitorParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateSimplemonitorParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadSimplemonitorParam is input parameters for the sacloud API
type ReadSimplemonitorParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewReadSimplemonitorParam return new ReadSimplemonitorParam
func NewReadSimplemonitorParam() *ReadSimplemonitorParam {
	return &ReadSimplemonitorParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ReadSimplemonitorParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ReadSimplemonitorParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadSimplemonitorParam) GetResourceDef() *schema.Resource {
	return define.Resources["SimpleMonitor"]
}

func (p *ReadSimplemonitorParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadSimplemonitorParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadSimplemonitorParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadSimplemonitorParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadSimplemonitorParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadSimplemonitorParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadSimplemonitorParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadSimplemonitorParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadSimplemonitorParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadSimplemonitorParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadSimplemonitorParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadSimplemonitorParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadSimplemonitorParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadSimplemonitorParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadSimplemonitorParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadSimplemonitorParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadSimplemonitorParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadSimplemonitorParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadSimplemonitorParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadSimplemonitorParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadSimplemonitorParam) GetColumn() []string {
	return p.Column
}
func (p *ReadSimplemonitorParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadSimplemonitorParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadSimplemonitorParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadSimplemonitorParam) GetFormat() string {
	return p.Format
}
func (p *ReadSimplemonitorParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadSimplemonitorParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadSimplemonitorParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadSimplemonitorParam) GetQuery() string {
	return p.Query
}
func (p *ReadSimplemonitorParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadSimplemonitorParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadSimplemonitorParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadSimplemonitorParam) GetId() sacloud.ID {
	return p.Id
}

// UpdateSimplemonitorParam is input parameters for the sacloud API
type UpdateSimplemonitorParam struct {
	Protocol          string     `json:"protocol"`
	Port              int        `json:"port"`
	DelayLoop         int        `json:"delay-loop"`
	Disabled          bool       `json:"disabled"`
	HostHeader        string     `json:"host-header"`
	Path              string     `json:"path"`
	ResponseCode      int        `json:"response-code"`
	Sni               bool       `json:"sni"`
	Username          string     `json:"username"`
	Password          string     `json:"password"`
	DnsQname          string     `json:"dns-qname"`
	DnsExcepted       string     `json:"dns-excepted"`
	RemainingDays     int        `json:"remaining-days"`
	NotifyEmail       bool       `json:"notify-email"`
	EmailType         string     `json:"email-type"`
	SlackWebhook      string     `json:"slack-webhook"`
	NotifyInterval    int        `json:"notify-interval"`
	Selector          []string   `json:"selector"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewUpdateSimplemonitorParam return new UpdateSimplemonitorParam
func NewUpdateSimplemonitorParam() *UpdateSimplemonitorParam {
	return &UpdateSimplemonitorParam{

		NotifyInterval: 2,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *UpdateSimplemonitorParam) FillValueToSkeleton() {
	if isEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if isEmpty(p.Port) {
		p.Port = 0
	}
	if isEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if isEmpty(p.Disabled) {
		p.Disabled = false
	}
	if isEmpty(p.HostHeader) {
		p.HostHeader = ""
	}
	if isEmpty(p.Path) {
		p.Path = ""
	}
	if isEmpty(p.ResponseCode) {
		p.ResponseCode = 0
	}
	if isEmpty(p.Sni) {
		p.Sni = false
	}
	if isEmpty(p.Username) {
		p.Username = ""
	}
	if isEmpty(p.Password) {
		p.Password = ""
	}
	if isEmpty(p.DnsQname) {
		p.DnsQname = ""
	}
	if isEmpty(p.DnsExcepted) {
		p.DnsExcepted = ""
	}
	if isEmpty(p.RemainingDays) {
		p.RemainingDays = 0
	}
	if isEmpty(p.NotifyEmail) {
		p.NotifyEmail = false
	}
	if isEmpty(p.EmailType) {
		p.EmailType = ""
	}
	if isEmpty(p.SlackWebhook) {
		p.SlackWebhook = ""
	}
	if isEmpty(p.NotifyInterval) {
		p.NotifyInterval = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UpdateSimplemonitorParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["SimpleMonitor"].Commands["update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SimpleMonitor"].Commands["update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SimpleMonitor"].Commands["update"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SimpleMonitor"].Commands["update"].Params["remaining-days"].ValidateFunc
		errs := validator("--remaining-days", p.RemainingDays)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SimpleMonitor"].Commands["update"].Params["email-type"].ValidateFunc
		errs := validator("--email-type", p.EmailType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SimpleMonitor"].Commands["update"].Params["notify-interval"].ValidateFunc
		errs := validator("--notify-interval", p.NotifyInterval)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SimpleMonitor"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SimpleMonitor"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SimpleMonitor"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdateSimplemonitorParam) GetResourceDef() *schema.Resource {
	return define.Resources["SimpleMonitor"]
}

func (p *UpdateSimplemonitorParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdateSimplemonitorParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdateSimplemonitorParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdateSimplemonitorParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdateSimplemonitorParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdateSimplemonitorParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *UpdateSimplemonitorParam) GetProtocol() string {
	return p.Protocol
}
func (p *UpdateSimplemonitorParam) SetPort(v int) {
	p.Port = v
}

func (p *UpdateSimplemonitorParam) GetPort() int {
	return p.Port
}
func (p *UpdateSimplemonitorParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *UpdateSimplemonitorParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *UpdateSimplemonitorParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *UpdateSimplemonitorParam) GetDisabled() bool {
	return p.Disabled
}
func (p *UpdateSimplemonitorParam) SetHostHeader(v string) {
	p.HostHeader = v
}

func (p *UpdateSimplemonitorParam) GetHostHeader() string {
	return p.HostHeader
}
func (p *UpdateSimplemonitorParam) SetPath(v string) {
	p.Path = v
}

func (p *UpdateSimplemonitorParam) GetPath() string {
	return p.Path
}
func (p *UpdateSimplemonitorParam) SetResponseCode(v int) {
	p.ResponseCode = v
}

func (p *UpdateSimplemonitorParam) GetResponseCode() int {
	return p.ResponseCode
}
func (p *UpdateSimplemonitorParam) SetSni(v bool) {
	p.Sni = v
}

func (p *UpdateSimplemonitorParam) GetSni() bool {
	return p.Sni
}
func (p *UpdateSimplemonitorParam) SetUsername(v string) {
	p.Username = v
}

func (p *UpdateSimplemonitorParam) GetUsername() string {
	return p.Username
}
func (p *UpdateSimplemonitorParam) SetPassword(v string) {
	p.Password = v
}

func (p *UpdateSimplemonitorParam) GetPassword() string {
	return p.Password
}
func (p *UpdateSimplemonitorParam) SetDnsQname(v string) {
	p.DnsQname = v
}

func (p *UpdateSimplemonitorParam) GetDnsQname() string {
	return p.DnsQname
}
func (p *UpdateSimplemonitorParam) SetDnsExcepted(v string) {
	p.DnsExcepted = v
}

func (p *UpdateSimplemonitorParam) GetDnsExcepted() string {
	return p.DnsExcepted
}
func (p *UpdateSimplemonitorParam) SetRemainingDays(v int) {
	p.RemainingDays = v
}

func (p *UpdateSimplemonitorParam) GetRemainingDays() int {
	return p.RemainingDays
}
func (p *UpdateSimplemonitorParam) SetNotifyEmail(v bool) {
	p.NotifyEmail = v
}

func (p *UpdateSimplemonitorParam) GetNotifyEmail() bool {
	return p.NotifyEmail
}
func (p *UpdateSimplemonitorParam) SetEmailType(v string) {
	p.EmailType = v
}

func (p *UpdateSimplemonitorParam) GetEmailType() string {
	return p.EmailType
}
func (p *UpdateSimplemonitorParam) SetSlackWebhook(v string) {
	p.SlackWebhook = v
}

func (p *UpdateSimplemonitorParam) GetSlackWebhook() string {
	return p.SlackWebhook
}
func (p *UpdateSimplemonitorParam) SetNotifyInterval(v int) {
	p.NotifyInterval = v
}

func (p *UpdateSimplemonitorParam) GetNotifyInterval() int {
	return p.NotifyInterval
}
func (p *UpdateSimplemonitorParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateSimplemonitorParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateSimplemonitorParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateSimplemonitorParam) GetDescription() string {
	return p.Description
}
func (p *UpdateSimplemonitorParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateSimplemonitorParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateSimplemonitorParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateSimplemonitorParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateSimplemonitorParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateSimplemonitorParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateSimplemonitorParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateSimplemonitorParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateSimplemonitorParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateSimplemonitorParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateSimplemonitorParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateSimplemonitorParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateSimplemonitorParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateSimplemonitorParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateSimplemonitorParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateSimplemonitorParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateSimplemonitorParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateSimplemonitorParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateSimplemonitorParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateSimplemonitorParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateSimplemonitorParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateSimplemonitorParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateSimplemonitorParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateSimplemonitorParam) GetFormat() string {
	return p.Format
}
func (p *UpdateSimplemonitorParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateSimplemonitorParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateSimplemonitorParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateSimplemonitorParam) GetQuery() string {
	return p.Query
}
func (p *UpdateSimplemonitorParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateSimplemonitorParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateSimplemonitorParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateSimplemonitorParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteSimplemonitorParam is input parameters for the sacloud API
type DeleteSimplemonitorParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewDeleteSimplemonitorParam return new DeleteSimplemonitorParam
func NewDeleteSimplemonitorParam() *DeleteSimplemonitorParam {
	return &DeleteSimplemonitorParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DeleteSimplemonitorParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DeleteSimplemonitorParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteSimplemonitorParam) GetResourceDef() *schema.Resource {
	return define.Resources["SimpleMonitor"]
}

func (p *DeleteSimplemonitorParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteSimplemonitorParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteSimplemonitorParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteSimplemonitorParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteSimplemonitorParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteSimplemonitorParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteSimplemonitorParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteSimplemonitorParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteSimplemonitorParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteSimplemonitorParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteSimplemonitorParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteSimplemonitorParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteSimplemonitorParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteSimplemonitorParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteSimplemonitorParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteSimplemonitorParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteSimplemonitorParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteSimplemonitorParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteSimplemonitorParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteSimplemonitorParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteSimplemonitorParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteSimplemonitorParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteSimplemonitorParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteSimplemonitorParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteSimplemonitorParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteSimplemonitorParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteSimplemonitorParam) GetFormat() string {
	return p.Format
}
func (p *DeleteSimplemonitorParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteSimplemonitorParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteSimplemonitorParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteSimplemonitorParam) GetQuery() string {
	return p.Query
}
func (p *DeleteSimplemonitorParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteSimplemonitorParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteSimplemonitorParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteSimplemonitorParam) GetId() sacloud.ID {
	return p.Id
}

// HealthSimplemonitorParam is input parameters for the sacloud API
type HealthSimplemonitorParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewHealthSimplemonitorParam return new HealthSimplemonitorParam
func NewHealthSimplemonitorParam() *HealthSimplemonitorParam {
	return &HealthSimplemonitorParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *HealthSimplemonitorParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *HealthSimplemonitorParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *HealthSimplemonitorParam) GetResourceDef() *schema.Resource {
	return define.Resources["SimpleMonitor"]
}

func (p *HealthSimplemonitorParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["health"]
}

func (p *HealthSimplemonitorParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *HealthSimplemonitorParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *HealthSimplemonitorParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *HealthSimplemonitorParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *HealthSimplemonitorParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *HealthSimplemonitorParam) GetSelector() []string {
	return p.Selector
}
func (p *HealthSimplemonitorParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *HealthSimplemonitorParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *HealthSimplemonitorParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *HealthSimplemonitorParam) GetParameters() string {
	return p.Parameters
}
func (p *HealthSimplemonitorParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *HealthSimplemonitorParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *HealthSimplemonitorParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *HealthSimplemonitorParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *HealthSimplemonitorParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *HealthSimplemonitorParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *HealthSimplemonitorParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *HealthSimplemonitorParam) GetOutputType() string {
	return p.OutputType
}
func (p *HealthSimplemonitorParam) SetColumn(v []string) {
	p.Column = v
}

func (p *HealthSimplemonitorParam) GetColumn() []string {
	return p.Column
}
func (p *HealthSimplemonitorParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *HealthSimplemonitorParam) GetQuiet() bool {
	return p.Quiet
}
func (p *HealthSimplemonitorParam) SetFormat(v string) {
	p.Format = v
}

func (p *HealthSimplemonitorParam) GetFormat() string {
	return p.Format
}
func (p *HealthSimplemonitorParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *HealthSimplemonitorParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *HealthSimplemonitorParam) SetQuery(v string) {
	p.Query = v
}

func (p *HealthSimplemonitorParam) GetQuery() string {
	return p.Query
}
func (p *HealthSimplemonitorParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *HealthSimplemonitorParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *HealthSimplemonitorParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *HealthSimplemonitorParam) GetId() sacloud.ID {
	return p.Id
}

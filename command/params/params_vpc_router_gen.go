// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListVPCRouterParam is input parameters for the sacloud API
type ListVPCRouterParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Tags              []string     `json:"tags"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`
}

// NewListVPCRouterParam return new ListVPCRouterParam
func NewListVPCRouterParam() *ListVPCRouterParam {
	return &ListVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ListVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = []string{""}
	}
	if isEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.From) {
		p.From = 0
	}
	if isEmpty(p.Max) {
		p.Max = 0
	}
	if isEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *ListVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ListVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListVPCRouterParam) SetName(v []string) {
	p.Name = v
}

func (p *ListVPCRouterParam) GetName() []string {
	return p.Name
}
func (p *ListVPCRouterParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListVPCRouterParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListVPCRouterParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListVPCRouterParam) GetTags() []string {
	return p.Tags
}
func (p *ListVPCRouterParam) SetFrom(v int) {
	p.From = v
}

func (p *ListVPCRouterParam) GetFrom() int {
	return p.From
}
func (p *ListVPCRouterParam) SetMax(v int) {
	p.Max = v
}

func (p *ListVPCRouterParam) GetMax() int {
	return p.Max
}
func (p *ListVPCRouterParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListVPCRouterParam) GetSort() []string {
	return p.Sort
}
func (p *ListVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *ListVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *ListVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *ListVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListVPCRouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListVPCRouterParam) GetQuery() string {
	return p.Query
}
func (p *ListVPCRouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListVPCRouterParam) GetQueryFile() string {
	return p.QueryFile
}

// CreateVPCRouterParam is input parameters for the sacloud API
type CreateVPCRouterParam struct {
	Plan                      string     `json:"plan"`
	SwitchId                  sacloud.ID `json:"switch-id"`
	Vrid                      int        `json:"vrid"`
	Vip                       string     `json:"vip"`
	Ipaddress1                string     `json:"ipaddress-1"`
	Ipaddress2                string     `json:"ipaddress-2"`
	DisableInternetConnection bool       `json:"disable-internet-connection"`
	BootAfterCreate           bool       `json:"boot-after-create"`
	Name                      string     `json:"name"`
	Description               string     `json:"description"`
	Tags                      []string   `json:"tags"`
	IconId                    sacloud.ID `json:"icon-id"`
	Assumeyes                 bool       `json:"assumeyes"`
	ParamTemplate             string     `json:"param-template"`
	Parameters                string     `json:"parameters"`
	ParamTemplateFile         string     `json:"param-template-file"`
	ParameterFile             string     `json:"parameter-file"`
	GenerateSkeleton          bool       `json:"generate-skeleton"`
	OutputType                string     `json:"output-type"`
	Column                    []string   `json:"column"`
	Quiet                     bool       `json:"quiet"`
	Format                    string     `json:"format"`
	FormatFile                string     `json:"format-file"`
	Query                     string     `json:"query"`
	QueryFile                 string     `json:"query-file"`
}

// NewCreateVPCRouterParam return new CreateVPCRouterParam
func NewCreateVPCRouterParam() *CreateVPCRouterParam {
	return &CreateVPCRouterParam{

		Plan: "standard",
		Vrid: 1,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *CreateVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Plan) {
		p.Plan = ""
	}
	if isEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if isEmpty(p.Vrid) {
		p.Vrid = 0
	}
	if isEmpty(p.Vip) {
		p.Vip = ""
	}
	if isEmpty(p.Ipaddress1) {
		p.Ipaddress1 = ""
	}
	if isEmpty(p.Ipaddress2) {
		p.Ipaddress2 = ""
	}
	if isEmpty(p.DisableInternetConnection) {
		p.DisableInternetConnection = false
	}
	if isEmpty(p.BootAfterCreate) {
		p.BootAfterCreate = false
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *CreateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--vrid", p.Vrid)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["ipaddress2"].ValidateFunc
		errs := validator("--ipaddress-2", p.Ipaddress2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *CreateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreateVPCRouterParam) SetPlan(v string) {
	p.Plan = v
}

func (p *CreateVPCRouterParam) GetPlan() string {
	return p.Plan
}
func (p *CreateVPCRouterParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *CreateVPCRouterParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *CreateVPCRouterParam) SetVrid(v int) {
	p.Vrid = v
}

func (p *CreateVPCRouterParam) GetVrid() int {
	return p.Vrid
}
func (p *CreateVPCRouterParam) SetVip(v string) {
	p.Vip = v
}

func (p *CreateVPCRouterParam) GetVip() string {
	return p.Vip
}
func (p *CreateVPCRouterParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *CreateVPCRouterParam) GetIpaddress1() string {
	return p.Ipaddress1
}
func (p *CreateVPCRouterParam) SetIpaddress2(v string) {
	p.Ipaddress2 = v
}

func (p *CreateVPCRouterParam) GetIpaddress2() string {
	return p.Ipaddress2
}
func (p *CreateVPCRouterParam) SetDisableInternetConnection(v bool) {
	p.DisableInternetConnection = v
}

func (p *CreateVPCRouterParam) GetDisableInternetConnection() bool {
	return p.DisableInternetConnection
}
func (p *CreateVPCRouterParam) SetBootAfterCreate(v bool) {
	p.BootAfterCreate = v
}

func (p *CreateVPCRouterParam) GetBootAfterCreate() bool {
	return p.BootAfterCreate
}
func (p *CreateVPCRouterParam) SetName(v string) {
	p.Name = v
}

func (p *CreateVPCRouterParam) GetName() string {
	return p.Name
}
func (p *CreateVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateVPCRouterParam) GetDescription() string {
	return p.Description
}
func (p *CreateVPCRouterParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateVPCRouterParam) GetTags() []string {
	return p.Tags
}
func (p *CreateVPCRouterParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateVPCRouterParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *CreateVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *CreateVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateVPCRouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateVPCRouterParam) GetQuery() string {
	return p.Query
}
func (p *CreateVPCRouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateVPCRouterParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadVPCRouterParam is input parameters for the sacloud API
type ReadVPCRouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewReadVPCRouterParam return new ReadVPCRouterParam
func NewReadVPCRouterParam() *ReadVPCRouterParam {
	return &ReadVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ReadVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ReadVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ReadVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *ReadVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *ReadVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadVPCRouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadVPCRouterParam) GetQuery() string {
	return p.Query
}
func (p *ReadVPCRouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadVPCRouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// UpdateVPCRouterParam is input parameters for the sacloud API
type UpdateVPCRouterParam struct {
	SyslogHost         string     `json:"syslog-host"`
	InternetConnection bool       `json:"internet-connection"`
	Selector           []string   `json:"selector"`
	Name               string     `json:"name"`
	Description        string     `json:"description"`
	Tags               []string   `json:"tags"`
	IconId             sacloud.ID `json:"icon-id"`
	Assumeyes          bool       `json:"assumeyes"`
	ParamTemplate      string     `json:"param-template"`
	Parameters         string     `json:"parameters"`
	ParamTemplateFile  string     `json:"param-template-file"`
	ParameterFile      string     `json:"parameter-file"`
	GenerateSkeleton   bool       `json:"generate-skeleton"`
	OutputType         string     `json:"output-type"`
	Column             []string   `json:"column"`
	Quiet              bool       `json:"quiet"`
	Format             string     `json:"format"`
	FormatFile         string     `json:"format-file"`
	Query              string     `json:"query"`
	QueryFile          string     `json:"query-file"`
	Id                 sacloud.ID `json:"id"`
}

// NewUpdateVPCRouterParam return new UpdateVPCRouterParam
func NewUpdateVPCRouterParam() *UpdateVPCRouterParam {
	return &UpdateVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UpdateVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.SyslogHost) {
		p.SyslogHost = ""
	}
	if isEmpty(p.InternetConnection) {
		p.InternetConnection = false
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["syslog-host"].ValidateFunc
		errs := validator("--syslog-host", p.SyslogHost)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdateVPCRouterParam) SetSyslogHost(v string) {
	p.SyslogHost = v
}

func (p *UpdateVPCRouterParam) GetSyslogHost() string {
	return p.SyslogHost
}
func (p *UpdateVPCRouterParam) SetInternetConnection(v bool) {
	p.InternetConnection = v
}

func (p *UpdateVPCRouterParam) GetInternetConnection() bool {
	return p.InternetConnection
}
func (p *UpdateVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateVPCRouterParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateVPCRouterParam) GetName() string {
	return p.Name
}
func (p *UpdateVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateVPCRouterParam) GetDescription() string {
	return p.Description
}
func (p *UpdateVPCRouterParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateVPCRouterParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateVPCRouterParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateVPCRouterParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *UpdateVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateVPCRouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateVPCRouterParam) GetQuery() string {
	return p.Query
}
func (p *UpdateVPCRouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateVPCRouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteVPCRouterParam is input parameters for the sacloud API
type DeleteVPCRouterParam struct {
	Force             bool       `json:"force"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewDeleteVPCRouterParam return new DeleteVPCRouterParam
func NewDeleteVPCRouterParam() *DeleteVPCRouterParam {
	return &DeleteVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DeleteVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Force) {
		p.Force = false
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DeleteVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DeleteVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteVPCRouterParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteVPCRouterParam) GetForce() bool {
	return p.Force
}
func (p *DeleteVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *DeleteVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteVPCRouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteVPCRouterParam) GetQuery() string {
	return p.Query
}
func (p *DeleteVPCRouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteVPCRouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// BootVPCRouterParam is input parameters for the sacloud API
type BootVPCRouterParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewBootVPCRouterParam return new BootVPCRouterParam
func NewBootVPCRouterParam() *BootVPCRouterParam {
	return &BootVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *BootVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *BootVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *BootVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *BootVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["boot"]
}

func (p *BootVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *BootVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *BootVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *BootVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *BootVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *BootVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *BootVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BootVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BootVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BootVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BootVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *BootVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *BootVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BootVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BootVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *BootVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *BootVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BootVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BootVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *BootVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// ShutdownVPCRouterParam is input parameters for the sacloud API
type ShutdownVPCRouterParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewShutdownVPCRouterParam return new ShutdownVPCRouterParam
func NewShutdownVPCRouterParam() *ShutdownVPCRouterParam {
	return &ShutdownVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ShutdownVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ShutdownVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ShutdownVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ShutdownVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["shutdown"]
}

func (p *ShutdownVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ShutdownVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ShutdownVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ShutdownVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ShutdownVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ShutdownVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *ShutdownVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ShutdownVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ShutdownVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ShutdownVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ShutdownVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ShutdownVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *ShutdownVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ShutdownVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ShutdownVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ShutdownVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ShutdownVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ShutdownVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ShutdownVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ShutdownVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// ShutdownForceVPCRouterParam is input parameters for the sacloud API
type ShutdownForceVPCRouterParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewShutdownForceVPCRouterParam return new ShutdownForceVPCRouterParam
func NewShutdownForceVPCRouterParam() *ShutdownForceVPCRouterParam {
	return &ShutdownForceVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ShutdownForceVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ShutdownForceVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ShutdownForceVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ShutdownForceVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["shutdown-force"]
}

func (p *ShutdownForceVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ShutdownForceVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ShutdownForceVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ShutdownForceVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ShutdownForceVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ShutdownForceVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *ShutdownForceVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ShutdownForceVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ShutdownForceVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ShutdownForceVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ShutdownForceVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ShutdownForceVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *ShutdownForceVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ShutdownForceVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ShutdownForceVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ShutdownForceVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ShutdownForceVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ShutdownForceVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ShutdownForceVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ShutdownForceVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// ResetVPCRouterParam is input parameters for the sacloud API
type ResetVPCRouterParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewResetVPCRouterParam return new ResetVPCRouterParam
func NewResetVPCRouterParam() *ResetVPCRouterParam {
	return &ResetVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ResetVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ResetVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ResetVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ResetVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["reset"]
}

func (p *ResetVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ResetVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ResetVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ResetVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ResetVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ResetVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *ResetVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ResetVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ResetVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ResetVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ResetVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ResetVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *ResetVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ResetVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ResetVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ResetVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ResetVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ResetVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ResetVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ResetVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// WaitForBootVPCRouterParam is input parameters for the sacloud API
type WaitForBootVPCRouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewWaitForBootVPCRouterParam return new WaitForBootVPCRouterParam
func NewWaitForBootVPCRouterParam() *WaitForBootVPCRouterParam {
	return &WaitForBootVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *WaitForBootVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *WaitForBootVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *WaitForBootVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *WaitForBootVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["wait-for-boot"]
}

func (p *WaitForBootVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *WaitForBootVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *WaitForBootVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *WaitForBootVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *WaitForBootVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *WaitForBootVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *WaitForBootVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForBootVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForBootVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *WaitForBootVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *WaitForBootVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForBootVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForBootVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *WaitForBootVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *WaitForBootVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForBootVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForBootVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *WaitForBootVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// WaitForDownVPCRouterParam is input parameters for the sacloud API
type WaitForDownVPCRouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewWaitForDownVPCRouterParam return new WaitForDownVPCRouterParam
func NewWaitForDownVPCRouterParam() *WaitForDownVPCRouterParam {
	return &WaitForDownVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *WaitForDownVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *WaitForDownVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *WaitForDownVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *WaitForDownVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["wait-for-down"]
}

func (p *WaitForDownVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *WaitForDownVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *WaitForDownVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *WaitForDownVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *WaitForDownVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *WaitForDownVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *WaitForDownVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForDownVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForDownVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *WaitForDownVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *WaitForDownVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForDownVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForDownVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *WaitForDownVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *WaitForDownVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForDownVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForDownVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *WaitForDownVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// EnableInternetConnectionVPCRouterParam is input parameters for the sacloud API
type EnableInternetConnectionVPCRouterParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewEnableInternetConnectionVPCRouterParam return new EnableInternetConnectionVPCRouterParam
func NewEnableInternetConnectionVPCRouterParam() *EnableInternetConnectionVPCRouterParam {
	return &EnableInternetConnectionVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *EnableInternetConnectionVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *EnableInternetConnectionVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *EnableInternetConnectionVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *EnableInternetConnectionVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["enable-internet-connection"]
}

func (p *EnableInternetConnectionVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *EnableInternetConnectionVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *EnableInternetConnectionVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *EnableInternetConnectionVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *EnableInternetConnectionVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *EnableInternetConnectionVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *EnableInternetConnectionVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *EnableInternetConnectionVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *EnableInternetConnectionVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *EnableInternetConnectionVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *EnableInternetConnectionVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *EnableInternetConnectionVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *EnableInternetConnectionVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *EnableInternetConnectionVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *EnableInternetConnectionVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *EnableInternetConnectionVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *EnableInternetConnectionVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *EnableInternetConnectionVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *EnableInternetConnectionVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *EnableInternetConnectionVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// DisableInternetConnectionVPCRouterParam is input parameters for the sacloud API
type DisableInternetConnectionVPCRouterParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewDisableInternetConnectionVPCRouterParam return new DisableInternetConnectionVPCRouterParam
func NewDisableInternetConnectionVPCRouterParam() *DisableInternetConnectionVPCRouterParam {
	return &DisableInternetConnectionVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DisableInternetConnectionVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DisableInternetConnectionVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DisableInternetConnectionVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DisableInternetConnectionVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["disable-internet-connection"]
}

func (p *DisableInternetConnectionVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DisableInternetConnectionVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DisableInternetConnectionVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DisableInternetConnectionVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DisableInternetConnectionVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DisableInternetConnectionVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *DisableInternetConnectionVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DisableInternetConnectionVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DisableInternetConnectionVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DisableInternetConnectionVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DisableInternetConnectionVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DisableInternetConnectionVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *DisableInternetConnectionVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DisableInternetConnectionVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DisableInternetConnectionVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DisableInternetConnectionVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DisableInternetConnectionVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DisableInternetConnectionVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DisableInternetConnectionVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DisableInternetConnectionVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// InterfaceInfoVPCRouterParam is input parameters for the sacloud API
type InterfaceInfoVPCRouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewInterfaceInfoVPCRouterParam return new InterfaceInfoVPCRouterParam
func NewInterfaceInfoVPCRouterParam() *InterfaceInfoVPCRouterParam {
	return &InterfaceInfoVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *InterfaceInfoVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *InterfaceInfoVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *InterfaceInfoVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *InterfaceInfoVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["interface-info"]
}

func (p *InterfaceInfoVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *InterfaceInfoVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *InterfaceInfoVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *InterfaceInfoVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *InterfaceInfoVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *InterfaceInfoVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *InterfaceInfoVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceInfoVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceInfoVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *InterfaceInfoVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *InterfaceInfoVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceInfoVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceInfoVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *InterfaceInfoVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *InterfaceInfoVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceInfoVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceInfoVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *InterfaceInfoVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *InterfaceInfoVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *InterfaceInfoVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *InterfaceInfoVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *InterfaceInfoVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *InterfaceInfoVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *InterfaceInfoVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *InterfaceInfoVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *InterfaceInfoVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *InterfaceInfoVPCRouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *InterfaceInfoVPCRouterParam) GetQuery() string {
	return p.Query
}
func (p *InterfaceInfoVPCRouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *InterfaceInfoVPCRouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *InterfaceInfoVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *InterfaceInfoVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// InterfaceConnectVPCRouterParam is input parameters for the sacloud API
type InterfaceConnectVPCRouterParam struct {
	Interface         string     `json:"interface"`
	Ipaddress         string     `json:"ipaddress"`
	WithReboot        bool       `json:"with-reboot"`
	Ipaddress1        string     `json:"ipaddress-1"`
	SwitchId          sacloud.ID `json:"switch-id"`
	Ipaddress2        string     `json:"ipaddress-2"`
	NwMasklen         int        `json:"nw-masklen"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewInterfaceConnectVPCRouterParam return new InterfaceConnectVPCRouterParam
func NewInterfaceConnectVPCRouterParam() *InterfaceConnectVPCRouterParam {
	return &InterfaceConnectVPCRouterParam{

		NwMasklen: 24,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *InterfaceConnectVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Interface) {
		p.Interface = ""
	}
	if isEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if isEmpty(p.WithReboot) {
		p.WithReboot = false
	}
	if isEmpty(p.Ipaddress1) {
		p.Ipaddress1 = ""
	}
	if isEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if isEmpty(p.Ipaddress2) {
		p.Ipaddress2 = ""
	}
	if isEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *InterfaceConnectVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["ipaddress2"].ValidateFunc
		errs := validator("--ipaddress-2", p.Ipaddress2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *InterfaceConnectVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *InterfaceConnectVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["interface-connect"]
}

func (p *InterfaceConnectVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *InterfaceConnectVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *InterfaceConnectVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *InterfaceConnectVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *InterfaceConnectVPCRouterParam) SetInterface(v string) {
	p.Interface = v
}

func (p *InterfaceConnectVPCRouterParam) GetInterface() string {
	return p.Interface
}
func (p *InterfaceConnectVPCRouterParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *InterfaceConnectVPCRouterParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *InterfaceConnectVPCRouterParam) SetWithReboot(v bool) {
	p.WithReboot = v
}

func (p *InterfaceConnectVPCRouterParam) GetWithReboot() bool {
	return p.WithReboot
}
func (p *InterfaceConnectVPCRouterParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *InterfaceConnectVPCRouterParam) GetIpaddress1() string {
	return p.Ipaddress1
}
func (p *InterfaceConnectVPCRouterParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *InterfaceConnectVPCRouterParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *InterfaceConnectVPCRouterParam) SetIpaddress2(v string) {
	p.Ipaddress2 = v
}

func (p *InterfaceConnectVPCRouterParam) GetIpaddress2() string {
	return p.Ipaddress2
}
func (p *InterfaceConnectVPCRouterParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *InterfaceConnectVPCRouterParam) GetNwMasklen() int {
	return p.NwMasklen
}
func (p *InterfaceConnectVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *InterfaceConnectVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *InterfaceConnectVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceConnectVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceConnectVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceConnectVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceConnectVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *InterfaceConnectVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *InterfaceConnectVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceConnectVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceConnectVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *InterfaceConnectVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *InterfaceConnectVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceConnectVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceConnectVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *InterfaceConnectVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// InterfaceUpdateVPCRouterParam is input parameters for the sacloud API
type InterfaceUpdateVPCRouterParam struct {
	Interface         string     `json:"interface"`
	Ipaddress         string     `json:"ipaddress"`
	WithReboot        bool       `json:"with-reboot"`
	Ipaddress1        string     `json:"ipaddress-1"`
	SwitchId          sacloud.ID `json:"switch-id"`
	Ipaddress2        string     `json:"ipaddress-2"`
	Alias             []string   `json:"alias"`
	NwMasklen         int        `json:"nw-masklen"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewInterfaceUpdateVPCRouterParam return new InterfaceUpdateVPCRouterParam
func NewInterfaceUpdateVPCRouterParam() *InterfaceUpdateVPCRouterParam {
	return &InterfaceUpdateVPCRouterParam{

		NwMasklen: 24,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *InterfaceUpdateVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Interface) {
		p.Interface = ""
	}
	if isEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if isEmpty(p.WithReboot) {
		p.WithReboot = false
	}
	if isEmpty(p.Ipaddress1) {
		p.Ipaddress1 = ""
	}
	if isEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if isEmpty(p.Ipaddress2) {
		p.Ipaddress2 = ""
	}
	if isEmpty(p.Alias) {
		p.Alias = []string{""}
	}
	if isEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *InterfaceUpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["ipaddress2"].ValidateFunc
		errs := validator("--ipaddress-2", p.Ipaddress2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["alias"].ValidateFunc
		errs := validator("--alias", p.Alias)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *InterfaceUpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *InterfaceUpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["interface-update"]
}

func (p *InterfaceUpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *InterfaceUpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *InterfaceUpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *InterfaceUpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *InterfaceUpdateVPCRouterParam) SetInterface(v string) {
	p.Interface = v
}

func (p *InterfaceUpdateVPCRouterParam) GetInterface() string {
	return p.Interface
}
func (p *InterfaceUpdateVPCRouterParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *InterfaceUpdateVPCRouterParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *InterfaceUpdateVPCRouterParam) SetWithReboot(v bool) {
	p.WithReboot = v
}

func (p *InterfaceUpdateVPCRouterParam) GetWithReboot() bool {
	return p.WithReboot
}
func (p *InterfaceUpdateVPCRouterParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *InterfaceUpdateVPCRouterParam) GetIpaddress1() string {
	return p.Ipaddress1
}
func (p *InterfaceUpdateVPCRouterParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *InterfaceUpdateVPCRouterParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *InterfaceUpdateVPCRouterParam) SetIpaddress2(v string) {
	p.Ipaddress2 = v
}

func (p *InterfaceUpdateVPCRouterParam) GetIpaddress2() string {
	return p.Ipaddress2
}
func (p *InterfaceUpdateVPCRouterParam) SetAlias(v []string) {
	p.Alias = v
}

func (p *InterfaceUpdateVPCRouterParam) GetAlias() []string {
	return p.Alias
}
func (p *InterfaceUpdateVPCRouterParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *InterfaceUpdateVPCRouterParam) GetNwMasklen() int {
	return p.NwMasklen
}
func (p *InterfaceUpdateVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *InterfaceUpdateVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *InterfaceUpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceUpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceUpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceUpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceUpdateVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *InterfaceUpdateVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *InterfaceUpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceUpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceUpdateVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *InterfaceUpdateVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *InterfaceUpdateVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceUpdateVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceUpdateVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *InterfaceUpdateVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// InterfaceDisconnectVPCRouterParam is input parameters for the sacloud API
type InterfaceDisconnectVPCRouterParam struct {
	Interface         string     `json:"interface"`
	WithReboot        bool       `json:"with-reboot"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewInterfaceDisconnectVPCRouterParam return new InterfaceDisconnectVPCRouterParam
func NewInterfaceDisconnectVPCRouterParam() *InterfaceDisconnectVPCRouterParam {
	return &InterfaceDisconnectVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *InterfaceDisconnectVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Interface) {
		p.Interface = ""
	}
	if isEmpty(p.WithReboot) {
		p.WithReboot = false
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *InterfaceDisconnectVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-disconnect"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *InterfaceDisconnectVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *InterfaceDisconnectVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["interface-disconnect"]
}

func (p *InterfaceDisconnectVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *InterfaceDisconnectVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *InterfaceDisconnectVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *InterfaceDisconnectVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *InterfaceDisconnectVPCRouterParam) SetInterface(v string) {
	p.Interface = v
}

func (p *InterfaceDisconnectVPCRouterParam) GetInterface() string {
	return p.Interface
}
func (p *InterfaceDisconnectVPCRouterParam) SetWithReboot(v bool) {
	p.WithReboot = v
}

func (p *InterfaceDisconnectVPCRouterParam) GetWithReboot() bool {
	return p.WithReboot
}
func (p *InterfaceDisconnectVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *InterfaceDisconnectVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *InterfaceDisconnectVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceDisconnectVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceDisconnectVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceDisconnectVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceDisconnectVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *InterfaceDisconnectVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *InterfaceDisconnectVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceDisconnectVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceDisconnectVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *InterfaceDisconnectVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *InterfaceDisconnectVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceDisconnectVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceDisconnectVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *InterfaceDisconnectVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// StaticNatInfoVPCRouterParam is input parameters for the sacloud API
type StaticNatInfoVPCRouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewStaticNatInfoVPCRouterParam return new StaticNatInfoVPCRouterParam
func NewStaticNatInfoVPCRouterParam() *StaticNatInfoVPCRouterParam {
	return &StaticNatInfoVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *StaticNatInfoVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *StaticNatInfoVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticNatInfoVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticNatInfoVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-nat-info"]
}

func (p *StaticNatInfoVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticNatInfoVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticNatInfoVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticNatInfoVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticNatInfoVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticNatInfoVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticNatInfoVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticNatInfoVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticNatInfoVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticNatInfoVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticNatInfoVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticNatInfoVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticNatInfoVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticNatInfoVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticNatInfoVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticNatInfoVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticNatInfoVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *StaticNatInfoVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *StaticNatInfoVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *StaticNatInfoVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *StaticNatInfoVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *StaticNatInfoVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *StaticNatInfoVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *StaticNatInfoVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *StaticNatInfoVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *StaticNatInfoVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *StaticNatInfoVPCRouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *StaticNatInfoVPCRouterParam) GetQuery() string {
	return p.Query
}
func (p *StaticNatInfoVPCRouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *StaticNatInfoVPCRouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *StaticNatInfoVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticNatInfoVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// StaticNatAddVPCRouterParam is input parameters for the sacloud API
type StaticNatAddVPCRouterParam struct {
	Global            string     `json:"global"`
	Private           string     `json:"private"`
	Description       string     `json:"description"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewStaticNatAddVPCRouterParam return new StaticNatAddVPCRouterParam
func NewStaticNatAddVPCRouterParam() *StaticNatAddVPCRouterParam {
	return &StaticNatAddVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *StaticNatAddVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Global) {
		p.Global = ""
	}
	if isEmpty(p.Private) {
		p.Private = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *StaticNatAddVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--global", p.Global)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-add"].Params["global"].ValidateFunc
		errs := validator("--global", p.Global)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--private", p.Private)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-add"].Params["private"].ValidateFunc
		errs := validator("--private", p.Private)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-add"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticNatAddVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticNatAddVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-nat-add"]
}

func (p *StaticNatAddVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticNatAddVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticNatAddVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticNatAddVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticNatAddVPCRouterParam) SetGlobal(v string) {
	p.Global = v
}

func (p *StaticNatAddVPCRouterParam) GetGlobal() string {
	return p.Global
}
func (p *StaticNatAddVPCRouterParam) SetPrivate(v string) {
	p.Private = v
}

func (p *StaticNatAddVPCRouterParam) GetPrivate() string {
	return p.Private
}
func (p *StaticNatAddVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *StaticNatAddVPCRouterParam) GetDescription() string {
	return p.Description
}
func (p *StaticNatAddVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticNatAddVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticNatAddVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticNatAddVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticNatAddVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticNatAddVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticNatAddVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticNatAddVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticNatAddVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticNatAddVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticNatAddVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticNatAddVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticNatAddVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticNatAddVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticNatAddVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticNatAddVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// StaticNatUpdateVPCRouterParam is input parameters for the sacloud API
type StaticNatUpdateVPCRouterParam struct {
	Index             int        `json:"index"`
	Global            string     `json:"global"`
	Private           string     `json:"private"`
	Description       string     `json:"description"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewStaticNatUpdateVPCRouterParam return new StaticNatUpdateVPCRouterParam
func NewStaticNatUpdateVPCRouterParam() *StaticNatUpdateVPCRouterParam {
	return &StaticNatUpdateVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *StaticNatUpdateVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Global) {
		p.Global = ""
	}
	if isEmpty(p.Private) {
		p.Private = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *StaticNatUpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-update"].Params["global"].ValidateFunc
		errs := validator("--global", p.Global)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-update"].Params["private"].ValidateFunc
		errs := validator("--private", p.Private)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticNatUpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticNatUpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-nat-update"]
}

func (p *StaticNatUpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticNatUpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticNatUpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticNatUpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticNatUpdateVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticNatUpdateVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *StaticNatUpdateVPCRouterParam) SetGlobal(v string) {
	p.Global = v
}

func (p *StaticNatUpdateVPCRouterParam) GetGlobal() string {
	return p.Global
}
func (p *StaticNatUpdateVPCRouterParam) SetPrivate(v string) {
	p.Private = v
}

func (p *StaticNatUpdateVPCRouterParam) GetPrivate() string {
	return p.Private
}
func (p *StaticNatUpdateVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *StaticNatUpdateVPCRouterParam) GetDescription() string {
	return p.Description
}
func (p *StaticNatUpdateVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticNatUpdateVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticNatUpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticNatUpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticNatUpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticNatUpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticNatUpdateVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticNatUpdateVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticNatUpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticNatUpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticNatUpdateVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticNatUpdateVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticNatUpdateVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticNatUpdateVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticNatUpdateVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticNatUpdateVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// StaticNatDeleteVPCRouterParam is input parameters for the sacloud API
type StaticNatDeleteVPCRouterParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewStaticNatDeleteVPCRouterParam return new StaticNatDeleteVPCRouterParam
func NewStaticNatDeleteVPCRouterParam() *StaticNatDeleteVPCRouterParam {
	return &StaticNatDeleteVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *StaticNatDeleteVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *StaticNatDeleteVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticNatDeleteVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticNatDeleteVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-nat-delete"]
}

func (p *StaticNatDeleteVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticNatDeleteVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticNatDeleteVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticNatDeleteVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticNatDeleteVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticNatDeleteVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *StaticNatDeleteVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticNatDeleteVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticNatDeleteVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticNatDeleteVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticNatDeleteVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticNatDeleteVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticNatDeleteVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticNatDeleteVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticNatDeleteVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticNatDeleteVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticNatDeleteVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticNatDeleteVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticNatDeleteVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticNatDeleteVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticNatDeleteVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticNatDeleteVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// PortForwardingInfoVPCRouterParam is input parameters for the sacloud API
type PortForwardingInfoVPCRouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewPortForwardingInfoVPCRouterParam return new PortForwardingInfoVPCRouterParam
func NewPortForwardingInfoVPCRouterParam() *PortForwardingInfoVPCRouterParam {
	return &PortForwardingInfoVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *PortForwardingInfoVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *PortForwardingInfoVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *PortForwardingInfoVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PortForwardingInfoVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["port-forwarding-info"]
}

func (p *PortForwardingInfoVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *PortForwardingInfoVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *PortForwardingInfoVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *PortForwardingInfoVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *PortForwardingInfoVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *PortForwardingInfoVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *PortForwardingInfoVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PortForwardingInfoVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PortForwardingInfoVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *PortForwardingInfoVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *PortForwardingInfoVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PortForwardingInfoVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PortForwardingInfoVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PortForwardingInfoVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PortForwardingInfoVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PortForwardingInfoVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PortForwardingInfoVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *PortForwardingInfoVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *PortForwardingInfoVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *PortForwardingInfoVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *PortForwardingInfoVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *PortForwardingInfoVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *PortForwardingInfoVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *PortForwardingInfoVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *PortForwardingInfoVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *PortForwardingInfoVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *PortForwardingInfoVPCRouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *PortForwardingInfoVPCRouterParam) GetQuery() string {
	return p.Query
}
func (p *PortForwardingInfoVPCRouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *PortForwardingInfoVPCRouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *PortForwardingInfoVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *PortForwardingInfoVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// PortForwardingAddVPCRouterParam is input parameters for the sacloud API
type PortForwardingAddVPCRouterParam struct {
	Protocol          string     `json:"protocol"`
	GlobalPort        int        `json:"global-port"`
	PrivateIpaddress  string     `json:"private-ipaddress"`
	PrivatePort       int        `json:"private-port"`
	Description       string     `json:"description"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewPortForwardingAddVPCRouterParam return new PortForwardingAddVPCRouterParam
func NewPortForwardingAddVPCRouterParam() *PortForwardingAddVPCRouterParam {
	return &PortForwardingAddVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *PortForwardingAddVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if isEmpty(p.GlobalPort) {
		p.GlobalPort = 0
	}
	if isEmpty(p.PrivateIpaddress) {
		p.PrivateIpaddress = ""
	}
	if isEmpty(p.PrivatePort) {
		p.PrivatePort = 0
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *PortForwardingAddVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--global-port", p.GlobalPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["global-port"].ValidateFunc
		errs := validator("--global-port", p.GlobalPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--private-ipaddress", p.PrivateIpaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["private-ipaddress"].ValidateFunc
		errs := validator("--private-ipaddress", p.PrivateIpaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--private-port", p.PrivatePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["private-port"].ValidateFunc
		errs := validator("--private-port", p.PrivatePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *PortForwardingAddVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PortForwardingAddVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["port-forwarding-add"]
}

func (p *PortForwardingAddVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *PortForwardingAddVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *PortForwardingAddVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *PortForwardingAddVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *PortForwardingAddVPCRouterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *PortForwardingAddVPCRouterParam) GetProtocol() string {
	return p.Protocol
}
func (p *PortForwardingAddVPCRouterParam) SetGlobalPort(v int) {
	p.GlobalPort = v
}

func (p *PortForwardingAddVPCRouterParam) GetGlobalPort() int {
	return p.GlobalPort
}
func (p *PortForwardingAddVPCRouterParam) SetPrivateIpaddress(v string) {
	p.PrivateIpaddress = v
}

func (p *PortForwardingAddVPCRouterParam) GetPrivateIpaddress() string {
	return p.PrivateIpaddress
}
func (p *PortForwardingAddVPCRouterParam) SetPrivatePort(v int) {
	p.PrivatePort = v
}

func (p *PortForwardingAddVPCRouterParam) GetPrivatePort() int {
	return p.PrivatePort
}
func (p *PortForwardingAddVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *PortForwardingAddVPCRouterParam) GetDescription() string {
	return p.Description
}
func (p *PortForwardingAddVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *PortForwardingAddVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *PortForwardingAddVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PortForwardingAddVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PortForwardingAddVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PortForwardingAddVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PortForwardingAddVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *PortForwardingAddVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *PortForwardingAddVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PortForwardingAddVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PortForwardingAddVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PortForwardingAddVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PortForwardingAddVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PortForwardingAddVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PortForwardingAddVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *PortForwardingAddVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// PortForwardingUpdateVPCRouterParam is input parameters for the sacloud API
type PortForwardingUpdateVPCRouterParam struct {
	Index             int        `json:"index"`
	Protocol          string     `json:"protocol"`
	GlobalPort        int        `json:"global-port"`
	PrivateIpaddress  string     `json:"private-ipaddress"`
	PrivatePort       int        `json:"private-port"`
	Description       string     `json:"description"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewPortForwardingUpdateVPCRouterParam return new PortForwardingUpdateVPCRouterParam
func NewPortForwardingUpdateVPCRouterParam() *PortForwardingUpdateVPCRouterParam {
	return &PortForwardingUpdateVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *PortForwardingUpdateVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if isEmpty(p.GlobalPort) {
		p.GlobalPort = 0
	}
	if isEmpty(p.PrivateIpaddress) {
		p.PrivateIpaddress = ""
	}
	if isEmpty(p.PrivatePort) {
		p.PrivatePort = 0
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *PortForwardingUpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["global-port"].ValidateFunc
		errs := validator("--global-port", p.GlobalPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["private-ipaddress"].ValidateFunc
		errs := validator("--private-ipaddress", p.PrivateIpaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["private-port"].ValidateFunc
		errs := validator("--private-port", p.PrivatePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *PortForwardingUpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PortForwardingUpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["port-forwarding-update"]
}

func (p *PortForwardingUpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *PortForwardingUpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *PortForwardingUpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *PortForwardingUpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *PortForwardingUpdateVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *PortForwardingUpdateVPCRouterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetProtocol() string {
	return p.Protocol
}
func (p *PortForwardingUpdateVPCRouterParam) SetGlobalPort(v int) {
	p.GlobalPort = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetGlobalPort() int {
	return p.GlobalPort
}
func (p *PortForwardingUpdateVPCRouterParam) SetPrivateIpaddress(v string) {
	p.PrivateIpaddress = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetPrivateIpaddress() string {
	return p.PrivateIpaddress
}
func (p *PortForwardingUpdateVPCRouterParam) SetPrivatePort(v int) {
	p.PrivatePort = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetPrivatePort() int {
	return p.PrivatePort
}
func (p *PortForwardingUpdateVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetDescription() string {
	return p.Description
}
func (p *PortForwardingUpdateVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *PortForwardingUpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PortForwardingUpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PortForwardingUpdateVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *PortForwardingUpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PortForwardingUpdateVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PortForwardingUpdateVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PortForwardingUpdateVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// PortForwardingDeleteVPCRouterParam is input parameters for the sacloud API
type PortForwardingDeleteVPCRouterParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewPortForwardingDeleteVPCRouterParam return new PortForwardingDeleteVPCRouterParam
func NewPortForwardingDeleteVPCRouterParam() *PortForwardingDeleteVPCRouterParam {
	return &PortForwardingDeleteVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *PortForwardingDeleteVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *PortForwardingDeleteVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *PortForwardingDeleteVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PortForwardingDeleteVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["port-forwarding-delete"]
}

func (p *PortForwardingDeleteVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *PortForwardingDeleteVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *PortForwardingDeleteVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *PortForwardingDeleteVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *PortForwardingDeleteVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *PortForwardingDeleteVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *PortForwardingDeleteVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *PortForwardingDeleteVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *PortForwardingDeleteVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PortForwardingDeleteVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PortForwardingDeleteVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PortForwardingDeleteVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PortForwardingDeleteVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *PortForwardingDeleteVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *PortForwardingDeleteVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PortForwardingDeleteVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PortForwardingDeleteVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PortForwardingDeleteVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PortForwardingDeleteVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PortForwardingDeleteVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PortForwardingDeleteVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *PortForwardingDeleteVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// FirewallInfoVPCRouterParam is input parameters for the sacloud API
type FirewallInfoVPCRouterParam struct {
	Interface         int        `json:"interface"`
	Direction         string     `json:"direction"`
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewFirewallInfoVPCRouterParam return new FirewallInfoVPCRouterParam
func NewFirewallInfoVPCRouterParam() *FirewallInfoVPCRouterParam {
	return &FirewallInfoVPCRouterParam{

		Direction: "receive",
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *FirewallInfoVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Interface) {
		p.Interface = 0
	}
	if isEmpty(p.Direction) {
		p.Direction = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *FirewallInfoVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-info"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-info"].Params["direction"].ValidateFunc
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *FirewallInfoVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *FirewallInfoVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["firewall-info"]
}

func (p *FirewallInfoVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *FirewallInfoVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *FirewallInfoVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *FirewallInfoVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *FirewallInfoVPCRouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *FirewallInfoVPCRouterParam) GetInterface() int {
	return p.Interface
}
func (p *FirewallInfoVPCRouterParam) SetDirection(v string) {
	p.Direction = v
}

func (p *FirewallInfoVPCRouterParam) GetDirection() string {
	return p.Direction
}
func (p *FirewallInfoVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *FirewallInfoVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *FirewallInfoVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *FirewallInfoVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *FirewallInfoVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *FirewallInfoVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *FirewallInfoVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *FirewallInfoVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *FirewallInfoVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *FirewallInfoVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *FirewallInfoVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *FirewallInfoVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *FirewallInfoVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *FirewallInfoVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *FirewallInfoVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *FirewallInfoVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *FirewallInfoVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *FirewallInfoVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *FirewallInfoVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *FirewallInfoVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *FirewallInfoVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *FirewallInfoVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *FirewallInfoVPCRouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *FirewallInfoVPCRouterParam) GetQuery() string {
	return p.Query
}
func (p *FirewallInfoVPCRouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *FirewallInfoVPCRouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *FirewallInfoVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *FirewallInfoVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// FirewallAddVPCRouterParam is input parameters for the sacloud API
type FirewallAddVPCRouterParam struct {
	Interface          int        `json:"interface"`
	Direction          string     `json:"direction"`
	Protocol           string     `json:"protocol"`
	SourceNetwork      string     `json:"source-network"`
	SourcePort         int        `json:"source-port"`
	DestinationNetwork string     `json:"destination-network"`
	DestinationPort    int        `json:"destination-port"`
	Action             string     `json:"action"`
	EnableLogging      bool       `json:"enable-logging"`
	Description        string     `json:"description"`
	Selector           []string   `json:"selector"`
	Assumeyes          bool       `json:"assumeyes"`
	ParamTemplate      string     `json:"param-template"`
	Parameters         string     `json:"parameters"`
	ParamTemplateFile  string     `json:"param-template-file"`
	ParameterFile      string     `json:"parameter-file"`
	GenerateSkeleton   bool       `json:"generate-skeleton"`
	Id                 sacloud.ID `json:"id"`
}

// NewFirewallAddVPCRouterParam return new FirewallAddVPCRouterParam
func NewFirewallAddVPCRouterParam() *FirewallAddVPCRouterParam {
	return &FirewallAddVPCRouterParam{

		Direction: "receive",
		Action:    "deny",
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *FirewallAddVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Interface) {
		p.Interface = 0
	}
	if isEmpty(p.Direction) {
		p.Direction = ""
	}
	if isEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if isEmpty(p.SourceNetwork) {
		p.SourceNetwork = ""
	}
	if isEmpty(p.SourcePort) {
		p.SourcePort = 0
	}
	if isEmpty(p.DestinationNetwork) {
		p.DestinationNetwork = ""
	}
	if isEmpty(p.DestinationPort) {
		p.DestinationPort = 0
	}
	if isEmpty(p.Action) {
		p.Action = ""
	}
	if isEmpty(p.EnableLogging) {
		p.EnableLogging = false
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *FirewallAddVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["direction"].ValidateFunc
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["source-network"].ValidateFunc
		errs := validator("--source-network", p.SourceNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["source-port"].ValidateFunc
		errs := validator("--source-port", p.SourcePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["destination-network"].ValidateFunc
		errs := validator("--destination-network", p.DestinationNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["destination-port"].ValidateFunc
		errs := validator("--destination-port", p.DestinationPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["action"].ValidateFunc
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *FirewallAddVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *FirewallAddVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["firewall-add"]
}

func (p *FirewallAddVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *FirewallAddVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *FirewallAddVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *FirewallAddVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *FirewallAddVPCRouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *FirewallAddVPCRouterParam) GetInterface() int {
	return p.Interface
}
func (p *FirewallAddVPCRouterParam) SetDirection(v string) {
	p.Direction = v
}

func (p *FirewallAddVPCRouterParam) GetDirection() string {
	return p.Direction
}
func (p *FirewallAddVPCRouterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *FirewallAddVPCRouterParam) GetProtocol() string {
	return p.Protocol
}
func (p *FirewallAddVPCRouterParam) SetSourceNetwork(v string) {
	p.SourceNetwork = v
}

func (p *FirewallAddVPCRouterParam) GetSourceNetwork() string {
	return p.SourceNetwork
}
func (p *FirewallAddVPCRouterParam) SetSourcePort(v int) {
	p.SourcePort = v
}

func (p *FirewallAddVPCRouterParam) GetSourcePort() int {
	return p.SourcePort
}
func (p *FirewallAddVPCRouterParam) SetDestinationNetwork(v string) {
	p.DestinationNetwork = v
}

func (p *FirewallAddVPCRouterParam) GetDestinationNetwork() string {
	return p.DestinationNetwork
}
func (p *FirewallAddVPCRouterParam) SetDestinationPort(v int) {
	p.DestinationPort = v
}

func (p *FirewallAddVPCRouterParam) GetDestinationPort() int {
	return p.DestinationPort
}
func (p *FirewallAddVPCRouterParam) SetAction(v string) {
	p.Action = v
}

func (p *FirewallAddVPCRouterParam) GetAction() string {
	return p.Action
}
func (p *FirewallAddVPCRouterParam) SetEnableLogging(v bool) {
	p.EnableLogging = v
}

func (p *FirewallAddVPCRouterParam) GetEnableLogging() bool {
	return p.EnableLogging
}
func (p *FirewallAddVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *FirewallAddVPCRouterParam) GetDescription() string {
	return p.Description
}
func (p *FirewallAddVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *FirewallAddVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *FirewallAddVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *FirewallAddVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *FirewallAddVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *FirewallAddVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *FirewallAddVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *FirewallAddVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *FirewallAddVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *FirewallAddVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *FirewallAddVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *FirewallAddVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *FirewallAddVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *FirewallAddVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *FirewallAddVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *FirewallAddVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// FirewallUpdateVPCRouterParam is input parameters for the sacloud API
type FirewallUpdateVPCRouterParam struct {
	Interface          int        `json:"interface"`
	Direction          string     `json:"direction"`
	Index              int        `json:"index"`
	Protocol           string     `json:"protocol"`
	SourceNetwork      string     `json:"source-network"`
	SourcePort         int        `json:"source-port"`
	DestinationNetwork string     `json:"destination-network"`
	DestinationPort    int        `json:"destination-port"`
	Action             string     `json:"action"`
	EnableLogging      bool       `json:"enable-logging"`
	Description        string     `json:"description"`
	Selector           []string   `json:"selector"`
	Assumeyes          bool       `json:"assumeyes"`
	ParamTemplate      string     `json:"param-template"`
	Parameters         string     `json:"parameters"`
	ParamTemplateFile  string     `json:"param-template-file"`
	ParameterFile      string     `json:"parameter-file"`
	GenerateSkeleton   bool       `json:"generate-skeleton"`
	Id                 sacloud.ID `json:"id"`
}

// NewFirewallUpdateVPCRouterParam return new FirewallUpdateVPCRouterParam
func NewFirewallUpdateVPCRouterParam() *FirewallUpdateVPCRouterParam {
	return &FirewallUpdateVPCRouterParam{

		Direction: "receive",
		Action:    "deny",
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *FirewallUpdateVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Interface) {
		p.Interface = 0
	}
	if isEmpty(p.Direction) {
		p.Direction = ""
	}
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if isEmpty(p.SourceNetwork) {
		p.SourceNetwork = ""
	}
	if isEmpty(p.SourcePort) {
		p.SourcePort = 0
	}
	if isEmpty(p.DestinationNetwork) {
		p.DestinationNetwork = ""
	}
	if isEmpty(p.DestinationPort) {
		p.DestinationPort = 0
	}
	if isEmpty(p.Action) {
		p.Action = ""
	}
	if isEmpty(p.EnableLogging) {
		p.EnableLogging = false
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *FirewallUpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["direction"].ValidateFunc
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["source-network"].ValidateFunc
		errs := validator("--source-network", p.SourceNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["source-port"].ValidateFunc
		errs := validator("--source-port", p.SourcePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["destination-network"].ValidateFunc
		errs := validator("--destination-network", p.DestinationNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["destination-port"].ValidateFunc
		errs := validator("--destination-port", p.DestinationPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["action"].ValidateFunc
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *FirewallUpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *FirewallUpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["firewall-update"]
}

func (p *FirewallUpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *FirewallUpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *FirewallUpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *FirewallUpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *FirewallUpdateVPCRouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *FirewallUpdateVPCRouterParam) GetInterface() int {
	return p.Interface
}
func (p *FirewallUpdateVPCRouterParam) SetDirection(v string) {
	p.Direction = v
}

func (p *FirewallUpdateVPCRouterParam) GetDirection() string {
	return p.Direction
}
func (p *FirewallUpdateVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *FirewallUpdateVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *FirewallUpdateVPCRouterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *FirewallUpdateVPCRouterParam) GetProtocol() string {
	return p.Protocol
}
func (p *FirewallUpdateVPCRouterParam) SetSourceNetwork(v string) {
	p.SourceNetwork = v
}

func (p *FirewallUpdateVPCRouterParam) GetSourceNetwork() string {
	return p.SourceNetwork
}
func (p *FirewallUpdateVPCRouterParam) SetSourcePort(v int) {
	p.SourcePort = v
}

func (p *FirewallUpdateVPCRouterParam) GetSourcePort() int {
	return p.SourcePort
}
func (p *FirewallUpdateVPCRouterParam) SetDestinationNetwork(v string) {
	p.DestinationNetwork = v
}

func (p *FirewallUpdateVPCRouterParam) GetDestinationNetwork() string {
	return p.DestinationNetwork
}
func (p *FirewallUpdateVPCRouterParam) SetDestinationPort(v int) {
	p.DestinationPort = v
}

func (p *FirewallUpdateVPCRouterParam) GetDestinationPort() int {
	return p.DestinationPort
}
func (p *FirewallUpdateVPCRouterParam) SetAction(v string) {
	p.Action = v
}

func (p *FirewallUpdateVPCRouterParam) GetAction() string {
	return p.Action
}
func (p *FirewallUpdateVPCRouterParam) SetEnableLogging(v bool) {
	p.EnableLogging = v
}

func (p *FirewallUpdateVPCRouterParam) GetEnableLogging() bool {
	return p.EnableLogging
}
func (p *FirewallUpdateVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *FirewallUpdateVPCRouterParam) GetDescription() string {
	return p.Description
}
func (p *FirewallUpdateVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *FirewallUpdateVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *FirewallUpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *FirewallUpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *FirewallUpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *FirewallUpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *FirewallUpdateVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *FirewallUpdateVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *FirewallUpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *FirewallUpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *FirewallUpdateVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *FirewallUpdateVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *FirewallUpdateVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *FirewallUpdateVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *FirewallUpdateVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *FirewallUpdateVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// FirewallDeleteVPCRouterParam is input parameters for the sacloud API
type FirewallDeleteVPCRouterParam struct {
	Interface         int        `json:"interface"`
	Direction         string     `json:"direction"`
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewFirewallDeleteVPCRouterParam return new FirewallDeleteVPCRouterParam
func NewFirewallDeleteVPCRouterParam() *FirewallDeleteVPCRouterParam {
	return &FirewallDeleteVPCRouterParam{

		Direction: "receive",
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *FirewallDeleteVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Interface) {
		p.Interface = 0
	}
	if isEmpty(p.Direction) {
		p.Direction = ""
	}
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *FirewallDeleteVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-delete"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-delete"].Params["direction"].ValidateFunc
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *FirewallDeleteVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *FirewallDeleteVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["firewall-delete"]
}

func (p *FirewallDeleteVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *FirewallDeleteVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *FirewallDeleteVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *FirewallDeleteVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *FirewallDeleteVPCRouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *FirewallDeleteVPCRouterParam) GetInterface() int {
	return p.Interface
}
func (p *FirewallDeleteVPCRouterParam) SetDirection(v string) {
	p.Direction = v
}

func (p *FirewallDeleteVPCRouterParam) GetDirection() string {
	return p.Direction
}
func (p *FirewallDeleteVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *FirewallDeleteVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *FirewallDeleteVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *FirewallDeleteVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *FirewallDeleteVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *FirewallDeleteVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *FirewallDeleteVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *FirewallDeleteVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *FirewallDeleteVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *FirewallDeleteVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *FirewallDeleteVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *FirewallDeleteVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *FirewallDeleteVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *FirewallDeleteVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *FirewallDeleteVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *FirewallDeleteVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *FirewallDeleteVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *FirewallDeleteVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// DhcpServerInfoVPCRouterParam is input parameters for the sacloud API
type DhcpServerInfoVPCRouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewDhcpServerInfoVPCRouterParam return new DhcpServerInfoVPCRouterParam
func NewDhcpServerInfoVPCRouterParam() *DhcpServerInfoVPCRouterParam {
	return &DhcpServerInfoVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DhcpServerInfoVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DhcpServerInfoVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpServerInfoVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpServerInfoVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-server-info"]
}

func (p *DhcpServerInfoVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpServerInfoVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpServerInfoVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpServerInfoVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpServerInfoVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DhcpServerInfoVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *DhcpServerInfoVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpServerInfoVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpServerInfoVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DhcpServerInfoVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *DhcpServerInfoVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpServerInfoVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpServerInfoVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DhcpServerInfoVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DhcpServerInfoVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DhcpServerInfoVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DhcpServerInfoVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DhcpServerInfoVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *DhcpServerInfoVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DhcpServerInfoVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *DhcpServerInfoVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DhcpServerInfoVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DhcpServerInfoVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *DhcpServerInfoVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *DhcpServerInfoVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DhcpServerInfoVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DhcpServerInfoVPCRouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *DhcpServerInfoVPCRouterParam) GetQuery() string {
	return p.Query
}
func (p *DhcpServerInfoVPCRouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DhcpServerInfoVPCRouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DhcpServerInfoVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DhcpServerInfoVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// DhcpServerAddVPCRouterParam is input parameters for the sacloud API
type DhcpServerAddVPCRouterParam struct {
	Interface         int        `json:"interface"`
	RangeStart        string     `json:"range-start"`
	RangeStop         string     `json:"range-stop"`
	DNSServers        []string   `json:"dns-servers"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewDhcpServerAddVPCRouterParam return new DhcpServerAddVPCRouterParam
func NewDhcpServerAddVPCRouterParam() *DhcpServerAddVPCRouterParam {
	return &DhcpServerAddVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DhcpServerAddVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Interface) {
		p.Interface = 0
	}
	if isEmpty(p.RangeStart) {
		p.RangeStart = ""
	}
	if isEmpty(p.RangeStop) {
		p.RangeStop = ""
	}
	if isEmpty(p.DNSServers) {
		p.DNSServers = []string{""}
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DhcpServerAddVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["range-start"].ValidateFunc
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["range-stop"].ValidateFunc
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["dns-servers"].ValidateFunc
		errs := validator("--dns-servers", p.DNSServers)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpServerAddVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpServerAddVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-server-add"]
}

func (p *DhcpServerAddVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpServerAddVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpServerAddVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpServerAddVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpServerAddVPCRouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *DhcpServerAddVPCRouterParam) GetInterface() int {
	return p.Interface
}
func (p *DhcpServerAddVPCRouterParam) SetRangeStart(v string) {
	p.RangeStart = v
}

func (p *DhcpServerAddVPCRouterParam) GetRangeStart() string {
	return p.RangeStart
}
func (p *DhcpServerAddVPCRouterParam) SetRangeStop(v string) {
	p.RangeStop = v
}

func (p *DhcpServerAddVPCRouterParam) GetRangeStop() string {
	return p.RangeStop
}
func (p *DhcpServerAddVPCRouterParam) SetDNSServers(v []string) {
	p.DNSServers = v
}

func (p *DhcpServerAddVPCRouterParam) GetDNSServers() []string {
	return p.DNSServers
}
func (p *DhcpServerAddVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DhcpServerAddVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *DhcpServerAddVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DhcpServerAddVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DhcpServerAddVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpServerAddVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpServerAddVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DhcpServerAddVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *DhcpServerAddVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpServerAddVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpServerAddVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DhcpServerAddVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DhcpServerAddVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DhcpServerAddVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DhcpServerAddVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DhcpServerAddVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// DhcpServerUpdateVPCRouterParam is input parameters for the sacloud API
type DhcpServerUpdateVPCRouterParam struct {
	Interface         int        `json:"interface"`
	RangeStart        string     `json:"range-start"`
	RangeStop         string     `json:"range-stop"`
	DNSServers        []string   `json:"dns-servers"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewDhcpServerUpdateVPCRouterParam return new DhcpServerUpdateVPCRouterParam
func NewDhcpServerUpdateVPCRouterParam() *DhcpServerUpdateVPCRouterParam {
	return &DhcpServerUpdateVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DhcpServerUpdateVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Interface) {
		p.Interface = 0
	}
	if isEmpty(p.RangeStart) {
		p.RangeStart = ""
	}
	if isEmpty(p.RangeStop) {
		p.RangeStop = ""
	}
	if isEmpty(p.DNSServers) {
		p.DNSServers = []string{""}
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DhcpServerUpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["range-start"].ValidateFunc
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["range-stop"].ValidateFunc
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["dns-servers"].ValidateFunc
		errs := validator("--dns-servers", p.DNSServers)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpServerUpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpServerUpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-server-update"]
}

func (p *DhcpServerUpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpServerUpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpServerUpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpServerUpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpServerUpdateVPCRouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetInterface() int {
	return p.Interface
}
func (p *DhcpServerUpdateVPCRouterParam) SetRangeStart(v string) {
	p.RangeStart = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetRangeStart() string {
	return p.RangeStart
}
func (p *DhcpServerUpdateVPCRouterParam) SetRangeStop(v string) {
	p.RangeStop = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetRangeStop() string {
	return p.RangeStop
}
func (p *DhcpServerUpdateVPCRouterParam) SetDNSServers(v []string) {
	p.DNSServers = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetDNSServers() []string {
	return p.DNSServers
}
func (p *DhcpServerUpdateVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *DhcpServerUpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DhcpServerUpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpServerUpdateVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *DhcpServerUpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpServerUpdateVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DhcpServerUpdateVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DhcpServerUpdateVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// DhcpServerDeleteVPCRouterParam is input parameters for the sacloud API
type DhcpServerDeleteVPCRouterParam struct {
	Interface         int        `json:"interface"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewDhcpServerDeleteVPCRouterParam return new DhcpServerDeleteVPCRouterParam
func NewDhcpServerDeleteVPCRouterParam() *DhcpServerDeleteVPCRouterParam {
	return &DhcpServerDeleteVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DhcpServerDeleteVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Interface) {
		p.Interface = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DhcpServerDeleteVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-delete"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpServerDeleteVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpServerDeleteVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-server-delete"]
}

func (p *DhcpServerDeleteVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpServerDeleteVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpServerDeleteVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpServerDeleteVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpServerDeleteVPCRouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *DhcpServerDeleteVPCRouterParam) GetInterface() int {
	return p.Interface
}
func (p *DhcpServerDeleteVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DhcpServerDeleteVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *DhcpServerDeleteVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DhcpServerDeleteVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DhcpServerDeleteVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpServerDeleteVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpServerDeleteVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DhcpServerDeleteVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *DhcpServerDeleteVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpServerDeleteVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpServerDeleteVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DhcpServerDeleteVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DhcpServerDeleteVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DhcpServerDeleteVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DhcpServerDeleteVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DhcpServerDeleteVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// DhcpStaticMappingInfoVPCRouterParam is input parameters for the sacloud API
type DhcpStaticMappingInfoVPCRouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewDhcpStaticMappingInfoVPCRouterParam return new DhcpStaticMappingInfoVPCRouterParam
func NewDhcpStaticMappingInfoVPCRouterParam() *DhcpStaticMappingInfoVPCRouterParam {
	return &DhcpStaticMappingInfoVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DhcpStaticMappingInfoVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DhcpStaticMappingInfoVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-static-mapping-info"]
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpStaticMappingInfoVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *DhcpStaticMappingInfoVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpStaticMappingInfoVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *DhcpStaticMappingInfoVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpStaticMappingInfoVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DhcpStaticMappingInfoVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DhcpStaticMappingInfoVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *DhcpStaticMappingInfoVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *DhcpStaticMappingInfoVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DhcpStaticMappingInfoVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *DhcpStaticMappingInfoVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DhcpStaticMappingInfoVPCRouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetQuery() string {
	return p.Query
}
func (p *DhcpStaticMappingInfoVPCRouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DhcpStaticMappingInfoVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// DhcpStaticMappingAddVPCRouterParam is input parameters for the sacloud API
type DhcpStaticMappingAddVPCRouterParam struct {
	Macaddress        string     `json:"macaddress"`
	Ipaddress         string     `json:"ipaddress"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewDhcpStaticMappingAddVPCRouterParam return new DhcpStaticMappingAddVPCRouterParam
func NewDhcpStaticMappingAddVPCRouterParam() *DhcpStaticMappingAddVPCRouterParam {
	return &DhcpStaticMappingAddVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DhcpStaticMappingAddVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Macaddress) {
		p.Macaddress = ""
	}
	if isEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DhcpStaticMappingAddVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--macaddress", p.Macaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-add"].Params["macaddress"].ValidateFunc
		errs := validator("--macaddress", p.Macaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-add"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-static-mapping-add"]
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpStaticMappingAddVPCRouterParam) SetMacaddress(v string) {
	p.Macaddress = v
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetMacaddress() string {
	return p.Macaddress
}
func (p *DhcpStaticMappingAddVPCRouterParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *DhcpStaticMappingAddVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *DhcpStaticMappingAddVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DhcpStaticMappingAddVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpStaticMappingAddVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *DhcpStaticMappingAddVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpStaticMappingAddVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DhcpStaticMappingAddVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DhcpStaticMappingAddVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// DhcpStaticMappingUpdateVPCRouterParam is input parameters for the sacloud API
type DhcpStaticMappingUpdateVPCRouterParam struct {
	Index             int        `json:"index"`
	Macaddress        string     `json:"macaddress"`
	Ipaddress         string     `json:"ipaddress"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewDhcpStaticMappingUpdateVPCRouterParam return new DhcpStaticMappingUpdateVPCRouterParam
func NewDhcpStaticMappingUpdateVPCRouterParam() *DhcpStaticMappingUpdateVPCRouterParam {
	return &DhcpStaticMappingUpdateVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DhcpStaticMappingUpdateVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Macaddress) {
		p.Macaddress = ""
	}
	if isEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DhcpStaticMappingUpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-update"].Params["macaddress"].ValidateFunc
		errs := validator("--macaddress", p.Macaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-static-mapping-update"]
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *DhcpStaticMappingUpdateVPCRouterParam) SetMacaddress(v string) {
	p.Macaddress = v
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetMacaddress() string {
	return p.Macaddress
}
func (p *DhcpStaticMappingUpdateVPCRouterParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *DhcpStaticMappingUpdateVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *DhcpStaticMappingUpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DhcpStaticMappingUpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpStaticMappingUpdateVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *DhcpStaticMappingUpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpStaticMappingUpdateVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DhcpStaticMappingUpdateVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DhcpStaticMappingUpdateVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// DhcpStaticMappingDeleteVPCRouterParam is input parameters for the sacloud API
type DhcpStaticMappingDeleteVPCRouterParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewDhcpStaticMappingDeleteVPCRouterParam return new DhcpStaticMappingDeleteVPCRouterParam
func NewDhcpStaticMappingDeleteVPCRouterParam() *DhcpStaticMappingDeleteVPCRouterParam {
	return &DhcpStaticMappingDeleteVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DhcpStaticMappingDeleteVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DhcpStaticMappingDeleteVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-static-mapping-delete"]
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *DhcpStaticMappingDeleteVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *DhcpStaticMappingDeleteVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DhcpStaticMappingDeleteVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpStaticMappingDeleteVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *DhcpStaticMappingDeleteVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpStaticMappingDeleteVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DhcpStaticMappingDeleteVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DhcpStaticMappingDeleteVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// PptpServerInfoVPCRouterParam is input parameters for the sacloud API
type PptpServerInfoVPCRouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewPptpServerInfoVPCRouterParam return new PptpServerInfoVPCRouterParam
func NewPptpServerInfoVPCRouterParam() *PptpServerInfoVPCRouterParam {
	return &PptpServerInfoVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *PptpServerInfoVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *PptpServerInfoVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *PptpServerInfoVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PptpServerInfoVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["pptp-server-info"]
}

func (p *PptpServerInfoVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *PptpServerInfoVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *PptpServerInfoVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *PptpServerInfoVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *PptpServerInfoVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *PptpServerInfoVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *PptpServerInfoVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PptpServerInfoVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PptpServerInfoVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *PptpServerInfoVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *PptpServerInfoVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PptpServerInfoVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PptpServerInfoVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PptpServerInfoVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PptpServerInfoVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PptpServerInfoVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PptpServerInfoVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *PptpServerInfoVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *PptpServerInfoVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *PptpServerInfoVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *PptpServerInfoVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *PptpServerInfoVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *PptpServerInfoVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *PptpServerInfoVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *PptpServerInfoVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *PptpServerInfoVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *PptpServerInfoVPCRouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *PptpServerInfoVPCRouterParam) GetQuery() string {
	return p.Query
}
func (p *PptpServerInfoVPCRouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *PptpServerInfoVPCRouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *PptpServerInfoVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *PptpServerInfoVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// PptpServerUpdateVPCRouterParam is input parameters for the sacloud API
type PptpServerUpdateVPCRouterParam struct {
	Disabled          bool       `json:"disabled"`
	RangeStart        string     `json:"range-start"`
	RangeStop         string     `json:"range-stop"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewPptpServerUpdateVPCRouterParam return new PptpServerUpdateVPCRouterParam
func NewPptpServerUpdateVPCRouterParam() *PptpServerUpdateVPCRouterParam {
	return &PptpServerUpdateVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *PptpServerUpdateVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Disabled) {
		p.Disabled = false
	}
	if isEmpty(p.RangeStart) {
		p.RangeStart = ""
	}
	if isEmpty(p.RangeStop) {
		p.RangeStop = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *PptpServerUpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["VPCRouter"].Commands["pptp-server-update"].Params["range-start"].ValidateFunc
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["pptp-server-update"].Params["range-stop"].ValidateFunc
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *PptpServerUpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PptpServerUpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["pptp-server-update"]
}

func (p *PptpServerUpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *PptpServerUpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *PptpServerUpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *PptpServerUpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *PptpServerUpdateVPCRouterParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *PptpServerUpdateVPCRouterParam) GetDisabled() bool {
	return p.Disabled
}
func (p *PptpServerUpdateVPCRouterParam) SetRangeStart(v string) {
	p.RangeStart = v
}

func (p *PptpServerUpdateVPCRouterParam) GetRangeStart() string {
	return p.RangeStart
}
func (p *PptpServerUpdateVPCRouterParam) SetRangeStop(v string) {
	p.RangeStop = v
}

func (p *PptpServerUpdateVPCRouterParam) GetRangeStop() string {
	return p.RangeStop
}
func (p *PptpServerUpdateVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *PptpServerUpdateVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *PptpServerUpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PptpServerUpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PptpServerUpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PptpServerUpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PptpServerUpdateVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *PptpServerUpdateVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *PptpServerUpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PptpServerUpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PptpServerUpdateVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PptpServerUpdateVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PptpServerUpdateVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PptpServerUpdateVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PptpServerUpdateVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *PptpServerUpdateVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// L2TPServerInfoVPCRouterParam is input parameters for the sacloud API
type L2TPServerInfoVPCRouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewL2TPServerInfoVPCRouterParam return new L2TPServerInfoVPCRouterParam
func NewL2TPServerInfoVPCRouterParam() *L2TPServerInfoVPCRouterParam {
	return &L2TPServerInfoVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *L2TPServerInfoVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *L2TPServerInfoVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *L2TPServerInfoVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *L2TPServerInfoVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["l2tp-server-info"]
}

func (p *L2TPServerInfoVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *L2TPServerInfoVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *L2TPServerInfoVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *L2TPServerInfoVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *L2TPServerInfoVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *L2TPServerInfoVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *L2TPServerInfoVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *L2TPServerInfoVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *L2TPServerInfoVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *L2TPServerInfoVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *L2TPServerInfoVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *L2TPServerInfoVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *L2TPServerInfoVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *L2TPServerInfoVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *L2TPServerInfoVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *L2TPServerInfoVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *L2TPServerInfoVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *L2TPServerInfoVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *L2TPServerInfoVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *L2TPServerInfoVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *L2TPServerInfoVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *L2TPServerInfoVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *L2TPServerInfoVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *L2TPServerInfoVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *L2TPServerInfoVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *L2TPServerInfoVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *L2TPServerInfoVPCRouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *L2TPServerInfoVPCRouterParam) GetQuery() string {
	return p.Query
}
func (p *L2TPServerInfoVPCRouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *L2TPServerInfoVPCRouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *L2TPServerInfoVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *L2TPServerInfoVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// L2TPServerUpdateVPCRouterParam is input parameters for the sacloud API
type L2TPServerUpdateVPCRouterParam struct {
	Disabled          bool       `json:"disabled"`
	RangeStart        string     `json:"range-start"`
	RangeStop         string     `json:"range-stop"`
	PreSharedSecret   string     `json:"pre-shared-secret"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewL2TPServerUpdateVPCRouterParam return new L2TPServerUpdateVPCRouterParam
func NewL2TPServerUpdateVPCRouterParam() *L2TPServerUpdateVPCRouterParam {
	return &L2TPServerUpdateVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *L2TPServerUpdateVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Disabled) {
		p.Disabled = false
	}
	if isEmpty(p.RangeStart) {
		p.RangeStart = ""
	}
	if isEmpty(p.RangeStop) {
		p.RangeStop = ""
	}
	if isEmpty(p.PreSharedSecret) {
		p.PreSharedSecret = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *L2TPServerUpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["VPCRouter"].Commands["l2tp-server-update"].Params["range-start"].ValidateFunc
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["l2tp-server-update"].Params["range-stop"].ValidateFunc
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["l2tp-server-update"].Params["pre-shared-secret"].ValidateFunc
		errs := validator("--pre-shared-secret", p.PreSharedSecret)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *L2TPServerUpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *L2TPServerUpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["l2tp-server-update"]
}

func (p *L2TPServerUpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *L2TPServerUpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *L2TPServerUpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *L2TPServerUpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *L2TPServerUpdateVPCRouterParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *L2TPServerUpdateVPCRouterParam) GetDisabled() bool {
	return p.Disabled
}
func (p *L2TPServerUpdateVPCRouterParam) SetRangeStart(v string) {
	p.RangeStart = v
}

func (p *L2TPServerUpdateVPCRouterParam) GetRangeStart() string {
	return p.RangeStart
}
func (p *L2TPServerUpdateVPCRouterParam) SetRangeStop(v string) {
	p.RangeStop = v
}

func (p *L2TPServerUpdateVPCRouterParam) GetRangeStop() string {
	return p.RangeStop
}
func (p *L2TPServerUpdateVPCRouterParam) SetPreSharedSecret(v string) {
	p.PreSharedSecret = v
}

func (p *L2TPServerUpdateVPCRouterParam) GetPreSharedSecret() string {
	return p.PreSharedSecret
}
func (p *L2TPServerUpdateVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *L2TPServerUpdateVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *L2TPServerUpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *L2TPServerUpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *L2TPServerUpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *L2TPServerUpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *L2TPServerUpdateVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *L2TPServerUpdateVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *L2TPServerUpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *L2TPServerUpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *L2TPServerUpdateVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *L2TPServerUpdateVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *L2TPServerUpdateVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *L2TPServerUpdateVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *L2TPServerUpdateVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *L2TPServerUpdateVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// UserInfoVPCRouterParam is input parameters for the sacloud API
type UserInfoVPCRouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewUserInfoVPCRouterParam return new UserInfoVPCRouterParam
func NewUserInfoVPCRouterParam() *UserInfoVPCRouterParam {
	return &UserInfoVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UserInfoVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UserInfoVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UserInfoVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UserInfoVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["user-info"]
}

func (p *UserInfoVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UserInfoVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UserInfoVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UserInfoVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UserInfoVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UserInfoVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *UserInfoVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UserInfoVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UserInfoVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UserInfoVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *UserInfoVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UserInfoVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UserInfoVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UserInfoVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UserInfoVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UserInfoVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UserInfoVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UserInfoVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *UserInfoVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UserInfoVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *UserInfoVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UserInfoVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UserInfoVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *UserInfoVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *UserInfoVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UserInfoVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UserInfoVPCRouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *UserInfoVPCRouterParam) GetQuery() string {
	return p.Query
}
func (p *UserInfoVPCRouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UserInfoVPCRouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UserInfoVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UserInfoVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// UserAddVPCRouterParam is input parameters for the sacloud API
type UserAddVPCRouterParam struct {
	Username          string     `json:"username"`
	Password          string     `json:"password"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewUserAddVPCRouterParam return new UserAddVPCRouterParam
func NewUserAddVPCRouterParam() *UserAddVPCRouterParam {
	return &UserAddVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UserAddVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Username) {
		p.Username = ""
	}
	if isEmpty(p.Password) {
		p.Password = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UserAddVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--username", p.Username)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["user-add"].Params["username"].ValidateFunc
		errs := validator("--username", p.Username)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["user-add"].Params["password"].ValidateFunc
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UserAddVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UserAddVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["user-add"]
}

func (p *UserAddVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UserAddVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UserAddVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UserAddVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UserAddVPCRouterParam) SetUsername(v string) {
	p.Username = v
}

func (p *UserAddVPCRouterParam) GetUsername() string {
	return p.Username
}
func (p *UserAddVPCRouterParam) SetPassword(v string) {
	p.Password = v
}

func (p *UserAddVPCRouterParam) GetPassword() string {
	return p.Password
}
func (p *UserAddVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UserAddVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *UserAddVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UserAddVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UserAddVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UserAddVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UserAddVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UserAddVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *UserAddVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UserAddVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UserAddVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UserAddVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UserAddVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UserAddVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UserAddVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UserAddVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// UserUpdateVPCRouterParam is input parameters for the sacloud API
type UserUpdateVPCRouterParam struct {
	Index             int        `json:"index"`
	Username          string     `json:"username"`
	Password          string     `json:"password"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewUserUpdateVPCRouterParam return new UserUpdateVPCRouterParam
func NewUserUpdateVPCRouterParam() *UserUpdateVPCRouterParam {
	return &UserUpdateVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UserUpdateVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Username) {
		p.Username = ""
	}
	if isEmpty(p.Password) {
		p.Password = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UserUpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["user-update"].Params["username"].ValidateFunc
		errs := validator("--username", p.Username)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["user-update"].Params["password"].ValidateFunc
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UserUpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UserUpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["user-update"]
}

func (p *UserUpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UserUpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UserUpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UserUpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UserUpdateVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *UserUpdateVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *UserUpdateVPCRouterParam) SetUsername(v string) {
	p.Username = v
}

func (p *UserUpdateVPCRouterParam) GetUsername() string {
	return p.Username
}
func (p *UserUpdateVPCRouterParam) SetPassword(v string) {
	p.Password = v
}

func (p *UserUpdateVPCRouterParam) GetPassword() string {
	return p.Password
}
func (p *UserUpdateVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UserUpdateVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *UserUpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UserUpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UserUpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UserUpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UserUpdateVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UserUpdateVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *UserUpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UserUpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UserUpdateVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UserUpdateVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UserUpdateVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UserUpdateVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UserUpdateVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UserUpdateVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// UserDeleteVPCRouterParam is input parameters for the sacloud API
type UserDeleteVPCRouterParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewUserDeleteVPCRouterParam return new UserDeleteVPCRouterParam
func NewUserDeleteVPCRouterParam() *UserDeleteVPCRouterParam {
	return &UserDeleteVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UserDeleteVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UserDeleteVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UserDeleteVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UserDeleteVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["user-delete"]
}

func (p *UserDeleteVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UserDeleteVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UserDeleteVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UserDeleteVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UserDeleteVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *UserDeleteVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *UserDeleteVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UserDeleteVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *UserDeleteVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UserDeleteVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UserDeleteVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UserDeleteVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UserDeleteVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UserDeleteVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *UserDeleteVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UserDeleteVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UserDeleteVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UserDeleteVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UserDeleteVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UserDeleteVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UserDeleteVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UserDeleteVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// SiteToSiteVPNInfoVPCRouterParam is input parameters for the sacloud API
type SiteToSiteVPNInfoVPCRouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewSiteToSiteVPNInfoVPCRouterParam return new SiteToSiteVPNInfoVPCRouterParam
func NewSiteToSiteVPNInfoVPCRouterParam() *SiteToSiteVPNInfoVPCRouterParam {
	return &SiteToSiteVPNInfoVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *SiteToSiteVPNInfoVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *SiteToSiteVPNInfoVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *SiteToSiteVPNInfoVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVPNInfoVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["site-to-site-vpn-info"]
}

func (p *SiteToSiteVPNInfoVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *SiteToSiteVPNInfoVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *SiteToSiteVPNInfoVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *SiteToSiteVPNInfoVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *SiteToSiteVPNInfoVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SiteToSiteVPNInfoVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *SiteToSiteVPNInfoVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SiteToSiteVPNInfoVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SiteToSiteVPNInfoVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SiteToSiteVPNInfoVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *SiteToSiteVPNInfoVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SiteToSiteVPNInfoVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SiteToSiteVPNInfoVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SiteToSiteVPNInfoVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SiteToSiteVPNInfoVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SiteToSiteVPNInfoVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SiteToSiteVPNInfoVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *SiteToSiteVPNInfoVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *SiteToSiteVPNInfoVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *SiteToSiteVPNInfoVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *SiteToSiteVPNInfoVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *SiteToSiteVPNInfoVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *SiteToSiteVPNInfoVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *SiteToSiteVPNInfoVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *SiteToSiteVPNInfoVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *SiteToSiteVPNInfoVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *SiteToSiteVPNInfoVPCRouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *SiteToSiteVPNInfoVPCRouterParam) GetQuery() string {
	return p.Query
}
func (p *SiteToSiteVPNInfoVPCRouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *SiteToSiteVPNInfoVPCRouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *SiteToSiteVPNInfoVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SiteToSiteVPNInfoVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// SiteToSiteVPNAddVPCRouterParam is input parameters for the sacloud API
type SiteToSiteVPNAddVPCRouterParam struct {
	Peer              string     `json:"peer"`
	RemoteId          string     `json:"remote-id"`
	PreSharedSecret   string     `json:"pre-shared-secret"`
	Routes            []string   `json:"routes"`
	LocalPrefix       []string   `json:"local-prefix"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewSiteToSiteVPNAddVPCRouterParam return new SiteToSiteVPNAddVPCRouterParam
func NewSiteToSiteVPNAddVPCRouterParam() *SiteToSiteVPNAddVPCRouterParam {
	return &SiteToSiteVPNAddVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *SiteToSiteVPNAddVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Peer) {
		p.Peer = ""
	}
	if isEmpty(p.RemoteId) {
		p.RemoteId = ""
	}
	if isEmpty(p.PreSharedSecret) {
		p.PreSharedSecret = ""
	}
	if isEmpty(p.Routes) {
		p.Routes = []string{""}
	}
	if isEmpty(p.LocalPrefix) {
		p.LocalPrefix = []string{""}
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *SiteToSiteVPNAddVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--peer", p.Peer)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["peer"].ValidateFunc
		errs := validator("--peer", p.Peer)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--remote-id", p.RemoteId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--pre-shared-secret", p.PreSharedSecret)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["pre-shared-secret"].ValidateFunc
		errs := validator("--pre-shared-secret", p.PreSharedSecret)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--routes", p.Routes)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["routes"].ValidateFunc
		errs := validator("--routes", p.Routes)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--local-prefix", p.LocalPrefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["local-prefix"].ValidateFunc
		errs := validator("--local-prefix", p.LocalPrefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["site-to-site-vpn-add"]
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *SiteToSiteVPNAddVPCRouterParam) SetPeer(v string) {
	p.Peer = v
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetPeer() string {
	return p.Peer
}
func (p *SiteToSiteVPNAddVPCRouterParam) SetRemoteId(v string) {
	p.RemoteId = v
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetRemoteId() string {
	return p.RemoteId
}
func (p *SiteToSiteVPNAddVPCRouterParam) SetPreSharedSecret(v string) {
	p.PreSharedSecret = v
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetPreSharedSecret() string {
	return p.PreSharedSecret
}
func (p *SiteToSiteVPNAddVPCRouterParam) SetRoutes(v []string) {
	p.Routes = v
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetRoutes() []string {
	return p.Routes
}
func (p *SiteToSiteVPNAddVPCRouterParam) SetLocalPrefix(v []string) {
	p.LocalPrefix = v
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetLocalPrefix() []string {
	return p.LocalPrefix
}
func (p *SiteToSiteVPNAddVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *SiteToSiteVPNAddVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SiteToSiteVPNAddVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SiteToSiteVPNAddVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *SiteToSiteVPNAddVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SiteToSiteVPNAddVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SiteToSiteVPNAddVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SiteToSiteVPNAddVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SiteToSiteVPNAddVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// SiteToSiteVPNUpdateVPCRouterParam is input parameters for the sacloud API
type SiteToSiteVPNUpdateVPCRouterParam struct {
	Index             int        `json:"index"`
	Peer              string     `json:"peer"`
	RemoteId          string     `json:"remote-id"`
	PreSharedSecret   string     `json:"pre-shared-secret"`
	Routes            []string   `json:"routes"`
	LocalPrefix       []string   `json:"local-prefix"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewSiteToSiteVPNUpdateVPCRouterParam return new SiteToSiteVPNUpdateVPCRouterParam
func NewSiteToSiteVPNUpdateVPCRouterParam() *SiteToSiteVPNUpdateVPCRouterParam {
	return &SiteToSiteVPNUpdateVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *SiteToSiteVPNUpdateVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Peer) {
		p.Peer = ""
	}
	if isEmpty(p.RemoteId) {
		p.RemoteId = ""
	}
	if isEmpty(p.PreSharedSecret) {
		p.PreSharedSecret = ""
	}
	if isEmpty(p.Routes) {
		p.Routes = []string{""}
	}
	if isEmpty(p.LocalPrefix) {
		p.LocalPrefix = []string{""}
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *SiteToSiteVPNUpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["peer"].ValidateFunc
		errs := validator("--peer", p.Peer)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["pre-shared-secret"].ValidateFunc
		errs := validator("--pre-shared-secret", p.PreSharedSecret)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["routes"].ValidateFunc
		errs := validator("--routes", p.Routes)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["local-prefix"].ValidateFunc
		errs := validator("--local-prefix", p.LocalPrefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["site-to-site-vpn-update"]
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *SiteToSiteVPNUpdateVPCRouterParam) SetPeer(v string) {
	p.Peer = v
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetPeer() string {
	return p.Peer
}
func (p *SiteToSiteVPNUpdateVPCRouterParam) SetRemoteId(v string) {
	p.RemoteId = v
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetRemoteId() string {
	return p.RemoteId
}
func (p *SiteToSiteVPNUpdateVPCRouterParam) SetPreSharedSecret(v string) {
	p.PreSharedSecret = v
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetPreSharedSecret() string {
	return p.PreSharedSecret
}
func (p *SiteToSiteVPNUpdateVPCRouterParam) SetRoutes(v []string) {
	p.Routes = v
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetRoutes() []string {
	return p.Routes
}
func (p *SiteToSiteVPNUpdateVPCRouterParam) SetLocalPrefix(v []string) {
	p.LocalPrefix = v
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetLocalPrefix() []string {
	return p.LocalPrefix
}
func (p *SiteToSiteVPNUpdateVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *SiteToSiteVPNUpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SiteToSiteVPNUpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SiteToSiteVPNUpdateVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *SiteToSiteVPNUpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SiteToSiteVPNUpdateVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SiteToSiteVPNUpdateVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SiteToSiteVPNUpdateVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SiteToSiteVPNUpdateVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// SiteToSiteVPNDeleteVPCRouterParam is input parameters for the sacloud API
type SiteToSiteVPNDeleteVPCRouterParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewSiteToSiteVPNDeleteVPCRouterParam return new SiteToSiteVPNDeleteVPCRouterParam
func NewSiteToSiteVPNDeleteVPCRouterParam() *SiteToSiteVPNDeleteVPCRouterParam {
	return &SiteToSiteVPNDeleteVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *SiteToSiteVPNDeleteVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *SiteToSiteVPNDeleteVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["site-to-site-vpn-delete"]
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *SiteToSiteVPNDeleteVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *SiteToSiteVPNDeleteVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SiteToSiteVPNDeleteVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SiteToSiteVPNDeleteVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *SiteToSiteVPNDeleteVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SiteToSiteVPNDeleteVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SiteToSiteVPNDeleteVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SiteToSiteVPNDeleteVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SiteToSiteVPNDeleteVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// SiteToSiteVPNPeersVPCRouterParam is input parameters for the sacloud API
type SiteToSiteVPNPeersVPCRouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewSiteToSiteVPNPeersVPCRouterParam return new SiteToSiteVPNPeersVPCRouterParam
func NewSiteToSiteVPNPeersVPCRouterParam() *SiteToSiteVPNPeersVPCRouterParam {
	return &SiteToSiteVPNPeersVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *SiteToSiteVPNPeersVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *SiteToSiteVPNPeersVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *SiteToSiteVPNPeersVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVPNPeersVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["site-to-site-vpn-peers"]
}

func (p *SiteToSiteVPNPeersVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *SiteToSiteVPNPeersVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *SiteToSiteVPNPeersVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *SiteToSiteVPNPeersVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *SiteToSiteVPNPeersVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SiteToSiteVPNPeersVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *SiteToSiteVPNPeersVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SiteToSiteVPNPeersVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SiteToSiteVPNPeersVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SiteToSiteVPNPeersVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *SiteToSiteVPNPeersVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SiteToSiteVPNPeersVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SiteToSiteVPNPeersVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SiteToSiteVPNPeersVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SiteToSiteVPNPeersVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SiteToSiteVPNPeersVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SiteToSiteVPNPeersVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *SiteToSiteVPNPeersVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *SiteToSiteVPNPeersVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *SiteToSiteVPNPeersVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *SiteToSiteVPNPeersVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *SiteToSiteVPNPeersVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *SiteToSiteVPNPeersVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *SiteToSiteVPNPeersVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *SiteToSiteVPNPeersVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *SiteToSiteVPNPeersVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *SiteToSiteVPNPeersVPCRouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *SiteToSiteVPNPeersVPCRouterParam) GetQuery() string {
	return p.Query
}
func (p *SiteToSiteVPNPeersVPCRouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *SiteToSiteVPNPeersVPCRouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *SiteToSiteVPNPeersVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SiteToSiteVPNPeersVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// StaticRouteInfoVPCRouterParam is input parameters for the sacloud API
type StaticRouteInfoVPCRouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewStaticRouteInfoVPCRouterParam return new StaticRouteInfoVPCRouterParam
func NewStaticRouteInfoVPCRouterParam() *StaticRouteInfoVPCRouterParam {
	return &StaticRouteInfoVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *StaticRouteInfoVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *StaticRouteInfoVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticRouteInfoVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticRouteInfoVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-route-info"]
}

func (p *StaticRouteInfoVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticRouteInfoVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticRouteInfoVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticRouteInfoVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticRouteInfoVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticRouteInfoVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticRouteInfoVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticRouteInfoVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticRouteInfoVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticRouteInfoVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticRouteInfoVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticRouteInfoVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticRouteInfoVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticRouteInfoVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticRouteInfoVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticRouteInfoVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticRouteInfoVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *StaticRouteInfoVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *StaticRouteInfoVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *StaticRouteInfoVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *StaticRouteInfoVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *StaticRouteInfoVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *StaticRouteInfoVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *StaticRouteInfoVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *StaticRouteInfoVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *StaticRouteInfoVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *StaticRouteInfoVPCRouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *StaticRouteInfoVPCRouterParam) GetQuery() string {
	return p.Query
}
func (p *StaticRouteInfoVPCRouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *StaticRouteInfoVPCRouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *StaticRouteInfoVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticRouteInfoVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// StaticRouteAddVPCRouterParam is input parameters for the sacloud API
type StaticRouteAddVPCRouterParam struct {
	Prefix            string     `json:"prefix"`
	NextHop           string     `json:"next-hop"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewStaticRouteAddVPCRouterParam return new StaticRouteAddVPCRouterParam
func NewStaticRouteAddVPCRouterParam() *StaticRouteAddVPCRouterParam {
	return &StaticRouteAddVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *StaticRouteAddVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Prefix) {
		p.Prefix = ""
	}
	if isEmpty(p.NextHop) {
		p.NextHop = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *StaticRouteAddVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-route-add"].Params["prefix"].ValidateFunc
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-route-add"].Params["next-hop"].ValidateFunc
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticRouteAddVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticRouteAddVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-route-add"]
}

func (p *StaticRouteAddVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticRouteAddVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticRouteAddVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticRouteAddVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticRouteAddVPCRouterParam) SetPrefix(v string) {
	p.Prefix = v
}

func (p *StaticRouteAddVPCRouterParam) GetPrefix() string {
	return p.Prefix
}
func (p *StaticRouteAddVPCRouterParam) SetNextHop(v string) {
	p.NextHop = v
}

func (p *StaticRouteAddVPCRouterParam) GetNextHop() string {
	return p.NextHop
}
func (p *StaticRouteAddVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticRouteAddVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticRouteAddVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticRouteAddVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticRouteAddVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticRouteAddVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticRouteAddVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticRouteAddVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticRouteAddVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticRouteAddVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticRouteAddVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticRouteAddVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticRouteAddVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticRouteAddVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticRouteAddVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticRouteAddVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// StaticRouteUpdateVPCRouterParam is input parameters for the sacloud API
type StaticRouteUpdateVPCRouterParam struct {
	Index             int        `json:"index"`
	Prefix            string     `json:"prefix"`
	NextHop           string     `json:"next-hop"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewStaticRouteUpdateVPCRouterParam return new StaticRouteUpdateVPCRouterParam
func NewStaticRouteUpdateVPCRouterParam() *StaticRouteUpdateVPCRouterParam {
	return &StaticRouteUpdateVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *StaticRouteUpdateVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Prefix) {
		p.Prefix = ""
	}
	if isEmpty(p.NextHop) {
		p.NextHop = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *StaticRouteUpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-route-update"].Params["prefix"].ValidateFunc
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-route-update"].Params["next-hop"].ValidateFunc
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticRouteUpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticRouteUpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-route-update"]
}

func (p *StaticRouteUpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticRouteUpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticRouteUpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticRouteUpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticRouteUpdateVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticRouteUpdateVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *StaticRouteUpdateVPCRouterParam) SetPrefix(v string) {
	p.Prefix = v
}

func (p *StaticRouteUpdateVPCRouterParam) GetPrefix() string {
	return p.Prefix
}
func (p *StaticRouteUpdateVPCRouterParam) SetNextHop(v string) {
	p.NextHop = v
}

func (p *StaticRouteUpdateVPCRouterParam) GetNextHop() string {
	return p.NextHop
}
func (p *StaticRouteUpdateVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticRouteUpdateVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticRouteUpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticRouteUpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticRouteUpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticRouteUpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticRouteUpdateVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticRouteUpdateVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticRouteUpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticRouteUpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticRouteUpdateVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticRouteUpdateVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticRouteUpdateVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticRouteUpdateVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticRouteUpdateVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticRouteUpdateVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// StaticRouteDeleteVPCRouterParam is input parameters for the sacloud API
type StaticRouteDeleteVPCRouterParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewStaticRouteDeleteVPCRouterParam return new StaticRouteDeleteVPCRouterParam
func NewStaticRouteDeleteVPCRouterParam() *StaticRouteDeleteVPCRouterParam {
	return &StaticRouteDeleteVPCRouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *StaticRouteDeleteVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *StaticRouteDeleteVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticRouteDeleteVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticRouteDeleteVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-route-delete"]
}

func (p *StaticRouteDeleteVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticRouteDeleteVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticRouteDeleteVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticRouteDeleteVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticRouteDeleteVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticRouteDeleteVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *StaticRouteDeleteVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticRouteDeleteVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticRouteDeleteVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticRouteDeleteVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticRouteDeleteVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticRouteDeleteVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticRouteDeleteVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticRouteDeleteVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticRouteDeleteVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticRouteDeleteVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticRouteDeleteVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticRouteDeleteVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticRouteDeleteVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticRouteDeleteVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticRouteDeleteVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticRouteDeleteVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// MonitorVPCRouterParam is input parameters for the sacloud API
type MonitorVPCRouterParam struct {
	Interface         string     `json:"interface"`
	Start             string     `json:"start"`
	End               string     `json:"end"`
	KeyFormat         string     `json:"key-format"`
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewMonitorVPCRouterParam return new MonitorVPCRouterParam
func NewMonitorVPCRouterParam() *MonitorVPCRouterParam {
	return &MonitorVPCRouterParam{

		Interface: "0",
		KeyFormat: "sakuracloud.vpcrouter.{{.ID}}.nic.{{.Index}}",
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *MonitorVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.Interface) {
		p.Interface = ""
	}
	if isEmpty(p.Start) {
		p.Start = ""
	}
	if isEmpty(p.End) {
		p.End = ""
	}
	if isEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *MonitorVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["monitor"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["monitor"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["monitor"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *MonitorVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *MonitorVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["monitor"]
}

func (p *MonitorVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *MonitorVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *MonitorVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *MonitorVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *MonitorVPCRouterParam) SetInterface(v string) {
	p.Interface = v
}

func (p *MonitorVPCRouterParam) GetInterface() string {
	return p.Interface
}
func (p *MonitorVPCRouterParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorVPCRouterParam) GetStart() string {
	return p.Start
}
func (p *MonitorVPCRouterParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorVPCRouterParam) GetEnd() string {
	return p.End
}
func (p *MonitorVPCRouterParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorVPCRouterParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *MonitorVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *MonitorVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *MonitorVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *MonitorVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *MonitorVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *MonitorVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *MonitorVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *MonitorVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *MonitorVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *MonitorVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *MonitorVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *MonitorVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *MonitorVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *MonitorVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *MonitorVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *MonitorVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *MonitorVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *MonitorVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *MonitorVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *MonitorVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *MonitorVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *MonitorVPCRouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *MonitorVPCRouterParam) GetQuery() string {
	return p.Query
}
func (p *MonitorVPCRouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *MonitorVPCRouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *MonitorVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *MonitorVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

// LogsVPCRouterParam is input parameters for the sacloud API
type LogsVPCRouterParam struct {
	LogName           string     `json:"log-name"`
	Follow            bool       `json:"follow"`
	RefreshInterval   int64      `json:"refresh-interval"`
	ListLogNames      bool       `json:"list-log-names"`
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewLogsVPCRouterParam return new LogsVPCRouterParam
func NewLogsVPCRouterParam() *LogsVPCRouterParam {
	return &LogsVPCRouterParam{

		LogName:         "all",
		RefreshInterval: 3,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *LogsVPCRouterParam) FillValueToSkeleton() {
	if isEmpty(p.LogName) {
		p.LogName = ""
	}
	if isEmpty(p.Follow) {
		p.Follow = false
	}
	if isEmpty(p.RefreshInterval) {
		p.RefreshInterval = 0
	}
	if isEmpty(p.ListLogNames) {
		p.ListLogNames = false
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *LogsVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["VPCRouter"].Commands["logs"].Params["log-name"].ValidateFunc
		errs := validator("--log-name", p.LogName)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["logs"].Params["refresh-interval"].ValidateFunc
		errs := validator("--refresh-interval", p.RefreshInterval)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *LogsVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *LogsVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["logs"]
}

func (p *LogsVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *LogsVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *LogsVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *LogsVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *LogsVPCRouterParam) SetLogName(v string) {
	p.LogName = v
}

func (p *LogsVPCRouterParam) GetLogName() string {
	return p.LogName
}
func (p *LogsVPCRouterParam) SetFollow(v bool) {
	p.Follow = v
}

func (p *LogsVPCRouterParam) GetFollow() bool {
	return p.Follow
}
func (p *LogsVPCRouterParam) SetRefreshInterval(v int64) {
	p.RefreshInterval = v
}

func (p *LogsVPCRouterParam) GetRefreshInterval() int64 {
	return p.RefreshInterval
}
func (p *LogsVPCRouterParam) SetListLogNames(v bool) {
	p.ListLogNames = v
}

func (p *LogsVPCRouterParam) GetListLogNames() bool {
	return p.ListLogNames
}
func (p *LogsVPCRouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *LogsVPCRouterParam) GetSelector() []string {
	return p.Selector
}
func (p *LogsVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *LogsVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *LogsVPCRouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *LogsVPCRouterParam) GetParameters() string {
	return p.Parameters
}
func (p *LogsVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *LogsVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *LogsVPCRouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *LogsVPCRouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *LogsVPCRouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *LogsVPCRouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *LogsVPCRouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *LogsVPCRouterParam) GetId() sacloud.ID {
	return p.Id
}

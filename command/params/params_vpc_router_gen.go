// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListVpcrouterParam is input parameters for the sacloud API
type ListVpcrouterParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Tags              []string     `json:"tags"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`
}

// NewListVpcrouterParam return new ListVpcrouterParam
func NewListVpcrouterParam() *ListVpcrouterParam {
	return &ListVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ListVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = []string{""}
	}
	if isEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.From) {
		p.From = 0
	}
	if isEmpty(p.Max) {
		p.Max = 0
	}
	if isEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *ListVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ListVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListVpcrouterParam) SetName(v []string) {
	p.Name = v
}

func (p *ListVpcrouterParam) GetName() []string {
	return p.Name
}
func (p *ListVpcrouterParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListVpcrouterParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListVpcrouterParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListVpcrouterParam) GetTags() []string {
	return p.Tags
}
func (p *ListVpcrouterParam) SetFrom(v int) {
	p.From = v
}

func (p *ListVpcrouterParam) GetFrom() int {
	return p.From
}
func (p *ListVpcrouterParam) SetMax(v int) {
	p.Max = v
}

func (p *ListVpcrouterParam) GetMax() int {
	return p.Max
}
func (p *ListVpcrouterParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListVpcrouterParam) GetSort() []string {
	return p.Sort
}
func (p *ListVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *ListVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListVpcrouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListVpcrouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListVpcrouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListVpcrouterParam) GetColumn() []string {
	return p.Column
}
func (p *ListVpcrouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListVpcrouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListVpcrouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListVpcrouterParam) GetFormat() string {
	return p.Format
}
func (p *ListVpcrouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListVpcrouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListVpcrouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListVpcrouterParam) GetQuery() string {
	return p.Query
}
func (p *ListVpcrouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListVpcrouterParam) GetQueryFile() string {
	return p.QueryFile
}

// CreateVpcrouterParam is input parameters for the sacloud API
type CreateVpcrouterParam struct {
	Plan                      string     `json:"plan"`
	SwitchId                  sacloud.ID `json:"switch-id"`
	Vrid                      int        `json:"vrid"`
	Vip                       string     `json:"vip"`
	Ipaddress1                string     `json:"ipaddress-1"`
	Ipaddress2                string     `json:"ipaddress-2"`
	DisableInternetConnection bool       `json:"disable-internet-connection"`
	BootAfterCreate           bool       `json:"boot-after-create"`
	Name                      string     `json:"name"`
	Description               string     `json:"description"`
	Tags                      []string   `json:"tags"`
	IconId                    sacloud.ID `json:"icon-id"`
	Assumeyes                 bool       `json:"assumeyes"`
	ParamTemplate             string     `json:"param-template"`
	Parameters                string     `json:"parameters"`
	ParamTemplateFile         string     `json:"param-template-file"`
	ParameterFile             string     `json:"parameter-file"`
	GenerateSkeleton          bool       `json:"generate-skeleton"`
	OutputType                string     `json:"output-type"`
	Column                    []string   `json:"column"`
	Quiet                     bool       `json:"quiet"`
	Format                    string     `json:"format"`
	FormatFile                string     `json:"format-file"`
	Query                     string     `json:"query"`
	QueryFile                 string     `json:"query-file"`
}

// NewCreateVpcrouterParam return new CreateVpcrouterParam
func NewCreateVpcrouterParam() *CreateVpcrouterParam {
	return &CreateVpcrouterParam{

		Plan: "standard",
		Vrid: 1,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *CreateVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Plan) {
		p.Plan = ""
	}
	if isEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if isEmpty(p.Vrid) {
		p.Vrid = 0
	}
	if isEmpty(p.Vip) {
		p.Vip = ""
	}
	if isEmpty(p.Ipaddress1) {
		p.Ipaddress1 = ""
	}
	if isEmpty(p.Ipaddress2) {
		p.Ipaddress2 = ""
	}
	if isEmpty(p.DisableInternetConnection) {
		p.DisableInternetConnection = false
	}
	if isEmpty(p.BootAfterCreate) {
		p.BootAfterCreate = false
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *CreateVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--vrid", p.Vrid)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["ipaddress2"].ValidateFunc
		errs := validator("--ipaddress-2", p.Ipaddress2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreateVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *CreateVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreateVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreateVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreateVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreateVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreateVpcrouterParam) SetPlan(v string) {
	p.Plan = v
}

func (p *CreateVpcrouterParam) GetPlan() string {
	return p.Plan
}
func (p *CreateVpcrouterParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *CreateVpcrouterParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *CreateVpcrouterParam) SetVrid(v int) {
	p.Vrid = v
}

func (p *CreateVpcrouterParam) GetVrid() int {
	return p.Vrid
}
func (p *CreateVpcrouterParam) SetVip(v string) {
	p.Vip = v
}

func (p *CreateVpcrouterParam) GetVip() string {
	return p.Vip
}
func (p *CreateVpcrouterParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *CreateVpcrouterParam) GetIpaddress1() string {
	return p.Ipaddress1
}
func (p *CreateVpcrouterParam) SetIpaddress2(v string) {
	p.Ipaddress2 = v
}

func (p *CreateVpcrouterParam) GetIpaddress2() string {
	return p.Ipaddress2
}
func (p *CreateVpcrouterParam) SetDisableInternetConnection(v bool) {
	p.DisableInternetConnection = v
}

func (p *CreateVpcrouterParam) GetDisableInternetConnection() bool {
	return p.DisableInternetConnection
}
func (p *CreateVpcrouterParam) SetBootAfterCreate(v bool) {
	p.BootAfterCreate = v
}

func (p *CreateVpcrouterParam) GetBootAfterCreate() bool {
	return p.BootAfterCreate
}
func (p *CreateVpcrouterParam) SetName(v string) {
	p.Name = v
}

func (p *CreateVpcrouterParam) GetName() string {
	return p.Name
}
func (p *CreateVpcrouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateVpcrouterParam) GetDescription() string {
	return p.Description
}
func (p *CreateVpcrouterParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateVpcrouterParam) GetTags() []string {
	return p.Tags
}
func (p *CreateVpcrouterParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateVpcrouterParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateVpcrouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateVpcrouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateVpcrouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateVpcrouterParam) GetColumn() []string {
	return p.Column
}
func (p *CreateVpcrouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateVpcrouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateVpcrouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateVpcrouterParam) GetFormat() string {
	return p.Format
}
func (p *CreateVpcrouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateVpcrouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateVpcrouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateVpcrouterParam) GetQuery() string {
	return p.Query
}
func (p *CreateVpcrouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateVpcrouterParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadVpcrouterParam is input parameters for the sacloud API
type ReadVpcrouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewReadVpcrouterParam return new ReadVpcrouterParam
func NewReadVpcrouterParam() *ReadVpcrouterParam {
	return &ReadVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ReadVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ReadVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ReadVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadVpcrouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadVpcrouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadVpcrouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadVpcrouterParam) GetColumn() []string {
	return p.Column
}
func (p *ReadVpcrouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadVpcrouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadVpcrouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadVpcrouterParam) GetFormat() string {
	return p.Format
}
func (p *ReadVpcrouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadVpcrouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadVpcrouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadVpcrouterParam) GetQuery() string {
	return p.Query
}
func (p *ReadVpcrouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadVpcrouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// UpdateVpcrouterParam is input parameters for the sacloud API
type UpdateVpcrouterParam struct {
	SyslogHost         string     `json:"syslog-host"`
	InternetConnection bool       `json:"internet-connection"`
	Selector           []string   `json:"selector"`
	Name               string     `json:"name"`
	Description        string     `json:"description"`
	Tags               []string   `json:"tags"`
	IconId             sacloud.ID `json:"icon-id"`
	Assumeyes          bool       `json:"assumeyes"`
	ParamTemplate      string     `json:"param-template"`
	Parameters         string     `json:"parameters"`
	ParamTemplateFile  string     `json:"param-template-file"`
	ParameterFile      string     `json:"parameter-file"`
	GenerateSkeleton   bool       `json:"generate-skeleton"`
	OutputType         string     `json:"output-type"`
	Column             []string   `json:"column"`
	Quiet              bool       `json:"quiet"`
	Format             string     `json:"format"`
	FormatFile         string     `json:"format-file"`
	Query              string     `json:"query"`
	QueryFile          string     `json:"query-file"`
	Id                 sacloud.ID `json:"id"`
}

// NewUpdateVpcrouterParam return new UpdateVpcrouterParam
func NewUpdateVpcrouterParam() *UpdateVpcrouterParam {
	return &UpdateVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UpdateVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.SyslogHost) {
		p.SyslogHost = ""
	}
	if isEmpty(p.InternetConnection) {
		p.InternetConnection = false
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UpdateVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["syslog-host"].ValidateFunc
		errs := validator("--syslog-host", p.SyslogHost)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdateVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UpdateVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdateVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdateVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdateVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdateVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdateVpcrouterParam) SetSyslogHost(v string) {
	p.SyslogHost = v
}

func (p *UpdateVpcrouterParam) GetSyslogHost() string {
	return p.SyslogHost
}
func (p *UpdateVpcrouterParam) SetInternetConnection(v bool) {
	p.InternetConnection = v
}

func (p *UpdateVpcrouterParam) GetInternetConnection() bool {
	return p.InternetConnection
}
func (p *UpdateVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateVpcrouterParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateVpcrouterParam) GetName() string {
	return p.Name
}
func (p *UpdateVpcrouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateVpcrouterParam) GetDescription() string {
	return p.Description
}
func (p *UpdateVpcrouterParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateVpcrouterParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateVpcrouterParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateVpcrouterParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateVpcrouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateVpcrouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateVpcrouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateVpcrouterParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateVpcrouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateVpcrouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateVpcrouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateVpcrouterParam) GetFormat() string {
	return p.Format
}
func (p *UpdateVpcrouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateVpcrouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateVpcrouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateVpcrouterParam) GetQuery() string {
	return p.Query
}
func (p *UpdateVpcrouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateVpcrouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteVpcrouterParam is input parameters for the sacloud API
type DeleteVpcrouterParam struct {
	Force             bool       `json:"force"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewDeleteVpcrouterParam return new DeleteVpcrouterParam
func NewDeleteVpcrouterParam() *DeleteVpcrouterParam {
	return &DeleteVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DeleteVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Force) {
		p.Force = false
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DeleteVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DeleteVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteVpcrouterParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteVpcrouterParam) GetForce() bool {
	return p.Force
}
func (p *DeleteVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteVpcrouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteVpcrouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteVpcrouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteVpcrouterParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteVpcrouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteVpcrouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteVpcrouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteVpcrouterParam) GetFormat() string {
	return p.Format
}
func (p *DeleteVpcrouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteVpcrouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteVpcrouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteVpcrouterParam) GetQuery() string {
	return p.Query
}
func (p *DeleteVpcrouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteVpcrouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// BootVpcrouterParam is input parameters for the sacloud API
type BootVpcrouterParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewBootVpcrouterParam return new BootVpcrouterParam
func NewBootVpcrouterParam() *BootVpcrouterParam {
	return &BootVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *BootVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *BootVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *BootVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *BootVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["boot"]
}

func (p *BootVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *BootVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *BootVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *BootVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *BootVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *BootVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *BootVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BootVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BootVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BootVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BootVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *BootVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *BootVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BootVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BootVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *BootVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *BootVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BootVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BootVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *BootVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// ShutdownVpcrouterParam is input parameters for the sacloud API
type ShutdownVpcrouterParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewShutdownVpcrouterParam return new ShutdownVpcrouterParam
func NewShutdownVpcrouterParam() *ShutdownVpcrouterParam {
	return &ShutdownVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ShutdownVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ShutdownVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ShutdownVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ShutdownVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["shutdown"]
}

func (p *ShutdownVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ShutdownVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ShutdownVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ShutdownVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ShutdownVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ShutdownVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *ShutdownVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ShutdownVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ShutdownVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ShutdownVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ShutdownVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ShutdownVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *ShutdownVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ShutdownVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ShutdownVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ShutdownVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ShutdownVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ShutdownVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ShutdownVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ShutdownVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// ShutdownForceVpcrouterParam is input parameters for the sacloud API
type ShutdownForceVpcrouterParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewShutdownForceVpcrouterParam return new ShutdownForceVpcrouterParam
func NewShutdownForceVpcrouterParam() *ShutdownForceVpcrouterParam {
	return &ShutdownForceVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ShutdownForceVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ShutdownForceVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ShutdownForceVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ShutdownForceVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["shutdown-force"]
}

func (p *ShutdownForceVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ShutdownForceVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ShutdownForceVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ShutdownForceVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ShutdownForceVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ShutdownForceVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *ShutdownForceVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ShutdownForceVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ShutdownForceVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ShutdownForceVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ShutdownForceVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ShutdownForceVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *ShutdownForceVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ShutdownForceVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ShutdownForceVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ShutdownForceVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ShutdownForceVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ShutdownForceVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ShutdownForceVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ShutdownForceVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// ResetVpcrouterParam is input parameters for the sacloud API
type ResetVpcrouterParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewResetVpcrouterParam return new ResetVpcrouterParam
func NewResetVpcrouterParam() *ResetVpcrouterParam {
	return &ResetVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ResetVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ResetVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ResetVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ResetVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["reset"]
}

func (p *ResetVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ResetVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ResetVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ResetVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ResetVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ResetVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *ResetVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ResetVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ResetVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ResetVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ResetVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ResetVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *ResetVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ResetVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ResetVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ResetVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ResetVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ResetVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ResetVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ResetVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// WaitForBootVpcrouterParam is input parameters for the sacloud API
type WaitForBootVpcrouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewWaitForBootVpcrouterParam return new WaitForBootVpcrouterParam
func NewWaitForBootVpcrouterParam() *WaitForBootVpcrouterParam {
	return &WaitForBootVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *WaitForBootVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *WaitForBootVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *WaitForBootVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *WaitForBootVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["wait-for-boot"]
}

func (p *WaitForBootVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *WaitForBootVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *WaitForBootVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *WaitForBootVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *WaitForBootVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *WaitForBootVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *WaitForBootVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForBootVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForBootVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *WaitForBootVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *WaitForBootVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForBootVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForBootVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *WaitForBootVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *WaitForBootVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForBootVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForBootVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *WaitForBootVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// WaitForDownVpcrouterParam is input parameters for the sacloud API
type WaitForDownVpcrouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewWaitForDownVpcrouterParam return new WaitForDownVpcrouterParam
func NewWaitForDownVpcrouterParam() *WaitForDownVpcrouterParam {
	return &WaitForDownVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *WaitForDownVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *WaitForDownVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *WaitForDownVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *WaitForDownVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["wait-for-down"]
}

func (p *WaitForDownVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *WaitForDownVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *WaitForDownVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *WaitForDownVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *WaitForDownVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *WaitForDownVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *WaitForDownVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForDownVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForDownVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *WaitForDownVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *WaitForDownVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForDownVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForDownVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *WaitForDownVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *WaitForDownVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForDownVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForDownVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *WaitForDownVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// EnableInternetConnectionVpcrouterParam is input parameters for the sacloud API
type EnableInternetConnectionVpcrouterParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewEnableInternetConnectionVpcrouterParam return new EnableInternetConnectionVpcrouterParam
func NewEnableInternetConnectionVpcrouterParam() *EnableInternetConnectionVpcrouterParam {
	return &EnableInternetConnectionVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *EnableInternetConnectionVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *EnableInternetConnectionVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *EnableInternetConnectionVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *EnableInternetConnectionVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["enable-internet-connection"]
}

func (p *EnableInternetConnectionVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *EnableInternetConnectionVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *EnableInternetConnectionVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *EnableInternetConnectionVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *EnableInternetConnectionVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *EnableInternetConnectionVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *EnableInternetConnectionVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *EnableInternetConnectionVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *EnableInternetConnectionVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *EnableInternetConnectionVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *EnableInternetConnectionVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *EnableInternetConnectionVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *EnableInternetConnectionVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *EnableInternetConnectionVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *EnableInternetConnectionVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *EnableInternetConnectionVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *EnableInternetConnectionVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *EnableInternetConnectionVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *EnableInternetConnectionVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *EnableInternetConnectionVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// DisableInternetConnectionVpcrouterParam is input parameters for the sacloud API
type DisableInternetConnectionVpcrouterParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewDisableInternetConnectionVpcrouterParam return new DisableInternetConnectionVpcrouterParam
func NewDisableInternetConnectionVpcrouterParam() *DisableInternetConnectionVpcrouterParam {
	return &DisableInternetConnectionVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DisableInternetConnectionVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DisableInternetConnectionVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DisableInternetConnectionVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DisableInternetConnectionVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["disable-internet-connection"]
}

func (p *DisableInternetConnectionVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DisableInternetConnectionVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DisableInternetConnectionVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DisableInternetConnectionVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DisableInternetConnectionVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DisableInternetConnectionVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *DisableInternetConnectionVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DisableInternetConnectionVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DisableInternetConnectionVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DisableInternetConnectionVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DisableInternetConnectionVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DisableInternetConnectionVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *DisableInternetConnectionVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DisableInternetConnectionVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DisableInternetConnectionVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DisableInternetConnectionVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DisableInternetConnectionVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DisableInternetConnectionVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DisableInternetConnectionVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DisableInternetConnectionVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// InterfaceInfoVpcrouterParam is input parameters for the sacloud API
type InterfaceInfoVpcrouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewInterfaceInfoVpcrouterParam return new InterfaceInfoVpcrouterParam
func NewInterfaceInfoVpcrouterParam() *InterfaceInfoVpcrouterParam {
	return &InterfaceInfoVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *InterfaceInfoVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *InterfaceInfoVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *InterfaceInfoVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *InterfaceInfoVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["interface-info"]
}

func (p *InterfaceInfoVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *InterfaceInfoVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *InterfaceInfoVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *InterfaceInfoVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *InterfaceInfoVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *InterfaceInfoVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *InterfaceInfoVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceInfoVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceInfoVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *InterfaceInfoVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *InterfaceInfoVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceInfoVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceInfoVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *InterfaceInfoVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *InterfaceInfoVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceInfoVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceInfoVpcrouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *InterfaceInfoVpcrouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *InterfaceInfoVpcrouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *InterfaceInfoVpcrouterParam) GetColumn() []string {
	return p.Column
}
func (p *InterfaceInfoVpcrouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *InterfaceInfoVpcrouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *InterfaceInfoVpcrouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *InterfaceInfoVpcrouterParam) GetFormat() string {
	return p.Format
}
func (p *InterfaceInfoVpcrouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *InterfaceInfoVpcrouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *InterfaceInfoVpcrouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *InterfaceInfoVpcrouterParam) GetQuery() string {
	return p.Query
}
func (p *InterfaceInfoVpcrouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *InterfaceInfoVpcrouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *InterfaceInfoVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *InterfaceInfoVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// InterfaceConnectVpcrouterParam is input parameters for the sacloud API
type InterfaceConnectVpcrouterParam struct {
	Interface         string     `json:"interface"`
	Ipaddress         string     `json:"ipaddress"`
	WithReboot        bool       `json:"with-reboot"`
	Ipaddress1        string     `json:"ipaddress-1"`
	SwitchId          sacloud.ID `json:"switch-id"`
	Ipaddress2        string     `json:"ipaddress-2"`
	NwMasklen         int        `json:"nw-masklen"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewInterfaceConnectVpcrouterParam return new InterfaceConnectVpcrouterParam
func NewInterfaceConnectVpcrouterParam() *InterfaceConnectVpcrouterParam {
	return &InterfaceConnectVpcrouterParam{

		NwMasklen: 24,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *InterfaceConnectVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Interface) {
		p.Interface = ""
	}
	if isEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if isEmpty(p.WithReboot) {
		p.WithReboot = false
	}
	if isEmpty(p.Ipaddress1) {
		p.Ipaddress1 = ""
	}
	if isEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if isEmpty(p.Ipaddress2) {
		p.Ipaddress2 = ""
	}
	if isEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *InterfaceConnectVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["ipaddress2"].ValidateFunc
		errs := validator("--ipaddress-2", p.Ipaddress2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *InterfaceConnectVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *InterfaceConnectVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["interface-connect"]
}

func (p *InterfaceConnectVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *InterfaceConnectVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *InterfaceConnectVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *InterfaceConnectVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *InterfaceConnectVpcrouterParam) SetInterface(v string) {
	p.Interface = v
}

func (p *InterfaceConnectVpcrouterParam) GetInterface() string {
	return p.Interface
}
func (p *InterfaceConnectVpcrouterParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *InterfaceConnectVpcrouterParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *InterfaceConnectVpcrouterParam) SetWithReboot(v bool) {
	p.WithReboot = v
}

func (p *InterfaceConnectVpcrouterParam) GetWithReboot() bool {
	return p.WithReboot
}
func (p *InterfaceConnectVpcrouterParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *InterfaceConnectVpcrouterParam) GetIpaddress1() string {
	return p.Ipaddress1
}
func (p *InterfaceConnectVpcrouterParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *InterfaceConnectVpcrouterParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *InterfaceConnectVpcrouterParam) SetIpaddress2(v string) {
	p.Ipaddress2 = v
}

func (p *InterfaceConnectVpcrouterParam) GetIpaddress2() string {
	return p.Ipaddress2
}
func (p *InterfaceConnectVpcrouterParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *InterfaceConnectVpcrouterParam) GetNwMasklen() int {
	return p.NwMasklen
}
func (p *InterfaceConnectVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *InterfaceConnectVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *InterfaceConnectVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceConnectVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceConnectVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceConnectVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceConnectVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *InterfaceConnectVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *InterfaceConnectVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceConnectVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceConnectVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *InterfaceConnectVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *InterfaceConnectVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceConnectVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceConnectVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *InterfaceConnectVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// InterfaceUpdateVpcrouterParam is input parameters for the sacloud API
type InterfaceUpdateVpcrouterParam struct {
	Interface         string     `json:"interface"`
	Ipaddress         string     `json:"ipaddress"`
	WithReboot        bool       `json:"with-reboot"`
	Ipaddress1        string     `json:"ipaddress-1"`
	SwitchId          sacloud.ID `json:"switch-id"`
	Ipaddress2        string     `json:"ipaddress-2"`
	Alias             []string   `json:"alias"`
	NwMasklen         int        `json:"nw-masklen"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewInterfaceUpdateVpcrouterParam return new InterfaceUpdateVpcrouterParam
func NewInterfaceUpdateVpcrouterParam() *InterfaceUpdateVpcrouterParam {
	return &InterfaceUpdateVpcrouterParam{

		NwMasklen: 24,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *InterfaceUpdateVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Interface) {
		p.Interface = ""
	}
	if isEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if isEmpty(p.WithReboot) {
		p.WithReboot = false
	}
	if isEmpty(p.Ipaddress1) {
		p.Ipaddress1 = ""
	}
	if isEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if isEmpty(p.Ipaddress2) {
		p.Ipaddress2 = ""
	}
	if isEmpty(p.Alias) {
		p.Alias = []string{""}
	}
	if isEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *InterfaceUpdateVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["ipaddress2"].ValidateFunc
		errs := validator("--ipaddress-2", p.Ipaddress2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["alias"].ValidateFunc
		errs := validator("--alias", p.Alias)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *InterfaceUpdateVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *InterfaceUpdateVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["interface-update"]
}

func (p *InterfaceUpdateVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *InterfaceUpdateVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *InterfaceUpdateVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *InterfaceUpdateVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *InterfaceUpdateVpcrouterParam) SetInterface(v string) {
	p.Interface = v
}

func (p *InterfaceUpdateVpcrouterParam) GetInterface() string {
	return p.Interface
}
func (p *InterfaceUpdateVpcrouterParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *InterfaceUpdateVpcrouterParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *InterfaceUpdateVpcrouterParam) SetWithReboot(v bool) {
	p.WithReboot = v
}

func (p *InterfaceUpdateVpcrouterParam) GetWithReboot() bool {
	return p.WithReboot
}
func (p *InterfaceUpdateVpcrouterParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *InterfaceUpdateVpcrouterParam) GetIpaddress1() string {
	return p.Ipaddress1
}
func (p *InterfaceUpdateVpcrouterParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *InterfaceUpdateVpcrouterParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *InterfaceUpdateVpcrouterParam) SetIpaddress2(v string) {
	p.Ipaddress2 = v
}

func (p *InterfaceUpdateVpcrouterParam) GetIpaddress2() string {
	return p.Ipaddress2
}
func (p *InterfaceUpdateVpcrouterParam) SetAlias(v []string) {
	p.Alias = v
}

func (p *InterfaceUpdateVpcrouterParam) GetAlias() []string {
	return p.Alias
}
func (p *InterfaceUpdateVpcrouterParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *InterfaceUpdateVpcrouterParam) GetNwMasklen() int {
	return p.NwMasklen
}
func (p *InterfaceUpdateVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *InterfaceUpdateVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *InterfaceUpdateVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceUpdateVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceUpdateVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceUpdateVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceUpdateVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *InterfaceUpdateVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *InterfaceUpdateVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceUpdateVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceUpdateVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *InterfaceUpdateVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *InterfaceUpdateVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceUpdateVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceUpdateVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *InterfaceUpdateVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// InterfaceDisconnectVpcrouterParam is input parameters for the sacloud API
type InterfaceDisconnectVpcrouterParam struct {
	Interface         string     `json:"interface"`
	WithReboot        bool       `json:"with-reboot"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewInterfaceDisconnectVpcrouterParam return new InterfaceDisconnectVpcrouterParam
func NewInterfaceDisconnectVpcrouterParam() *InterfaceDisconnectVpcrouterParam {
	return &InterfaceDisconnectVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *InterfaceDisconnectVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Interface) {
		p.Interface = ""
	}
	if isEmpty(p.WithReboot) {
		p.WithReboot = false
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *InterfaceDisconnectVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-disconnect"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *InterfaceDisconnectVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *InterfaceDisconnectVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["interface-disconnect"]
}

func (p *InterfaceDisconnectVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *InterfaceDisconnectVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *InterfaceDisconnectVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *InterfaceDisconnectVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *InterfaceDisconnectVpcrouterParam) SetInterface(v string) {
	p.Interface = v
}

func (p *InterfaceDisconnectVpcrouterParam) GetInterface() string {
	return p.Interface
}
func (p *InterfaceDisconnectVpcrouterParam) SetWithReboot(v bool) {
	p.WithReboot = v
}

func (p *InterfaceDisconnectVpcrouterParam) GetWithReboot() bool {
	return p.WithReboot
}
func (p *InterfaceDisconnectVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *InterfaceDisconnectVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *InterfaceDisconnectVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceDisconnectVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceDisconnectVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceDisconnectVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceDisconnectVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *InterfaceDisconnectVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *InterfaceDisconnectVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceDisconnectVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceDisconnectVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *InterfaceDisconnectVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *InterfaceDisconnectVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceDisconnectVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceDisconnectVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *InterfaceDisconnectVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// StaticNatInfoVpcrouterParam is input parameters for the sacloud API
type StaticNatInfoVpcrouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewStaticNatInfoVpcrouterParam return new StaticNatInfoVpcrouterParam
func NewStaticNatInfoVpcrouterParam() *StaticNatInfoVpcrouterParam {
	return &StaticNatInfoVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *StaticNatInfoVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *StaticNatInfoVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticNatInfoVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticNatInfoVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-nat-info"]
}

func (p *StaticNatInfoVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticNatInfoVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticNatInfoVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticNatInfoVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticNatInfoVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticNatInfoVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticNatInfoVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticNatInfoVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticNatInfoVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticNatInfoVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticNatInfoVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticNatInfoVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticNatInfoVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticNatInfoVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticNatInfoVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticNatInfoVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticNatInfoVpcrouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *StaticNatInfoVpcrouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *StaticNatInfoVpcrouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *StaticNatInfoVpcrouterParam) GetColumn() []string {
	return p.Column
}
func (p *StaticNatInfoVpcrouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *StaticNatInfoVpcrouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *StaticNatInfoVpcrouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *StaticNatInfoVpcrouterParam) GetFormat() string {
	return p.Format
}
func (p *StaticNatInfoVpcrouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *StaticNatInfoVpcrouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *StaticNatInfoVpcrouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *StaticNatInfoVpcrouterParam) GetQuery() string {
	return p.Query
}
func (p *StaticNatInfoVpcrouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *StaticNatInfoVpcrouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *StaticNatInfoVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticNatInfoVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// StaticNatAddVpcrouterParam is input parameters for the sacloud API
type StaticNatAddVpcrouterParam struct {
	Global            string     `json:"global"`
	Private           string     `json:"private"`
	Description       string     `json:"description"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewStaticNatAddVpcrouterParam return new StaticNatAddVpcrouterParam
func NewStaticNatAddVpcrouterParam() *StaticNatAddVpcrouterParam {
	return &StaticNatAddVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *StaticNatAddVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Global) {
		p.Global = ""
	}
	if isEmpty(p.Private) {
		p.Private = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *StaticNatAddVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--global", p.Global)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-add"].Params["global"].ValidateFunc
		errs := validator("--global", p.Global)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--private", p.Private)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-add"].Params["private"].ValidateFunc
		errs := validator("--private", p.Private)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-add"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticNatAddVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticNatAddVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-nat-add"]
}

func (p *StaticNatAddVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticNatAddVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticNatAddVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticNatAddVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticNatAddVpcrouterParam) SetGlobal(v string) {
	p.Global = v
}

func (p *StaticNatAddVpcrouterParam) GetGlobal() string {
	return p.Global
}
func (p *StaticNatAddVpcrouterParam) SetPrivate(v string) {
	p.Private = v
}

func (p *StaticNatAddVpcrouterParam) GetPrivate() string {
	return p.Private
}
func (p *StaticNatAddVpcrouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *StaticNatAddVpcrouterParam) GetDescription() string {
	return p.Description
}
func (p *StaticNatAddVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticNatAddVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticNatAddVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticNatAddVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticNatAddVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticNatAddVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticNatAddVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticNatAddVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticNatAddVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticNatAddVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticNatAddVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticNatAddVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticNatAddVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticNatAddVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticNatAddVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticNatAddVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// StaticNatUpdateVpcrouterParam is input parameters for the sacloud API
type StaticNatUpdateVpcrouterParam struct {
	Index             int        `json:"index"`
	Global            string     `json:"global"`
	Private           string     `json:"private"`
	Description       string     `json:"description"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewStaticNatUpdateVpcrouterParam return new StaticNatUpdateVpcrouterParam
func NewStaticNatUpdateVpcrouterParam() *StaticNatUpdateVpcrouterParam {
	return &StaticNatUpdateVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *StaticNatUpdateVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Global) {
		p.Global = ""
	}
	if isEmpty(p.Private) {
		p.Private = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *StaticNatUpdateVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-update"].Params["global"].ValidateFunc
		errs := validator("--global", p.Global)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-update"].Params["private"].ValidateFunc
		errs := validator("--private", p.Private)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticNatUpdateVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticNatUpdateVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-nat-update"]
}

func (p *StaticNatUpdateVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticNatUpdateVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticNatUpdateVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticNatUpdateVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticNatUpdateVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticNatUpdateVpcrouterParam) GetIndex() int {
	return p.Index
}
func (p *StaticNatUpdateVpcrouterParam) SetGlobal(v string) {
	p.Global = v
}

func (p *StaticNatUpdateVpcrouterParam) GetGlobal() string {
	return p.Global
}
func (p *StaticNatUpdateVpcrouterParam) SetPrivate(v string) {
	p.Private = v
}

func (p *StaticNatUpdateVpcrouterParam) GetPrivate() string {
	return p.Private
}
func (p *StaticNatUpdateVpcrouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *StaticNatUpdateVpcrouterParam) GetDescription() string {
	return p.Description
}
func (p *StaticNatUpdateVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticNatUpdateVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticNatUpdateVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticNatUpdateVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticNatUpdateVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticNatUpdateVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticNatUpdateVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticNatUpdateVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticNatUpdateVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticNatUpdateVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticNatUpdateVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticNatUpdateVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticNatUpdateVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticNatUpdateVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticNatUpdateVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticNatUpdateVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// StaticNatDeleteVpcrouterParam is input parameters for the sacloud API
type StaticNatDeleteVpcrouterParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewStaticNatDeleteVpcrouterParam return new StaticNatDeleteVpcrouterParam
func NewStaticNatDeleteVpcrouterParam() *StaticNatDeleteVpcrouterParam {
	return &StaticNatDeleteVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *StaticNatDeleteVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *StaticNatDeleteVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticNatDeleteVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticNatDeleteVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-nat-delete"]
}

func (p *StaticNatDeleteVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticNatDeleteVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticNatDeleteVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticNatDeleteVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticNatDeleteVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticNatDeleteVpcrouterParam) GetIndex() int {
	return p.Index
}
func (p *StaticNatDeleteVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticNatDeleteVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticNatDeleteVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticNatDeleteVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticNatDeleteVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticNatDeleteVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticNatDeleteVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticNatDeleteVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticNatDeleteVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticNatDeleteVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticNatDeleteVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticNatDeleteVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticNatDeleteVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticNatDeleteVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticNatDeleteVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticNatDeleteVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// PortForwardingInfoVpcrouterParam is input parameters for the sacloud API
type PortForwardingInfoVpcrouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewPortForwardingInfoVpcrouterParam return new PortForwardingInfoVpcrouterParam
func NewPortForwardingInfoVpcrouterParam() *PortForwardingInfoVpcrouterParam {
	return &PortForwardingInfoVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *PortForwardingInfoVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *PortForwardingInfoVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *PortForwardingInfoVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PortForwardingInfoVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["port-forwarding-info"]
}

func (p *PortForwardingInfoVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *PortForwardingInfoVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *PortForwardingInfoVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *PortForwardingInfoVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *PortForwardingInfoVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *PortForwardingInfoVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *PortForwardingInfoVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PortForwardingInfoVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PortForwardingInfoVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *PortForwardingInfoVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *PortForwardingInfoVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PortForwardingInfoVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PortForwardingInfoVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PortForwardingInfoVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PortForwardingInfoVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PortForwardingInfoVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PortForwardingInfoVpcrouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *PortForwardingInfoVpcrouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *PortForwardingInfoVpcrouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *PortForwardingInfoVpcrouterParam) GetColumn() []string {
	return p.Column
}
func (p *PortForwardingInfoVpcrouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *PortForwardingInfoVpcrouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *PortForwardingInfoVpcrouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *PortForwardingInfoVpcrouterParam) GetFormat() string {
	return p.Format
}
func (p *PortForwardingInfoVpcrouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *PortForwardingInfoVpcrouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *PortForwardingInfoVpcrouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *PortForwardingInfoVpcrouterParam) GetQuery() string {
	return p.Query
}
func (p *PortForwardingInfoVpcrouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *PortForwardingInfoVpcrouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *PortForwardingInfoVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *PortForwardingInfoVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// PortForwardingAddVpcrouterParam is input parameters for the sacloud API
type PortForwardingAddVpcrouterParam struct {
	Protocol          string     `json:"protocol"`
	GlobalPort        int        `json:"global-port"`
	PrivateIpaddress  string     `json:"private-ipaddress"`
	PrivatePort       int        `json:"private-port"`
	Description       string     `json:"description"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewPortForwardingAddVpcrouterParam return new PortForwardingAddVpcrouterParam
func NewPortForwardingAddVpcrouterParam() *PortForwardingAddVpcrouterParam {
	return &PortForwardingAddVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *PortForwardingAddVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if isEmpty(p.GlobalPort) {
		p.GlobalPort = 0
	}
	if isEmpty(p.PrivateIpaddress) {
		p.PrivateIpaddress = ""
	}
	if isEmpty(p.PrivatePort) {
		p.PrivatePort = 0
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *PortForwardingAddVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--global-port", p.GlobalPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["global-port"].ValidateFunc
		errs := validator("--global-port", p.GlobalPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--private-ipaddress", p.PrivateIpaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["private-ipaddress"].ValidateFunc
		errs := validator("--private-ipaddress", p.PrivateIpaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--private-port", p.PrivatePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["private-port"].ValidateFunc
		errs := validator("--private-port", p.PrivatePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *PortForwardingAddVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PortForwardingAddVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["port-forwarding-add"]
}

func (p *PortForwardingAddVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *PortForwardingAddVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *PortForwardingAddVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *PortForwardingAddVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *PortForwardingAddVpcrouterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *PortForwardingAddVpcrouterParam) GetProtocol() string {
	return p.Protocol
}
func (p *PortForwardingAddVpcrouterParam) SetGlobalPort(v int) {
	p.GlobalPort = v
}

func (p *PortForwardingAddVpcrouterParam) GetGlobalPort() int {
	return p.GlobalPort
}
func (p *PortForwardingAddVpcrouterParam) SetPrivateIpaddress(v string) {
	p.PrivateIpaddress = v
}

func (p *PortForwardingAddVpcrouterParam) GetPrivateIpaddress() string {
	return p.PrivateIpaddress
}
func (p *PortForwardingAddVpcrouterParam) SetPrivatePort(v int) {
	p.PrivatePort = v
}

func (p *PortForwardingAddVpcrouterParam) GetPrivatePort() int {
	return p.PrivatePort
}
func (p *PortForwardingAddVpcrouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *PortForwardingAddVpcrouterParam) GetDescription() string {
	return p.Description
}
func (p *PortForwardingAddVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *PortForwardingAddVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *PortForwardingAddVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PortForwardingAddVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PortForwardingAddVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PortForwardingAddVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PortForwardingAddVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *PortForwardingAddVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *PortForwardingAddVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PortForwardingAddVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PortForwardingAddVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PortForwardingAddVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PortForwardingAddVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PortForwardingAddVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PortForwardingAddVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *PortForwardingAddVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// PortForwardingUpdateVpcrouterParam is input parameters for the sacloud API
type PortForwardingUpdateVpcrouterParam struct {
	Index             int        `json:"index"`
	Protocol          string     `json:"protocol"`
	GlobalPort        int        `json:"global-port"`
	PrivateIpaddress  string     `json:"private-ipaddress"`
	PrivatePort       int        `json:"private-port"`
	Description       string     `json:"description"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewPortForwardingUpdateVpcrouterParam return new PortForwardingUpdateVpcrouterParam
func NewPortForwardingUpdateVpcrouterParam() *PortForwardingUpdateVpcrouterParam {
	return &PortForwardingUpdateVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *PortForwardingUpdateVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if isEmpty(p.GlobalPort) {
		p.GlobalPort = 0
	}
	if isEmpty(p.PrivateIpaddress) {
		p.PrivateIpaddress = ""
	}
	if isEmpty(p.PrivatePort) {
		p.PrivatePort = 0
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *PortForwardingUpdateVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["global-port"].ValidateFunc
		errs := validator("--global-port", p.GlobalPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["private-ipaddress"].ValidateFunc
		errs := validator("--private-ipaddress", p.PrivateIpaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["private-port"].ValidateFunc
		errs := validator("--private-port", p.PrivatePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *PortForwardingUpdateVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PortForwardingUpdateVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["port-forwarding-update"]
}

func (p *PortForwardingUpdateVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *PortForwardingUpdateVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *PortForwardingUpdateVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *PortForwardingUpdateVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *PortForwardingUpdateVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *PortForwardingUpdateVpcrouterParam) GetIndex() int {
	return p.Index
}
func (p *PortForwardingUpdateVpcrouterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *PortForwardingUpdateVpcrouterParam) GetProtocol() string {
	return p.Protocol
}
func (p *PortForwardingUpdateVpcrouterParam) SetGlobalPort(v int) {
	p.GlobalPort = v
}

func (p *PortForwardingUpdateVpcrouterParam) GetGlobalPort() int {
	return p.GlobalPort
}
func (p *PortForwardingUpdateVpcrouterParam) SetPrivateIpaddress(v string) {
	p.PrivateIpaddress = v
}

func (p *PortForwardingUpdateVpcrouterParam) GetPrivateIpaddress() string {
	return p.PrivateIpaddress
}
func (p *PortForwardingUpdateVpcrouterParam) SetPrivatePort(v int) {
	p.PrivatePort = v
}

func (p *PortForwardingUpdateVpcrouterParam) GetPrivatePort() int {
	return p.PrivatePort
}
func (p *PortForwardingUpdateVpcrouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *PortForwardingUpdateVpcrouterParam) GetDescription() string {
	return p.Description
}
func (p *PortForwardingUpdateVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *PortForwardingUpdateVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *PortForwardingUpdateVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PortForwardingUpdateVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PortForwardingUpdateVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PortForwardingUpdateVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PortForwardingUpdateVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *PortForwardingUpdateVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *PortForwardingUpdateVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PortForwardingUpdateVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PortForwardingUpdateVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PortForwardingUpdateVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PortForwardingUpdateVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PortForwardingUpdateVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PortForwardingUpdateVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *PortForwardingUpdateVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// PortForwardingDeleteVpcrouterParam is input parameters for the sacloud API
type PortForwardingDeleteVpcrouterParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewPortForwardingDeleteVpcrouterParam return new PortForwardingDeleteVpcrouterParam
func NewPortForwardingDeleteVpcrouterParam() *PortForwardingDeleteVpcrouterParam {
	return &PortForwardingDeleteVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *PortForwardingDeleteVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *PortForwardingDeleteVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *PortForwardingDeleteVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PortForwardingDeleteVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["port-forwarding-delete"]
}

func (p *PortForwardingDeleteVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *PortForwardingDeleteVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *PortForwardingDeleteVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *PortForwardingDeleteVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *PortForwardingDeleteVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *PortForwardingDeleteVpcrouterParam) GetIndex() int {
	return p.Index
}
func (p *PortForwardingDeleteVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *PortForwardingDeleteVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *PortForwardingDeleteVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PortForwardingDeleteVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PortForwardingDeleteVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PortForwardingDeleteVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PortForwardingDeleteVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *PortForwardingDeleteVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *PortForwardingDeleteVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PortForwardingDeleteVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PortForwardingDeleteVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PortForwardingDeleteVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PortForwardingDeleteVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PortForwardingDeleteVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PortForwardingDeleteVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *PortForwardingDeleteVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// FirewallInfoVpcrouterParam is input parameters for the sacloud API
type FirewallInfoVpcrouterParam struct {
	Interface         int        `json:"interface"`
	Direction         string     `json:"direction"`
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewFirewallInfoVpcrouterParam return new FirewallInfoVpcrouterParam
func NewFirewallInfoVpcrouterParam() *FirewallInfoVpcrouterParam {
	return &FirewallInfoVpcrouterParam{

		Direction: "receive",
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *FirewallInfoVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Interface) {
		p.Interface = 0
	}
	if isEmpty(p.Direction) {
		p.Direction = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *FirewallInfoVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-info"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-info"].Params["direction"].ValidateFunc
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *FirewallInfoVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *FirewallInfoVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["firewall-info"]
}

func (p *FirewallInfoVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *FirewallInfoVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *FirewallInfoVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *FirewallInfoVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *FirewallInfoVpcrouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *FirewallInfoVpcrouterParam) GetInterface() int {
	return p.Interface
}
func (p *FirewallInfoVpcrouterParam) SetDirection(v string) {
	p.Direction = v
}

func (p *FirewallInfoVpcrouterParam) GetDirection() string {
	return p.Direction
}
func (p *FirewallInfoVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *FirewallInfoVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *FirewallInfoVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *FirewallInfoVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *FirewallInfoVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *FirewallInfoVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *FirewallInfoVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *FirewallInfoVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *FirewallInfoVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *FirewallInfoVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *FirewallInfoVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *FirewallInfoVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *FirewallInfoVpcrouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *FirewallInfoVpcrouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *FirewallInfoVpcrouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *FirewallInfoVpcrouterParam) GetColumn() []string {
	return p.Column
}
func (p *FirewallInfoVpcrouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *FirewallInfoVpcrouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *FirewallInfoVpcrouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *FirewallInfoVpcrouterParam) GetFormat() string {
	return p.Format
}
func (p *FirewallInfoVpcrouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *FirewallInfoVpcrouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *FirewallInfoVpcrouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *FirewallInfoVpcrouterParam) GetQuery() string {
	return p.Query
}
func (p *FirewallInfoVpcrouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *FirewallInfoVpcrouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *FirewallInfoVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *FirewallInfoVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// FirewallAddVpcrouterParam is input parameters for the sacloud API
type FirewallAddVpcrouterParam struct {
	Interface          int        `json:"interface"`
	Direction          string     `json:"direction"`
	Protocol           string     `json:"protocol"`
	SourceNetwork      string     `json:"source-network"`
	SourcePort         int        `json:"source-port"`
	DestinationNetwork string     `json:"destination-network"`
	DestinationPort    int        `json:"destination-port"`
	Action             string     `json:"action"`
	EnableLogging      bool       `json:"enable-logging"`
	Description        string     `json:"description"`
	Selector           []string   `json:"selector"`
	Assumeyes          bool       `json:"assumeyes"`
	ParamTemplate      string     `json:"param-template"`
	Parameters         string     `json:"parameters"`
	ParamTemplateFile  string     `json:"param-template-file"`
	ParameterFile      string     `json:"parameter-file"`
	GenerateSkeleton   bool       `json:"generate-skeleton"`
	Id                 sacloud.ID `json:"id"`
}

// NewFirewallAddVpcrouterParam return new FirewallAddVpcrouterParam
func NewFirewallAddVpcrouterParam() *FirewallAddVpcrouterParam {
	return &FirewallAddVpcrouterParam{

		Direction: "receive",
		Action:    "deny",
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *FirewallAddVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Interface) {
		p.Interface = 0
	}
	if isEmpty(p.Direction) {
		p.Direction = ""
	}
	if isEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if isEmpty(p.SourceNetwork) {
		p.SourceNetwork = ""
	}
	if isEmpty(p.SourcePort) {
		p.SourcePort = 0
	}
	if isEmpty(p.DestinationNetwork) {
		p.DestinationNetwork = ""
	}
	if isEmpty(p.DestinationPort) {
		p.DestinationPort = 0
	}
	if isEmpty(p.Action) {
		p.Action = ""
	}
	if isEmpty(p.EnableLogging) {
		p.EnableLogging = false
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *FirewallAddVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["direction"].ValidateFunc
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["source-network"].ValidateFunc
		errs := validator("--source-network", p.SourceNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["source-port"].ValidateFunc
		errs := validator("--source-port", p.SourcePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["destination-network"].ValidateFunc
		errs := validator("--destination-network", p.DestinationNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["destination-port"].ValidateFunc
		errs := validator("--destination-port", p.DestinationPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["action"].ValidateFunc
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *FirewallAddVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *FirewallAddVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["firewall-add"]
}

func (p *FirewallAddVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *FirewallAddVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *FirewallAddVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *FirewallAddVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *FirewallAddVpcrouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *FirewallAddVpcrouterParam) GetInterface() int {
	return p.Interface
}
func (p *FirewallAddVpcrouterParam) SetDirection(v string) {
	p.Direction = v
}

func (p *FirewallAddVpcrouterParam) GetDirection() string {
	return p.Direction
}
func (p *FirewallAddVpcrouterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *FirewallAddVpcrouterParam) GetProtocol() string {
	return p.Protocol
}
func (p *FirewallAddVpcrouterParam) SetSourceNetwork(v string) {
	p.SourceNetwork = v
}

func (p *FirewallAddVpcrouterParam) GetSourceNetwork() string {
	return p.SourceNetwork
}
func (p *FirewallAddVpcrouterParam) SetSourcePort(v int) {
	p.SourcePort = v
}

func (p *FirewallAddVpcrouterParam) GetSourcePort() int {
	return p.SourcePort
}
func (p *FirewallAddVpcrouterParam) SetDestinationNetwork(v string) {
	p.DestinationNetwork = v
}

func (p *FirewallAddVpcrouterParam) GetDestinationNetwork() string {
	return p.DestinationNetwork
}
func (p *FirewallAddVpcrouterParam) SetDestinationPort(v int) {
	p.DestinationPort = v
}

func (p *FirewallAddVpcrouterParam) GetDestinationPort() int {
	return p.DestinationPort
}
func (p *FirewallAddVpcrouterParam) SetAction(v string) {
	p.Action = v
}

func (p *FirewallAddVpcrouterParam) GetAction() string {
	return p.Action
}
func (p *FirewallAddVpcrouterParam) SetEnableLogging(v bool) {
	p.EnableLogging = v
}

func (p *FirewallAddVpcrouterParam) GetEnableLogging() bool {
	return p.EnableLogging
}
func (p *FirewallAddVpcrouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *FirewallAddVpcrouterParam) GetDescription() string {
	return p.Description
}
func (p *FirewallAddVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *FirewallAddVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *FirewallAddVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *FirewallAddVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *FirewallAddVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *FirewallAddVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *FirewallAddVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *FirewallAddVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *FirewallAddVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *FirewallAddVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *FirewallAddVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *FirewallAddVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *FirewallAddVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *FirewallAddVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *FirewallAddVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *FirewallAddVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// FirewallUpdateVpcrouterParam is input parameters for the sacloud API
type FirewallUpdateVpcrouterParam struct {
	Interface          int        `json:"interface"`
	Direction          string     `json:"direction"`
	Index              int        `json:"index"`
	Protocol           string     `json:"protocol"`
	SourceNetwork      string     `json:"source-network"`
	SourcePort         int        `json:"source-port"`
	DestinationNetwork string     `json:"destination-network"`
	DestinationPort    int        `json:"destination-port"`
	Action             string     `json:"action"`
	EnableLogging      bool       `json:"enable-logging"`
	Description        string     `json:"description"`
	Selector           []string   `json:"selector"`
	Assumeyes          bool       `json:"assumeyes"`
	ParamTemplate      string     `json:"param-template"`
	Parameters         string     `json:"parameters"`
	ParamTemplateFile  string     `json:"param-template-file"`
	ParameterFile      string     `json:"parameter-file"`
	GenerateSkeleton   bool       `json:"generate-skeleton"`
	Id                 sacloud.ID `json:"id"`
}

// NewFirewallUpdateVpcrouterParam return new FirewallUpdateVpcrouterParam
func NewFirewallUpdateVpcrouterParam() *FirewallUpdateVpcrouterParam {
	return &FirewallUpdateVpcrouterParam{

		Direction: "receive",
		Action:    "deny",
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *FirewallUpdateVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Interface) {
		p.Interface = 0
	}
	if isEmpty(p.Direction) {
		p.Direction = ""
	}
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if isEmpty(p.SourceNetwork) {
		p.SourceNetwork = ""
	}
	if isEmpty(p.SourcePort) {
		p.SourcePort = 0
	}
	if isEmpty(p.DestinationNetwork) {
		p.DestinationNetwork = ""
	}
	if isEmpty(p.DestinationPort) {
		p.DestinationPort = 0
	}
	if isEmpty(p.Action) {
		p.Action = ""
	}
	if isEmpty(p.EnableLogging) {
		p.EnableLogging = false
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *FirewallUpdateVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["direction"].ValidateFunc
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["source-network"].ValidateFunc
		errs := validator("--source-network", p.SourceNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["source-port"].ValidateFunc
		errs := validator("--source-port", p.SourcePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["destination-network"].ValidateFunc
		errs := validator("--destination-network", p.DestinationNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["destination-port"].ValidateFunc
		errs := validator("--destination-port", p.DestinationPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["action"].ValidateFunc
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *FirewallUpdateVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *FirewallUpdateVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["firewall-update"]
}

func (p *FirewallUpdateVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *FirewallUpdateVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *FirewallUpdateVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *FirewallUpdateVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *FirewallUpdateVpcrouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *FirewallUpdateVpcrouterParam) GetInterface() int {
	return p.Interface
}
func (p *FirewallUpdateVpcrouterParam) SetDirection(v string) {
	p.Direction = v
}

func (p *FirewallUpdateVpcrouterParam) GetDirection() string {
	return p.Direction
}
func (p *FirewallUpdateVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *FirewallUpdateVpcrouterParam) GetIndex() int {
	return p.Index
}
func (p *FirewallUpdateVpcrouterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *FirewallUpdateVpcrouterParam) GetProtocol() string {
	return p.Protocol
}
func (p *FirewallUpdateVpcrouterParam) SetSourceNetwork(v string) {
	p.SourceNetwork = v
}

func (p *FirewallUpdateVpcrouterParam) GetSourceNetwork() string {
	return p.SourceNetwork
}
func (p *FirewallUpdateVpcrouterParam) SetSourcePort(v int) {
	p.SourcePort = v
}

func (p *FirewallUpdateVpcrouterParam) GetSourcePort() int {
	return p.SourcePort
}
func (p *FirewallUpdateVpcrouterParam) SetDestinationNetwork(v string) {
	p.DestinationNetwork = v
}

func (p *FirewallUpdateVpcrouterParam) GetDestinationNetwork() string {
	return p.DestinationNetwork
}
func (p *FirewallUpdateVpcrouterParam) SetDestinationPort(v int) {
	p.DestinationPort = v
}

func (p *FirewallUpdateVpcrouterParam) GetDestinationPort() int {
	return p.DestinationPort
}
func (p *FirewallUpdateVpcrouterParam) SetAction(v string) {
	p.Action = v
}

func (p *FirewallUpdateVpcrouterParam) GetAction() string {
	return p.Action
}
func (p *FirewallUpdateVpcrouterParam) SetEnableLogging(v bool) {
	p.EnableLogging = v
}

func (p *FirewallUpdateVpcrouterParam) GetEnableLogging() bool {
	return p.EnableLogging
}
func (p *FirewallUpdateVpcrouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *FirewallUpdateVpcrouterParam) GetDescription() string {
	return p.Description
}
func (p *FirewallUpdateVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *FirewallUpdateVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *FirewallUpdateVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *FirewallUpdateVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *FirewallUpdateVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *FirewallUpdateVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *FirewallUpdateVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *FirewallUpdateVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *FirewallUpdateVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *FirewallUpdateVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *FirewallUpdateVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *FirewallUpdateVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *FirewallUpdateVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *FirewallUpdateVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *FirewallUpdateVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *FirewallUpdateVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// FirewallDeleteVpcrouterParam is input parameters for the sacloud API
type FirewallDeleteVpcrouterParam struct {
	Interface         int        `json:"interface"`
	Direction         string     `json:"direction"`
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewFirewallDeleteVpcrouterParam return new FirewallDeleteVpcrouterParam
func NewFirewallDeleteVpcrouterParam() *FirewallDeleteVpcrouterParam {
	return &FirewallDeleteVpcrouterParam{

		Direction: "receive",
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *FirewallDeleteVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Interface) {
		p.Interface = 0
	}
	if isEmpty(p.Direction) {
		p.Direction = ""
	}
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *FirewallDeleteVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-delete"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-delete"].Params["direction"].ValidateFunc
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *FirewallDeleteVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *FirewallDeleteVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["firewall-delete"]
}

func (p *FirewallDeleteVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *FirewallDeleteVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *FirewallDeleteVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *FirewallDeleteVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *FirewallDeleteVpcrouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *FirewallDeleteVpcrouterParam) GetInterface() int {
	return p.Interface
}
func (p *FirewallDeleteVpcrouterParam) SetDirection(v string) {
	p.Direction = v
}

func (p *FirewallDeleteVpcrouterParam) GetDirection() string {
	return p.Direction
}
func (p *FirewallDeleteVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *FirewallDeleteVpcrouterParam) GetIndex() int {
	return p.Index
}
func (p *FirewallDeleteVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *FirewallDeleteVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *FirewallDeleteVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *FirewallDeleteVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *FirewallDeleteVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *FirewallDeleteVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *FirewallDeleteVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *FirewallDeleteVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *FirewallDeleteVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *FirewallDeleteVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *FirewallDeleteVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *FirewallDeleteVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *FirewallDeleteVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *FirewallDeleteVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *FirewallDeleteVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *FirewallDeleteVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// DhcpServerInfoVpcrouterParam is input parameters for the sacloud API
type DhcpServerInfoVpcrouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewDhcpServerInfoVpcrouterParam return new DhcpServerInfoVpcrouterParam
func NewDhcpServerInfoVpcrouterParam() *DhcpServerInfoVpcrouterParam {
	return &DhcpServerInfoVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DhcpServerInfoVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DhcpServerInfoVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpServerInfoVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpServerInfoVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-server-info"]
}

func (p *DhcpServerInfoVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpServerInfoVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpServerInfoVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpServerInfoVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpServerInfoVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DhcpServerInfoVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *DhcpServerInfoVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpServerInfoVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpServerInfoVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DhcpServerInfoVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *DhcpServerInfoVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpServerInfoVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpServerInfoVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DhcpServerInfoVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DhcpServerInfoVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DhcpServerInfoVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DhcpServerInfoVpcrouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DhcpServerInfoVpcrouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *DhcpServerInfoVpcrouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DhcpServerInfoVpcrouterParam) GetColumn() []string {
	return p.Column
}
func (p *DhcpServerInfoVpcrouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DhcpServerInfoVpcrouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DhcpServerInfoVpcrouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *DhcpServerInfoVpcrouterParam) GetFormat() string {
	return p.Format
}
func (p *DhcpServerInfoVpcrouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DhcpServerInfoVpcrouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DhcpServerInfoVpcrouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *DhcpServerInfoVpcrouterParam) GetQuery() string {
	return p.Query
}
func (p *DhcpServerInfoVpcrouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DhcpServerInfoVpcrouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DhcpServerInfoVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DhcpServerInfoVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// DhcpServerAddVpcrouterParam is input parameters for the sacloud API
type DhcpServerAddVpcrouterParam struct {
	Interface         int        `json:"interface"`
	RangeStart        string     `json:"range-start"`
	RangeStop         string     `json:"range-stop"`
	DnsServers        []string   `json:"dns-servers"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewDhcpServerAddVpcrouterParam return new DhcpServerAddVpcrouterParam
func NewDhcpServerAddVpcrouterParam() *DhcpServerAddVpcrouterParam {
	return &DhcpServerAddVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DhcpServerAddVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Interface) {
		p.Interface = 0
	}
	if isEmpty(p.RangeStart) {
		p.RangeStart = ""
	}
	if isEmpty(p.RangeStop) {
		p.RangeStop = ""
	}
	if isEmpty(p.DnsServers) {
		p.DnsServers = []string{""}
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DhcpServerAddVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["range-start"].ValidateFunc
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["range-stop"].ValidateFunc
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["dns-servers"].ValidateFunc
		errs := validator("--dns-servers", p.DnsServers)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpServerAddVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpServerAddVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-server-add"]
}

func (p *DhcpServerAddVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpServerAddVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpServerAddVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpServerAddVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpServerAddVpcrouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *DhcpServerAddVpcrouterParam) GetInterface() int {
	return p.Interface
}
func (p *DhcpServerAddVpcrouterParam) SetRangeStart(v string) {
	p.RangeStart = v
}

func (p *DhcpServerAddVpcrouterParam) GetRangeStart() string {
	return p.RangeStart
}
func (p *DhcpServerAddVpcrouterParam) SetRangeStop(v string) {
	p.RangeStop = v
}

func (p *DhcpServerAddVpcrouterParam) GetRangeStop() string {
	return p.RangeStop
}
func (p *DhcpServerAddVpcrouterParam) SetDnsServers(v []string) {
	p.DnsServers = v
}

func (p *DhcpServerAddVpcrouterParam) GetDnsServers() []string {
	return p.DnsServers
}
func (p *DhcpServerAddVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DhcpServerAddVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *DhcpServerAddVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DhcpServerAddVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DhcpServerAddVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpServerAddVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpServerAddVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DhcpServerAddVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *DhcpServerAddVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpServerAddVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpServerAddVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DhcpServerAddVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DhcpServerAddVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DhcpServerAddVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DhcpServerAddVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DhcpServerAddVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// DhcpServerUpdateVpcrouterParam is input parameters for the sacloud API
type DhcpServerUpdateVpcrouterParam struct {
	Interface         int        `json:"interface"`
	RangeStart        string     `json:"range-start"`
	RangeStop         string     `json:"range-stop"`
	DnsServers        []string   `json:"dns-servers"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewDhcpServerUpdateVpcrouterParam return new DhcpServerUpdateVpcrouterParam
func NewDhcpServerUpdateVpcrouterParam() *DhcpServerUpdateVpcrouterParam {
	return &DhcpServerUpdateVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DhcpServerUpdateVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Interface) {
		p.Interface = 0
	}
	if isEmpty(p.RangeStart) {
		p.RangeStart = ""
	}
	if isEmpty(p.RangeStop) {
		p.RangeStop = ""
	}
	if isEmpty(p.DnsServers) {
		p.DnsServers = []string{""}
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DhcpServerUpdateVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["range-start"].ValidateFunc
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["range-stop"].ValidateFunc
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["dns-servers"].ValidateFunc
		errs := validator("--dns-servers", p.DnsServers)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpServerUpdateVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpServerUpdateVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-server-update"]
}

func (p *DhcpServerUpdateVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpServerUpdateVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpServerUpdateVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpServerUpdateVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpServerUpdateVpcrouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *DhcpServerUpdateVpcrouterParam) GetInterface() int {
	return p.Interface
}
func (p *DhcpServerUpdateVpcrouterParam) SetRangeStart(v string) {
	p.RangeStart = v
}

func (p *DhcpServerUpdateVpcrouterParam) GetRangeStart() string {
	return p.RangeStart
}
func (p *DhcpServerUpdateVpcrouterParam) SetRangeStop(v string) {
	p.RangeStop = v
}

func (p *DhcpServerUpdateVpcrouterParam) GetRangeStop() string {
	return p.RangeStop
}
func (p *DhcpServerUpdateVpcrouterParam) SetDnsServers(v []string) {
	p.DnsServers = v
}

func (p *DhcpServerUpdateVpcrouterParam) GetDnsServers() []string {
	return p.DnsServers
}
func (p *DhcpServerUpdateVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DhcpServerUpdateVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *DhcpServerUpdateVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DhcpServerUpdateVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DhcpServerUpdateVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpServerUpdateVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpServerUpdateVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DhcpServerUpdateVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *DhcpServerUpdateVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpServerUpdateVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpServerUpdateVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DhcpServerUpdateVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DhcpServerUpdateVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DhcpServerUpdateVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DhcpServerUpdateVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DhcpServerUpdateVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// DhcpServerDeleteVpcrouterParam is input parameters for the sacloud API
type DhcpServerDeleteVpcrouterParam struct {
	Interface         int        `json:"interface"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewDhcpServerDeleteVpcrouterParam return new DhcpServerDeleteVpcrouterParam
func NewDhcpServerDeleteVpcrouterParam() *DhcpServerDeleteVpcrouterParam {
	return &DhcpServerDeleteVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DhcpServerDeleteVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Interface) {
		p.Interface = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DhcpServerDeleteVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-delete"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpServerDeleteVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpServerDeleteVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-server-delete"]
}

func (p *DhcpServerDeleteVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpServerDeleteVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpServerDeleteVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpServerDeleteVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpServerDeleteVpcrouterParam) SetInterface(v int) {
	p.Interface = v
}

func (p *DhcpServerDeleteVpcrouterParam) GetInterface() int {
	return p.Interface
}
func (p *DhcpServerDeleteVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DhcpServerDeleteVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *DhcpServerDeleteVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DhcpServerDeleteVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DhcpServerDeleteVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpServerDeleteVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpServerDeleteVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DhcpServerDeleteVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *DhcpServerDeleteVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpServerDeleteVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpServerDeleteVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DhcpServerDeleteVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DhcpServerDeleteVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DhcpServerDeleteVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DhcpServerDeleteVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DhcpServerDeleteVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// DhcpStaticMappingInfoVpcrouterParam is input parameters for the sacloud API
type DhcpStaticMappingInfoVpcrouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewDhcpStaticMappingInfoVpcrouterParam return new DhcpStaticMappingInfoVpcrouterParam
func NewDhcpStaticMappingInfoVpcrouterParam() *DhcpStaticMappingInfoVpcrouterParam {
	return &DhcpStaticMappingInfoVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DhcpStaticMappingInfoVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DhcpStaticMappingInfoVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpStaticMappingInfoVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpStaticMappingInfoVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-static-mapping-info"]
}

func (p *DhcpStaticMappingInfoVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpStaticMappingInfoVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpStaticMappingInfoVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpStaticMappingInfoVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpStaticMappingInfoVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DhcpStaticMappingInfoVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *DhcpStaticMappingInfoVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpStaticMappingInfoVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpStaticMappingInfoVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DhcpStaticMappingInfoVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *DhcpStaticMappingInfoVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpStaticMappingInfoVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpStaticMappingInfoVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DhcpStaticMappingInfoVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DhcpStaticMappingInfoVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DhcpStaticMappingInfoVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DhcpStaticMappingInfoVpcrouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DhcpStaticMappingInfoVpcrouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *DhcpStaticMappingInfoVpcrouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DhcpStaticMappingInfoVpcrouterParam) GetColumn() []string {
	return p.Column
}
func (p *DhcpStaticMappingInfoVpcrouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DhcpStaticMappingInfoVpcrouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DhcpStaticMappingInfoVpcrouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *DhcpStaticMappingInfoVpcrouterParam) GetFormat() string {
	return p.Format
}
func (p *DhcpStaticMappingInfoVpcrouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DhcpStaticMappingInfoVpcrouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DhcpStaticMappingInfoVpcrouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *DhcpStaticMappingInfoVpcrouterParam) GetQuery() string {
	return p.Query
}
func (p *DhcpStaticMappingInfoVpcrouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DhcpStaticMappingInfoVpcrouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DhcpStaticMappingInfoVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DhcpStaticMappingInfoVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// DhcpStaticMappingAddVpcrouterParam is input parameters for the sacloud API
type DhcpStaticMappingAddVpcrouterParam struct {
	Macaddress        string     `json:"macaddress"`
	Ipaddress         string     `json:"ipaddress"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewDhcpStaticMappingAddVpcrouterParam return new DhcpStaticMappingAddVpcrouterParam
func NewDhcpStaticMappingAddVpcrouterParam() *DhcpStaticMappingAddVpcrouterParam {
	return &DhcpStaticMappingAddVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DhcpStaticMappingAddVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Macaddress) {
		p.Macaddress = ""
	}
	if isEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DhcpStaticMappingAddVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--macaddress", p.Macaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-add"].Params["macaddress"].ValidateFunc
		errs := validator("--macaddress", p.Macaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-add"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpStaticMappingAddVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpStaticMappingAddVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-static-mapping-add"]
}

func (p *DhcpStaticMappingAddVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpStaticMappingAddVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpStaticMappingAddVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpStaticMappingAddVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpStaticMappingAddVpcrouterParam) SetMacaddress(v string) {
	p.Macaddress = v
}

func (p *DhcpStaticMappingAddVpcrouterParam) GetMacaddress() string {
	return p.Macaddress
}
func (p *DhcpStaticMappingAddVpcrouterParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *DhcpStaticMappingAddVpcrouterParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *DhcpStaticMappingAddVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DhcpStaticMappingAddVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *DhcpStaticMappingAddVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DhcpStaticMappingAddVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DhcpStaticMappingAddVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpStaticMappingAddVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpStaticMappingAddVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DhcpStaticMappingAddVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *DhcpStaticMappingAddVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpStaticMappingAddVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpStaticMappingAddVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DhcpStaticMappingAddVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DhcpStaticMappingAddVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DhcpStaticMappingAddVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DhcpStaticMappingAddVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DhcpStaticMappingAddVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// DhcpStaticMappingUpdateVpcrouterParam is input parameters for the sacloud API
type DhcpStaticMappingUpdateVpcrouterParam struct {
	Index             int        `json:"index"`
	Macaddress        string     `json:"macaddress"`
	Ipaddress         string     `json:"ipaddress"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewDhcpStaticMappingUpdateVpcrouterParam return new DhcpStaticMappingUpdateVpcrouterParam
func NewDhcpStaticMappingUpdateVpcrouterParam() *DhcpStaticMappingUpdateVpcrouterParam {
	return &DhcpStaticMappingUpdateVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DhcpStaticMappingUpdateVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Macaddress) {
		p.Macaddress = ""
	}
	if isEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DhcpStaticMappingUpdateVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-update"].Params["macaddress"].ValidateFunc
		errs := validator("--macaddress", p.Macaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-static-mapping-update"]
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) GetIndex() int {
	return p.Index
}
func (p *DhcpStaticMappingUpdateVpcrouterParam) SetMacaddress(v string) {
	p.Macaddress = v
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) GetMacaddress() string {
	return p.Macaddress
}
func (p *DhcpStaticMappingUpdateVpcrouterParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *DhcpStaticMappingUpdateVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *DhcpStaticMappingUpdateVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DhcpStaticMappingUpdateVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpStaticMappingUpdateVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *DhcpStaticMappingUpdateVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpStaticMappingUpdateVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DhcpStaticMappingUpdateVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DhcpStaticMappingUpdateVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DhcpStaticMappingUpdateVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// DhcpStaticMappingDeleteVpcrouterParam is input parameters for the sacloud API
type DhcpStaticMappingDeleteVpcrouterParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewDhcpStaticMappingDeleteVpcrouterParam return new DhcpStaticMappingDeleteVpcrouterParam
func NewDhcpStaticMappingDeleteVpcrouterParam() *DhcpStaticMappingDeleteVpcrouterParam {
	return &DhcpStaticMappingDeleteVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DhcpStaticMappingDeleteVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DhcpStaticMappingDeleteVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-static-mapping-delete"]
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) GetIndex() int {
	return p.Index
}
func (p *DhcpStaticMappingDeleteVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *DhcpStaticMappingDeleteVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DhcpStaticMappingDeleteVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpStaticMappingDeleteVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *DhcpStaticMappingDeleteVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpStaticMappingDeleteVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DhcpStaticMappingDeleteVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DhcpStaticMappingDeleteVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DhcpStaticMappingDeleteVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// PptpServerInfoVpcrouterParam is input parameters for the sacloud API
type PptpServerInfoVpcrouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewPptpServerInfoVpcrouterParam return new PptpServerInfoVpcrouterParam
func NewPptpServerInfoVpcrouterParam() *PptpServerInfoVpcrouterParam {
	return &PptpServerInfoVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *PptpServerInfoVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *PptpServerInfoVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *PptpServerInfoVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PptpServerInfoVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["pptp-server-info"]
}

func (p *PptpServerInfoVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *PptpServerInfoVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *PptpServerInfoVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *PptpServerInfoVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *PptpServerInfoVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *PptpServerInfoVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *PptpServerInfoVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PptpServerInfoVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PptpServerInfoVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *PptpServerInfoVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *PptpServerInfoVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PptpServerInfoVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PptpServerInfoVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PptpServerInfoVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PptpServerInfoVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PptpServerInfoVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PptpServerInfoVpcrouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *PptpServerInfoVpcrouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *PptpServerInfoVpcrouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *PptpServerInfoVpcrouterParam) GetColumn() []string {
	return p.Column
}
func (p *PptpServerInfoVpcrouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *PptpServerInfoVpcrouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *PptpServerInfoVpcrouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *PptpServerInfoVpcrouterParam) GetFormat() string {
	return p.Format
}
func (p *PptpServerInfoVpcrouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *PptpServerInfoVpcrouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *PptpServerInfoVpcrouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *PptpServerInfoVpcrouterParam) GetQuery() string {
	return p.Query
}
func (p *PptpServerInfoVpcrouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *PptpServerInfoVpcrouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *PptpServerInfoVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *PptpServerInfoVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// PptpServerUpdateVpcrouterParam is input parameters for the sacloud API
type PptpServerUpdateVpcrouterParam struct {
	Disabled          bool       `json:"disabled"`
	RangeStart        string     `json:"range-start"`
	RangeStop         string     `json:"range-stop"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewPptpServerUpdateVpcrouterParam return new PptpServerUpdateVpcrouterParam
func NewPptpServerUpdateVpcrouterParam() *PptpServerUpdateVpcrouterParam {
	return &PptpServerUpdateVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *PptpServerUpdateVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Disabled) {
		p.Disabled = false
	}
	if isEmpty(p.RangeStart) {
		p.RangeStart = ""
	}
	if isEmpty(p.RangeStop) {
		p.RangeStop = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *PptpServerUpdateVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["VPCRouter"].Commands["pptp-server-update"].Params["range-start"].ValidateFunc
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["pptp-server-update"].Params["range-stop"].ValidateFunc
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *PptpServerUpdateVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PptpServerUpdateVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["pptp-server-update"]
}

func (p *PptpServerUpdateVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *PptpServerUpdateVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *PptpServerUpdateVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *PptpServerUpdateVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *PptpServerUpdateVpcrouterParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *PptpServerUpdateVpcrouterParam) GetDisabled() bool {
	return p.Disabled
}
func (p *PptpServerUpdateVpcrouterParam) SetRangeStart(v string) {
	p.RangeStart = v
}

func (p *PptpServerUpdateVpcrouterParam) GetRangeStart() string {
	return p.RangeStart
}
func (p *PptpServerUpdateVpcrouterParam) SetRangeStop(v string) {
	p.RangeStop = v
}

func (p *PptpServerUpdateVpcrouterParam) GetRangeStop() string {
	return p.RangeStop
}
func (p *PptpServerUpdateVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *PptpServerUpdateVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *PptpServerUpdateVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PptpServerUpdateVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PptpServerUpdateVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PptpServerUpdateVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PptpServerUpdateVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *PptpServerUpdateVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *PptpServerUpdateVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PptpServerUpdateVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PptpServerUpdateVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PptpServerUpdateVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PptpServerUpdateVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PptpServerUpdateVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PptpServerUpdateVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *PptpServerUpdateVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// L2tpServerInfoVpcrouterParam is input parameters for the sacloud API
type L2tpServerInfoVpcrouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewL2tpServerInfoVpcrouterParam return new L2tpServerInfoVpcrouterParam
func NewL2tpServerInfoVpcrouterParam() *L2tpServerInfoVpcrouterParam {
	return &L2tpServerInfoVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *L2tpServerInfoVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *L2tpServerInfoVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *L2tpServerInfoVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *L2tpServerInfoVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["l2tp-server-info"]
}

func (p *L2tpServerInfoVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *L2tpServerInfoVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *L2tpServerInfoVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *L2tpServerInfoVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *L2tpServerInfoVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *L2tpServerInfoVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *L2tpServerInfoVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *L2tpServerInfoVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *L2tpServerInfoVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *L2tpServerInfoVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *L2tpServerInfoVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *L2tpServerInfoVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *L2tpServerInfoVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *L2tpServerInfoVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *L2tpServerInfoVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *L2tpServerInfoVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *L2tpServerInfoVpcrouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *L2tpServerInfoVpcrouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *L2tpServerInfoVpcrouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *L2tpServerInfoVpcrouterParam) GetColumn() []string {
	return p.Column
}
func (p *L2tpServerInfoVpcrouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *L2tpServerInfoVpcrouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *L2tpServerInfoVpcrouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *L2tpServerInfoVpcrouterParam) GetFormat() string {
	return p.Format
}
func (p *L2tpServerInfoVpcrouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *L2tpServerInfoVpcrouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *L2tpServerInfoVpcrouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *L2tpServerInfoVpcrouterParam) GetQuery() string {
	return p.Query
}
func (p *L2tpServerInfoVpcrouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *L2tpServerInfoVpcrouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *L2tpServerInfoVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *L2tpServerInfoVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// L2tpServerUpdateVpcrouterParam is input parameters for the sacloud API
type L2tpServerUpdateVpcrouterParam struct {
	Disabled          bool       `json:"disabled"`
	RangeStart        string     `json:"range-start"`
	RangeStop         string     `json:"range-stop"`
	PreSharedSecret   string     `json:"pre-shared-secret"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewL2tpServerUpdateVpcrouterParam return new L2tpServerUpdateVpcrouterParam
func NewL2tpServerUpdateVpcrouterParam() *L2tpServerUpdateVpcrouterParam {
	return &L2tpServerUpdateVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *L2tpServerUpdateVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Disabled) {
		p.Disabled = false
	}
	if isEmpty(p.RangeStart) {
		p.RangeStart = ""
	}
	if isEmpty(p.RangeStop) {
		p.RangeStop = ""
	}
	if isEmpty(p.PreSharedSecret) {
		p.PreSharedSecret = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *L2tpServerUpdateVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["VPCRouter"].Commands["l2tp-server-update"].Params["range-start"].ValidateFunc
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["l2tp-server-update"].Params["range-stop"].ValidateFunc
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["l2tp-server-update"].Params["pre-shared-secret"].ValidateFunc
		errs := validator("--pre-shared-secret", p.PreSharedSecret)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *L2tpServerUpdateVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *L2tpServerUpdateVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["l2tp-server-update"]
}

func (p *L2tpServerUpdateVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *L2tpServerUpdateVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *L2tpServerUpdateVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *L2tpServerUpdateVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *L2tpServerUpdateVpcrouterParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *L2tpServerUpdateVpcrouterParam) GetDisabled() bool {
	return p.Disabled
}
func (p *L2tpServerUpdateVpcrouterParam) SetRangeStart(v string) {
	p.RangeStart = v
}

func (p *L2tpServerUpdateVpcrouterParam) GetRangeStart() string {
	return p.RangeStart
}
func (p *L2tpServerUpdateVpcrouterParam) SetRangeStop(v string) {
	p.RangeStop = v
}

func (p *L2tpServerUpdateVpcrouterParam) GetRangeStop() string {
	return p.RangeStop
}
func (p *L2tpServerUpdateVpcrouterParam) SetPreSharedSecret(v string) {
	p.PreSharedSecret = v
}

func (p *L2tpServerUpdateVpcrouterParam) GetPreSharedSecret() string {
	return p.PreSharedSecret
}
func (p *L2tpServerUpdateVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *L2tpServerUpdateVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *L2tpServerUpdateVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *L2tpServerUpdateVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *L2tpServerUpdateVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *L2tpServerUpdateVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *L2tpServerUpdateVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *L2tpServerUpdateVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *L2tpServerUpdateVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *L2tpServerUpdateVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *L2tpServerUpdateVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *L2tpServerUpdateVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *L2tpServerUpdateVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *L2tpServerUpdateVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *L2tpServerUpdateVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *L2tpServerUpdateVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// UserInfoVpcrouterParam is input parameters for the sacloud API
type UserInfoVpcrouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewUserInfoVpcrouterParam return new UserInfoVpcrouterParam
func NewUserInfoVpcrouterParam() *UserInfoVpcrouterParam {
	return &UserInfoVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UserInfoVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UserInfoVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UserInfoVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UserInfoVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["user-info"]
}

func (p *UserInfoVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UserInfoVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UserInfoVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UserInfoVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UserInfoVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UserInfoVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *UserInfoVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UserInfoVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UserInfoVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UserInfoVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *UserInfoVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UserInfoVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UserInfoVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UserInfoVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UserInfoVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UserInfoVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UserInfoVpcrouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UserInfoVpcrouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *UserInfoVpcrouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UserInfoVpcrouterParam) GetColumn() []string {
	return p.Column
}
func (p *UserInfoVpcrouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UserInfoVpcrouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UserInfoVpcrouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *UserInfoVpcrouterParam) GetFormat() string {
	return p.Format
}
func (p *UserInfoVpcrouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UserInfoVpcrouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UserInfoVpcrouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *UserInfoVpcrouterParam) GetQuery() string {
	return p.Query
}
func (p *UserInfoVpcrouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UserInfoVpcrouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UserInfoVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UserInfoVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// UserAddVpcrouterParam is input parameters for the sacloud API
type UserAddVpcrouterParam struct {
	Username          string     `json:"username"`
	Password          string     `json:"password"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewUserAddVpcrouterParam return new UserAddVpcrouterParam
func NewUserAddVpcrouterParam() *UserAddVpcrouterParam {
	return &UserAddVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UserAddVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Username) {
		p.Username = ""
	}
	if isEmpty(p.Password) {
		p.Password = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UserAddVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--username", p.Username)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["user-add"].Params["username"].ValidateFunc
		errs := validator("--username", p.Username)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["user-add"].Params["password"].ValidateFunc
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UserAddVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UserAddVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["user-add"]
}

func (p *UserAddVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UserAddVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UserAddVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UserAddVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UserAddVpcrouterParam) SetUsername(v string) {
	p.Username = v
}

func (p *UserAddVpcrouterParam) GetUsername() string {
	return p.Username
}
func (p *UserAddVpcrouterParam) SetPassword(v string) {
	p.Password = v
}

func (p *UserAddVpcrouterParam) GetPassword() string {
	return p.Password
}
func (p *UserAddVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UserAddVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *UserAddVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UserAddVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UserAddVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UserAddVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UserAddVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UserAddVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *UserAddVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UserAddVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UserAddVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UserAddVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UserAddVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UserAddVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UserAddVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UserAddVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// UserUpdateVpcrouterParam is input parameters for the sacloud API
type UserUpdateVpcrouterParam struct {
	Index             int        `json:"index"`
	Username          string     `json:"username"`
	Password          string     `json:"password"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewUserUpdateVpcrouterParam return new UserUpdateVpcrouterParam
func NewUserUpdateVpcrouterParam() *UserUpdateVpcrouterParam {
	return &UserUpdateVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UserUpdateVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Username) {
		p.Username = ""
	}
	if isEmpty(p.Password) {
		p.Password = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UserUpdateVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["user-update"].Params["username"].ValidateFunc
		errs := validator("--username", p.Username)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["user-update"].Params["password"].ValidateFunc
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UserUpdateVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UserUpdateVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["user-update"]
}

func (p *UserUpdateVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UserUpdateVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UserUpdateVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UserUpdateVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UserUpdateVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *UserUpdateVpcrouterParam) GetIndex() int {
	return p.Index
}
func (p *UserUpdateVpcrouterParam) SetUsername(v string) {
	p.Username = v
}

func (p *UserUpdateVpcrouterParam) GetUsername() string {
	return p.Username
}
func (p *UserUpdateVpcrouterParam) SetPassword(v string) {
	p.Password = v
}

func (p *UserUpdateVpcrouterParam) GetPassword() string {
	return p.Password
}
func (p *UserUpdateVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UserUpdateVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *UserUpdateVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UserUpdateVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UserUpdateVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UserUpdateVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UserUpdateVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UserUpdateVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *UserUpdateVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UserUpdateVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UserUpdateVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UserUpdateVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UserUpdateVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UserUpdateVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UserUpdateVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UserUpdateVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// UserDeleteVpcrouterParam is input parameters for the sacloud API
type UserDeleteVpcrouterParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewUserDeleteVpcrouterParam return new UserDeleteVpcrouterParam
func NewUserDeleteVpcrouterParam() *UserDeleteVpcrouterParam {
	return &UserDeleteVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UserDeleteVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UserDeleteVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UserDeleteVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UserDeleteVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["user-delete"]
}

func (p *UserDeleteVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UserDeleteVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UserDeleteVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UserDeleteVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UserDeleteVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *UserDeleteVpcrouterParam) GetIndex() int {
	return p.Index
}
func (p *UserDeleteVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UserDeleteVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *UserDeleteVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UserDeleteVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UserDeleteVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UserDeleteVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UserDeleteVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UserDeleteVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *UserDeleteVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UserDeleteVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UserDeleteVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UserDeleteVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UserDeleteVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UserDeleteVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UserDeleteVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UserDeleteVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// SiteToSiteVpnInfoVpcrouterParam is input parameters for the sacloud API
type SiteToSiteVpnInfoVpcrouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewSiteToSiteVpnInfoVpcrouterParam return new SiteToSiteVpnInfoVpcrouterParam
func NewSiteToSiteVpnInfoVpcrouterParam() *SiteToSiteVpnInfoVpcrouterParam {
	return &SiteToSiteVpnInfoVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *SiteToSiteVpnInfoVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *SiteToSiteVpnInfoVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *SiteToSiteVpnInfoVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVpnInfoVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["site-to-site-vpn-info"]
}

func (p *SiteToSiteVpnInfoVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *SiteToSiteVpnInfoVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *SiteToSiteVpnInfoVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *SiteToSiteVpnInfoVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *SiteToSiteVpnInfoVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SiteToSiteVpnInfoVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *SiteToSiteVpnInfoVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SiteToSiteVpnInfoVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SiteToSiteVpnInfoVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SiteToSiteVpnInfoVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *SiteToSiteVpnInfoVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SiteToSiteVpnInfoVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SiteToSiteVpnInfoVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SiteToSiteVpnInfoVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SiteToSiteVpnInfoVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SiteToSiteVpnInfoVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SiteToSiteVpnInfoVpcrouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *SiteToSiteVpnInfoVpcrouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *SiteToSiteVpnInfoVpcrouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *SiteToSiteVpnInfoVpcrouterParam) GetColumn() []string {
	return p.Column
}
func (p *SiteToSiteVpnInfoVpcrouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *SiteToSiteVpnInfoVpcrouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *SiteToSiteVpnInfoVpcrouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *SiteToSiteVpnInfoVpcrouterParam) GetFormat() string {
	return p.Format
}
func (p *SiteToSiteVpnInfoVpcrouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *SiteToSiteVpnInfoVpcrouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *SiteToSiteVpnInfoVpcrouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *SiteToSiteVpnInfoVpcrouterParam) GetQuery() string {
	return p.Query
}
func (p *SiteToSiteVpnInfoVpcrouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *SiteToSiteVpnInfoVpcrouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *SiteToSiteVpnInfoVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SiteToSiteVpnInfoVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// SiteToSiteVpnAddVpcrouterParam is input parameters for the sacloud API
type SiteToSiteVpnAddVpcrouterParam struct {
	Peer              string     `json:"peer"`
	RemoteId          string     `json:"remote-id"`
	PreSharedSecret   string     `json:"pre-shared-secret"`
	Routes            []string   `json:"routes"`
	LocalPrefix       []string   `json:"local-prefix"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewSiteToSiteVpnAddVpcrouterParam return new SiteToSiteVpnAddVpcrouterParam
func NewSiteToSiteVpnAddVpcrouterParam() *SiteToSiteVpnAddVpcrouterParam {
	return &SiteToSiteVpnAddVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *SiteToSiteVpnAddVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Peer) {
		p.Peer = ""
	}
	if isEmpty(p.RemoteId) {
		p.RemoteId = ""
	}
	if isEmpty(p.PreSharedSecret) {
		p.PreSharedSecret = ""
	}
	if isEmpty(p.Routes) {
		p.Routes = []string{""}
	}
	if isEmpty(p.LocalPrefix) {
		p.LocalPrefix = []string{""}
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *SiteToSiteVpnAddVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--peer", p.Peer)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["peer"].ValidateFunc
		errs := validator("--peer", p.Peer)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--remote-id", p.RemoteId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--pre-shared-secret", p.PreSharedSecret)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["pre-shared-secret"].ValidateFunc
		errs := validator("--pre-shared-secret", p.PreSharedSecret)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--routes", p.Routes)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["routes"].ValidateFunc
		errs := validator("--routes", p.Routes)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--local-prefix", p.LocalPrefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["local-prefix"].ValidateFunc
		errs := validator("--local-prefix", p.LocalPrefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["site-to-site-vpn-add"]
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *SiteToSiteVpnAddVpcrouterParam) SetPeer(v string) {
	p.Peer = v
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetPeer() string {
	return p.Peer
}
func (p *SiteToSiteVpnAddVpcrouterParam) SetRemoteId(v string) {
	p.RemoteId = v
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetRemoteId() string {
	return p.RemoteId
}
func (p *SiteToSiteVpnAddVpcrouterParam) SetPreSharedSecret(v string) {
	p.PreSharedSecret = v
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetPreSharedSecret() string {
	return p.PreSharedSecret
}
func (p *SiteToSiteVpnAddVpcrouterParam) SetRoutes(v []string) {
	p.Routes = v
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetRoutes() []string {
	return p.Routes
}
func (p *SiteToSiteVpnAddVpcrouterParam) SetLocalPrefix(v []string) {
	p.LocalPrefix = v
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetLocalPrefix() []string {
	return p.LocalPrefix
}
func (p *SiteToSiteVpnAddVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *SiteToSiteVpnAddVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SiteToSiteVpnAddVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SiteToSiteVpnAddVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *SiteToSiteVpnAddVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SiteToSiteVpnAddVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SiteToSiteVpnAddVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SiteToSiteVpnAddVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SiteToSiteVpnAddVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// SiteToSiteVpnUpdateVpcrouterParam is input parameters for the sacloud API
type SiteToSiteVpnUpdateVpcrouterParam struct {
	Index             int        `json:"index"`
	Peer              string     `json:"peer"`
	RemoteId          string     `json:"remote-id"`
	PreSharedSecret   string     `json:"pre-shared-secret"`
	Routes            []string   `json:"routes"`
	LocalPrefix       []string   `json:"local-prefix"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewSiteToSiteVpnUpdateVpcrouterParam return new SiteToSiteVpnUpdateVpcrouterParam
func NewSiteToSiteVpnUpdateVpcrouterParam() *SiteToSiteVpnUpdateVpcrouterParam {
	return &SiteToSiteVpnUpdateVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *SiteToSiteVpnUpdateVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Peer) {
		p.Peer = ""
	}
	if isEmpty(p.RemoteId) {
		p.RemoteId = ""
	}
	if isEmpty(p.PreSharedSecret) {
		p.PreSharedSecret = ""
	}
	if isEmpty(p.Routes) {
		p.Routes = []string{""}
	}
	if isEmpty(p.LocalPrefix) {
		p.LocalPrefix = []string{""}
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *SiteToSiteVpnUpdateVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["peer"].ValidateFunc
		errs := validator("--peer", p.Peer)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["pre-shared-secret"].ValidateFunc
		errs := validator("--pre-shared-secret", p.PreSharedSecret)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["routes"].ValidateFunc
		errs := validator("--routes", p.Routes)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["local-prefix"].ValidateFunc
		errs := validator("--local-prefix", p.LocalPrefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["site-to-site-vpn-update"]
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetIndex() int {
	return p.Index
}
func (p *SiteToSiteVpnUpdateVpcrouterParam) SetPeer(v string) {
	p.Peer = v
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetPeer() string {
	return p.Peer
}
func (p *SiteToSiteVpnUpdateVpcrouterParam) SetRemoteId(v string) {
	p.RemoteId = v
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetRemoteId() string {
	return p.RemoteId
}
func (p *SiteToSiteVpnUpdateVpcrouterParam) SetPreSharedSecret(v string) {
	p.PreSharedSecret = v
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetPreSharedSecret() string {
	return p.PreSharedSecret
}
func (p *SiteToSiteVpnUpdateVpcrouterParam) SetRoutes(v []string) {
	p.Routes = v
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetRoutes() []string {
	return p.Routes
}
func (p *SiteToSiteVpnUpdateVpcrouterParam) SetLocalPrefix(v []string) {
	p.LocalPrefix = v
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetLocalPrefix() []string {
	return p.LocalPrefix
}
func (p *SiteToSiteVpnUpdateVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *SiteToSiteVpnUpdateVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SiteToSiteVpnUpdateVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SiteToSiteVpnUpdateVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *SiteToSiteVpnUpdateVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SiteToSiteVpnUpdateVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SiteToSiteVpnUpdateVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SiteToSiteVpnUpdateVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SiteToSiteVpnUpdateVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// SiteToSiteVpnDeleteVpcrouterParam is input parameters for the sacloud API
type SiteToSiteVpnDeleteVpcrouterParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewSiteToSiteVpnDeleteVpcrouterParam return new SiteToSiteVpnDeleteVpcrouterParam
func NewSiteToSiteVpnDeleteVpcrouterParam() *SiteToSiteVpnDeleteVpcrouterParam {
	return &SiteToSiteVpnDeleteVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *SiteToSiteVpnDeleteVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *SiteToSiteVpnDeleteVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["site-to-site-vpn-delete"]
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) GetIndex() int {
	return p.Index
}
func (p *SiteToSiteVpnDeleteVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *SiteToSiteVpnDeleteVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SiteToSiteVpnDeleteVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SiteToSiteVpnDeleteVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *SiteToSiteVpnDeleteVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SiteToSiteVpnDeleteVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SiteToSiteVpnDeleteVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SiteToSiteVpnDeleteVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SiteToSiteVpnDeleteVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// SiteToSiteVpnPeersVpcrouterParam is input parameters for the sacloud API
type SiteToSiteVpnPeersVpcrouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewSiteToSiteVpnPeersVpcrouterParam return new SiteToSiteVpnPeersVpcrouterParam
func NewSiteToSiteVpnPeersVpcrouterParam() *SiteToSiteVpnPeersVpcrouterParam {
	return &SiteToSiteVpnPeersVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *SiteToSiteVpnPeersVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *SiteToSiteVpnPeersVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *SiteToSiteVpnPeersVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVpnPeersVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["site-to-site-vpn-peers"]
}

func (p *SiteToSiteVpnPeersVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *SiteToSiteVpnPeersVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *SiteToSiteVpnPeersVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *SiteToSiteVpnPeersVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *SiteToSiteVpnPeersVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SiteToSiteVpnPeersVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *SiteToSiteVpnPeersVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SiteToSiteVpnPeersVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SiteToSiteVpnPeersVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *SiteToSiteVpnPeersVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *SiteToSiteVpnPeersVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SiteToSiteVpnPeersVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SiteToSiteVpnPeersVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *SiteToSiteVpnPeersVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *SiteToSiteVpnPeersVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SiteToSiteVpnPeersVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SiteToSiteVpnPeersVpcrouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *SiteToSiteVpnPeersVpcrouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *SiteToSiteVpnPeersVpcrouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *SiteToSiteVpnPeersVpcrouterParam) GetColumn() []string {
	return p.Column
}
func (p *SiteToSiteVpnPeersVpcrouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *SiteToSiteVpnPeersVpcrouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *SiteToSiteVpnPeersVpcrouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *SiteToSiteVpnPeersVpcrouterParam) GetFormat() string {
	return p.Format
}
func (p *SiteToSiteVpnPeersVpcrouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *SiteToSiteVpnPeersVpcrouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *SiteToSiteVpnPeersVpcrouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *SiteToSiteVpnPeersVpcrouterParam) GetQuery() string {
	return p.Query
}
func (p *SiteToSiteVpnPeersVpcrouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *SiteToSiteVpnPeersVpcrouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *SiteToSiteVpnPeersVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *SiteToSiteVpnPeersVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// StaticRouteInfoVpcrouterParam is input parameters for the sacloud API
type StaticRouteInfoVpcrouterParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewStaticRouteInfoVpcrouterParam return new StaticRouteInfoVpcrouterParam
func NewStaticRouteInfoVpcrouterParam() *StaticRouteInfoVpcrouterParam {
	return &StaticRouteInfoVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *StaticRouteInfoVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *StaticRouteInfoVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticRouteInfoVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticRouteInfoVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-route-info"]
}

func (p *StaticRouteInfoVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticRouteInfoVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticRouteInfoVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticRouteInfoVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticRouteInfoVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticRouteInfoVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticRouteInfoVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticRouteInfoVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticRouteInfoVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticRouteInfoVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticRouteInfoVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticRouteInfoVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticRouteInfoVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticRouteInfoVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticRouteInfoVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticRouteInfoVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticRouteInfoVpcrouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *StaticRouteInfoVpcrouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *StaticRouteInfoVpcrouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *StaticRouteInfoVpcrouterParam) GetColumn() []string {
	return p.Column
}
func (p *StaticRouteInfoVpcrouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *StaticRouteInfoVpcrouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *StaticRouteInfoVpcrouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *StaticRouteInfoVpcrouterParam) GetFormat() string {
	return p.Format
}
func (p *StaticRouteInfoVpcrouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *StaticRouteInfoVpcrouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *StaticRouteInfoVpcrouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *StaticRouteInfoVpcrouterParam) GetQuery() string {
	return p.Query
}
func (p *StaticRouteInfoVpcrouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *StaticRouteInfoVpcrouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *StaticRouteInfoVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticRouteInfoVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// StaticRouteAddVpcrouterParam is input parameters for the sacloud API
type StaticRouteAddVpcrouterParam struct {
	Prefix            string     `json:"prefix"`
	NextHop           string     `json:"next-hop"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewStaticRouteAddVpcrouterParam return new StaticRouteAddVpcrouterParam
func NewStaticRouteAddVpcrouterParam() *StaticRouteAddVpcrouterParam {
	return &StaticRouteAddVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *StaticRouteAddVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Prefix) {
		p.Prefix = ""
	}
	if isEmpty(p.NextHop) {
		p.NextHop = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *StaticRouteAddVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-route-add"].Params["prefix"].ValidateFunc
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-route-add"].Params["next-hop"].ValidateFunc
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticRouteAddVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticRouteAddVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-route-add"]
}

func (p *StaticRouteAddVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticRouteAddVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticRouteAddVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticRouteAddVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticRouteAddVpcrouterParam) SetPrefix(v string) {
	p.Prefix = v
}

func (p *StaticRouteAddVpcrouterParam) GetPrefix() string {
	return p.Prefix
}
func (p *StaticRouteAddVpcrouterParam) SetNextHop(v string) {
	p.NextHop = v
}

func (p *StaticRouteAddVpcrouterParam) GetNextHop() string {
	return p.NextHop
}
func (p *StaticRouteAddVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticRouteAddVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticRouteAddVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticRouteAddVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticRouteAddVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticRouteAddVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticRouteAddVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticRouteAddVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticRouteAddVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticRouteAddVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticRouteAddVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticRouteAddVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticRouteAddVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticRouteAddVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticRouteAddVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticRouteAddVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// StaticRouteUpdateVpcrouterParam is input parameters for the sacloud API
type StaticRouteUpdateVpcrouterParam struct {
	Index             int        `json:"index"`
	Prefix            string     `json:"prefix"`
	NextHop           string     `json:"next-hop"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewStaticRouteUpdateVpcrouterParam return new StaticRouteUpdateVpcrouterParam
func NewStaticRouteUpdateVpcrouterParam() *StaticRouteUpdateVpcrouterParam {
	return &StaticRouteUpdateVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *StaticRouteUpdateVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Prefix) {
		p.Prefix = ""
	}
	if isEmpty(p.NextHop) {
		p.NextHop = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *StaticRouteUpdateVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-route-update"].Params["prefix"].ValidateFunc
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-route-update"].Params["next-hop"].ValidateFunc
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticRouteUpdateVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticRouteUpdateVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-route-update"]
}

func (p *StaticRouteUpdateVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticRouteUpdateVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticRouteUpdateVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticRouteUpdateVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticRouteUpdateVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticRouteUpdateVpcrouterParam) GetIndex() int {
	return p.Index
}
func (p *StaticRouteUpdateVpcrouterParam) SetPrefix(v string) {
	p.Prefix = v
}

func (p *StaticRouteUpdateVpcrouterParam) GetPrefix() string {
	return p.Prefix
}
func (p *StaticRouteUpdateVpcrouterParam) SetNextHop(v string) {
	p.NextHop = v
}

func (p *StaticRouteUpdateVpcrouterParam) GetNextHop() string {
	return p.NextHop
}
func (p *StaticRouteUpdateVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticRouteUpdateVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticRouteUpdateVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticRouteUpdateVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticRouteUpdateVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticRouteUpdateVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticRouteUpdateVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticRouteUpdateVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticRouteUpdateVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticRouteUpdateVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticRouteUpdateVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticRouteUpdateVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticRouteUpdateVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticRouteUpdateVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticRouteUpdateVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticRouteUpdateVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// StaticRouteDeleteVpcrouterParam is input parameters for the sacloud API
type StaticRouteDeleteVpcrouterParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewStaticRouteDeleteVpcrouterParam return new StaticRouteDeleteVpcrouterParam
func NewStaticRouteDeleteVpcrouterParam() *StaticRouteDeleteVpcrouterParam {
	return &StaticRouteDeleteVpcrouterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *StaticRouteDeleteVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *StaticRouteDeleteVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticRouteDeleteVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticRouteDeleteVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-route-delete"]
}

func (p *StaticRouteDeleteVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticRouteDeleteVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticRouteDeleteVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticRouteDeleteVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticRouteDeleteVpcrouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticRouteDeleteVpcrouterParam) GetIndex() int {
	return p.Index
}
func (p *StaticRouteDeleteVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *StaticRouteDeleteVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *StaticRouteDeleteVpcrouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticRouteDeleteVpcrouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticRouteDeleteVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticRouteDeleteVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticRouteDeleteVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *StaticRouteDeleteVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *StaticRouteDeleteVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticRouteDeleteVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticRouteDeleteVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *StaticRouteDeleteVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *StaticRouteDeleteVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *StaticRouteDeleteVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *StaticRouteDeleteVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *StaticRouteDeleteVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// MonitorVpcrouterParam is input parameters for the sacloud API
type MonitorVpcrouterParam struct {
	Interface         string     `json:"interface"`
	Start             string     `json:"start"`
	End               string     `json:"end"`
	KeyFormat         string     `json:"key-format"`
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewMonitorVpcrouterParam return new MonitorVpcrouterParam
func NewMonitorVpcrouterParam() *MonitorVpcrouterParam {
	return &MonitorVpcrouterParam{

		Interface: "0",
		KeyFormat: "sakuracloud.vpcrouter.{{.ID}}.nic.{{.Index}}",
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *MonitorVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.Interface) {
		p.Interface = ""
	}
	if isEmpty(p.Start) {
		p.Start = ""
	}
	if isEmpty(p.End) {
		p.End = ""
	}
	if isEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *MonitorVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["monitor"].Params["interface"].ValidateFunc
		errs := validator("--interface", p.Interface)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["monitor"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["monitor"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *MonitorVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *MonitorVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["monitor"]
}

func (p *MonitorVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *MonitorVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *MonitorVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *MonitorVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *MonitorVpcrouterParam) SetInterface(v string) {
	p.Interface = v
}

func (p *MonitorVpcrouterParam) GetInterface() string {
	return p.Interface
}
func (p *MonitorVpcrouterParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorVpcrouterParam) GetStart() string {
	return p.Start
}
func (p *MonitorVpcrouterParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorVpcrouterParam) GetEnd() string {
	return p.End
}
func (p *MonitorVpcrouterParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorVpcrouterParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *MonitorVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *MonitorVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *MonitorVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *MonitorVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *MonitorVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *MonitorVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *MonitorVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *MonitorVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *MonitorVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *MonitorVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *MonitorVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *MonitorVpcrouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *MonitorVpcrouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *MonitorVpcrouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *MonitorVpcrouterParam) GetColumn() []string {
	return p.Column
}
func (p *MonitorVpcrouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *MonitorVpcrouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *MonitorVpcrouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *MonitorVpcrouterParam) GetFormat() string {
	return p.Format
}
func (p *MonitorVpcrouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *MonitorVpcrouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *MonitorVpcrouterParam) SetQuery(v string) {
	p.Query = v
}

func (p *MonitorVpcrouterParam) GetQuery() string {
	return p.Query
}
func (p *MonitorVpcrouterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *MonitorVpcrouterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *MonitorVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *MonitorVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

// LogsVpcrouterParam is input parameters for the sacloud API
type LogsVpcrouterParam struct {
	LogName           string     `json:"log-name"`
	Follow            bool       `json:"follow"`
	RefreshInterval   int64      `json:"refresh-interval"`
	ListLogNames      bool       `json:"list-log-names"`
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewLogsVpcrouterParam return new LogsVpcrouterParam
func NewLogsVpcrouterParam() *LogsVpcrouterParam {
	return &LogsVpcrouterParam{

		LogName:         "all",
		RefreshInterval: 3,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *LogsVpcrouterParam) FillValueToSkeleton() {
	if isEmpty(p.LogName) {
		p.LogName = ""
	}
	if isEmpty(p.Follow) {
		p.Follow = false
	}
	if isEmpty(p.RefreshInterval) {
		p.RefreshInterval = 0
	}
	if isEmpty(p.ListLogNames) {
		p.ListLogNames = false
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *LogsVpcrouterParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["VPCRouter"].Commands["logs"].Params["log-name"].ValidateFunc
		errs := validator("--log-name", p.LogName)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["logs"].Params["refresh-interval"].ValidateFunc
		errs := validator("--refresh-interval", p.RefreshInterval)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *LogsVpcrouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *LogsVpcrouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["logs"]
}

func (p *LogsVpcrouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *LogsVpcrouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *LogsVpcrouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *LogsVpcrouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *LogsVpcrouterParam) SetLogName(v string) {
	p.LogName = v
}

func (p *LogsVpcrouterParam) GetLogName() string {
	return p.LogName
}
func (p *LogsVpcrouterParam) SetFollow(v bool) {
	p.Follow = v
}

func (p *LogsVpcrouterParam) GetFollow() bool {
	return p.Follow
}
func (p *LogsVpcrouterParam) SetRefreshInterval(v int64) {
	p.RefreshInterval = v
}

func (p *LogsVpcrouterParam) GetRefreshInterval() int64 {
	return p.RefreshInterval
}
func (p *LogsVpcrouterParam) SetListLogNames(v bool) {
	p.ListLogNames = v
}

func (p *LogsVpcrouterParam) GetListLogNames() bool {
	return p.ListLogNames
}
func (p *LogsVpcrouterParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *LogsVpcrouterParam) GetSelector() []string {
	return p.Selector
}
func (p *LogsVpcrouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *LogsVpcrouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *LogsVpcrouterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *LogsVpcrouterParam) GetParameters() string {
	return p.Parameters
}
func (p *LogsVpcrouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *LogsVpcrouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *LogsVpcrouterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *LogsVpcrouterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *LogsVpcrouterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *LogsVpcrouterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *LogsVpcrouterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *LogsVpcrouterParam) GetId() sacloud.ID {
	return p.Id
}

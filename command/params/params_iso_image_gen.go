// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListIsoimageParam is input parameters for the sacloud API
type ListIsoimageParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Scope             string       `json:"scope"`
	Tags              []string     `json:"tags"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`
}

// NewListIsoimageParam return new ListIsoimageParam
func NewListIsoimageParam() *ListIsoimageParam {
	return &ListIsoimageParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ListIsoimageParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = []string{""}
	}
	if isEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if isEmpty(p.Scope) {
		p.Scope = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.From) {
		p.From = 0
	}
	if isEmpty(p.Max) {
		p.Max = 0
	}
	if isEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *ListIsoimageParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["list"].Params["scope"].ValidateFunc
		errs := validator("--scope", p.Scope)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListIsoimageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *ListIsoimageParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListIsoimageParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListIsoimageParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListIsoimageParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListIsoimageParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListIsoimageParam) SetName(v []string) {
	p.Name = v
}

func (p *ListIsoimageParam) GetName() []string {
	return p.Name
}
func (p *ListIsoimageParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListIsoimageParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListIsoimageParam) SetScope(v string) {
	p.Scope = v
}

func (p *ListIsoimageParam) GetScope() string {
	return p.Scope
}
func (p *ListIsoimageParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListIsoimageParam) GetTags() []string {
	return p.Tags
}
func (p *ListIsoimageParam) SetFrom(v int) {
	p.From = v
}

func (p *ListIsoimageParam) GetFrom() int {
	return p.From
}
func (p *ListIsoimageParam) SetMax(v int) {
	p.Max = v
}

func (p *ListIsoimageParam) GetMax() int {
	return p.Max
}
func (p *ListIsoimageParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListIsoimageParam) GetSort() []string {
	return p.Sort
}
func (p *ListIsoimageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListIsoimageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListIsoimageParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListIsoimageParam) GetParameters() string {
	return p.Parameters
}
func (p *ListIsoimageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListIsoimageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListIsoimageParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListIsoimageParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListIsoimageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListIsoimageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListIsoimageParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListIsoimageParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListIsoimageParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListIsoimageParam) GetColumn() []string {
	return p.Column
}
func (p *ListIsoimageParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListIsoimageParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListIsoimageParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListIsoimageParam) GetFormat() string {
	return p.Format
}
func (p *ListIsoimageParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListIsoimageParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListIsoimageParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListIsoimageParam) GetQuery() string {
	return p.Query
}
func (p *ListIsoimageParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListIsoimageParam) GetQueryFile() string {
	return p.QueryFile
}

// CreateIsoimageParam is input parameters for the sacloud API
type CreateIsoimageParam struct {
	Size              int        `json:"size"`
	IsoFile           string     `json:"iso-file"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
}

// NewCreateIsoimageParam return new CreateIsoimageParam
func NewCreateIsoimageParam() *CreateIsoimageParam {
	return &CreateIsoimageParam{

		Size: 5,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *CreateIsoimageParam) FillValueToSkeleton() {
	if isEmpty(p.Size) {
		p.Size = 0
	}
	if isEmpty(p.IsoFile) {
		p.IsoFile = ""
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *CreateIsoimageParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["size"].ValidateFunc
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["iso-file"].ValidateFunc
		errs := validator("--iso-file", p.IsoFile)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreateIsoimageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *CreateIsoimageParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreateIsoimageParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreateIsoimageParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreateIsoimageParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreateIsoimageParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreateIsoimageParam) SetSize(v int) {
	p.Size = v
}

func (p *CreateIsoimageParam) GetSize() int {
	return p.Size
}
func (p *CreateIsoimageParam) SetIsoFile(v string) {
	p.IsoFile = v
}

func (p *CreateIsoimageParam) GetIsoFile() string {
	return p.IsoFile
}
func (p *CreateIsoimageParam) SetName(v string) {
	p.Name = v
}

func (p *CreateIsoimageParam) GetName() string {
	return p.Name
}
func (p *CreateIsoimageParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateIsoimageParam) GetDescription() string {
	return p.Description
}
func (p *CreateIsoimageParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateIsoimageParam) GetTags() []string {
	return p.Tags
}
func (p *CreateIsoimageParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateIsoimageParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateIsoimageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateIsoimageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateIsoimageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateIsoimageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateIsoimageParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateIsoimageParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateIsoimageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateIsoimageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateIsoimageParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateIsoimageParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateIsoimageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateIsoimageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateIsoimageParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateIsoimageParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateIsoimageParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateIsoimageParam) GetColumn() []string {
	return p.Column
}
func (p *CreateIsoimageParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateIsoimageParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateIsoimageParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateIsoimageParam) GetFormat() string {
	return p.Format
}
func (p *CreateIsoimageParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateIsoimageParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateIsoimageParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateIsoimageParam) GetQuery() string {
	return p.Query
}
func (p *CreateIsoimageParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateIsoimageParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadIsoimageParam is input parameters for the sacloud API
type ReadIsoimageParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewReadIsoimageParam return new ReadIsoimageParam
func NewReadIsoimageParam() *ReadIsoimageParam {
	return &ReadIsoimageParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ReadIsoimageParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ReadIsoimageParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadIsoimageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *ReadIsoimageParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadIsoimageParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadIsoimageParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadIsoimageParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadIsoimageParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadIsoimageParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadIsoimageParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadIsoimageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadIsoimageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadIsoimageParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadIsoimageParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadIsoimageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadIsoimageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadIsoimageParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadIsoimageParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadIsoimageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadIsoimageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadIsoimageParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadIsoimageParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadIsoimageParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadIsoimageParam) GetColumn() []string {
	return p.Column
}
func (p *ReadIsoimageParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadIsoimageParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadIsoimageParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadIsoimageParam) GetFormat() string {
	return p.Format
}
func (p *ReadIsoimageParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadIsoimageParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadIsoimageParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadIsoimageParam) GetQuery() string {
	return p.Query
}
func (p *ReadIsoimageParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadIsoimageParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadIsoimageParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadIsoimageParam) GetId() sacloud.ID {
	return p.Id
}

// UpdateIsoimageParam is input parameters for the sacloud API
type UpdateIsoimageParam struct {
	Selector          []string   `json:"selector"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewUpdateIsoimageParam return new UpdateIsoimageParam
func NewUpdateIsoimageParam() *UpdateIsoimageParam {
	return &UpdateIsoimageParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UpdateIsoimageParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UpdateIsoimageParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["ISOImage"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ISOImage"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdateIsoimageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *UpdateIsoimageParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdateIsoimageParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdateIsoimageParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdateIsoimageParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdateIsoimageParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdateIsoimageParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateIsoimageParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateIsoimageParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateIsoimageParam) GetName() string {
	return p.Name
}
func (p *UpdateIsoimageParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateIsoimageParam) GetDescription() string {
	return p.Description
}
func (p *UpdateIsoimageParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateIsoimageParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateIsoimageParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateIsoimageParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateIsoimageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateIsoimageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateIsoimageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateIsoimageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateIsoimageParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateIsoimageParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateIsoimageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateIsoimageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateIsoimageParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateIsoimageParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateIsoimageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateIsoimageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateIsoimageParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateIsoimageParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateIsoimageParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateIsoimageParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateIsoimageParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateIsoimageParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateIsoimageParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateIsoimageParam) GetFormat() string {
	return p.Format
}
func (p *UpdateIsoimageParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateIsoimageParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateIsoimageParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateIsoimageParam) GetQuery() string {
	return p.Query
}
func (p *UpdateIsoimageParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateIsoimageParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateIsoimageParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateIsoimageParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteIsoimageParam is input parameters for the sacloud API
type DeleteIsoimageParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewDeleteIsoimageParam return new DeleteIsoimageParam
func NewDeleteIsoimageParam() *DeleteIsoimageParam {
	return &DeleteIsoimageParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DeleteIsoimageParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DeleteIsoimageParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteIsoimageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *DeleteIsoimageParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteIsoimageParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteIsoimageParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteIsoimageParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteIsoimageParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteIsoimageParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteIsoimageParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteIsoimageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteIsoimageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteIsoimageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteIsoimageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteIsoimageParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteIsoimageParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteIsoimageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteIsoimageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteIsoimageParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteIsoimageParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteIsoimageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteIsoimageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteIsoimageParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteIsoimageParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteIsoimageParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteIsoimageParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteIsoimageParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteIsoimageParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteIsoimageParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteIsoimageParam) GetFormat() string {
	return p.Format
}
func (p *DeleteIsoimageParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteIsoimageParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteIsoimageParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteIsoimageParam) GetQuery() string {
	return p.Query
}
func (p *DeleteIsoimageParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteIsoimageParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteIsoimageParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteIsoimageParam) GetId() sacloud.ID {
	return p.Id
}

// UploadIsoimageParam is input parameters for the sacloud API
type UploadIsoimageParam struct {
	IsoFile           string     `json:"iso-file"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewUploadIsoimageParam return new UploadIsoimageParam
func NewUploadIsoimageParam() *UploadIsoimageParam {
	return &UploadIsoimageParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UploadIsoimageParam) FillValueToSkeleton() {
	if isEmpty(p.IsoFile) {
		p.IsoFile = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UploadIsoimageParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["ISOImage"].Commands["upload"].Params["iso-file"].ValidateFunc
		errs := validator("--iso-file", p.IsoFile)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UploadIsoimageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *UploadIsoimageParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["upload"]
}

func (p *UploadIsoimageParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UploadIsoimageParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UploadIsoimageParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UploadIsoimageParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UploadIsoimageParam) SetIsoFile(v string) {
	p.IsoFile = v
}

func (p *UploadIsoimageParam) GetIsoFile() string {
	return p.IsoFile
}
func (p *UploadIsoimageParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UploadIsoimageParam) GetSelector() []string {
	return p.Selector
}
func (p *UploadIsoimageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UploadIsoimageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UploadIsoimageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UploadIsoimageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UploadIsoimageParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UploadIsoimageParam) GetParameters() string {
	return p.Parameters
}
func (p *UploadIsoimageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UploadIsoimageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UploadIsoimageParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UploadIsoimageParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UploadIsoimageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UploadIsoimageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UploadIsoimageParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UploadIsoimageParam) GetOutputType() string {
	return p.OutputType
}
func (p *UploadIsoimageParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UploadIsoimageParam) GetColumn() []string {
	return p.Column
}
func (p *UploadIsoimageParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UploadIsoimageParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UploadIsoimageParam) SetFormat(v string) {
	p.Format = v
}

func (p *UploadIsoimageParam) GetFormat() string {
	return p.Format
}
func (p *UploadIsoimageParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UploadIsoimageParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UploadIsoimageParam) SetQuery(v string) {
	p.Query = v
}

func (p *UploadIsoimageParam) GetQuery() string {
	return p.Query
}
func (p *UploadIsoimageParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UploadIsoimageParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UploadIsoimageParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UploadIsoimageParam) GetId() sacloud.ID {
	return p.Id
}

// DownloadIsoimageParam is input parameters for the sacloud API
type DownloadIsoimageParam struct {
	FileDestination   string     `json:"file-destination"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewDownloadIsoimageParam return new DownloadIsoimageParam
func NewDownloadIsoimageParam() *DownloadIsoimageParam {
	return &DownloadIsoimageParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DownloadIsoimageParam) FillValueToSkeleton() {
	if isEmpty(p.FileDestination) {
		p.FileDestination = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DownloadIsoimageParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DownloadIsoimageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *DownloadIsoimageParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["download"]
}

func (p *DownloadIsoimageParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DownloadIsoimageParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DownloadIsoimageParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DownloadIsoimageParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DownloadIsoimageParam) SetFileDestination(v string) {
	p.FileDestination = v
}

func (p *DownloadIsoimageParam) GetFileDestination() string {
	return p.FileDestination
}
func (p *DownloadIsoimageParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DownloadIsoimageParam) GetSelector() []string {
	return p.Selector
}
func (p *DownloadIsoimageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DownloadIsoimageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DownloadIsoimageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DownloadIsoimageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DownloadIsoimageParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DownloadIsoimageParam) GetParameters() string {
	return p.Parameters
}
func (p *DownloadIsoimageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DownloadIsoimageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DownloadIsoimageParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DownloadIsoimageParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DownloadIsoimageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DownloadIsoimageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DownloadIsoimageParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DownloadIsoimageParam) GetId() sacloud.ID {
	return p.Id
}

// FtpOpenIsoimageParam is input parameters for the sacloud API
type FtpOpenIsoimageParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewFtpOpenIsoimageParam return new FtpOpenIsoimageParam
func NewFtpOpenIsoimageParam() *FtpOpenIsoimageParam {
	return &FtpOpenIsoimageParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *FtpOpenIsoimageParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *FtpOpenIsoimageParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *FtpOpenIsoimageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *FtpOpenIsoimageParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["ftp-open"]
}

func (p *FtpOpenIsoimageParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *FtpOpenIsoimageParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *FtpOpenIsoimageParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *FtpOpenIsoimageParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *FtpOpenIsoimageParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *FtpOpenIsoimageParam) GetSelector() []string {
	return p.Selector
}
func (p *FtpOpenIsoimageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *FtpOpenIsoimageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *FtpOpenIsoimageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *FtpOpenIsoimageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *FtpOpenIsoimageParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *FtpOpenIsoimageParam) GetParameters() string {
	return p.Parameters
}
func (p *FtpOpenIsoimageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *FtpOpenIsoimageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *FtpOpenIsoimageParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *FtpOpenIsoimageParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *FtpOpenIsoimageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *FtpOpenIsoimageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *FtpOpenIsoimageParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *FtpOpenIsoimageParam) GetOutputType() string {
	return p.OutputType
}
func (p *FtpOpenIsoimageParam) SetColumn(v []string) {
	p.Column = v
}

func (p *FtpOpenIsoimageParam) GetColumn() []string {
	return p.Column
}
func (p *FtpOpenIsoimageParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *FtpOpenIsoimageParam) GetQuiet() bool {
	return p.Quiet
}
func (p *FtpOpenIsoimageParam) SetFormat(v string) {
	p.Format = v
}

func (p *FtpOpenIsoimageParam) GetFormat() string {
	return p.Format
}
func (p *FtpOpenIsoimageParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *FtpOpenIsoimageParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *FtpOpenIsoimageParam) SetQuery(v string) {
	p.Query = v
}

func (p *FtpOpenIsoimageParam) GetQuery() string {
	return p.Query
}
func (p *FtpOpenIsoimageParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *FtpOpenIsoimageParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *FtpOpenIsoimageParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *FtpOpenIsoimageParam) GetId() sacloud.ID {
	return p.Id
}

// FtpCloseIsoimageParam is input parameters for the sacloud API
type FtpCloseIsoimageParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewFtpCloseIsoimageParam return new FtpCloseIsoimageParam
func NewFtpCloseIsoimageParam() *FtpCloseIsoimageParam {
	return &FtpCloseIsoimageParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *FtpCloseIsoimageParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *FtpCloseIsoimageParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *FtpCloseIsoimageParam) GetResourceDef() *schema.Resource {
	return define.Resources["ISOImage"]
}

func (p *FtpCloseIsoimageParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["ftp-close"]
}

func (p *FtpCloseIsoimageParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *FtpCloseIsoimageParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *FtpCloseIsoimageParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *FtpCloseIsoimageParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *FtpCloseIsoimageParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *FtpCloseIsoimageParam) GetSelector() []string {
	return p.Selector
}
func (p *FtpCloseIsoimageParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *FtpCloseIsoimageParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *FtpCloseIsoimageParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *FtpCloseIsoimageParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *FtpCloseIsoimageParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *FtpCloseIsoimageParam) GetParameters() string {
	return p.Parameters
}
func (p *FtpCloseIsoimageParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *FtpCloseIsoimageParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *FtpCloseIsoimageParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *FtpCloseIsoimageParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *FtpCloseIsoimageParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *FtpCloseIsoimageParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *FtpCloseIsoimageParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *FtpCloseIsoimageParam) GetId() sacloud.ID {
	return p.Id
}

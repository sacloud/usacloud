// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListPacketfilterParam is input parameters for the sacloud API
type ListPacketfilterParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`
}

// NewListPacketfilterParam return new ListPacketfilterParam
func NewListPacketfilterParam() *ListPacketfilterParam {
	return &ListPacketfilterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ListPacketfilterParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = []string{""}
	}
	if isEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if isEmpty(p.From) {
		p.From = 0
	}
	if isEmpty(p.Max) {
		p.Max = 0
	}
	if isEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *ListPacketfilterParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListPacketfilterParam) GetResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *ListPacketfilterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListPacketfilterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListPacketfilterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListPacketfilterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListPacketfilterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListPacketfilterParam) SetName(v []string) {
	p.Name = v
}

func (p *ListPacketfilterParam) GetName() []string {
	return p.Name
}
func (p *ListPacketfilterParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListPacketfilterParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListPacketfilterParam) SetFrom(v int) {
	p.From = v
}

func (p *ListPacketfilterParam) GetFrom() int {
	return p.From
}
func (p *ListPacketfilterParam) SetMax(v int) {
	p.Max = v
}

func (p *ListPacketfilterParam) GetMax() int {
	return p.Max
}
func (p *ListPacketfilterParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListPacketfilterParam) GetSort() []string {
	return p.Sort
}
func (p *ListPacketfilterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListPacketfilterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListPacketfilterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListPacketfilterParam) GetParameters() string {
	return p.Parameters
}
func (p *ListPacketfilterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListPacketfilterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListPacketfilterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListPacketfilterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListPacketfilterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListPacketfilterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListPacketfilterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListPacketfilterParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListPacketfilterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListPacketfilterParam) GetColumn() []string {
	return p.Column
}
func (p *ListPacketfilterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListPacketfilterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListPacketfilterParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListPacketfilterParam) GetFormat() string {
	return p.Format
}
func (p *ListPacketfilterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListPacketfilterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListPacketfilterParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListPacketfilterParam) GetQuery() string {
	return p.Query
}
func (p *ListPacketfilterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListPacketfilterParam) GetQueryFile() string {
	return p.QueryFile
}

// CreatePacketfilterParam is input parameters for the sacloud API
type CreatePacketfilterParam struct {
	Name              string   `json:"name"`
	Description       string   `json:"description"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	Parameters        string   `json:"parameters"`
	ParamTemplateFile string   `json:"param-template-file"`
	ParameterFile     string   `json:"parameter-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`
}

// NewCreatePacketfilterParam return new CreatePacketfilterParam
func NewCreatePacketfilterParam() *CreatePacketfilterParam {
	return &CreatePacketfilterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *CreatePacketfilterParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *CreatePacketfilterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreatePacketfilterParam) GetResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *CreatePacketfilterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreatePacketfilterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreatePacketfilterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreatePacketfilterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreatePacketfilterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreatePacketfilterParam) SetName(v string) {
	p.Name = v
}

func (p *CreatePacketfilterParam) GetName() string {
	return p.Name
}
func (p *CreatePacketfilterParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreatePacketfilterParam) GetDescription() string {
	return p.Description
}
func (p *CreatePacketfilterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreatePacketfilterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreatePacketfilterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreatePacketfilterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreatePacketfilterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreatePacketfilterParam) GetParameters() string {
	return p.Parameters
}
func (p *CreatePacketfilterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreatePacketfilterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreatePacketfilterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreatePacketfilterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreatePacketfilterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreatePacketfilterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreatePacketfilterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreatePacketfilterParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreatePacketfilterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreatePacketfilterParam) GetColumn() []string {
	return p.Column
}
func (p *CreatePacketfilterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreatePacketfilterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreatePacketfilterParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreatePacketfilterParam) GetFormat() string {
	return p.Format
}
func (p *CreatePacketfilterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreatePacketfilterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreatePacketfilterParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreatePacketfilterParam) GetQuery() string {
	return p.Query
}
func (p *CreatePacketfilterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreatePacketfilterParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadPacketfilterParam is input parameters for the sacloud API
type ReadPacketfilterParam struct {
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewReadPacketfilterParam return new ReadPacketfilterParam
func NewReadPacketfilterParam() *ReadPacketfilterParam {
	return &ReadPacketfilterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ReadPacketfilterParam) FillValueToSkeleton() {
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ReadPacketfilterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadPacketfilterParam) GetResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *ReadPacketfilterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadPacketfilterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadPacketfilterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadPacketfilterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadPacketfilterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadPacketfilterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadPacketfilterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadPacketfilterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadPacketfilterParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadPacketfilterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadPacketfilterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadPacketfilterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadPacketfilterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadPacketfilterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadPacketfilterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadPacketfilterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadPacketfilterParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadPacketfilterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadPacketfilterParam) GetColumn() []string {
	return p.Column
}
func (p *ReadPacketfilterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadPacketfilterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadPacketfilterParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadPacketfilterParam) GetFormat() string {
	return p.Format
}
func (p *ReadPacketfilterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadPacketfilterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadPacketfilterParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadPacketfilterParam) GetQuery() string {
	return p.Query
}
func (p *ReadPacketfilterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadPacketfilterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadPacketfilterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadPacketfilterParam) GetId() sacloud.ID {
	return p.Id
}

// UpdatePacketfilterParam is input parameters for the sacloud API
type UpdatePacketfilterParam struct {
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewUpdatePacketfilterParam return new UpdatePacketfilterParam
func NewUpdatePacketfilterParam() *UpdatePacketfilterParam {
	return &UpdatePacketfilterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UpdatePacketfilterParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UpdatePacketfilterParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["PacketFilter"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdatePacketfilterParam) GetResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *UpdatePacketfilterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdatePacketfilterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdatePacketfilterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdatePacketfilterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdatePacketfilterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdatePacketfilterParam) SetName(v string) {
	p.Name = v
}

func (p *UpdatePacketfilterParam) GetName() string {
	return p.Name
}
func (p *UpdatePacketfilterParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdatePacketfilterParam) GetDescription() string {
	return p.Description
}
func (p *UpdatePacketfilterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdatePacketfilterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdatePacketfilterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdatePacketfilterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdatePacketfilterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdatePacketfilterParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdatePacketfilterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdatePacketfilterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdatePacketfilterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdatePacketfilterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdatePacketfilterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdatePacketfilterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdatePacketfilterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdatePacketfilterParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdatePacketfilterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdatePacketfilterParam) GetColumn() []string {
	return p.Column
}
func (p *UpdatePacketfilterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdatePacketfilterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdatePacketfilterParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdatePacketfilterParam) GetFormat() string {
	return p.Format
}
func (p *UpdatePacketfilterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdatePacketfilterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdatePacketfilterParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdatePacketfilterParam) GetQuery() string {
	return p.Query
}
func (p *UpdatePacketfilterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdatePacketfilterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdatePacketfilterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdatePacketfilterParam) GetId() sacloud.ID {
	return p.Id
}

// DeletePacketfilterParam is input parameters for the sacloud API
type DeletePacketfilterParam struct {
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewDeletePacketfilterParam return new DeletePacketfilterParam
func NewDeletePacketfilterParam() *DeletePacketfilterParam {
	return &DeletePacketfilterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DeletePacketfilterParam) FillValueToSkeleton() {
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DeletePacketfilterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeletePacketfilterParam) GetResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *DeletePacketfilterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeletePacketfilterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeletePacketfilterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeletePacketfilterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeletePacketfilterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeletePacketfilterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeletePacketfilterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeletePacketfilterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeletePacketfilterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeletePacketfilterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeletePacketfilterParam) GetParameters() string {
	return p.Parameters
}
func (p *DeletePacketfilterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeletePacketfilterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeletePacketfilterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeletePacketfilterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeletePacketfilterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeletePacketfilterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeletePacketfilterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeletePacketfilterParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeletePacketfilterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeletePacketfilterParam) GetColumn() []string {
	return p.Column
}
func (p *DeletePacketfilterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeletePacketfilterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeletePacketfilterParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeletePacketfilterParam) GetFormat() string {
	return p.Format
}
func (p *DeletePacketfilterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeletePacketfilterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeletePacketfilterParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeletePacketfilterParam) GetQuery() string {
	return p.Query
}
func (p *DeletePacketfilterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeletePacketfilterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeletePacketfilterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeletePacketfilterParam) GetId() sacloud.ID {
	return p.Id
}

// RuleInfoPacketfilterParam is input parameters for the sacloud API
type RuleInfoPacketfilterParam struct {
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewRuleInfoPacketfilterParam return new RuleInfoPacketfilterParam
func NewRuleInfoPacketfilterParam() *RuleInfoPacketfilterParam {
	return &RuleInfoPacketfilterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *RuleInfoPacketfilterParam) FillValueToSkeleton() {
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *RuleInfoPacketfilterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *RuleInfoPacketfilterParam) GetResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *RuleInfoPacketfilterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["rule-info"]
}

func (p *RuleInfoPacketfilterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *RuleInfoPacketfilterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *RuleInfoPacketfilterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *RuleInfoPacketfilterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *RuleInfoPacketfilterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *RuleInfoPacketfilterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *RuleInfoPacketfilterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *RuleInfoPacketfilterParam) GetParameters() string {
	return p.Parameters
}
func (p *RuleInfoPacketfilterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *RuleInfoPacketfilterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *RuleInfoPacketfilterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *RuleInfoPacketfilterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *RuleInfoPacketfilterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *RuleInfoPacketfilterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *RuleInfoPacketfilterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *RuleInfoPacketfilterParam) GetOutputType() string {
	return p.OutputType
}
func (p *RuleInfoPacketfilterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *RuleInfoPacketfilterParam) GetColumn() []string {
	return p.Column
}
func (p *RuleInfoPacketfilterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *RuleInfoPacketfilterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *RuleInfoPacketfilterParam) SetFormat(v string) {
	p.Format = v
}

func (p *RuleInfoPacketfilterParam) GetFormat() string {
	return p.Format
}
func (p *RuleInfoPacketfilterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *RuleInfoPacketfilterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *RuleInfoPacketfilterParam) SetQuery(v string) {
	p.Query = v
}

func (p *RuleInfoPacketfilterParam) GetQuery() string {
	return p.Query
}
func (p *RuleInfoPacketfilterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *RuleInfoPacketfilterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *RuleInfoPacketfilterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *RuleInfoPacketfilterParam) GetId() sacloud.ID {
	return p.Id
}

// RuleAddPacketfilterParam is input parameters for the sacloud API
type RuleAddPacketfilterParam struct {
	Index             int        `json:"index"`
	Protocol          string     `json:"protocol"`
	SourceNetwork     string     `json:"source-network"`
	SourcePort        string     `json:"source-port"`
	DestinationPort   string     `json:"destination-port"`
	Action            string     `json:"action"`
	Description       string     `json:"description"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewRuleAddPacketfilterParam return new RuleAddPacketfilterParam
func NewRuleAddPacketfilterParam() *RuleAddPacketfilterParam {
	return &RuleAddPacketfilterParam{

		Index: 1,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *RuleAddPacketfilterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if isEmpty(p.SourceNetwork) {
		p.SourceNetwork = ""
	}
	if isEmpty(p.SourcePort) {
		p.SourcePort = ""
	}
	if isEmpty(p.DestinationPort) {
		p.DestinationPort = ""
	}
	if isEmpty(p.Action) {
		p.Action = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *RuleAddPacketfilterParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["source-network"].ValidateFunc
		errs := validator("--source-network", p.SourceNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["source-port"].ValidateFunc
		errs := validator("--source-port", p.SourcePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["destination-port"].ValidateFunc
		errs := validator("--destination-port", p.DestinationPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["action"].ValidateFunc
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *RuleAddPacketfilterParam) GetResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *RuleAddPacketfilterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["rule-add"]
}

func (p *RuleAddPacketfilterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *RuleAddPacketfilterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *RuleAddPacketfilterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *RuleAddPacketfilterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *RuleAddPacketfilterParam) SetIndex(v int) {
	p.Index = v
}

func (p *RuleAddPacketfilterParam) GetIndex() int {
	return p.Index
}
func (p *RuleAddPacketfilterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *RuleAddPacketfilterParam) GetProtocol() string {
	return p.Protocol
}
func (p *RuleAddPacketfilterParam) SetSourceNetwork(v string) {
	p.SourceNetwork = v
}

func (p *RuleAddPacketfilterParam) GetSourceNetwork() string {
	return p.SourceNetwork
}
func (p *RuleAddPacketfilterParam) SetSourcePort(v string) {
	p.SourcePort = v
}

func (p *RuleAddPacketfilterParam) GetSourcePort() string {
	return p.SourcePort
}
func (p *RuleAddPacketfilterParam) SetDestinationPort(v string) {
	p.DestinationPort = v
}

func (p *RuleAddPacketfilterParam) GetDestinationPort() string {
	return p.DestinationPort
}
func (p *RuleAddPacketfilterParam) SetAction(v string) {
	p.Action = v
}

func (p *RuleAddPacketfilterParam) GetAction() string {
	return p.Action
}
func (p *RuleAddPacketfilterParam) SetDescription(v string) {
	p.Description = v
}

func (p *RuleAddPacketfilterParam) GetDescription() string {
	return p.Description
}
func (p *RuleAddPacketfilterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *RuleAddPacketfilterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *RuleAddPacketfilterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *RuleAddPacketfilterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *RuleAddPacketfilterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *RuleAddPacketfilterParam) GetParameters() string {
	return p.Parameters
}
func (p *RuleAddPacketfilterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *RuleAddPacketfilterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *RuleAddPacketfilterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *RuleAddPacketfilterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *RuleAddPacketfilterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *RuleAddPacketfilterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *RuleAddPacketfilterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *RuleAddPacketfilterParam) GetOutputType() string {
	return p.OutputType
}
func (p *RuleAddPacketfilterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *RuleAddPacketfilterParam) GetColumn() []string {
	return p.Column
}
func (p *RuleAddPacketfilterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *RuleAddPacketfilterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *RuleAddPacketfilterParam) SetFormat(v string) {
	p.Format = v
}

func (p *RuleAddPacketfilterParam) GetFormat() string {
	return p.Format
}
func (p *RuleAddPacketfilterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *RuleAddPacketfilterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *RuleAddPacketfilterParam) SetQuery(v string) {
	p.Query = v
}

func (p *RuleAddPacketfilterParam) GetQuery() string {
	return p.Query
}
func (p *RuleAddPacketfilterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *RuleAddPacketfilterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *RuleAddPacketfilterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *RuleAddPacketfilterParam) GetId() sacloud.ID {
	return p.Id
}

// RuleUpdatePacketfilterParam is input parameters for the sacloud API
type RuleUpdatePacketfilterParam struct {
	Index             int        `json:"index"`
	Protocol          string     `json:"protocol"`
	SourceNetwork     string     `json:"source-network"`
	SourcePort        string     `json:"source-port"`
	DestinationPort   string     `json:"destination-port"`
	Action            string     `json:"action"`
	Description       string     `json:"description"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewRuleUpdatePacketfilterParam return new RuleUpdatePacketfilterParam
func NewRuleUpdatePacketfilterParam() *RuleUpdatePacketfilterParam {
	return &RuleUpdatePacketfilterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *RuleUpdatePacketfilterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if isEmpty(p.SourceNetwork) {
		p.SourceNetwork = ""
	}
	if isEmpty(p.SourcePort) {
		p.SourcePort = ""
	}
	if isEmpty(p.DestinationPort) {
		p.DestinationPort = ""
	}
	if isEmpty(p.Action) {
		p.Action = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *RuleUpdatePacketfilterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["source-network"].ValidateFunc
		errs := validator("--source-network", p.SourceNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["source-port"].ValidateFunc
		errs := validator("--source-port", p.SourcePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["destination-port"].ValidateFunc
		errs := validator("--destination-port", p.DestinationPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["action"].ValidateFunc
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *RuleUpdatePacketfilterParam) GetResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *RuleUpdatePacketfilterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["rule-update"]
}

func (p *RuleUpdatePacketfilterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *RuleUpdatePacketfilterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *RuleUpdatePacketfilterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *RuleUpdatePacketfilterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *RuleUpdatePacketfilterParam) SetIndex(v int) {
	p.Index = v
}

func (p *RuleUpdatePacketfilterParam) GetIndex() int {
	return p.Index
}
func (p *RuleUpdatePacketfilterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *RuleUpdatePacketfilterParam) GetProtocol() string {
	return p.Protocol
}
func (p *RuleUpdatePacketfilterParam) SetSourceNetwork(v string) {
	p.SourceNetwork = v
}

func (p *RuleUpdatePacketfilterParam) GetSourceNetwork() string {
	return p.SourceNetwork
}
func (p *RuleUpdatePacketfilterParam) SetSourcePort(v string) {
	p.SourcePort = v
}

func (p *RuleUpdatePacketfilterParam) GetSourcePort() string {
	return p.SourcePort
}
func (p *RuleUpdatePacketfilterParam) SetDestinationPort(v string) {
	p.DestinationPort = v
}

func (p *RuleUpdatePacketfilterParam) GetDestinationPort() string {
	return p.DestinationPort
}
func (p *RuleUpdatePacketfilterParam) SetAction(v string) {
	p.Action = v
}

func (p *RuleUpdatePacketfilterParam) GetAction() string {
	return p.Action
}
func (p *RuleUpdatePacketfilterParam) SetDescription(v string) {
	p.Description = v
}

func (p *RuleUpdatePacketfilterParam) GetDescription() string {
	return p.Description
}
func (p *RuleUpdatePacketfilterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *RuleUpdatePacketfilterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *RuleUpdatePacketfilterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *RuleUpdatePacketfilterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *RuleUpdatePacketfilterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *RuleUpdatePacketfilterParam) GetParameters() string {
	return p.Parameters
}
func (p *RuleUpdatePacketfilterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *RuleUpdatePacketfilterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *RuleUpdatePacketfilterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *RuleUpdatePacketfilterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *RuleUpdatePacketfilterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *RuleUpdatePacketfilterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *RuleUpdatePacketfilterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *RuleUpdatePacketfilterParam) GetOutputType() string {
	return p.OutputType
}
func (p *RuleUpdatePacketfilterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *RuleUpdatePacketfilterParam) GetColumn() []string {
	return p.Column
}
func (p *RuleUpdatePacketfilterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *RuleUpdatePacketfilterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *RuleUpdatePacketfilterParam) SetFormat(v string) {
	p.Format = v
}

func (p *RuleUpdatePacketfilterParam) GetFormat() string {
	return p.Format
}
func (p *RuleUpdatePacketfilterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *RuleUpdatePacketfilterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *RuleUpdatePacketfilterParam) SetQuery(v string) {
	p.Query = v
}

func (p *RuleUpdatePacketfilterParam) GetQuery() string {
	return p.Query
}
func (p *RuleUpdatePacketfilterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *RuleUpdatePacketfilterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *RuleUpdatePacketfilterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *RuleUpdatePacketfilterParam) GetId() sacloud.ID {
	return p.Id
}

// RuleDeletePacketfilterParam is input parameters for the sacloud API
type RuleDeletePacketfilterParam struct {
	Index             int        `json:"index"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewRuleDeletePacketfilterParam return new RuleDeletePacketfilterParam
func NewRuleDeletePacketfilterParam() *RuleDeletePacketfilterParam {
	return &RuleDeletePacketfilterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *RuleDeletePacketfilterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *RuleDeletePacketfilterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *RuleDeletePacketfilterParam) GetResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *RuleDeletePacketfilterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["rule-delete"]
}

func (p *RuleDeletePacketfilterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *RuleDeletePacketfilterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *RuleDeletePacketfilterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *RuleDeletePacketfilterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *RuleDeletePacketfilterParam) SetIndex(v int) {
	p.Index = v
}

func (p *RuleDeletePacketfilterParam) GetIndex() int {
	return p.Index
}
func (p *RuleDeletePacketfilterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *RuleDeletePacketfilterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *RuleDeletePacketfilterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *RuleDeletePacketfilterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *RuleDeletePacketfilterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *RuleDeletePacketfilterParam) GetParameters() string {
	return p.Parameters
}
func (p *RuleDeletePacketfilterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *RuleDeletePacketfilterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *RuleDeletePacketfilterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *RuleDeletePacketfilterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *RuleDeletePacketfilterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *RuleDeletePacketfilterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *RuleDeletePacketfilterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *RuleDeletePacketfilterParam) GetOutputType() string {
	return p.OutputType
}
func (p *RuleDeletePacketfilterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *RuleDeletePacketfilterParam) GetColumn() []string {
	return p.Column
}
func (p *RuleDeletePacketfilterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *RuleDeletePacketfilterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *RuleDeletePacketfilterParam) SetFormat(v string) {
	p.Format = v
}

func (p *RuleDeletePacketfilterParam) GetFormat() string {
	return p.Format
}
func (p *RuleDeletePacketfilterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *RuleDeletePacketfilterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *RuleDeletePacketfilterParam) SetQuery(v string) {
	p.Query = v
}

func (p *RuleDeletePacketfilterParam) GetQuery() string {
	return p.Query
}
func (p *RuleDeletePacketfilterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *RuleDeletePacketfilterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *RuleDeletePacketfilterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *RuleDeletePacketfilterParam) GetId() sacloud.ID {
	return p.Id
}

// InterfaceConnectPacketfilterParam is input parameters for the sacloud API
type InterfaceConnectPacketfilterParam struct {
	InterfaceId       sacloud.ID `json:"interface-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewInterfaceConnectPacketfilterParam return new InterfaceConnectPacketfilterParam
func NewInterfaceConnectPacketfilterParam() *InterfaceConnectPacketfilterParam {
	return &InterfaceConnectPacketfilterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *InterfaceConnectPacketfilterParam) FillValueToSkeleton() {
	if isEmpty(p.InterfaceId) {
		p.InterfaceId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *InterfaceConnectPacketfilterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--interface-id", p.InterfaceId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["interface-connect"].Params["interface-id"].ValidateFunc
		errs := validator("--interface-id", p.InterfaceId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *InterfaceConnectPacketfilterParam) GetResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *InterfaceConnectPacketfilterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["interface-connect"]
}

func (p *InterfaceConnectPacketfilterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *InterfaceConnectPacketfilterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *InterfaceConnectPacketfilterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *InterfaceConnectPacketfilterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *InterfaceConnectPacketfilterParam) SetInterfaceId(v sacloud.ID) {
	p.InterfaceId = v
}

func (p *InterfaceConnectPacketfilterParam) GetInterfaceId() sacloud.ID {
	return p.InterfaceId
}
func (p *InterfaceConnectPacketfilterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceConnectPacketfilterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceConnectPacketfilterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceConnectPacketfilterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceConnectPacketfilterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *InterfaceConnectPacketfilterParam) GetParameters() string {
	return p.Parameters
}
func (p *InterfaceConnectPacketfilterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceConnectPacketfilterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceConnectPacketfilterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *InterfaceConnectPacketfilterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *InterfaceConnectPacketfilterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceConnectPacketfilterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceConnectPacketfilterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *InterfaceConnectPacketfilterParam) GetId() sacloud.ID {
	return p.Id
}

// InterfaceDisconnectPacketfilterParam is input parameters for the sacloud API
type InterfaceDisconnectPacketfilterParam struct {
	InterfaceId       sacloud.ID `json:"interface-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewInterfaceDisconnectPacketfilterParam return new InterfaceDisconnectPacketfilterParam
func NewInterfaceDisconnectPacketfilterParam() *InterfaceDisconnectPacketfilterParam {
	return &InterfaceDisconnectPacketfilterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *InterfaceDisconnectPacketfilterParam) FillValueToSkeleton() {
	if isEmpty(p.InterfaceId) {
		p.InterfaceId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *InterfaceDisconnectPacketfilterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--interface-id", p.InterfaceId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["interface-disconnect"].Params["interface-id"].ValidateFunc
		errs := validator("--interface-id", p.InterfaceId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *InterfaceDisconnectPacketfilterParam) GetResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *InterfaceDisconnectPacketfilterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["interface-disconnect"]
}

func (p *InterfaceDisconnectPacketfilterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *InterfaceDisconnectPacketfilterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *InterfaceDisconnectPacketfilterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *InterfaceDisconnectPacketfilterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *InterfaceDisconnectPacketfilterParam) SetInterfaceId(v sacloud.ID) {
	p.InterfaceId = v
}

func (p *InterfaceDisconnectPacketfilterParam) GetInterfaceId() sacloud.ID {
	return p.InterfaceId
}
func (p *InterfaceDisconnectPacketfilterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceDisconnectPacketfilterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceDisconnectPacketfilterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceDisconnectPacketfilterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceDisconnectPacketfilterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *InterfaceDisconnectPacketfilterParam) GetParameters() string {
	return p.Parameters
}
func (p *InterfaceDisconnectPacketfilterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceDisconnectPacketfilterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceDisconnectPacketfilterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *InterfaceDisconnectPacketfilterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *InterfaceDisconnectPacketfilterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceDisconnectPacketfilterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceDisconnectPacketfilterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *InterfaceDisconnectPacketfilterParam) GetId() sacloud.ID {
	return p.Id
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListPacketFilterParam is input parameters for the sacloud API
type ListPacketFilterParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`
}

// NewListPacketFilterParam return new ListPacketFilterParam
func NewListPacketFilterParam() *ListPacketFilterParam {
	return &ListPacketFilterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ListPacketFilterParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = []string{""}
	}
	if isEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if isEmpty(p.From) {
		p.From = 0
	}
	if isEmpty(p.Max) {
		p.Max = 0
	}
	if isEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *ListPacketFilterParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListPacketFilterParam) GetResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *ListPacketFilterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListPacketFilterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListPacketFilterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListPacketFilterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListPacketFilterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListPacketFilterParam) SetName(v []string) {
	p.Name = v
}

func (p *ListPacketFilterParam) GetName() []string {
	return p.Name
}
func (p *ListPacketFilterParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListPacketFilterParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListPacketFilterParam) SetFrom(v int) {
	p.From = v
}

func (p *ListPacketFilterParam) GetFrom() int {
	return p.From
}
func (p *ListPacketFilterParam) SetMax(v int) {
	p.Max = v
}

func (p *ListPacketFilterParam) GetMax() int {
	return p.Max
}
func (p *ListPacketFilterParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListPacketFilterParam) GetSort() []string {
	return p.Sort
}
func (p *ListPacketFilterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListPacketFilterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListPacketFilterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListPacketFilterParam) GetParameters() string {
	return p.Parameters
}
func (p *ListPacketFilterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListPacketFilterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListPacketFilterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListPacketFilterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListPacketFilterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListPacketFilterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListPacketFilterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListPacketFilterParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListPacketFilterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListPacketFilterParam) GetColumn() []string {
	return p.Column
}
func (p *ListPacketFilterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListPacketFilterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListPacketFilterParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListPacketFilterParam) GetFormat() string {
	return p.Format
}
func (p *ListPacketFilterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListPacketFilterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListPacketFilterParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListPacketFilterParam) GetQuery() string {
	return p.Query
}
func (p *ListPacketFilterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListPacketFilterParam) GetQueryFile() string {
	return p.QueryFile
}

// CreatePacketFilterParam is input parameters for the sacloud API
type CreatePacketFilterParam struct {
	Name              string   `json:"name"`
	Description       string   `json:"description"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	Parameters        string   `json:"parameters"`
	ParamTemplateFile string   `json:"param-template-file"`
	ParameterFile     string   `json:"parameter-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`
}

// NewCreatePacketFilterParam return new CreatePacketFilterParam
func NewCreatePacketFilterParam() *CreatePacketFilterParam {
	return &CreatePacketFilterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *CreatePacketFilterParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *CreatePacketFilterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreatePacketFilterParam) GetResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *CreatePacketFilterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreatePacketFilterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreatePacketFilterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreatePacketFilterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreatePacketFilterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreatePacketFilterParam) SetName(v string) {
	p.Name = v
}

func (p *CreatePacketFilterParam) GetName() string {
	return p.Name
}
func (p *CreatePacketFilterParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreatePacketFilterParam) GetDescription() string {
	return p.Description
}
func (p *CreatePacketFilterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreatePacketFilterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreatePacketFilterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreatePacketFilterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreatePacketFilterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreatePacketFilterParam) GetParameters() string {
	return p.Parameters
}
func (p *CreatePacketFilterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreatePacketFilterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreatePacketFilterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreatePacketFilterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreatePacketFilterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreatePacketFilterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreatePacketFilterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreatePacketFilterParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreatePacketFilterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreatePacketFilterParam) GetColumn() []string {
	return p.Column
}
func (p *CreatePacketFilterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreatePacketFilterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreatePacketFilterParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreatePacketFilterParam) GetFormat() string {
	return p.Format
}
func (p *CreatePacketFilterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreatePacketFilterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreatePacketFilterParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreatePacketFilterParam) GetQuery() string {
	return p.Query
}
func (p *CreatePacketFilterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreatePacketFilterParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadPacketFilterParam is input parameters for the sacloud API
type ReadPacketFilterParam struct {
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewReadPacketFilterParam return new ReadPacketFilterParam
func NewReadPacketFilterParam() *ReadPacketFilterParam {
	return &ReadPacketFilterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ReadPacketFilterParam) FillValueToSkeleton() {
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ReadPacketFilterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadPacketFilterParam) GetResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *ReadPacketFilterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadPacketFilterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadPacketFilterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadPacketFilterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadPacketFilterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadPacketFilterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadPacketFilterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadPacketFilterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadPacketFilterParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadPacketFilterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadPacketFilterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadPacketFilterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadPacketFilterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadPacketFilterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadPacketFilterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadPacketFilterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadPacketFilterParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadPacketFilterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadPacketFilterParam) GetColumn() []string {
	return p.Column
}
func (p *ReadPacketFilterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadPacketFilterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadPacketFilterParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadPacketFilterParam) GetFormat() string {
	return p.Format
}
func (p *ReadPacketFilterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadPacketFilterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadPacketFilterParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadPacketFilterParam) GetQuery() string {
	return p.Query
}
func (p *ReadPacketFilterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadPacketFilterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadPacketFilterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadPacketFilterParam) GetId() sacloud.ID {
	return p.Id
}

// UpdatePacketFilterParam is input parameters for the sacloud API
type UpdatePacketFilterParam struct {
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewUpdatePacketFilterParam return new UpdatePacketFilterParam
func NewUpdatePacketFilterParam() *UpdatePacketFilterParam {
	return &UpdatePacketFilterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UpdatePacketFilterParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UpdatePacketFilterParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["PacketFilter"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdatePacketFilterParam) GetResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *UpdatePacketFilterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdatePacketFilterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdatePacketFilterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdatePacketFilterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdatePacketFilterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdatePacketFilterParam) SetName(v string) {
	p.Name = v
}

func (p *UpdatePacketFilterParam) GetName() string {
	return p.Name
}
func (p *UpdatePacketFilterParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdatePacketFilterParam) GetDescription() string {
	return p.Description
}
func (p *UpdatePacketFilterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdatePacketFilterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdatePacketFilterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdatePacketFilterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdatePacketFilterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdatePacketFilterParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdatePacketFilterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdatePacketFilterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdatePacketFilterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdatePacketFilterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdatePacketFilterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdatePacketFilterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdatePacketFilterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdatePacketFilterParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdatePacketFilterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdatePacketFilterParam) GetColumn() []string {
	return p.Column
}
func (p *UpdatePacketFilterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdatePacketFilterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdatePacketFilterParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdatePacketFilterParam) GetFormat() string {
	return p.Format
}
func (p *UpdatePacketFilterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdatePacketFilterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdatePacketFilterParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdatePacketFilterParam) GetQuery() string {
	return p.Query
}
func (p *UpdatePacketFilterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdatePacketFilterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdatePacketFilterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdatePacketFilterParam) GetId() sacloud.ID {
	return p.Id
}

// DeletePacketFilterParam is input parameters for the sacloud API
type DeletePacketFilterParam struct {
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewDeletePacketFilterParam return new DeletePacketFilterParam
func NewDeletePacketFilterParam() *DeletePacketFilterParam {
	return &DeletePacketFilterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DeletePacketFilterParam) FillValueToSkeleton() {
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DeletePacketFilterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeletePacketFilterParam) GetResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *DeletePacketFilterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeletePacketFilterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeletePacketFilterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeletePacketFilterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeletePacketFilterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeletePacketFilterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeletePacketFilterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeletePacketFilterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeletePacketFilterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeletePacketFilterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeletePacketFilterParam) GetParameters() string {
	return p.Parameters
}
func (p *DeletePacketFilterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeletePacketFilterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeletePacketFilterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeletePacketFilterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeletePacketFilterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeletePacketFilterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeletePacketFilterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeletePacketFilterParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeletePacketFilterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeletePacketFilterParam) GetColumn() []string {
	return p.Column
}
func (p *DeletePacketFilterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeletePacketFilterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeletePacketFilterParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeletePacketFilterParam) GetFormat() string {
	return p.Format
}
func (p *DeletePacketFilterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeletePacketFilterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeletePacketFilterParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeletePacketFilterParam) GetQuery() string {
	return p.Query
}
func (p *DeletePacketFilterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeletePacketFilterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeletePacketFilterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeletePacketFilterParam) GetId() sacloud.ID {
	return p.Id
}

// RuleInfoPacketFilterParam is input parameters for the sacloud API
type RuleInfoPacketFilterParam struct {
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewRuleInfoPacketFilterParam return new RuleInfoPacketFilterParam
func NewRuleInfoPacketFilterParam() *RuleInfoPacketFilterParam {
	return &RuleInfoPacketFilterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *RuleInfoPacketFilterParam) FillValueToSkeleton() {
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *RuleInfoPacketFilterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *RuleInfoPacketFilterParam) GetResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *RuleInfoPacketFilterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["rule-info"]
}

func (p *RuleInfoPacketFilterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *RuleInfoPacketFilterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *RuleInfoPacketFilterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *RuleInfoPacketFilterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *RuleInfoPacketFilterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *RuleInfoPacketFilterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *RuleInfoPacketFilterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *RuleInfoPacketFilterParam) GetParameters() string {
	return p.Parameters
}
func (p *RuleInfoPacketFilterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *RuleInfoPacketFilterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *RuleInfoPacketFilterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *RuleInfoPacketFilterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *RuleInfoPacketFilterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *RuleInfoPacketFilterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *RuleInfoPacketFilterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *RuleInfoPacketFilterParam) GetOutputType() string {
	return p.OutputType
}
func (p *RuleInfoPacketFilterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *RuleInfoPacketFilterParam) GetColumn() []string {
	return p.Column
}
func (p *RuleInfoPacketFilterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *RuleInfoPacketFilterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *RuleInfoPacketFilterParam) SetFormat(v string) {
	p.Format = v
}

func (p *RuleInfoPacketFilterParam) GetFormat() string {
	return p.Format
}
func (p *RuleInfoPacketFilterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *RuleInfoPacketFilterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *RuleInfoPacketFilterParam) SetQuery(v string) {
	p.Query = v
}

func (p *RuleInfoPacketFilterParam) GetQuery() string {
	return p.Query
}
func (p *RuleInfoPacketFilterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *RuleInfoPacketFilterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *RuleInfoPacketFilterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *RuleInfoPacketFilterParam) GetId() sacloud.ID {
	return p.Id
}

// RuleAddPacketFilterParam is input parameters for the sacloud API
type RuleAddPacketFilterParam struct {
	Index             int        `json:"index"`
	Protocol          string     `json:"protocol"`
	SourceNetwork     string     `json:"source-network"`
	SourcePort        string     `json:"source-port"`
	DestinationPort   string     `json:"destination-port"`
	Action            string     `json:"action"`
	Description       string     `json:"description"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewRuleAddPacketFilterParam return new RuleAddPacketFilterParam
func NewRuleAddPacketFilterParam() *RuleAddPacketFilterParam {
	return &RuleAddPacketFilterParam{

		Index: 1,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *RuleAddPacketFilterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if isEmpty(p.SourceNetwork) {
		p.SourceNetwork = ""
	}
	if isEmpty(p.SourcePort) {
		p.SourcePort = ""
	}
	if isEmpty(p.DestinationPort) {
		p.DestinationPort = ""
	}
	if isEmpty(p.Action) {
		p.Action = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *RuleAddPacketFilterParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["source-network"].ValidateFunc
		errs := validator("--source-network", p.SourceNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["source-port"].ValidateFunc
		errs := validator("--source-port", p.SourcePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["destination-port"].ValidateFunc
		errs := validator("--destination-port", p.DestinationPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["action"].ValidateFunc
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-add"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *RuleAddPacketFilterParam) GetResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *RuleAddPacketFilterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["rule-add"]
}

func (p *RuleAddPacketFilterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *RuleAddPacketFilterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *RuleAddPacketFilterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *RuleAddPacketFilterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *RuleAddPacketFilterParam) SetIndex(v int) {
	p.Index = v
}

func (p *RuleAddPacketFilterParam) GetIndex() int {
	return p.Index
}
func (p *RuleAddPacketFilterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *RuleAddPacketFilterParam) GetProtocol() string {
	return p.Protocol
}
func (p *RuleAddPacketFilterParam) SetSourceNetwork(v string) {
	p.SourceNetwork = v
}

func (p *RuleAddPacketFilterParam) GetSourceNetwork() string {
	return p.SourceNetwork
}
func (p *RuleAddPacketFilterParam) SetSourcePort(v string) {
	p.SourcePort = v
}

func (p *RuleAddPacketFilterParam) GetSourcePort() string {
	return p.SourcePort
}
func (p *RuleAddPacketFilterParam) SetDestinationPort(v string) {
	p.DestinationPort = v
}

func (p *RuleAddPacketFilterParam) GetDestinationPort() string {
	return p.DestinationPort
}
func (p *RuleAddPacketFilterParam) SetAction(v string) {
	p.Action = v
}

func (p *RuleAddPacketFilterParam) GetAction() string {
	return p.Action
}
func (p *RuleAddPacketFilterParam) SetDescription(v string) {
	p.Description = v
}

func (p *RuleAddPacketFilterParam) GetDescription() string {
	return p.Description
}
func (p *RuleAddPacketFilterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *RuleAddPacketFilterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *RuleAddPacketFilterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *RuleAddPacketFilterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *RuleAddPacketFilterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *RuleAddPacketFilterParam) GetParameters() string {
	return p.Parameters
}
func (p *RuleAddPacketFilterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *RuleAddPacketFilterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *RuleAddPacketFilterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *RuleAddPacketFilterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *RuleAddPacketFilterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *RuleAddPacketFilterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *RuleAddPacketFilterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *RuleAddPacketFilterParam) GetOutputType() string {
	return p.OutputType
}
func (p *RuleAddPacketFilterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *RuleAddPacketFilterParam) GetColumn() []string {
	return p.Column
}
func (p *RuleAddPacketFilterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *RuleAddPacketFilterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *RuleAddPacketFilterParam) SetFormat(v string) {
	p.Format = v
}

func (p *RuleAddPacketFilterParam) GetFormat() string {
	return p.Format
}
func (p *RuleAddPacketFilterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *RuleAddPacketFilterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *RuleAddPacketFilterParam) SetQuery(v string) {
	p.Query = v
}

func (p *RuleAddPacketFilterParam) GetQuery() string {
	return p.Query
}
func (p *RuleAddPacketFilterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *RuleAddPacketFilterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *RuleAddPacketFilterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *RuleAddPacketFilterParam) GetId() sacloud.ID {
	return p.Id
}

// RuleUpdatePacketFilterParam is input parameters for the sacloud API
type RuleUpdatePacketFilterParam struct {
	Index             int        `json:"index"`
	Protocol          string     `json:"protocol"`
	SourceNetwork     string     `json:"source-network"`
	SourcePort        string     `json:"source-port"`
	DestinationPort   string     `json:"destination-port"`
	Action            string     `json:"action"`
	Description       string     `json:"description"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewRuleUpdatePacketFilterParam return new RuleUpdatePacketFilterParam
func NewRuleUpdatePacketFilterParam() *RuleUpdatePacketFilterParam {
	return &RuleUpdatePacketFilterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *RuleUpdatePacketFilterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if isEmpty(p.SourceNetwork) {
		p.SourceNetwork = ""
	}
	if isEmpty(p.SourcePort) {
		p.SourcePort = ""
	}
	if isEmpty(p.DestinationPort) {
		p.DestinationPort = ""
	}
	if isEmpty(p.Action) {
		p.Action = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *RuleUpdatePacketFilterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["source-network"].ValidateFunc
		errs := validator("--source-network", p.SourceNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["source-port"].ValidateFunc
		errs := validator("--source-port", p.SourcePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["destination-port"].ValidateFunc
		errs := validator("--destination-port", p.DestinationPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["action"].ValidateFunc
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["rule-update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *RuleUpdatePacketFilterParam) GetResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *RuleUpdatePacketFilterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["rule-update"]
}

func (p *RuleUpdatePacketFilterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *RuleUpdatePacketFilterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *RuleUpdatePacketFilterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *RuleUpdatePacketFilterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *RuleUpdatePacketFilterParam) SetIndex(v int) {
	p.Index = v
}

func (p *RuleUpdatePacketFilterParam) GetIndex() int {
	return p.Index
}
func (p *RuleUpdatePacketFilterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *RuleUpdatePacketFilterParam) GetProtocol() string {
	return p.Protocol
}
func (p *RuleUpdatePacketFilterParam) SetSourceNetwork(v string) {
	p.SourceNetwork = v
}

func (p *RuleUpdatePacketFilterParam) GetSourceNetwork() string {
	return p.SourceNetwork
}
func (p *RuleUpdatePacketFilterParam) SetSourcePort(v string) {
	p.SourcePort = v
}

func (p *RuleUpdatePacketFilterParam) GetSourcePort() string {
	return p.SourcePort
}
func (p *RuleUpdatePacketFilterParam) SetDestinationPort(v string) {
	p.DestinationPort = v
}

func (p *RuleUpdatePacketFilterParam) GetDestinationPort() string {
	return p.DestinationPort
}
func (p *RuleUpdatePacketFilterParam) SetAction(v string) {
	p.Action = v
}

func (p *RuleUpdatePacketFilterParam) GetAction() string {
	return p.Action
}
func (p *RuleUpdatePacketFilterParam) SetDescription(v string) {
	p.Description = v
}

func (p *RuleUpdatePacketFilterParam) GetDescription() string {
	return p.Description
}
func (p *RuleUpdatePacketFilterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *RuleUpdatePacketFilterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *RuleUpdatePacketFilterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *RuleUpdatePacketFilterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *RuleUpdatePacketFilterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *RuleUpdatePacketFilterParam) GetParameters() string {
	return p.Parameters
}
func (p *RuleUpdatePacketFilterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *RuleUpdatePacketFilterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *RuleUpdatePacketFilterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *RuleUpdatePacketFilterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *RuleUpdatePacketFilterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *RuleUpdatePacketFilterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *RuleUpdatePacketFilterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *RuleUpdatePacketFilterParam) GetOutputType() string {
	return p.OutputType
}
func (p *RuleUpdatePacketFilterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *RuleUpdatePacketFilterParam) GetColumn() []string {
	return p.Column
}
func (p *RuleUpdatePacketFilterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *RuleUpdatePacketFilterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *RuleUpdatePacketFilterParam) SetFormat(v string) {
	p.Format = v
}

func (p *RuleUpdatePacketFilterParam) GetFormat() string {
	return p.Format
}
func (p *RuleUpdatePacketFilterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *RuleUpdatePacketFilterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *RuleUpdatePacketFilterParam) SetQuery(v string) {
	p.Query = v
}

func (p *RuleUpdatePacketFilterParam) GetQuery() string {
	return p.Query
}
func (p *RuleUpdatePacketFilterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *RuleUpdatePacketFilterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *RuleUpdatePacketFilterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *RuleUpdatePacketFilterParam) GetId() sacloud.ID {
	return p.Id
}

// RuleDeletePacketFilterParam is input parameters for the sacloud API
type RuleDeletePacketFilterParam struct {
	Index             int        `json:"index"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewRuleDeletePacketFilterParam return new RuleDeletePacketFilterParam
func NewRuleDeletePacketFilterParam() *RuleDeletePacketFilterParam {
	return &RuleDeletePacketFilterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *RuleDeletePacketFilterParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *RuleDeletePacketFilterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *RuleDeletePacketFilterParam) GetResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *RuleDeletePacketFilterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["rule-delete"]
}

func (p *RuleDeletePacketFilterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *RuleDeletePacketFilterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *RuleDeletePacketFilterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *RuleDeletePacketFilterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *RuleDeletePacketFilterParam) SetIndex(v int) {
	p.Index = v
}

func (p *RuleDeletePacketFilterParam) GetIndex() int {
	return p.Index
}
func (p *RuleDeletePacketFilterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *RuleDeletePacketFilterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *RuleDeletePacketFilterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *RuleDeletePacketFilterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *RuleDeletePacketFilterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *RuleDeletePacketFilterParam) GetParameters() string {
	return p.Parameters
}
func (p *RuleDeletePacketFilterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *RuleDeletePacketFilterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *RuleDeletePacketFilterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *RuleDeletePacketFilterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *RuleDeletePacketFilterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *RuleDeletePacketFilterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *RuleDeletePacketFilterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *RuleDeletePacketFilterParam) GetOutputType() string {
	return p.OutputType
}
func (p *RuleDeletePacketFilterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *RuleDeletePacketFilterParam) GetColumn() []string {
	return p.Column
}
func (p *RuleDeletePacketFilterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *RuleDeletePacketFilterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *RuleDeletePacketFilterParam) SetFormat(v string) {
	p.Format = v
}

func (p *RuleDeletePacketFilterParam) GetFormat() string {
	return p.Format
}
func (p *RuleDeletePacketFilterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *RuleDeletePacketFilterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *RuleDeletePacketFilterParam) SetQuery(v string) {
	p.Query = v
}

func (p *RuleDeletePacketFilterParam) GetQuery() string {
	return p.Query
}
func (p *RuleDeletePacketFilterParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *RuleDeletePacketFilterParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *RuleDeletePacketFilterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *RuleDeletePacketFilterParam) GetId() sacloud.ID {
	return p.Id
}

// InterfaceConnectPacketFilterParam is input parameters for the sacloud API
type InterfaceConnectPacketFilterParam struct {
	InterfaceId       sacloud.ID `json:"interface-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewInterfaceConnectPacketFilterParam return new InterfaceConnectPacketFilterParam
func NewInterfaceConnectPacketFilterParam() *InterfaceConnectPacketFilterParam {
	return &InterfaceConnectPacketFilterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *InterfaceConnectPacketFilterParam) FillValueToSkeleton() {
	if isEmpty(p.InterfaceId) {
		p.InterfaceId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *InterfaceConnectPacketFilterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--interface-id", p.InterfaceId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["interface-connect"].Params["interface-id"].ValidateFunc
		errs := validator("--interface-id", p.InterfaceId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *InterfaceConnectPacketFilterParam) GetResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *InterfaceConnectPacketFilterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["interface-connect"]
}

func (p *InterfaceConnectPacketFilterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *InterfaceConnectPacketFilterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *InterfaceConnectPacketFilterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *InterfaceConnectPacketFilterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *InterfaceConnectPacketFilterParam) SetInterfaceId(v sacloud.ID) {
	p.InterfaceId = v
}

func (p *InterfaceConnectPacketFilterParam) GetInterfaceId() sacloud.ID {
	return p.InterfaceId
}
func (p *InterfaceConnectPacketFilterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceConnectPacketFilterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceConnectPacketFilterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceConnectPacketFilterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceConnectPacketFilterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *InterfaceConnectPacketFilterParam) GetParameters() string {
	return p.Parameters
}
func (p *InterfaceConnectPacketFilterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceConnectPacketFilterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceConnectPacketFilterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *InterfaceConnectPacketFilterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *InterfaceConnectPacketFilterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceConnectPacketFilterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceConnectPacketFilterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *InterfaceConnectPacketFilterParam) GetId() sacloud.ID {
	return p.Id
}

// InterfaceDisconnectPacketFilterParam is input parameters for the sacloud API
type InterfaceDisconnectPacketFilterParam struct {
	InterfaceId       sacloud.ID `json:"interface-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewInterfaceDisconnectPacketFilterParam return new InterfaceDisconnectPacketFilterParam
func NewInterfaceDisconnectPacketFilterParam() *InterfaceDisconnectPacketFilterParam {
	return &InterfaceDisconnectPacketFilterParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *InterfaceDisconnectPacketFilterParam) FillValueToSkeleton() {
	if isEmpty(p.InterfaceId) {
		p.InterfaceId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *InterfaceDisconnectPacketFilterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--interface-id", p.InterfaceId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["PacketFilter"].Commands["interface-disconnect"].Params["interface-id"].ValidateFunc
		errs := validator("--interface-id", p.InterfaceId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *InterfaceDisconnectPacketFilterParam) GetResourceDef() *schema.Resource {
	return define.Resources["PacketFilter"]
}

func (p *InterfaceDisconnectPacketFilterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["interface-disconnect"]
}

func (p *InterfaceDisconnectPacketFilterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *InterfaceDisconnectPacketFilterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *InterfaceDisconnectPacketFilterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *InterfaceDisconnectPacketFilterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *InterfaceDisconnectPacketFilterParam) SetInterfaceId(v sacloud.ID) {
	p.InterfaceId = v
}

func (p *InterfaceDisconnectPacketFilterParam) GetInterfaceId() sacloud.ID {
	return p.InterfaceId
}
func (p *InterfaceDisconnectPacketFilterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceDisconnectPacketFilterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceDisconnectPacketFilterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceDisconnectPacketFilterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceDisconnectPacketFilterParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *InterfaceDisconnectPacketFilterParam) GetParameters() string {
	return p.Parameters
}
func (p *InterfaceDisconnectPacketFilterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceDisconnectPacketFilterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceDisconnectPacketFilterParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *InterfaceDisconnectPacketFilterParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *InterfaceDisconnectPacketFilterParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceDisconnectPacketFilterParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceDisconnectPacketFilterParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *InterfaceDisconnectPacketFilterParam) GetId() sacloud.ID {
	return p.Id
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListSimParam is input parameters for the sacloud API
type ListSimParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Tags              []string     `json:"tags"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`
}

// NewListSimParam return new ListSimParam
func NewListSimParam() *ListSimParam {
	return &ListSimParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ListSimParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = []string{""}
	}
	if isEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.From) {
		p.From = 0
	}
	if isEmpty(p.Max) {
		p.Max = 0
	}
	if isEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *ListSimParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListSimParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ListSimParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListSimParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListSimParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListSimParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListSimParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListSimParam) SetName(v []string) {
	p.Name = v
}

func (p *ListSimParam) GetName() []string {
	return p.Name
}
func (p *ListSimParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListSimParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListSimParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListSimParam) GetTags() []string {
	return p.Tags
}
func (p *ListSimParam) SetFrom(v int) {
	p.From = v
}

func (p *ListSimParam) GetFrom() int {
	return p.From
}
func (p *ListSimParam) SetMax(v int) {
	p.Max = v
}

func (p *ListSimParam) GetMax() int {
	return p.Max
}
func (p *ListSimParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListSimParam) GetSort() []string {
	return p.Sort
}
func (p *ListSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListSimParam) GetParameters() string {
	return p.Parameters
}
func (p *ListSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListSimParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListSimParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListSimParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListSimParam) GetColumn() []string {
	return p.Column
}
func (p *ListSimParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListSimParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListSimParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListSimParam) GetFormat() string {
	return p.Format
}
func (p *ListSimParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListSimParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListSimParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListSimParam) GetQuery() string {
	return p.Query
}
func (p *ListSimParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListSimParam) GetQueryFile() string {
	return p.QueryFile
}

// CreateSimParam is input parameters for the sacloud API
type CreateSimParam struct {
	Iccid             string     `json:"iccid"`
	Passcode          string     `json:"passcode"`
	Disabled          bool       `json:"disabled"`
	Imei              string     `json:"imei"`
	Carrier           []string   `json:"carrier"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
}

// NewCreateSimParam return new CreateSimParam
func NewCreateSimParam() *CreateSimParam {
	return &CreateSimParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *CreateSimParam) FillValueToSkeleton() {
	if isEmpty(p.Iccid) {
		p.Iccid = ""
	}
	if isEmpty(p.Passcode) {
		p.Passcode = ""
	}
	if isEmpty(p.Disabled) {
		p.Disabled = false
	}
	if isEmpty(p.Imei) {
		p.Imei = ""
	}
	if isEmpty(p.Carrier) {
		p.Carrier = []string{""}
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *CreateSimParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--iccid", p.Iccid)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--passcode", p.Passcode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--carrier", p.Carrier)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["create"].Params["carrier"].ValidateFunc
		errs := validator("--carrier", p.Carrier)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateBetween("--carrier", p.Carrier, 1, 3)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreateSimParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *CreateSimParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreateSimParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreateSimParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreateSimParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreateSimParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreateSimParam) SetIccid(v string) {
	p.Iccid = v
}

func (p *CreateSimParam) GetIccid() string {
	return p.Iccid
}
func (p *CreateSimParam) SetPasscode(v string) {
	p.Passcode = v
}

func (p *CreateSimParam) GetPasscode() string {
	return p.Passcode
}
func (p *CreateSimParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *CreateSimParam) GetDisabled() bool {
	return p.Disabled
}
func (p *CreateSimParam) SetImei(v string) {
	p.Imei = v
}

func (p *CreateSimParam) GetImei() string {
	return p.Imei
}
func (p *CreateSimParam) SetCarrier(v []string) {
	p.Carrier = v
}

func (p *CreateSimParam) GetCarrier() []string {
	return p.Carrier
}
func (p *CreateSimParam) SetName(v string) {
	p.Name = v
}

func (p *CreateSimParam) GetName() string {
	return p.Name
}
func (p *CreateSimParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateSimParam) GetDescription() string {
	return p.Description
}
func (p *CreateSimParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateSimParam) GetTags() []string {
	return p.Tags
}
func (p *CreateSimParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateSimParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateSimParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateSimParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateSimParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateSimParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateSimParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateSimParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateSimParam) GetColumn() []string {
	return p.Column
}
func (p *CreateSimParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateSimParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateSimParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateSimParam) GetFormat() string {
	return p.Format
}
func (p *CreateSimParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateSimParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateSimParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateSimParam) GetQuery() string {
	return p.Query
}
func (p *CreateSimParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateSimParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadSimParam is input parameters for the sacloud API
type ReadSimParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewReadSimParam return new ReadSimParam
func NewReadSimParam() *ReadSimParam {
	return &ReadSimParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ReadSimParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ReadSimParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadSimParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ReadSimParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadSimParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadSimParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadSimParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadSimParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadSimParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadSimParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadSimParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadSimParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadSimParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadSimParam) GetColumn() []string {
	return p.Column
}
func (p *ReadSimParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadSimParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadSimParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadSimParam) GetFormat() string {
	return p.Format
}
func (p *ReadSimParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadSimParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadSimParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadSimParam) GetQuery() string {
	return p.Query
}
func (p *ReadSimParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadSimParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadSimParam) GetId() sacloud.ID {
	return p.Id
}

// UpdateSimParam is input parameters for the sacloud API
type UpdateSimParam struct {
	Selector          []string   `json:"selector"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewUpdateSimParam return new UpdateSimParam
func NewUpdateSimParam() *UpdateSimParam {
	return &UpdateSimParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UpdateSimParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UpdateSimParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["SIM"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdateSimParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *UpdateSimParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdateSimParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdateSimParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdateSimParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdateSimParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdateSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateSimParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateSimParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateSimParam) GetName() string {
	return p.Name
}
func (p *UpdateSimParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateSimParam) GetDescription() string {
	return p.Description
}
func (p *UpdateSimParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateSimParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateSimParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateSimParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateSimParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateSimParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateSimParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateSimParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateSimParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateSimParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateSimParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateSimParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateSimParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateSimParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateSimParam) GetFormat() string {
	return p.Format
}
func (p *UpdateSimParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateSimParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateSimParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateSimParam) GetQuery() string {
	return p.Query
}
func (p *UpdateSimParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateSimParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateSimParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteSimParam is input parameters for the sacloud API
type DeleteSimParam struct {
	Force             bool       `json:"force"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewDeleteSimParam return new DeleteSimParam
func NewDeleteSimParam() *DeleteSimParam {
	return &DeleteSimParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DeleteSimParam) FillValueToSkeleton() {
	if isEmpty(p.Force) {
		p.Force = false
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DeleteSimParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteSimParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *DeleteSimParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteSimParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteSimParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteSimParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteSimParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteSimParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteSimParam) GetForce() bool {
	return p.Force
}
func (p *DeleteSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteSimParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteSimParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteSimParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteSimParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteSimParam) GetId() sacloud.ID {
	return p.Id
}

// CarrierInfoSimParam is input parameters for the sacloud API
type CarrierInfoSimParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewCarrierInfoSimParam return new CarrierInfoSimParam
func NewCarrierInfoSimParam() *CarrierInfoSimParam {
	return &CarrierInfoSimParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *CarrierInfoSimParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *CarrierInfoSimParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CarrierInfoSimParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *CarrierInfoSimParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["carrier-info"]
}

func (p *CarrierInfoSimParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CarrierInfoSimParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CarrierInfoSimParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CarrierInfoSimParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CarrierInfoSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *CarrierInfoSimParam) GetSelector() []string {
	return p.Selector
}
func (p *CarrierInfoSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CarrierInfoSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CarrierInfoSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CarrierInfoSimParam) GetParameters() string {
	return p.Parameters
}
func (p *CarrierInfoSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CarrierInfoSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CarrierInfoSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CarrierInfoSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CarrierInfoSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CarrierInfoSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CarrierInfoSimParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CarrierInfoSimParam) GetOutputType() string {
	return p.OutputType
}
func (p *CarrierInfoSimParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CarrierInfoSimParam) GetColumn() []string {
	return p.Column
}
func (p *CarrierInfoSimParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CarrierInfoSimParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CarrierInfoSimParam) SetFormat(v string) {
	p.Format = v
}

func (p *CarrierInfoSimParam) GetFormat() string {
	return p.Format
}
func (p *CarrierInfoSimParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CarrierInfoSimParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CarrierInfoSimParam) SetQuery(v string) {
	p.Query = v
}

func (p *CarrierInfoSimParam) GetQuery() string {
	return p.Query
}
func (p *CarrierInfoSimParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CarrierInfoSimParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *CarrierInfoSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *CarrierInfoSimParam) GetId() sacloud.ID {
	return p.Id
}

// CarrierUpdateSimParam is input parameters for the sacloud API
type CarrierUpdateSimParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
	Carrier           []string   `json:"carrier"`
}

// NewCarrierUpdateSimParam return new CarrierUpdateSimParam
func NewCarrierUpdateSimParam() *CarrierUpdateSimParam {
	return &CarrierUpdateSimParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *CarrierUpdateSimParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}
	if isEmpty(p.Carrier) {
		p.Carrier = []string{""}
	}

}

// Validate checks current values in model
func (p *CarrierUpdateSimParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--carrier", p.Carrier)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["carrier-update"].Params["carrier"].ValidateFunc
		errs := validator("--carrier", p.Carrier)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateBetween("--carrier", p.Carrier, 1, 3)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CarrierUpdateSimParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *CarrierUpdateSimParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["carrier-update"]
}

func (p *CarrierUpdateSimParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CarrierUpdateSimParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CarrierUpdateSimParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CarrierUpdateSimParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CarrierUpdateSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *CarrierUpdateSimParam) GetSelector() []string {
	return p.Selector
}
func (p *CarrierUpdateSimParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CarrierUpdateSimParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CarrierUpdateSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CarrierUpdateSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CarrierUpdateSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CarrierUpdateSimParam) GetParameters() string {
	return p.Parameters
}
func (p *CarrierUpdateSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CarrierUpdateSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CarrierUpdateSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CarrierUpdateSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CarrierUpdateSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CarrierUpdateSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CarrierUpdateSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *CarrierUpdateSimParam) GetId() sacloud.ID {
	return p.Id
}
func (p *CarrierUpdateSimParam) SetCarrier(v []string) {
	p.Carrier = v
}

func (p *CarrierUpdateSimParam) GetCarrier() []string {
	return p.Carrier
}

// ActivateSimParam is input parameters for the sacloud API
type ActivateSimParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewActivateSimParam return new ActivateSimParam
func NewActivateSimParam() *ActivateSimParam {
	return &ActivateSimParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ActivateSimParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ActivateSimParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ActivateSimParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ActivateSimParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["activate"]
}

func (p *ActivateSimParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ActivateSimParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ActivateSimParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ActivateSimParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ActivateSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ActivateSimParam) GetSelector() []string {
	return p.Selector
}
func (p *ActivateSimParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ActivateSimParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ActivateSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ActivateSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ActivateSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ActivateSimParam) GetParameters() string {
	return p.Parameters
}
func (p *ActivateSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ActivateSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ActivateSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ActivateSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ActivateSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ActivateSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ActivateSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ActivateSimParam) GetId() sacloud.ID {
	return p.Id
}

// DeactivateSimParam is input parameters for the sacloud API
type DeactivateSimParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewDeactivateSimParam return new DeactivateSimParam
func NewDeactivateSimParam() *DeactivateSimParam {
	return &DeactivateSimParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DeactivateSimParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DeactivateSimParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeactivateSimParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *DeactivateSimParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["deactivate"]
}

func (p *DeactivateSimParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeactivateSimParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeactivateSimParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeactivateSimParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeactivateSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeactivateSimParam) GetSelector() []string {
	return p.Selector
}
func (p *DeactivateSimParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeactivateSimParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeactivateSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeactivateSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeactivateSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeactivateSimParam) GetParameters() string {
	return p.Parameters
}
func (p *DeactivateSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeactivateSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeactivateSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeactivateSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeactivateSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeactivateSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeactivateSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeactivateSimParam) GetId() sacloud.ID {
	return p.Id
}

// ImeiLockSimParam is input parameters for the sacloud API
type ImeiLockSimParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
	Imei              string     `json:"imei"`
}

// NewImeiLockSimParam return new ImeiLockSimParam
func NewImeiLockSimParam() *ImeiLockSimParam {
	return &ImeiLockSimParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ImeiLockSimParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}
	if isEmpty(p.Imei) {
		p.Imei = ""
	}

}

// Validate checks current values in model
func (p *ImeiLockSimParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--imei", p.Imei)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ImeiLockSimParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ImeiLockSimParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["imei-lock"]
}

func (p *ImeiLockSimParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ImeiLockSimParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ImeiLockSimParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ImeiLockSimParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ImeiLockSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ImeiLockSimParam) GetSelector() []string {
	return p.Selector
}
func (p *ImeiLockSimParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ImeiLockSimParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ImeiLockSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ImeiLockSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ImeiLockSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ImeiLockSimParam) GetParameters() string {
	return p.Parameters
}
func (p *ImeiLockSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ImeiLockSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ImeiLockSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ImeiLockSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ImeiLockSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ImeiLockSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ImeiLockSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ImeiLockSimParam) GetId() sacloud.ID {
	return p.Id
}
func (p *ImeiLockSimParam) SetImei(v string) {
	p.Imei = v
}

func (p *ImeiLockSimParam) GetImei() string {
	return p.Imei
}

// IpAddSimParam is input parameters for the sacloud API
type IpAddSimParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
	Ip                string     `json:"ip"`
}

// NewIpAddSimParam return new IpAddSimParam
func NewIpAddSimParam() *IpAddSimParam {
	return &IpAddSimParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *IpAddSimParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}
	if isEmpty(p.Ip) {
		p.Ip = ""
	}

}

// Validate checks current values in model
func (p *IpAddSimParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--ip", p.Ip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["ip-add"].Params["ip"].ValidateFunc
		errs := validator("--ip", p.Ip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *IpAddSimParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *IpAddSimParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["ip-add"]
}

func (p *IpAddSimParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *IpAddSimParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *IpAddSimParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *IpAddSimParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *IpAddSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *IpAddSimParam) GetSelector() []string {
	return p.Selector
}
func (p *IpAddSimParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *IpAddSimParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *IpAddSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *IpAddSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *IpAddSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *IpAddSimParam) GetParameters() string {
	return p.Parameters
}
func (p *IpAddSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *IpAddSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *IpAddSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *IpAddSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *IpAddSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *IpAddSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *IpAddSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *IpAddSimParam) GetId() sacloud.ID {
	return p.Id
}
func (p *IpAddSimParam) SetIp(v string) {
	p.Ip = v
}

func (p *IpAddSimParam) GetIp() string {
	return p.Ip
}

// ImeiUnlockSimParam is input parameters for the sacloud API
type ImeiUnlockSimParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewImeiUnlockSimParam return new ImeiUnlockSimParam
func NewImeiUnlockSimParam() *ImeiUnlockSimParam {
	return &ImeiUnlockSimParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ImeiUnlockSimParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ImeiUnlockSimParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ImeiUnlockSimParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *ImeiUnlockSimParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["imei-unlock"]
}

func (p *ImeiUnlockSimParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ImeiUnlockSimParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ImeiUnlockSimParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ImeiUnlockSimParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ImeiUnlockSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ImeiUnlockSimParam) GetSelector() []string {
	return p.Selector
}
func (p *ImeiUnlockSimParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ImeiUnlockSimParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ImeiUnlockSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ImeiUnlockSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ImeiUnlockSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ImeiUnlockSimParam) GetParameters() string {
	return p.Parameters
}
func (p *ImeiUnlockSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ImeiUnlockSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ImeiUnlockSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ImeiUnlockSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ImeiUnlockSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ImeiUnlockSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ImeiUnlockSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ImeiUnlockSimParam) GetId() sacloud.ID {
	return p.Id
}

// IpDeleteSimParam is input parameters for the sacloud API
type IpDeleteSimParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewIpDeleteSimParam return new IpDeleteSimParam
func NewIpDeleteSimParam() *IpDeleteSimParam {
	return &IpDeleteSimParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *IpDeleteSimParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *IpDeleteSimParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *IpDeleteSimParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *IpDeleteSimParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["ip-delete"]
}

func (p *IpDeleteSimParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *IpDeleteSimParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *IpDeleteSimParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *IpDeleteSimParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *IpDeleteSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *IpDeleteSimParam) GetSelector() []string {
	return p.Selector
}
func (p *IpDeleteSimParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *IpDeleteSimParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *IpDeleteSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *IpDeleteSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *IpDeleteSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *IpDeleteSimParam) GetParameters() string {
	return p.Parameters
}
func (p *IpDeleteSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *IpDeleteSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *IpDeleteSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *IpDeleteSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *IpDeleteSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *IpDeleteSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *IpDeleteSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *IpDeleteSimParam) GetId() sacloud.ID {
	return p.Id
}

// LogsSimParam is input parameters for the sacloud API
type LogsSimParam struct {
	Follow            bool       `json:"follow"`
	RefreshInterval   int64      `json:"refresh-interval"`
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewLogsSimParam return new LogsSimParam
func NewLogsSimParam() *LogsSimParam {
	return &LogsSimParam{

		RefreshInterval: 3,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *LogsSimParam) FillValueToSkeleton() {
	if isEmpty(p.Follow) {
		p.Follow = false
	}
	if isEmpty(p.RefreshInterval) {
		p.RefreshInterval = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *LogsSimParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["SIM"].Commands["logs"].Params["refresh-interval"].ValidateFunc
		errs := validator("--refresh-interval", p.RefreshInterval)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *LogsSimParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *LogsSimParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["logs"]
}

func (p *LogsSimParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *LogsSimParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *LogsSimParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *LogsSimParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *LogsSimParam) SetFollow(v bool) {
	p.Follow = v
}

func (p *LogsSimParam) GetFollow() bool {
	return p.Follow
}
func (p *LogsSimParam) SetRefreshInterval(v int64) {
	p.RefreshInterval = v
}

func (p *LogsSimParam) GetRefreshInterval() int64 {
	return p.RefreshInterval
}
func (p *LogsSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *LogsSimParam) GetSelector() []string {
	return p.Selector
}
func (p *LogsSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *LogsSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *LogsSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *LogsSimParam) GetParameters() string {
	return p.Parameters
}
func (p *LogsSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *LogsSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *LogsSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *LogsSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *LogsSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *LogsSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *LogsSimParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *LogsSimParam) GetOutputType() string {
	return p.OutputType
}
func (p *LogsSimParam) SetColumn(v []string) {
	p.Column = v
}

func (p *LogsSimParam) GetColumn() []string {
	return p.Column
}
func (p *LogsSimParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *LogsSimParam) GetQuiet() bool {
	return p.Quiet
}
func (p *LogsSimParam) SetFormat(v string) {
	p.Format = v
}

func (p *LogsSimParam) GetFormat() string {
	return p.Format
}
func (p *LogsSimParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *LogsSimParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *LogsSimParam) SetQuery(v string) {
	p.Query = v
}

func (p *LogsSimParam) GetQuery() string {
	return p.Query
}
func (p *LogsSimParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *LogsSimParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *LogsSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *LogsSimParam) GetId() sacloud.ID {
	return p.Id
}

// MonitorSimParam is input parameters for the sacloud API
type MonitorSimParam struct {
	Start             string     `json:"start"`
	End               string     `json:"end"`
	KeyFormat         string     `json:"key-format"`
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewMonitorSimParam return new MonitorSimParam
func NewMonitorSimParam() *MonitorSimParam {
	return &MonitorSimParam{

		KeyFormat: "sakuracloud.sim.{{.ID}}",
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *MonitorSimParam) FillValueToSkeleton() {
	if isEmpty(p.Start) {
		p.Start = ""
	}
	if isEmpty(p.End) {
		p.End = ""
	}
	if isEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *MonitorSimParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["SIM"].Commands["monitor"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["SIM"].Commands["monitor"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *MonitorSimParam) GetResourceDef() *schema.Resource {
	return define.Resources["SIM"]
}

func (p *MonitorSimParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["monitor"]
}

func (p *MonitorSimParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *MonitorSimParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *MonitorSimParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *MonitorSimParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *MonitorSimParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorSimParam) GetStart() string {
	return p.Start
}
func (p *MonitorSimParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorSimParam) GetEnd() string {
	return p.End
}
func (p *MonitorSimParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorSimParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorSimParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *MonitorSimParam) GetSelector() []string {
	return p.Selector
}
func (p *MonitorSimParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *MonitorSimParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *MonitorSimParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *MonitorSimParam) GetParameters() string {
	return p.Parameters
}
func (p *MonitorSimParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *MonitorSimParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *MonitorSimParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *MonitorSimParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *MonitorSimParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *MonitorSimParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *MonitorSimParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *MonitorSimParam) GetOutputType() string {
	return p.OutputType
}
func (p *MonitorSimParam) SetColumn(v []string) {
	p.Column = v
}

func (p *MonitorSimParam) GetColumn() []string {
	return p.Column
}
func (p *MonitorSimParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *MonitorSimParam) GetQuiet() bool {
	return p.Quiet
}
func (p *MonitorSimParam) SetFormat(v string) {
	p.Format = v
}

func (p *MonitorSimParam) GetFormat() string {
	return p.Format
}
func (p *MonitorSimParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *MonitorSimParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *MonitorSimParam) SetQuery(v string) {
	p.Query = v
}

func (p *MonitorSimParam) GetQuery() string {
	return p.Query
}
func (p *MonitorSimParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *MonitorSimParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *MonitorSimParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *MonitorSimParam) GetId() sacloud.ID {
	return p.Id
}

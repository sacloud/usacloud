// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListGSLBParam is input parameters for the sacloud API
type ListGSLBParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Tags              []string     `json:"tags"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`
}

// NewListGSLBParam return new ListGSLBParam
func NewListGSLBParam() *ListGSLBParam {
	return &ListGSLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ListGSLBParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = []string{""}
	}
	if isEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.From) {
		p.From = 0
	}
	if isEmpty(p.Max) {
		p.Max = 0
	}
	if isEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *ListGSLBParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListGSLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ListGSLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListGSLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListGSLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListGSLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListGSLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListGSLBParam) SetName(v []string) {
	p.Name = v
}

func (p *ListGSLBParam) GetName() []string {
	return p.Name
}
func (p *ListGSLBParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListGSLBParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListGSLBParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListGSLBParam) GetTags() []string {
	return p.Tags
}
func (p *ListGSLBParam) SetFrom(v int) {
	p.From = v
}

func (p *ListGSLBParam) GetFrom() int {
	return p.From
}
func (p *ListGSLBParam) SetMax(v int) {
	p.Max = v
}

func (p *ListGSLBParam) GetMax() int {
	return p.Max
}
func (p *ListGSLBParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListGSLBParam) GetSort() []string {
	return p.Sort
}
func (p *ListGSLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListGSLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListGSLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListGSLBParam) GetParameters() string {
	return p.Parameters
}
func (p *ListGSLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListGSLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListGSLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListGSLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListGSLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListGSLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListGSLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListGSLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListGSLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListGSLBParam) GetColumn() []string {
	return p.Column
}
func (p *ListGSLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListGSLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListGSLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListGSLBParam) GetFormat() string {
	return p.Format
}
func (p *ListGSLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListGSLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListGSLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListGSLBParam) GetQuery() string {
	return p.Query
}
func (p *ListGSLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListGSLBParam) GetQueryFile() string {
	return p.QueryFile
}

// ServerInfoGSLBParam is input parameters for the sacloud API
type ServerInfoGSLBParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewServerInfoGSLBParam return new ServerInfoGSLBParam
func NewServerInfoGSLBParam() *ServerInfoGSLBParam {
	return &ServerInfoGSLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ServerInfoGSLBParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ServerInfoGSLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ServerInfoGSLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ServerInfoGSLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["server-info"]
}

func (p *ServerInfoGSLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ServerInfoGSLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ServerInfoGSLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ServerInfoGSLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ServerInfoGSLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerInfoGSLBParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerInfoGSLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerInfoGSLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerInfoGSLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerInfoGSLBParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerInfoGSLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerInfoGSLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerInfoGSLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerInfoGSLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerInfoGSLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerInfoGSLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerInfoGSLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerInfoGSLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerInfoGSLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerInfoGSLBParam) GetColumn() []string {
	return p.Column
}
func (p *ServerInfoGSLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerInfoGSLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerInfoGSLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerInfoGSLBParam) GetFormat() string {
	return p.Format
}
func (p *ServerInfoGSLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerInfoGSLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerInfoGSLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerInfoGSLBParam) GetQuery() string {
	return p.Query
}
func (p *ServerInfoGSLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerInfoGSLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerInfoGSLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerInfoGSLBParam) GetId() sacloud.ID {
	return p.Id
}

// CreateGSLBParam is input parameters for the sacloud API
type CreateGSLBParam struct {
	Protocol          string     `json:"protocol"`
	HostHeader        string     `json:"host-header"`
	Path              string     `json:"path"`
	ResponseCode      int        `json:"response-code"`
	Port              int        `json:"port"`
	DelayLoop         int        `json:"delay-loop"`
	Weighted          bool       `json:"weighted"`
	SorryServer       string     `json:"sorry-server"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
}

// NewCreateGSLBParam return new CreateGSLBParam
func NewCreateGSLBParam() *CreateGSLBParam {
	return &CreateGSLBParam{

		Protocol:     "ping",
		Path:         "/",
		ResponseCode: 200,
		DelayLoop:    10,
		Weighted:     true,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *CreateGSLBParam) FillValueToSkeleton() {
	if isEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if isEmpty(p.HostHeader) {
		p.HostHeader = ""
	}
	if isEmpty(p.Path) {
		p.Path = ""
	}
	if isEmpty(p.ResponseCode) {
		p.ResponseCode = 0
	}
	if isEmpty(p.Port) {
		p.Port = 0
	}
	if isEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if isEmpty(p.Weighted) {
		p.Weighted = false
	}
	if isEmpty(p.SorryServer) {
		p.SorryServer = ""
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *CreateGSLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreateGSLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *CreateGSLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreateGSLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreateGSLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreateGSLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreateGSLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreateGSLBParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *CreateGSLBParam) GetProtocol() string {
	return p.Protocol
}
func (p *CreateGSLBParam) SetHostHeader(v string) {
	p.HostHeader = v
}

func (p *CreateGSLBParam) GetHostHeader() string {
	return p.HostHeader
}
func (p *CreateGSLBParam) SetPath(v string) {
	p.Path = v
}

func (p *CreateGSLBParam) GetPath() string {
	return p.Path
}
func (p *CreateGSLBParam) SetResponseCode(v int) {
	p.ResponseCode = v
}

func (p *CreateGSLBParam) GetResponseCode() int {
	return p.ResponseCode
}
func (p *CreateGSLBParam) SetPort(v int) {
	p.Port = v
}

func (p *CreateGSLBParam) GetPort() int {
	return p.Port
}
func (p *CreateGSLBParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *CreateGSLBParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *CreateGSLBParam) SetWeighted(v bool) {
	p.Weighted = v
}

func (p *CreateGSLBParam) GetWeighted() bool {
	return p.Weighted
}
func (p *CreateGSLBParam) SetSorryServer(v string) {
	p.SorryServer = v
}

func (p *CreateGSLBParam) GetSorryServer() string {
	return p.SorryServer
}
func (p *CreateGSLBParam) SetName(v string) {
	p.Name = v
}

func (p *CreateGSLBParam) GetName() string {
	return p.Name
}
func (p *CreateGSLBParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateGSLBParam) GetDescription() string {
	return p.Description
}
func (p *CreateGSLBParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateGSLBParam) GetTags() []string {
	return p.Tags
}
func (p *CreateGSLBParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateGSLBParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateGSLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateGSLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateGSLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateGSLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateGSLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateGSLBParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateGSLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateGSLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateGSLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateGSLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateGSLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateGSLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateGSLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateGSLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateGSLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateGSLBParam) GetColumn() []string {
	return p.Column
}
func (p *CreateGSLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateGSLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateGSLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateGSLBParam) GetFormat() string {
	return p.Format
}
func (p *CreateGSLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateGSLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateGSLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateGSLBParam) GetQuery() string {
	return p.Query
}
func (p *CreateGSLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateGSLBParam) GetQueryFile() string {
	return p.QueryFile
}

// ServerAddGSLBParam is input parameters for the sacloud API
type ServerAddGSLBParam struct {
	Ipaddress         string     `json:"ipaddress"`
	Disabled          bool       `json:"disabled"`
	Weight            int        `json:"weight"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewServerAddGSLBParam return new ServerAddGSLBParam
func NewServerAddGSLBParam() *ServerAddGSLBParam {
	return &ServerAddGSLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ServerAddGSLBParam) FillValueToSkeleton() {
	if isEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if isEmpty(p.Disabled) {
		p.Disabled = false
	}
	if isEmpty(p.Weight) {
		p.Weight = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ServerAddGSLBParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["GSLB"].Commands["server-add"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["server-add"].Params["weight"].ValidateFunc
		errs := validator("--weight", p.Weight)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ServerAddGSLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ServerAddGSLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["server-add"]
}

func (p *ServerAddGSLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ServerAddGSLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ServerAddGSLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ServerAddGSLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ServerAddGSLBParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerAddGSLBParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerAddGSLBParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *ServerAddGSLBParam) GetDisabled() bool {
	return p.Disabled
}
func (p *ServerAddGSLBParam) SetWeight(v int) {
	p.Weight = v
}

func (p *ServerAddGSLBParam) GetWeight() int {
	return p.Weight
}
func (p *ServerAddGSLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerAddGSLBParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerAddGSLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerAddGSLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerAddGSLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerAddGSLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerAddGSLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerAddGSLBParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerAddGSLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerAddGSLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerAddGSLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerAddGSLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerAddGSLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerAddGSLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerAddGSLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerAddGSLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerAddGSLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerAddGSLBParam) GetColumn() []string {
	return p.Column
}
func (p *ServerAddGSLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerAddGSLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerAddGSLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerAddGSLBParam) GetFormat() string {
	return p.Format
}
func (p *ServerAddGSLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerAddGSLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerAddGSLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerAddGSLBParam) GetQuery() string {
	return p.Query
}
func (p *ServerAddGSLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerAddGSLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerAddGSLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerAddGSLBParam) GetId() sacloud.ID {
	return p.Id
}

// ReadGSLBParam is input parameters for the sacloud API
type ReadGSLBParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewReadGSLBParam return new ReadGSLBParam
func NewReadGSLBParam() *ReadGSLBParam {
	return &ReadGSLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ReadGSLBParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ReadGSLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadGSLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ReadGSLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadGSLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadGSLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadGSLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadGSLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadGSLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadGSLBParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadGSLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadGSLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadGSLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadGSLBParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadGSLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadGSLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadGSLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadGSLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadGSLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadGSLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadGSLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadGSLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadGSLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadGSLBParam) GetColumn() []string {
	return p.Column
}
func (p *ReadGSLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadGSLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadGSLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadGSLBParam) GetFormat() string {
	return p.Format
}
func (p *ReadGSLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadGSLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadGSLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadGSLBParam) GetQuery() string {
	return p.Query
}
func (p *ReadGSLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadGSLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadGSLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadGSLBParam) GetId() sacloud.ID {
	return p.Id
}

// ServerUpdateGSLBParam is input parameters for the sacloud API
type ServerUpdateGSLBParam struct {
	Index             int        `json:"index"`
	Ipaddress         string     `json:"ipaddress"`
	Disabled          bool       `json:"disabled"`
	Weight            int        `json:"weight"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewServerUpdateGSLBParam return new ServerUpdateGSLBParam
func NewServerUpdateGSLBParam() *ServerUpdateGSLBParam {
	return &ServerUpdateGSLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ServerUpdateGSLBParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if isEmpty(p.Disabled) {
		p.Disabled = false
	}
	if isEmpty(p.Weight) {
		p.Weight = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ServerUpdateGSLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["server-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["server-update"].Params["weight"].ValidateFunc
		errs := validator("--weight", p.Weight)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ServerUpdateGSLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ServerUpdateGSLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["server-update"]
}

func (p *ServerUpdateGSLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ServerUpdateGSLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ServerUpdateGSLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ServerUpdateGSLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ServerUpdateGSLBParam) SetIndex(v int) {
	p.Index = v
}

func (p *ServerUpdateGSLBParam) GetIndex() int {
	return p.Index
}
func (p *ServerUpdateGSLBParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerUpdateGSLBParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerUpdateGSLBParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *ServerUpdateGSLBParam) GetDisabled() bool {
	return p.Disabled
}
func (p *ServerUpdateGSLBParam) SetWeight(v int) {
	p.Weight = v
}

func (p *ServerUpdateGSLBParam) GetWeight() int {
	return p.Weight
}
func (p *ServerUpdateGSLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerUpdateGSLBParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerUpdateGSLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerUpdateGSLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerUpdateGSLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerUpdateGSLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerUpdateGSLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerUpdateGSLBParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerUpdateGSLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerUpdateGSLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerUpdateGSLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerUpdateGSLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerUpdateGSLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerUpdateGSLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerUpdateGSLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerUpdateGSLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerUpdateGSLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerUpdateGSLBParam) GetColumn() []string {
	return p.Column
}
func (p *ServerUpdateGSLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerUpdateGSLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerUpdateGSLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerUpdateGSLBParam) GetFormat() string {
	return p.Format
}
func (p *ServerUpdateGSLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerUpdateGSLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerUpdateGSLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerUpdateGSLBParam) GetQuery() string {
	return p.Query
}
func (p *ServerUpdateGSLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerUpdateGSLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerUpdateGSLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerUpdateGSLBParam) GetId() sacloud.ID {
	return p.Id
}

// ServerDeleteGSLBParam is input parameters for the sacloud API
type ServerDeleteGSLBParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewServerDeleteGSLBParam return new ServerDeleteGSLBParam
func NewServerDeleteGSLBParam() *ServerDeleteGSLBParam {
	return &ServerDeleteGSLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ServerDeleteGSLBParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ServerDeleteGSLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ServerDeleteGSLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ServerDeleteGSLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["server-delete"]
}

func (p *ServerDeleteGSLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ServerDeleteGSLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ServerDeleteGSLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ServerDeleteGSLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ServerDeleteGSLBParam) SetIndex(v int) {
	p.Index = v
}

func (p *ServerDeleteGSLBParam) GetIndex() int {
	return p.Index
}
func (p *ServerDeleteGSLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerDeleteGSLBParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerDeleteGSLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerDeleteGSLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerDeleteGSLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerDeleteGSLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerDeleteGSLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerDeleteGSLBParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerDeleteGSLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerDeleteGSLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerDeleteGSLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerDeleteGSLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerDeleteGSLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerDeleteGSLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerDeleteGSLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerDeleteGSLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerDeleteGSLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerDeleteGSLBParam) GetColumn() []string {
	return p.Column
}
func (p *ServerDeleteGSLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerDeleteGSLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerDeleteGSLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerDeleteGSLBParam) GetFormat() string {
	return p.Format
}
func (p *ServerDeleteGSLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerDeleteGSLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerDeleteGSLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerDeleteGSLBParam) GetQuery() string {
	return p.Query
}
func (p *ServerDeleteGSLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerDeleteGSLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerDeleteGSLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerDeleteGSLBParam) GetId() sacloud.ID {
	return p.Id
}

// UpdateGSLBParam is input parameters for the sacloud API
type UpdateGSLBParam struct {
	Protocol          string     `json:"protocol"`
	HostHeader        string     `json:"host-header"`
	Path              string     `json:"path"`
	ResponseCode      int        `json:"response-code"`
	Port              int        `json:"port"`
	DelayLoop         int        `json:"delay-loop"`
	Weighted          bool       `json:"weighted"`
	SorryServer       string     `json:"sorry-server"`
	Selector          []string   `json:"selector"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewUpdateGSLBParam return new UpdateGSLBParam
func NewUpdateGSLBParam() *UpdateGSLBParam {
	return &UpdateGSLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UpdateGSLBParam) FillValueToSkeleton() {
	if isEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if isEmpty(p.HostHeader) {
		p.HostHeader = ""
	}
	if isEmpty(p.Path) {
		p.Path = ""
	}
	if isEmpty(p.ResponseCode) {
		p.ResponseCode = 0
	}
	if isEmpty(p.Port) {
		p.Port = 0
	}
	if isEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if isEmpty(p.Weighted) {
		p.Weighted = false
	}
	if isEmpty(p.SorryServer) {
		p.SorryServer = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UpdateGSLBParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["GSLB"].Commands["update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["update"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdateGSLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *UpdateGSLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdateGSLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdateGSLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdateGSLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdateGSLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdateGSLBParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *UpdateGSLBParam) GetProtocol() string {
	return p.Protocol
}
func (p *UpdateGSLBParam) SetHostHeader(v string) {
	p.HostHeader = v
}

func (p *UpdateGSLBParam) GetHostHeader() string {
	return p.HostHeader
}
func (p *UpdateGSLBParam) SetPath(v string) {
	p.Path = v
}

func (p *UpdateGSLBParam) GetPath() string {
	return p.Path
}
func (p *UpdateGSLBParam) SetResponseCode(v int) {
	p.ResponseCode = v
}

func (p *UpdateGSLBParam) GetResponseCode() int {
	return p.ResponseCode
}
func (p *UpdateGSLBParam) SetPort(v int) {
	p.Port = v
}

func (p *UpdateGSLBParam) GetPort() int {
	return p.Port
}
func (p *UpdateGSLBParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *UpdateGSLBParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *UpdateGSLBParam) SetWeighted(v bool) {
	p.Weighted = v
}

func (p *UpdateGSLBParam) GetWeighted() bool {
	return p.Weighted
}
func (p *UpdateGSLBParam) SetSorryServer(v string) {
	p.SorryServer = v
}

func (p *UpdateGSLBParam) GetSorryServer() string {
	return p.SorryServer
}
func (p *UpdateGSLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateGSLBParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateGSLBParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateGSLBParam) GetName() string {
	return p.Name
}
func (p *UpdateGSLBParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateGSLBParam) GetDescription() string {
	return p.Description
}
func (p *UpdateGSLBParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateGSLBParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateGSLBParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateGSLBParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateGSLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateGSLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateGSLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateGSLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateGSLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateGSLBParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateGSLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateGSLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateGSLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateGSLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateGSLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateGSLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateGSLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateGSLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateGSLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateGSLBParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateGSLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateGSLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateGSLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateGSLBParam) GetFormat() string {
	return p.Format
}
func (p *UpdateGSLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateGSLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateGSLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateGSLBParam) GetQuery() string {
	return p.Query
}
func (p *UpdateGSLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateGSLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateGSLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateGSLBParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteGSLBParam is input parameters for the sacloud API
type DeleteGSLBParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewDeleteGSLBParam return new DeleteGSLBParam
func NewDeleteGSLBParam() *DeleteGSLBParam {
	return &DeleteGSLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DeleteGSLBParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DeleteGSLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteGSLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *DeleteGSLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteGSLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteGSLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteGSLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteGSLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteGSLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteGSLBParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteGSLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteGSLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteGSLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteGSLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteGSLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteGSLBParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteGSLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteGSLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteGSLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteGSLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteGSLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteGSLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteGSLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteGSLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteGSLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteGSLBParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteGSLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteGSLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteGSLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteGSLBParam) GetFormat() string {
	return p.Format
}
func (p *DeleteGSLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteGSLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteGSLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteGSLBParam) GetQuery() string {
	return p.Query
}
func (p *DeleteGSLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteGSLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteGSLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteGSLBParam) GetId() sacloud.ID {
	return p.Id
}

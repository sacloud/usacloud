// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListServerParam is input parameters for the sacloud API
type ListServerParam struct {
	Name              []string `json:"name"`
	Id                []int64  `json:"id"`
	Tags              []string `json:"tags"`
	From              int      `json:"from"`
	Max               int      `json:"max"`
	Sort              []string `json:"sort"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
}

// NewListServerParam return new ListServerParam
func NewListServerParam() *ListServerParam {
	return &ListServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ListServerParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = []string{""}
	}
	if isEmpty(p.Id) {
		p.Id = []int64{0}
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.From) {
		p.From = 0
	}
	if isEmpty(p.Max) {
		p.Max = 0
	}
	if isEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}

}

// Validate checks current values in model
func (p *ListServerParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *ListServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListServerParam) GetOutputFormat() string {
	return "table"
}

func (p *ListServerParam) SetName(v []string) {
	p.Name = v
}

func (p *ListServerParam) GetName() []string {
	return p.Name
}
func (p *ListServerParam) SetId(v []int64) {
	p.Id = v
}

func (p *ListServerParam) GetId() []int64 {
	return p.Id
}
func (p *ListServerParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListServerParam) GetTags() []string {
	return p.Tags
}
func (p *ListServerParam) SetFrom(v int) {
	p.From = v
}

func (p *ListServerParam) GetFrom() int {
	return p.From
}
func (p *ListServerParam) SetMax(v int) {
	p.Max = v
}

func (p *ListServerParam) GetMax() int {
	return p.Max
}
func (p *ListServerParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListServerParam) GetSort() []string {
	return p.Sort
}
func (p *ListServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListServerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListServerParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListServerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListServerParam) GetColumn() []string {
	return p.Column
}
func (p *ListServerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListServerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListServerParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListServerParam) GetFormat() string {
	return p.Format
}
func (p *ListServerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListServerParam) GetFormatFile() string {
	return p.FormatFile
}

// BuildServerParam is input parameters for the sacloud API
type BuildServerParam struct {
	Core                    int      `json:"core"`
	Memory                  int      `json:"memory"`
	DiskMode                string   `json:"disk-mode"`
	OsType                  string   `json:"os-type"`
	DiskPlan                string   `json:"disk-plan"`
	DiskConnection          string   `json:"disk-connection"`
	DiskSize                int      `json:"disk-size"`
	SourceArchiveId         int64    `json:"source-archive-id"`
	SourceDiskId            int64    `json:"source-disk-id"`
	DistantFrom             []int64  `json:"distant-from"`
	DiskId                  int64    `json:"disk-id"`
	IsoImageId              int64    `json:"iso-image-id"`
	NetworkMode             string   `json:"network-mode"`
	InterfaceDriver         string   `json:"interface-driver"`
	PacketFilterId          int64    `json:"packet-filter-id"`
	SwitchId                int64    `json:"switch-id"`
	Hostname                string   `json:"hostname"`
	Password                string   `json:"password"`
	DisablePasswordAuth     bool     `json:"disable-password-auth"`
	Ipaddress               string   `json:"ipaddress"`
	NwMasklen               int      `json:"nw-masklen"`
	DefaultRoute            string   `json:"default-route"`
	StartupScripts          []string `json:"startup-scripts"`
	StartupScriptIds        []int64  `json:"startup-script-ids"`
	StartupScriptsEphemeral bool     `json:"startup-scripts-ephemeral"`
	SshKeyMode              string   `json:"ssh-key-mode"`
	SshKeyName              string   `json:"ssh-key-name"`
	SshKeyIds               []int64  `json:"ssh-key-ids"`
	SshKeyPassPhrase        string   `json:"ssh-key-pass-phrase"`
	SshKeyDescription       string   `json:"ssh-key-description"`
	SshKeyPrivateKeyOutput  string   `json:"ssh-key-private-key-output"`
	SshKeyPublicKeys        []string `json:"ssh-key-public-keys"`
	SshKeyPublicKeyFiles    []string `json:"ssh-key-public-key-files"`
	SshKeyEphemeral         bool     `json:"ssh-key-ephemeral"`
	Name                    string   `json:"name"`
	Description             string   `json:"description"`
	Tags                    []string `json:"tags"`
	IconId                  int64    `json:"icon-id"`
	Assumeyes               bool     `json:"assumeyes"`
	ParamTemplate           string   `json:"param-template"`
	ParamTemplateFile       string   `json:"param-template-file"`
	GenerateSkeleton        bool     `json:"generate-skeleton"`
	OutputType              string   `json:"output-type"`
	Column                  []string `json:"column"`
	Quiet                   bool     `json:"quiet"`
	Format                  string   `json:"format"`
	FormatFile              string   `json:"format-file"`
	UsKeyboard              bool     `json:"us-keyboard"`
	DisableBootAfterCreate  bool     `json:"disable-boot-after-create"`
}

// NewBuildServerParam return new BuildServerParam
func NewBuildServerParam() *BuildServerParam {
	return &BuildServerParam{

		Core:                    1,
		Memory:                  1,
		DiskMode:                "create",
		DiskPlan:                "ssd",
		DiskConnection:          "virtio",
		DiskSize:                20,
		NetworkMode:             "shared",
		InterfaceDriver:         "virtio",
		NwMasklen:               24,
		StartupScriptsEphemeral: true,
		SshKeyEphemeral:         true,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *BuildServerParam) FillValueToSkeleton() {
	if isEmpty(p.Core) {
		p.Core = 0
	}
	if isEmpty(p.Memory) {
		p.Memory = 0
	}
	if isEmpty(p.DiskMode) {
		p.DiskMode = ""
	}
	if isEmpty(p.OsType) {
		p.OsType = ""
	}
	if isEmpty(p.DiskPlan) {
		p.DiskPlan = ""
	}
	if isEmpty(p.DiskConnection) {
		p.DiskConnection = ""
	}
	if isEmpty(p.DiskSize) {
		p.DiskSize = 0
	}
	if isEmpty(p.SourceArchiveId) {
		p.SourceArchiveId = 0
	}
	if isEmpty(p.SourceDiskId) {
		p.SourceDiskId = 0
	}
	if isEmpty(p.DistantFrom) {
		p.DistantFrom = []int64{0}
	}
	if isEmpty(p.DiskId) {
		p.DiskId = 0
	}
	if isEmpty(p.IsoImageId) {
		p.IsoImageId = 0
	}
	if isEmpty(p.NetworkMode) {
		p.NetworkMode = ""
	}
	if isEmpty(p.InterfaceDriver) {
		p.InterfaceDriver = ""
	}
	if isEmpty(p.PacketFilterId) {
		p.PacketFilterId = 0
	}
	if isEmpty(p.SwitchId) {
		p.SwitchId = 0
	}
	if isEmpty(p.Hostname) {
		p.Hostname = ""
	}
	if isEmpty(p.Password) {
		p.Password = ""
	}
	if isEmpty(p.DisablePasswordAuth) {
		p.DisablePasswordAuth = false
	}
	if isEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if isEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}
	if isEmpty(p.DefaultRoute) {
		p.DefaultRoute = ""
	}
	if isEmpty(p.StartupScripts) {
		p.StartupScripts = []string{""}
	}
	if isEmpty(p.StartupScriptIds) {
		p.StartupScriptIds = []int64{0}
	}
	if isEmpty(p.StartupScriptsEphemeral) {
		p.StartupScriptsEphemeral = false
	}
	if isEmpty(p.SshKeyMode) {
		p.SshKeyMode = ""
	}
	if isEmpty(p.SshKeyName) {
		p.SshKeyName = ""
	}
	if isEmpty(p.SshKeyIds) {
		p.SshKeyIds = []int64{0}
	}
	if isEmpty(p.SshKeyPassPhrase) {
		p.SshKeyPassPhrase = ""
	}
	if isEmpty(p.SshKeyDescription) {
		p.SshKeyDescription = ""
	}
	if isEmpty(p.SshKeyPrivateKeyOutput) {
		p.SshKeyPrivateKeyOutput = ""
	}
	if isEmpty(p.SshKeyPublicKeys) {
		p.SshKeyPublicKeys = []string{""}
	}
	if isEmpty(p.SshKeyPublicKeyFiles) {
		p.SshKeyPublicKeyFiles = []string{""}
	}
	if isEmpty(p.SshKeyEphemeral) {
		p.SshKeyEphemeral = false
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = 0
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.UsKeyboard) {
		p.UsKeyboard = false
	}
	if isEmpty(p.DisableBootAfterCreate) {
		p.DisableBootAfterCreate = false
	}

}

// Validate checks current values in model
func (p *BuildServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--core", p.Core)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--memory", p.Memory)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--disk-mode", p.DiskMode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["disk-mode"].ValidateFunc
		errs := validator("--disk-mode", p.DiskMode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["os-type"].ValidateFunc
		errs := validator("--os-type", p.OsType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["disk-plan"].ValidateFunc
		errs := validator("--disk-plan", p.DiskPlan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["disk-connection"].ValidateFunc
		errs := validator("--disk-connection", p.DiskConnection)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["disk-size"].ValidateFunc
		errs := validator("--disk-size", p.DiskSize)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["source-archive-id"].ValidateFunc
		errs := validator("--source-archive-id", p.SourceArchiveId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["source-disk-id"].ValidateFunc
		errs := validator("--source-disk-id", p.SourceDiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["distant-from"].ValidateFunc
		errs := validator("--distant-from", p.DistantFrom)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["disk-id"].ValidateFunc
		errs := validator("--disk-id", p.DiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["iso-image-id"].ValidateFunc
		errs := validator("--iso-image-id", p.IsoImageId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--network-mode", p.NetworkMode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["network-mode"].ValidateFunc
		errs := validator("--network-mode", p.NetworkMode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["interface-driver"].ValidateFunc
		errs := validator("--interface-driver", p.InterfaceDriver)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["packet-filter-id"].ValidateFunc
		errs := validator("--packet-filter-id", p.PacketFilterId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["default-route"].ValidateFunc
		errs := validator("--default-route", p.DefaultRoute)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["startup-script-ids"].ValidateFunc
		errs := validator("--startup-script-ids", p.StartupScriptIds)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["ssh-key-mode"].ValidateFunc
		errs := validator("--ssh-key-mode", p.SshKeyMode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["ssh-key-ids"].ValidateFunc
		errs := validator("--ssh-key-ids", p.SshKeyIds)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["ssh-key-pass-phrase"].ValidateFunc
		errs := validator("--ssh-key-pass-phrase", p.SshKeyPassPhrase)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["ssh-key-public-key-files"].ValidateFunc
		errs := validator("--ssh-key-public-key-files", p.SshKeyPublicKeyFiles)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["build"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *BuildServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *BuildServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["build"]
}

func (p *BuildServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *BuildServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *BuildServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *BuildServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *BuildServerParam) GetOutputFormat() string {
	return "table"
}

func (p *BuildServerParam) SetCore(v int) {
	p.Core = v
}

func (p *BuildServerParam) GetCore() int {
	return p.Core
}
func (p *BuildServerParam) SetMemory(v int) {
	p.Memory = v
}

func (p *BuildServerParam) GetMemory() int {
	return p.Memory
}
func (p *BuildServerParam) SetDiskMode(v string) {
	p.DiskMode = v
}

func (p *BuildServerParam) GetDiskMode() string {
	return p.DiskMode
}
func (p *BuildServerParam) SetOsType(v string) {
	p.OsType = v
}

func (p *BuildServerParam) GetOsType() string {
	return p.OsType
}
func (p *BuildServerParam) SetDiskPlan(v string) {
	p.DiskPlan = v
}

func (p *BuildServerParam) GetDiskPlan() string {
	return p.DiskPlan
}
func (p *BuildServerParam) SetDiskConnection(v string) {
	p.DiskConnection = v
}

func (p *BuildServerParam) GetDiskConnection() string {
	return p.DiskConnection
}
func (p *BuildServerParam) SetDiskSize(v int) {
	p.DiskSize = v
}

func (p *BuildServerParam) GetDiskSize() int {
	return p.DiskSize
}
func (p *BuildServerParam) SetSourceArchiveId(v int64) {
	p.SourceArchiveId = v
}

func (p *BuildServerParam) GetSourceArchiveId() int64 {
	return p.SourceArchiveId
}
func (p *BuildServerParam) SetSourceDiskId(v int64) {
	p.SourceDiskId = v
}

func (p *BuildServerParam) GetSourceDiskId() int64 {
	return p.SourceDiskId
}
func (p *BuildServerParam) SetDistantFrom(v []int64) {
	p.DistantFrom = v
}

func (p *BuildServerParam) GetDistantFrom() []int64 {
	return p.DistantFrom
}
func (p *BuildServerParam) SetDiskId(v int64) {
	p.DiskId = v
}

func (p *BuildServerParam) GetDiskId() int64 {
	return p.DiskId
}
func (p *BuildServerParam) SetIsoImageId(v int64) {
	p.IsoImageId = v
}

func (p *BuildServerParam) GetIsoImageId() int64 {
	return p.IsoImageId
}
func (p *BuildServerParam) SetNetworkMode(v string) {
	p.NetworkMode = v
}

func (p *BuildServerParam) GetNetworkMode() string {
	return p.NetworkMode
}
func (p *BuildServerParam) SetInterfaceDriver(v string) {
	p.InterfaceDriver = v
}

func (p *BuildServerParam) GetInterfaceDriver() string {
	return p.InterfaceDriver
}
func (p *BuildServerParam) SetPacketFilterId(v int64) {
	p.PacketFilterId = v
}

func (p *BuildServerParam) GetPacketFilterId() int64 {
	return p.PacketFilterId
}
func (p *BuildServerParam) SetSwitchId(v int64) {
	p.SwitchId = v
}

func (p *BuildServerParam) GetSwitchId() int64 {
	return p.SwitchId
}
func (p *BuildServerParam) SetHostname(v string) {
	p.Hostname = v
}

func (p *BuildServerParam) GetHostname() string {
	return p.Hostname
}
func (p *BuildServerParam) SetPassword(v string) {
	p.Password = v
}

func (p *BuildServerParam) GetPassword() string {
	return p.Password
}
func (p *BuildServerParam) SetDisablePasswordAuth(v bool) {
	p.DisablePasswordAuth = v
}

func (p *BuildServerParam) GetDisablePasswordAuth() bool {
	return p.DisablePasswordAuth
}
func (p *BuildServerParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *BuildServerParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *BuildServerParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *BuildServerParam) GetNwMasklen() int {
	return p.NwMasklen
}
func (p *BuildServerParam) SetDefaultRoute(v string) {
	p.DefaultRoute = v
}

func (p *BuildServerParam) GetDefaultRoute() string {
	return p.DefaultRoute
}
func (p *BuildServerParam) SetStartupScripts(v []string) {
	p.StartupScripts = v
}

func (p *BuildServerParam) GetStartupScripts() []string {
	return p.StartupScripts
}
func (p *BuildServerParam) SetStartupScriptIds(v []int64) {
	p.StartupScriptIds = v
}

func (p *BuildServerParam) GetStartupScriptIds() []int64 {
	return p.StartupScriptIds
}
func (p *BuildServerParam) SetStartupScriptsEphemeral(v bool) {
	p.StartupScriptsEphemeral = v
}

func (p *BuildServerParam) GetStartupScriptsEphemeral() bool {
	return p.StartupScriptsEphemeral
}
func (p *BuildServerParam) SetSshKeyMode(v string) {
	p.SshKeyMode = v
}

func (p *BuildServerParam) GetSshKeyMode() string {
	return p.SshKeyMode
}
func (p *BuildServerParam) SetSshKeyName(v string) {
	p.SshKeyName = v
}

func (p *BuildServerParam) GetSshKeyName() string {
	return p.SshKeyName
}
func (p *BuildServerParam) SetSshKeyIds(v []int64) {
	p.SshKeyIds = v
}

func (p *BuildServerParam) GetSshKeyIds() []int64 {
	return p.SshKeyIds
}
func (p *BuildServerParam) SetSshKeyPassPhrase(v string) {
	p.SshKeyPassPhrase = v
}

func (p *BuildServerParam) GetSshKeyPassPhrase() string {
	return p.SshKeyPassPhrase
}
func (p *BuildServerParam) SetSshKeyDescription(v string) {
	p.SshKeyDescription = v
}

func (p *BuildServerParam) GetSshKeyDescription() string {
	return p.SshKeyDescription
}
func (p *BuildServerParam) SetSshKeyPrivateKeyOutput(v string) {
	p.SshKeyPrivateKeyOutput = v
}

func (p *BuildServerParam) GetSshKeyPrivateKeyOutput() string {
	return p.SshKeyPrivateKeyOutput
}
func (p *BuildServerParam) SetSshKeyPublicKeys(v []string) {
	p.SshKeyPublicKeys = v
}

func (p *BuildServerParam) GetSshKeyPublicKeys() []string {
	return p.SshKeyPublicKeys
}
func (p *BuildServerParam) SetSshKeyPublicKeyFiles(v []string) {
	p.SshKeyPublicKeyFiles = v
}

func (p *BuildServerParam) GetSshKeyPublicKeyFiles() []string {
	return p.SshKeyPublicKeyFiles
}
func (p *BuildServerParam) SetSshKeyEphemeral(v bool) {
	p.SshKeyEphemeral = v
}

func (p *BuildServerParam) GetSshKeyEphemeral() bool {
	return p.SshKeyEphemeral
}
func (p *BuildServerParam) SetName(v string) {
	p.Name = v
}

func (p *BuildServerParam) GetName() string {
	return p.Name
}
func (p *BuildServerParam) SetDescription(v string) {
	p.Description = v
}

func (p *BuildServerParam) GetDescription() string {
	return p.Description
}
func (p *BuildServerParam) SetTags(v []string) {
	p.Tags = v
}

func (p *BuildServerParam) GetTags() []string {
	return p.Tags
}
func (p *BuildServerParam) SetIconId(v int64) {
	p.IconId = v
}

func (p *BuildServerParam) GetIconId() int64 {
	return p.IconId
}
func (p *BuildServerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BuildServerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BuildServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BuildServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BuildServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BuildServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BuildServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BuildServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BuildServerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *BuildServerParam) GetOutputType() string {
	return p.OutputType
}
func (p *BuildServerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *BuildServerParam) GetColumn() []string {
	return p.Column
}
func (p *BuildServerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *BuildServerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *BuildServerParam) SetFormat(v string) {
	p.Format = v
}

func (p *BuildServerParam) GetFormat() string {
	return p.Format
}
func (p *BuildServerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *BuildServerParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *BuildServerParam) SetUsKeyboard(v bool) {
	p.UsKeyboard = v
}

func (p *BuildServerParam) GetUsKeyboard() bool {
	return p.UsKeyboard
}
func (p *BuildServerParam) SetDisableBootAfterCreate(v bool) {
	p.DisableBootAfterCreate = v
}

func (p *BuildServerParam) GetDisableBootAfterCreate() bool {
	return p.DisableBootAfterCreate
}

// ReadServerParam is input parameters for the sacloud API
type ReadServerParam struct {
	Selector          []string `json:"selector"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Id                int64    `json:"id"`
}

// NewReadServerParam return new ReadServerParam
func NewReadServerParam() *ReadServerParam {
	return &ReadServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ReadServerParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *ReadServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *ReadServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadServerParam) GetOutputFormat() string {
	return "table"
}

func (p *ReadServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadServerParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadServerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadServerParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadServerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadServerParam) GetColumn() []string {
	return p.Column
}
func (p *ReadServerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadServerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadServerParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadServerParam) GetFormat() string {
	return p.Format
}
func (p *ReadServerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadServerParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadServerParam) SetId(v int64) {
	p.Id = v
}

func (p *ReadServerParam) GetId() int64 {
	return p.Id
}

// UpdateServerParam is input parameters for the sacloud API
type UpdateServerParam struct {
	InterfaceDriver   string   `json:"interface-driver"`
	Selector          []string `json:"selector"`
	Name              string   `json:"name"`
	Description       string   `json:"description"`
	Tags              []string `json:"tags"`
	IconId            int64    `json:"icon-id"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Id                int64    `json:"id"`
}

// NewUpdateServerParam return new UpdateServerParam
func NewUpdateServerParam() *UpdateServerParam {
	return &UpdateServerParam{

		InterfaceDriver: "virtio",
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *UpdateServerParam) FillValueToSkeleton() {
	if isEmpty(p.InterfaceDriver) {
		p.InterfaceDriver = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = 0
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *UpdateServerParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["Server"].Commands["update"].Params["interface-driver"].ValidateFunc
		errs := validator("--interface-driver", p.InterfaceDriver)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdateServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *UpdateServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdateServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdateServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdateServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdateServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdateServerParam) GetOutputFormat() string {
	return "table"
}

func (p *UpdateServerParam) SetInterfaceDriver(v string) {
	p.InterfaceDriver = v
}

func (p *UpdateServerParam) GetInterfaceDriver() string {
	return p.InterfaceDriver
}
func (p *UpdateServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateServerParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateServerParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateServerParam) GetName() string {
	return p.Name
}
func (p *UpdateServerParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateServerParam) GetDescription() string {
	return p.Description
}
func (p *UpdateServerParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateServerParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateServerParam) SetIconId(v int64) {
	p.IconId = v
}

func (p *UpdateServerParam) GetIconId() int64 {
	return p.IconId
}
func (p *UpdateServerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateServerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateServerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateServerParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateServerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateServerParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateServerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateServerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateServerParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateServerParam) GetFormat() string {
	return p.Format
}
func (p *UpdateServerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateServerParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateServerParam) SetId(v int64) {
	p.Id = v
}

func (p *UpdateServerParam) GetId() int64 {
	return p.Id
}

// DeleteServerParam is input parameters for the sacloud API
type DeleteServerParam struct {
	Force             bool     `json:"force"`
	WithoutDisk       bool     `json:"without-disk"`
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Id                int64    `json:"id"`
}

// NewDeleteServerParam return new DeleteServerParam
func NewDeleteServerParam() *DeleteServerParam {
	return &DeleteServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DeleteServerParam) FillValueToSkeleton() {
	if isEmpty(p.Force) {
		p.Force = false
	}
	if isEmpty(p.WithoutDisk) {
		p.WithoutDisk = false
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *DeleteServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *DeleteServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteServerParam) GetOutputFormat() string {
	return "table"
}

func (p *DeleteServerParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteServerParam) GetForce() bool {
	return p.Force
}
func (p *DeleteServerParam) SetWithoutDisk(v bool) {
	p.WithoutDisk = v
}

func (p *DeleteServerParam) GetWithoutDisk() bool {
	return p.WithoutDisk
}
func (p *DeleteServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteServerParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteServerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteServerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteServerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteServerParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteServerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteServerParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteServerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteServerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteServerParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteServerParam) GetFormat() string {
	return p.Format
}
func (p *DeleteServerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteServerParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteServerParam) SetId(v int64) {
	p.Id = v
}

func (p *DeleteServerParam) GetId() int64 {
	return p.Id
}

// PlanChangeServerParam is input parameters for the sacloud API
type PlanChangeServerParam struct {
	Core              int      `json:"core"`
	Memory            int      `json:"memory"`
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Id                int64    `json:"id"`
}

// NewPlanChangeServerParam return new PlanChangeServerParam
func NewPlanChangeServerParam() *PlanChangeServerParam {
	return &PlanChangeServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *PlanChangeServerParam) FillValueToSkeleton() {
	if isEmpty(p.Core) {
		p.Core = 0
	}
	if isEmpty(p.Memory) {
		p.Memory = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *PlanChangeServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--core", p.Core)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--memory", p.Memory)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *PlanChangeServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *PlanChangeServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["plan-change"]
}

func (p *PlanChangeServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *PlanChangeServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *PlanChangeServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *PlanChangeServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *PlanChangeServerParam) GetOutputFormat() string {
	return "table"
}

func (p *PlanChangeServerParam) SetCore(v int) {
	p.Core = v
}

func (p *PlanChangeServerParam) GetCore() int {
	return p.Core
}
func (p *PlanChangeServerParam) SetMemory(v int) {
	p.Memory = v
}

func (p *PlanChangeServerParam) GetMemory() int {
	return p.Memory
}
func (p *PlanChangeServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *PlanChangeServerParam) GetSelector() []string {
	return p.Selector
}
func (p *PlanChangeServerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PlanChangeServerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PlanChangeServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PlanChangeServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PlanChangeServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PlanChangeServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PlanChangeServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PlanChangeServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PlanChangeServerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *PlanChangeServerParam) GetOutputType() string {
	return p.OutputType
}
func (p *PlanChangeServerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *PlanChangeServerParam) GetColumn() []string {
	return p.Column
}
func (p *PlanChangeServerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *PlanChangeServerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *PlanChangeServerParam) SetFormat(v string) {
	p.Format = v
}

func (p *PlanChangeServerParam) GetFormat() string {
	return p.Format
}
func (p *PlanChangeServerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *PlanChangeServerParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *PlanChangeServerParam) SetId(v int64) {
	p.Id = v
}

func (p *PlanChangeServerParam) GetId() int64 {
	return p.Id
}

// BootServerParam is input parameters for the sacloud API
type BootServerParam struct {
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewBootServerParam return new BootServerParam
func NewBootServerParam() *BootServerParam {
	return &BootServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *BootServerParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *BootServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *BootServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *BootServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["boot"]
}

func (p *BootServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *BootServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *BootServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *BootServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *BootServerParam) GetOutputFormat() string {
	return "table"
}

func (p *BootServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *BootServerParam) GetSelector() []string {
	return p.Selector
}
func (p *BootServerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BootServerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BootServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BootServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BootServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BootServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BootServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BootServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BootServerParam) SetId(v int64) {
	p.Id = v
}

func (p *BootServerParam) GetId() int64 {
	return p.Id
}

// ShutdownServerParam is input parameters for the sacloud API
type ShutdownServerParam struct {
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewShutdownServerParam return new ShutdownServerParam
func NewShutdownServerParam() *ShutdownServerParam {
	return &ShutdownServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ShutdownServerParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *ShutdownServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ShutdownServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *ShutdownServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["shutdown"]
}

func (p *ShutdownServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ShutdownServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ShutdownServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ShutdownServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ShutdownServerParam) GetOutputFormat() string {
	return "table"
}

func (p *ShutdownServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ShutdownServerParam) GetSelector() []string {
	return p.Selector
}
func (p *ShutdownServerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ShutdownServerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ShutdownServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ShutdownServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ShutdownServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ShutdownServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ShutdownServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ShutdownServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ShutdownServerParam) SetId(v int64) {
	p.Id = v
}

func (p *ShutdownServerParam) GetId() int64 {
	return p.Id
}

// ShutdownForceServerParam is input parameters for the sacloud API
type ShutdownForceServerParam struct {
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewShutdownForceServerParam return new ShutdownForceServerParam
func NewShutdownForceServerParam() *ShutdownForceServerParam {
	return &ShutdownForceServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ShutdownForceServerParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *ShutdownForceServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ShutdownForceServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *ShutdownForceServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["shutdown-force"]
}

func (p *ShutdownForceServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ShutdownForceServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ShutdownForceServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ShutdownForceServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ShutdownForceServerParam) GetOutputFormat() string {
	return "table"
}

func (p *ShutdownForceServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ShutdownForceServerParam) GetSelector() []string {
	return p.Selector
}
func (p *ShutdownForceServerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ShutdownForceServerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ShutdownForceServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ShutdownForceServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ShutdownForceServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ShutdownForceServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ShutdownForceServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ShutdownForceServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ShutdownForceServerParam) SetId(v int64) {
	p.Id = v
}

func (p *ShutdownForceServerParam) GetId() int64 {
	return p.Id
}

// ResetServerParam is input parameters for the sacloud API
type ResetServerParam struct {
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewResetServerParam return new ResetServerParam
func NewResetServerParam() *ResetServerParam {
	return &ResetServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ResetServerParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *ResetServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ResetServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *ResetServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["reset"]
}

func (p *ResetServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ResetServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ResetServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ResetServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ResetServerParam) GetOutputFormat() string {
	return "table"
}

func (p *ResetServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ResetServerParam) GetSelector() []string {
	return p.Selector
}
func (p *ResetServerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ResetServerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ResetServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ResetServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ResetServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ResetServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ResetServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ResetServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ResetServerParam) SetId(v int64) {
	p.Id = v
}

func (p *ResetServerParam) GetId() int64 {
	return p.Id
}

// WaitForBootServerParam is input parameters for the sacloud API
type WaitForBootServerParam struct {
	Selector          []string `json:"selector"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewWaitForBootServerParam return new WaitForBootServerParam
func NewWaitForBootServerParam() *WaitForBootServerParam {
	return &WaitForBootServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *WaitForBootServerParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *WaitForBootServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *WaitForBootServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *WaitForBootServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["wait-for-boot"]
}

func (p *WaitForBootServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *WaitForBootServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *WaitForBootServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *WaitForBootServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *WaitForBootServerParam) GetOutputFormat() string {
	return "table"
}

func (p *WaitForBootServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *WaitForBootServerParam) GetSelector() []string {
	return p.Selector
}
func (p *WaitForBootServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForBootServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForBootServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForBootServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForBootServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForBootServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForBootServerParam) SetId(v int64) {
	p.Id = v
}

func (p *WaitForBootServerParam) GetId() int64 {
	return p.Id
}

// WaitForDownServerParam is input parameters for the sacloud API
type WaitForDownServerParam struct {
	Selector          []string `json:"selector"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewWaitForDownServerParam return new WaitForDownServerParam
func NewWaitForDownServerParam() *WaitForDownServerParam {
	return &WaitForDownServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *WaitForDownServerParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *WaitForDownServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *WaitForDownServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *WaitForDownServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["wait-for-down"]
}

func (p *WaitForDownServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *WaitForDownServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *WaitForDownServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *WaitForDownServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *WaitForDownServerParam) GetOutputFormat() string {
	return "table"
}

func (p *WaitForDownServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *WaitForDownServerParam) GetSelector() []string {
	return p.Selector
}
func (p *WaitForDownServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForDownServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForDownServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForDownServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForDownServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForDownServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForDownServerParam) SetId(v int64) {
	p.Id = v
}

func (p *WaitForDownServerParam) GetId() int64 {
	return p.Id
}

// SshServerParam is input parameters for the sacloud API
type SshServerParam struct {
	Key               string   `json:"key"`
	User              string   `json:"user"`
	Port              int      `json:"port"`
	Password          string   `json:"password"`
	Selector          []string `json:"selector"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Quiet             bool     `json:"quiet"`
	Id                int64    `json:"id"`
}

// NewSshServerParam return new SshServerParam
func NewSshServerParam() *SshServerParam {
	return &SshServerParam{

		Port: 22,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *SshServerParam) FillValueToSkeleton() {
	if isEmpty(p.Key) {
		p.Key = ""
	}
	if isEmpty(p.User) {
		p.User = ""
	}
	if isEmpty(p.Port) {
		p.Port = 0
	}
	if isEmpty(p.Password) {
		p.Password = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *SshServerParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["Server"].Commands["ssh"].Params["key"].ValidateFunc
		errs := validator("--key", p.Key)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *SshServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *SshServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["ssh"]
}

func (p *SshServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *SshServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *SshServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *SshServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *SshServerParam) GetOutputFormat() string {
	return "table"
}

func (p *SshServerParam) SetKey(v string) {
	p.Key = v
}

func (p *SshServerParam) GetKey() string {
	return p.Key
}
func (p *SshServerParam) SetUser(v string) {
	p.User = v
}

func (p *SshServerParam) GetUser() string {
	return p.User
}
func (p *SshServerParam) SetPort(v int) {
	p.Port = v
}

func (p *SshServerParam) GetPort() int {
	return p.Port
}
func (p *SshServerParam) SetPassword(v string) {
	p.Password = v
}

func (p *SshServerParam) GetPassword() string {
	return p.Password
}
func (p *SshServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *SshServerParam) GetSelector() []string {
	return p.Selector
}
func (p *SshServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SshServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SshServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SshServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SshServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SshServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SshServerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *SshServerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *SshServerParam) SetId(v int64) {
	p.Id = v
}

func (p *SshServerParam) GetId() int64 {
	return p.Id
}

// SshExecServerParam is input parameters for the sacloud API
type SshExecServerParam struct {
	Key               string `json:"key"`
	User              string `json:"user"`
	Port              int    `json:"port"`
	Password          string `json:"password"`
	ParamTemplate     string `json:"param-template"`
	ParamTemplateFile string `json:"param-template-file"`
	GenerateSkeleton  bool   `json:"generate-skeleton"`
	Quiet             bool   `json:"quiet"`
	Id                int64  `json:"id"`
}

// NewSshExecServerParam return new SshExecServerParam
func NewSshExecServerParam() *SshExecServerParam {
	return &SshExecServerParam{

		Port: 22,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *SshExecServerParam) FillValueToSkeleton() {
	if isEmpty(p.Key) {
		p.Key = ""
	}
	if isEmpty(p.User) {
		p.User = ""
	}
	if isEmpty(p.Port) {
		p.Port = 0
	}
	if isEmpty(p.Password) {
		p.Password = ""
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *SshExecServerParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["Server"].Commands["ssh-exec"].Params["key"].ValidateFunc
		errs := validator("--key", p.Key)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *SshExecServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *SshExecServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["ssh-exec"]
}

func (p *SshExecServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *SshExecServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *SshExecServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *SshExecServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *SshExecServerParam) GetOutputFormat() string {
	return "table"
}

func (p *SshExecServerParam) SetKey(v string) {
	p.Key = v
}

func (p *SshExecServerParam) GetKey() string {
	return p.Key
}
func (p *SshExecServerParam) SetUser(v string) {
	p.User = v
}

func (p *SshExecServerParam) GetUser() string {
	return p.User
}
func (p *SshExecServerParam) SetPort(v int) {
	p.Port = v
}

func (p *SshExecServerParam) GetPort() int {
	return p.Port
}
func (p *SshExecServerParam) SetPassword(v string) {
	p.Password = v
}

func (p *SshExecServerParam) GetPassword() string {
	return p.Password
}
func (p *SshExecServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SshExecServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SshExecServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SshExecServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SshExecServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *SshExecServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *SshExecServerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *SshExecServerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *SshExecServerParam) SetId(v int64) {
	p.Id = v
}

func (p *SshExecServerParam) GetId() int64 {
	return p.Id
}

// ScpServerParam is input parameters for the sacloud API
type ScpServerParam struct {
	Key               string `json:"key"`
	Recursive         bool   `json:"recursive"`
	User              string `json:"user"`
	Port              int    `json:"port"`
	Password          string `json:"password"`
	Assumeyes         bool   `json:"assumeyes"`
	ParamTemplate     string `json:"param-template"`
	ParamTemplateFile string `json:"param-template-file"`
	GenerateSkeleton  bool   `json:"generate-skeleton"`
	Quiet             bool   `json:"quiet"`
}

// NewScpServerParam return new ScpServerParam
func NewScpServerParam() *ScpServerParam {
	return &ScpServerParam{

		Port: 22,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *ScpServerParam) FillValueToSkeleton() {
	if isEmpty(p.Key) {
		p.Key = ""
	}
	if isEmpty(p.Recursive) {
		p.Recursive = false
	}
	if isEmpty(p.User) {
		p.User = ""
	}
	if isEmpty(p.Port) {
		p.Port = 0
	}
	if isEmpty(p.Password) {
		p.Password = ""
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}

}

// Validate checks current values in model
func (p *ScpServerParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["Server"].Commands["scp"].Params["key"].ValidateFunc
		errs := validator("--key", p.Key)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ScpServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *ScpServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["scp"]
}

func (p *ScpServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ScpServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ScpServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ScpServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ScpServerParam) GetOutputFormat() string {
	return "table"
}

func (p *ScpServerParam) SetKey(v string) {
	p.Key = v
}

func (p *ScpServerParam) GetKey() string {
	return p.Key
}
func (p *ScpServerParam) SetRecursive(v bool) {
	p.Recursive = v
}

func (p *ScpServerParam) GetRecursive() bool {
	return p.Recursive
}
func (p *ScpServerParam) SetUser(v string) {
	p.User = v
}

func (p *ScpServerParam) GetUser() string {
	return p.User
}
func (p *ScpServerParam) SetPort(v int) {
	p.Port = v
}

func (p *ScpServerParam) GetPort() int {
	return p.Port
}
func (p *ScpServerParam) SetPassword(v string) {
	p.Password = v
}

func (p *ScpServerParam) GetPassword() string {
	return p.Password
}
func (p *ScpServerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ScpServerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ScpServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ScpServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ScpServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ScpServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ScpServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ScpServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ScpServerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ScpServerParam) GetQuiet() bool {
	return p.Quiet
}

// VncServerParam is input parameters for the sacloud API
type VncServerParam struct {
	WaitForBoot       bool     `json:"wait-for-boot"`
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewVncServerParam return new VncServerParam
func NewVncServerParam() *VncServerParam {
	return &VncServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *VncServerParam) FillValueToSkeleton() {
	if isEmpty(p.WaitForBoot) {
		p.WaitForBoot = false
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *VncServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *VncServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *VncServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["vnc"]
}

func (p *VncServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *VncServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *VncServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *VncServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *VncServerParam) GetOutputFormat() string {
	return "table"
}

func (p *VncServerParam) SetWaitForBoot(v bool) {
	p.WaitForBoot = v
}

func (p *VncServerParam) GetWaitForBoot() bool {
	return p.WaitForBoot
}
func (p *VncServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *VncServerParam) GetSelector() []string {
	return p.Selector
}
func (p *VncServerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *VncServerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *VncServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *VncServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *VncServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *VncServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *VncServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *VncServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *VncServerParam) SetId(v int64) {
	p.Id = v
}

func (p *VncServerParam) GetId() int64 {
	return p.Id
}

// VncInfoServerParam is input parameters for the sacloud API
type VncInfoServerParam struct {
	WaitForBoot       bool     `json:"wait-for-boot"`
	Selector          []string `json:"selector"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Id                int64    `json:"id"`
}

// NewVncInfoServerParam return new VncInfoServerParam
func NewVncInfoServerParam() *VncInfoServerParam {
	return &VncInfoServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *VncInfoServerParam) FillValueToSkeleton() {
	if isEmpty(p.WaitForBoot) {
		p.WaitForBoot = false
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *VncInfoServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *VncInfoServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *VncInfoServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["vnc-info"]
}

func (p *VncInfoServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *VncInfoServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *VncInfoServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *VncInfoServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *VncInfoServerParam) GetOutputFormat() string {
	return "table"
}

func (p *VncInfoServerParam) SetWaitForBoot(v bool) {
	p.WaitForBoot = v
}

func (p *VncInfoServerParam) GetWaitForBoot() bool {
	return p.WaitForBoot
}
func (p *VncInfoServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *VncInfoServerParam) GetSelector() []string {
	return p.Selector
}
func (p *VncInfoServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *VncInfoServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *VncInfoServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *VncInfoServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *VncInfoServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *VncInfoServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *VncInfoServerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *VncInfoServerParam) GetOutputType() string {
	return p.OutputType
}
func (p *VncInfoServerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *VncInfoServerParam) GetColumn() []string {
	return p.Column
}
func (p *VncInfoServerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *VncInfoServerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *VncInfoServerParam) SetFormat(v string) {
	p.Format = v
}

func (p *VncInfoServerParam) GetFormat() string {
	return p.Format
}
func (p *VncInfoServerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *VncInfoServerParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *VncInfoServerParam) SetId(v int64) {
	p.Id = v
}

func (p *VncInfoServerParam) GetId() int64 {
	return p.Id
}

// VncSendServerParam is input parameters for the sacloud API
type VncSendServerParam struct {
	Command           string   `json:"command"`
	CommandFile       string   `json:"command-file"`
	UseUsKeyboard     bool     `json:"use-us-keyboard"`
	Debug             bool     `json:"debug"`
	WaitForBoot       bool     `json:"wait-for-boot"`
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Id                int64    `json:"id"`
}

// NewVncSendServerParam return new VncSendServerParam
func NewVncSendServerParam() *VncSendServerParam {
	return &VncSendServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *VncSendServerParam) FillValueToSkeleton() {
	if isEmpty(p.Command) {
		p.Command = ""
	}
	if isEmpty(p.CommandFile) {
		p.CommandFile = ""
	}
	if isEmpty(p.UseUsKeyboard) {
		p.UseUsKeyboard = false
	}
	if isEmpty(p.Debug) {
		p.Debug = false
	}
	if isEmpty(p.WaitForBoot) {
		p.WaitForBoot = false
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *VncSendServerParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--command", p.Command, map[string]interface{}{

			"--command-file": p.CommandFile,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["vnc-send"].Params["command-file"].ValidateFunc
		errs := validator("--command-file", p.CommandFile)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *VncSendServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *VncSendServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["vnc-send"]
}

func (p *VncSendServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *VncSendServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *VncSendServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *VncSendServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *VncSendServerParam) GetOutputFormat() string {
	return "table"
}

func (p *VncSendServerParam) SetCommand(v string) {
	p.Command = v
}

func (p *VncSendServerParam) GetCommand() string {
	return p.Command
}
func (p *VncSendServerParam) SetCommandFile(v string) {
	p.CommandFile = v
}

func (p *VncSendServerParam) GetCommandFile() string {
	return p.CommandFile
}
func (p *VncSendServerParam) SetUseUsKeyboard(v bool) {
	p.UseUsKeyboard = v
}

func (p *VncSendServerParam) GetUseUsKeyboard() bool {
	return p.UseUsKeyboard
}
func (p *VncSendServerParam) SetDebug(v bool) {
	p.Debug = v
}

func (p *VncSendServerParam) GetDebug() bool {
	return p.Debug
}
func (p *VncSendServerParam) SetWaitForBoot(v bool) {
	p.WaitForBoot = v
}

func (p *VncSendServerParam) GetWaitForBoot() bool {
	return p.WaitForBoot
}
func (p *VncSendServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *VncSendServerParam) GetSelector() []string {
	return p.Selector
}
func (p *VncSendServerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *VncSendServerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *VncSendServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *VncSendServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *VncSendServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *VncSendServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *VncSendServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *VncSendServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *VncSendServerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *VncSendServerParam) GetOutputType() string {
	return p.OutputType
}
func (p *VncSendServerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *VncSendServerParam) GetColumn() []string {
	return p.Column
}
func (p *VncSendServerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *VncSendServerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *VncSendServerParam) SetFormat(v string) {
	p.Format = v
}

func (p *VncSendServerParam) GetFormat() string {
	return p.Format
}
func (p *VncSendServerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *VncSendServerParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *VncSendServerParam) SetId(v int64) {
	p.Id = v
}

func (p *VncSendServerParam) GetId() int64 {
	return p.Id
}

// VncSnapshotServerParam is input parameters for the sacloud API
type VncSnapshotServerParam struct {
	WaitForBoot       bool     `json:"wait-for-boot"`
	OutputPath        string   `json:"output-path"`
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Id                int64    `json:"id"`
}

// NewVncSnapshotServerParam return new VncSnapshotServerParam
func NewVncSnapshotServerParam() *VncSnapshotServerParam {
	return &VncSnapshotServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *VncSnapshotServerParam) FillValueToSkeleton() {
	if isEmpty(p.WaitForBoot) {
		p.WaitForBoot = false
	}
	if isEmpty(p.OutputPath) {
		p.OutputPath = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *VncSnapshotServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *VncSnapshotServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *VncSnapshotServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["vnc-snapshot"]
}

func (p *VncSnapshotServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *VncSnapshotServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *VncSnapshotServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *VncSnapshotServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *VncSnapshotServerParam) GetOutputFormat() string {
	return "table"
}

func (p *VncSnapshotServerParam) SetWaitForBoot(v bool) {
	p.WaitForBoot = v
}

func (p *VncSnapshotServerParam) GetWaitForBoot() bool {
	return p.WaitForBoot
}
func (p *VncSnapshotServerParam) SetOutputPath(v string) {
	p.OutputPath = v
}

func (p *VncSnapshotServerParam) GetOutputPath() string {
	return p.OutputPath
}
func (p *VncSnapshotServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *VncSnapshotServerParam) GetSelector() []string {
	return p.Selector
}
func (p *VncSnapshotServerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *VncSnapshotServerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *VncSnapshotServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *VncSnapshotServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *VncSnapshotServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *VncSnapshotServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *VncSnapshotServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *VncSnapshotServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *VncSnapshotServerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *VncSnapshotServerParam) GetOutputType() string {
	return p.OutputType
}
func (p *VncSnapshotServerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *VncSnapshotServerParam) GetColumn() []string {
	return p.Column
}
func (p *VncSnapshotServerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *VncSnapshotServerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *VncSnapshotServerParam) SetFormat(v string) {
	p.Format = v
}

func (p *VncSnapshotServerParam) GetFormat() string {
	return p.Format
}
func (p *VncSnapshotServerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *VncSnapshotServerParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *VncSnapshotServerParam) SetId(v int64) {
	p.Id = v
}

func (p *VncSnapshotServerParam) GetId() int64 {
	return p.Id
}

// DiskInfoServerParam is input parameters for the sacloud API
type DiskInfoServerParam struct {
	Selector          []string `json:"selector"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Id                int64    `json:"id"`
}

// NewDiskInfoServerParam return new DiskInfoServerParam
func NewDiskInfoServerParam() *DiskInfoServerParam {
	return &DiskInfoServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DiskInfoServerParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *DiskInfoServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DiskInfoServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *DiskInfoServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["disk-info"]
}

func (p *DiskInfoServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DiskInfoServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DiskInfoServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DiskInfoServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DiskInfoServerParam) GetOutputFormat() string {
	return "table"
}

func (p *DiskInfoServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DiskInfoServerParam) GetSelector() []string {
	return p.Selector
}
func (p *DiskInfoServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DiskInfoServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DiskInfoServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DiskInfoServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DiskInfoServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DiskInfoServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DiskInfoServerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DiskInfoServerParam) GetOutputType() string {
	return p.OutputType
}
func (p *DiskInfoServerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DiskInfoServerParam) GetColumn() []string {
	return p.Column
}
func (p *DiskInfoServerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DiskInfoServerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DiskInfoServerParam) SetFormat(v string) {
	p.Format = v
}

func (p *DiskInfoServerParam) GetFormat() string {
	return p.Format
}
func (p *DiskInfoServerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DiskInfoServerParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DiskInfoServerParam) SetId(v int64) {
	p.Id = v
}

func (p *DiskInfoServerParam) GetId() int64 {
	return p.Id
}

// DiskConnectServerParam is input parameters for the sacloud API
type DiskConnectServerParam struct {
	DiskId            int64    `json:"disk-id"`
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewDiskConnectServerParam return new DiskConnectServerParam
func NewDiskConnectServerParam() *DiskConnectServerParam {
	return &DiskConnectServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DiskConnectServerParam) FillValueToSkeleton() {
	if isEmpty(p.DiskId) {
		p.DiskId = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *DiskConnectServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--disk-id", p.DiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["disk-connect"].Params["disk-id"].ValidateFunc
		errs := validator("--disk-id", p.DiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DiskConnectServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *DiskConnectServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["disk-connect"]
}

func (p *DiskConnectServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DiskConnectServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DiskConnectServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DiskConnectServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DiskConnectServerParam) GetOutputFormat() string {
	return "table"
}

func (p *DiskConnectServerParam) SetDiskId(v int64) {
	p.DiskId = v
}

func (p *DiskConnectServerParam) GetDiskId() int64 {
	return p.DiskId
}
func (p *DiskConnectServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DiskConnectServerParam) GetSelector() []string {
	return p.Selector
}
func (p *DiskConnectServerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DiskConnectServerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DiskConnectServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DiskConnectServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DiskConnectServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DiskConnectServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DiskConnectServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DiskConnectServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DiskConnectServerParam) SetId(v int64) {
	p.Id = v
}

func (p *DiskConnectServerParam) GetId() int64 {
	return p.Id
}

// DiskDisconnectServerParam is input parameters for the sacloud API
type DiskDisconnectServerParam struct {
	DiskId            int64    `json:"disk-id"`
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewDiskDisconnectServerParam return new DiskDisconnectServerParam
func NewDiskDisconnectServerParam() *DiskDisconnectServerParam {
	return &DiskDisconnectServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DiskDisconnectServerParam) FillValueToSkeleton() {
	if isEmpty(p.DiskId) {
		p.DiskId = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *DiskDisconnectServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--disk-id", p.DiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["disk-disconnect"].Params["disk-id"].ValidateFunc
		errs := validator("--disk-id", p.DiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DiskDisconnectServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *DiskDisconnectServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["disk-disconnect"]
}

func (p *DiskDisconnectServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DiskDisconnectServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DiskDisconnectServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DiskDisconnectServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DiskDisconnectServerParam) GetOutputFormat() string {
	return "table"
}

func (p *DiskDisconnectServerParam) SetDiskId(v int64) {
	p.DiskId = v
}

func (p *DiskDisconnectServerParam) GetDiskId() int64 {
	return p.DiskId
}
func (p *DiskDisconnectServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DiskDisconnectServerParam) GetSelector() []string {
	return p.Selector
}
func (p *DiskDisconnectServerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DiskDisconnectServerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DiskDisconnectServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DiskDisconnectServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DiskDisconnectServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DiskDisconnectServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DiskDisconnectServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DiskDisconnectServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DiskDisconnectServerParam) SetId(v int64) {
	p.Id = v
}

func (p *DiskDisconnectServerParam) GetId() int64 {
	return p.Id
}

// InterfaceInfoServerParam is input parameters for the sacloud API
type InterfaceInfoServerParam struct {
	Selector          []string `json:"selector"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Id                int64    `json:"id"`
}

// NewInterfaceInfoServerParam return new InterfaceInfoServerParam
func NewInterfaceInfoServerParam() *InterfaceInfoServerParam {
	return &InterfaceInfoServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *InterfaceInfoServerParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *InterfaceInfoServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *InterfaceInfoServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *InterfaceInfoServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["interface-info"]
}

func (p *InterfaceInfoServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *InterfaceInfoServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *InterfaceInfoServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *InterfaceInfoServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *InterfaceInfoServerParam) GetOutputFormat() string {
	return "table"
}

func (p *InterfaceInfoServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *InterfaceInfoServerParam) GetSelector() []string {
	return p.Selector
}
func (p *InterfaceInfoServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceInfoServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceInfoServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceInfoServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceInfoServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceInfoServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceInfoServerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *InterfaceInfoServerParam) GetOutputType() string {
	return p.OutputType
}
func (p *InterfaceInfoServerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *InterfaceInfoServerParam) GetColumn() []string {
	return p.Column
}
func (p *InterfaceInfoServerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *InterfaceInfoServerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *InterfaceInfoServerParam) SetFormat(v string) {
	p.Format = v
}

func (p *InterfaceInfoServerParam) GetFormat() string {
	return p.Format
}
func (p *InterfaceInfoServerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *InterfaceInfoServerParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *InterfaceInfoServerParam) SetId(v int64) {
	p.Id = v
}

func (p *InterfaceInfoServerParam) GetId() int64 {
	return p.Id
}

// InterfaceAddForInternetServerParam is input parameters for the sacloud API
type InterfaceAddForInternetServerParam struct {
	WithoutDiskEdit   bool     `json:"without-disk-edit"`
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewInterfaceAddForInternetServerParam return new InterfaceAddForInternetServerParam
func NewInterfaceAddForInternetServerParam() *InterfaceAddForInternetServerParam {
	return &InterfaceAddForInternetServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *InterfaceAddForInternetServerParam) FillValueToSkeleton() {
	if isEmpty(p.WithoutDiskEdit) {
		p.WithoutDiskEdit = false
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *InterfaceAddForInternetServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *InterfaceAddForInternetServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *InterfaceAddForInternetServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["interface-add-for-internet"]
}

func (p *InterfaceAddForInternetServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *InterfaceAddForInternetServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *InterfaceAddForInternetServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *InterfaceAddForInternetServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *InterfaceAddForInternetServerParam) GetOutputFormat() string {
	return "table"
}

func (p *InterfaceAddForInternetServerParam) SetWithoutDiskEdit(v bool) {
	p.WithoutDiskEdit = v
}

func (p *InterfaceAddForInternetServerParam) GetWithoutDiskEdit() bool {
	return p.WithoutDiskEdit
}
func (p *InterfaceAddForInternetServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *InterfaceAddForInternetServerParam) GetSelector() []string {
	return p.Selector
}
func (p *InterfaceAddForInternetServerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceAddForInternetServerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceAddForInternetServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceAddForInternetServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceAddForInternetServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceAddForInternetServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceAddForInternetServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceAddForInternetServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceAddForInternetServerParam) SetId(v int64) {
	p.Id = v
}

func (p *InterfaceAddForInternetServerParam) GetId() int64 {
	return p.Id
}

// InterfaceAddForRouterServerParam is input parameters for the sacloud API
type InterfaceAddForRouterServerParam struct {
	SwitchId          int64    `json:"switch-id"`
	WithoutDiskEdit   bool     `json:"without-disk-edit"`
	Ipaddress         string   `json:"ipaddress"`
	DefaultRoute      string   `json:"default-route"`
	NwMasklen         int      `json:"nw-masklen"`
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewInterfaceAddForRouterServerParam return new InterfaceAddForRouterServerParam
func NewInterfaceAddForRouterServerParam() *InterfaceAddForRouterServerParam {
	return &InterfaceAddForRouterServerParam{

		NwMasklen: 24,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *InterfaceAddForRouterServerParam) FillValueToSkeleton() {
	if isEmpty(p.SwitchId) {
		p.SwitchId = 0
	}
	if isEmpty(p.WithoutDiskEdit) {
		p.WithoutDiskEdit = false
	}
	if isEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if isEmpty(p.DefaultRoute) {
		p.DefaultRoute = ""
	}
	if isEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *InterfaceAddForRouterServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["interface-add-for-router"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["interface-add-for-router"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["interface-add-for-router"].Params["default-route"].ValidateFunc
		errs := validator("--default-route", p.DefaultRoute)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["interface-add-for-router"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *InterfaceAddForRouterServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *InterfaceAddForRouterServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["interface-add-for-router"]
}

func (p *InterfaceAddForRouterServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *InterfaceAddForRouterServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *InterfaceAddForRouterServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *InterfaceAddForRouterServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *InterfaceAddForRouterServerParam) GetOutputFormat() string {
	return "table"
}

func (p *InterfaceAddForRouterServerParam) SetSwitchId(v int64) {
	p.SwitchId = v
}

func (p *InterfaceAddForRouterServerParam) GetSwitchId() int64 {
	return p.SwitchId
}
func (p *InterfaceAddForRouterServerParam) SetWithoutDiskEdit(v bool) {
	p.WithoutDiskEdit = v
}

func (p *InterfaceAddForRouterServerParam) GetWithoutDiskEdit() bool {
	return p.WithoutDiskEdit
}
func (p *InterfaceAddForRouterServerParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *InterfaceAddForRouterServerParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *InterfaceAddForRouterServerParam) SetDefaultRoute(v string) {
	p.DefaultRoute = v
}

func (p *InterfaceAddForRouterServerParam) GetDefaultRoute() string {
	return p.DefaultRoute
}
func (p *InterfaceAddForRouterServerParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *InterfaceAddForRouterServerParam) GetNwMasklen() int {
	return p.NwMasklen
}
func (p *InterfaceAddForRouterServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *InterfaceAddForRouterServerParam) GetSelector() []string {
	return p.Selector
}
func (p *InterfaceAddForRouterServerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceAddForRouterServerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceAddForRouterServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceAddForRouterServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceAddForRouterServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceAddForRouterServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceAddForRouterServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceAddForRouterServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceAddForRouterServerParam) SetId(v int64) {
	p.Id = v
}

func (p *InterfaceAddForRouterServerParam) GetId() int64 {
	return p.Id
}

// InterfaceAddForSwitchServerParam is input parameters for the sacloud API
type InterfaceAddForSwitchServerParam struct {
	SwitchId          int64    `json:"switch-id"`
	WithoutDiskEdit   bool     `json:"without-disk-edit"`
	Ipaddress         string   `json:"ipaddress"`
	DefaultRoute      string   `json:"default-route"`
	NwMasklen         int      `json:"nw-masklen"`
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewInterfaceAddForSwitchServerParam return new InterfaceAddForSwitchServerParam
func NewInterfaceAddForSwitchServerParam() *InterfaceAddForSwitchServerParam {
	return &InterfaceAddForSwitchServerParam{

		NwMasklen: 24,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *InterfaceAddForSwitchServerParam) FillValueToSkeleton() {
	if isEmpty(p.SwitchId) {
		p.SwitchId = 0
	}
	if isEmpty(p.WithoutDiskEdit) {
		p.WithoutDiskEdit = false
	}
	if isEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if isEmpty(p.DefaultRoute) {
		p.DefaultRoute = ""
	}
	if isEmpty(p.NwMasklen) {
		p.NwMasklen = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *InterfaceAddForSwitchServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["interface-add-for-switch"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["interface-add-for-switch"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["interface-add-for-switch"].Params["default-route"].ValidateFunc
		errs := validator("--default-route", p.DefaultRoute)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["interface-add-for-switch"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *InterfaceAddForSwitchServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *InterfaceAddForSwitchServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["interface-add-for-switch"]
}

func (p *InterfaceAddForSwitchServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *InterfaceAddForSwitchServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *InterfaceAddForSwitchServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *InterfaceAddForSwitchServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *InterfaceAddForSwitchServerParam) GetOutputFormat() string {
	return "table"
}

func (p *InterfaceAddForSwitchServerParam) SetSwitchId(v int64) {
	p.SwitchId = v
}

func (p *InterfaceAddForSwitchServerParam) GetSwitchId() int64 {
	return p.SwitchId
}
func (p *InterfaceAddForSwitchServerParam) SetWithoutDiskEdit(v bool) {
	p.WithoutDiskEdit = v
}

func (p *InterfaceAddForSwitchServerParam) GetWithoutDiskEdit() bool {
	return p.WithoutDiskEdit
}
func (p *InterfaceAddForSwitchServerParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *InterfaceAddForSwitchServerParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *InterfaceAddForSwitchServerParam) SetDefaultRoute(v string) {
	p.DefaultRoute = v
}

func (p *InterfaceAddForSwitchServerParam) GetDefaultRoute() string {
	return p.DefaultRoute
}
func (p *InterfaceAddForSwitchServerParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *InterfaceAddForSwitchServerParam) GetNwMasklen() int {
	return p.NwMasklen
}
func (p *InterfaceAddForSwitchServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *InterfaceAddForSwitchServerParam) GetSelector() []string {
	return p.Selector
}
func (p *InterfaceAddForSwitchServerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceAddForSwitchServerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceAddForSwitchServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceAddForSwitchServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceAddForSwitchServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceAddForSwitchServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceAddForSwitchServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceAddForSwitchServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceAddForSwitchServerParam) SetId(v int64) {
	p.Id = v
}

func (p *InterfaceAddForSwitchServerParam) GetId() int64 {
	return p.Id
}

// InterfaceAddDisconnectedServerParam is input parameters for the sacloud API
type InterfaceAddDisconnectedServerParam struct {
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewInterfaceAddDisconnectedServerParam return new InterfaceAddDisconnectedServerParam
func NewInterfaceAddDisconnectedServerParam() *InterfaceAddDisconnectedServerParam {
	return &InterfaceAddDisconnectedServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *InterfaceAddDisconnectedServerParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *InterfaceAddDisconnectedServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *InterfaceAddDisconnectedServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *InterfaceAddDisconnectedServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["interface-add-disconnected"]
}

func (p *InterfaceAddDisconnectedServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *InterfaceAddDisconnectedServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *InterfaceAddDisconnectedServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *InterfaceAddDisconnectedServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *InterfaceAddDisconnectedServerParam) GetOutputFormat() string {
	return "table"
}

func (p *InterfaceAddDisconnectedServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *InterfaceAddDisconnectedServerParam) GetSelector() []string {
	return p.Selector
}
func (p *InterfaceAddDisconnectedServerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceAddDisconnectedServerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceAddDisconnectedServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceAddDisconnectedServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceAddDisconnectedServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceAddDisconnectedServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceAddDisconnectedServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *InterfaceAddDisconnectedServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *InterfaceAddDisconnectedServerParam) SetId(v int64) {
	p.Id = v
}

func (p *InterfaceAddDisconnectedServerParam) GetId() int64 {
	return p.Id
}

// IsoInfoServerParam is input parameters for the sacloud API
type IsoInfoServerParam struct {
	Selector          []string `json:"selector"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Id                int64    `json:"id"`
}

// NewIsoInfoServerParam return new IsoInfoServerParam
func NewIsoInfoServerParam() *IsoInfoServerParam {
	return &IsoInfoServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *IsoInfoServerParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *IsoInfoServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *IsoInfoServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *IsoInfoServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["iso-info"]
}

func (p *IsoInfoServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *IsoInfoServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *IsoInfoServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *IsoInfoServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *IsoInfoServerParam) GetOutputFormat() string {
	return "table"
}

func (p *IsoInfoServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *IsoInfoServerParam) GetSelector() []string {
	return p.Selector
}
func (p *IsoInfoServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *IsoInfoServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *IsoInfoServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *IsoInfoServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *IsoInfoServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *IsoInfoServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *IsoInfoServerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *IsoInfoServerParam) GetOutputType() string {
	return p.OutputType
}
func (p *IsoInfoServerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *IsoInfoServerParam) GetColumn() []string {
	return p.Column
}
func (p *IsoInfoServerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *IsoInfoServerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *IsoInfoServerParam) SetFormat(v string) {
	p.Format = v
}

func (p *IsoInfoServerParam) GetFormat() string {
	return p.Format
}
func (p *IsoInfoServerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *IsoInfoServerParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *IsoInfoServerParam) SetId(v int64) {
	p.Id = v
}

func (p *IsoInfoServerParam) GetId() int64 {
	return p.Id
}

// IsoInsertServerParam is input parameters for the sacloud API
type IsoInsertServerParam struct {
	IsoImageId        int64    `json:"iso-image-id"`
	Size              int      `json:"size"`
	IsoFile           string   `json:"iso-file"`
	Name              string   `json:"name"`
	Description       string   `json:"description"`
	Tags              []string `json:"tags"`
	IconId            int64    `json:"icon-id"`
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewIsoInsertServerParam return new IsoInsertServerParam
func NewIsoInsertServerParam() *IsoInsertServerParam {
	return &IsoInsertServerParam{

		Size: 5,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *IsoInsertServerParam) FillValueToSkeleton() {
	if isEmpty(p.IsoImageId) {
		p.IsoImageId = 0
	}
	if isEmpty(p.Size) {
		p.Size = 0
	}
	if isEmpty(p.IsoFile) {
		p.IsoFile = ""
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *IsoInsertServerParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["Server"].Commands["iso-insert"].Params["iso-image-id"].ValidateFunc
		errs := validator("--iso-image-id", p.IsoImageId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["iso-insert"].Params["size"].ValidateFunc
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["iso-insert"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["iso-insert"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["iso-insert"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["iso-insert"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *IsoInsertServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *IsoInsertServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["iso-insert"]
}

func (p *IsoInsertServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *IsoInsertServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *IsoInsertServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *IsoInsertServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *IsoInsertServerParam) GetOutputFormat() string {
	return "table"
}

func (p *IsoInsertServerParam) SetIsoImageId(v int64) {
	p.IsoImageId = v
}

func (p *IsoInsertServerParam) GetIsoImageId() int64 {
	return p.IsoImageId
}
func (p *IsoInsertServerParam) SetSize(v int) {
	p.Size = v
}

func (p *IsoInsertServerParam) GetSize() int {
	return p.Size
}
func (p *IsoInsertServerParam) SetIsoFile(v string) {
	p.IsoFile = v
}

func (p *IsoInsertServerParam) GetIsoFile() string {
	return p.IsoFile
}
func (p *IsoInsertServerParam) SetName(v string) {
	p.Name = v
}

func (p *IsoInsertServerParam) GetName() string {
	return p.Name
}
func (p *IsoInsertServerParam) SetDescription(v string) {
	p.Description = v
}

func (p *IsoInsertServerParam) GetDescription() string {
	return p.Description
}
func (p *IsoInsertServerParam) SetTags(v []string) {
	p.Tags = v
}

func (p *IsoInsertServerParam) GetTags() []string {
	return p.Tags
}
func (p *IsoInsertServerParam) SetIconId(v int64) {
	p.IconId = v
}

func (p *IsoInsertServerParam) GetIconId() int64 {
	return p.IconId
}
func (p *IsoInsertServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *IsoInsertServerParam) GetSelector() []string {
	return p.Selector
}
func (p *IsoInsertServerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *IsoInsertServerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *IsoInsertServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *IsoInsertServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *IsoInsertServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *IsoInsertServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *IsoInsertServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *IsoInsertServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *IsoInsertServerParam) SetId(v int64) {
	p.Id = v
}

func (p *IsoInsertServerParam) GetId() int64 {
	return p.Id
}

// IsoEjectServerParam is input parameters for the sacloud API
type IsoEjectServerParam struct {
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewIsoEjectServerParam return new IsoEjectServerParam
func NewIsoEjectServerParam() *IsoEjectServerParam {
	return &IsoEjectServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *IsoEjectServerParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *IsoEjectServerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *IsoEjectServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *IsoEjectServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["iso-eject"]
}

func (p *IsoEjectServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *IsoEjectServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *IsoEjectServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *IsoEjectServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *IsoEjectServerParam) GetOutputFormat() string {
	return "table"
}

func (p *IsoEjectServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *IsoEjectServerParam) GetSelector() []string {
	return p.Selector
}
func (p *IsoEjectServerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *IsoEjectServerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *IsoEjectServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *IsoEjectServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *IsoEjectServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *IsoEjectServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *IsoEjectServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *IsoEjectServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *IsoEjectServerParam) SetId(v int64) {
	p.Id = v
}

func (p *IsoEjectServerParam) GetId() int64 {
	return p.Id
}

// MonitorCpuServerParam is input parameters for the sacloud API
type MonitorCpuServerParam struct {
	Start             string   `json:"start"`
	End               string   `json:"end"`
	KeyFormat         string   `json:"key-format"`
	Selector          []string `json:"selector"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Id                int64    `json:"id"`
}

// NewMonitorCpuServerParam return new MonitorCpuServerParam
func NewMonitorCpuServerParam() *MonitorCpuServerParam {
	return &MonitorCpuServerParam{

		KeyFormat: "sakuracloud.server.{{.ID}}.cpu",
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *MonitorCpuServerParam) FillValueToSkeleton() {
	if isEmpty(p.Start) {
		p.Start = ""
	}
	if isEmpty(p.End) {
		p.End = ""
	}
	if isEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *MonitorCpuServerParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["Server"].Commands["monitor-cpu"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["monitor-cpu"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *MonitorCpuServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *MonitorCpuServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["monitor-cpu"]
}

func (p *MonitorCpuServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *MonitorCpuServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *MonitorCpuServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *MonitorCpuServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *MonitorCpuServerParam) GetOutputFormat() string {
	return "table"
}

func (p *MonitorCpuServerParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorCpuServerParam) GetStart() string {
	return p.Start
}
func (p *MonitorCpuServerParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorCpuServerParam) GetEnd() string {
	return p.End
}
func (p *MonitorCpuServerParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorCpuServerParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorCpuServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *MonitorCpuServerParam) GetSelector() []string {
	return p.Selector
}
func (p *MonitorCpuServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *MonitorCpuServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *MonitorCpuServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *MonitorCpuServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *MonitorCpuServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *MonitorCpuServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *MonitorCpuServerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *MonitorCpuServerParam) GetOutputType() string {
	return p.OutputType
}
func (p *MonitorCpuServerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *MonitorCpuServerParam) GetColumn() []string {
	return p.Column
}
func (p *MonitorCpuServerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *MonitorCpuServerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *MonitorCpuServerParam) SetFormat(v string) {
	p.Format = v
}

func (p *MonitorCpuServerParam) GetFormat() string {
	return p.Format
}
func (p *MonitorCpuServerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *MonitorCpuServerParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *MonitorCpuServerParam) SetId(v int64) {
	p.Id = v
}

func (p *MonitorCpuServerParam) GetId() int64 {
	return p.Id
}

// MonitorNicServerParam is input parameters for the sacloud API
type MonitorNicServerParam struct {
	Start             string   `json:"start"`
	End               string   `json:"end"`
	Index             []int64  `json:"index"`
	KeyFormat         string   `json:"key-format"`
	Selector          []string `json:"selector"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Id                int64    `json:"id"`
}

// NewMonitorNicServerParam return new MonitorNicServerParam
func NewMonitorNicServerParam() *MonitorNicServerParam {
	return &MonitorNicServerParam{

		KeyFormat: "sakuracloud.server.{{.ID}}.nic.{{.Index}}",
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *MonitorNicServerParam) FillValueToSkeleton() {
	if isEmpty(p.Start) {
		p.Start = ""
	}
	if isEmpty(p.End) {
		p.End = ""
	}
	if isEmpty(p.Index) {
		p.Index = []int64{0}
	}
	if isEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *MonitorNicServerParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["Server"].Commands["monitor-nic"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["monitor-nic"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *MonitorNicServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *MonitorNicServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["monitor-nic"]
}

func (p *MonitorNicServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *MonitorNicServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *MonitorNicServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *MonitorNicServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *MonitorNicServerParam) GetOutputFormat() string {
	return "table"
}

func (p *MonitorNicServerParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorNicServerParam) GetStart() string {
	return p.Start
}
func (p *MonitorNicServerParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorNicServerParam) GetEnd() string {
	return p.End
}
func (p *MonitorNicServerParam) SetIndex(v []int64) {
	p.Index = v
}

func (p *MonitorNicServerParam) GetIndex() []int64 {
	return p.Index
}
func (p *MonitorNicServerParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorNicServerParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorNicServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *MonitorNicServerParam) GetSelector() []string {
	return p.Selector
}
func (p *MonitorNicServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *MonitorNicServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *MonitorNicServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *MonitorNicServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *MonitorNicServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *MonitorNicServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *MonitorNicServerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *MonitorNicServerParam) GetOutputType() string {
	return p.OutputType
}
func (p *MonitorNicServerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *MonitorNicServerParam) GetColumn() []string {
	return p.Column
}
func (p *MonitorNicServerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *MonitorNicServerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *MonitorNicServerParam) SetFormat(v string) {
	p.Format = v
}

func (p *MonitorNicServerParam) GetFormat() string {
	return p.Format
}
func (p *MonitorNicServerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *MonitorNicServerParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *MonitorNicServerParam) SetId(v int64) {
	p.Id = v
}

func (p *MonitorNicServerParam) GetId() int64 {
	return p.Id
}

// MonitorDiskServerParam is input parameters for the sacloud API
type MonitorDiskServerParam struct {
	Start             string   `json:"start"`
	End               string   `json:"end"`
	Index             []int64  `json:"index"`
	KeyFormat         string   `json:"key-format"`
	Selector          []string `json:"selector"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Id                int64    `json:"id"`
}

// NewMonitorDiskServerParam return new MonitorDiskServerParam
func NewMonitorDiskServerParam() *MonitorDiskServerParam {
	return &MonitorDiskServerParam{

		KeyFormat: "sakuracloud.server.{{.ID}}.disk.{{.Index}}",
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *MonitorDiskServerParam) FillValueToSkeleton() {
	if isEmpty(p.Start) {
		p.Start = ""
	}
	if isEmpty(p.End) {
		p.End = ""
	}
	if isEmpty(p.Index) {
		p.Index = []int64{0}
	}
	if isEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *MonitorDiskServerParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["Server"].Commands["monitor-disk"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Server"].Commands["monitor-disk"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *MonitorDiskServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *MonitorDiskServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["monitor-disk"]
}

func (p *MonitorDiskServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *MonitorDiskServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *MonitorDiskServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *MonitorDiskServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *MonitorDiskServerParam) GetOutputFormat() string {
	return "table"
}

func (p *MonitorDiskServerParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorDiskServerParam) GetStart() string {
	return p.Start
}
func (p *MonitorDiskServerParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorDiskServerParam) GetEnd() string {
	return p.End
}
func (p *MonitorDiskServerParam) SetIndex(v []int64) {
	p.Index = v
}

func (p *MonitorDiskServerParam) GetIndex() []int64 {
	return p.Index
}
func (p *MonitorDiskServerParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorDiskServerParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorDiskServerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *MonitorDiskServerParam) GetSelector() []string {
	return p.Selector
}
func (p *MonitorDiskServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *MonitorDiskServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *MonitorDiskServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *MonitorDiskServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *MonitorDiskServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *MonitorDiskServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *MonitorDiskServerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *MonitorDiskServerParam) GetOutputType() string {
	return p.OutputType
}
func (p *MonitorDiskServerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *MonitorDiskServerParam) GetColumn() []string {
	return p.Column
}
func (p *MonitorDiskServerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *MonitorDiskServerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *MonitorDiskServerParam) SetFormat(v string) {
	p.Format = v
}

func (p *MonitorDiskServerParam) GetFormat() string {
	return p.Format
}
func (p *MonitorDiskServerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *MonitorDiskServerParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *MonitorDiskServerParam) SetId(v int64) {
	p.Id = v
}

func (p *MonitorDiskServerParam) GetId() int64 {
	return p.Id
}

// MaintenanceInfoServerParam is input parameters for the sacloud API
type MaintenanceInfoServerParam struct {
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
}

// NewMaintenanceInfoServerParam return new MaintenanceInfoServerParam
func NewMaintenanceInfoServerParam() *MaintenanceInfoServerParam {
	return &MaintenanceInfoServerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *MaintenanceInfoServerParam) FillValueToSkeleton() {
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}

}

// Validate checks current values in model
func (p *MaintenanceInfoServerParam) Validate() []error {
	errors := []error{}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *MaintenanceInfoServerParam) GetResourceDef() *schema.Resource {
	return define.Resources["Server"]
}

func (p *MaintenanceInfoServerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["maintenance-info"]
}

func (p *MaintenanceInfoServerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *MaintenanceInfoServerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *MaintenanceInfoServerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *MaintenanceInfoServerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *MaintenanceInfoServerParam) GetOutputFormat() string {
	return "table"
}

func (p *MaintenanceInfoServerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *MaintenanceInfoServerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *MaintenanceInfoServerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *MaintenanceInfoServerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *MaintenanceInfoServerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *MaintenanceInfoServerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *MaintenanceInfoServerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *MaintenanceInfoServerParam) GetOutputType() string {
	return p.OutputType
}
func (p *MaintenanceInfoServerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *MaintenanceInfoServerParam) GetColumn() []string {
	return p.Column
}
func (p *MaintenanceInfoServerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *MaintenanceInfoServerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *MaintenanceInfoServerParam) SetFormat(v string) {
	p.Format = v
}

func (p *MaintenanceInfoServerParam) GetFormat() string {
	return p.Format
}
func (p *MaintenanceInfoServerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *MaintenanceInfoServerParam) GetFormatFile() string {
	return p.FormatFile
}

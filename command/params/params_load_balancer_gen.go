// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListLoadbalancerParam is input parameters for the sacloud API
type ListLoadbalancerParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Tags              []string     `json:"tags"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`
}

// NewListLoadbalancerParam return new ListLoadbalancerParam
func NewListLoadbalancerParam() *ListLoadbalancerParam {
	return &ListLoadbalancerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ListLoadbalancerParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = []string{""}
	}
	if isEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.From) {
		p.From = 0
	}
	if isEmpty(p.Max) {
		p.Max = 0
	}
	if isEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *ListLoadbalancerParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListLoadbalancerParam) GetResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ListLoadbalancerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListLoadbalancerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListLoadbalancerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListLoadbalancerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListLoadbalancerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListLoadbalancerParam) SetName(v []string) {
	p.Name = v
}

func (p *ListLoadbalancerParam) GetName() []string {
	return p.Name
}
func (p *ListLoadbalancerParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListLoadbalancerParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListLoadbalancerParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListLoadbalancerParam) GetTags() []string {
	return p.Tags
}
func (p *ListLoadbalancerParam) SetFrom(v int) {
	p.From = v
}

func (p *ListLoadbalancerParam) GetFrom() int {
	return p.From
}
func (p *ListLoadbalancerParam) SetMax(v int) {
	p.Max = v
}

func (p *ListLoadbalancerParam) GetMax() int {
	return p.Max
}
func (p *ListLoadbalancerParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListLoadbalancerParam) GetSort() []string {
	return p.Sort
}
func (p *ListLoadbalancerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListLoadbalancerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListLoadbalancerParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListLoadbalancerParam) GetParameters() string {
	return p.Parameters
}
func (p *ListLoadbalancerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListLoadbalancerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListLoadbalancerParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListLoadbalancerParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListLoadbalancerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListLoadbalancerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListLoadbalancerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListLoadbalancerParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListLoadbalancerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListLoadbalancerParam) GetColumn() []string {
	return p.Column
}
func (p *ListLoadbalancerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListLoadbalancerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListLoadbalancerParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListLoadbalancerParam) GetFormat() string {
	return p.Format
}
func (p *ListLoadbalancerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListLoadbalancerParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListLoadbalancerParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListLoadbalancerParam) GetQuery() string {
	return p.Query
}
func (p *ListLoadbalancerParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListLoadbalancerParam) GetQueryFile() string {
	return p.QueryFile
}

// CreateLoadbalancerParam is input parameters for the sacloud API
type CreateLoadbalancerParam struct {
	SwitchId          sacloud.ID `json:"switch-id"`
	Vrid              int        `json:"vrid"`
	HighAvailability  bool       `json:"high-availability"`
	Plan              string     `json:"plan"`
	Ipaddress1        string     `json:"ipaddress-1"`
	Ipaddress2        string     `json:"ipaddress-2"`
	NwMaskLen         int        `json:"nw-mask-len"`
	DefaultRoute      string     `json:"default-route"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
}

// NewCreateLoadbalancerParam return new CreateLoadbalancerParam
func NewCreateLoadbalancerParam() *CreateLoadbalancerParam {
	return &CreateLoadbalancerParam{

		Vrid: 1,
		Plan: "standard",
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *CreateLoadbalancerParam) FillValueToSkeleton() {
	if isEmpty(p.SwitchId) {
		p.SwitchId = sacloud.ID(0)
	}
	if isEmpty(p.Vrid) {
		p.Vrid = 0
	}
	if isEmpty(p.HighAvailability) {
		p.HighAvailability = false
	}
	if isEmpty(p.Plan) {
		p.Plan = ""
	}
	if isEmpty(p.Ipaddress1) {
		p.Ipaddress1 = ""
	}
	if isEmpty(p.Ipaddress2) {
		p.Ipaddress2 = ""
	}
	if isEmpty(p.NwMaskLen) {
		p.NwMaskLen = 0
	}
	if isEmpty(p.DefaultRoute) {
		p.DefaultRoute = ""
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *CreateLoadbalancerParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--vrid", p.Vrid)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress-1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["ipaddress2"].ValidateFunc
		errs := validator("--ipaddress-2", p.Ipaddress2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--nw-mask-len", p.NwMaskLen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["nw-mask-len"].ValidateFunc
		errs := validator("--nw-mask-len", p.NwMaskLen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["default-route"].ValidateFunc
		errs := validator("--default-route", p.DefaultRoute)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreateLoadbalancerParam) GetResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *CreateLoadbalancerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreateLoadbalancerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreateLoadbalancerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreateLoadbalancerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreateLoadbalancerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreateLoadbalancerParam) SetSwitchId(v sacloud.ID) {
	p.SwitchId = v
}

func (p *CreateLoadbalancerParam) GetSwitchId() sacloud.ID {
	return p.SwitchId
}
func (p *CreateLoadbalancerParam) SetVrid(v int) {
	p.Vrid = v
}

func (p *CreateLoadbalancerParam) GetVrid() int {
	return p.Vrid
}
func (p *CreateLoadbalancerParam) SetHighAvailability(v bool) {
	p.HighAvailability = v
}

func (p *CreateLoadbalancerParam) GetHighAvailability() bool {
	return p.HighAvailability
}
func (p *CreateLoadbalancerParam) SetPlan(v string) {
	p.Plan = v
}

func (p *CreateLoadbalancerParam) GetPlan() string {
	return p.Plan
}
func (p *CreateLoadbalancerParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *CreateLoadbalancerParam) GetIpaddress1() string {
	return p.Ipaddress1
}
func (p *CreateLoadbalancerParam) SetIpaddress2(v string) {
	p.Ipaddress2 = v
}

func (p *CreateLoadbalancerParam) GetIpaddress2() string {
	return p.Ipaddress2
}
func (p *CreateLoadbalancerParam) SetNwMaskLen(v int) {
	p.NwMaskLen = v
}

func (p *CreateLoadbalancerParam) GetNwMaskLen() int {
	return p.NwMaskLen
}
func (p *CreateLoadbalancerParam) SetDefaultRoute(v string) {
	p.DefaultRoute = v
}

func (p *CreateLoadbalancerParam) GetDefaultRoute() string {
	return p.DefaultRoute
}
func (p *CreateLoadbalancerParam) SetName(v string) {
	p.Name = v
}

func (p *CreateLoadbalancerParam) GetName() string {
	return p.Name
}
func (p *CreateLoadbalancerParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateLoadbalancerParam) GetDescription() string {
	return p.Description
}
func (p *CreateLoadbalancerParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateLoadbalancerParam) GetTags() []string {
	return p.Tags
}
func (p *CreateLoadbalancerParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateLoadbalancerParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateLoadbalancerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateLoadbalancerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateLoadbalancerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateLoadbalancerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateLoadbalancerParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateLoadbalancerParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateLoadbalancerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateLoadbalancerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateLoadbalancerParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateLoadbalancerParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateLoadbalancerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateLoadbalancerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateLoadbalancerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateLoadbalancerParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateLoadbalancerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateLoadbalancerParam) GetColumn() []string {
	return p.Column
}
func (p *CreateLoadbalancerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateLoadbalancerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateLoadbalancerParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateLoadbalancerParam) GetFormat() string {
	return p.Format
}
func (p *CreateLoadbalancerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateLoadbalancerParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateLoadbalancerParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateLoadbalancerParam) GetQuery() string {
	return p.Query
}
func (p *CreateLoadbalancerParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateLoadbalancerParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadLoadbalancerParam is input parameters for the sacloud API
type ReadLoadbalancerParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewReadLoadbalancerParam return new ReadLoadbalancerParam
func NewReadLoadbalancerParam() *ReadLoadbalancerParam {
	return &ReadLoadbalancerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ReadLoadbalancerParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ReadLoadbalancerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadLoadbalancerParam) GetResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ReadLoadbalancerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadLoadbalancerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadLoadbalancerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadLoadbalancerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadLoadbalancerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadLoadbalancerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadLoadbalancerParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadLoadbalancerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadLoadbalancerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadLoadbalancerParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadLoadbalancerParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadLoadbalancerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadLoadbalancerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadLoadbalancerParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadLoadbalancerParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadLoadbalancerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadLoadbalancerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadLoadbalancerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadLoadbalancerParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadLoadbalancerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadLoadbalancerParam) GetColumn() []string {
	return p.Column
}
func (p *ReadLoadbalancerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadLoadbalancerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadLoadbalancerParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadLoadbalancerParam) GetFormat() string {
	return p.Format
}
func (p *ReadLoadbalancerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadLoadbalancerParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadLoadbalancerParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadLoadbalancerParam) GetQuery() string {
	return p.Query
}
func (p *ReadLoadbalancerParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadLoadbalancerParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadLoadbalancerParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadLoadbalancerParam) GetId() sacloud.ID {
	return p.Id
}

// UpdateLoadbalancerParam is input parameters for the sacloud API
type UpdateLoadbalancerParam struct {
	Selector          []string   `json:"selector"`
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewUpdateLoadbalancerParam return new UpdateLoadbalancerParam
func NewUpdateLoadbalancerParam() *UpdateLoadbalancerParam {
	return &UpdateLoadbalancerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UpdateLoadbalancerParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UpdateLoadbalancerParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["LoadBalancer"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdateLoadbalancerParam) GetResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *UpdateLoadbalancerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdateLoadbalancerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdateLoadbalancerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdateLoadbalancerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdateLoadbalancerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdateLoadbalancerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateLoadbalancerParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateLoadbalancerParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateLoadbalancerParam) GetName() string {
	return p.Name
}
func (p *UpdateLoadbalancerParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateLoadbalancerParam) GetDescription() string {
	return p.Description
}
func (p *UpdateLoadbalancerParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateLoadbalancerParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateLoadbalancerParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateLoadbalancerParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateLoadbalancerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateLoadbalancerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateLoadbalancerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateLoadbalancerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateLoadbalancerParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateLoadbalancerParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateLoadbalancerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateLoadbalancerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateLoadbalancerParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateLoadbalancerParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateLoadbalancerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateLoadbalancerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateLoadbalancerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateLoadbalancerParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateLoadbalancerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateLoadbalancerParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateLoadbalancerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateLoadbalancerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateLoadbalancerParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateLoadbalancerParam) GetFormat() string {
	return p.Format
}
func (p *UpdateLoadbalancerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateLoadbalancerParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateLoadbalancerParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateLoadbalancerParam) GetQuery() string {
	return p.Query
}
func (p *UpdateLoadbalancerParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateLoadbalancerParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateLoadbalancerParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateLoadbalancerParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteLoadbalancerParam is input parameters for the sacloud API
type DeleteLoadbalancerParam struct {
	Force             bool       `json:"force"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewDeleteLoadbalancerParam return new DeleteLoadbalancerParam
func NewDeleteLoadbalancerParam() *DeleteLoadbalancerParam {
	return &DeleteLoadbalancerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DeleteLoadbalancerParam) FillValueToSkeleton() {
	if isEmpty(p.Force) {
		p.Force = false
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DeleteLoadbalancerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteLoadbalancerParam) GetResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *DeleteLoadbalancerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteLoadbalancerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteLoadbalancerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteLoadbalancerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteLoadbalancerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteLoadbalancerParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteLoadbalancerParam) GetForce() bool {
	return p.Force
}
func (p *DeleteLoadbalancerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteLoadbalancerParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteLoadbalancerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteLoadbalancerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteLoadbalancerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteLoadbalancerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteLoadbalancerParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteLoadbalancerParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteLoadbalancerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteLoadbalancerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteLoadbalancerParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteLoadbalancerParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteLoadbalancerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteLoadbalancerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteLoadbalancerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteLoadbalancerParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteLoadbalancerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteLoadbalancerParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteLoadbalancerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteLoadbalancerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteLoadbalancerParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteLoadbalancerParam) GetFormat() string {
	return p.Format
}
func (p *DeleteLoadbalancerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteLoadbalancerParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteLoadbalancerParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteLoadbalancerParam) GetQuery() string {
	return p.Query
}
func (p *DeleteLoadbalancerParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteLoadbalancerParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteLoadbalancerParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteLoadbalancerParam) GetId() sacloud.ID {
	return p.Id
}

// BootLoadbalancerParam is input parameters for the sacloud API
type BootLoadbalancerParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewBootLoadbalancerParam return new BootLoadbalancerParam
func NewBootLoadbalancerParam() *BootLoadbalancerParam {
	return &BootLoadbalancerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *BootLoadbalancerParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *BootLoadbalancerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *BootLoadbalancerParam) GetResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *BootLoadbalancerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["boot"]
}

func (p *BootLoadbalancerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *BootLoadbalancerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *BootLoadbalancerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *BootLoadbalancerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *BootLoadbalancerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *BootLoadbalancerParam) GetSelector() []string {
	return p.Selector
}
func (p *BootLoadbalancerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BootLoadbalancerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BootLoadbalancerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BootLoadbalancerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BootLoadbalancerParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *BootLoadbalancerParam) GetParameters() string {
	return p.Parameters
}
func (p *BootLoadbalancerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BootLoadbalancerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BootLoadbalancerParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *BootLoadbalancerParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *BootLoadbalancerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BootLoadbalancerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BootLoadbalancerParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *BootLoadbalancerParam) GetId() sacloud.ID {
	return p.Id
}

// ShutdownLoadbalancerParam is input parameters for the sacloud API
type ShutdownLoadbalancerParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewShutdownLoadbalancerParam return new ShutdownLoadbalancerParam
func NewShutdownLoadbalancerParam() *ShutdownLoadbalancerParam {
	return &ShutdownLoadbalancerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ShutdownLoadbalancerParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ShutdownLoadbalancerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ShutdownLoadbalancerParam) GetResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ShutdownLoadbalancerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["shutdown"]
}

func (p *ShutdownLoadbalancerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ShutdownLoadbalancerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ShutdownLoadbalancerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ShutdownLoadbalancerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ShutdownLoadbalancerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ShutdownLoadbalancerParam) GetSelector() []string {
	return p.Selector
}
func (p *ShutdownLoadbalancerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ShutdownLoadbalancerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ShutdownLoadbalancerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ShutdownLoadbalancerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ShutdownLoadbalancerParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ShutdownLoadbalancerParam) GetParameters() string {
	return p.Parameters
}
func (p *ShutdownLoadbalancerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ShutdownLoadbalancerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ShutdownLoadbalancerParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ShutdownLoadbalancerParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ShutdownLoadbalancerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ShutdownLoadbalancerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ShutdownLoadbalancerParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ShutdownLoadbalancerParam) GetId() sacloud.ID {
	return p.Id
}

// ShutdownForceLoadbalancerParam is input parameters for the sacloud API
type ShutdownForceLoadbalancerParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewShutdownForceLoadbalancerParam return new ShutdownForceLoadbalancerParam
func NewShutdownForceLoadbalancerParam() *ShutdownForceLoadbalancerParam {
	return &ShutdownForceLoadbalancerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ShutdownForceLoadbalancerParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ShutdownForceLoadbalancerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ShutdownForceLoadbalancerParam) GetResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ShutdownForceLoadbalancerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["shutdown-force"]
}

func (p *ShutdownForceLoadbalancerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ShutdownForceLoadbalancerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ShutdownForceLoadbalancerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ShutdownForceLoadbalancerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ShutdownForceLoadbalancerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ShutdownForceLoadbalancerParam) GetSelector() []string {
	return p.Selector
}
func (p *ShutdownForceLoadbalancerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ShutdownForceLoadbalancerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ShutdownForceLoadbalancerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ShutdownForceLoadbalancerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ShutdownForceLoadbalancerParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ShutdownForceLoadbalancerParam) GetParameters() string {
	return p.Parameters
}
func (p *ShutdownForceLoadbalancerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ShutdownForceLoadbalancerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ShutdownForceLoadbalancerParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ShutdownForceLoadbalancerParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ShutdownForceLoadbalancerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ShutdownForceLoadbalancerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ShutdownForceLoadbalancerParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ShutdownForceLoadbalancerParam) GetId() sacloud.ID {
	return p.Id
}

// ResetLoadbalancerParam is input parameters for the sacloud API
type ResetLoadbalancerParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewResetLoadbalancerParam return new ResetLoadbalancerParam
func NewResetLoadbalancerParam() *ResetLoadbalancerParam {
	return &ResetLoadbalancerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ResetLoadbalancerParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ResetLoadbalancerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ResetLoadbalancerParam) GetResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ResetLoadbalancerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["reset"]
}

func (p *ResetLoadbalancerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ResetLoadbalancerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ResetLoadbalancerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ResetLoadbalancerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ResetLoadbalancerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ResetLoadbalancerParam) GetSelector() []string {
	return p.Selector
}
func (p *ResetLoadbalancerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ResetLoadbalancerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ResetLoadbalancerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ResetLoadbalancerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ResetLoadbalancerParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ResetLoadbalancerParam) GetParameters() string {
	return p.Parameters
}
func (p *ResetLoadbalancerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ResetLoadbalancerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ResetLoadbalancerParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ResetLoadbalancerParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ResetLoadbalancerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ResetLoadbalancerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ResetLoadbalancerParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ResetLoadbalancerParam) GetId() sacloud.ID {
	return p.Id
}

// WaitForBootLoadbalancerParam is input parameters for the sacloud API
type WaitForBootLoadbalancerParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewWaitForBootLoadbalancerParam return new WaitForBootLoadbalancerParam
func NewWaitForBootLoadbalancerParam() *WaitForBootLoadbalancerParam {
	return &WaitForBootLoadbalancerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *WaitForBootLoadbalancerParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *WaitForBootLoadbalancerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *WaitForBootLoadbalancerParam) GetResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *WaitForBootLoadbalancerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["wait-for-boot"]
}

func (p *WaitForBootLoadbalancerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *WaitForBootLoadbalancerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *WaitForBootLoadbalancerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *WaitForBootLoadbalancerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *WaitForBootLoadbalancerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *WaitForBootLoadbalancerParam) GetSelector() []string {
	return p.Selector
}
func (p *WaitForBootLoadbalancerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForBootLoadbalancerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForBootLoadbalancerParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *WaitForBootLoadbalancerParam) GetParameters() string {
	return p.Parameters
}
func (p *WaitForBootLoadbalancerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForBootLoadbalancerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForBootLoadbalancerParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *WaitForBootLoadbalancerParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *WaitForBootLoadbalancerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForBootLoadbalancerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForBootLoadbalancerParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *WaitForBootLoadbalancerParam) GetId() sacloud.ID {
	return p.Id
}

// WaitForDownLoadbalancerParam is input parameters for the sacloud API
type WaitForDownLoadbalancerParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewWaitForDownLoadbalancerParam return new WaitForDownLoadbalancerParam
func NewWaitForDownLoadbalancerParam() *WaitForDownLoadbalancerParam {
	return &WaitForDownLoadbalancerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *WaitForDownLoadbalancerParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *WaitForDownLoadbalancerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *WaitForDownLoadbalancerParam) GetResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *WaitForDownLoadbalancerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["wait-for-down"]
}

func (p *WaitForDownLoadbalancerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *WaitForDownLoadbalancerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *WaitForDownLoadbalancerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *WaitForDownLoadbalancerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *WaitForDownLoadbalancerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *WaitForDownLoadbalancerParam) GetSelector() []string {
	return p.Selector
}
func (p *WaitForDownLoadbalancerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForDownLoadbalancerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForDownLoadbalancerParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *WaitForDownLoadbalancerParam) GetParameters() string {
	return p.Parameters
}
func (p *WaitForDownLoadbalancerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForDownLoadbalancerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForDownLoadbalancerParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *WaitForDownLoadbalancerParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *WaitForDownLoadbalancerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForDownLoadbalancerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForDownLoadbalancerParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *WaitForDownLoadbalancerParam) GetId() sacloud.ID {
	return p.Id
}

// VipInfoLoadbalancerParam is input parameters for the sacloud API
type VipInfoLoadbalancerParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewVipInfoLoadbalancerParam return new VipInfoLoadbalancerParam
func NewVipInfoLoadbalancerParam() *VipInfoLoadbalancerParam {
	return &VipInfoLoadbalancerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *VipInfoLoadbalancerParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *VipInfoLoadbalancerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *VipInfoLoadbalancerParam) GetResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *VipInfoLoadbalancerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["vip-info"]
}

func (p *VipInfoLoadbalancerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *VipInfoLoadbalancerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *VipInfoLoadbalancerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *VipInfoLoadbalancerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *VipInfoLoadbalancerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *VipInfoLoadbalancerParam) GetSelector() []string {
	return p.Selector
}
func (p *VipInfoLoadbalancerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *VipInfoLoadbalancerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *VipInfoLoadbalancerParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *VipInfoLoadbalancerParam) GetParameters() string {
	return p.Parameters
}
func (p *VipInfoLoadbalancerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *VipInfoLoadbalancerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *VipInfoLoadbalancerParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *VipInfoLoadbalancerParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *VipInfoLoadbalancerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *VipInfoLoadbalancerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *VipInfoLoadbalancerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *VipInfoLoadbalancerParam) GetOutputType() string {
	return p.OutputType
}
func (p *VipInfoLoadbalancerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *VipInfoLoadbalancerParam) GetColumn() []string {
	return p.Column
}
func (p *VipInfoLoadbalancerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *VipInfoLoadbalancerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *VipInfoLoadbalancerParam) SetFormat(v string) {
	p.Format = v
}

func (p *VipInfoLoadbalancerParam) GetFormat() string {
	return p.Format
}
func (p *VipInfoLoadbalancerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *VipInfoLoadbalancerParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *VipInfoLoadbalancerParam) SetQuery(v string) {
	p.Query = v
}

func (p *VipInfoLoadbalancerParam) GetQuery() string {
	return p.Query
}
func (p *VipInfoLoadbalancerParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *VipInfoLoadbalancerParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *VipInfoLoadbalancerParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *VipInfoLoadbalancerParam) GetId() sacloud.ID {
	return p.Id
}

// VipAddLoadbalancerParam is input parameters for the sacloud API
type VipAddLoadbalancerParam struct {
	Vip               string     `json:"vip"`
	Port              int        `json:"port"`
	DelayLoop         int        `json:"delay-loop"`
	SorryServer       string     `json:"sorry-server"`
	Description       string     `json:"description"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewVipAddLoadbalancerParam return new VipAddLoadbalancerParam
func NewVipAddLoadbalancerParam() *VipAddLoadbalancerParam {
	return &VipAddLoadbalancerParam{

		DelayLoop: 10,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *VipAddLoadbalancerParam) FillValueToSkeleton() {
	if isEmpty(p.Vip) {
		p.Vip = ""
	}
	if isEmpty(p.Port) {
		p.Port = 0
	}
	if isEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if isEmpty(p.SorryServer) {
		p.SorryServer = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *VipAddLoadbalancerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["vip-add"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["vip-add"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["vip-add"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["vip-add"].Params["sorry-server"].ValidateFunc
		errs := validator("--sorry-server", p.SorryServer)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *VipAddLoadbalancerParam) GetResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *VipAddLoadbalancerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["vip-add"]
}

func (p *VipAddLoadbalancerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *VipAddLoadbalancerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *VipAddLoadbalancerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *VipAddLoadbalancerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *VipAddLoadbalancerParam) SetVip(v string) {
	p.Vip = v
}

func (p *VipAddLoadbalancerParam) GetVip() string {
	return p.Vip
}
func (p *VipAddLoadbalancerParam) SetPort(v int) {
	p.Port = v
}

func (p *VipAddLoadbalancerParam) GetPort() int {
	return p.Port
}
func (p *VipAddLoadbalancerParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *VipAddLoadbalancerParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *VipAddLoadbalancerParam) SetSorryServer(v string) {
	p.SorryServer = v
}

func (p *VipAddLoadbalancerParam) GetSorryServer() string {
	return p.SorryServer
}
func (p *VipAddLoadbalancerParam) SetDescription(v string) {
	p.Description = v
}

func (p *VipAddLoadbalancerParam) GetDescription() string {
	return p.Description
}
func (p *VipAddLoadbalancerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *VipAddLoadbalancerParam) GetSelector() []string {
	return p.Selector
}
func (p *VipAddLoadbalancerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *VipAddLoadbalancerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *VipAddLoadbalancerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *VipAddLoadbalancerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *VipAddLoadbalancerParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *VipAddLoadbalancerParam) GetParameters() string {
	return p.Parameters
}
func (p *VipAddLoadbalancerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *VipAddLoadbalancerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *VipAddLoadbalancerParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *VipAddLoadbalancerParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *VipAddLoadbalancerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *VipAddLoadbalancerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *VipAddLoadbalancerParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *VipAddLoadbalancerParam) GetId() sacloud.ID {
	return p.Id
}

// VipUpdateLoadbalancerParam is input parameters for the sacloud API
type VipUpdateLoadbalancerParam struct {
	Index             int        `json:"index"`
	Vip               string     `json:"vip"`
	Port              int        `json:"port"`
	DelayLoop         int        `json:"delay-loop"`
	SorryServer       string     `json:"sorry-server"`
	Description       string     `json:"description"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewVipUpdateLoadbalancerParam return new VipUpdateLoadbalancerParam
func NewVipUpdateLoadbalancerParam() *VipUpdateLoadbalancerParam {
	return &VipUpdateLoadbalancerParam{

		DelayLoop: 10,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *VipUpdateLoadbalancerParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Vip) {
		p.Vip = ""
	}
	if isEmpty(p.Port) {
		p.Port = 0
	}
	if isEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if isEmpty(p.SorryServer) {
		p.SorryServer = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *VipUpdateLoadbalancerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["vip-update"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["vip-update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["vip-update"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["vip-update"].Params["sorry-server"].ValidateFunc
		errs := validator("--sorry-server", p.SorryServer)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *VipUpdateLoadbalancerParam) GetResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *VipUpdateLoadbalancerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["vip-update"]
}

func (p *VipUpdateLoadbalancerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *VipUpdateLoadbalancerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *VipUpdateLoadbalancerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *VipUpdateLoadbalancerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *VipUpdateLoadbalancerParam) SetIndex(v int) {
	p.Index = v
}

func (p *VipUpdateLoadbalancerParam) GetIndex() int {
	return p.Index
}
func (p *VipUpdateLoadbalancerParam) SetVip(v string) {
	p.Vip = v
}

func (p *VipUpdateLoadbalancerParam) GetVip() string {
	return p.Vip
}
func (p *VipUpdateLoadbalancerParam) SetPort(v int) {
	p.Port = v
}

func (p *VipUpdateLoadbalancerParam) GetPort() int {
	return p.Port
}
func (p *VipUpdateLoadbalancerParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *VipUpdateLoadbalancerParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *VipUpdateLoadbalancerParam) SetSorryServer(v string) {
	p.SorryServer = v
}

func (p *VipUpdateLoadbalancerParam) GetSorryServer() string {
	return p.SorryServer
}
func (p *VipUpdateLoadbalancerParam) SetDescription(v string) {
	p.Description = v
}

func (p *VipUpdateLoadbalancerParam) GetDescription() string {
	return p.Description
}
func (p *VipUpdateLoadbalancerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *VipUpdateLoadbalancerParam) GetSelector() []string {
	return p.Selector
}
func (p *VipUpdateLoadbalancerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *VipUpdateLoadbalancerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *VipUpdateLoadbalancerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *VipUpdateLoadbalancerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *VipUpdateLoadbalancerParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *VipUpdateLoadbalancerParam) GetParameters() string {
	return p.Parameters
}
func (p *VipUpdateLoadbalancerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *VipUpdateLoadbalancerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *VipUpdateLoadbalancerParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *VipUpdateLoadbalancerParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *VipUpdateLoadbalancerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *VipUpdateLoadbalancerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *VipUpdateLoadbalancerParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *VipUpdateLoadbalancerParam) GetId() sacloud.ID {
	return p.Id
}

// VipDeleteLoadbalancerParam is input parameters for the sacloud API
type VipDeleteLoadbalancerParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewVipDeleteLoadbalancerParam return new VipDeleteLoadbalancerParam
func NewVipDeleteLoadbalancerParam() *VipDeleteLoadbalancerParam {
	return &VipDeleteLoadbalancerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *VipDeleteLoadbalancerParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *VipDeleteLoadbalancerParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *VipDeleteLoadbalancerParam) GetResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *VipDeleteLoadbalancerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["vip-delete"]
}

func (p *VipDeleteLoadbalancerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *VipDeleteLoadbalancerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *VipDeleteLoadbalancerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *VipDeleteLoadbalancerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *VipDeleteLoadbalancerParam) SetIndex(v int) {
	p.Index = v
}

func (p *VipDeleteLoadbalancerParam) GetIndex() int {
	return p.Index
}
func (p *VipDeleteLoadbalancerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *VipDeleteLoadbalancerParam) GetSelector() []string {
	return p.Selector
}
func (p *VipDeleteLoadbalancerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *VipDeleteLoadbalancerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *VipDeleteLoadbalancerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *VipDeleteLoadbalancerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *VipDeleteLoadbalancerParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *VipDeleteLoadbalancerParam) GetParameters() string {
	return p.Parameters
}
func (p *VipDeleteLoadbalancerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *VipDeleteLoadbalancerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *VipDeleteLoadbalancerParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *VipDeleteLoadbalancerParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *VipDeleteLoadbalancerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *VipDeleteLoadbalancerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *VipDeleteLoadbalancerParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *VipDeleteLoadbalancerParam) GetId() sacloud.ID {
	return p.Id
}

// ServerInfoLoadbalancerParam is input parameters for the sacloud API
type ServerInfoLoadbalancerParam struct {
	VipIndex          int        `json:"vip-index"`
	Vip               string     `json:"vip"`
	Port              int        `json:"port"`
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewServerInfoLoadbalancerParam return new ServerInfoLoadbalancerParam
func NewServerInfoLoadbalancerParam() *ServerInfoLoadbalancerParam {
	return &ServerInfoLoadbalancerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ServerInfoLoadbalancerParam) FillValueToSkeleton() {
	if isEmpty(p.VipIndex) {
		p.VipIndex = 0
	}
	if isEmpty(p.Vip) {
		p.Vip = ""
	}
	if isEmpty(p.Port) {
		p.Port = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ServerInfoLoadbalancerParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--vip-index", p.VipIndex, map[string]interface{}{

			"--port": p.Port,
			"--vip":  p.Vip,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["server-info"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--vip", p.Vip, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["server-info"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--port", p.Port, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ServerInfoLoadbalancerParam) GetResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ServerInfoLoadbalancerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["server-info"]
}

func (p *ServerInfoLoadbalancerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ServerInfoLoadbalancerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ServerInfoLoadbalancerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ServerInfoLoadbalancerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ServerInfoLoadbalancerParam) SetVipIndex(v int) {
	p.VipIndex = v
}

func (p *ServerInfoLoadbalancerParam) GetVipIndex() int {
	return p.VipIndex
}
func (p *ServerInfoLoadbalancerParam) SetVip(v string) {
	p.Vip = v
}

func (p *ServerInfoLoadbalancerParam) GetVip() string {
	return p.Vip
}
func (p *ServerInfoLoadbalancerParam) SetPort(v int) {
	p.Port = v
}

func (p *ServerInfoLoadbalancerParam) GetPort() int {
	return p.Port
}
func (p *ServerInfoLoadbalancerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerInfoLoadbalancerParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerInfoLoadbalancerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerInfoLoadbalancerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerInfoLoadbalancerParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerInfoLoadbalancerParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerInfoLoadbalancerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerInfoLoadbalancerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerInfoLoadbalancerParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerInfoLoadbalancerParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerInfoLoadbalancerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerInfoLoadbalancerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerInfoLoadbalancerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerInfoLoadbalancerParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerInfoLoadbalancerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerInfoLoadbalancerParam) GetColumn() []string {
	return p.Column
}
func (p *ServerInfoLoadbalancerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerInfoLoadbalancerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerInfoLoadbalancerParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerInfoLoadbalancerParam) GetFormat() string {
	return p.Format
}
func (p *ServerInfoLoadbalancerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerInfoLoadbalancerParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerInfoLoadbalancerParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerInfoLoadbalancerParam) GetQuery() string {
	return p.Query
}
func (p *ServerInfoLoadbalancerParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerInfoLoadbalancerParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerInfoLoadbalancerParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerInfoLoadbalancerParam) GetId() sacloud.ID {
	return p.Id
}

// ServerAddLoadbalancerParam is input parameters for the sacloud API
type ServerAddLoadbalancerParam struct {
	VipIndex          int        `json:"vip-index"`
	Vip               string     `json:"vip"`
	Port              int        `json:"port"`
	Ipaddress         string     `json:"ipaddress"`
	Protocol          string     `json:"protocol"`
	Path              string     `json:"path"`
	ResponseCode      int        `json:"response-code"`
	Disabled          bool       `json:"disabled"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewServerAddLoadbalancerParam return new ServerAddLoadbalancerParam
func NewServerAddLoadbalancerParam() *ServerAddLoadbalancerParam {
	return &ServerAddLoadbalancerParam{

		Protocol: "ping",
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *ServerAddLoadbalancerParam) FillValueToSkeleton() {
	if isEmpty(p.VipIndex) {
		p.VipIndex = 0
	}
	if isEmpty(p.Vip) {
		p.Vip = ""
	}
	if isEmpty(p.Port) {
		p.Port = 0
	}
	if isEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if isEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if isEmpty(p.Path) {
		p.Path = ""
	}
	if isEmpty(p.ResponseCode) {
		p.ResponseCode = 0
	}
	if isEmpty(p.Disabled) {
		p.Disabled = false
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ServerAddLoadbalancerParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--vip-index", p.VipIndex, map[string]interface{}{

			"--port": p.Port,
			"--vip":  p.Vip,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["server-add"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--vip", p.Vip, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["server-add"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--port", p.Port, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["server-add"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["server-add"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ServerAddLoadbalancerParam) GetResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ServerAddLoadbalancerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["server-add"]
}

func (p *ServerAddLoadbalancerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ServerAddLoadbalancerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ServerAddLoadbalancerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ServerAddLoadbalancerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ServerAddLoadbalancerParam) SetVipIndex(v int) {
	p.VipIndex = v
}

func (p *ServerAddLoadbalancerParam) GetVipIndex() int {
	return p.VipIndex
}
func (p *ServerAddLoadbalancerParam) SetVip(v string) {
	p.Vip = v
}

func (p *ServerAddLoadbalancerParam) GetVip() string {
	return p.Vip
}
func (p *ServerAddLoadbalancerParam) SetPort(v int) {
	p.Port = v
}

func (p *ServerAddLoadbalancerParam) GetPort() int {
	return p.Port
}
func (p *ServerAddLoadbalancerParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerAddLoadbalancerParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerAddLoadbalancerParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *ServerAddLoadbalancerParam) GetProtocol() string {
	return p.Protocol
}
func (p *ServerAddLoadbalancerParam) SetPath(v string) {
	p.Path = v
}

func (p *ServerAddLoadbalancerParam) GetPath() string {
	return p.Path
}
func (p *ServerAddLoadbalancerParam) SetResponseCode(v int) {
	p.ResponseCode = v
}

func (p *ServerAddLoadbalancerParam) GetResponseCode() int {
	return p.ResponseCode
}
func (p *ServerAddLoadbalancerParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *ServerAddLoadbalancerParam) GetDisabled() bool {
	return p.Disabled
}
func (p *ServerAddLoadbalancerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerAddLoadbalancerParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerAddLoadbalancerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerAddLoadbalancerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerAddLoadbalancerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerAddLoadbalancerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerAddLoadbalancerParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerAddLoadbalancerParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerAddLoadbalancerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerAddLoadbalancerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerAddLoadbalancerParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerAddLoadbalancerParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerAddLoadbalancerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerAddLoadbalancerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerAddLoadbalancerParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerAddLoadbalancerParam) GetId() sacloud.ID {
	return p.Id
}

// ServerUpdateLoadbalancerParam is input parameters for the sacloud API
type ServerUpdateLoadbalancerParam struct {
	VipIndex          int        `json:"vip-index"`
	Vip               string     `json:"vip"`
	Port              int        `json:"port"`
	Ipaddress         string     `json:"ipaddress"`
	Protocol          string     `json:"protocol"`
	Path              string     `json:"path"`
	ResponseCode      int        `json:"response-code"`
	Disabled          bool       `json:"disabled"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewServerUpdateLoadbalancerParam return new ServerUpdateLoadbalancerParam
func NewServerUpdateLoadbalancerParam() *ServerUpdateLoadbalancerParam {
	return &ServerUpdateLoadbalancerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ServerUpdateLoadbalancerParam) FillValueToSkeleton() {
	if isEmpty(p.VipIndex) {
		p.VipIndex = 0
	}
	if isEmpty(p.Vip) {
		p.Vip = ""
	}
	if isEmpty(p.Port) {
		p.Port = 0
	}
	if isEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if isEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if isEmpty(p.Path) {
		p.Path = ""
	}
	if isEmpty(p.ResponseCode) {
		p.ResponseCode = 0
	}
	if isEmpty(p.Disabled) {
		p.Disabled = false
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ServerUpdateLoadbalancerParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--vip-index", p.VipIndex, map[string]interface{}{

			"--port": p.Port,
			"--vip":  p.Vip,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["server-update"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--vip", p.Vip, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["server-update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--port", p.Port, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["server-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["server-update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ServerUpdateLoadbalancerParam) GetResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ServerUpdateLoadbalancerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["server-update"]
}

func (p *ServerUpdateLoadbalancerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ServerUpdateLoadbalancerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ServerUpdateLoadbalancerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ServerUpdateLoadbalancerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ServerUpdateLoadbalancerParam) SetVipIndex(v int) {
	p.VipIndex = v
}

func (p *ServerUpdateLoadbalancerParam) GetVipIndex() int {
	return p.VipIndex
}
func (p *ServerUpdateLoadbalancerParam) SetVip(v string) {
	p.Vip = v
}

func (p *ServerUpdateLoadbalancerParam) GetVip() string {
	return p.Vip
}
func (p *ServerUpdateLoadbalancerParam) SetPort(v int) {
	p.Port = v
}

func (p *ServerUpdateLoadbalancerParam) GetPort() int {
	return p.Port
}
func (p *ServerUpdateLoadbalancerParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerUpdateLoadbalancerParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerUpdateLoadbalancerParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *ServerUpdateLoadbalancerParam) GetProtocol() string {
	return p.Protocol
}
func (p *ServerUpdateLoadbalancerParam) SetPath(v string) {
	p.Path = v
}

func (p *ServerUpdateLoadbalancerParam) GetPath() string {
	return p.Path
}
func (p *ServerUpdateLoadbalancerParam) SetResponseCode(v int) {
	p.ResponseCode = v
}

func (p *ServerUpdateLoadbalancerParam) GetResponseCode() int {
	return p.ResponseCode
}
func (p *ServerUpdateLoadbalancerParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *ServerUpdateLoadbalancerParam) GetDisabled() bool {
	return p.Disabled
}
func (p *ServerUpdateLoadbalancerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerUpdateLoadbalancerParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerUpdateLoadbalancerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerUpdateLoadbalancerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerUpdateLoadbalancerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerUpdateLoadbalancerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerUpdateLoadbalancerParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerUpdateLoadbalancerParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerUpdateLoadbalancerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerUpdateLoadbalancerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerUpdateLoadbalancerParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerUpdateLoadbalancerParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerUpdateLoadbalancerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerUpdateLoadbalancerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerUpdateLoadbalancerParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerUpdateLoadbalancerParam) GetId() sacloud.ID {
	return p.Id
}

// ServerDeleteLoadbalancerParam is input parameters for the sacloud API
type ServerDeleteLoadbalancerParam struct {
	VipIndex          int        `json:"vip-index"`
	Vip               string     `json:"vip"`
	Port              int        `json:"port"`
	Ipaddress         string     `json:"ipaddress"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewServerDeleteLoadbalancerParam return new ServerDeleteLoadbalancerParam
func NewServerDeleteLoadbalancerParam() *ServerDeleteLoadbalancerParam {
	return &ServerDeleteLoadbalancerParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ServerDeleteLoadbalancerParam) FillValueToSkeleton() {
	if isEmpty(p.VipIndex) {
		p.VipIndex = 0
	}
	if isEmpty(p.Vip) {
		p.Vip = ""
	}
	if isEmpty(p.Port) {
		p.Port = 0
	}
	if isEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ServerDeleteLoadbalancerParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--vip-index", p.VipIndex, map[string]interface{}{

			"--port": p.Port,
			"--vip":  p.Vip,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["server-delete"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--vip", p.Vip, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["server-delete"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--port", p.Port, map[string]interface{}{

			"--vip-index": p.VipIndex,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["server-delete"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ServerDeleteLoadbalancerParam) GetResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *ServerDeleteLoadbalancerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["server-delete"]
}

func (p *ServerDeleteLoadbalancerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ServerDeleteLoadbalancerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ServerDeleteLoadbalancerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ServerDeleteLoadbalancerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ServerDeleteLoadbalancerParam) SetVipIndex(v int) {
	p.VipIndex = v
}

func (p *ServerDeleteLoadbalancerParam) GetVipIndex() int {
	return p.VipIndex
}
func (p *ServerDeleteLoadbalancerParam) SetVip(v string) {
	p.Vip = v
}

func (p *ServerDeleteLoadbalancerParam) GetVip() string {
	return p.Vip
}
func (p *ServerDeleteLoadbalancerParam) SetPort(v int) {
	p.Port = v
}

func (p *ServerDeleteLoadbalancerParam) GetPort() int {
	return p.Port
}
func (p *ServerDeleteLoadbalancerParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerDeleteLoadbalancerParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerDeleteLoadbalancerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerDeleteLoadbalancerParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerDeleteLoadbalancerParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerDeleteLoadbalancerParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerDeleteLoadbalancerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerDeleteLoadbalancerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerDeleteLoadbalancerParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerDeleteLoadbalancerParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerDeleteLoadbalancerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerDeleteLoadbalancerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerDeleteLoadbalancerParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerDeleteLoadbalancerParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerDeleteLoadbalancerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerDeleteLoadbalancerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerDeleteLoadbalancerParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerDeleteLoadbalancerParam) GetId() sacloud.ID {
	return p.Id
}

// MonitorLoadbalancerParam is input parameters for the sacloud API
type MonitorLoadbalancerParam struct {
	Start             string     `json:"start"`
	End               string     `json:"end"`
	KeyFormat         string     `json:"key-format"`
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewMonitorLoadbalancerParam return new MonitorLoadbalancerParam
func NewMonitorLoadbalancerParam() *MonitorLoadbalancerParam {
	return &MonitorLoadbalancerParam{

		KeyFormat: "sakuracloud.loadbalancer.{{.ID}}.nic",
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *MonitorLoadbalancerParam) FillValueToSkeleton() {
	if isEmpty(p.Start) {
		p.Start = ""
	}
	if isEmpty(p.End) {
		p.End = ""
	}
	if isEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *MonitorLoadbalancerParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["LoadBalancer"].Commands["monitor"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["LoadBalancer"].Commands["monitor"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *MonitorLoadbalancerParam) GetResourceDef() *schema.Resource {
	return define.Resources["LoadBalancer"]
}

func (p *MonitorLoadbalancerParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["monitor"]
}

func (p *MonitorLoadbalancerParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *MonitorLoadbalancerParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *MonitorLoadbalancerParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *MonitorLoadbalancerParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *MonitorLoadbalancerParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorLoadbalancerParam) GetStart() string {
	return p.Start
}
func (p *MonitorLoadbalancerParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorLoadbalancerParam) GetEnd() string {
	return p.End
}
func (p *MonitorLoadbalancerParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorLoadbalancerParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorLoadbalancerParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *MonitorLoadbalancerParam) GetSelector() []string {
	return p.Selector
}
func (p *MonitorLoadbalancerParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *MonitorLoadbalancerParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *MonitorLoadbalancerParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *MonitorLoadbalancerParam) GetParameters() string {
	return p.Parameters
}
func (p *MonitorLoadbalancerParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *MonitorLoadbalancerParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *MonitorLoadbalancerParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *MonitorLoadbalancerParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *MonitorLoadbalancerParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *MonitorLoadbalancerParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *MonitorLoadbalancerParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *MonitorLoadbalancerParam) GetOutputType() string {
	return p.OutputType
}
func (p *MonitorLoadbalancerParam) SetColumn(v []string) {
	p.Column = v
}

func (p *MonitorLoadbalancerParam) GetColumn() []string {
	return p.Column
}
func (p *MonitorLoadbalancerParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *MonitorLoadbalancerParam) GetQuiet() bool {
	return p.Quiet
}
func (p *MonitorLoadbalancerParam) SetFormat(v string) {
	p.Format = v
}

func (p *MonitorLoadbalancerParam) GetFormat() string {
	return p.Format
}
func (p *MonitorLoadbalancerParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *MonitorLoadbalancerParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *MonitorLoadbalancerParam) SetQuery(v string) {
	p.Query = v
}

func (p *MonitorLoadbalancerParam) GetQuery() string {
	return p.Query
}
func (p *MonitorLoadbalancerParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *MonitorLoadbalancerParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *MonitorLoadbalancerParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *MonitorLoadbalancerParam) GetId() sacloud.ID {
	return p.Id
}

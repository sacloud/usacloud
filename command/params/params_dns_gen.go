// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListDNSParam is input parameters for the sacloud API
type ListDNSParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Tags              []string     `json:"tags"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`
}

// NewListDNSParam return new ListDNSParam
func NewListDNSParam() *ListDNSParam {
	return &ListDNSParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ListDNSParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = []string{""}
	}
	if isEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.From) {
		p.From = 0
	}
	if isEmpty(p.Max) {
		p.Max = 0
	}
	if isEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *ListDNSParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListDNSParam) GetResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *ListDNSParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListDNSParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListDNSParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListDNSParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListDNSParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListDNSParam) SetName(v []string) {
	p.Name = v
}

func (p *ListDNSParam) GetName() []string {
	return p.Name
}
func (p *ListDNSParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListDNSParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListDNSParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListDNSParam) GetTags() []string {
	return p.Tags
}
func (p *ListDNSParam) SetFrom(v int) {
	p.From = v
}

func (p *ListDNSParam) GetFrom() int {
	return p.From
}
func (p *ListDNSParam) SetMax(v int) {
	p.Max = v
}

func (p *ListDNSParam) GetMax() int {
	return p.Max
}
func (p *ListDNSParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListDNSParam) GetSort() []string {
	return p.Sort
}
func (p *ListDNSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListDNSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListDNSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListDNSParam) GetParameters() string {
	return p.Parameters
}
func (p *ListDNSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListDNSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListDNSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListDNSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListDNSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListDNSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListDNSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListDNSParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListDNSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListDNSParam) GetColumn() []string {
	return p.Column
}
func (p *ListDNSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListDNSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListDNSParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListDNSParam) GetFormat() string {
	return p.Format
}
func (p *ListDNSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListDNSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListDNSParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListDNSParam) GetQuery() string {
	return p.Query
}
func (p *ListDNSParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListDNSParam) GetQueryFile() string {
	return p.QueryFile
}

// RecordInfoDNSParam is input parameters for the sacloud API
type RecordInfoDNSParam struct {
	Name              string     `json:"name"`
	Type              string     `json:"type"`
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewRecordInfoDNSParam return new RecordInfoDNSParam
func NewRecordInfoDNSParam() *RecordInfoDNSParam {
	return &RecordInfoDNSParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *RecordInfoDNSParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Type) {
		p.Type = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *RecordInfoDNSParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["DNS"].Commands["record-info"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-info"].Params["type"].ValidateFunc
		errs := validator("--type", p.Type)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *RecordInfoDNSParam) GetResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *RecordInfoDNSParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["record-info"]
}

func (p *RecordInfoDNSParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *RecordInfoDNSParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *RecordInfoDNSParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *RecordInfoDNSParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *RecordInfoDNSParam) SetName(v string) {
	p.Name = v
}

func (p *RecordInfoDNSParam) GetName() string {
	return p.Name
}
func (p *RecordInfoDNSParam) SetType(v string) {
	p.Type = v
}

func (p *RecordInfoDNSParam) GetType() string {
	return p.Type
}
func (p *RecordInfoDNSParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *RecordInfoDNSParam) GetSelector() []string {
	return p.Selector
}
func (p *RecordInfoDNSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *RecordInfoDNSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *RecordInfoDNSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *RecordInfoDNSParam) GetParameters() string {
	return p.Parameters
}
func (p *RecordInfoDNSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *RecordInfoDNSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *RecordInfoDNSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *RecordInfoDNSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *RecordInfoDNSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *RecordInfoDNSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *RecordInfoDNSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *RecordInfoDNSParam) GetOutputType() string {
	return p.OutputType
}
func (p *RecordInfoDNSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *RecordInfoDNSParam) GetColumn() []string {
	return p.Column
}
func (p *RecordInfoDNSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *RecordInfoDNSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *RecordInfoDNSParam) SetFormat(v string) {
	p.Format = v
}

func (p *RecordInfoDNSParam) GetFormat() string {
	return p.Format
}
func (p *RecordInfoDNSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *RecordInfoDNSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *RecordInfoDNSParam) SetQuery(v string) {
	p.Query = v
}

func (p *RecordInfoDNSParam) GetQuery() string {
	return p.Query
}
func (p *RecordInfoDNSParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *RecordInfoDNSParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *RecordInfoDNSParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *RecordInfoDNSParam) GetId() sacloud.ID {
	return p.Id
}

// RecordBulkUpdateDNSParam is input parameters for the sacloud API
type RecordBulkUpdateDNSParam struct {
	File              string     `json:"file"`
	Mode              string     `json:"mode"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewRecordBulkUpdateDNSParam return new RecordBulkUpdateDNSParam
func NewRecordBulkUpdateDNSParam() *RecordBulkUpdateDNSParam {
	return &RecordBulkUpdateDNSParam{

		Mode: "upsert-only",
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *RecordBulkUpdateDNSParam) FillValueToSkeleton() {
	if isEmpty(p.File) {
		p.File = ""
	}
	if isEmpty(p.Mode) {
		p.Mode = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *RecordBulkUpdateDNSParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--file", p.File)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-bulk-update"].Params["file"].ValidateFunc
		errs := validator("--file", p.File)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--mode", p.Mode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-bulk-update"].Params["mode"].ValidateFunc
		errs := validator("--mode", p.Mode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *RecordBulkUpdateDNSParam) GetResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *RecordBulkUpdateDNSParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["record-bulk-update"]
}

func (p *RecordBulkUpdateDNSParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *RecordBulkUpdateDNSParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *RecordBulkUpdateDNSParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *RecordBulkUpdateDNSParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *RecordBulkUpdateDNSParam) SetFile(v string) {
	p.File = v
}

func (p *RecordBulkUpdateDNSParam) GetFile() string {
	return p.File
}
func (p *RecordBulkUpdateDNSParam) SetMode(v string) {
	p.Mode = v
}

func (p *RecordBulkUpdateDNSParam) GetMode() string {
	return p.Mode
}
func (p *RecordBulkUpdateDNSParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *RecordBulkUpdateDNSParam) GetSelector() []string {
	return p.Selector
}
func (p *RecordBulkUpdateDNSParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *RecordBulkUpdateDNSParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *RecordBulkUpdateDNSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *RecordBulkUpdateDNSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *RecordBulkUpdateDNSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *RecordBulkUpdateDNSParam) GetParameters() string {
	return p.Parameters
}
func (p *RecordBulkUpdateDNSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *RecordBulkUpdateDNSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *RecordBulkUpdateDNSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *RecordBulkUpdateDNSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *RecordBulkUpdateDNSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *RecordBulkUpdateDNSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *RecordBulkUpdateDNSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *RecordBulkUpdateDNSParam) GetOutputType() string {
	return p.OutputType
}
func (p *RecordBulkUpdateDNSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *RecordBulkUpdateDNSParam) GetColumn() []string {
	return p.Column
}
func (p *RecordBulkUpdateDNSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *RecordBulkUpdateDNSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *RecordBulkUpdateDNSParam) SetFormat(v string) {
	p.Format = v
}

func (p *RecordBulkUpdateDNSParam) GetFormat() string {
	return p.Format
}
func (p *RecordBulkUpdateDNSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *RecordBulkUpdateDNSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *RecordBulkUpdateDNSParam) SetQuery(v string) {
	p.Query = v
}

func (p *RecordBulkUpdateDNSParam) GetQuery() string {
	return p.Query
}
func (p *RecordBulkUpdateDNSParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *RecordBulkUpdateDNSParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *RecordBulkUpdateDNSParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *RecordBulkUpdateDNSParam) GetId() sacloud.ID {
	return p.Id
}

// CreateDNSParam is input parameters for the sacloud API
type CreateDNSParam struct {
	Name              string     `json:"name"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
}

// NewCreateDNSParam return new CreateDNSParam
func NewCreateDNSParam() *CreateDNSParam {
	return &CreateDNSParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *CreateDNSParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *CreateDNSParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreateDNSParam) GetResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *CreateDNSParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreateDNSParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreateDNSParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreateDNSParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreateDNSParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreateDNSParam) SetName(v string) {
	p.Name = v
}

func (p *CreateDNSParam) GetName() string {
	return p.Name
}
func (p *CreateDNSParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateDNSParam) GetDescription() string {
	return p.Description
}
func (p *CreateDNSParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateDNSParam) GetTags() []string {
	return p.Tags
}
func (p *CreateDNSParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateDNSParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateDNSParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateDNSParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateDNSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateDNSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateDNSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateDNSParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateDNSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateDNSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateDNSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateDNSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateDNSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateDNSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateDNSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateDNSParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateDNSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateDNSParam) GetColumn() []string {
	return p.Column
}
func (p *CreateDNSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateDNSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateDNSParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateDNSParam) GetFormat() string {
	return p.Format
}
func (p *CreateDNSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateDNSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateDNSParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateDNSParam) GetQuery() string {
	return p.Query
}
func (p *CreateDNSParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateDNSParam) GetQueryFile() string {
	return p.QueryFile
}

// RecordAddDNSParam is input parameters for the sacloud API
type RecordAddDNSParam struct {
	Name              string     `json:"name"`
	Type              string     `json:"type"`
	Value             string     `json:"value"`
	Ttl               int        `json:"ttl"`
	MxPriority        int        `json:"mx-priority"`
	SrvPriority       int        `json:"srv-priority"`
	SrvWeight         int        `json:"srv-weight"`
	SrvPort           int        `json:"srv-port"`
	SrvTarget         string     `json:"srv-target"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewRecordAddDNSParam return new RecordAddDNSParam
func NewRecordAddDNSParam() *RecordAddDNSParam {
	return &RecordAddDNSParam{

		Ttl:        3600,
		MxPriority: 10,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *RecordAddDNSParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Type) {
		p.Type = ""
	}
	if isEmpty(p.Value) {
		p.Value = ""
	}
	if isEmpty(p.Ttl) {
		p.Ttl = 0
	}
	if isEmpty(p.MxPriority) {
		p.MxPriority = 0
	}
	if isEmpty(p.SrvPriority) {
		p.SrvPriority = 0
	}
	if isEmpty(p.SrvWeight) {
		p.SrvWeight = 0
	}
	if isEmpty(p.SrvPort) {
		p.SrvPort = 0
	}
	if isEmpty(p.SrvTarget) {
		p.SrvTarget = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *RecordAddDNSParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--type", p.Type)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["type"].ValidateFunc
		errs := validator("--type", p.Type)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["ttl"].ValidateFunc
		errs := validator("--ttl", p.Ttl)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["mx-priority"].ValidateFunc
		errs := validator("--mx-priority", p.MxPriority)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["srv-priority"].ValidateFunc
		errs := validator("--srv-priority", p.SrvPriority)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["srv-weight"].ValidateFunc
		errs := validator("--srv-weight", p.SrvWeight)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["srv-port"].ValidateFunc
		errs := validator("--srv-port", p.SrvPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["srv-target"].ValidateFunc
		errs := validator("--srv-target", p.SrvTarget)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *RecordAddDNSParam) GetResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *RecordAddDNSParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["record-add"]
}

func (p *RecordAddDNSParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *RecordAddDNSParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *RecordAddDNSParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *RecordAddDNSParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *RecordAddDNSParam) SetName(v string) {
	p.Name = v
}

func (p *RecordAddDNSParam) GetName() string {
	return p.Name
}
func (p *RecordAddDNSParam) SetType(v string) {
	p.Type = v
}

func (p *RecordAddDNSParam) GetType() string {
	return p.Type
}
func (p *RecordAddDNSParam) SetValue(v string) {
	p.Value = v
}

func (p *RecordAddDNSParam) GetValue() string {
	return p.Value
}
func (p *RecordAddDNSParam) SetTtl(v int) {
	p.Ttl = v
}

func (p *RecordAddDNSParam) GetTtl() int {
	return p.Ttl
}
func (p *RecordAddDNSParam) SetMxPriority(v int) {
	p.MxPriority = v
}

func (p *RecordAddDNSParam) GetMxPriority() int {
	return p.MxPriority
}
func (p *RecordAddDNSParam) SetSrvPriority(v int) {
	p.SrvPriority = v
}

func (p *RecordAddDNSParam) GetSrvPriority() int {
	return p.SrvPriority
}
func (p *RecordAddDNSParam) SetSrvWeight(v int) {
	p.SrvWeight = v
}

func (p *RecordAddDNSParam) GetSrvWeight() int {
	return p.SrvWeight
}
func (p *RecordAddDNSParam) SetSrvPort(v int) {
	p.SrvPort = v
}

func (p *RecordAddDNSParam) GetSrvPort() int {
	return p.SrvPort
}
func (p *RecordAddDNSParam) SetSrvTarget(v string) {
	p.SrvTarget = v
}

func (p *RecordAddDNSParam) GetSrvTarget() string {
	return p.SrvTarget
}
func (p *RecordAddDNSParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *RecordAddDNSParam) GetSelector() []string {
	return p.Selector
}
func (p *RecordAddDNSParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *RecordAddDNSParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *RecordAddDNSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *RecordAddDNSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *RecordAddDNSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *RecordAddDNSParam) GetParameters() string {
	return p.Parameters
}
func (p *RecordAddDNSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *RecordAddDNSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *RecordAddDNSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *RecordAddDNSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *RecordAddDNSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *RecordAddDNSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *RecordAddDNSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *RecordAddDNSParam) GetOutputType() string {
	return p.OutputType
}
func (p *RecordAddDNSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *RecordAddDNSParam) GetColumn() []string {
	return p.Column
}
func (p *RecordAddDNSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *RecordAddDNSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *RecordAddDNSParam) SetFormat(v string) {
	p.Format = v
}

func (p *RecordAddDNSParam) GetFormat() string {
	return p.Format
}
func (p *RecordAddDNSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *RecordAddDNSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *RecordAddDNSParam) SetQuery(v string) {
	p.Query = v
}

func (p *RecordAddDNSParam) GetQuery() string {
	return p.Query
}
func (p *RecordAddDNSParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *RecordAddDNSParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *RecordAddDNSParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *RecordAddDNSParam) GetId() sacloud.ID {
	return p.Id
}

// ReadDNSParam is input parameters for the sacloud API
type ReadDNSParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewReadDNSParam return new ReadDNSParam
func NewReadDNSParam() *ReadDNSParam {
	return &ReadDNSParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ReadDNSParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ReadDNSParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadDNSParam) GetResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *ReadDNSParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadDNSParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadDNSParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadDNSParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadDNSParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadDNSParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadDNSParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadDNSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadDNSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadDNSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadDNSParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadDNSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadDNSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadDNSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadDNSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadDNSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadDNSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadDNSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadDNSParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadDNSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadDNSParam) GetColumn() []string {
	return p.Column
}
func (p *ReadDNSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadDNSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadDNSParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadDNSParam) GetFormat() string {
	return p.Format
}
func (p *ReadDNSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadDNSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadDNSParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadDNSParam) GetQuery() string {
	return p.Query
}
func (p *ReadDNSParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadDNSParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadDNSParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadDNSParam) GetId() sacloud.ID {
	return p.Id
}

// RecordUpdateDNSParam is input parameters for the sacloud API
type RecordUpdateDNSParam struct {
	Index             int        `json:"index"`
	Name              string     `json:"name"`
	Type              string     `json:"type"`
	Value             string     `json:"value"`
	Ttl               int        `json:"ttl"`
	MxPriority        int        `json:"mx-priority"`
	SrvPriority       int        `json:"srv-priority"`
	SrvWeight         int        `json:"srv-weight"`
	SrvPort           int        `json:"srv-port"`
	SrvTarget         string     `json:"srv-target"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewRecordUpdateDNSParam return new RecordUpdateDNSParam
func NewRecordUpdateDNSParam() *RecordUpdateDNSParam {
	return &RecordUpdateDNSParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *RecordUpdateDNSParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Type) {
		p.Type = ""
	}
	if isEmpty(p.Value) {
		p.Value = ""
	}
	if isEmpty(p.Ttl) {
		p.Ttl = 0
	}
	if isEmpty(p.MxPriority) {
		p.MxPriority = 0
	}
	if isEmpty(p.SrvPriority) {
		p.SrvPriority = 0
	}
	if isEmpty(p.SrvWeight) {
		p.SrvWeight = 0
	}
	if isEmpty(p.SrvPort) {
		p.SrvPort = 0
	}
	if isEmpty(p.SrvTarget) {
		p.SrvTarget = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *RecordUpdateDNSParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["type"].ValidateFunc
		errs := validator("--type", p.Type)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["ttl"].ValidateFunc
		errs := validator("--ttl", p.Ttl)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["mx-priority"].ValidateFunc
		errs := validator("--mx-priority", p.MxPriority)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["srv-priority"].ValidateFunc
		errs := validator("--srv-priority", p.SrvPriority)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["srv-weight"].ValidateFunc
		errs := validator("--srv-weight", p.SrvWeight)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["srv-port"].ValidateFunc
		errs := validator("--srv-port", p.SrvPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["srv-target"].ValidateFunc
		errs := validator("--srv-target", p.SrvTarget)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *RecordUpdateDNSParam) GetResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *RecordUpdateDNSParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["record-update"]
}

func (p *RecordUpdateDNSParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *RecordUpdateDNSParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *RecordUpdateDNSParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *RecordUpdateDNSParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *RecordUpdateDNSParam) SetIndex(v int) {
	p.Index = v
}

func (p *RecordUpdateDNSParam) GetIndex() int {
	return p.Index
}
func (p *RecordUpdateDNSParam) SetName(v string) {
	p.Name = v
}

func (p *RecordUpdateDNSParam) GetName() string {
	return p.Name
}
func (p *RecordUpdateDNSParam) SetType(v string) {
	p.Type = v
}

func (p *RecordUpdateDNSParam) GetType() string {
	return p.Type
}
func (p *RecordUpdateDNSParam) SetValue(v string) {
	p.Value = v
}

func (p *RecordUpdateDNSParam) GetValue() string {
	return p.Value
}
func (p *RecordUpdateDNSParam) SetTtl(v int) {
	p.Ttl = v
}

func (p *RecordUpdateDNSParam) GetTtl() int {
	return p.Ttl
}
func (p *RecordUpdateDNSParam) SetMxPriority(v int) {
	p.MxPriority = v
}

func (p *RecordUpdateDNSParam) GetMxPriority() int {
	return p.MxPriority
}
func (p *RecordUpdateDNSParam) SetSrvPriority(v int) {
	p.SrvPriority = v
}

func (p *RecordUpdateDNSParam) GetSrvPriority() int {
	return p.SrvPriority
}
func (p *RecordUpdateDNSParam) SetSrvWeight(v int) {
	p.SrvWeight = v
}

func (p *RecordUpdateDNSParam) GetSrvWeight() int {
	return p.SrvWeight
}
func (p *RecordUpdateDNSParam) SetSrvPort(v int) {
	p.SrvPort = v
}

func (p *RecordUpdateDNSParam) GetSrvPort() int {
	return p.SrvPort
}
func (p *RecordUpdateDNSParam) SetSrvTarget(v string) {
	p.SrvTarget = v
}

func (p *RecordUpdateDNSParam) GetSrvTarget() string {
	return p.SrvTarget
}
func (p *RecordUpdateDNSParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *RecordUpdateDNSParam) GetSelector() []string {
	return p.Selector
}
func (p *RecordUpdateDNSParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *RecordUpdateDNSParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *RecordUpdateDNSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *RecordUpdateDNSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *RecordUpdateDNSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *RecordUpdateDNSParam) GetParameters() string {
	return p.Parameters
}
func (p *RecordUpdateDNSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *RecordUpdateDNSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *RecordUpdateDNSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *RecordUpdateDNSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *RecordUpdateDNSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *RecordUpdateDNSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *RecordUpdateDNSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *RecordUpdateDNSParam) GetOutputType() string {
	return p.OutputType
}
func (p *RecordUpdateDNSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *RecordUpdateDNSParam) GetColumn() []string {
	return p.Column
}
func (p *RecordUpdateDNSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *RecordUpdateDNSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *RecordUpdateDNSParam) SetFormat(v string) {
	p.Format = v
}

func (p *RecordUpdateDNSParam) GetFormat() string {
	return p.Format
}
func (p *RecordUpdateDNSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *RecordUpdateDNSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *RecordUpdateDNSParam) SetQuery(v string) {
	p.Query = v
}

func (p *RecordUpdateDNSParam) GetQuery() string {
	return p.Query
}
func (p *RecordUpdateDNSParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *RecordUpdateDNSParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *RecordUpdateDNSParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *RecordUpdateDNSParam) GetId() sacloud.ID {
	return p.Id
}

// RecordDeleteDNSParam is input parameters for the sacloud API
type RecordDeleteDNSParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewRecordDeleteDNSParam return new RecordDeleteDNSParam
func NewRecordDeleteDNSParam() *RecordDeleteDNSParam {
	return &RecordDeleteDNSParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *RecordDeleteDNSParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *RecordDeleteDNSParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *RecordDeleteDNSParam) GetResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *RecordDeleteDNSParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["record-delete"]
}

func (p *RecordDeleteDNSParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *RecordDeleteDNSParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *RecordDeleteDNSParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *RecordDeleteDNSParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *RecordDeleteDNSParam) SetIndex(v int) {
	p.Index = v
}

func (p *RecordDeleteDNSParam) GetIndex() int {
	return p.Index
}
func (p *RecordDeleteDNSParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *RecordDeleteDNSParam) GetSelector() []string {
	return p.Selector
}
func (p *RecordDeleteDNSParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *RecordDeleteDNSParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *RecordDeleteDNSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *RecordDeleteDNSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *RecordDeleteDNSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *RecordDeleteDNSParam) GetParameters() string {
	return p.Parameters
}
func (p *RecordDeleteDNSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *RecordDeleteDNSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *RecordDeleteDNSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *RecordDeleteDNSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *RecordDeleteDNSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *RecordDeleteDNSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *RecordDeleteDNSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *RecordDeleteDNSParam) GetOutputType() string {
	return p.OutputType
}
func (p *RecordDeleteDNSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *RecordDeleteDNSParam) GetColumn() []string {
	return p.Column
}
func (p *RecordDeleteDNSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *RecordDeleteDNSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *RecordDeleteDNSParam) SetFormat(v string) {
	p.Format = v
}

func (p *RecordDeleteDNSParam) GetFormat() string {
	return p.Format
}
func (p *RecordDeleteDNSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *RecordDeleteDNSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *RecordDeleteDNSParam) SetQuery(v string) {
	p.Query = v
}

func (p *RecordDeleteDNSParam) GetQuery() string {
	return p.Query
}
func (p *RecordDeleteDNSParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *RecordDeleteDNSParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *RecordDeleteDNSParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *RecordDeleteDNSParam) GetId() sacloud.ID {
	return p.Id
}

// UpdateDNSParam is input parameters for the sacloud API
type UpdateDNSParam struct {
	Selector          []string   `json:"selector"`
	Description       string     `json:"description"`
	Tags              []string   `json:"tags"`
	IconId            sacloud.ID `json:"icon-id"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewUpdateDNSParam return new UpdateDNSParam
func NewUpdateDNSParam() *UpdateDNSParam {
	return &UpdateDNSParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UpdateDNSParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UpdateDNSParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["DNS"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdateDNSParam) GetResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *UpdateDNSParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdateDNSParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdateDNSParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdateDNSParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdateDNSParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdateDNSParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateDNSParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateDNSParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateDNSParam) GetDescription() string {
	return p.Description
}
func (p *UpdateDNSParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateDNSParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateDNSParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateDNSParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateDNSParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateDNSParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateDNSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateDNSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateDNSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateDNSParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateDNSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateDNSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateDNSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateDNSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateDNSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateDNSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateDNSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateDNSParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateDNSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateDNSParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateDNSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateDNSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateDNSParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateDNSParam) GetFormat() string {
	return p.Format
}
func (p *UpdateDNSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateDNSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateDNSParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateDNSParam) GetQuery() string {
	return p.Query
}
func (p *UpdateDNSParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateDNSParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateDNSParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateDNSParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteDNSParam is input parameters for the sacloud API
type DeleteDNSParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewDeleteDNSParam return new DeleteDNSParam
func NewDeleteDNSParam() *DeleteDNSParam {
	return &DeleteDNSParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DeleteDNSParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DeleteDNSParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteDNSParam) GetResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *DeleteDNSParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteDNSParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteDNSParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteDNSParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteDNSParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteDNSParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteDNSParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteDNSParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteDNSParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteDNSParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteDNSParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteDNSParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteDNSParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteDNSParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteDNSParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteDNSParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteDNSParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteDNSParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteDNSParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteDNSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteDNSParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteDNSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteDNSParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteDNSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteDNSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteDNSParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteDNSParam) GetFormat() string {
	return p.Format
}
func (p *DeleteDNSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteDNSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteDNSParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteDNSParam) GetQuery() string {
	return p.Query
}
func (p *DeleteDNSParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteDNSParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteDNSParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteDNSParam) GetId() sacloud.ID {
	return p.Id
}

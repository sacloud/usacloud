// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListWebaccelParam is input parameters for the sacloud API
type ListWebaccelParam struct {
	ParamTemplate     string   `json:"param-template"`
	Parameters        string   `json:"parameters"`
	ParamTemplateFile string   `json:"param-template-file"`
	ParameterFile     string   `json:"parameter-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`
}

// NewListWebaccelParam return new ListWebaccelParam
func NewListWebaccelParam() *ListWebaccelParam {
	return &ListWebaccelParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ListWebaccelParam) FillValueToSkeleton() {
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *ListWebaccelParam) Validate() []error {
	errors := []error{}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListWebaccelParam) GetResourceDef() *schema.Resource {
	return define.Resources["WebAccel"]
}

func (p *ListWebaccelParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListWebaccelParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListWebaccelParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListWebaccelParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListWebaccelParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListWebaccelParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListWebaccelParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListWebaccelParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListWebaccelParam) GetParameters() string {
	return p.Parameters
}
func (p *ListWebaccelParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListWebaccelParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListWebaccelParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListWebaccelParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListWebaccelParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListWebaccelParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListWebaccelParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListWebaccelParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListWebaccelParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListWebaccelParam) GetColumn() []string {
	return p.Column
}
func (p *ListWebaccelParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListWebaccelParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListWebaccelParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListWebaccelParam) GetFormat() string {
	return p.Format
}
func (p *ListWebaccelParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListWebaccelParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListWebaccelParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListWebaccelParam) GetQuery() string {
	return p.Query
}
func (p *ListWebaccelParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListWebaccelParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadWebaccelParam is input parameters for the sacloud API
type ReadWebaccelParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewReadWebaccelParam return new ReadWebaccelParam
func NewReadWebaccelParam() *ReadWebaccelParam {
	return &ReadWebaccelParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ReadWebaccelParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ReadWebaccelParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadWebaccelParam) GetResourceDef() *schema.Resource {
	return define.Resources["WebAccel"]
}

func (p *ReadWebaccelParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadWebaccelParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadWebaccelParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadWebaccelParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadWebaccelParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadWebaccelParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadWebaccelParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadWebaccelParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadWebaccelParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadWebaccelParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadWebaccelParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadWebaccelParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadWebaccelParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadWebaccelParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadWebaccelParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadWebaccelParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadWebaccelParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadWebaccelParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadWebaccelParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadWebaccelParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadWebaccelParam) GetColumn() []string {
	return p.Column
}
func (p *ReadWebaccelParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadWebaccelParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadWebaccelParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadWebaccelParam) GetFormat() string {
	return p.Format
}
func (p *ReadWebaccelParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadWebaccelParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadWebaccelParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadWebaccelParam) GetQuery() string {
	return p.Query
}
func (p *ReadWebaccelParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadWebaccelParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadWebaccelParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadWebaccelParam) GetId() sacloud.ID {
	return p.Id
}

// CertificateInfoWebaccelParam is input parameters for the sacloud API
type CertificateInfoWebaccelParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewCertificateInfoWebaccelParam return new CertificateInfoWebaccelParam
func NewCertificateInfoWebaccelParam() *CertificateInfoWebaccelParam {
	return &CertificateInfoWebaccelParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *CertificateInfoWebaccelParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *CertificateInfoWebaccelParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CertificateInfoWebaccelParam) GetResourceDef() *schema.Resource {
	return define.Resources["WebAccel"]
}

func (p *CertificateInfoWebaccelParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["certificate-info"]
}

func (p *CertificateInfoWebaccelParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CertificateInfoWebaccelParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CertificateInfoWebaccelParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CertificateInfoWebaccelParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CertificateInfoWebaccelParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *CertificateInfoWebaccelParam) GetSelector() []string {
	return p.Selector
}
func (p *CertificateInfoWebaccelParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CertificateInfoWebaccelParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CertificateInfoWebaccelParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CertificateInfoWebaccelParam) GetParameters() string {
	return p.Parameters
}
func (p *CertificateInfoWebaccelParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CertificateInfoWebaccelParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CertificateInfoWebaccelParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CertificateInfoWebaccelParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CertificateInfoWebaccelParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CertificateInfoWebaccelParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CertificateInfoWebaccelParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CertificateInfoWebaccelParam) GetOutputType() string {
	return p.OutputType
}
func (p *CertificateInfoWebaccelParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CertificateInfoWebaccelParam) GetColumn() []string {
	return p.Column
}
func (p *CertificateInfoWebaccelParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CertificateInfoWebaccelParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CertificateInfoWebaccelParam) SetFormat(v string) {
	p.Format = v
}

func (p *CertificateInfoWebaccelParam) GetFormat() string {
	return p.Format
}
func (p *CertificateInfoWebaccelParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CertificateInfoWebaccelParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CertificateInfoWebaccelParam) SetQuery(v string) {
	p.Query = v
}

func (p *CertificateInfoWebaccelParam) GetQuery() string {
	return p.Query
}
func (p *CertificateInfoWebaccelParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CertificateInfoWebaccelParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *CertificateInfoWebaccelParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *CertificateInfoWebaccelParam) GetId() sacloud.ID {
	return p.Id
}

// CertificateNewWebaccelParam is input parameters for the sacloud API
type CertificateNewWebaccelParam struct {
	Cert              string     `json:"cert"`
	Key               string     `json:"key"`
	CertContent       string     `json:"cert-content"`
	KeyContent        string     `json:"key-content"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewCertificateNewWebaccelParam return new CertificateNewWebaccelParam
func NewCertificateNewWebaccelParam() *CertificateNewWebaccelParam {
	return &CertificateNewWebaccelParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *CertificateNewWebaccelParam) FillValueToSkeleton() {
	if isEmpty(p.Cert) {
		p.Cert = ""
	}
	if isEmpty(p.Key) {
		p.Key = ""
	}
	if isEmpty(p.CertContent) {
		p.CertContent = ""
	}
	if isEmpty(p.KeyContent) {
		p.KeyContent = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *CertificateNewWebaccelParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["WebAccel"].Commands["certificate-new"].Params["cert"].ValidateFunc
		errs := validator("--cert", p.Cert)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["WebAccel"].Commands["certificate-new"].Params["key"].ValidateFunc
		errs := validator("--key", p.Key)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--cert-content", p.CertContent, map[string]interface{}{

			"--cert": p.Cert,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--key-content", p.KeyContent, map[string]interface{}{

			"--key": p.Key,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CertificateNewWebaccelParam) GetResourceDef() *schema.Resource {
	return define.Resources["WebAccel"]
}

func (p *CertificateNewWebaccelParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["certificate-new"]
}

func (p *CertificateNewWebaccelParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CertificateNewWebaccelParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CertificateNewWebaccelParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CertificateNewWebaccelParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CertificateNewWebaccelParam) SetCert(v string) {
	p.Cert = v
}

func (p *CertificateNewWebaccelParam) GetCert() string {
	return p.Cert
}
func (p *CertificateNewWebaccelParam) SetKey(v string) {
	p.Key = v
}

func (p *CertificateNewWebaccelParam) GetKey() string {
	return p.Key
}
func (p *CertificateNewWebaccelParam) SetCertContent(v string) {
	p.CertContent = v
}

func (p *CertificateNewWebaccelParam) GetCertContent() string {
	return p.CertContent
}
func (p *CertificateNewWebaccelParam) SetKeyContent(v string) {
	p.KeyContent = v
}

func (p *CertificateNewWebaccelParam) GetKeyContent() string {
	return p.KeyContent
}
func (p *CertificateNewWebaccelParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *CertificateNewWebaccelParam) GetSelector() []string {
	return p.Selector
}
func (p *CertificateNewWebaccelParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CertificateNewWebaccelParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CertificateNewWebaccelParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CertificateNewWebaccelParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CertificateNewWebaccelParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CertificateNewWebaccelParam) GetParameters() string {
	return p.Parameters
}
func (p *CertificateNewWebaccelParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CertificateNewWebaccelParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CertificateNewWebaccelParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CertificateNewWebaccelParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CertificateNewWebaccelParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CertificateNewWebaccelParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CertificateNewWebaccelParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CertificateNewWebaccelParam) GetOutputType() string {
	return p.OutputType
}
func (p *CertificateNewWebaccelParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CertificateNewWebaccelParam) GetColumn() []string {
	return p.Column
}
func (p *CertificateNewWebaccelParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CertificateNewWebaccelParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CertificateNewWebaccelParam) SetFormat(v string) {
	p.Format = v
}

func (p *CertificateNewWebaccelParam) GetFormat() string {
	return p.Format
}
func (p *CertificateNewWebaccelParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CertificateNewWebaccelParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CertificateNewWebaccelParam) SetQuery(v string) {
	p.Query = v
}

func (p *CertificateNewWebaccelParam) GetQuery() string {
	return p.Query
}
func (p *CertificateNewWebaccelParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CertificateNewWebaccelParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *CertificateNewWebaccelParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *CertificateNewWebaccelParam) GetId() sacloud.ID {
	return p.Id
}

// CertificateUpdateWebaccelParam is input parameters for the sacloud API
type CertificateUpdateWebaccelParam struct {
	Cert              string     `json:"cert"`
	Key               string     `json:"key"`
	CertContent       string     `json:"cert-content"`
	KeyContent        string     `json:"key-content"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewCertificateUpdateWebaccelParam return new CertificateUpdateWebaccelParam
func NewCertificateUpdateWebaccelParam() *CertificateUpdateWebaccelParam {
	return &CertificateUpdateWebaccelParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *CertificateUpdateWebaccelParam) FillValueToSkeleton() {
	if isEmpty(p.Cert) {
		p.Cert = ""
	}
	if isEmpty(p.Key) {
		p.Key = ""
	}
	if isEmpty(p.CertContent) {
		p.CertContent = ""
	}
	if isEmpty(p.KeyContent) {
		p.KeyContent = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *CertificateUpdateWebaccelParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["WebAccel"].Commands["certificate-update"].Params["cert"].ValidateFunc
		errs := validator("--cert", p.Cert)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["WebAccel"].Commands["certificate-update"].Params["key"].ValidateFunc
		errs := validator("--key", p.Key)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--cert-content", p.CertContent, map[string]interface{}{

			"--cert": p.Cert,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--key-content", p.KeyContent, map[string]interface{}{

			"--key": p.Key,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CertificateUpdateWebaccelParam) GetResourceDef() *schema.Resource {
	return define.Resources["WebAccel"]
}

func (p *CertificateUpdateWebaccelParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["certificate-update"]
}

func (p *CertificateUpdateWebaccelParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CertificateUpdateWebaccelParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CertificateUpdateWebaccelParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CertificateUpdateWebaccelParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CertificateUpdateWebaccelParam) SetCert(v string) {
	p.Cert = v
}

func (p *CertificateUpdateWebaccelParam) GetCert() string {
	return p.Cert
}
func (p *CertificateUpdateWebaccelParam) SetKey(v string) {
	p.Key = v
}

func (p *CertificateUpdateWebaccelParam) GetKey() string {
	return p.Key
}
func (p *CertificateUpdateWebaccelParam) SetCertContent(v string) {
	p.CertContent = v
}

func (p *CertificateUpdateWebaccelParam) GetCertContent() string {
	return p.CertContent
}
func (p *CertificateUpdateWebaccelParam) SetKeyContent(v string) {
	p.KeyContent = v
}

func (p *CertificateUpdateWebaccelParam) GetKeyContent() string {
	return p.KeyContent
}
func (p *CertificateUpdateWebaccelParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *CertificateUpdateWebaccelParam) GetSelector() []string {
	return p.Selector
}
func (p *CertificateUpdateWebaccelParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CertificateUpdateWebaccelParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CertificateUpdateWebaccelParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CertificateUpdateWebaccelParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CertificateUpdateWebaccelParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CertificateUpdateWebaccelParam) GetParameters() string {
	return p.Parameters
}
func (p *CertificateUpdateWebaccelParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CertificateUpdateWebaccelParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CertificateUpdateWebaccelParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CertificateUpdateWebaccelParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CertificateUpdateWebaccelParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CertificateUpdateWebaccelParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CertificateUpdateWebaccelParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CertificateUpdateWebaccelParam) GetOutputType() string {
	return p.OutputType
}
func (p *CertificateUpdateWebaccelParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CertificateUpdateWebaccelParam) GetColumn() []string {
	return p.Column
}
func (p *CertificateUpdateWebaccelParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CertificateUpdateWebaccelParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CertificateUpdateWebaccelParam) SetFormat(v string) {
	p.Format = v
}

func (p *CertificateUpdateWebaccelParam) GetFormat() string {
	return p.Format
}
func (p *CertificateUpdateWebaccelParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CertificateUpdateWebaccelParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CertificateUpdateWebaccelParam) SetQuery(v string) {
	p.Query = v
}

func (p *CertificateUpdateWebaccelParam) GetQuery() string {
	return p.Query
}
func (p *CertificateUpdateWebaccelParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CertificateUpdateWebaccelParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *CertificateUpdateWebaccelParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *CertificateUpdateWebaccelParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteCacheWebaccelParam is input parameters for the sacloud API
type DeleteCacheWebaccelParam struct {
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	Parameters        string   `json:"parameters"`
	ParamTemplateFile string   `json:"param-template-file"`
	ParameterFile     string   `json:"parameter-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Query             string   `json:"query"`
	QueryFile         string   `json:"query-file"`
}

// NewDeleteCacheWebaccelParam return new DeleteCacheWebaccelParam
func NewDeleteCacheWebaccelParam() *DeleteCacheWebaccelParam {
	return &DeleteCacheWebaccelParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DeleteCacheWebaccelParam) FillValueToSkeleton() {
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *DeleteCacheWebaccelParam) Validate() []error {
	errors := []error{}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteCacheWebaccelParam) GetResourceDef() *schema.Resource {
	return define.Resources["WebAccel"]
}

func (p *DeleteCacheWebaccelParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete-cache"]
}

func (p *DeleteCacheWebaccelParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteCacheWebaccelParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteCacheWebaccelParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteCacheWebaccelParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteCacheWebaccelParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteCacheWebaccelParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteCacheWebaccelParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteCacheWebaccelParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteCacheWebaccelParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteCacheWebaccelParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteCacheWebaccelParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteCacheWebaccelParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteCacheWebaccelParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteCacheWebaccelParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteCacheWebaccelParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteCacheWebaccelParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteCacheWebaccelParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteCacheWebaccelParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteCacheWebaccelParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteCacheWebaccelParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteCacheWebaccelParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteCacheWebaccelParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteCacheWebaccelParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteCacheWebaccelParam) GetFormat() string {
	return p.Format
}
func (p *DeleteCacheWebaccelParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteCacheWebaccelParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteCacheWebaccelParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteCacheWebaccelParam) GetQuery() string {
	return p.Query
}
func (p *DeleteCacheWebaccelParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteCacheWebaccelParam) GetQueryFile() string {
	return p.QueryFile
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListProxyLBParam is input parameters for the sacloud API
type ListProxyLBParam struct {
	Name              []string     `json:"name"`
	Id                []sacloud.ID `json:"id"`
	Tags              []string     `json:"tags"`
	From              int          `json:"from"`
	Max               int          `json:"max"`
	Sort              []string     `json:"sort"`
	ParamTemplate     string       `json:"param-template"`
	Parameters        string       `json:"parameters"`
	ParamTemplateFile string       `json:"param-template-file"`
	ParameterFile     string       `json:"parameter-file"`
	GenerateSkeleton  bool         `json:"generate-skeleton"`
	OutputType        string       `json:"output-type"`
	Column            []string     `json:"column"`
	Quiet             bool         `json:"quiet"`
	Format            string       `json:"format"`
	FormatFile        string       `json:"format-file"`
	Query             string       `json:"query"`
	QueryFile         string       `json:"query-file"`
}

// NewListProxyLBParam return new ListProxyLBParam
func NewListProxyLBParam() *ListProxyLBParam {
	return &ListProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ListProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = []string{""}
	}
	if isEmpty(p.Id) {
		p.Id = []sacloud.ID{}
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.From) {
		p.From = 0
	}
	if isEmpty(p.Max) {
		p.Max = 0
	}
	if isEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *ListProxyLBParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ListProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListProxyLBParam) SetName(v []string) {
	p.Name = v
}

func (p *ListProxyLBParam) GetName() []string {
	return p.Name
}
func (p *ListProxyLBParam) SetId(v []sacloud.ID) {
	p.Id = v
}

func (p *ListProxyLBParam) GetId() []sacloud.ID {
	return p.Id
}
func (p *ListProxyLBParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListProxyLBParam) GetTags() []string {
	return p.Tags
}
func (p *ListProxyLBParam) SetFrom(v int) {
	p.From = v
}

func (p *ListProxyLBParam) GetFrom() int {
	return p.From
}
func (p *ListProxyLBParam) SetMax(v int) {
	p.Max = v
}

func (p *ListProxyLBParam) GetMax() int {
	return p.Max
}
func (p *ListProxyLBParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListProxyLBParam) GetSort() []string {
	return p.Sort
}
func (p *ListProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ListProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *ListProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ListProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ListProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *ListProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *ListProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ListProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *ListProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *ListProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ListProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}

// CreateProxyLBParam is input parameters for the sacloud API
type CreateProxyLBParam struct {
	Plan                 int        `json:"plan"`
	Protocol             string     `json:"protocol"`
	HostHeader           string     `json:"host-header"`
	Path                 string     `json:"path"`
	DelayLoop            int        `json:"delay-loop"`
	StickySession        bool       `json:"sticky-session"`
	SorryServerIpaddress string     `json:"sorry-server-ipaddress"`
	SorryServerPort      int        `json:"sorry-server-port"`
	Timeout              int        `json:"timeout"`
	Name                 string     `json:"name"`
	Description          string     `json:"description"`
	Tags                 []string   `json:"tags"`
	IconId               sacloud.ID `json:"icon-id"`
	Assumeyes            bool       `json:"assumeyes"`
	ParamTemplate        string     `json:"param-template"`
	Parameters           string     `json:"parameters"`
	ParamTemplateFile    string     `json:"param-template-file"`
	ParameterFile        string     `json:"parameter-file"`
	GenerateSkeleton     bool       `json:"generate-skeleton"`
	OutputType           string     `json:"output-type"`
	Column               []string   `json:"column"`
	Quiet                bool       `json:"quiet"`
	Format               string     `json:"format"`
	FormatFile           string     `json:"format-file"`
	Query                string     `json:"query"`
	QueryFile            string     `json:"query-file"`
}

// NewCreateProxyLBParam return new CreateProxyLBParam
func NewCreateProxyLBParam() *CreateProxyLBParam {
	return &CreateProxyLBParam{

		Plan:      1000,
		Protocol:  "tcp",
		Path:      "/",
		DelayLoop: 10,
		Timeout:   10,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *CreateProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.Plan) {
		p.Plan = 0
	}
	if isEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if isEmpty(p.HostHeader) {
		p.HostHeader = ""
	}
	if isEmpty(p.Path) {
		p.Path = ""
	}
	if isEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if isEmpty(p.StickySession) {
		p.StickySession = false
	}
	if isEmpty(p.SorryServerIpaddress) {
		p.SorryServerIpaddress = ""
	}
	if isEmpty(p.SorryServerPort) {
		p.SorryServerPort = 0
	}
	if isEmpty(p.Timeout) {
		p.Timeout = 0
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}

}

// Validate checks current values in model
func (p *CreateProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["sorry-server-port"].ValidateFunc
		errs := validator("--sorry-server-port", p.SorryServerPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["timeout"].ValidateFunc
		errs := validator("--timeout", p.Timeout)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreateProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *CreateProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreateProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreateProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreateProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreateProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreateProxyLBParam) SetPlan(v int) {
	p.Plan = v
}

func (p *CreateProxyLBParam) GetPlan() int {
	return p.Plan
}
func (p *CreateProxyLBParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *CreateProxyLBParam) GetProtocol() string {
	return p.Protocol
}
func (p *CreateProxyLBParam) SetHostHeader(v string) {
	p.HostHeader = v
}

func (p *CreateProxyLBParam) GetHostHeader() string {
	return p.HostHeader
}
func (p *CreateProxyLBParam) SetPath(v string) {
	p.Path = v
}

func (p *CreateProxyLBParam) GetPath() string {
	return p.Path
}
func (p *CreateProxyLBParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *CreateProxyLBParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *CreateProxyLBParam) SetStickySession(v bool) {
	p.StickySession = v
}

func (p *CreateProxyLBParam) GetStickySession() bool {
	return p.StickySession
}
func (p *CreateProxyLBParam) SetSorryServerIpaddress(v string) {
	p.SorryServerIpaddress = v
}

func (p *CreateProxyLBParam) GetSorryServerIpaddress() string {
	return p.SorryServerIpaddress
}
func (p *CreateProxyLBParam) SetSorryServerPort(v int) {
	p.SorryServerPort = v
}

func (p *CreateProxyLBParam) GetSorryServerPort() int {
	return p.SorryServerPort
}
func (p *CreateProxyLBParam) SetTimeout(v int) {
	p.Timeout = v
}

func (p *CreateProxyLBParam) GetTimeout() int {
	return p.Timeout
}
func (p *CreateProxyLBParam) SetName(v string) {
	p.Name = v
}

func (p *CreateProxyLBParam) GetName() string {
	return p.Name
}
func (p *CreateProxyLBParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateProxyLBParam) GetDescription() string {
	return p.Description
}
func (p *CreateProxyLBParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateProxyLBParam) GetTags() []string {
	return p.Tags
}
func (p *CreateProxyLBParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *CreateProxyLBParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *CreateProxyLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateProxyLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CreateProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *CreateProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CreateProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CreateProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *CreateProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *CreateProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CreateProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *CreateProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *CreateProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CreateProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}

// ReadProxyLBParam is input parameters for the sacloud API
type ReadProxyLBParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewReadProxyLBParam return new ReadProxyLBParam
func NewReadProxyLBParam() *ReadProxyLBParam {
	return &ReadProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ReadProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ReadProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ReadProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ReadProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *ReadProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ReadProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ReadProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *ReadProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *ReadProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *ReadProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *ReadProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ReadProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ReadProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ReadProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// UpdateProxyLBParam is input parameters for the sacloud API
type UpdateProxyLBParam struct {
	Protocol             string     `json:"protocol"`
	HostHeader           string     `json:"host-header"`
	Path                 string     `json:"path"`
	DelayLoop            int        `json:"delay-loop"`
	StickySession        bool       `json:"sticky-session"`
	SorryServerIpaddress string     `json:"sorry-server-ipaddress"`
	SorryServerPort      int        `json:"sorry-server-port"`
	Timeout              int        `json:"timeout"`
	Selector             []string   `json:"selector"`
	Name                 string     `json:"name"`
	Description          string     `json:"description"`
	Tags                 []string   `json:"tags"`
	IconId               sacloud.ID `json:"icon-id"`
	Assumeyes            bool       `json:"assumeyes"`
	ParamTemplate        string     `json:"param-template"`
	Parameters           string     `json:"parameters"`
	ParamTemplateFile    string     `json:"param-template-file"`
	ParameterFile        string     `json:"parameter-file"`
	GenerateSkeleton     bool       `json:"generate-skeleton"`
	OutputType           string     `json:"output-type"`
	Column               []string   `json:"column"`
	Quiet                bool       `json:"quiet"`
	Format               string     `json:"format"`
	FormatFile           string     `json:"format-file"`
	Query                string     `json:"query"`
	QueryFile            string     `json:"query-file"`
	Id                   sacloud.ID `json:"id"`
}

// NewUpdateProxyLBParam return new UpdateProxyLBParam
func NewUpdateProxyLBParam() *UpdateProxyLBParam {
	return &UpdateProxyLBParam{

		Timeout: 10,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *UpdateProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.Protocol) {
		p.Protocol = ""
	}
	if isEmpty(p.HostHeader) {
		p.HostHeader = ""
	}
	if isEmpty(p.Path) {
		p.Path = ""
	}
	if isEmpty(p.DelayLoop) {
		p.DelayLoop = 0
	}
	if isEmpty(p.StickySession) {
		p.StickySession = false
	}
	if isEmpty(p.SorryServerIpaddress) {
		p.SorryServerIpaddress = ""
	}
	if isEmpty(p.SorryServerPort) {
		p.SorryServerPort = 0
	}
	if isEmpty(p.Timeout) {
		p.Timeout = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = sacloud.ID(0)
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *UpdateProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["sorry-server-port"].ValidateFunc
		errs := validator("--sorry-server-port", p.SorryServerPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["timeout"].ValidateFunc
		errs := validator("--timeout", p.Timeout)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdateProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *UpdateProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdateProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdateProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdateProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdateProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdateProxyLBParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *UpdateProxyLBParam) GetProtocol() string {
	return p.Protocol
}
func (p *UpdateProxyLBParam) SetHostHeader(v string) {
	p.HostHeader = v
}

func (p *UpdateProxyLBParam) GetHostHeader() string {
	return p.HostHeader
}
func (p *UpdateProxyLBParam) SetPath(v string) {
	p.Path = v
}

func (p *UpdateProxyLBParam) GetPath() string {
	return p.Path
}
func (p *UpdateProxyLBParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *UpdateProxyLBParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *UpdateProxyLBParam) SetStickySession(v bool) {
	p.StickySession = v
}

func (p *UpdateProxyLBParam) GetStickySession() bool {
	return p.StickySession
}
func (p *UpdateProxyLBParam) SetSorryServerIpaddress(v string) {
	p.SorryServerIpaddress = v
}

func (p *UpdateProxyLBParam) GetSorryServerIpaddress() string {
	return p.SorryServerIpaddress
}
func (p *UpdateProxyLBParam) SetSorryServerPort(v int) {
	p.SorryServerPort = v
}

func (p *UpdateProxyLBParam) GetSorryServerPort() int {
	return p.SorryServerPort
}
func (p *UpdateProxyLBParam) SetTimeout(v int) {
	p.Timeout = v
}

func (p *UpdateProxyLBParam) GetTimeout() int {
	return p.Timeout
}
func (p *UpdateProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateProxyLBParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateProxyLBParam) GetName() string {
	return p.Name
}
func (p *UpdateProxyLBParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateProxyLBParam) GetDescription() string {
	return p.Description
}
func (p *UpdateProxyLBParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateProxyLBParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateProxyLBParam) SetIconId(v sacloud.ID) {
	p.IconId = v
}

func (p *UpdateProxyLBParam) GetIconId() sacloud.ID {
	return p.IconId
}
func (p *UpdateProxyLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateProxyLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *UpdateProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *UpdateProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *UpdateProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *UpdateProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *UpdateProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *UpdateProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *UpdateProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *UpdateProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *UpdateProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *UpdateProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// DeleteProxyLBParam is input parameters for the sacloud API
type DeleteProxyLBParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewDeleteProxyLBParam return new DeleteProxyLBParam
func NewDeleteProxyLBParam() *DeleteProxyLBParam {
	return &DeleteProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DeleteProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *DeleteProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *DeleteProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteProxyLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteProxyLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *DeleteProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *DeleteProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *DeleteProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *DeleteProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *DeleteProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *DeleteProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *DeleteProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *DeleteProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *DeleteProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *DeleteProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// PlanChangeProxyLBParam is input parameters for the sacloud API
type PlanChangeProxyLBParam struct {
	Plan              int        `json:"plan"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewPlanChangeProxyLBParam return new PlanChangeProxyLBParam
func NewPlanChangeProxyLBParam() *PlanChangeProxyLBParam {
	return &PlanChangeProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *PlanChangeProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.Plan) {
		p.Plan = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *PlanChangeProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["plan-change"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *PlanChangeProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *PlanChangeProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["plan-change"]
}

func (p *PlanChangeProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *PlanChangeProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *PlanChangeProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *PlanChangeProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *PlanChangeProxyLBParam) SetPlan(v int) {
	p.Plan = v
}

func (p *PlanChangeProxyLBParam) GetPlan() int {
	return p.Plan
}
func (p *PlanChangeProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *PlanChangeProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *PlanChangeProxyLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PlanChangeProxyLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PlanChangeProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PlanChangeProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PlanChangeProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *PlanChangeProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *PlanChangeProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PlanChangeProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PlanChangeProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *PlanChangeProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *PlanChangeProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *PlanChangeProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *PlanChangeProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *PlanChangeProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *PlanChangeProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *PlanChangeProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *PlanChangeProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *PlanChangeProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *PlanChangeProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *PlanChangeProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *PlanChangeProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *PlanChangeProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *PlanChangeProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *PlanChangeProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *PlanChangeProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *PlanChangeProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *PlanChangeProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *PlanChangeProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// BindPortInfoProxyLBParam is input parameters for the sacloud API
type BindPortInfoProxyLBParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewBindPortInfoProxyLBParam return new BindPortInfoProxyLBParam
func NewBindPortInfoProxyLBParam() *BindPortInfoProxyLBParam {
	return &BindPortInfoProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *BindPortInfoProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *BindPortInfoProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *BindPortInfoProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *BindPortInfoProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["bind-port-info"]
}

func (p *BindPortInfoProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *BindPortInfoProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *BindPortInfoProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *BindPortInfoProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *BindPortInfoProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *BindPortInfoProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *BindPortInfoProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BindPortInfoProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BindPortInfoProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *BindPortInfoProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *BindPortInfoProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BindPortInfoProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BindPortInfoProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *BindPortInfoProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *BindPortInfoProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BindPortInfoProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BindPortInfoProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *BindPortInfoProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *BindPortInfoProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *BindPortInfoProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *BindPortInfoProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *BindPortInfoProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *BindPortInfoProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *BindPortInfoProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *BindPortInfoProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *BindPortInfoProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *BindPortInfoProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *BindPortInfoProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *BindPortInfoProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *BindPortInfoProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *BindPortInfoProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *BindPortInfoProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// BindPortAddProxyLBParam is input parameters for the sacloud API
type BindPortAddProxyLBParam struct {
	Mode              string     `json:"mode"`
	Port              int        `json:"port"`
	RedirectToHttps   bool       `json:"redirect-to-https"`
	SupportHttp2      bool       `json:"support-http-2"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewBindPortAddProxyLBParam return new BindPortAddProxyLBParam
func NewBindPortAddProxyLBParam() *BindPortAddProxyLBParam {
	return &BindPortAddProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *BindPortAddProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.Mode) {
		p.Mode = ""
	}
	if isEmpty(p.Port) {
		p.Port = 0
	}
	if isEmpty(p.RedirectToHttps) {
		p.RedirectToHttps = false
	}
	if isEmpty(p.SupportHttp2) {
		p.SupportHttp2 = false
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *BindPortAddProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--mode", p.Mode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["bind-port-add"].Params["mode"].ValidateFunc
		errs := validator("--mode", p.Mode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["bind-port-add"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *BindPortAddProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *BindPortAddProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["bind-port-add"]
}

func (p *BindPortAddProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *BindPortAddProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *BindPortAddProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *BindPortAddProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *BindPortAddProxyLBParam) SetMode(v string) {
	p.Mode = v
}

func (p *BindPortAddProxyLBParam) GetMode() string {
	return p.Mode
}
func (p *BindPortAddProxyLBParam) SetPort(v int) {
	p.Port = v
}

func (p *BindPortAddProxyLBParam) GetPort() int {
	return p.Port
}
func (p *BindPortAddProxyLBParam) SetRedirectToHttps(v bool) {
	p.RedirectToHttps = v
}

func (p *BindPortAddProxyLBParam) GetRedirectToHttps() bool {
	return p.RedirectToHttps
}
func (p *BindPortAddProxyLBParam) SetSupportHttp2(v bool) {
	p.SupportHttp2 = v
}

func (p *BindPortAddProxyLBParam) GetSupportHttp2() bool {
	return p.SupportHttp2
}
func (p *BindPortAddProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *BindPortAddProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *BindPortAddProxyLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BindPortAddProxyLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BindPortAddProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BindPortAddProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BindPortAddProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *BindPortAddProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *BindPortAddProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BindPortAddProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BindPortAddProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *BindPortAddProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *BindPortAddProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BindPortAddProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BindPortAddProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *BindPortAddProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *BindPortAddProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *BindPortAddProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *BindPortAddProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *BindPortAddProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *BindPortAddProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *BindPortAddProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *BindPortAddProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *BindPortAddProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *BindPortAddProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *BindPortAddProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *BindPortAddProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *BindPortAddProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *BindPortAddProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *BindPortAddProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// BindPortUpdateProxyLBParam is input parameters for the sacloud API
type BindPortUpdateProxyLBParam struct {
	Index             int        `json:"index"`
	Mode              string     `json:"mode"`
	Port              int        `json:"port"`
	RedirectToHttps   bool       `json:"redirect-to-https"`
	SupportHttp2      bool       `json:"support-http-2"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewBindPortUpdateProxyLBParam return new BindPortUpdateProxyLBParam
func NewBindPortUpdateProxyLBParam() *BindPortUpdateProxyLBParam {
	return &BindPortUpdateProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *BindPortUpdateProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Mode) {
		p.Mode = ""
	}
	if isEmpty(p.Port) {
		p.Port = 0
	}
	if isEmpty(p.RedirectToHttps) {
		p.RedirectToHttps = false
	}
	if isEmpty(p.SupportHttp2) {
		p.SupportHttp2 = false
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *BindPortUpdateProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["bind-port-update"].Params["mode"].ValidateFunc
		errs := validator("--mode", p.Mode)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["bind-port-update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *BindPortUpdateProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *BindPortUpdateProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["bind-port-update"]
}

func (p *BindPortUpdateProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *BindPortUpdateProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *BindPortUpdateProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *BindPortUpdateProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *BindPortUpdateProxyLBParam) SetIndex(v int) {
	p.Index = v
}

func (p *BindPortUpdateProxyLBParam) GetIndex() int {
	return p.Index
}
func (p *BindPortUpdateProxyLBParam) SetMode(v string) {
	p.Mode = v
}

func (p *BindPortUpdateProxyLBParam) GetMode() string {
	return p.Mode
}
func (p *BindPortUpdateProxyLBParam) SetPort(v int) {
	p.Port = v
}

func (p *BindPortUpdateProxyLBParam) GetPort() int {
	return p.Port
}
func (p *BindPortUpdateProxyLBParam) SetRedirectToHttps(v bool) {
	p.RedirectToHttps = v
}

func (p *BindPortUpdateProxyLBParam) GetRedirectToHttps() bool {
	return p.RedirectToHttps
}
func (p *BindPortUpdateProxyLBParam) SetSupportHttp2(v bool) {
	p.SupportHttp2 = v
}

func (p *BindPortUpdateProxyLBParam) GetSupportHttp2() bool {
	return p.SupportHttp2
}
func (p *BindPortUpdateProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *BindPortUpdateProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *BindPortUpdateProxyLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BindPortUpdateProxyLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BindPortUpdateProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BindPortUpdateProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BindPortUpdateProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *BindPortUpdateProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *BindPortUpdateProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BindPortUpdateProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BindPortUpdateProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *BindPortUpdateProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *BindPortUpdateProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BindPortUpdateProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BindPortUpdateProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *BindPortUpdateProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *BindPortUpdateProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *BindPortUpdateProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *BindPortUpdateProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *BindPortUpdateProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *BindPortUpdateProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *BindPortUpdateProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *BindPortUpdateProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *BindPortUpdateProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *BindPortUpdateProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *BindPortUpdateProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *BindPortUpdateProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *BindPortUpdateProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *BindPortUpdateProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *BindPortUpdateProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// BindPortDeleteProxyLBParam is input parameters for the sacloud API
type BindPortDeleteProxyLBParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewBindPortDeleteProxyLBParam return new BindPortDeleteProxyLBParam
func NewBindPortDeleteProxyLBParam() *BindPortDeleteProxyLBParam {
	return &BindPortDeleteProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *BindPortDeleteProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *BindPortDeleteProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *BindPortDeleteProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *BindPortDeleteProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["bind-port-delete"]
}

func (p *BindPortDeleteProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *BindPortDeleteProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *BindPortDeleteProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *BindPortDeleteProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *BindPortDeleteProxyLBParam) SetIndex(v int) {
	p.Index = v
}

func (p *BindPortDeleteProxyLBParam) GetIndex() int {
	return p.Index
}
func (p *BindPortDeleteProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *BindPortDeleteProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *BindPortDeleteProxyLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BindPortDeleteProxyLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BindPortDeleteProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BindPortDeleteProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BindPortDeleteProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *BindPortDeleteProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *BindPortDeleteProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BindPortDeleteProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BindPortDeleteProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *BindPortDeleteProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *BindPortDeleteProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BindPortDeleteProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BindPortDeleteProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *BindPortDeleteProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *BindPortDeleteProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *BindPortDeleteProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *BindPortDeleteProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *BindPortDeleteProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *BindPortDeleteProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *BindPortDeleteProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *BindPortDeleteProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *BindPortDeleteProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *BindPortDeleteProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *BindPortDeleteProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *BindPortDeleteProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *BindPortDeleteProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *BindPortDeleteProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *BindPortDeleteProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// ResponseHeaderInfoProxyLBParam is input parameters for the sacloud API
type ResponseHeaderInfoProxyLBParam struct {
	PortIndex         int        `json:"port-index"`
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewResponseHeaderInfoProxyLBParam return new ResponseHeaderInfoProxyLBParam
func NewResponseHeaderInfoProxyLBParam() *ResponseHeaderInfoProxyLBParam {
	return &ResponseHeaderInfoProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ResponseHeaderInfoProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.PortIndex) {
		p.PortIndex = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ResponseHeaderInfoProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--port-index", p.PortIndex)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ResponseHeaderInfoProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ResponseHeaderInfoProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["response-header-info"]
}

func (p *ResponseHeaderInfoProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ResponseHeaderInfoProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ResponseHeaderInfoProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ResponseHeaderInfoProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ResponseHeaderInfoProxyLBParam) SetPortIndex(v int) {
	p.PortIndex = v
}

func (p *ResponseHeaderInfoProxyLBParam) GetPortIndex() int {
	return p.PortIndex
}
func (p *ResponseHeaderInfoProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ResponseHeaderInfoProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *ResponseHeaderInfoProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ResponseHeaderInfoProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ResponseHeaderInfoProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ResponseHeaderInfoProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *ResponseHeaderInfoProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ResponseHeaderInfoProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ResponseHeaderInfoProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ResponseHeaderInfoProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ResponseHeaderInfoProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ResponseHeaderInfoProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ResponseHeaderInfoProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ResponseHeaderInfoProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ResponseHeaderInfoProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ResponseHeaderInfoProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *ResponseHeaderInfoProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ResponseHeaderInfoProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ResponseHeaderInfoProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ResponseHeaderInfoProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *ResponseHeaderInfoProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ResponseHeaderInfoProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ResponseHeaderInfoProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *ResponseHeaderInfoProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *ResponseHeaderInfoProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ResponseHeaderInfoProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ResponseHeaderInfoProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ResponseHeaderInfoProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// ResponseHeaderAddProxyLBParam is input parameters for the sacloud API
type ResponseHeaderAddProxyLBParam struct {
	PortIndex         int        `json:"port-index"`
	Header            string     `json:"header"`
	Value             string     `json:"value"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewResponseHeaderAddProxyLBParam return new ResponseHeaderAddProxyLBParam
func NewResponseHeaderAddProxyLBParam() *ResponseHeaderAddProxyLBParam {
	return &ResponseHeaderAddProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ResponseHeaderAddProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.PortIndex) {
		p.PortIndex = 0
	}
	if isEmpty(p.Header) {
		p.Header = ""
	}
	if isEmpty(p.Value) {
		p.Value = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ResponseHeaderAddProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--port-index", p.PortIndex)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--header", p.Header)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--value", p.Value)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ResponseHeaderAddProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ResponseHeaderAddProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["response-header-add"]
}

func (p *ResponseHeaderAddProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ResponseHeaderAddProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ResponseHeaderAddProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ResponseHeaderAddProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ResponseHeaderAddProxyLBParam) SetPortIndex(v int) {
	p.PortIndex = v
}

func (p *ResponseHeaderAddProxyLBParam) GetPortIndex() int {
	return p.PortIndex
}
func (p *ResponseHeaderAddProxyLBParam) SetHeader(v string) {
	p.Header = v
}

func (p *ResponseHeaderAddProxyLBParam) GetHeader() string {
	return p.Header
}
func (p *ResponseHeaderAddProxyLBParam) SetValue(v string) {
	p.Value = v
}

func (p *ResponseHeaderAddProxyLBParam) GetValue() string {
	return p.Value
}
func (p *ResponseHeaderAddProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ResponseHeaderAddProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *ResponseHeaderAddProxyLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ResponseHeaderAddProxyLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ResponseHeaderAddProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ResponseHeaderAddProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ResponseHeaderAddProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ResponseHeaderAddProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *ResponseHeaderAddProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ResponseHeaderAddProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ResponseHeaderAddProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ResponseHeaderAddProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ResponseHeaderAddProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ResponseHeaderAddProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ResponseHeaderAddProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ResponseHeaderAddProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ResponseHeaderAddProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ResponseHeaderAddProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *ResponseHeaderAddProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ResponseHeaderAddProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ResponseHeaderAddProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ResponseHeaderAddProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *ResponseHeaderAddProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ResponseHeaderAddProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ResponseHeaderAddProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *ResponseHeaderAddProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *ResponseHeaderAddProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ResponseHeaderAddProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ResponseHeaderAddProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ResponseHeaderAddProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// ResponseHeaderUpdateProxyLBParam is input parameters for the sacloud API
type ResponseHeaderUpdateProxyLBParam struct {
	Index             int        `json:"index"`
	PortIndex         int        `json:"port-index"`
	Header            string     `json:"header"`
	Value             string     `json:"value"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewResponseHeaderUpdateProxyLBParam return new ResponseHeaderUpdateProxyLBParam
func NewResponseHeaderUpdateProxyLBParam() *ResponseHeaderUpdateProxyLBParam {
	return &ResponseHeaderUpdateProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ResponseHeaderUpdateProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.PortIndex) {
		p.PortIndex = 0
	}
	if isEmpty(p.Header) {
		p.Header = ""
	}
	if isEmpty(p.Value) {
		p.Value = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ResponseHeaderUpdateProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--port-index", p.PortIndex)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ResponseHeaderUpdateProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ResponseHeaderUpdateProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["response-header-update"]
}

func (p *ResponseHeaderUpdateProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ResponseHeaderUpdateProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ResponseHeaderUpdateProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ResponseHeaderUpdateProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ResponseHeaderUpdateProxyLBParam) SetIndex(v int) {
	p.Index = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetIndex() int {
	return p.Index
}
func (p *ResponseHeaderUpdateProxyLBParam) SetPortIndex(v int) {
	p.PortIndex = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetPortIndex() int {
	return p.PortIndex
}
func (p *ResponseHeaderUpdateProxyLBParam) SetHeader(v string) {
	p.Header = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetHeader() string {
	return p.Header
}
func (p *ResponseHeaderUpdateProxyLBParam) SetValue(v string) {
	p.Value = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetValue() string {
	return p.Value
}
func (p *ResponseHeaderUpdateProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *ResponseHeaderUpdateProxyLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ResponseHeaderUpdateProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ResponseHeaderUpdateProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *ResponseHeaderUpdateProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ResponseHeaderUpdateProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ResponseHeaderUpdateProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ResponseHeaderUpdateProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ResponseHeaderUpdateProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *ResponseHeaderUpdateProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ResponseHeaderUpdateProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *ResponseHeaderUpdateProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ResponseHeaderUpdateProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *ResponseHeaderUpdateProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ResponseHeaderUpdateProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ResponseHeaderUpdateProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// ResponseHeaderDeleteProxyLBParam is input parameters for the sacloud API
type ResponseHeaderDeleteProxyLBParam struct {
	Index             int        `json:"index"`
	PortIndex         int        `json:"port-index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewResponseHeaderDeleteProxyLBParam return new ResponseHeaderDeleteProxyLBParam
func NewResponseHeaderDeleteProxyLBParam() *ResponseHeaderDeleteProxyLBParam {
	return &ResponseHeaderDeleteProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ResponseHeaderDeleteProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.PortIndex) {
		p.PortIndex = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ResponseHeaderDeleteProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--port-index", p.PortIndex)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ResponseHeaderDeleteProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ResponseHeaderDeleteProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["response-header-delete"]
}

func (p *ResponseHeaderDeleteProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ResponseHeaderDeleteProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ResponseHeaderDeleteProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ResponseHeaderDeleteProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ResponseHeaderDeleteProxyLBParam) SetIndex(v int) {
	p.Index = v
}

func (p *ResponseHeaderDeleteProxyLBParam) GetIndex() int {
	return p.Index
}
func (p *ResponseHeaderDeleteProxyLBParam) SetPortIndex(v int) {
	p.PortIndex = v
}

func (p *ResponseHeaderDeleteProxyLBParam) GetPortIndex() int {
	return p.PortIndex
}
func (p *ResponseHeaderDeleteProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ResponseHeaderDeleteProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *ResponseHeaderDeleteProxyLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ResponseHeaderDeleteProxyLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ResponseHeaderDeleteProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ResponseHeaderDeleteProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ResponseHeaderDeleteProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ResponseHeaderDeleteProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *ResponseHeaderDeleteProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ResponseHeaderDeleteProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ResponseHeaderDeleteProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ResponseHeaderDeleteProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ResponseHeaderDeleteProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ResponseHeaderDeleteProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ResponseHeaderDeleteProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ResponseHeaderDeleteProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ResponseHeaderDeleteProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ResponseHeaderDeleteProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *ResponseHeaderDeleteProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ResponseHeaderDeleteProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ResponseHeaderDeleteProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ResponseHeaderDeleteProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *ResponseHeaderDeleteProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ResponseHeaderDeleteProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ResponseHeaderDeleteProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *ResponseHeaderDeleteProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *ResponseHeaderDeleteProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ResponseHeaderDeleteProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ResponseHeaderDeleteProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ResponseHeaderDeleteProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// ACMEInfoProxyLBParam is input parameters for the sacloud API
type ACMEInfoProxyLBParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewACMEInfoProxyLBParam return new ACMEInfoProxyLBParam
func NewACMEInfoProxyLBParam() *ACMEInfoProxyLBParam {
	return &ACMEInfoProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ACMEInfoProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ACMEInfoProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ACMEInfoProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ACMEInfoProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["acme-info"]
}

func (p *ACMEInfoProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ACMEInfoProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ACMEInfoProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ACMEInfoProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ACMEInfoProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ACMEInfoProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *ACMEInfoProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ACMEInfoProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ACMEInfoProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ACMEInfoProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *ACMEInfoProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ACMEInfoProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ACMEInfoProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ACMEInfoProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ACMEInfoProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ACMEInfoProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ACMEInfoProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ACMEInfoProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ACMEInfoProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ACMEInfoProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *ACMEInfoProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ACMEInfoProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ACMEInfoProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ACMEInfoProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *ACMEInfoProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ACMEInfoProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ACMEInfoProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *ACMEInfoProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *ACMEInfoProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ACMEInfoProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ACMEInfoProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ACMEInfoProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// ACMESettingProxyLBParam is input parameters for the sacloud API
type ACMESettingProxyLBParam struct {
	AcceptTos         bool       `json:"accept-tos"`
	CommonName        string     `json:"common-name"`
	Disable           bool       `json:"disable"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewACMESettingProxyLBParam return new ACMESettingProxyLBParam
func NewACMESettingProxyLBParam() *ACMESettingProxyLBParam {
	return &ACMESettingProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ACMESettingProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.AcceptTos) {
		p.AcceptTos = false
	}
	if isEmpty(p.CommonName) {
		p.CommonName = ""
	}
	if isEmpty(p.Disable) {
		p.Disable = false
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ACMESettingProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ACMESettingProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ACMESettingProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["acme-setting"]
}

func (p *ACMESettingProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ACMESettingProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ACMESettingProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ACMESettingProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ACMESettingProxyLBParam) SetAcceptTos(v bool) {
	p.AcceptTos = v
}

func (p *ACMESettingProxyLBParam) GetAcceptTos() bool {
	return p.AcceptTos
}
func (p *ACMESettingProxyLBParam) SetCommonName(v string) {
	p.CommonName = v
}

func (p *ACMESettingProxyLBParam) GetCommonName() string {
	return p.CommonName
}
func (p *ACMESettingProxyLBParam) SetDisable(v bool) {
	p.Disable = v
}

func (p *ACMESettingProxyLBParam) GetDisable() bool {
	return p.Disable
}
func (p *ACMESettingProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ACMESettingProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *ACMESettingProxyLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ACMESettingProxyLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ACMESettingProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ACMESettingProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ACMESettingProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ACMESettingProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *ACMESettingProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ACMESettingProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ACMESettingProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ACMESettingProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ACMESettingProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ACMESettingProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ACMESettingProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ACMESettingProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ACMESettingProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ACMESettingProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *ACMESettingProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ACMESettingProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ACMESettingProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ACMESettingProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *ACMESettingProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ACMESettingProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ACMESettingProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *ACMESettingProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *ACMESettingProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ACMESettingProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ACMESettingProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ACMESettingProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// ACMERenewProxyLBParam is input parameters for the sacloud API
type ACMERenewProxyLBParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	Id                sacloud.ID `json:"id"`
}

// NewACMERenewProxyLBParam return new ACMERenewProxyLBParam
func NewACMERenewProxyLBParam() *ACMERenewProxyLBParam {
	return &ACMERenewProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ACMERenewProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ACMERenewProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ACMERenewProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ACMERenewProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["acme-renew"]
}

func (p *ACMERenewProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ACMERenewProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ACMERenewProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ACMERenewProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ACMERenewProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ACMERenewProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *ACMERenewProxyLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ACMERenewProxyLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ACMERenewProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ACMERenewProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ACMERenewProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ACMERenewProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *ACMERenewProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ACMERenewProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ACMERenewProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ACMERenewProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ACMERenewProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ACMERenewProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ACMERenewProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ACMERenewProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// ServerInfoProxyLBParam is input parameters for the sacloud API
type ServerInfoProxyLBParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewServerInfoProxyLBParam return new ServerInfoProxyLBParam
func NewServerInfoProxyLBParam() *ServerInfoProxyLBParam {
	return &ServerInfoProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ServerInfoProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ServerInfoProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ServerInfoProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ServerInfoProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["server-info"]
}

func (p *ServerInfoProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ServerInfoProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ServerInfoProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ServerInfoProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ServerInfoProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerInfoProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerInfoProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerInfoProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerInfoProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerInfoProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerInfoProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerInfoProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerInfoProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerInfoProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerInfoProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerInfoProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerInfoProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerInfoProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerInfoProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerInfoProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *ServerInfoProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerInfoProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerInfoProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerInfoProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *ServerInfoProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerInfoProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerInfoProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerInfoProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *ServerInfoProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerInfoProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerInfoProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerInfoProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// ServerAddProxyLBParam is input parameters for the sacloud API
type ServerAddProxyLBParam struct {
	Ipaddress         string     `json:"ipaddress"`
	Disabled          bool       `json:"disabled"`
	Port              int        `json:"port"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewServerAddProxyLBParam return new ServerAddProxyLBParam
func NewServerAddProxyLBParam() *ServerAddProxyLBParam {
	return &ServerAddProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ServerAddProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if isEmpty(p.Disabled) {
		p.Disabled = false
	}
	if isEmpty(p.Port) {
		p.Port = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ServerAddProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["server-add"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["server-add"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ServerAddProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ServerAddProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["server-add"]
}

func (p *ServerAddProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ServerAddProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ServerAddProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ServerAddProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ServerAddProxyLBParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerAddProxyLBParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerAddProxyLBParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *ServerAddProxyLBParam) GetDisabled() bool {
	return p.Disabled
}
func (p *ServerAddProxyLBParam) SetPort(v int) {
	p.Port = v
}

func (p *ServerAddProxyLBParam) GetPort() int {
	return p.Port
}
func (p *ServerAddProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerAddProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerAddProxyLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerAddProxyLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerAddProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerAddProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerAddProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerAddProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerAddProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerAddProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerAddProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerAddProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerAddProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerAddProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerAddProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerAddProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerAddProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerAddProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *ServerAddProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerAddProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerAddProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerAddProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *ServerAddProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerAddProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerAddProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerAddProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *ServerAddProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerAddProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerAddProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerAddProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// ServerUpdateProxyLBParam is input parameters for the sacloud API
type ServerUpdateProxyLBParam struct {
	Index             int        `json:"index"`
	Ipaddress         string     `json:"ipaddress"`
	Disabled          bool       `json:"disabled"`
	Port              int        `json:"port"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewServerUpdateProxyLBParam return new ServerUpdateProxyLBParam
func NewServerUpdateProxyLBParam() *ServerUpdateProxyLBParam {
	return &ServerUpdateProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ServerUpdateProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Ipaddress) {
		p.Ipaddress = ""
	}
	if isEmpty(p.Disabled) {
		p.Disabled = false
	}
	if isEmpty(p.Port) {
		p.Port = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ServerUpdateProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["server-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["server-update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ServerUpdateProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ServerUpdateProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["server-update"]
}

func (p *ServerUpdateProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ServerUpdateProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ServerUpdateProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ServerUpdateProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ServerUpdateProxyLBParam) SetIndex(v int) {
	p.Index = v
}

func (p *ServerUpdateProxyLBParam) GetIndex() int {
	return p.Index
}
func (p *ServerUpdateProxyLBParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerUpdateProxyLBParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerUpdateProxyLBParam) SetDisabled(v bool) {
	p.Disabled = v
}

func (p *ServerUpdateProxyLBParam) GetDisabled() bool {
	return p.Disabled
}
func (p *ServerUpdateProxyLBParam) SetPort(v int) {
	p.Port = v
}

func (p *ServerUpdateProxyLBParam) GetPort() int {
	return p.Port
}
func (p *ServerUpdateProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerUpdateProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerUpdateProxyLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerUpdateProxyLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerUpdateProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerUpdateProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerUpdateProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerUpdateProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerUpdateProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerUpdateProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerUpdateProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerUpdateProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerUpdateProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerUpdateProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerUpdateProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerUpdateProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerUpdateProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerUpdateProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *ServerUpdateProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerUpdateProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerUpdateProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerUpdateProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *ServerUpdateProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerUpdateProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerUpdateProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerUpdateProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *ServerUpdateProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerUpdateProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerUpdateProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerUpdateProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// ServerDeleteProxyLBParam is input parameters for the sacloud API
type ServerDeleteProxyLBParam struct {
	Index             int        `json:"index"`
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewServerDeleteProxyLBParam return new ServerDeleteProxyLBParam
func NewServerDeleteProxyLBParam() *ServerDeleteProxyLBParam {
	return &ServerDeleteProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ServerDeleteProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *ServerDeleteProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ServerDeleteProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *ServerDeleteProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["server-delete"]
}

func (p *ServerDeleteProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ServerDeleteProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ServerDeleteProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ServerDeleteProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ServerDeleteProxyLBParam) SetIndex(v int) {
	p.Index = v
}

func (p *ServerDeleteProxyLBParam) GetIndex() int {
	return p.Index
}
func (p *ServerDeleteProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ServerDeleteProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *ServerDeleteProxyLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerDeleteProxyLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerDeleteProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerDeleteProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerDeleteProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *ServerDeleteProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *ServerDeleteProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerDeleteProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerDeleteProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *ServerDeleteProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *ServerDeleteProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ServerDeleteProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ServerDeleteProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerDeleteProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerDeleteProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerDeleteProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *ServerDeleteProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerDeleteProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerDeleteProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerDeleteProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *ServerDeleteProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerDeleteProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerDeleteProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *ServerDeleteProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *ServerDeleteProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *ServerDeleteProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *ServerDeleteProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *ServerDeleteProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// CertificateInfoProxyLBParam is input parameters for the sacloud API
type CertificateInfoProxyLBParam struct {
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewCertificateInfoProxyLBParam return new CertificateInfoProxyLBParam
func NewCertificateInfoProxyLBParam() *CertificateInfoProxyLBParam {
	return &CertificateInfoProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *CertificateInfoProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *CertificateInfoProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CertificateInfoProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *CertificateInfoProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["certificate-info"]
}

func (p *CertificateInfoProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CertificateInfoProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CertificateInfoProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CertificateInfoProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CertificateInfoProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *CertificateInfoProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *CertificateInfoProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CertificateInfoProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CertificateInfoProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CertificateInfoProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *CertificateInfoProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CertificateInfoProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CertificateInfoProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CertificateInfoProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CertificateInfoProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CertificateInfoProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CertificateInfoProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CertificateInfoProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *CertificateInfoProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CertificateInfoProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *CertificateInfoProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CertificateInfoProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CertificateInfoProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *CertificateInfoProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *CertificateInfoProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CertificateInfoProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CertificateInfoProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *CertificateInfoProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *CertificateInfoProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CertificateInfoProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *CertificateInfoProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *CertificateInfoProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// CertificateAddProxyLBParam is input parameters for the sacloud API
type CertificateAddProxyLBParam struct {
	ServerCertificate       string     `json:"server-certificate"`
	IntermediateCertificate string     `json:"intermediate-certificate"`
	PrivateKey              string     `json:"private-key"`
	Selector                []string   `json:"selector"`
	Assumeyes               bool       `json:"assumeyes"`
	ParamTemplate           string     `json:"param-template"`
	Parameters              string     `json:"parameters"`
	ParamTemplateFile       string     `json:"param-template-file"`
	ParameterFile           string     `json:"parameter-file"`
	GenerateSkeleton        bool       `json:"generate-skeleton"`
	OutputType              string     `json:"output-type"`
	Column                  []string   `json:"column"`
	Quiet                   bool       `json:"quiet"`
	Format                  string     `json:"format"`
	FormatFile              string     `json:"format-file"`
	Query                   string     `json:"query"`
	QueryFile               string     `json:"query-file"`
	Id                      sacloud.ID `json:"id"`
}

// NewCertificateAddProxyLBParam return new CertificateAddProxyLBParam
func NewCertificateAddProxyLBParam() *CertificateAddProxyLBParam {
	return &CertificateAddProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *CertificateAddProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.ServerCertificate) {
		p.ServerCertificate = ""
	}
	if isEmpty(p.IntermediateCertificate) {
		p.IntermediateCertificate = ""
	}
	if isEmpty(p.PrivateKey) {
		p.PrivateKey = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *CertificateAddProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--server-certificate", p.ServerCertificate)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--private-key", p.PrivateKey)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CertificateAddProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *CertificateAddProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["certificate-add"]
}

func (p *CertificateAddProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CertificateAddProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CertificateAddProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CertificateAddProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CertificateAddProxyLBParam) SetServerCertificate(v string) {
	p.ServerCertificate = v
}

func (p *CertificateAddProxyLBParam) GetServerCertificate() string {
	return p.ServerCertificate
}
func (p *CertificateAddProxyLBParam) SetIntermediateCertificate(v string) {
	p.IntermediateCertificate = v
}

func (p *CertificateAddProxyLBParam) GetIntermediateCertificate() string {
	return p.IntermediateCertificate
}
func (p *CertificateAddProxyLBParam) SetPrivateKey(v string) {
	p.PrivateKey = v
}

func (p *CertificateAddProxyLBParam) GetPrivateKey() string {
	return p.PrivateKey
}
func (p *CertificateAddProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *CertificateAddProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *CertificateAddProxyLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CertificateAddProxyLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CertificateAddProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CertificateAddProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CertificateAddProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CertificateAddProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *CertificateAddProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CertificateAddProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CertificateAddProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CertificateAddProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CertificateAddProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CertificateAddProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CertificateAddProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CertificateAddProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *CertificateAddProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CertificateAddProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *CertificateAddProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CertificateAddProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CertificateAddProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *CertificateAddProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *CertificateAddProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CertificateAddProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CertificateAddProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *CertificateAddProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *CertificateAddProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CertificateAddProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *CertificateAddProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *CertificateAddProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// CertificateUpdateProxyLBParam is input parameters for the sacloud API
type CertificateUpdateProxyLBParam struct {
	ServerCertificate       string     `json:"server-certificate"`
	IntermediateCertificate string     `json:"intermediate-certificate"`
	PrivateKey              string     `json:"private-key"`
	Selector                []string   `json:"selector"`
	Assumeyes               bool       `json:"assumeyes"`
	ParamTemplate           string     `json:"param-template"`
	Parameters              string     `json:"parameters"`
	ParamTemplateFile       string     `json:"param-template-file"`
	ParameterFile           string     `json:"parameter-file"`
	GenerateSkeleton        bool       `json:"generate-skeleton"`
	OutputType              string     `json:"output-type"`
	Column                  []string   `json:"column"`
	Quiet                   bool       `json:"quiet"`
	Format                  string     `json:"format"`
	FormatFile              string     `json:"format-file"`
	Query                   string     `json:"query"`
	QueryFile               string     `json:"query-file"`
	Id                      sacloud.ID `json:"id"`
}

// NewCertificateUpdateProxyLBParam return new CertificateUpdateProxyLBParam
func NewCertificateUpdateProxyLBParam() *CertificateUpdateProxyLBParam {
	return &CertificateUpdateProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *CertificateUpdateProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.ServerCertificate) {
		p.ServerCertificate = ""
	}
	if isEmpty(p.IntermediateCertificate) {
		p.IntermediateCertificate = ""
	}
	if isEmpty(p.PrivateKey) {
		p.PrivateKey = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *CertificateUpdateProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CertificateUpdateProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *CertificateUpdateProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["certificate-update"]
}

func (p *CertificateUpdateProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CertificateUpdateProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CertificateUpdateProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CertificateUpdateProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CertificateUpdateProxyLBParam) SetServerCertificate(v string) {
	p.ServerCertificate = v
}

func (p *CertificateUpdateProxyLBParam) GetServerCertificate() string {
	return p.ServerCertificate
}
func (p *CertificateUpdateProxyLBParam) SetIntermediateCertificate(v string) {
	p.IntermediateCertificate = v
}

func (p *CertificateUpdateProxyLBParam) GetIntermediateCertificate() string {
	return p.IntermediateCertificate
}
func (p *CertificateUpdateProxyLBParam) SetPrivateKey(v string) {
	p.PrivateKey = v
}

func (p *CertificateUpdateProxyLBParam) GetPrivateKey() string {
	return p.PrivateKey
}
func (p *CertificateUpdateProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *CertificateUpdateProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *CertificateUpdateProxyLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CertificateUpdateProxyLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CertificateUpdateProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CertificateUpdateProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CertificateUpdateProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CertificateUpdateProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *CertificateUpdateProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CertificateUpdateProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CertificateUpdateProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CertificateUpdateProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CertificateUpdateProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CertificateUpdateProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CertificateUpdateProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CertificateUpdateProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *CertificateUpdateProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CertificateUpdateProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *CertificateUpdateProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CertificateUpdateProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CertificateUpdateProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *CertificateUpdateProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *CertificateUpdateProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CertificateUpdateProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CertificateUpdateProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *CertificateUpdateProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *CertificateUpdateProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CertificateUpdateProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *CertificateUpdateProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *CertificateUpdateProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// CertificateDeleteProxyLBParam is input parameters for the sacloud API
type CertificateDeleteProxyLBParam struct {
	Selector          []string   `json:"selector"`
	Assumeyes         bool       `json:"assumeyes"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewCertificateDeleteProxyLBParam return new CertificateDeleteProxyLBParam
func NewCertificateDeleteProxyLBParam() *CertificateDeleteProxyLBParam {
	return &CertificateDeleteProxyLBParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *CertificateDeleteProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *CertificateDeleteProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CertificateDeleteProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *CertificateDeleteProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["certificate-delete"]
}

func (p *CertificateDeleteProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CertificateDeleteProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CertificateDeleteProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CertificateDeleteProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CertificateDeleteProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *CertificateDeleteProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *CertificateDeleteProxyLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CertificateDeleteProxyLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CertificateDeleteProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CertificateDeleteProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CertificateDeleteProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *CertificateDeleteProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *CertificateDeleteProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CertificateDeleteProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CertificateDeleteProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *CertificateDeleteProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *CertificateDeleteProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CertificateDeleteProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CertificateDeleteProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CertificateDeleteProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *CertificateDeleteProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CertificateDeleteProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *CertificateDeleteProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CertificateDeleteProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CertificateDeleteProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *CertificateDeleteProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *CertificateDeleteProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CertificateDeleteProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *CertificateDeleteProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *CertificateDeleteProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *CertificateDeleteProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *CertificateDeleteProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *CertificateDeleteProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *CertificateDeleteProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

// MonitorProxyLBParam is input parameters for the sacloud API
type MonitorProxyLBParam struct {
	Start             string     `json:"start"`
	End               string     `json:"end"`
	KeyFormat         string     `json:"key-format"`
	Selector          []string   `json:"selector"`
	ParamTemplate     string     `json:"param-template"`
	Parameters        string     `json:"parameters"`
	ParamTemplateFile string     `json:"param-template-file"`
	ParameterFile     string     `json:"parameter-file"`
	GenerateSkeleton  bool       `json:"generate-skeleton"`
	OutputType        string     `json:"output-type"`
	Column            []string   `json:"column"`
	Quiet             bool       `json:"quiet"`
	Format            string     `json:"format"`
	FormatFile        string     `json:"format-file"`
	Query             string     `json:"query"`
	QueryFile         string     `json:"query-file"`
	Id                sacloud.ID `json:"id"`
}

// NewMonitorProxyLBParam return new MonitorProxyLBParam
func NewMonitorProxyLBParam() *MonitorProxyLBParam {
	return &MonitorProxyLBParam{

		KeyFormat: "sakuracloud.proxylb.{{.ID}}",
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *MonitorProxyLBParam) FillValueToSkeleton() {
	if isEmpty(p.Start) {
		p.Start = ""
	}
	if isEmpty(p.End) {
		p.End = ""
	}
	if isEmpty(p.KeyFormat) {
		p.KeyFormat = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.Parameters) {
		p.Parameters = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.ParameterFile) {
		p.ParameterFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Query) {
		p.Query = ""
	}
	if isEmpty(p.QueryFile) {
		p.QueryFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = sacloud.ID(0)
	}

}

// Validate checks current values in model
func (p *MonitorProxyLBParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["ProxyLB"].Commands["monitor"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProxyLB"].Commands["monitor"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues(define.AllowOutputTypes...)
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *MonitorProxyLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProxyLB"]
}

func (p *MonitorProxyLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["monitor"]
}

func (p *MonitorProxyLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *MonitorProxyLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *MonitorProxyLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *MonitorProxyLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *MonitorProxyLBParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorProxyLBParam) GetStart() string {
	return p.Start
}
func (p *MonitorProxyLBParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorProxyLBParam) GetEnd() string {
	return p.End
}
func (p *MonitorProxyLBParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorProxyLBParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorProxyLBParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *MonitorProxyLBParam) GetSelector() []string {
	return p.Selector
}
func (p *MonitorProxyLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *MonitorProxyLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *MonitorProxyLBParam) SetParameters(v string) {
	p.Parameters = v
}

func (p *MonitorProxyLBParam) GetParameters() string {
	return p.Parameters
}
func (p *MonitorProxyLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *MonitorProxyLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *MonitorProxyLBParam) SetParameterFile(v string) {
	p.ParameterFile = v
}

func (p *MonitorProxyLBParam) GetParameterFile() string {
	return p.ParameterFile
}
func (p *MonitorProxyLBParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *MonitorProxyLBParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *MonitorProxyLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *MonitorProxyLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *MonitorProxyLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *MonitorProxyLBParam) GetColumn() []string {
	return p.Column
}
func (p *MonitorProxyLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *MonitorProxyLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *MonitorProxyLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *MonitorProxyLBParam) GetFormat() string {
	return p.Format
}
func (p *MonitorProxyLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *MonitorProxyLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *MonitorProxyLBParam) SetQuery(v string) {
	p.Query = v
}

func (p *MonitorProxyLBParam) GetQuery() string {
	return p.Query
}
func (p *MonitorProxyLBParam) SetQueryFile(v string) {
	p.QueryFile = v
}

func (p *MonitorProxyLBParam) GetQueryFile() string {
	return p.QueryFile
}
func (p *MonitorProxyLBParam) SetId(v sacloud.ID) {
	p.Id = v
}

func (p *MonitorProxyLBParam) GetId() sacloud.ID {
	return p.Id
}

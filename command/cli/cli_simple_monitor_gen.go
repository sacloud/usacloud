// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-commands'; DO NOT EDIT

package cli

import (
	"encoding/json"
	"fmt"
	"strings"
	"sync"

	"github.com/imdario/mergo"
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/funcs"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/schema"
	"gopkg.in/urfave/cli.v2"
)

func init() {
	simpleMonitorListParam := params.NewListSimpleMonitorParam()
	simpleMonitorCreateParam := params.NewCreateSimpleMonitorParam()
	simpleMonitorReadParam := params.NewReadSimpleMonitorParam()
	simpleMonitorUpdateParam := params.NewUpdateSimpleMonitorParam()
	simpleMonitorDeleteParam := params.NewDeleteSimpleMonitorParam()
	simpleMonitorHealthParam := params.NewHealthSimpleMonitorParam()

	cliCommand := &cli.Command{
		Name:  "simple-monitor",
		Usage: "A manage commands of SimpleMonitor",
		Subcommands: []*cli.Command{
			{
				Name:    "list",
				Aliases: []string{"ls", "find", "selector"},
				Usage:   "List SimpleMonitor",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "name",
						Usage: "set filter by name(s)",
					},
					&cli.Int64SliceFlag{
						Name:  "id",
						Usage: "set filter by id(s)",
					},
					&cli.StringSliceFlag{
						Name:    "tags",
						Aliases: []string{"selector"},
						Usage:   "set filter by tags(AND)",
					},
					&cli.StringFlag{
						Name:  "health",
						Usage: "set filter by HealthCheck Status('up' or 'down' or 'unknown')",
					},
					&cli.IntFlag{
						Name:    "from",
						Aliases: []string{"offset"},
						Usage:   "set offset",
					},
					&cli.IntFlag{
						Name:    "max",
						Aliases: []string{"limit"},
						Usage:   "set limit",
					},
					&cli.StringSliceFlag{
						Name:  "sort",
						Usage: "set field(s) for sort",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					simpleMonitorListParam.ParamTemplate = c.String("param-template")
					simpleMonitorListParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(simpleMonitorListParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewListSimpleMonitorParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(simpleMonitorListParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("name") {
						simpleMonitorListParam.Name = c.StringSlice("name")
					}
					if c.IsSet("id") {
						simpleMonitorListParam.Id = toSakuraIDs(c.Int64Slice("id"))
					}
					if c.IsSet("tags") {
						simpleMonitorListParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("health") {
						simpleMonitorListParam.Health = c.String("health")
					}
					if c.IsSet("from") {
						simpleMonitorListParam.From = c.Int("from")
					}
					if c.IsSet("max") {
						simpleMonitorListParam.Max = c.Int("max")
					}
					if c.IsSet("sort") {
						simpleMonitorListParam.Sort = c.StringSlice("sort")
					}
					if c.IsSet("param-template") {
						simpleMonitorListParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						simpleMonitorListParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						simpleMonitorListParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						simpleMonitorListParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						simpleMonitorListParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						simpleMonitorListParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						simpleMonitorListParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						simpleMonitorListParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						simpleMonitorListParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						simpleMonitorListParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						simpleMonitorListParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						simpleMonitorListParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = simpleMonitorListParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if simpleMonitorListParam.GenerateSkeleton {
						simpleMonitorListParam.GenerateSkeleton = false
						simpleMonitorListParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(simpleMonitorListParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := simpleMonitorListParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), simpleMonitorListParam)

					// Run command with params
					return funcs.SimpleMonitorList(ctx, simpleMonitorListParam)

				},
			},
			{
				Name:  "create",
				Usage: "Create SimpleMonitor",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "target",
						Usage: "[Required] set monitoring target IP or Hostname",
					},
					&cli.StringFlag{
						Name:  "protocol",
						Usage: "[Required] set monitoring protocol[http/https/ping/tcp/dns/ssh/smtp/pop3/ssl-certificate]",
						Value: "ping",
					},
					&cli.IntFlag{
						Name:  "port",
						Usage: "set port of tcp monitoring",
					},
					&cli.IntFlag{
						Name:  "delay-loop",
						Usage: "[Required] set delay-loop of monitoring(minute)",
						Value: 1,
					},
					&cli.BoolFlag{
						Name:  "disabled",
						Usage: "set monitoring disable",
					},
					&cli.StringFlag{
						Name:  "host-header",
						Usage: "set host header of http/https monitoring request",
					},
					&cli.StringFlag{
						Name:  "path",
						Usage: "set path of http/https monitoring request",
					},
					&cli.IntFlag{
						Name:  "response-code",
						Usage: "set response-code of http/https monitoring request",
					},
					&cli.BoolFlag{
						Name:  "sni",
						Usage: "enable SNI support for https monitoring",
						Value: false,
					},
					&cli.StringFlag{
						Name:    "username",
						Aliases: []string{"user"},
						Usage:   "set Basic Auth user name",
					},
					&cli.StringFlag{
						Name:    "password",
						Aliases: []string{"pass"},
						Usage:   "set Basic Auth password",
					},
					&cli.StringFlag{
						Name:  "dns-qname",
						Usage: "set DNS query target name",
					},
					&cli.StringFlag{
						Name:  "dns-excepted",
						Usage: "set DNS query excepted value",
					},
					&cli.IntFlag{
						Name:  "remaining-days",
						Usage: "set SSL-Certificate remaining days",
						Value: 30,
					},
					&cli.BoolFlag{
						Name:  "notify-email",
						Usage: "enable e-mail notification",
						Value: true,
					},
					&cli.StringFlag{
						Name:  "email-type",
						Usage: "set e-mail type",
						Value: "text",
					},
					&cli.StringFlag{
						Name:  "slack-webhook",
						Usage: "set slack-webhook URL",
					},
					&cli.IntFlag{
						Name:  "notify-interval",
						Usage: "set notify-interval(hours)",
						Value: 2,
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "set resource tags",
					},
					&cli.Int64Flag{
						Name:  "icon-id",
						Usage: "set Icon ID",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					simpleMonitorCreateParam.ParamTemplate = c.String("param-template")
					simpleMonitorCreateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(simpleMonitorCreateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCreateSimpleMonitorParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(simpleMonitorCreateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("target") {
						simpleMonitorCreateParam.Target = c.String("target")
					}
					if c.IsSet("protocol") {
						simpleMonitorCreateParam.Protocol = c.String("protocol")
					}
					if c.IsSet("port") {
						simpleMonitorCreateParam.Port = c.Int("port")
					}
					if c.IsSet("delay-loop") {
						simpleMonitorCreateParam.DelayLoop = c.Int("delay-loop")
					}
					if c.IsSet("disabled") {
						simpleMonitorCreateParam.Disabled = c.Bool("disabled")
					}
					if c.IsSet("host-header") {
						simpleMonitorCreateParam.HostHeader = c.String("host-header")
					}
					if c.IsSet("path") {
						simpleMonitorCreateParam.Path = c.String("path")
					}
					if c.IsSet("response-code") {
						simpleMonitorCreateParam.ResponseCode = c.Int("response-code")
					}
					if c.IsSet("sni") {
						simpleMonitorCreateParam.Sni = c.Bool("sni")
					}
					if c.IsSet("username") {
						simpleMonitorCreateParam.Username = c.String("username")
					}
					if c.IsSet("password") {
						simpleMonitorCreateParam.Password = c.String("password")
					}
					if c.IsSet("dns-qname") {
						simpleMonitorCreateParam.DNSQname = c.String("dns-qname")
					}
					if c.IsSet("dns-excepted") {
						simpleMonitorCreateParam.DNSExcepted = c.String("dns-excepted")
					}
					if c.IsSet("remaining-days") {
						simpleMonitorCreateParam.RemainingDays = c.Int("remaining-days")
					}
					if c.IsSet("notify-email") {
						simpleMonitorCreateParam.NotifyEmail = c.Bool("notify-email")
					}
					if c.IsSet("email-type") {
						simpleMonitorCreateParam.EmailType = c.String("email-type")
					}
					if c.IsSet("slack-webhook") {
						simpleMonitorCreateParam.SlackWebhook = c.String("slack-webhook")
					}
					if c.IsSet("notify-interval") {
						simpleMonitorCreateParam.NotifyInterval = c.Int("notify-interval")
					}
					if c.IsSet("description") {
						simpleMonitorCreateParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						simpleMonitorCreateParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						simpleMonitorCreateParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						simpleMonitorCreateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						simpleMonitorCreateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						simpleMonitorCreateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						simpleMonitorCreateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						simpleMonitorCreateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						simpleMonitorCreateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						simpleMonitorCreateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						simpleMonitorCreateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						simpleMonitorCreateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						simpleMonitorCreateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						simpleMonitorCreateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						simpleMonitorCreateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						simpleMonitorCreateParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = simpleMonitorCreateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if simpleMonitorCreateParam.GenerateSkeleton {
						simpleMonitorCreateParam.GenerateSkeleton = false
						simpleMonitorCreateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(simpleMonitorCreateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := simpleMonitorCreateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), simpleMonitorCreateParam)

					// confirm
					if !simpleMonitorCreateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("create") {
							return nil
						}
					}

					// Run command with params
					return funcs.SimpleMonitorCreate(ctx, simpleMonitorCreateParam)

				},
			},
			{
				Name:      "read",
				Usage:     "Read SimpleMonitor",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					simpleMonitorReadParam.ParamTemplate = c.String("param-template")
					simpleMonitorReadParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(simpleMonitorReadParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewReadSimpleMonitorParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(simpleMonitorReadParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						simpleMonitorReadParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						simpleMonitorReadParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						simpleMonitorReadParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						simpleMonitorReadParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						simpleMonitorReadParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						simpleMonitorReadParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						simpleMonitorReadParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						simpleMonitorReadParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						simpleMonitorReadParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						simpleMonitorReadParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						simpleMonitorReadParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						simpleMonitorReadParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						simpleMonitorReadParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						simpleMonitorReadParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = simpleMonitorReadParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if simpleMonitorReadParam.GenerateSkeleton {
						simpleMonitorReadParam.GenerateSkeleton = false
						simpleMonitorReadParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(simpleMonitorReadParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := simpleMonitorReadParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), simpleMonitorReadParam)

					apiClient := ctx.GetAPIClient().SimpleMonitor
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(simpleMonitorReadParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.SimpleMonitors {
							if hasTags(&v, simpleMonitorReadParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", simpleMonitorReadParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.SimpleMonitors {
										if len(simpleMonitorReadParam.Selector) == 0 || hasTags(&v, simpleMonitorReadParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						simpleMonitorReadParam.SetId(id)
						p := *simpleMonitorReadParam // copy struct value
						simpleMonitorReadParam := &p
						go func() {
							err := funcs.SimpleMonitorRead(ctx, simpleMonitorReadParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "update",
				Usage:     "Update SimpleMonitor",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "protocol",
						Usage: "set monitoring protocol[http/https/ping/tcp/dns/ssh/smtp/pop3/ssl-certificate]",
					},
					&cli.IntFlag{
						Name:  "port",
						Usage: "set port of tcp monitoring",
					},
					&cli.IntFlag{
						Name:  "delay-loop",
						Usage: "set delay-loop of monitoring(minute)",
					},
					&cli.BoolFlag{
						Name:  "disabled",
						Usage: "set monitoring enable/disable",
					},
					&cli.StringFlag{
						Name:  "host-header",
						Usage: "set host header of http/https monitoring request",
					},
					&cli.StringFlag{
						Name:  "path",
						Usage: "set path of http/https monitoring request",
					},
					&cli.IntFlag{
						Name:  "response-code",
						Usage: "set response-code of http/https monitoring request",
					},
					&cli.BoolFlag{
						Name:  "sni",
						Usage: "enable SNI support for https monitoring",
						Value: false,
					},
					&cli.StringFlag{
						Name:    "username",
						Aliases: []string{"user"},
						Usage:   "set Basic Auth user name",
					},
					&cli.StringFlag{
						Name:    "password",
						Aliases: []string{"pass"},
						Usage:   "set Basic Auth password",
					},
					&cli.StringFlag{
						Name:  "dns-qname",
						Usage: "set DNS query target name",
					},
					&cli.StringFlag{
						Name:  "dns-excepted",
						Usage: "set DNS query excepted value",
					},
					&cli.IntFlag{
						Name:  "remaining-days",
						Usage: "set SSL-Certificate remaining days",
					},
					&cli.BoolFlag{
						Name:  "notify-email",
						Usage: "enable e-mail notification",
					},
					&cli.StringFlag{
						Name:  "email-type",
						Usage: "set e-mail type",
					},
					&cli.StringFlag{
						Name:  "slack-webhook",
						Usage: "set slack-webhook URL",
					},
					&cli.IntFlag{
						Name:  "notify-interval",
						Usage: "set notify-interval(hours)",
						Value: 2,
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "set resource tags",
					},
					&cli.Int64Flag{
						Name:  "icon-id",
						Usage: "set Icon ID",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					simpleMonitorUpdateParam.ParamTemplate = c.String("param-template")
					simpleMonitorUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(simpleMonitorUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewUpdateSimpleMonitorParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(simpleMonitorUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("protocol") {
						simpleMonitorUpdateParam.Protocol = c.String("protocol")
					}
					if c.IsSet("port") {
						simpleMonitorUpdateParam.Port = c.Int("port")
					}
					if c.IsSet("delay-loop") {
						simpleMonitorUpdateParam.DelayLoop = c.Int("delay-loop")
					}
					if c.IsSet("disabled") {
						simpleMonitorUpdateParam.Disabled = c.Bool("disabled")
					}
					if c.IsSet("host-header") {
						simpleMonitorUpdateParam.HostHeader = c.String("host-header")
					}
					if c.IsSet("path") {
						simpleMonitorUpdateParam.Path = c.String("path")
					}
					if c.IsSet("response-code") {
						simpleMonitorUpdateParam.ResponseCode = c.Int("response-code")
					}
					if c.IsSet("sni") {
						simpleMonitorUpdateParam.Sni = c.Bool("sni")
					}
					if c.IsSet("username") {
						simpleMonitorUpdateParam.Username = c.String("username")
					}
					if c.IsSet("password") {
						simpleMonitorUpdateParam.Password = c.String("password")
					}
					if c.IsSet("dns-qname") {
						simpleMonitorUpdateParam.DNSQname = c.String("dns-qname")
					}
					if c.IsSet("dns-excepted") {
						simpleMonitorUpdateParam.DNSExcepted = c.String("dns-excepted")
					}
					if c.IsSet("remaining-days") {
						simpleMonitorUpdateParam.RemainingDays = c.Int("remaining-days")
					}
					if c.IsSet("notify-email") {
						simpleMonitorUpdateParam.NotifyEmail = c.Bool("notify-email")
					}
					if c.IsSet("email-type") {
						simpleMonitorUpdateParam.EmailType = c.String("email-type")
					}
					if c.IsSet("slack-webhook") {
						simpleMonitorUpdateParam.SlackWebhook = c.String("slack-webhook")
					}
					if c.IsSet("notify-interval") {
						simpleMonitorUpdateParam.NotifyInterval = c.Int("notify-interval")
					}
					if c.IsSet("selector") {
						simpleMonitorUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("description") {
						simpleMonitorUpdateParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						simpleMonitorUpdateParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						simpleMonitorUpdateParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						simpleMonitorUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						simpleMonitorUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						simpleMonitorUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						simpleMonitorUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						simpleMonitorUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						simpleMonitorUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						simpleMonitorUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						simpleMonitorUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						simpleMonitorUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						simpleMonitorUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						simpleMonitorUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						simpleMonitorUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						simpleMonitorUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						simpleMonitorUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = simpleMonitorUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if simpleMonitorUpdateParam.GenerateSkeleton {
						simpleMonitorUpdateParam.GenerateSkeleton = false
						simpleMonitorUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(simpleMonitorUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := simpleMonitorUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), simpleMonitorUpdateParam)

					apiClient := ctx.GetAPIClient().SimpleMonitor
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(simpleMonitorUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.SimpleMonitors {
							if hasTags(&v, simpleMonitorUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", simpleMonitorUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.SimpleMonitors {
										if len(simpleMonitorUpdateParam.Selector) == 0 || hasTags(&v, simpleMonitorUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !simpleMonitorUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						simpleMonitorUpdateParam.SetId(id)
						p := *simpleMonitorUpdateParam // copy struct value
						simpleMonitorUpdateParam := &p
						go func() {
							err := funcs.SimpleMonitorUpdate(ctx, simpleMonitorUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "delete",
				Aliases:   []string{"rm"},
				Usage:     "Delete SimpleMonitor",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					simpleMonitorDeleteParam.ParamTemplate = c.String("param-template")
					simpleMonitorDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(simpleMonitorDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDeleteSimpleMonitorParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(simpleMonitorDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						simpleMonitorDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						simpleMonitorDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						simpleMonitorDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						simpleMonitorDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						simpleMonitorDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						simpleMonitorDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						simpleMonitorDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						simpleMonitorDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						simpleMonitorDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						simpleMonitorDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						simpleMonitorDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						simpleMonitorDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						simpleMonitorDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						simpleMonitorDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						simpleMonitorDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = simpleMonitorDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if simpleMonitorDeleteParam.GenerateSkeleton {
						simpleMonitorDeleteParam.GenerateSkeleton = false
						simpleMonitorDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(simpleMonitorDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := simpleMonitorDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), simpleMonitorDeleteParam)

					apiClient := ctx.GetAPIClient().SimpleMonitor
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(simpleMonitorDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.SimpleMonitors {
							if hasTags(&v, simpleMonitorDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", simpleMonitorDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.SimpleMonitors {
										if len(simpleMonitorDeleteParam.Selector) == 0 || hasTags(&v, simpleMonitorDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !simpleMonitorDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						simpleMonitorDeleteParam.SetId(id)
						p := *simpleMonitorDeleteParam // copy struct value
						simpleMonitorDeleteParam := &p
						go func() {
							err := funcs.SimpleMonitorDelete(ctx, simpleMonitorDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "health",
				Usage:     "Health SimpleMonitor",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					simpleMonitorHealthParam.ParamTemplate = c.String("param-template")
					simpleMonitorHealthParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(simpleMonitorHealthParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewHealthSimpleMonitorParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(simpleMonitorHealthParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						simpleMonitorHealthParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						simpleMonitorHealthParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						simpleMonitorHealthParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						simpleMonitorHealthParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						simpleMonitorHealthParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						simpleMonitorHealthParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						simpleMonitorHealthParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						simpleMonitorHealthParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						simpleMonitorHealthParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						simpleMonitorHealthParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						simpleMonitorHealthParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						simpleMonitorHealthParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						simpleMonitorHealthParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						simpleMonitorHealthParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = simpleMonitorHealthParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if simpleMonitorHealthParam.GenerateSkeleton {
						simpleMonitorHealthParam.GenerateSkeleton = false
						simpleMonitorHealthParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(simpleMonitorHealthParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := simpleMonitorHealthParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), simpleMonitorHealthParam)

					apiClient := ctx.GetAPIClient().SimpleMonitor
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(simpleMonitorHealthParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.SimpleMonitors {
							if hasTags(&v, simpleMonitorHealthParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", simpleMonitorHealthParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.SimpleMonitors {
										if len(simpleMonitorHealthParam.Selector) == 0 || hasTags(&v, simpleMonitorHealthParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						simpleMonitorHealthParam.SetId(id)
						p := *simpleMonitorHealthParam // copy struct value
						simpleMonitorHealthParam := &p
						go func() {
							err := funcs.SimpleMonitorHealth(ctx, simpleMonitorHealthParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
		},
	}

	// build Category-Resource mapping
	AppendResourceCategoryMap("simple-monitor", &schema.Category{
		Key:         "commonserviceitem",
		DisplayName: "Common service items",
		Order:       50,
	})

	// build Category-Command mapping

	AppendCommandCategoryMap("simple-monitor", "create", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       1,
	})
	AppendCommandCategoryMap("simple-monitor", "delete", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       1,
	})
	AppendCommandCategoryMap("simple-monitor", "health", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       1,
	})
	AppendCommandCategoryMap("simple-monitor", "list", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       1,
	})
	AppendCommandCategoryMap("simple-monitor", "read", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       1,
	})
	AppendCommandCategoryMap("simple-monitor", "update", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       1,
	})

	// build Category-Param mapping

	AppendFlagCategoryMap("simple-monitor", "create", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "delay-loop", &schema.Category{
		Key:         "health-check",
		DisplayName: "Health-Check(Common) options",
		Order:       20,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "disabled", &schema.Category{
		Key:         "health-check",
		DisplayName: "Health-Check(Common) options",
		Order:       20,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "dns-excepted", &schema.Category{
		Key:         "dns-check",
		DisplayName: "Health-Check(DNS) options",
		Order:       24,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "dns-qname", &schema.Category{
		Key:         "dns-check",
		DisplayName: "Health-Check(DNS) options",
		Order:       24,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "email-type", &schema.Category{
		Key:         "notify",
		DisplayName: "Notify options",
		Order:       30,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "host-header", &schema.Category{
		Key:         "http-check",
		DisplayName: "Health-Check(HTTP/HTTPS) options",
		Order:       22,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "icon-id", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "notify-email", &schema.Category{
		Key:         "notify",
		DisplayName: "Notify options",
		Order:       30,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "notify-interval", &schema.Category{
		Key:         "notify",
		DisplayName: "Notify options",
		Order:       30,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "password", &schema.Category{
		Key:         "http-check",
		DisplayName: "Health-Check(HTTP/HTTPS) options",
		Order:       22,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "path", &schema.Category{
		Key:         "http-check",
		DisplayName: "Health-Check(HTTP/HTTPS) options",
		Order:       22,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "port", &schema.Category{
		Key:         "health-check",
		DisplayName: "Health-Check(Common) options",
		Order:       20,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "protocol", &schema.Category{
		Key:         "health-check",
		DisplayName: "Health-Check(Common) options",
		Order:       20,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "remaining-days", &schema.Category{
		Key:         "ssl-check",
		DisplayName: "Health-Check(SSL Certificate) options",
		Order:       26,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "response-code", &schema.Category{
		Key:         "http-check",
		DisplayName: "Health-Check(HTTP/HTTPS) options",
		Order:       22,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "slack-webhook", &schema.Category{
		Key:         "notify",
		DisplayName: "Notify options",
		Order:       30,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "sni", &schema.Category{
		Key:         "http-check",
		DisplayName: "Health-Check(HTTP/HTTPS) options",
		Order:       22,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "tags", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "target", &schema.Category{
		Key:         "monitor",
		DisplayName: "Simple-Monitor options",
		Order:       10,
	})
	AppendFlagCategoryMap("simple-monitor", "create", "username", &schema.Category{
		Key:         "http-check",
		DisplayName: "Health-Check(HTTP/HTTPS) options",
		Order:       22,
	})
	AppendFlagCategoryMap("simple-monitor", "delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("simple-monitor", "delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("simple-monitor", "health", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "health", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "health", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "health", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "health", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("simple-monitor", "health", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "health", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "health", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "health", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "health", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "health", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "health", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "health", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "health", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("simple-monitor", "list", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "list", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "list", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "list", "from", &schema.Category{
		Key:         "limit-offset",
		DisplayName: "Limit/Offset options",
		Order:       2147483597,
	})
	AppendFlagCategoryMap("simple-monitor", "list", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "list", "health", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("simple-monitor", "list", "id", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("simple-monitor", "list", "max", &schema.Category{
		Key:         "limit-offset",
		DisplayName: "Limit/Offset options",
		Order:       2147483597,
	})
	AppendFlagCategoryMap("simple-monitor", "list", "name", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("simple-monitor", "list", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "list", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "list", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "list", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "list", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "list", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "list", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "list", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "list", "sort", &schema.Category{
		Key:         "sort",
		DisplayName: "Sort options",
		Order:       2147483607,
	})
	AppendFlagCategoryMap("simple-monitor", "list", "tags", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("simple-monitor", "read", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "read", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "read", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "read", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "read", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("simple-monitor", "read", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "read", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "read", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "read", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "read", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "read", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "read", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "read", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "read", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "delay-loop", &schema.Category{
		Key:         "health-check",
		DisplayName: "Health-Check(Common) options",
		Order:       20,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "disabled", &schema.Category{
		Key:         "health-check",
		DisplayName: "Health-Check(Common) options",
		Order:       20,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "dns_excepted", &schema.Category{
		Key:         "dns-check",
		DisplayName: "Health-Check(DNS) options",
		Order:       24,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "dns_qname", &schema.Category{
		Key:         "dns-check",
		DisplayName: "Health-Check(DNS) options",
		Order:       24,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "email-type", &schema.Category{
		Key:         "notify",
		DisplayName: "Notify options",
		Order:       30,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "host-header", &schema.Category{
		Key:         "http-check",
		DisplayName: "Health-Check(HTTP/HTTPS) options",
		Order:       22,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "icon-id", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "notify-email", &schema.Category{
		Key:         "notify",
		DisplayName: "Notify options",
		Order:       30,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "notify-interval", &schema.Category{
		Key:         "notify",
		DisplayName: "Notify options",
		Order:       30,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "password", &schema.Category{
		Key:         "http-check",
		DisplayName: "Health-Check(HTTP/HTTPS) options",
		Order:       22,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "path", &schema.Category{
		Key:         "http-check",
		DisplayName: "Health-Check(HTTP/HTTPS) options",
		Order:       22,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "port", &schema.Category{
		Key:         "health-check",
		DisplayName: "Health-Check(Common) options",
		Order:       20,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "protocol", &schema.Category{
		Key:         "health-check",
		DisplayName: "Health-Check(Common) options",
		Order:       20,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "remaining-days", &schema.Category{
		Key:         "ssl-check",
		DisplayName: "Health-Check(SSL Certificate) options",
		Order:       26,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "response-code", &schema.Category{
		Key:         "http-check",
		DisplayName: "Health-Check(HTTP/HTTPS) options",
		Order:       22,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "slack-webhook", &schema.Category{
		Key:         "notify",
		DisplayName: "Notify options",
		Order:       30,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "sni", &schema.Category{
		Key:         "http-check",
		DisplayName: "Health-Check(HTTP/HTTPS) options",
		Order:       22,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "tags", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("simple-monitor", "update", "username", &schema.Category{
		Key:         "http-check",
		DisplayName: "Health-Check(HTTP/HTTPS) options",
		Order:       22,
	})

	// append command to GlobalContext
	Commands = append(Commands, cliCommand)
}

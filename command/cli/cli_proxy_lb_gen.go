// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-commands'; DO NOT EDIT

package cli

import (
	"encoding/json"
	"fmt"
	"strings"
	"sync"

	"github.com/imdario/mergo"
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/funcs"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/schema"
	"gopkg.in/urfave/cli.v2"
)

func init() {
	proxylbListParam := params.NewListProxylbParam()
	proxylbCreateParam := params.NewCreateProxylbParam()
	proxylbReadParam := params.NewReadProxylbParam()
	proxylbUpdateParam := params.NewUpdateProxylbParam()
	proxylbDeleteParam := params.NewDeleteProxylbParam()
	proxylbPlanChangeParam := params.NewPlanChangeProxylbParam()
	proxylbBindPortInfoParam := params.NewBindPortInfoProxylbParam()
	proxylbBindPortAddParam := params.NewBindPortAddProxylbParam()
	proxylbBindPortUpdateParam := params.NewBindPortUpdateProxylbParam()
	proxylbBindPortDeleteParam := params.NewBindPortDeleteProxylbParam()
	proxylbResponseHeaderInfoParam := params.NewResponseHeaderInfoProxylbParam()
	proxylbResponseHeaderAddParam := params.NewResponseHeaderAddProxylbParam()
	proxylbResponseHeaderUpdateParam := params.NewResponseHeaderUpdateProxylbParam()
	proxylbResponseHeaderDeleteParam := params.NewResponseHeaderDeleteProxylbParam()
	proxylbAcmeInfoParam := params.NewAcmeInfoProxylbParam()
	proxylbAcmeSettingParam := params.NewAcmeSettingProxylbParam()
	proxylbAcmeRenewParam := params.NewAcmeRenewProxylbParam()
	proxylbServerInfoParam := params.NewServerInfoProxylbParam()
	proxylbServerAddParam := params.NewServerAddProxylbParam()
	proxylbServerUpdateParam := params.NewServerUpdateProxylbParam()
	proxylbServerDeleteParam := params.NewServerDeleteProxylbParam()
	proxylbCertificateInfoParam := params.NewCertificateInfoProxylbParam()
	proxylbCertificateAddParam := params.NewCertificateAddProxylbParam()
	proxylbCertificateUpdateParam := params.NewCertificateUpdateProxylbParam()
	proxylbCertificateDeleteParam := params.NewCertificateDeleteProxylbParam()
	proxylbMonitorParam := params.NewMonitorProxylbParam()

	cliCommand := &cli.Command{
		Name:    "proxy-lb",
		Aliases: []string{"enhanced-load-balancer", "proxylb"},
		Usage:   "A manage commands of ProxyLB",
		Subcommands: []*cli.Command{
			{
				Name:    "list",
				Aliases: []string{"ls", "find", "selector"},
				Usage:   "List Proxylb",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "name",
						Usage: "set filter by name(s)",
					},
					&cli.Int64SliceFlag{
						Name:  "id",
						Usage: "set filter by id(s)",
					},
					&cli.StringSliceFlag{
						Name:    "tags",
						Aliases: []string{"selector"},
						Usage:   "set filter by tags(AND)",
					},
					&cli.IntFlag{
						Name:    "from",
						Aliases: []string{"offset"},
						Usage:   "set offset",
					},
					&cli.IntFlag{
						Name:    "max",
						Aliases: []string{"limit"},
						Usage:   "set limit",
					},
					&cli.StringSliceFlag{
						Name:  "sort",
						Usage: "set field(s) for sort",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbListParam.ParamTemplate = c.String("param-template")
					proxylbListParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbListParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewListProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbListParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("name") {
						proxylbListParam.Name = c.StringSlice("name")
					}
					if c.IsSet("id") {
						proxylbListParam.Id = toSakuraIDs(c.Int64Slice("id"))
					}
					if c.IsSet("tags") {
						proxylbListParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("from") {
						proxylbListParam.From = c.Int("from")
					}
					if c.IsSet("max") {
						proxylbListParam.Max = c.Int("max")
					}
					if c.IsSet("sort") {
						proxylbListParam.Sort = c.StringSlice("sort")
					}
					if c.IsSet("param-template") {
						proxylbListParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbListParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbListParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbListParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbListParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbListParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbListParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbListParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbListParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbListParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbListParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbListParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbListParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbListParam.GenerateSkeleton {
						proxylbListParam.GenerateSkeleton = false
						proxylbListParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbListParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbListParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbListParam)

					// Run command with params
					return funcs.ProxylbList(ctx, proxylbListParam)

				},
			},
			{
				Name:  "create",
				Usage: "Create Proxylb",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "plan",
						Usage: "set plan",
						Value: 1000,
					},
					&cli.StringFlag{
						Name:  "protocol",
						Usage: "[Required] set healthcheck protocol[http/tcp]",
						Value: "tcp",
					},
					&cli.StringFlag{
						Name:  "host-header",
						Usage: "set host header of http/https healthcheck request",
					},
					&cli.StringFlag{
						Name:  "path",
						Usage: "set path of http/https healthcheck request",
						Value: "/",
					},
					&cli.IntFlag{
						Name:  "delay-loop",
						Usage: "[Required] set delay-loop of healthcheck",
						Value: 10,
					},
					&cli.BoolFlag{
						Name:  "sticky-session",
						Usage: "enable sticky-session",
					},
					&cli.StringFlag{
						Name:  "sorry-server-ipaddress",
						Usage: "set sorry-server ip address",
					},
					&cli.IntFlag{
						Name:  "sorry-server-port",
						Usage: "set sorry-server ports",
					},
					&cli.IntFlag{
						Name:  "timeout",
						Usage: "set timeout",
						Value: 10,
					},
					&cli.StringFlag{
						Name:  "name",
						Usage: "[Required] set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "set resource tags",
					},
					&cli.Int64Flag{
						Name:  "icon-id",
						Usage: "set Icon ID",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbCreateParam.ParamTemplate = c.String("param-template")
					proxylbCreateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbCreateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCreateProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbCreateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("plan") {
						proxylbCreateParam.Plan = c.Int("plan")
					}
					if c.IsSet("protocol") {
						proxylbCreateParam.Protocol = c.String("protocol")
					}
					if c.IsSet("host-header") {
						proxylbCreateParam.HostHeader = c.String("host-header")
					}
					if c.IsSet("path") {
						proxylbCreateParam.Path = c.String("path")
					}
					if c.IsSet("delay-loop") {
						proxylbCreateParam.DelayLoop = c.Int("delay-loop")
					}
					if c.IsSet("sticky-session") {
						proxylbCreateParam.StickySession = c.Bool("sticky-session")
					}
					if c.IsSet("sorry-server-ipaddress") {
						proxylbCreateParam.SorryServerIpaddress = c.String("sorry-server-ipaddress")
					}
					if c.IsSet("sorry-server-port") {
						proxylbCreateParam.SorryServerPort = c.Int("sorry-server-port")
					}
					if c.IsSet("timeout") {
						proxylbCreateParam.Timeout = c.Int("timeout")
					}
					if c.IsSet("name") {
						proxylbCreateParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						proxylbCreateParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						proxylbCreateParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						proxylbCreateParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						proxylbCreateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxylbCreateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbCreateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbCreateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbCreateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbCreateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbCreateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbCreateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbCreateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbCreateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbCreateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbCreateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbCreateParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbCreateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbCreateParam.GenerateSkeleton {
						proxylbCreateParam.GenerateSkeleton = false
						proxylbCreateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbCreateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbCreateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbCreateParam)

					// confirm
					if !proxylbCreateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("create") {
							return nil
						}
					}

					// Run command with params
					return funcs.ProxylbCreate(ctx, proxylbCreateParam)

				},
			},
			{
				Name:      "read",
				Usage:     "Read Proxylb",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbReadParam.ParamTemplate = c.String("param-template")
					proxylbReadParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbReadParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewReadProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbReadParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						proxylbReadParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						proxylbReadParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbReadParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbReadParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbReadParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbReadParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbReadParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbReadParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbReadParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbReadParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbReadParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbReadParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbReadParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbReadParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbReadParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbReadParam.GenerateSkeleton {
						proxylbReadParam.GenerateSkeleton = false
						proxylbReadParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbReadParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbReadParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbReadParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbReadParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbReadParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbReadParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbReadParam.Selector) == 0 || hasTags(&v, proxylbReadParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbReadParam.SetId(id)
						p := *proxylbReadParam // copy struct value
						proxylbReadParam := &p
						go func() {
							err := funcs.ProxylbRead(ctx, proxylbReadParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "update",
				Usage:     "Update Proxylb",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "protocol",
						Usage: "set healthcheck protocol[http/tcp]",
					},
					&cli.StringFlag{
						Name:  "host-header",
						Usage: "set host header of http/https healthcheck request",
					},
					&cli.StringFlag{
						Name:  "path",
						Usage: "set path of http/https healthcheck request",
					},
					&cli.IntFlag{
						Name:  "delay-loop",
						Usage: "set delay-loop of healthcheck",
					},
					&cli.BoolFlag{
						Name:  "sticky-session",
						Usage: "enable sticky-session",
					},
					&cli.StringFlag{
						Name:  "sorry-server-ipaddress",
						Usage: "set sorry-server ip address",
					},
					&cli.IntFlag{
						Name:  "sorry-server-port",
						Usage: "set sorry-server ports",
					},
					&cli.IntFlag{
						Name:  "timeout",
						Usage: "set timeout",
						Value: 10,
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "name",
						Usage: "set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "set resource tags",
					},
					&cli.Int64Flag{
						Name:  "icon-id",
						Usage: "set Icon ID",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbUpdateParam.ParamTemplate = c.String("param-template")
					proxylbUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewUpdateProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("protocol") {
						proxylbUpdateParam.Protocol = c.String("protocol")
					}
					if c.IsSet("host-header") {
						proxylbUpdateParam.HostHeader = c.String("host-header")
					}
					if c.IsSet("path") {
						proxylbUpdateParam.Path = c.String("path")
					}
					if c.IsSet("delay-loop") {
						proxylbUpdateParam.DelayLoop = c.Int("delay-loop")
					}
					if c.IsSet("sticky-session") {
						proxylbUpdateParam.StickySession = c.Bool("sticky-session")
					}
					if c.IsSet("sorry-server-ipaddress") {
						proxylbUpdateParam.SorryServerIpaddress = c.String("sorry-server-ipaddress")
					}
					if c.IsSet("sorry-server-port") {
						proxylbUpdateParam.SorryServerPort = c.Int("sorry-server-port")
					}
					if c.IsSet("timeout") {
						proxylbUpdateParam.Timeout = c.Int("timeout")
					}
					if c.IsSet("selector") {
						proxylbUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("name") {
						proxylbUpdateParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						proxylbUpdateParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						proxylbUpdateParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						proxylbUpdateParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						proxylbUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxylbUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbUpdateParam.GenerateSkeleton {
						proxylbUpdateParam.GenerateSkeleton = false
						proxylbUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbUpdateParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbUpdateParam.Selector) == 0 || hasTags(&v, proxylbUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !proxylbUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbUpdateParam.SetId(id)
						p := *proxylbUpdateParam // copy struct value
						proxylbUpdateParam := &p
						go func() {
							err := funcs.ProxylbUpdate(ctx, proxylbUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "delete",
				Aliases:   []string{"rm"},
				Usage:     "Delete Proxylb",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbDeleteParam.ParamTemplate = c.String("param-template")
					proxylbDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDeleteProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						proxylbDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxylbDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxylbDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbDeleteParam.GenerateSkeleton {
						proxylbDeleteParam.GenerateSkeleton = false
						proxylbDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbDeleteParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbDeleteParam.Selector) == 0 || hasTags(&v, proxylbDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !proxylbDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbDeleteParam.SetId(id)
						p := *proxylbDeleteParam // copy struct value
						proxylbDeleteParam := &p
						go func() {
							err := funcs.ProxylbDelete(ctx, proxylbDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "plan-change",
				Usage:     "Change ProxyLB plan",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "plan",
						Usage: "[Required] set plan",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbPlanChangeParam.ParamTemplate = c.String("param-template")
					proxylbPlanChangeParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbPlanChangeParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewPlanChangeProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbPlanChangeParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("plan") {
						proxylbPlanChangeParam.Plan = c.Int("plan")
					}
					if c.IsSet("selector") {
						proxylbPlanChangeParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxylbPlanChangeParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxylbPlanChangeParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbPlanChangeParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbPlanChangeParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbPlanChangeParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbPlanChangeParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbPlanChangeParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbPlanChangeParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbPlanChangeParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbPlanChangeParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbPlanChangeParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbPlanChangeParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbPlanChangeParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbPlanChangeParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbPlanChangeParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbPlanChangeParam.GenerateSkeleton {
						proxylbPlanChangeParam.GenerateSkeleton = false
						proxylbPlanChangeParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbPlanChangeParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbPlanChangeParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbPlanChangeParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbPlanChangeParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbPlanChangeParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbPlanChangeParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbPlanChangeParam.Selector) == 0 || hasTags(&v, proxylbPlanChangeParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !proxylbPlanChangeParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("plan-change", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbPlanChangeParam.SetId(id)
						p := *proxylbPlanChangeParam // copy struct value
						proxylbPlanChangeParam := &p
						go func() {
							err := funcs.ProxylbPlanChange(ctx, proxylbPlanChangeParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "bind-port-info",
				Aliases:   []string{"bind-port-list"},
				Usage:     "BindPortInfo Proxylb",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbBindPortInfoParam.ParamTemplate = c.String("param-template")
					proxylbBindPortInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbBindPortInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBindPortInfoProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbBindPortInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						proxylbBindPortInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						proxylbBindPortInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbBindPortInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbBindPortInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbBindPortInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbBindPortInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbBindPortInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbBindPortInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbBindPortInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbBindPortInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbBindPortInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbBindPortInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbBindPortInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbBindPortInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbBindPortInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbBindPortInfoParam.GenerateSkeleton {
						proxylbBindPortInfoParam.GenerateSkeleton = false
						proxylbBindPortInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbBindPortInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbBindPortInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbBindPortInfoParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbBindPortInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbBindPortInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbBindPortInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbBindPortInfoParam.Selector) == 0 || hasTags(&v, proxylbBindPortInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbBindPortInfoParam.SetId(id)
						p := *proxylbBindPortInfoParam // copy struct value
						proxylbBindPortInfoParam := &p
						go func() {
							err := funcs.ProxylbBindPortInfo(ctx, proxylbBindPortInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "bind-port-add",
				Usage:     "BindPortAdd Proxylb",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "mode",
						Usage: "[Required] set bind mode[http/https/tcp]",
					},
					&cli.IntFlag{
						Name:  "port",
						Usage: "[Required] set port number",
					},
					&cli.BoolFlag{
						Name:  "redirect-to-https",
						Usage: "enable to redirect to https",
					},
					&cli.BoolFlag{
						Name:  "support-http-2",
						Usage: "enable http/2",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbBindPortAddParam.ParamTemplate = c.String("param-template")
					proxylbBindPortAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbBindPortAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBindPortAddProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbBindPortAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("mode") {
						proxylbBindPortAddParam.Mode = c.String("mode")
					}
					if c.IsSet("port") {
						proxylbBindPortAddParam.Port = c.Int("port")
					}
					if c.IsSet("redirect-to-https") {
						proxylbBindPortAddParam.RedirectToHttps = c.Bool("redirect-to-https")
					}
					if c.IsSet("support-http-2") {
						proxylbBindPortAddParam.SupportHttp2 = c.Bool("support-http-2")
					}
					if c.IsSet("selector") {
						proxylbBindPortAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxylbBindPortAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxylbBindPortAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbBindPortAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbBindPortAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbBindPortAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbBindPortAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbBindPortAddParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbBindPortAddParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbBindPortAddParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbBindPortAddParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbBindPortAddParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbBindPortAddParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbBindPortAddParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbBindPortAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbBindPortAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbBindPortAddParam.GenerateSkeleton {
						proxylbBindPortAddParam.GenerateSkeleton = false
						proxylbBindPortAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbBindPortAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbBindPortAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbBindPortAddParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbBindPortAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbBindPortAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbBindPortAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbBindPortAddParam.Selector) == 0 || hasTags(&v, proxylbBindPortAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxylbBindPortAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("bind-port-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbBindPortAddParam.SetId(id)
						p := *proxylbBindPortAddParam // copy struct value
						proxylbBindPortAddParam := &p
						go func() {
							err := funcs.ProxylbBindPortAdd(ctx, proxylbBindPortAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "bind-port-update",
				Usage:     "BindPortUpdate Proxylb",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target server",
					},
					&cli.StringFlag{
						Name:  "mode",
						Usage: "set bind mode[http/https/tcp]",
					},
					&cli.IntFlag{
						Name:  "port",
						Usage: "set port number",
					},
					&cli.BoolFlag{
						Name:  "redirect-to-https",
						Usage: "enable to redirect to https",
					},
					&cli.BoolFlag{
						Name:  "support-http-2",
						Usage: "enable http/2",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbBindPortUpdateParam.ParamTemplate = c.String("param-template")
					proxylbBindPortUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbBindPortUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBindPortUpdateProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbBindPortUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						proxylbBindPortUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("mode") {
						proxylbBindPortUpdateParam.Mode = c.String("mode")
					}
					if c.IsSet("port") {
						proxylbBindPortUpdateParam.Port = c.Int("port")
					}
					if c.IsSet("redirect-to-https") {
						proxylbBindPortUpdateParam.RedirectToHttps = c.Bool("redirect-to-https")
					}
					if c.IsSet("support-http-2") {
						proxylbBindPortUpdateParam.SupportHttp2 = c.Bool("support-http-2")
					}
					if c.IsSet("selector") {
						proxylbBindPortUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxylbBindPortUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxylbBindPortUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbBindPortUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbBindPortUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbBindPortUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbBindPortUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbBindPortUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbBindPortUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbBindPortUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbBindPortUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbBindPortUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbBindPortUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbBindPortUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbBindPortUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbBindPortUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbBindPortUpdateParam.GenerateSkeleton {
						proxylbBindPortUpdateParam.GenerateSkeleton = false
						proxylbBindPortUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbBindPortUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbBindPortUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbBindPortUpdateParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbBindPortUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbBindPortUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbBindPortUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbBindPortUpdateParam.Selector) == 0 || hasTags(&v, proxylbBindPortUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxylbBindPortUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("bind-port-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbBindPortUpdateParam.SetId(id)
						p := *proxylbBindPortUpdateParam // copy struct value
						proxylbBindPortUpdateParam := &p
						go func() {
							err := funcs.ProxylbBindPortUpdate(ctx, proxylbBindPortUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "bind-port-delete",
				Usage:     "BindPortDelete Proxylb",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target bind-port",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbBindPortDeleteParam.ParamTemplate = c.String("param-template")
					proxylbBindPortDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbBindPortDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBindPortDeleteProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbBindPortDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						proxylbBindPortDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						proxylbBindPortDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxylbBindPortDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxylbBindPortDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbBindPortDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbBindPortDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbBindPortDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbBindPortDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbBindPortDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbBindPortDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbBindPortDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbBindPortDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbBindPortDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbBindPortDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbBindPortDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbBindPortDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbBindPortDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbBindPortDeleteParam.GenerateSkeleton {
						proxylbBindPortDeleteParam.GenerateSkeleton = false
						proxylbBindPortDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbBindPortDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbBindPortDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbBindPortDeleteParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbBindPortDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbBindPortDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbBindPortDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbBindPortDeleteParam.Selector) == 0 || hasTags(&v, proxylbBindPortDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxylbBindPortDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete bind-port", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbBindPortDeleteParam.SetId(id)
						p := *proxylbBindPortDeleteParam // copy struct value
						proxylbBindPortDeleteParam := &p
						go func() {
							err := funcs.ProxylbBindPortDelete(ctx, proxylbBindPortDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "response-header-info",
				Aliases:   []string{"response-header-list"},
				Usage:     "ResponseHeaderInfo Proxylb",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "port-index",
						Usage: "[Required] index of target bind-port",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbResponseHeaderInfoParam.ParamTemplate = c.String("param-template")
					proxylbResponseHeaderInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbResponseHeaderInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewResponseHeaderInfoProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbResponseHeaderInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("port-index") {
						proxylbResponseHeaderInfoParam.PortIndex = c.Int("port-index")
					}
					if c.IsSet("selector") {
						proxylbResponseHeaderInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						proxylbResponseHeaderInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbResponseHeaderInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbResponseHeaderInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbResponseHeaderInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbResponseHeaderInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbResponseHeaderInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbResponseHeaderInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbResponseHeaderInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbResponseHeaderInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbResponseHeaderInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbResponseHeaderInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbResponseHeaderInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbResponseHeaderInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbResponseHeaderInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbResponseHeaderInfoParam.GenerateSkeleton {
						proxylbResponseHeaderInfoParam.GenerateSkeleton = false
						proxylbResponseHeaderInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbResponseHeaderInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbResponseHeaderInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbResponseHeaderInfoParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbResponseHeaderInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbResponseHeaderInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbResponseHeaderInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbResponseHeaderInfoParam.Selector) == 0 || hasTags(&v, proxylbResponseHeaderInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbResponseHeaderInfoParam.SetId(id)
						p := *proxylbResponseHeaderInfoParam // copy struct value
						proxylbResponseHeaderInfoParam := &p
						go func() {
							err := funcs.ProxylbResponseHeaderInfo(ctx, proxylbResponseHeaderInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "response-header-add",
				Usage:     "ResponseHeaderAdd Proxylb",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "port-index",
						Usage: "[Required] index of target bind-port",
					},
					&cli.StringFlag{
						Name:  "header",
						Usage: "[Required] set Header",
					},
					&cli.StringFlag{
						Name:  "value",
						Usage: "[Required] set Value",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbResponseHeaderAddParam.ParamTemplate = c.String("param-template")
					proxylbResponseHeaderAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbResponseHeaderAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewResponseHeaderAddProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbResponseHeaderAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("port-index") {
						proxylbResponseHeaderAddParam.PortIndex = c.Int("port-index")
					}
					if c.IsSet("header") {
						proxylbResponseHeaderAddParam.Header = c.String("header")
					}
					if c.IsSet("value") {
						proxylbResponseHeaderAddParam.Value = c.String("value")
					}
					if c.IsSet("selector") {
						proxylbResponseHeaderAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxylbResponseHeaderAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxylbResponseHeaderAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbResponseHeaderAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbResponseHeaderAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbResponseHeaderAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbResponseHeaderAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbResponseHeaderAddParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbResponseHeaderAddParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbResponseHeaderAddParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbResponseHeaderAddParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbResponseHeaderAddParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbResponseHeaderAddParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbResponseHeaderAddParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbResponseHeaderAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbResponseHeaderAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbResponseHeaderAddParam.GenerateSkeleton {
						proxylbResponseHeaderAddParam.GenerateSkeleton = false
						proxylbResponseHeaderAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbResponseHeaderAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbResponseHeaderAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbResponseHeaderAddParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbResponseHeaderAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbResponseHeaderAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbResponseHeaderAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbResponseHeaderAddParam.Selector) == 0 || hasTags(&v, proxylbResponseHeaderAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxylbResponseHeaderAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("response-header-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbResponseHeaderAddParam.SetId(id)
						p := *proxylbResponseHeaderAddParam // copy struct value
						proxylbResponseHeaderAddParam := &p
						go func() {
							err := funcs.ProxylbResponseHeaderAdd(ctx, proxylbResponseHeaderAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "response-header-update",
				Usage:     "ResponseHeaderUpdate Proxylb",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target server",
					},
					&cli.IntFlag{
						Name:  "port-index",
						Usage: "[Required] index of target bind-port",
					},
					&cli.StringFlag{
						Name:  "header",
						Usage: "set Header",
					},
					&cli.StringFlag{
						Name:  "value",
						Usage: "set Value",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbResponseHeaderUpdateParam.ParamTemplate = c.String("param-template")
					proxylbResponseHeaderUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbResponseHeaderUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewResponseHeaderUpdateProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbResponseHeaderUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						proxylbResponseHeaderUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("port-index") {
						proxylbResponseHeaderUpdateParam.PortIndex = c.Int("port-index")
					}
					if c.IsSet("header") {
						proxylbResponseHeaderUpdateParam.Header = c.String("header")
					}
					if c.IsSet("value") {
						proxylbResponseHeaderUpdateParam.Value = c.String("value")
					}
					if c.IsSet("selector") {
						proxylbResponseHeaderUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxylbResponseHeaderUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxylbResponseHeaderUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbResponseHeaderUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbResponseHeaderUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbResponseHeaderUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbResponseHeaderUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbResponseHeaderUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbResponseHeaderUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbResponseHeaderUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbResponseHeaderUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbResponseHeaderUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbResponseHeaderUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbResponseHeaderUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbResponseHeaderUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbResponseHeaderUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbResponseHeaderUpdateParam.GenerateSkeleton {
						proxylbResponseHeaderUpdateParam.GenerateSkeleton = false
						proxylbResponseHeaderUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbResponseHeaderUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbResponseHeaderUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbResponseHeaderUpdateParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbResponseHeaderUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbResponseHeaderUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbResponseHeaderUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbResponseHeaderUpdateParam.Selector) == 0 || hasTags(&v, proxylbResponseHeaderUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxylbResponseHeaderUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("response-header-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbResponseHeaderUpdateParam.SetId(id)
						p := *proxylbResponseHeaderUpdateParam // copy struct value
						proxylbResponseHeaderUpdateParam := &p
						go func() {
							err := funcs.ProxylbResponseHeaderUpdate(ctx, proxylbResponseHeaderUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "response-header-delete",
				Usage:     "ResponseHeaderDelete Proxylb",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target bind-port",
					},
					&cli.IntFlag{
						Name:  "port-index",
						Usage: "[Required] index of target bind-port",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbResponseHeaderDeleteParam.ParamTemplate = c.String("param-template")
					proxylbResponseHeaderDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbResponseHeaderDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewResponseHeaderDeleteProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbResponseHeaderDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						proxylbResponseHeaderDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("port-index") {
						proxylbResponseHeaderDeleteParam.PortIndex = c.Int("port-index")
					}
					if c.IsSet("selector") {
						proxylbResponseHeaderDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxylbResponseHeaderDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxylbResponseHeaderDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbResponseHeaderDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbResponseHeaderDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbResponseHeaderDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbResponseHeaderDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbResponseHeaderDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbResponseHeaderDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbResponseHeaderDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbResponseHeaderDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbResponseHeaderDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbResponseHeaderDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbResponseHeaderDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbResponseHeaderDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbResponseHeaderDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbResponseHeaderDeleteParam.GenerateSkeleton {
						proxylbResponseHeaderDeleteParam.GenerateSkeleton = false
						proxylbResponseHeaderDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbResponseHeaderDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbResponseHeaderDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbResponseHeaderDeleteParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbResponseHeaderDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbResponseHeaderDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbResponseHeaderDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbResponseHeaderDeleteParam.Selector) == 0 || hasTags(&v, proxylbResponseHeaderDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxylbResponseHeaderDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete response-header", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbResponseHeaderDeleteParam.SetId(id)
						p := *proxylbResponseHeaderDeleteParam // copy struct value
						proxylbResponseHeaderDeleteParam := &p
						go func() {
							err := funcs.ProxylbResponseHeaderDelete(ctx, proxylbResponseHeaderDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "acme-info",
				Usage:     "AcmeInfo Proxylb",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbAcmeInfoParam.ParamTemplate = c.String("param-template")
					proxylbAcmeInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbAcmeInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewAcmeInfoProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbAcmeInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						proxylbAcmeInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						proxylbAcmeInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbAcmeInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbAcmeInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbAcmeInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbAcmeInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbAcmeInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbAcmeInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbAcmeInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbAcmeInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbAcmeInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbAcmeInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbAcmeInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbAcmeInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbAcmeInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbAcmeInfoParam.GenerateSkeleton {
						proxylbAcmeInfoParam.GenerateSkeleton = false
						proxylbAcmeInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbAcmeInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbAcmeInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbAcmeInfoParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbAcmeInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbAcmeInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbAcmeInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbAcmeInfoParam.Selector) == 0 || hasTags(&v, proxylbAcmeInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbAcmeInfoParam.SetId(id)
						p := *proxylbAcmeInfoParam // copy struct value
						proxylbAcmeInfoParam := &p
						go func() {
							err := funcs.ProxylbAcmeInfo(ctx, proxylbAcmeInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "acme-setting",
				Usage:     "AcmeSetting Proxylb",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:  "accept-tos",
						Usage: "the flag of accept Let's Encrypt's terms of services: https://letsencrypt.org/repository/",
					},
					&cli.StringFlag{
						Name:  "common-name",
						Usage: "set common name",
					},
					&cli.BoolFlag{
						Name:  "disable",
						Usage: "the flag of disable Let's Encrypt",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbAcmeSettingParam.ParamTemplate = c.String("param-template")
					proxylbAcmeSettingParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbAcmeSettingParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewAcmeSettingProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbAcmeSettingParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("accept-tos") {
						proxylbAcmeSettingParam.AcceptTos = c.Bool("accept-tos")
					}
					if c.IsSet("common-name") {
						proxylbAcmeSettingParam.CommonName = c.String("common-name")
					}
					if c.IsSet("disable") {
						proxylbAcmeSettingParam.Disable = c.Bool("disable")
					}
					if c.IsSet("selector") {
						proxylbAcmeSettingParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxylbAcmeSettingParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxylbAcmeSettingParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbAcmeSettingParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbAcmeSettingParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbAcmeSettingParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbAcmeSettingParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbAcmeSettingParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbAcmeSettingParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbAcmeSettingParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbAcmeSettingParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbAcmeSettingParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbAcmeSettingParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbAcmeSettingParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbAcmeSettingParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbAcmeSettingParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbAcmeSettingParam.GenerateSkeleton {
						proxylbAcmeSettingParam.GenerateSkeleton = false
						proxylbAcmeSettingParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbAcmeSettingParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbAcmeSettingParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbAcmeSettingParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbAcmeSettingParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbAcmeSettingParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbAcmeSettingParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbAcmeSettingParam.Selector) == 0 || hasTags(&v, proxylbAcmeSettingParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxylbAcmeSettingParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("acme-setting", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbAcmeSettingParam.SetId(id)
						p := *proxylbAcmeSettingParam // copy struct value
						proxylbAcmeSettingParam := &p
						go func() {
							err := funcs.ProxylbAcmeSetting(ctx, proxylbAcmeSettingParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "acme-renew",
				Usage:     "AcmeRenew Proxylb",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbAcmeRenewParam.ParamTemplate = c.String("param-template")
					proxylbAcmeRenewParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbAcmeRenewParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewAcmeRenewProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbAcmeRenewParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						proxylbAcmeRenewParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxylbAcmeRenewParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxylbAcmeRenewParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbAcmeRenewParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbAcmeRenewParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbAcmeRenewParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbAcmeRenewParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						proxylbAcmeRenewParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbAcmeRenewParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbAcmeRenewParam.GenerateSkeleton {
						proxylbAcmeRenewParam.GenerateSkeleton = false
						proxylbAcmeRenewParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbAcmeRenewParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbAcmeRenewParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbAcmeRenewParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbAcmeRenewParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbAcmeRenewParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbAcmeRenewParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbAcmeRenewParam.Selector) == 0 || hasTags(&v, proxylbAcmeRenewParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxylbAcmeRenewParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("acme-renew", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbAcmeRenewParam.SetId(id)
						p := *proxylbAcmeRenewParam // copy struct value
						proxylbAcmeRenewParam := &p
						go func() {
							err := funcs.ProxylbAcmeRenew(ctx, proxylbAcmeRenewParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "server-info",
				Aliases:   []string{"server-list"},
				Usage:     "ServerInfo Proxylb",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbServerInfoParam.ParamTemplate = c.String("param-template")
					proxylbServerInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbServerInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewServerInfoProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbServerInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						proxylbServerInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						proxylbServerInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbServerInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbServerInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbServerInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbServerInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbServerInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbServerInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbServerInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbServerInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbServerInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbServerInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbServerInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbServerInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbServerInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbServerInfoParam.GenerateSkeleton {
						proxylbServerInfoParam.GenerateSkeleton = false
						proxylbServerInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbServerInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbServerInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbServerInfoParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbServerInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbServerInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbServerInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbServerInfoParam.Selector) == 0 || hasTags(&v, proxylbServerInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbServerInfoParam.SetId(id)
						p := *proxylbServerInfoParam // copy struct value
						proxylbServerInfoParam := &p
						go func() {
							err := funcs.ProxylbServerInfo(ctx, proxylbServerInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "server-add",
				Usage:     "ServerAdd Proxylb",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "ipaddress",
						Usage: "[Required] set target ipaddress",
					},
					&cli.BoolFlag{
						Name:  "disabled",
						Usage: "set disabled",
					},
					&cli.IntFlag{
						Name:  "port",
						Usage: "[Required] set server ports",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbServerAddParam.ParamTemplate = c.String("param-template")
					proxylbServerAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbServerAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewServerAddProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbServerAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("ipaddress") {
						proxylbServerAddParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("disabled") {
						proxylbServerAddParam.Disabled = c.Bool("disabled")
					}
					if c.IsSet("port") {
						proxylbServerAddParam.Port = c.Int("port")
					}
					if c.IsSet("selector") {
						proxylbServerAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxylbServerAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxylbServerAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbServerAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbServerAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbServerAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbServerAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbServerAddParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbServerAddParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbServerAddParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbServerAddParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbServerAddParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbServerAddParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbServerAddParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbServerAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbServerAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbServerAddParam.GenerateSkeleton {
						proxylbServerAddParam.GenerateSkeleton = false
						proxylbServerAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbServerAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbServerAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbServerAddParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbServerAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbServerAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbServerAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbServerAddParam.Selector) == 0 || hasTags(&v, proxylbServerAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxylbServerAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("server-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbServerAddParam.SetId(id)
						p := *proxylbServerAddParam // copy struct value
						proxylbServerAddParam := &p
						go func() {
							err := funcs.ProxylbServerAdd(ctx, proxylbServerAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "server-update",
				Usage:     "ServerUpdate Proxylb",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target server",
					},
					&cli.StringFlag{
						Name:  "ipaddress",
						Usage: "set target ipaddress",
					},
					&cli.BoolFlag{
						Name:  "disabled",
						Usage: "set disabled",
					},
					&cli.IntFlag{
						Name:  "port",
						Usage: "set server ports",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbServerUpdateParam.ParamTemplate = c.String("param-template")
					proxylbServerUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbServerUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewServerUpdateProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbServerUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						proxylbServerUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("ipaddress") {
						proxylbServerUpdateParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("disabled") {
						proxylbServerUpdateParam.Disabled = c.Bool("disabled")
					}
					if c.IsSet("port") {
						proxylbServerUpdateParam.Port = c.Int("port")
					}
					if c.IsSet("selector") {
						proxylbServerUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxylbServerUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxylbServerUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbServerUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbServerUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbServerUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbServerUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbServerUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbServerUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbServerUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbServerUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbServerUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbServerUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbServerUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbServerUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbServerUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbServerUpdateParam.GenerateSkeleton {
						proxylbServerUpdateParam.GenerateSkeleton = false
						proxylbServerUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbServerUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbServerUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbServerUpdateParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbServerUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbServerUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbServerUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbServerUpdateParam.Selector) == 0 || hasTags(&v, proxylbServerUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxylbServerUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("server-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbServerUpdateParam.SetId(id)
						p := *proxylbServerUpdateParam // copy struct value
						proxylbServerUpdateParam := &p
						go func() {
							err := funcs.ProxylbServerUpdate(ctx, proxylbServerUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "server-delete",
				Usage:     "ServerDelete Proxylb",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target server",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbServerDeleteParam.ParamTemplate = c.String("param-template")
					proxylbServerDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbServerDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewServerDeleteProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbServerDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						proxylbServerDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						proxylbServerDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxylbServerDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxylbServerDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbServerDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbServerDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbServerDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbServerDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbServerDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbServerDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbServerDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbServerDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbServerDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbServerDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbServerDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbServerDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbServerDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbServerDeleteParam.GenerateSkeleton {
						proxylbServerDeleteParam.GenerateSkeleton = false
						proxylbServerDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbServerDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbServerDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbServerDeleteParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbServerDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbServerDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbServerDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbServerDeleteParam.Selector) == 0 || hasTags(&v, proxylbServerDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxylbServerDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete server", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbServerDeleteParam.SetId(id)
						p := *proxylbServerDeleteParam // copy struct value
						proxylbServerDeleteParam := &p
						go func() {
							err := funcs.ProxylbServerDelete(ctx, proxylbServerDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "certificate-info",
				Aliases:   []string{"certificate-list", "cert-list", "cert-info"},
				Usage:     "CertificateInfo Proxylb",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbCertificateInfoParam.ParamTemplate = c.String("param-template")
					proxylbCertificateInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbCertificateInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCertificateInfoProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbCertificateInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						proxylbCertificateInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						proxylbCertificateInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbCertificateInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbCertificateInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbCertificateInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbCertificateInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbCertificateInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbCertificateInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbCertificateInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbCertificateInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbCertificateInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbCertificateInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbCertificateInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbCertificateInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbCertificateInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbCertificateInfoParam.GenerateSkeleton {
						proxylbCertificateInfoParam.GenerateSkeleton = false
						proxylbCertificateInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbCertificateInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbCertificateInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbCertificateInfoParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbCertificateInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbCertificateInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbCertificateInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbCertificateInfoParam.Selector) == 0 || hasTags(&v, proxylbCertificateInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbCertificateInfoParam.SetId(id)
						p := *proxylbCertificateInfoParam // copy struct value
						proxylbCertificateInfoParam := &p
						go func() {
							err := funcs.ProxylbCertificateInfo(ctx, proxylbCertificateInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "certificate-add",
				Aliases:   []string{"cert-add"},
				Usage:     "CertificateAdd Proxylb",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "server-certificate",
						Aliases: []string{"server-cert"},
						Usage:   "[Required] ",
					},
					&cli.StringFlag{
						Name:    "intermediate-certificate",
						Aliases: []string{"issuer-cert"},
					},
					&cli.StringFlag{
						Name:  "private-key",
						Usage: "[Required] ",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbCertificateAddParam.ParamTemplate = c.String("param-template")
					proxylbCertificateAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbCertificateAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCertificateAddProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbCertificateAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("server-certificate") {
						proxylbCertificateAddParam.ServerCertificate = c.String("server-certificate")
					}
					if c.IsSet("intermediate-certificate") {
						proxylbCertificateAddParam.IntermediateCertificate = c.String("intermediate-certificate")
					}
					if c.IsSet("private-key") {
						proxylbCertificateAddParam.PrivateKey = c.String("private-key")
					}
					if c.IsSet("selector") {
						proxylbCertificateAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxylbCertificateAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxylbCertificateAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbCertificateAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbCertificateAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbCertificateAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbCertificateAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbCertificateAddParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbCertificateAddParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbCertificateAddParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbCertificateAddParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbCertificateAddParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbCertificateAddParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbCertificateAddParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbCertificateAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbCertificateAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbCertificateAddParam.GenerateSkeleton {
						proxylbCertificateAddParam.GenerateSkeleton = false
						proxylbCertificateAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbCertificateAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbCertificateAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbCertificateAddParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbCertificateAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbCertificateAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbCertificateAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbCertificateAddParam.Selector) == 0 || hasTags(&v, proxylbCertificateAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxylbCertificateAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("certificate-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbCertificateAddParam.SetId(id)
						p := *proxylbCertificateAddParam // copy struct value
						proxylbCertificateAddParam := &p
						go func() {
							err := funcs.ProxylbCertificateAdd(ctx, proxylbCertificateAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "certificate-update",
				Aliases:   []string{"cert-update"},
				Usage:     "CertificateUpdate Proxylb",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "server-certificate",
						Aliases: []string{"server-cert"},
					},
					&cli.StringFlag{
						Name:    "intermediate-certificate",
						Aliases: []string{"issuer-cert"},
					},
					&cli.StringFlag{
						Name: "private-key",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbCertificateUpdateParam.ParamTemplate = c.String("param-template")
					proxylbCertificateUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbCertificateUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCertificateUpdateProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbCertificateUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("server-certificate") {
						proxylbCertificateUpdateParam.ServerCertificate = c.String("server-certificate")
					}
					if c.IsSet("intermediate-certificate") {
						proxylbCertificateUpdateParam.IntermediateCertificate = c.String("intermediate-certificate")
					}
					if c.IsSet("private-key") {
						proxylbCertificateUpdateParam.PrivateKey = c.String("private-key")
					}
					if c.IsSet("selector") {
						proxylbCertificateUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxylbCertificateUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxylbCertificateUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbCertificateUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbCertificateUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbCertificateUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbCertificateUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbCertificateUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbCertificateUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbCertificateUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbCertificateUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbCertificateUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbCertificateUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbCertificateUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbCertificateUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbCertificateUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbCertificateUpdateParam.GenerateSkeleton {
						proxylbCertificateUpdateParam.GenerateSkeleton = false
						proxylbCertificateUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbCertificateUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbCertificateUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbCertificateUpdateParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbCertificateUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbCertificateUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbCertificateUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbCertificateUpdateParam.Selector) == 0 || hasTags(&v, proxylbCertificateUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxylbCertificateUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("certificate-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbCertificateUpdateParam.SetId(id)
						p := *proxylbCertificateUpdateParam // copy struct value
						proxylbCertificateUpdateParam := &p
						go func() {
							err := funcs.ProxylbCertificateUpdate(ctx, proxylbCertificateUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "certificate-delete",
				Aliases:   []string{"cert-delete"},
				Usage:     "CertificateDelete Proxylb",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbCertificateDeleteParam.ParamTemplate = c.String("param-template")
					proxylbCertificateDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbCertificateDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCertificateDeleteProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbCertificateDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						proxylbCertificateDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxylbCertificateDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxylbCertificateDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbCertificateDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbCertificateDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbCertificateDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbCertificateDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbCertificateDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbCertificateDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbCertificateDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbCertificateDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbCertificateDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbCertificateDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbCertificateDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbCertificateDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbCertificateDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbCertificateDeleteParam.GenerateSkeleton {
						proxylbCertificateDeleteParam.GenerateSkeleton = false
						proxylbCertificateDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbCertificateDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbCertificateDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbCertificateDeleteParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbCertificateDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbCertificateDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbCertificateDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbCertificateDeleteParam.Selector) == 0 || hasTags(&v, proxylbCertificateDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxylbCertificateDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete certificate", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbCertificateDeleteParam.SetId(id)
						p := *proxylbCertificateDeleteParam // copy struct value
						proxylbCertificateDeleteParam := &p
						go func() {
							err := funcs.ProxylbCertificateDelete(ctx, proxylbCertificateDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "monitor",
				Usage:     "Monitor Proxylb",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "start",
						Usage: "set start-time",
					},
					&cli.StringFlag{
						Name:  "end",
						Usage: "set end-time",
					},
					&cli.StringFlag{
						Name:  "key-format",
						Usage: "[Required] set monitoring value key-format",
						Value: "sakuracloud.proxylb.{{.ID}}",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxylbMonitorParam.ParamTemplate = c.String("param-template")
					proxylbMonitorParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxylbMonitorParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewMonitorProxylbParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxylbMonitorParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("start") {
						proxylbMonitorParam.Start = c.String("start")
					}
					if c.IsSet("end") {
						proxylbMonitorParam.End = c.String("end")
					}
					if c.IsSet("key-format") {
						proxylbMonitorParam.KeyFormat = c.String("key-format")
					}
					if c.IsSet("selector") {
						proxylbMonitorParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						proxylbMonitorParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxylbMonitorParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxylbMonitorParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxylbMonitorParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxylbMonitorParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxylbMonitorParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxylbMonitorParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxylbMonitorParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxylbMonitorParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxylbMonitorParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxylbMonitorParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxylbMonitorParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxylbMonitorParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxylbMonitorParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxylbMonitorParam.GenerateSkeleton {
						proxylbMonitorParam.GenerateSkeleton = false
						proxylbMonitorParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxylbMonitorParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxylbMonitorParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxylbMonitorParam)

					apiClient := ctx.GetAPIClient().Proxylb
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxylbMonitorParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxylbMonitorParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxylbMonitorParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxylbMonitorParam.Selector) == 0 || hasTags(&v, proxylbMonitorParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxylbMonitorParam.SetId(id)
						p := *proxylbMonitorParam // copy struct value
						proxylbMonitorParam := &p
						go func() {
							err := funcs.ProxylbMonitor(ctx, proxylbMonitorParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
		},
	}

	// build Category-Resource mapping
	AppendResourceCategoryMap("proxy-lb", &schema.Category{
		Key:         "commonserviceitem",
		DisplayName: "Common service items",
		Order:       50,
	})

	// build Category-Command mapping

	AppendCommandCategoryMap("proxy-lb", "acme-info", &schema.Category{
		Key:         "acme",
		DisplayName: "ACME settings",
		Order:       25,
	})
	AppendCommandCategoryMap("proxy-lb", "acme-renew", &schema.Category{
		Key:         "acme",
		DisplayName: "ACME settings",
		Order:       25,
	})
	AppendCommandCategoryMap("proxy-lb", "acme-setting", &schema.Category{
		Key:         "acme",
		DisplayName: "ACME settings",
		Order:       25,
	})
	AppendCommandCategoryMap("proxy-lb", "bind-port-add", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind Port(s) Management",
		Order:       20,
	})
	AppendCommandCategoryMap("proxy-lb", "bind-port-delete", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind Port(s) Management",
		Order:       20,
	})
	AppendCommandCategoryMap("proxy-lb", "bind-port-info", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind Port(s) Management",
		Order:       20,
	})
	AppendCommandCategoryMap("proxy-lb", "bind-port-update", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind Port(s) Management",
		Order:       20,
	})
	AppendCommandCategoryMap("proxy-lb", "certificate-add", &schema.Category{
		Key:         "certificate",
		DisplayName: "Certificate(s) Management",
		Order:       40,
	})
	AppendCommandCategoryMap("proxy-lb", "certificate-delete", &schema.Category{
		Key:         "certificate",
		DisplayName: "Certificate(s) Management",
		Order:       40,
	})
	AppendCommandCategoryMap("proxy-lb", "certificate-info", &schema.Category{
		Key:         "certificate",
		DisplayName: "Certificate(s) Management",
		Order:       40,
	})
	AppendCommandCategoryMap("proxy-lb", "certificate-update", &schema.Category{
		Key:         "certificate",
		DisplayName: "Certificate(s) Management",
		Order:       40,
	})
	AppendCommandCategoryMap("proxy-lb", "create", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("proxy-lb", "delete", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("proxy-lb", "list", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("proxy-lb", "monitor", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitoring",
		Order:       50,
	})
	AppendCommandCategoryMap("proxy-lb", "plan-change", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("proxy-lb", "read", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("proxy-lb", "response-header-add", &schema.Category{
		Key:         "response-header",
		DisplayName: "Additional Response Header(s) Management",
		Order:       22,
	})
	AppendCommandCategoryMap("proxy-lb", "response-header-delete", &schema.Category{
		Key:         "response-header",
		DisplayName: "Additional Response Header(s) Management",
		Order:       22,
	})
	AppendCommandCategoryMap("proxy-lb", "response-header-info", &schema.Category{
		Key:         "response-header",
		DisplayName: "Additional Response Header(s) Management",
		Order:       22,
	})
	AppendCommandCategoryMap("proxy-lb", "response-header-update", &schema.Category{
		Key:         "response-header",
		DisplayName: "Additional Response Header(s) Management",
		Order:       22,
	})
	AppendCommandCategoryMap("proxy-lb", "server-add", &schema.Category{
		Key:         "servers",
		DisplayName: "Real Server(s) Management",
		Order:       30,
	})
	AppendCommandCategoryMap("proxy-lb", "server-delete", &schema.Category{
		Key:         "servers",
		DisplayName: "Real Server(s) Management",
		Order:       30,
	})
	AppendCommandCategoryMap("proxy-lb", "server-info", &schema.Category{
		Key:         "servers",
		DisplayName: "Real Server(s) Management",
		Order:       30,
	})
	AppendCommandCategoryMap("proxy-lb", "server-update", &schema.Category{
		Key:         "servers",
		DisplayName: "Real Server(s) Management",
		Order:       30,
	})
	AppendCommandCategoryMap("proxy-lb", "update", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})

	// build Category-Param mapping

	AppendFlagCategoryMap("proxy-lb", "acme-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-renew", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-renew", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-renew", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-renew", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-renew", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-renew", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-renew", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-renew", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "accept-tos", &schema.Category{
		Key:         "acme",
		DisplayName: "Acme options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "common-name", &schema.Category{
		Key:         "acme",
		DisplayName: "Acme options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "disable", &schema.Category{
		Key:         "acme",
		DisplayName: "Acme options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "mode", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "port", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "redirect-to-https", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "support-http2", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "index", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "index", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "mode", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "port", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "redirect-to-https", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "support-http2", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "intermediate-certificate", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "private-key", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "server-certificate", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "intermediate-certificate", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "private-key", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "server-certificate", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "delay-loop", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "host-header", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "icon-id", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "path", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "plan", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "protocol", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "sorry-server-ipaddress", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "sorry-server-port", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "sticky-session", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "tags", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "timeout", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "from", &schema.Category{
		Key:         "limit-offset",
		DisplayName: "Limit/Offset options",
		Order:       2147483597,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "id", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "max", &schema.Category{
		Key:         "limit-offset",
		DisplayName: "Limit/Offset options",
		Order:       2147483597,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "name", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "sort", &schema.Category{
		Key:         "sort",
		DisplayName: "Sort options",
		Order:       2147483607,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "tags", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "end", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "key-format", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "start", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "plan", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "header", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "port-index", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "value", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "index", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "port-index", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "port-index", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "header", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "index", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "port-index", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "value", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "disabled", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "ipaddress", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "port", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "index", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "disabled", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "index", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "ipaddress", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "port", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "delay-loop", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "host-header", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "icon-id", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "path", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "protocol", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "sorry-server-ipaddress", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "sorry-server-port", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "sticky-session", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "tags", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "timeout", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})

	// append command to GlobalContext
	Commands = append(Commands, cliCommand)
}

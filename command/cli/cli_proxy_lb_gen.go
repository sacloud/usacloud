// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-commands'; DO NOT EDIT

package cli

import (
	"encoding/json"
	"fmt"
	"strings"
	"sync"

	"github.com/imdario/mergo"
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/funcs"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/schema"
	"gopkg.in/urfave/cli.v2"
)

func init() {
	proxyLBListParam := params.NewListProxyLBParam()
	proxyLBCreateParam := params.NewCreateProxyLBParam()
	proxyLBReadParam := params.NewReadProxyLBParam()
	proxyLBUpdateParam := params.NewUpdateProxyLBParam()
	proxyLBDeleteParam := params.NewDeleteProxyLBParam()
	proxyLBPlanChangeParam := params.NewPlanChangeProxyLBParam()
	proxyLBBindPortInfoParam := params.NewBindPortInfoProxyLBParam()
	proxyLBBindPortAddParam := params.NewBindPortAddProxyLBParam()
	proxyLBBindPortUpdateParam := params.NewBindPortUpdateProxyLBParam()
	proxyLBBindPortDeleteParam := params.NewBindPortDeleteProxyLBParam()
	proxyLBResponseHeaderInfoParam := params.NewResponseHeaderInfoProxyLBParam()
	proxyLBResponseHeaderAddParam := params.NewResponseHeaderAddProxyLBParam()
	proxyLBResponseHeaderUpdateParam := params.NewResponseHeaderUpdateProxyLBParam()
	proxyLBResponseHeaderDeleteParam := params.NewResponseHeaderDeleteProxyLBParam()
	proxyLBACMEInfoParam := params.NewACMEInfoProxyLBParam()
	proxyLBACMESettingParam := params.NewACMESettingProxyLBParam()
	proxyLBACMERenewParam := params.NewACMERenewProxyLBParam()
	proxyLBServerInfoParam := params.NewServerInfoProxyLBParam()
	proxyLBServerAddParam := params.NewServerAddProxyLBParam()
	proxyLBServerUpdateParam := params.NewServerUpdateProxyLBParam()
	proxyLBServerDeleteParam := params.NewServerDeleteProxyLBParam()
	proxyLBCertificateInfoParam := params.NewCertificateInfoProxyLBParam()
	proxyLBCertificateAddParam := params.NewCertificateAddProxyLBParam()
	proxyLBCertificateUpdateParam := params.NewCertificateUpdateProxyLBParam()
	proxyLBCertificateDeleteParam := params.NewCertificateDeleteProxyLBParam()
	proxyLBMonitorParam := params.NewMonitorProxyLBParam()

	cliCommand := &cli.Command{
		Name:    "proxy-lb",
		Aliases: []string{"enhanced-load-balancer", "proxylb"},
		Usage:   "A manage commands of ProxyLB",
		Subcommands: []*cli.Command{
			{
				Name:    "list",
				Aliases: []string{"ls", "find", "selector"},
				Usage:   "List ProxyLB",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "name",
						Usage: "set filter by name(s)",
					},
					&cli.Int64SliceFlag{
						Name:  "id",
						Usage: "set filter by id(s)",
					},
					&cli.StringSliceFlag{
						Name:    "tags",
						Aliases: []string{"selector"},
						Usage:   "set filter by tags(AND)",
					},
					&cli.IntFlag{
						Name:    "from",
						Aliases: []string{"offset"},
						Usage:   "set offset",
					},
					&cli.IntFlag{
						Name:    "max",
						Aliases: []string{"limit"},
						Usage:   "set limit",
					},
					&cli.StringSliceFlag{
						Name:  "sort",
						Usage: "set field(s) for sort",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBListParam.ParamTemplate = c.String("param-template")
					proxyLBListParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBListParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewListProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBListParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("name") {
						proxyLBListParam.Name = c.StringSlice("name")
					}
					if c.IsSet("id") {
						proxyLBListParam.Id = toSakuraIDs(c.Int64Slice("id"))
					}
					if c.IsSet("tags") {
						proxyLBListParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("from") {
						proxyLBListParam.From = c.Int("from")
					}
					if c.IsSet("max") {
						proxyLBListParam.Max = c.Int("max")
					}
					if c.IsSet("sort") {
						proxyLBListParam.Sort = c.StringSlice("sort")
					}
					if c.IsSet("param-template") {
						proxyLBListParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBListParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBListParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBListParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBListParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBListParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBListParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBListParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBListParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBListParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBListParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBListParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBListParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBListParam.GenerateSkeleton {
						proxyLBListParam.GenerateSkeleton = false
						proxyLBListParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBListParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBListParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBListParam)

					// Run command with params
					return funcs.ProxyLBList(ctx, proxyLBListParam)

				},
			},
			{
				Name:  "create",
				Usage: "Create ProxyLB",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "plan",
						Usage: "set plan",
						Value: 1000,
					},
					&cli.StringFlag{
						Name:  "protocol",
						Usage: "[Required] set healthcheck protocol[http/tcp]",
						Value: "tcp",
					},
					&cli.StringFlag{
						Name:  "host-header",
						Usage: "set host header of http/https healthcheck request",
					},
					&cli.StringFlag{
						Name:  "path",
						Usage: "set path of http/https healthcheck request",
						Value: "/",
					},
					&cli.IntFlag{
						Name:  "delay-loop",
						Usage: "[Required] set delay-loop of healthcheck",
						Value: 10,
					},
					&cli.BoolFlag{
						Name:  "sticky-session",
						Usage: "enable sticky-session",
					},
					&cli.StringFlag{
						Name:  "sorry-server-ipaddress",
						Usage: "set sorry-server ip address",
					},
					&cli.IntFlag{
						Name:  "sorry-server-port",
						Usage: "set sorry-server ports",
					},
					&cli.IntFlag{
						Name:  "timeout",
						Usage: "set timeout",
						Value: 10,
					},
					&cli.StringFlag{
						Name:  "name",
						Usage: "[Required] set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "set resource tags",
					},
					&cli.Int64Flag{
						Name:  "icon-id",
						Usage: "set Icon ID",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBCreateParam.ParamTemplate = c.String("param-template")
					proxyLBCreateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBCreateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCreateProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBCreateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("plan") {
						proxyLBCreateParam.Plan = c.Int("plan")
					}
					if c.IsSet("protocol") {
						proxyLBCreateParam.Protocol = c.String("protocol")
					}
					if c.IsSet("host-header") {
						proxyLBCreateParam.HostHeader = c.String("host-header")
					}
					if c.IsSet("path") {
						proxyLBCreateParam.Path = c.String("path")
					}
					if c.IsSet("delay-loop") {
						proxyLBCreateParam.DelayLoop = c.Int("delay-loop")
					}
					if c.IsSet("sticky-session") {
						proxyLBCreateParam.StickySession = c.Bool("sticky-session")
					}
					if c.IsSet("sorry-server-ipaddress") {
						proxyLBCreateParam.SorryServerIpaddress = c.String("sorry-server-ipaddress")
					}
					if c.IsSet("sorry-server-port") {
						proxyLBCreateParam.SorryServerPort = c.Int("sorry-server-port")
					}
					if c.IsSet("timeout") {
						proxyLBCreateParam.Timeout = c.Int("timeout")
					}
					if c.IsSet("name") {
						proxyLBCreateParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						proxyLBCreateParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						proxyLBCreateParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						proxyLBCreateParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						proxyLBCreateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxyLBCreateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBCreateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBCreateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBCreateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBCreateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBCreateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBCreateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBCreateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBCreateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBCreateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBCreateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBCreateParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBCreateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBCreateParam.GenerateSkeleton {
						proxyLBCreateParam.GenerateSkeleton = false
						proxyLBCreateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBCreateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBCreateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBCreateParam)

					// confirm
					if !proxyLBCreateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("create") {
							return nil
						}
					}

					// Run command with params
					return funcs.ProxyLBCreate(ctx, proxyLBCreateParam)

				},
			},
			{
				Name:      "read",
				Usage:     "Read ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBReadParam.ParamTemplate = c.String("param-template")
					proxyLBReadParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBReadParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewReadProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBReadParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						proxyLBReadParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						proxyLBReadParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBReadParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBReadParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBReadParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBReadParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBReadParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBReadParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBReadParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBReadParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBReadParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBReadParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBReadParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBReadParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBReadParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBReadParam.GenerateSkeleton {
						proxyLBReadParam.GenerateSkeleton = false
						proxyLBReadParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBReadParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBReadParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBReadParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBReadParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBReadParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBReadParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBReadParam.Selector) == 0 || hasTags(&v, proxyLBReadParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBReadParam.SetId(id)
						p := *proxyLBReadParam // copy struct value
						proxyLBReadParam := &p
						go func() {
							err := funcs.ProxyLBRead(ctx, proxyLBReadParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "update",
				Usage:     "Update ProxyLB",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "protocol",
						Usage: "set healthcheck protocol[http/tcp]",
					},
					&cli.StringFlag{
						Name:  "host-header",
						Usage: "set host header of http/https healthcheck request",
					},
					&cli.StringFlag{
						Name:  "path",
						Usage: "set path of http/https healthcheck request",
					},
					&cli.IntFlag{
						Name:  "delay-loop",
						Usage: "set delay-loop of healthcheck",
					},
					&cli.BoolFlag{
						Name:  "sticky-session",
						Usage: "enable sticky-session",
					},
					&cli.StringFlag{
						Name:  "sorry-server-ipaddress",
						Usage: "set sorry-server ip address",
					},
					&cli.IntFlag{
						Name:  "sorry-server-port",
						Usage: "set sorry-server ports",
					},
					&cli.IntFlag{
						Name:  "timeout",
						Usage: "set timeout",
						Value: 10,
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "name",
						Usage: "set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "set resource tags",
					},
					&cli.Int64Flag{
						Name:  "icon-id",
						Usage: "set Icon ID",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBUpdateParam.ParamTemplate = c.String("param-template")
					proxyLBUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewUpdateProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("protocol") {
						proxyLBUpdateParam.Protocol = c.String("protocol")
					}
					if c.IsSet("host-header") {
						proxyLBUpdateParam.HostHeader = c.String("host-header")
					}
					if c.IsSet("path") {
						proxyLBUpdateParam.Path = c.String("path")
					}
					if c.IsSet("delay-loop") {
						proxyLBUpdateParam.DelayLoop = c.Int("delay-loop")
					}
					if c.IsSet("sticky-session") {
						proxyLBUpdateParam.StickySession = c.Bool("sticky-session")
					}
					if c.IsSet("sorry-server-ipaddress") {
						proxyLBUpdateParam.SorryServerIpaddress = c.String("sorry-server-ipaddress")
					}
					if c.IsSet("sorry-server-port") {
						proxyLBUpdateParam.SorryServerPort = c.Int("sorry-server-port")
					}
					if c.IsSet("timeout") {
						proxyLBUpdateParam.Timeout = c.Int("timeout")
					}
					if c.IsSet("selector") {
						proxyLBUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("name") {
						proxyLBUpdateParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						proxyLBUpdateParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						proxyLBUpdateParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						proxyLBUpdateParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						proxyLBUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxyLBUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBUpdateParam.GenerateSkeleton {
						proxyLBUpdateParam.GenerateSkeleton = false
						proxyLBUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBUpdateParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBUpdateParam.Selector) == 0 || hasTags(&v, proxyLBUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !proxyLBUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBUpdateParam.SetId(id)
						p := *proxyLBUpdateParam // copy struct value
						proxyLBUpdateParam := &p
						go func() {
							err := funcs.ProxyLBUpdate(ctx, proxyLBUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "delete",
				Aliases:   []string{"rm"},
				Usage:     "Delete ProxyLB",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBDeleteParam.ParamTemplate = c.String("param-template")
					proxyLBDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDeleteProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						proxyLBDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxyLBDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxyLBDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBDeleteParam.GenerateSkeleton {
						proxyLBDeleteParam.GenerateSkeleton = false
						proxyLBDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBDeleteParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBDeleteParam.Selector) == 0 || hasTags(&v, proxyLBDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !proxyLBDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBDeleteParam.SetId(id)
						p := *proxyLBDeleteParam // copy struct value
						proxyLBDeleteParam := &p
						go func() {
							err := funcs.ProxyLBDelete(ctx, proxyLBDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "plan-change",
				Usage:     "Change ProxyLB plan",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "plan",
						Usage: "[Required] set plan",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBPlanChangeParam.ParamTemplate = c.String("param-template")
					proxyLBPlanChangeParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBPlanChangeParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewPlanChangeProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBPlanChangeParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("plan") {
						proxyLBPlanChangeParam.Plan = c.Int("plan")
					}
					if c.IsSet("selector") {
						proxyLBPlanChangeParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxyLBPlanChangeParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxyLBPlanChangeParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBPlanChangeParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBPlanChangeParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBPlanChangeParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBPlanChangeParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBPlanChangeParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBPlanChangeParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBPlanChangeParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBPlanChangeParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBPlanChangeParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBPlanChangeParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBPlanChangeParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBPlanChangeParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBPlanChangeParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBPlanChangeParam.GenerateSkeleton {
						proxyLBPlanChangeParam.GenerateSkeleton = false
						proxyLBPlanChangeParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBPlanChangeParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBPlanChangeParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBPlanChangeParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBPlanChangeParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBPlanChangeParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBPlanChangeParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBPlanChangeParam.Selector) == 0 || hasTags(&v, proxyLBPlanChangeParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !proxyLBPlanChangeParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("plan-change", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBPlanChangeParam.SetId(id)
						p := *proxyLBPlanChangeParam // copy struct value
						proxyLBPlanChangeParam := &p
						go func() {
							err := funcs.ProxyLBPlanChange(ctx, proxyLBPlanChangeParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "bind-port-info",
				Aliases:   []string{"bind-port-list"},
				Usage:     "BindPortInfo ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBBindPortInfoParam.ParamTemplate = c.String("param-template")
					proxyLBBindPortInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBBindPortInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBindPortInfoProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBBindPortInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						proxyLBBindPortInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						proxyLBBindPortInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBBindPortInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBBindPortInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBBindPortInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBBindPortInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBBindPortInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBBindPortInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBBindPortInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBBindPortInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBBindPortInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBBindPortInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBBindPortInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBBindPortInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBBindPortInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBBindPortInfoParam.GenerateSkeleton {
						proxyLBBindPortInfoParam.GenerateSkeleton = false
						proxyLBBindPortInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBBindPortInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBBindPortInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBBindPortInfoParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBBindPortInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBBindPortInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBBindPortInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBBindPortInfoParam.Selector) == 0 || hasTags(&v, proxyLBBindPortInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBBindPortInfoParam.SetId(id)
						p := *proxyLBBindPortInfoParam // copy struct value
						proxyLBBindPortInfoParam := &p
						go func() {
							err := funcs.ProxyLBBindPortInfo(ctx, proxyLBBindPortInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "bind-port-add",
				Usage:     "BindPortAdd ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "mode",
						Usage: "[Required] set bind mode[http/https/tcp]",
					},
					&cli.IntFlag{
						Name:  "port",
						Usage: "[Required] set port number",
					},
					&cli.BoolFlag{
						Name:  "redirect-to-https",
						Usage: "enable to redirect to https",
					},
					&cli.BoolFlag{
						Name:  "support-http-2",
						Usage: "enable http/2",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBBindPortAddParam.ParamTemplate = c.String("param-template")
					proxyLBBindPortAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBBindPortAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBindPortAddProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBBindPortAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("mode") {
						proxyLBBindPortAddParam.Mode = c.String("mode")
					}
					if c.IsSet("port") {
						proxyLBBindPortAddParam.Port = c.Int("port")
					}
					if c.IsSet("redirect-to-https") {
						proxyLBBindPortAddParam.RedirectToHttps = c.Bool("redirect-to-https")
					}
					if c.IsSet("support-http-2") {
						proxyLBBindPortAddParam.SupportHttp2 = c.Bool("support-http-2")
					}
					if c.IsSet("selector") {
						proxyLBBindPortAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxyLBBindPortAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxyLBBindPortAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBBindPortAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBBindPortAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBBindPortAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBBindPortAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBBindPortAddParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBBindPortAddParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBBindPortAddParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBBindPortAddParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBBindPortAddParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBBindPortAddParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBBindPortAddParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBBindPortAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBBindPortAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBBindPortAddParam.GenerateSkeleton {
						proxyLBBindPortAddParam.GenerateSkeleton = false
						proxyLBBindPortAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBBindPortAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBBindPortAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBBindPortAddParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBBindPortAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBBindPortAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBBindPortAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBBindPortAddParam.Selector) == 0 || hasTags(&v, proxyLBBindPortAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxyLBBindPortAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("bind-port-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBBindPortAddParam.SetId(id)
						p := *proxyLBBindPortAddParam // copy struct value
						proxyLBBindPortAddParam := &p
						go func() {
							err := funcs.ProxyLBBindPortAdd(ctx, proxyLBBindPortAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "bind-port-update",
				Usage:     "BindPortUpdate ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target server",
					},
					&cli.StringFlag{
						Name:  "mode",
						Usage: "set bind mode[http/https/tcp]",
					},
					&cli.IntFlag{
						Name:  "port",
						Usage: "set port number",
					},
					&cli.BoolFlag{
						Name:  "redirect-to-https",
						Usage: "enable to redirect to https",
					},
					&cli.BoolFlag{
						Name:  "support-http-2",
						Usage: "enable http/2",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBBindPortUpdateParam.ParamTemplate = c.String("param-template")
					proxyLBBindPortUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBBindPortUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBindPortUpdateProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBBindPortUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						proxyLBBindPortUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("mode") {
						proxyLBBindPortUpdateParam.Mode = c.String("mode")
					}
					if c.IsSet("port") {
						proxyLBBindPortUpdateParam.Port = c.Int("port")
					}
					if c.IsSet("redirect-to-https") {
						proxyLBBindPortUpdateParam.RedirectToHttps = c.Bool("redirect-to-https")
					}
					if c.IsSet("support-http-2") {
						proxyLBBindPortUpdateParam.SupportHttp2 = c.Bool("support-http-2")
					}
					if c.IsSet("selector") {
						proxyLBBindPortUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxyLBBindPortUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxyLBBindPortUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBBindPortUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBBindPortUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBBindPortUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBBindPortUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBBindPortUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBBindPortUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBBindPortUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBBindPortUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBBindPortUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBBindPortUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBBindPortUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBBindPortUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBBindPortUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBBindPortUpdateParam.GenerateSkeleton {
						proxyLBBindPortUpdateParam.GenerateSkeleton = false
						proxyLBBindPortUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBBindPortUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBBindPortUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBBindPortUpdateParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBBindPortUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBBindPortUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBBindPortUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBBindPortUpdateParam.Selector) == 0 || hasTags(&v, proxyLBBindPortUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxyLBBindPortUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("bind-port-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBBindPortUpdateParam.SetId(id)
						p := *proxyLBBindPortUpdateParam // copy struct value
						proxyLBBindPortUpdateParam := &p
						go func() {
							err := funcs.ProxyLBBindPortUpdate(ctx, proxyLBBindPortUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "bind-port-delete",
				Usage:     "BindPortDelete ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target bind-port",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBBindPortDeleteParam.ParamTemplate = c.String("param-template")
					proxyLBBindPortDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBBindPortDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBindPortDeleteProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBBindPortDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						proxyLBBindPortDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						proxyLBBindPortDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxyLBBindPortDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxyLBBindPortDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBBindPortDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBBindPortDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBBindPortDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBBindPortDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBBindPortDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBBindPortDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBBindPortDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBBindPortDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBBindPortDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBBindPortDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBBindPortDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBBindPortDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBBindPortDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBBindPortDeleteParam.GenerateSkeleton {
						proxyLBBindPortDeleteParam.GenerateSkeleton = false
						proxyLBBindPortDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBBindPortDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBBindPortDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBBindPortDeleteParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBBindPortDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBBindPortDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBBindPortDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBBindPortDeleteParam.Selector) == 0 || hasTags(&v, proxyLBBindPortDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxyLBBindPortDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete bind-port", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBBindPortDeleteParam.SetId(id)
						p := *proxyLBBindPortDeleteParam // copy struct value
						proxyLBBindPortDeleteParam := &p
						go func() {
							err := funcs.ProxyLBBindPortDelete(ctx, proxyLBBindPortDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "response-header-info",
				Aliases:   []string{"response-header-list"},
				Usage:     "ResponseHeaderInfo ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "port-index",
						Usage: "[Required] index of target bind-port",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBResponseHeaderInfoParam.ParamTemplate = c.String("param-template")
					proxyLBResponseHeaderInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBResponseHeaderInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewResponseHeaderInfoProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBResponseHeaderInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("port-index") {
						proxyLBResponseHeaderInfoParam.PortIndex = c.Int("port-index")
					}
					if c.IsSet("selector") {
						proxyLBResponseHeaderInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						proxyLBResponseHeaderInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBResponseHeaderInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBResponseHeaderInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBResponseHeaderInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBResponseHeaderInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBResponseHeaderInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBResponseHeaderInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBResponseHeaderInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBResponseHeaderInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBResponseHeaderInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBResponseHeaderInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBResponseHeaderInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBResponseHeaderInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBResponseHeaderInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBResponseHeaderInfoParam.GenerateSkeleton {
						proxyLBResponseHeaderInfoParam.GenerateSkeleton = false
						proxyLBResponseHeaderInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBResponseHeaderInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBResponseHeaderInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBResponseHeaderInfoParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBResponseHeaderInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBResponseHeaderInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBResponseHeaderInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBResponseHeaderInfoParam.Selector) == 0 || hasTags(&v, proxyLBResponseHeaderInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBResponseHeaderInfoParam.SetId(id)
						p := *proxyLBResponseHeaderInfoParam // copy struct value
						proxyLBResponseHeaderInfoParam := &p
						go func() {
							err := funcs.ProxyLBResponseHeaderInfo(ctx, proxyLBResponseHeaderInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "response-header-add",
				Usage:     "ResponseHeaderAdd ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "port-index",
						Usage: "[Required] index of target bind-port",
					},
					&cli.StringFlag{
						Name:  "header",
						Usage: "[Required] set Header",
					},
					&cli.StringFlag{
						Name:  "value",
						Usage: "[Required] set Value",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBResponseHeaderAddParam.ParamTemplate = c.String("param-template")
					proxyLBResponseHeaderAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBResponseHeaderAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewResponseHeaderAddProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBResponseHeaderAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("port-index") {
						proxyLBResponseHeaderAddParam.PortIndex = c.Int("port-index")
					}
					if c.IsSet("header") {
						proxyLBResponseHeaderAddParam.Header = c.String("header")
					}
					if c.IsSet("value") {
						proxyLBResponseHeaderAddParam.Value = c.String("value")
					}
					if c.IsSet("selector") {
						proxyLBResponseHeaderAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxyLBResponseHeaderAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxyLBResponseHeaderAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBResponseHeaderAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBResponseHeaderAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBResponseHeaderAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBResponseHeaderAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBResponseHeaderAddParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBResponseHeaderAddParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBResponseHeaderAddParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBResponseHeaderAddParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBResponseHeaderAddParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBResponseHeaderAddParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBResponseHeaderAddParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBResponseHeaderAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBResponseHeaderAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBResponseHeaderAddParam.GenerateSkeleton {
						proxyLBResponseHeaderAddParam.GenerateSkeleton = false
						proxyLBResponseHeaderAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBResponseHeaderAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBResponseHeaderAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBResponseHeaderAddParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBResponseHeaderAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBResponseHeaderAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBResponseHeaderAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBResponseHeaderAddParam.Selector) == 0 || hasTags(&v, proxyLBResponseHeaderAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxyLBResponseHeaderAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("response-header-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBResponseHeaderAddParam.SetId(id)
						p := *proxyLBResponseHeaderAddParam // copy struct value
						proxyLBResponseHeaderAddParam := &p
						go func() {
							err := funcs.ProxyLBResponseHeaderAdd(ctx, proxyLBResponseHeaderAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "response-header-update",
				Usage:     "ResponseHeaderUpdate ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target server",
					},
					&cli.IntFlag{
						Name:  "port-index",
						Usage: "[Required] index of target bind-port",
					},
					&cli.StringFlag{
						Name:  "header",
						Usage: "set Header",
					},
					&cli.StringFlag{
						Name:  "value",
						Usage: "set Value",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBResponseHeaderUpdateParam.ParamTemplate = c.String("param-template")
					proxyLBResponseHeaderUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBResponseHeaderUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewResponseHeaderUpdateProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBResponseHeaderUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						proxyLBResponseHeaderUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("port-index") {
						proxyLBResponseHeaderUpdateParam.PortIndex = c.Int("port-index")
					}
					if c.IsSet("header") {
						proxyLBResponseHeaderUpdateParam.Header = c.String("header")
					}
					if c.IsSet("value") {
						proxyLBResponseHeaderUpdateParam.Value = c.String("value")
					}
					if c.IsSet("selector") {
						proxyLBResponseHeaderUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxyLBResponseHeaderUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxyLBResponseHeaderUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBResponseHeaderUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBResponseHeaderUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBResponseHeaderUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBResponseHeaderUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBResponseHeaderUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBResponseHeaderUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBResponseHeaderUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBResponseHeaderUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBResponseHeaderUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBResponseHeaderUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBResponseHeaderUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBResponseHeaderUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBResponseHeaderUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBResponseHeaderUpdateParam.GenerateSkeleton {
						proxyLBResponseHeaderUpdateParam.GenerateSkeleton = false
						proxyLBResponseHeaderUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBResponseHeaderUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBResponseHeaderUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBResponseHeaderUpdateParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBResponseHeaderUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBResponseHeaderUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBResponseHeaderUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBResponseHeaderUpdateParam.Selector) == 0 || hasTags(&v, proxyLBResponseHeaderUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxyLBResponseHeaderUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("response-header-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBResponseHeaderUpdateParam.SetId(id)
						p := *proxyLBResponseHeaderUpdateParam // copy struct value
						proxyLBResponseHeaderUpdateParam := &p
						go func() {
							err := funcs.ProxyLBResponseHeaderUpdate(ctx, proxyLBResponseHeaderUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "response-header-delete",
				Usage:     "ResponseHeaderDelete ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target bind-port",
					},
					&cli.IntFlag{
						Name:  "port-index",
						Usage: "[Required] index of target bind-port",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBResponseHeaderDeleteParam.ParamTemplate = c.String("param-template")
					proxyLBResponseHeaderDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBResponseHeaderDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewResponseHeaderDeleteProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBResponseHeaderDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						proxyLBResponseHeaderDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("port-index") {
						proxyLBResponseHeaderDeleteParam.PortIndex = c.Int("port-index")
					}
					if c.IsSet("selector") {
						proxyLBResponseHeaderDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxyLBResponseHeaderDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxyLBResponseHeaderDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBResponseHeaderDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBResponseHeaderDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBResponseHeaderDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBResponseHeaderDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBResponseHeaderDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBResponseHeaderDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBResponseHeaderDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBResponseHeaderDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBResponseHeaderDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBResponseHeaderDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBResponseHeaderDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBResponseHeaderDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBResponseHeaderDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBResponseHeaderDeleteParam.GenerateSkeleton {
						proxyLBResponseHeaderDeleteParam.GenerateSkeleton = false
						proxyLBResponseHeaderDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBResponseHeaderDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBResponseHeaderDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBResponseHeaderDeleteParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBResponseHeaderDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBResponseHeaderDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBResponseHeaderDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBResponseHeaderDeleteParam.Selector) == 0 || hasTags(&v, proxyLBResponseHeaderDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxyLBResponseHeaderDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete response-header", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBResponseHeaderDeleteParam.SetId(id)
						p := *proxyLBResponseHeaderDeleteParam // copy struct value
						proxyLBResponseHeaderDeleteParam := &p
						go func() {
							err := funcs.ProxyLBResponseHeaderDelete(ctx, proxyLBResponseHeaderDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "acme-info",
				Usage:     "ACMEInfo ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBACMEInfoParam.ParamTemplate = c.String("param-template")
					proxyLBACMEInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBACMEInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewACMEInfoProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBACMEInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						proxyLBACMEInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						proxyLBACMEInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBACMEInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBACMEInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBACMEInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBACMEInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBACMEInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBACMEInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBACMEInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBACMEInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBACMEInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBACMEInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBACMEInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBACMEInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBACMEInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBACMEInfoParam.GenerateSkeleton {
						proxyLBACMEInfoParam.GenerateSkeleton = false
						proxyLBACMEInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBACMEInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBACMEInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBACMEInfoParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBACMEInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBACMEInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBACMEInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBACMEInfoParam.Selector) == 0 || hasTags(&v, proxyLBACMEInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBACMEInfoParam.SetId(id)
						p := *proxyLBACMEInfoParam // copy struct value
						proxyLBACMEInfoParam := &p
						go func() {
							err := funcs.ProxyLBACMEInfo(ctx, proxyLBACMEInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "acme-setting",
				Usage:     "ACMESetting ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:  "accept-tos",
						Usage: "the flag of accept Let's Encrypt's terms of services: https://letsencrypt.org/repository/",
					},
					&cli.StringFlag{
						Name:  "common-name",
						Usage: "set common name",
					},
					&cli.BoolFlag{
						Name:  "disable",
						Usage: "the flag of disable Let's Encrypt",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBACMESettingParam.ParamTemplate = c.String("param-template")
					proxyLBACMESettingParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBACMESettingParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewACMESettingProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBACMESettingParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("accept-tos") {
						proxyLBACMESettingParam.AcceptTos = c.Bool("accept-tos")
					}
					if c.IsSet("common-name") {
						proxyLBACMESettingParam.CommonName = c.String("common-name")
					}
					if c.IsSet("disable") {
						proxyLBACMESettingParam.Disable = c.Bool("disable")
					}
					if c.IsSet("selector") {
						proxyLBACMESettingParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxyLBACMESettingParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxyLBACMESettingParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBACMESettingParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBACMESettingParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBACMESettingParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBACMESettingParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBACMESettingParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBACMESettingParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBACMESettingParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBACMESettingParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBACMESettingParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBACMESettingParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBACMESettingParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBACMESettingParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBACMESettingParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBACMESettingParam.GenerateSkeleton {
						proxyLBACMESettingParam.GenerateSkeleton = false
						proxyLBACMESettingParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBACMESettingParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBACMESettingParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBACMESettingParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBACMESettingParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBACMESettingParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBACMESettingParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBACMESettingParam.Selector) == 0 || hasTags(&v, proxyLBACMESettingParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxyLBACMESettingParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("acme-setting", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBACMESettingParam.SetId(id)
						p := *proxyLBACMESettingParam // copy struct value
						proxyLBACMESettingParam := &p
						go func() {
							err := funcs.ProxyLBACMESetting(ctx, proxyLBACMESettingParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "acme-renew",
				Usage:     "ACMERenew ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBACMERenewParam.ParamTemplate = c.String("param-template")
					proxyLBACMERenewParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBACMERenewParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewACMERenewProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBACMERenewParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						proxyLBACMERenewParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxyLBACMERenewParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxyLBACMERenewParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBACMERenewParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBACMERenewParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBACMERenewParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBACMERenewParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						proxyLBACMERenewParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBACMERenewParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBACMERenewParam.GenerateSkeleton {
						proxyLBACMERenewParam.GenerateSkeleton = false
						proxyLBACMERenewParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBACMERenewParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBACMERenewParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBACMERenewParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBACMERenewParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBACMERenewParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBACMERenewParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBACMERenewParam.Selector) == 0 || hasTags(&v, proxyLBACMERenewParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxyLBACMERenewParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("acme-renew", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBACMERenewParam.SetId(id)
						p := *proxyLBACMERenewParam // copy struct value
						proxyLBACMERenewParam := &p
						go func() {
							err := funcs.ProxyLBACMERenew(ctx, proxyLBACMERenewParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "server-info",
				Aliases:   []string{"server-list"},
				Usage:     "ServerInfo ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBServerInfoParam.ParamTemplate = c.String("param-template")
					proxyLBServerInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBServerInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewServerInfoProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBServerInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						proxyLBServerInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						proxyLBServerInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBServerInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBServerInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBServerInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBServerInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBServerInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBServerInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBServerInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBServerInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBServerInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBServerInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBServerInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBServerInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBServerInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBServerInfoParam.GenerateSkeleton {
						proxyLBServerInfoParam.GenerateSkeleton = false
						proxyLBServerInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBServerInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBServerInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBServerInfoParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBServerInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBServerInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBServerInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBServerInfoParam.Selector) == 0 || hasTags(&v, proxyLBServerInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBServerInfoParam.SetId(id)
						p := *proxyLBServerInfoParam // copy struct value
						proxyLBServerInfoParam := &p
						go func() {
							err := funcs.ProxyLBServerInfo(ctx, proxyLBServerInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "server-add",
				Usage:     "ServerAdd ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "ipaddress",
						Usage: "[Required] set target ipaddress",
					},
					&cli.BoolFlag{
						Name:  "disabled",
						Usage: "set disabled",
					},
					&cli.IntFlag{
						Name:  "port",
						Usage: "[Required] set server ports",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBServerAddParam.ParamTemplate = c.String("param-template")
					proxyLBServerAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBServerAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewServerAddProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBServerAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("ipaddress") {
						proxyLBServerAddParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("disabled") {
						proxyLBServerAddParam.Disabled = c.Bool("disabled")
					}
					if c.IsSet("port") {
						proxyLBServerAddParam.Port = c.Int("port")
					}
					if c.IsSet("selector") {
						proxyLBServerAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxyLBServerAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxyLBServerAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBServerAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBServerAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBServerAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBServerAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBServerAddParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBServerAddParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBServerAddParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBServerAddParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBServerAddParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBServerAddParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBServerAddParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBServerAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBServerAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBServerAddParam.GenerateSkeleton {
						proxyLBServerAddParam.GenerateSkeleton = false
						proxyLBServerAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBServerAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBServerAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBServerAddParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBServerAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBServerAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBServerAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBServerAddParam.Selector) == 0 || hasTags(&v, proxyLBServerAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxyLBServerAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("server-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBServerAddParam.SetId(id)
						p := *proxyLBServerAddParam // copy struct value
						proxyLBServerAddParam := &p
						go func() {
							err := funcs.ProxyLBServerAdd(ctx, proxyLBServerAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "server-update",
				Usage:     "ServerUpdate ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target server",
					},
					&cli.StringFlag{
						Name:  "ipaddress",
						Usage: "set target ipaddress",
					},
					&cli.BoolFlag{
						Name:  "disabled",
						Usage: "set disabled",
					},
					&cli.IntFlag{
						Name:  "port",
						Usage: "set server ports",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBServerUpdateParam.ParamTemplate = c.String("param-template")
					proxyLBServerUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBServerUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewServerUpdateProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBServerUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						proxyLBServerUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("ipaddress") {
						proxyLBServerUpdateParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("disabled") {
						proxyLBServerUpdateParam.Disabled = c.Bool("disabled")
					}
					if c.IsSet("port") {
						proxyLBServerUpdateParam.Port = c.Int("port")
					}
					if c.IsSet("selector") {
						proxyLBServerUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxyLBServerUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxyLBServerUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBServerUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBServerUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBServerUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBServerUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBServerUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBServerUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBServerUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBServerUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBServerUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBServerUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBServerUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBServerUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBServerUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBServerUpdateParam.GenerateSkeleton {
						proxyLBServerUpdateParam.GenerateSkeleton = false
						proxyLBServerUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBServerUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBServerUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBServerUpdateParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBServerUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBServerUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBServerUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBServerUpdateParam.Selector) == 0 || hasTags(&v, proxyLBServerUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxyLBServerUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("server-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBServerUpdateParam.SetId(id)
						p := *proxyLBServerUpdateParam // copy struct value
						proxyLBServerUpdateParam := &p
						go func() {
							err := funcs.ProxyLBServerUpdate(ctx, proxyLBServerUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "server-delete",
				Usage:     "ServerDelete ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target server",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBServerDeleteParam.ParamTemplate = c.String("param-template")
					proxyLBServerDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBServerDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewServerDeleteProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBServerDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						proxyLBServerDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						proxyLBServerDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxyLBServerDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxyLBServerDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBServerDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBServerDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBServerDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBServerDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBServerDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBServerDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBServerDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBServerDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBServerDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBServerDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBServerDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBServerDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBServerDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBServerDeleteParam.GenerateSkeleton {
						proxyLBServerDeleteParam.GenerateSkeleton = false
						proxyLBServerDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBServerDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBServerDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBServerDeleteParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBServerDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBServerDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBServerDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBServerDeleteParam.Selector) == 0 || hasTags(&v, proxyLBServerDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxyLBServerDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete server", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBServerDeleteParam.SetId(id)
						p := *proxyLBServerDeleteParam // copy struct value
						proxyLBServerDeleteParam := &p
						go func() {
							err := funcs.ProxyLBServerDelete(ctx, proxyLBServerDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "certificate-info",
				Aliases:   []string{"certificate-list", "cert-list", "cert-info"},
				Usage:     "CertificateInfo ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBCertificateInfoParam.ParamTemplate = c.String("param-template")
					proxyLBCertificateInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBCertificateInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCertificateInfoProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBCertificateInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						proxyLBCertificateInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						proxyLBCertificateInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBCertificateInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBCertificateInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBCertificateInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBCertificateInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBCertificateInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBCertificateInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBCertificateInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBCertificateInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBCertificateInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBCertificateInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBCertificateInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBCertificateInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBCertificateInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBCertificateInfoParam.GenerateSkeleton {
						proxyLBCertificateInfoParam.GenerateSkeleton = false
						proxyLBCertificateInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBCertificateInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBCertificateInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBCertificateInfoParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBCertificateInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBCertificateInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBCertificateInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBCertificateInfoParam.Selector) == 0 || hasTags(&v, proxyLBCertificateInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBCertificateInfoParam.SetId(id)
						p := *proxyLBCertificateInfoParam // copy struct value
						proxyLBCertificateInfoParam := &p
						go func() {
							err := funcs.ProxyLBCertificateInfo(ctx, proxyLBCertificateInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "certificate-add",
				Aliases:   []string{"cert-add"},
				Usage:     "CertificateAdd ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "server-certificate",
						Aliases: []string{"server-cert"},
						Usage:   "[Required] ",
					},
					&cli.StringFlag{
						Name:    "intermediate-certificate",
						Aliases: []string{"issuer-cert"},
					},
					&cli.StringFlag{
						Name:  "private-key",
						Usage: "[Required] ",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBCertificateAddParam.ParamTemplate = c.String("param-template")
					proxyLBCertificateAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBCertificateAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCertificateAddProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBCertificateAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("server-certificate") {
						proxyLBCertificateAddParam.ServerCertificate = c.String("server-certificate")
					}
					if c.IsSet("intermediate-certificate") {
						proxyLBCertificateAddParam.IntermediateCertificate = c.String("intermediate-certificate")
					}
					if c.IsSet("private-key") {
						proxyLBCertificateAddParam.PrivateKey = c.String("private-key")
					}
					if c.IsSet("selector") {
						proxyLBCertificateAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxyLBCertificateAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxyLBCertificateAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBCertificateAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBCertificateAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBCertificateAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBCertificateAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBCertificateAddParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBCertificateAddParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBCertificateAddParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBCertificateAddParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBCertificateAddParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBCertificateAddParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBCertificateAddParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBCertificateAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBCertificateAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBCertificateAddParam.GenerateSkeleton {
						proxyLBCertificateAddParam.GenerateSkeleton = false
						proxyLBCertificateAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBCertificateAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBCertificateAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBCertificateAddParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBCertificateAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBCertificateAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBCertificateAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBCertificateAddParam.Selector) == 0 || hasTags(&v, proxyLBCertificateAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxyLBCertificateAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("certificate-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBCertificateAddParam.SetId(id)
						p := *proxyLBCertificateAddParam // copy struct value
						proxyLBCertificateAddParam := &p
						go func() {
							err := funcs.ProxyLBCertificateAdd(ctx, proxyLBCertificateAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "certificate-update",
				Aliases:   []string{"cert-update"},
				Usage:     "CertificateUpdate ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "server-certificate",
						Aliases: []string{"server-cert"},
					},
					&cli.StringFlag{
						Name:    "intermediate-certificate",
						Aliases: []string{"issuer-cert"},
					},
					&cli.StringFlag{
						Name: "private-key",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBCertificateUpdateParam.ParamTemplate = c.String("param-template")
					proxyLBCertificateUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBCertificateUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCertificateUpdateProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBCertificateUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("server-certificate") {
						proxyLBCertificateUpdateParam.ServerCertificate = c.String("server-certificate")
					}
					if c.IsSet("intermediate-certificate") {
						proxyLBCertificateUpdateParam.IntermediateCertificate = c.String("intermediate-certificate")
					}
					if c.IsSet("private-key") {
						proxyLBCertificateUpdateParam.PrivateKey = c.String("private-key")
					}
					if c.IsSet("selector") {
						proxyLBCertificateUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxyLBCertificateUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxyLBCertificateUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBCertificateUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBCertificateUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBCertificateUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBCertificateUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBCertificateUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBCertificateUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBCertificateUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBCertificateUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBCertificateUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBCertificateUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBCertificateUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBCertificateUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBCertificateUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBCertificateUpdateParam.GenerateSkeleton {
						proxyLBCertificateUpdateParam.GenerateSkeleton = false
						proxyLBCertificateUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBCertificateUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBCertificateUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBCertificateUpdateParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBCertificateUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBCertificateUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBCertificateUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBCertificateUpdateParam.Selector) == 0 || hasTags(&v, proxyLBCertificateUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxyLBCertificateUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("certificate-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBCertificateUpdateParam.SetId(id)
						p := *proxyLBCertificateUpdateParam // copy struct value
						proxyLBCertificateUpdateParam := &p
						go func() {
							err := funcs.ProxyLBCertificateUpdate(ctx, proxyLBCertificateUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "certificate-delete",
				Aliases:   []string{"cert-delete"},
				Usage:     "CertificateDelete ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBCertificateDeleteParam.ParamTemplate = c.String("param-template")
					proxyLBCertificateDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBCertificateDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCertificateDeleteProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBCertificateDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						proxyLBCertificateDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						proxyLBCertificateDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						proxyLBCertificateDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBCertificateDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBCertificateDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBCertificateDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBCertificateDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBCertificateDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBCertificateDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBCertificateDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBCertificateDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBCertificateDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBCertificateDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBCertificateDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBCertificateDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBCertificateDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBCertificateDeleteParam.GenerateSkeleton {
						proxyLBCertificateDeleteParam.GenerateSkeleton = false
						proxyLBCertificateDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBCertificateDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBCertificateDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBCertificateDeleteParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBCertificateDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBCertificateDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBCertificateDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBCertificateDeleteParam.Selector) == 0 || hasTags(&v, proxyLBCertificateDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !proxyLBCertificateDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete certificate", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBCertificateDeleteParam.SetId(id)
						p := *proxyLBCertificateDeleteParam // copy struct value
						proxyLBCertificateDeleteParam := &p
						go func() {
							err := funcs.ProxyLBCertificateDelete(ctx, proxyLBCertificateDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "monitor",
				Usage:     "Monitor ProxyLB",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "start",
						Usage: "set start-time",
					},
					&cli.StringFlag{
						Name:  "end",
						Usage: "set end-time",
					},
					&cli.StringFlag{
						Name:  "key-format",
						Usage: "[Required] set monitoring value key-format",
						Value: "sakuracloud.proxylb.{{.ID}}",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					proxyLBMonitorParam.ParamTemplate = c.String("param-template")
					proxyLBMonitorParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(proxyLBMonitorParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewMonitorProxyLBParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(proxyLBMonitorParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("start") {
						proxyLBMonitorParam.Start = c.String("start")
					}
					if c.IsSet("end") {
						proxyLBMonitorParam.End = c.String("end")
					}
					if c.IsSet("key-format") {
						proxyLBMonitorParam.KeyFormat = c.String("key-format")
					}
					if c.IsSet("selector") {
						proxyLBMonitorParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						proxyLBMonitorParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						proxyLBMonitorParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						proxyLBMonitorParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						proxyLBMonitorParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						proxyLBMonitorParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						proxyLBMonitorParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						proxyLBMonitorParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						proxyLBMonitorParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						proxyLBMonitorParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						proxyLBMonitorParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						proxyLBMonitorParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						proxyLBMonitorParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						proxyLBMonitorParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = proxyLBMonitorParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if proxyLBMonitorParam.GenerateSkeleton {
						proxyLBMonitorParam.GenerateSkeleton = false
						proxyLBMonitorParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(proxyLBMonitorParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := proxyLBMonitorParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), proxyLBMonitorParam)

					apiClient := ctx.GetAPIClient().ProxyLB
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(proxyLBMonitorParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.CommonServiceProxyLBItems {
							if hasTags(&v, proxyLBMonitorParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", proxyLBMonitorParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.CommonServiceProxyLBItems {
										if len(proxyLBMonitorParam.Selector) == 0 || hasTags(&v, proxyLBMonitorParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						proxyLBMonitorParam.SetId(id)
						p := *proxyLBMonitorParam // copy struct value
						proxyLBMonitorParam := &p
						go func() {
							err := funcs.ProxyLBMonitor(ctx, proxyLBMonitorParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
		},
	}

	// build Category-Resource mapping
	AppendResourceCategoryMap("proxy-lb", &schema.Category{
		Key:         "commonserviceitem",
		DisplayName: "Common service items",
		Order:       50,
	})

	// build Category-Command mapping

	AppendCommandCategoryMap("proxy-lb", "acme-info", &schema.Category{
		Key:         "acme",
		DisplayName: "ACME settings",
		Order:       25,
	})
	AppendCommandCategoryMap("proxy-lb", "acme-renew", &schema.Category{
		Key:         "acme",
		DisplayName: "ACME settings",
		Order:       25,
	})
	AppendCommandCategoryMap("proxy-lb", "acme-setting", &schema.Category{
		Key:         "acme",
		DisplayName: "ACME settings",
		Order:       25,
	})
	AppendCommandCategoryMap("proxy-lb", "bind-port-add", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind Port(s) Management",
		Order:       20,
	})
	AppendCommandCategoryMap("proxy-lb", "bind-port-delete", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind Port(s) Management",
		Order:       20,
	})
	AppendCommandCategoryMap("proxy-lb", "bind-port-info", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind Port(s) Management",
		Order:       20,
	})
	AppendCommandCategoryMap("proxy-lb", "bind-port-update", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind Port(s) Management",
		Order:       20,
	})
	AppendCommandCategoryMap("proxy-lb", "certificate-add", &schema.Category{
		Key:         "certificate",
		DisplayName: "Certificate(s) Management",
		Order:       40,
	})
	AppendCommandCategoryMap("proxy-lb", "certificate-delete", &schema.Category{
		Key:         "certificate",
		DisplayName: "Certificate(s) Management",
		Order:       40,
	})
	AppendCommandCategoryMap("proxy-lb", "certificate-info", &schema.Category{
		Key:         "certificate",
		DisplayName: "Certificate(s) Management",
		Order:       40,
	})
	AppendCommandCategoryMap("proxy-lb", "certificate-update", &schema.Category{
		Key:         "certificate",
		DisplayName: "Certificate(s) Management",
		Order:       40,
	})
	AppendCommandCategoryMap("proxy-lb", "create", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("proxy-lb", "delete", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("proxy-lb", "list", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("proxy-lb", "monitor", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitoring",
		Order:       50,
	})
	AppendCommandCategoryMap("proxy-lb", "plan-change", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("proxy-lb", "read", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("proxy-lb", "response-header-add", &schema.Category{
		Key:         "response-header",
		DisplayName: "Additional Response Header(s) Management",
		Order:       22,
	})
	AppendCommandCategoryMap("proxy-lb", "response-header-delete", &schema.Category{
		Key:         "response-header",
		DisplayName: "Additional Response Header(s) Management",
		Order:       22,
	})
	AppendCommandCategoryMap("proxy-lb", "response-header-info", &schema.Category{
		Key:         "response-header",
		DisplayName: "Additional Response Header(s) Management",
		Order:       22,
	})
	AppendCommandCategoryMap("proxy-lb", "response-header-update", &schema.Category{
		Key:         "response-header",
		DisplayName: "Additional Response Header(s) Management",
		Order:       22,
	})
	AppendCommandCategoryMap("proxy-lb", "server-add", &schema.Category{
		Key:         "servers",
		DisplayName: "Real Server(s) Management",
		Order:       30,
	})
	AppendCommandCategoryMap("proxy-lb", "server-delete", &schema.Category{
		Key:         "servers",
		DisplayName: "Real Server(s) Management",
		Order:       30,
	})
	AppendCommandCategoryMap("proxy-lb", "server-info", &schema.Category{
		Key:         "servers",
		DisplayName: "Real Server(s) Management",
		Order:       30,
	})
	AppendCommandCategoryMap("proxy-lb", "server-update", &schema.Category{
		Key:         "servers",
		DisplayName: "Real Server(s) Management",
		Order:       30,
	})
	AppendCommandCategoryMap("proxy-lb", "update", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})

	// build Category-Param mapping

	AppendFlagCategoryMap("proxy-lb", "acme-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-renew", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-renew", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-renew", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-renew", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-renew", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-renew", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-renew", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-renew", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "accept-tos", &schema.Category{
		Key:         "acme",
		DisplayName: "Acme options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "common-name", &schema.Category{
		Key:         "acme",
		DisplayName: "Acme options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "disable", &schema.Category{
		Key:         "acme",
		DisplayName: "Acme options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "acme-setting", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "mode", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "port", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "redirect-to-https", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-add", "support-http2", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "index", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "index", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "mode", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "port", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "redirect-to-https", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "bind-port-update", "support-http2", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "intermediate-certificate", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "private-key", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-add", "server-certificate", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "intermediate-certificate", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "private-key", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "certificate-update", "server-certificate", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "delay-loop", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "host-header", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "icon-id", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "path", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "plan", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "protocol", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "sorry-server-ipaddress", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "sorry-server-port", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "sticky-session", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "tags", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "create", "timeout", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "from", &schema.Category{
		Key:         "limit-offset",
		DisplayName: "Limit/Offset options",
		Order:       2147483597,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "id", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "max", &schema.Category{
		Key:         "limit-offset",
		DisplayName: "Limit/Offset options",
		Order:       2147483597,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "name", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "sort", &schema.Category{
		Key:         "sort",
		DisplayName: "Sort options",
		Order:       2147483607,
	})
	AppendFlagCategoryMap("proxy-lb", "list", "tags", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "end", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "key-format", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "monitor", "start", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "plan", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "plan-change", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "read", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "header", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "port-index", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-add", "value", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "index", &schema.Category{
		Key:         "bind-port",
		DisplayName: "Bind-Port options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "port-index", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "port-index", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "header", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "index", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "port-index", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "response-header-update", "value", &schema.Category{
		Key:         "response-header",
		DisplayName: "Response-Header options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "disabled", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "ipaddress", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "port", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "index", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "disabled", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "index", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "ipaddress", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "port", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "server-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "delay-loop", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "host-header", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "icon-id", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "path", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "protocol", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "sorry-server-ipaddress", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "sorry-server-port", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "sticky-session", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "tags", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("proxy-lb", "update", "timeout", &schema.Category{
		Key:         "ProxyLB",
		DisplayName: "ProxyLB options",
		Order:       1,
	})

	// append command to GlobalContext
	Commands = append(Commands, cliCommand)
}

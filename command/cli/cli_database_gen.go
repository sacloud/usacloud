// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-commands'; DO NOT EDIT

package cli

import (
	"encoding/json"
	"fmt"
	"strings"
	"sync"

	"github.com/imdario/mergo"
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/funcs"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/schema"
	"gopkg.in/urfave/cli.v2"
)

func init() {
	databaseListParam := params.NewListDatabaseParam()
	databaseCreateParam := params.NewCreateDatabaseParam()
	databaseReadParam := params.NewReadDatabaseParam()
	databaseUpdateParam := params.NewUpdateDatabaseParam()
	databaseDeleteParam := params.NewDeleteDatabaseParam()
	databaseBootParam := params.NewBootDatabaseParam()
	databaseShutdownParam := params.NewShutdownDatabaseParam()
	databaseShutdownForceParam := params.NewShutdownForceDatabaseParam()
	databaseResetParam := params.NewResetDatabaseParam()
	databaseWaitForBootParam := params.NewWaitForBootDatabaseParam()
	databaseWaitForDownParam := params.NewWaitForDownDatabaseParam()
	databaseBackupInfoParam := params.NewBackupInfoDatabaseParam()
	databaseBackupCreateParam := params.NewBackupCreateDatabaseParam()
	databaseBackupRestoreParam := params.NewBackupRestoreDatabaseParam()
	databaseBackupLockParam := params.NewBackupLockDatabaseParam()
	databaseBackupUnlockParam := params.NewBackupUnlockDatabaseParam()
	databaseBackupRemoveParam := params.NewBackupRemoveDatabaseParam()
	databaseCloneParam := params.NewCloneDatabaseParam()
	databaseReplicaCreateParam := params.NewReplicaCreateDatabaseParam()
	databaseMonitorCPUParam := params.NewMonitorCPUDatabaseParam()
	databaseMonitorMemoryParam := params.NewMonitorMemoryDatabaseParam()
	databaseMonitorNicParam := params.NewMonitorNicDatabaseParam()
	databaseMonitorSystemDiskParam := params.NewMonitorSystemDiskDatabaseParam()
	databaseMonitorBackupDiskParam := params.NewMonitorBackupDiskDatabaseParam()
	databaseMonitorSystemDiskSizeParam := params.NewMonitorSystemDiskSizeDatabaseParam()
	databaseMonitorBackupDiskSizeParam := params.NewMonitorBackupDiskSizeDatabaseParam()
	databaseLogsParam := params.NewLogsDatabaseParam()

	cliCommand := &cli.Command{
		Name:  "database",
		Usage: "A manage commands of Database",
		Subcommands: []*cli.Command{
			{
				Name:    "list",
				Aliases: []string{"ls", "find", "selector"},
				Usage:   "List Database",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "name",
						Usage: "set filter by name(s)",
					},
					&cli.Int64SliceFlag{
						Name:  "id",
						Usage: "set filter by id(s)",
					},
					&cli.StringSliceFlag{
						Name:    "tags",
						Aliases: []string{"selector"},
						Usage:   "set filter by tags(AND)",
					},
					&cli.IntFlag{
						Name:    "from",
						Aliases: []string{"offset"},
						Usage:   "set offset",
					},
					&cli.IntFlag{
						Name:    "max",
						Aliases: []string{"limit"},
						Usage:   "set limit",
					},
					&cli.StringSliceFlag{
						Name:  "sort",
						Usage: "set field(s) for sort",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseListParam.ParamTemplate = c.String("param-template")
					databaseListParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseListParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewListDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseListParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("name") {
						databaseListParam.Name = c.StringSlice("name")
					}
					if c.IsSet("id") {
						databaseListParam.Id = toSakuraIDs(c.Int64Slice("id"))
					}
					if c.IsSet("tags") {
						databaseListParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("from") {
						databaseListParam.From = c.Int("from")
					}
					if c.IsSet("max") {
						databaseListParam.Max = c.Int("max")
					}
					if c.IsSet("sort") {
						databaseListParam.Sort = c.StringSlice("sort")
					}
					if c.IsSet("param-template") {
						databaseListParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseListParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseListParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseListParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseListParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						databaseListParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						databaseListParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						databaseListParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						databaseListParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						databaseListParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						databaseListParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						databaseListParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseListParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseListParam.GenerateSkeleton {
						databaseListParam.GenerateSkeleton = false
						databaseListParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseListParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseListParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseListParam)

					// Run command with params
					return funcs.DatabaseList(ctx, databaseListParam)

				},
			},
			{
				Name:  "create",
				Usage: "Create Database",
				Flags: []cli.Flag{
					&cli.Int64Flag{
						Name:  "switch-id",
						Usage: "[Required] set connect switch ID",
					},
					&cli.IntFlag{
						Name:  "plan",
						Usage: "[Required] set plan[10/30/90/240/500/1000]",
						Value: 10,
					},
					&cli.StringFlag{
						Name:    "database",
						Aliases: []string{"db"},
						Usage:   "[Required] set database type[postgresql/mariadb]",
					},
					&cli.StringFlag{
						Name:  "username",
						Usage: "[Required] set database default user name",
					},
					&cli.StringFlag{
						Name:  "password",
						Usage: "[Required] set database default user password",
					},
					&cli.StringFlag{
						Name:  "replica-user-password",
						Usage: "set database replica user password",
					},
					&cli.StringSliceFlag{
						Name:  "source-networks",
						Usage: "set network of allow connection",
					},
					&cli.BoolFlag{
						Name:  "enable-web-ui",
						Usage: "enable web-ui",
					},
					&cli.BoolFlag{
						Name:  "enable-backup",
						Usage: "enable backup",
					},
					&cli.StringSliceFlag{
						Name:  "backup-weekdays",
						Usage: "set backup target weekdays[all or mon/tue/wed/thu/fri/sat/sun]",
						Value: cli.NewStringSlice("all"),
					},
					&cli.StringFlag{
						Name:  "backup-time",
						Usage: "set backup start time",
					},
					&cli.IntFlag{
						Name:        "port",
						Usage:       "set database port",
						DefaultText: "PostgreSQL:5432, MariaDB:3306",
					},
					&cli.StringFlag{
						Name:    "ipaddress-1",
						Aliases: []string{"ip1", "ipaddress", "ip"},
						Usage:   "[Required] set ipaddress(#1)",
					},
					&cli.IntFlag{
						Name:  "nw-mask-len",
						Usage: "[Required] set network mask length",
					},
					&cli.StringFlag{
						Name:  "default-route",
						Usage: "[Required] set default route",
					},
					&cli.StringFlag{
						Name:  "name",
						Usage: "[Required] set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "set resource tags",
					},
					&cli.Int64Flag{
						Name:  "icon-id",
						Usage: "set Icon ID",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseCreateParam.ParamTemplate = c.String("param-template")
					databaseCreateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseCreateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCreateDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseCreateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("switch-id") {
						databaseCreateParam.SwitchId = sacloud.ID(c.Int64("switch-id"))
					}
					if c.IsSet("plan") {
						databaseCreateParam.Plan = c.Int("plan")
					}
					if c.IsSet("database") {
						databaseCreateParam.Database = c.String("database")
					}
					if c.IsSet("username") {
						databaseCreateParam.Username = c.String("username")
					}
					if c.IsSet("password") {
						databaseCreateParam.Password = c.String("password")
					}
					if c.IsSet("replica-user-password") {
						databaseCreateParam.ReplicaUserPassword = c.String("replica-user-password")
					}
					if c.IsSet("source-networks") {
						databaseCreateParam.SourceNetworks = c.StringSlice("source-networks")
					}
					if c.IsSet("enable-web-ui") {
						databaseCreateParam.EnableWebUi = c.Bool("enable-web-ui")
					}
					if c.IsSet("enable-backup") {
						databaseCreateParam.EnableBackup = c.Bool("enable-backup")
					}
					if c.IsSet("backup-weekdays") {
						databaseCreateParam.BackupWeekdays = c.StringSlice("backup-weekdays")
					}
					if c.IsSet("backup-time") {
						databaseCreateParam.BackupTime = c.String("backup-time")
					}
					if c.IsSet("port") {
						databaseCreateParam.Port = c.Int("port")
					}
					if c.IsSet("ipaddress-1") {
						databaseCreateParam.Ipaddress1 = c.String("ipaddress-1")
					}
					if c.IsSet("nw-mask-len") {
						databaseCreateParam.NwMaskLen = c.Int("nw-mask-len")
					}
					if c.IsSet("default-route") {
						databaseCreateParam.DefaultRoute = c.String("default-route")
					}
					if c.IsSet("name") {
						databaseCreateParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						databaseCreateParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						databaseCreateParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						databaseCreateParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						databaseCreateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						databaseCreateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseCreateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseCreateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseCreateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseCreateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						databaseCreateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						databaseCreateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						databaseCreateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						databaseCreateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						databaseCreateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						databaseCreateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						databaseCreateParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseCreateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseCreateParam.GenerateSkeleton {
						databaseCreateParam.GenerateSkeleton = false
						databaseCreateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseCreateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseCreateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseCreateParam)

					// confirm
					if !databaseCreateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("create") {
							return nil
						}
					}

					// Run command with params
					return funcs.DatabaseCreate(ctx, databaseCreateParam)

				},
			},
			{
				Name:      "read",
				Usage:     "Read Database",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseReadParam.ParamTemplate = c.String("param-template")
					databaseReadParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseReadParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewReadDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseReadParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						databaseReadParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						databaseReadParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseReadParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseReadParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseReadParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseReadParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						databaseReadParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						databaseReadParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						databaseReadParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						databaseReadParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						databaseReadParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						databaseReadParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						databaseReadParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						databaseReadParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseReadParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseReadParam.GenerateSkeleton {
						databaseReadParam.GenerateSkeleton = false
						databaseReadParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseReadParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseReadParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseReadParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(databaseReadParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Databases {
							if hasTags(&v, databaseReadParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", databaseReadParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {
										if len(databaseReadParam.Selector) == 0 || hasTags(&v, databaseReadParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseReadParam.SetId(id)
						p := *databaseReadParam // copy struct value
						databaseReadParam := &p
						go func() {
							err := funcs.DatabaseRead(ctx, databaseReadParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "update",
				Usage:     "Update Database",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "password",
						Usage: "set database default user password",
					},
					&cli.StringFlag{
						Name:  "replica-user-password",
						Usage: "set database replica user password",
					},
					&cli.BoolFlag{
						Name:  "enable-replication",
						Usage: "enable replication",
					},
					&cli.IntFlag{
						Name:        "port",
						Usage:       "set database port",
						DefaultText: "PostgreSQL:5432, MariaDB:3306",
					},
					&cli.StringSliceFlag{
						Name:  "source-networks",
						Usage: "set network of allow connection",
					},
					&cli.BoolFlag{
						Name:  "enable-web-ui",
						Usage: "enable web-ui",
					},
					&cli.BoolFlag{
						Name:  "enable-backup",
						Usage: "enable backup",
					},
					&cli.StringSliceFlag{
						Name:  "backup-weekdays",
						Usage: "set backup target weekdays[all or mon/tue/wed/thu/fri/sat/sun]",
						Value: cli.NewStringSlice("all"),
					},
					&cli.StringFlag{
						Name:  "backup-time",
						Usage: "set backup start time",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "name",
						Usage: "set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "set resource tags",
					},
					&cli.Int64Flag{
						Name:  "icon-id",
						Usage: "set Icon ID",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseUpdateParam.ParamTemplate = c.String("param-template")
					databaseUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewUpdateDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("password") {
						databaseUpdateParam.Password = c.String("password")
					}
					if c.IsSet("replica-user-password") {
						databaseUpdateParam.ReplicaUserPassword = c.String("replica-user-password")
					}
					if c.IsSet("enable-replication") {
						databaseUpdateParam.EnableReplication = c.Bool("enable-replication")
					}
					if c.IsSet("port") {
						databaseUpdateParam.Port = c.Int("port")
					}
					if c.IsSet("source-networks") {
						databaseUpdateParam.SourceNetworks = c.StringSlice("source-networks")
					}
					if c.IsSet("enable-web-ui") {
						databaseUpdateParam.EnableWebUi = c.Bool("enable-web-ui")
					}
					if c.IsSet("enable-backup") {
						databaseUpdateParam.EnableBackup = c.Bool("enable-backup")
					}
					if c.IsSet("backup-weekdays") {
						databaseUpdateParam.BackupWeekdays = c.StringSlice("backup-weekdays")
					}
					if c.IsSet("backup-time") {
						databaseUpdateParam.BackupTime = c.String("backup-time")
					}
					if c.IsSet("selector") {
						databaseUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("name") {
						databaseUpdateParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						databaseUpdateParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						databaseUpdateParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						databaseUpdateParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						databaseUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						databaseUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						databaseUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						databaseUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						databaseUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						databaseUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						databaseUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						databaseUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						databaseUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						databaseUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseUpdateParam.GenerateSkeleton {
						databaseUpdateParam.GenerateSkeleton = false
						databaseUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseUpdateParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(databaseUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Databases {
							if hasTags(&v, databaseUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", databaseUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {
										if len(databaseUpdateParam.Selector) == 0 || hasTags(&v, databaseUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !databaseUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseUpdateParam.SetId(id)
						p := *databaseUpdateParam // copy struct value
						databaseUpdateParam := &p
						go func() {
							err := funcs.DatabaseUpdate(ctx, databaseUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "delete",
				Aliases:   []string{"rm"},
				Usage:     "Delete Database",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.BoolFlag{
						Name:    "force",
						Aliases: []string{"f"},
						Usage:   "forced-shutdown flag if database is running",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseDeleteParam.ParamTemplate = c.String("param-template")
					databaseDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDeleteDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						databaseDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						databaseDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						databaseDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						databaseDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						databaseDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						databaseDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						databaseDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						databaseDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						databaseDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						databaseDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("force") {
						databaseDeleteParam.Force = c.Bool("force")
					}
					if c.IsSet("id") {
						databaseDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseDeleteParam.GenerateSkeleton {
						databaseDeleteParam.GenerateSkeleton = false
						databaseDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseDeleteParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(databaseDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Databases {
							if hasTags(&v, databaseDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", databaseDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {
										if len(databaseDeleteParam.Selector) == 0 || hasTags(&v, databaseDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !databaseDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseDeleteParam.SetId(id)
						p := *databaseDeleteParam // copy struct value
						databaseDeleteParam := &p
						go func() {
							err := funcs.DatabaseDelete(ctx, databaseDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "boot",
				Aliases:   []string{"power-on"},
				Usage:     "Boot Database",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseBootParam.ParamTemplate = c.String("param-template")
					databaseBootParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseBootParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBootDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseBootParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						databaseBootParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						databaseBootParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						databaseBootParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseBootParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseBootParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseBootParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseBootParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						databaseBootParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseBootParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseBootParam.GenerateSkeleton {
						databaseBootParam.GenerateSkeleton = false
						databaseBootParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseBootParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseBootParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseBootParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(databaseBootParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Databases {
							if hasTags(&v, databaseBootParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", databaseBootParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {
										if len(databaseBootParam.Selector) == 0 || hasTags(&v, databaseBootParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !databaseBootParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("boot", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseBootParam.SetId(id)
						p := *databaseBootParam // copy struct value
						databaseBootParam := &p
						go func() {
							err := funcs.DatabaseBoot(ctx, databaseBootParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "shutdown",
				Aliases:   []string{"power-off"},
				Usage:     "Shutdown Database",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseShutdownParam.ParamTemplate = c.String("param-template")
					databaseShutdownParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseShutdownParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewShutdownDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseShutdownParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						databaseShutdownParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						databaseShutdownParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						databaseShutdownParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseShutdownParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseShutdownParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseShutdownParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseShutdownParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						databaseShutdownParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseShutdownParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseShutdownParam.GenerateSkeleton {
						databaseShutdownParam.GenerateSkeleton = false
						databaseShutdownParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseShutdownParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseShutdownParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseShutdownParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(databaseShutdownParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Databases {
							if hasTags(&v, databaseShutdownParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", databaseShutdownParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {
										if len(databaseShutdownParam.Selector) == 0 || hasTags(&v, databaseShutdownParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !databaseShutdownParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("shutdown", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseShutdownParam.SetId(id)
						p := *databaseShutdownParam // copy struct value
						databaseShutdownParam := &p
						go func() {
							err := funcs.DatabaseShutdown(ctx, databaseShutdownParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "shutdown-force",
				Aliases:   []string{"stop"},
				Usage:     "ShutdownForce Database",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseShutdownForceParam.ParamTemplate = c.String("param-template")
					databaseShutdownForceParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseShutdownForceParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewShutdownForceDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseShutdownForceParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						databaseShutdownForceParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						databaseShutdownForceParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						databaseShutdownForceParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseShutdownForceParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseShutdownForceParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseShutdownForceParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseShutdownForceParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						databaseShutdownForceParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseShutdownForceParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseShutdownForceParam.GenerateSkeleton {
						databaseShutdownForceParam.GenerateSkeleton = false
						databaseShutdownForceParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseShutdownForceParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseShutdownForceParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseShutdownForceParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(databaseShutdownForceParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Databases {
							if hasTags(&v, databaseShutdownForceParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", databaseShutdownForceParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {
										if len(databaseShutdownForceParam.Selector) == 0 || hasTags(&v, databaseShutdownForceParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !databaseShutdownForceParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("shutdown-force", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseShutdownForceParam.SetId(id)
						p := *databaseShutdownForceParam // copy struct value
						databaseShutdownForceParam := &p
						go func() {
							err := funcs.DatabaseShutdownForce(ctx, databaseShutdownForceParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "reset",
				Usage:     "Reset Database",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseResetParam.ParamTemplate = c.String("param-template")
					databaseResetParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseResetParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewResetDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseResetParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						databaseResetParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						databaseResetParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						databaseResetParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseResetParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseResetParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseResetParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseResetParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						databaseResetParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseResetParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseResetParam.GenerateSkeleton {
						databaseResetParam.GenerateSkeleton = false
						databaseResetParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseResetParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseResetParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseResetParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(databaseResetParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Databases {
							if hasTags(&v, databaseResetParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", databaseResetParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {
										if len(databaseResetParam.Selector) == 0 || hasTags(&v, databaseResetParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !databaseResetParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("reset", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseResetParam.SetId(id)
						p := *databaseResetParam // copy struct value
						databaseResetParam := &p
						go func() {
							err := funcs.DatabaseReset(ctx, databaseResetParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "wait-for-boot",
				Usage:     "Wait until boot is completed",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseWaitForBootParam.ParamTemplate = c.String("param-template")
					databaseWaitForBootParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseWaitForBootParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewWaitForBootDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseWaitForBootParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						databaseWaitForBootParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						databaseWaitForBootParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseWaitForBootParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseWaitForBootParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseWaitForBootParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseWaitForBootParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						databaseWaitForBootParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseWaitForBootParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseWaitForBootParam.GenerateSkeleton {
						databaseWaitForBootParam.GenerateSkeleton = false
						databaseWaitForBootParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseWaitForBootParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseWaitForBootParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseWaitForBootParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(databaseWaitForBootParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Databases {
							if hasTags(&v, databaseWaitForBootParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", databaseWaitForBootParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {
										if len(databaseWaitForBootParam.Selector) == 0 || hasTags(&v, databaseWaitForBootParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseWaitForBootParam.SetId(id)
						p := *databaseWaitForBootParam // copy struct value
						databaseWaitForBootParam := &p
						go func() {
							err := funcs.DatabaseWaitForBoot(ctx, databaseWaitForBootParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "wait-for-down",
				Usage:     "Wait until shutdown is completed",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseWaitForDownParam.ParamTemplate = c.String("param-template")
					databaseWaitForDownParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseWaitForDownParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewWaitForDownDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseWaitForDownParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						databaseWaitForDownParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						databaseWaitForDownParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseWaitForDownParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseWaitForDownParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseWaitForDownParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseWaitForDownParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						databaseWaitForDownParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseWaitForDownParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseWaitForDownParam.GenerateSkeleton {
						databaseWaitForDownParam.GenerateSkeleton = false
						databaseWaitForDownParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseWaitForDownParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseWaitForDownParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseWaitForDownParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(databaseWaitForDownParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Databases {
							if hasTags(&v, databaseWaitForDownParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", databaseWaitForDownParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {
										if len(databaseWaitForDownParam.Selector) == 0 || hasTags(&v, databaseWaitForDownParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseWaitForDownParam.SetId(id)
						p := *databaseWaitForDownParam // copy struct value
						databaseWaitForDownParam := &p
						go func() {
							err := funcs.DatabaseWaitForDown(ctx, databaseWaitForDownParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "backup-info",
				Aliases:   []string{"backups", "backup-list"},
				Usage:     "Show information of backup",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseBackupInfoParam.ParamTemplate = c.String("param-template")
					databaseBackupInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseBackupInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBackupInfoDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseBackupInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						databaseBackupInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						databaseBackupInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseBackupInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseBackupInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseBackupInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseBackupInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						databaseBackupInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						databaseBackupInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						databaseBackupInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						databaseBackupInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						databaseBackupInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						databaseBackupInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						databaseBackupInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						databaseBackupInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseBackupInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseBackupInfoParam.GenerateSkeleton {
						databaseBackupInfoParam.GenerateSkeleton = false
						databaseBackupInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseBackupInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseBackupInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseBackupInfoParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(databaseBackupInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Databases {
							if hasTags(&v, databaseBackupInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", databaseBackupInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {
										if len(databaseBackupInfoParam.Selector) == 0 || hasTags(&v, databaseBackupInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseBackupInfoParam.SetId(id)
						p := *databaseBackupInfoParam // copy struct value
						databaseBackupInfoParam := &p
						go func() {
							err := funcs.DatabaseBackupInfo(ctx, databaseBackupInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "backup-create",
				Usage:     "Make new database backup",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseBackupCreateParam.ParamTemplate = c.String("param-template")
					databaseBackupCreateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseBackupCreateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBackupCreateDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseBackupCreateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("assumeyes") {
						databaseBackupCreateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						databaseBackupCreateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseBackupCreateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseBackupCreateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseBackupCreateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseBackupCreateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						databaseBackupCreateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						databaseBackupCreateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						databaseBackupCreateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						databaseBackupCreateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						databaseBackupCreateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						databaseBackupCreateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						databaseBackupCreateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						databaseBackupCreateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseBackupCreateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseBackupCreateParam.GenerateSkeleton {
						databaseBackupCreateParam.GenerateSkeleton = false
						databaseBackupCreateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseBackupCreateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseBackupCreateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseBackupCreateParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						return fmt.Errorf("ID or Name argument is required")

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {

										ids = append(ids, v.GetID())

									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !databaseBackupCreateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("backup-create", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseBackupCreateParam.SetId(id)
						p := *databaseBackupCreateParam // copy struct value
						databaseBackupCreateParam := &p
						go func() {
							err := funcs.DatabaseBackupCreate(ctx, databaseBackupCreateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "backup-restore",
				Usage:     "Restore database from backup",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target backup",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseBackupRestoreParam.ParamTemplate = c.String("param-template")
					databaseBackupRestoreParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseBackupRestoreParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBackupRestoreDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseBackupRestoreParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						databaseBackupRestoreParam.Index = c.Int("index")
					}
					if c.IsSet("assumeyes") {
						databaseBackupRestoreParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						databaseBackupRestoreParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseBackupRestoreParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseBackupRestoreParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseBackupRestoreParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseBackupRestoreParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						databaseBackupRestoreParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						databaseBackupRestoreParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						databaseBackupRestoreParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						databaseBackupRestoreParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						databaseBackupRestoreParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						databaseBackupRestoreParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						databaseBackupRestoreParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						databaseBackupRestoreParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseBackupRestoreParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseBackupRestoreParam.GenerateSkeleton {
						databaseBackupRestoreParam.GenerateSkeleton = false
						databaseBackupRestoreParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseBackupRestoreParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseBackupRestoreParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseBackupRestoreParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						return fmt.Errorf("ID or Name argument is required")

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {

										ids = append(ids, v.GetID())

									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !databaseBackupRestoreParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("backup-restore", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseBackupRestoreParam.SetId(id)
						p := *databaseBackupRestoreParam // copy struct value
						databaseBackupRestoreParam := &p
						go func() {
							err := funcs.DatabaseBackupRestore(ctx, databaseBackupRestoreParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "backup-lock",
				Usage:     "Lock backup",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target backup",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseBackupLockParam.ParamTemplate = c.String("param-template")
					databaseBackupLockParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseBackupLockParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBackupLockDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseBackupLockParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						databaseBackupLockParam.Index = c.Int("index")
					}
					if c.IsSet("assumeyes") {
						databaseBackupLockParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						databaseBackupLockParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseBackupLockParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseBackupLockParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseBackupLockParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseBackupLockParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						databaseBackupLockParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						databaseBackupLockParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						databaseBackupLockParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						databaseBackupLockParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						databaseBackupLockParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						databaseBackupLockParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						databaseBackupLockParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						databaseBackupLockParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseBackupLockParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseBackupLockParam.GenerateSkeleton {
						databaseBackupLockParam.GenerateSkeleton = false
						databaseBackupLockParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseBackupLockParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseBackupLockParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseBackupLockParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						return fmt.Errorf("ID or Name argument is required")

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {

										ids = append(ids, v.GetID())

									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !databaseBackupLockParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("backup-lock", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseBackupLockParam.SetId(id)
						p := *databaseBackupLockParam // copy struct value
						databaseBackupLockParam := &p
						go func() {
							err := funcs.DatabaseBackupLock(ctx, databaseBackupLockParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "backup-unlock",
				Usage:     "Unlock backup",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target backup",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseBackupUnlockParam.ParamTemplate = c.String("param-template")
					databaseBackupUnlockParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseBackupUnlockParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBackupUnlockDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseBackupUnlockParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						databaseBackupUnlockParam.Index = c.Int("index")
					}
					if c.IsSet("assumeyes") {
						databaseBackupUnlockParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						databaseBackupUnlockParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseBackupUnlockParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseBackupUnlockParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseBackupUnlockParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseBackupUnlockParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						databaseBackupUnlockParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						databaseBackupUnlockParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						databaseBackupUnlockParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						databaseBackupUnlockParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						databaseBackupUnlockParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						databaseBackupUnlockParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						databaseBackupUnlockParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						databaseBackupUnlockParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseBackupUnlockParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseBackupUnlockParam.GenerateSkeleton {
						databaseBackupUnlockParam.GenerateSkeleton = false
						databaseBackupUnlockParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseBackupUnlockParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseBackupUnlockParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseBackupUnlockParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						return fmt.Errorf("ID or Name argument is required")

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {

										ids = append(ids, v.GetID())

									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !databaseBackupUnlockParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("backup-unlock", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseBackupUnlockParam.SetId(id)
						p := *databaseBackupUnlockParam // copy struct value
						databaseBackupUnlockParam := &p
						go func() {
							err := funcs.DatabaseBackupUnlock(ctx, databaseBackupUnlockParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "backup-remove",
				Usage:     "Remove backup",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target backup",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseBackupRemoveParam.ParamTemplate = c.String("param-template")
					databaseBackupRemoveParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseBackupRemoveParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBackupRemoveDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseBackupRemoveParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						databaseBackupRemoveParam.Index = c.Int("index")
					}
					if c.IsSet("assumeyes") {
						databaseBackupRemoveParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						databaseBackupRemoveParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseBackupRemoveParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseBackupRemoveParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseBackupRemoveParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseBackupRemoveParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						databaseBackupRemoveParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						databaseBackupRemoveParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						databaseBackupRemoveParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						databaseBackupRemoveParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						databaseBackupRemoveParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						databaseBackupRemoveParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						databaseBackupRemoveParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						databaseBackupRemoveParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseBackupRemoveParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseBackupRemoveParam.GenerateSkeleton {
						databaseBackupRemoveParam.GenerateSkeleton = false
						databaseBackupRemoveParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseBackupRemoveParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseBackupRemoveParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseBackupRemoveParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						return fmt.Errorf("ID or Name argument is required")

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {

										ids = append(ids, v.GetID())

									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !databaseBackupRemoveParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("backup-remove", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseBackupRemoveParam.SetId(id)
						p := *databaseBackupRemoveParam // copy struct value
						databaseBackupRemoveParam := &p
						go func() {
							err := funcs.DatabaseBackupRemove(ctx, databaseBackupRemoveParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "clone",
				Usage:     "Create clone instance",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:        "port",
						Usage:       "set database port",
						DefaultText: "PostgreSQL:5432, MariaDB:3306",
					},
					&cli.Int64Flag{
						Name:  "switch-id",
						Usage: "set connect switch ID",
					},
					&cli.StringFlag{
						Name:    "ipaddress-1",
						Aliases: []string{"ip1", "ipaddress", "ip"},
						Usage:   "[Required] set ipaddress(#1)",
					},
					&cli.IntFlag{
						Name:  "plan",
						Usage: "[Required] set plan[10/30/90/240/500/1000]",
						Value: 10,
					},
					&cli.IntFlag{
						Name:  "nw-mask-len",
						Usage: "set network mask length",
					},
					&cli.StringFlag{
						Name:  "default-route",
						Usage: "set default route",
					},
					&cli.StringFlag{
						Name:  "replica-user-password",
						Usage: "set database replica user password",
					},
					&cli.StringSliceFlag{
						Name:  "source-networks",
						Usage: "set network of allow connection",
					},
					&cli.BoolFlag{
						Name:  "enable-web-ui",
						Usage: "enable web-ui",
					},
					&cli.BoolFlag{
						Name:  "enable-backup",
						Usage: "enable backup",
					},
					&cli.StringSliceFlag{
						Name:  "backup-weekdays",
						Usage: "set backup target weekdays[all or mon/tue/wed/thu/fri/sat/sun]",
						Value: cli.NewStringSlice("all"),
					},
					&cli.StringFlag{
						Name:  "backup-time",
						Usage: "set backup start time",
					},
					&cli.StringFlag{
						Name:  "name",
						Usage: "[Required] set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "set resource tags",
					},
					&cli.Int64Flag{
						Name:  "icon-id",
						Usage: "set Icon ID",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseCloneParam.ParamTemplate = c.String("param-template")
					databaseCloneParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseCloneParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCloneDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseCloneParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("port") {
						databaseCloneParam.Port = c.Int("port")
					}
					if c.IsSet("switch-id") {
						databaseCloneParam.SwitchId = sacloud.ID(c.Int64("switch-id"))
					}
					if c.IsSet("ipaddress-1") {
						databaseCloneParam.Ipaddress1 = c.String("ipaddress-1")
					}
					if c.IsSet("plan") {
						databaseCloneParam.Plan = c.Int("plan")
					}
					if c.IsSet("nw-mask-len") {
						databaseCloneParam.NwMaskLen = c.Int("nw-mask-len")
					}
					if c.IsSet("default-route") {
						databaseCloneParam.DefaultRoute = c.String("default-route")
					}
					if c.IsSet("replica-user-password") {
						databaseCloneParam.ReplicaUserPassword = c.String("replica-user-password")
					}
					if c.IsSet("source-networks") {
						databaseCloneParam.SourceNetworks = c.StringSlice("source-networks")
					}
					if c.IsSet("enable-web-ui") {
						databaseCloneParam.EnableWebUi = c.Bool("enable-web-ui")
					}
					if c.IsSet("enable-backup") {
						databaseCloneParam.EnableBackup = c.Bool("enable-backup")
					}
					if c.IsSet("backup-weekdays") {
						databaseCloneParam.BackupWeekdays = c.StringSlice("backup-weekdays")
					}
					if c.IsSet("backup-time") {
						databaseCloneParam.BackupTime = c.String("backup-time")
					}
					if c.IsSet("name") {
						databaseCloneParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						databaseCloneParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						databaseCloneParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						databaseCloneParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						databaseCloneParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						databaseCloneParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseCloneParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseCloneParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseCloneParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseCloneParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						databaseCloneParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						databaseCloneParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						databaseCloneParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						databaseCloneParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						databaseCloneParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						databaseCloneParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						databaseCloneParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						databaseCloneParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseCloneParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseCloneParam.GenerateSkeleton {
						databaseCloneParam.GenerateSkeleton = false
						databaseCloneParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseCloneParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseCloneParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseCloneParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						return fmt.Errorf("ID or Name argument is required")

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {

										ids = append(ids, v.GetID())

									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !databaseCloneParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("clone", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseCloneParam.SetId(id)
						p := *databaseCloneParam // copy struct value
						databaseCloneParam := &p
						go func() {
							err := funcs.DatabaseClone(ctx, databaseCloneParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "replica-create",
				Usage:     "Create replication slave instance",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.Int64Flag{
						Name:  "switch-id",
						Usage: "set connect switch ID",
					},
					&cli.StringFlag{
						Name:    "ipaddress-1",
						Aliases: []string{"ip1", "ipaddress", "ip"},
						Usage:   "[Required] set ipaddress(#1)",
					},
					&cli.IntFlag{
						Name:  "nw-mask-len",
						Usage: "set network mask length",
					},
					&cli.StringFlag{
						Name:  "default-route",
						Usage: "set default route",
					},
					&cli.StringFlag{
						Name:  "name",
						Usage: "[Required] set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "set resource tags",
					},
					&cli.Int64Flag{
						Name:  "icon-id",
						Usage: "set Icon ID",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseReplicaCreateParam.ParamTemplate = c.String("param-template")
					databaseReplicaCreateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseReplicaCreateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewReplicaCreateDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseReplicaCreateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("switch-id") {
						databaseReplicaCreateParam.SwitchId = sacloud.ID(c.Int64("switch-id"))
					}
					if c.IsSet("ipaddress-1") {
						databaseReplicaCreateParam.Ipaddress1 = c.String("ipaddress-1")
					}
					if c.IsSet("nw-mask-len") {
						databaseReplicaCreateParam.NwMaskLen = c.Int("nw-mask-len")
					}
					if c.IsSet("default-route") {
						databaseReplicaCreateParam.DefaultRoute = c.String("default-route")
					}
					if c.IsSet("name") {
						databaseReplicaCreateParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						databaseReplicaCreateParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						databaseReplicaCreateParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						databaseReplicaCreateParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						databaseReplicaCreateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						databaseReplicaCreateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseReplicaCreateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseReplicaCreateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseReplicaCreateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseReplicaCreateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						databaseReplicaCreateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						databaseReplicaCreateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						databaseReplicaCreateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						databaseReplicaCreateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						databaseReplicaCreateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						databaseReplicaCreateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						databaseReplicaCreateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						databaseReplicaCreateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseReplicaCreateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseReplicaCreateParam.GenerateSkeleton {
						databaseReplicaCreateParam.GenerateSkeleton = false
						databaseReplicaCreateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseReplicaCreateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseReplicaCreateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseReplicaCreateParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						return fmt.Errorf("ID or Name argument is required")

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {

										ids = append(ids, v.GetID())

									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !databaseReplicaCreateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("replica-create", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseReplicaCreateParam.SetId(id)
						p := *databaseReplicaCreateParam // copy struct value
						databaseReplicaCreateParam := &p
						go func() {
							err := funcs.DatabaseReplicaCreate(ctx, databaseReplicaCreateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "monitor-cpu",
				Usage:     "Collect CPU monitor values",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "start",
						Usage: "set start-time",
					},
					&cli.StringFlag{
						Name:  "end",
						Usage: "set end-time",
					},
					&cli.StringFlag{
						Name:  "key-format",
						Usage: "[Required] set monitoring value key-format",
						Value: "sakuracloud.database.{{.ID}}.cpu",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseMonitorCPUParam.ParamTemplate = c.String("param-template")
					databaseMonitorCPUParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseMonitorCPUParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewMonitorCPUDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseMonitorCPUParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("start") {
						databaseMonitorCPUParam.Start = c.String("start")
					}
					if c.IsSet("end") {
						databaseMonitorCPUParam.End = c.String("end")
					}
					if c.IsSet("key-format") {
						databaseMonitorCPUParam.KeyFormat = c.String("key-format")
					}
					if c.IsSet("selector") {
						databaseMonitorCPUParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						databaseMonitorCPUParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseMonitorCPUParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseMonitorCPUParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseMonitorCPUParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseMonitorCPUParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						databaseMonitorCPUParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						databaseMonitorCPUParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						databaseMonitorCPUParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						databaseMonitorCPUParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						databaseMonitorCPUParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						databaseMonitorCPUParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						databaseMonitorCPUParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						databaseMonitorCPUParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseMonitorCPUParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseMonitorCPUParam.GenerateSkeleton {
						databaseMonitorCPUParam.GenerateSkeleton = false
						databaseMonitorCPUParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseMonitorCPUParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseMonitorCPUParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseMonitorCPUParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(databaseMonitorCPUParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Databases {
							if hasTags(&v, databaseMonitorCPUParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", databaseMonitorCPUParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {
										if len(databaseMonitorCPUParam.Selector) == 0 || hasTags(&v, databaseMonitorCPUParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseMonitorCPUParam.SetId(id)
						p := *databaseMonitorCPUParam // copy struct value
						databaseMonitorCPUParam := &p
						go func() {
							err := funcs.DatabaseMonitorCPU(ctx, databaseMonitorCPUParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "monitor-memory",
				Usage:     "Collect memory monitor values",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "start",
						Usage: "set start-time",
					},
					&cli.StringFlag{
						Name:  "end",
						Usage: "set end-time",
					},
					&cli.StringFlag{
						Name:  "key-format",
						Usage: "[Required] set monitoring value key-format",
						Value: "sakuracloud.database.{{.ID}}.memory",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseMonitorMemoryParam.ParamTemplate = c.String("param-template")
					databaseMonitorMemoryParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseMonitorMemoryParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewMonitorMemoryDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseMonitorMemoryParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("start") {
						databaseMonitorMemoryParam.Start = c.String("start")
					}
					if c.IsSet("end") {
						databaseMonitorMemoryParam.End = c.String("end")
					}
					if c.IsSet("key-format") {
						databaseMonitorMemoryParam.KeyFormat = c.String("key-format")
					}
					if c.IsSet("selector") {
						databaseMonitorMemoryParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						databaseMonitorMemoryParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseMonitorMemoryParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseMonitorMemoryParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseMonitorMemoryParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseMonitorMemoryParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						databaseMonitorMemoryParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						databaseMonitorMemoryParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						databaseMonitorMemoryParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						databaseMonitorMemoryParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						databaseMonitorMemoryParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						databaseMonitorMemoryParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						databaseMonitorMemoryParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						databaseMonitorMemoryParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseMonitorMemoryParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseMonitorMemoryParam.GenerateSkeleton {
						databaseMonitorMemoryParam.GenerateSkeleton = false
						databaseMonitorMemoryParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseMonitorMemoryParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseMonitorMemoryParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseMonitorMemoryParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(databaseMonitorMemoryParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Databases {
							if hasTags(&v, databaseMonitorMemoryParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", databaseMonitorMemoryParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {
										if len(databaseMonitorMemoryParam.Selector) == 0 || hasTags(&v, databaseMonitorMemoryParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseMonitorMemoryParam.SetId(id)
						p := *databaseMonitorMemoryParam // copy struct value
						databaseMonitorMemoryParam := &p
						go func() {
							err := funcs.DatabaseMonitorMemory(ctx, databaseMonitorMemoryParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "monitor-nic",
				Usage:     "Collect NIC(s) monitor values",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "start",
						Usage: "set start-time",
					},
					&cli.StringFlag{
						Name:  "end",
						Usage: "set end-time",
					},
					&cli.StringFlag{
						Name:  "key-format",
						Usage: "[Required] set monitoring value key-format",
						Value: "sakuracloud.database.{{.ID}}.nic",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseMonitorNicParam.ParamTemplate = c.String("param-template")
					databaseMonitorNicParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseMonitorNicParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewMonitorNicDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseMonitorNicParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("start") {
						databaseMonitorNicParam.Start = c.String("start")
					}
					if c.IsSet("end") {
						databaseMonitorNicParam.End = c.String("end")
					}
					if c.IsSet("key-format") {
						databaseMonitorNicParam.KeyFormat = c.String("key-format")
					}
					if c.IsSet("selector") {
						databaseMonitorNicParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						databaseMonitorNicParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseMonitorNicParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseMonitorNicParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseMonitorNicParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseMonitorNicParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						databaseMonitorNicParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						databaseMonitorNicParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						databaseMonitorNicParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						databaseMonitorNicParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						databaseMonitorNicParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						databaseMonitorNicParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						databaseMonitorNicParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						databaseMonitorNicParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseMonitorNicParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseMonitorNicParam.GenerateSkeleton {
						databaseMonitorNicParam.GenerateSkeleton = false
						databaseMonitorNicParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseMonitorNicParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseMonitorNicParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseMonitorNicParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(databaseMonitorNicParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Databases {
							if hasTags(&v, databaseMonitorNicParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", databaseMonitorNicParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {
										if len(databaseMonitorNicParam.Selector) == 0 || hasTags(&v, databaseMonitorNicParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseMonitorNicParam.SetId(id)
						p := *databaseMonitorNicParam // copy struct value
						databaseMonitorNicParam := &p
						go func() {
							err := funcs.DatabaseMonitorNic(ctx, databaseMonitorNicParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "monitor-system-disk",
				Usage:     "Collect system-disk monitor values(IO)",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "start",
						Usage: "set start-time",
					},
					&cli.StringFlag{
						Name:  "end",
						Usage: "set end-time",
					},
					&cli.StringFlag{
						Name:  "key-format",
						Usage: "[Required] set monitoring value key-format",
						Value: "sakuracloud.database.{{.ID}}.disk1",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseMonitorSystemDiskParam.ParamTemplate = c.String("param-template")
					databaseMonitorSystemDiskParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseMonitorSystemDiskParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewMonitorSystemDiskDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseMonitorSystemDiskParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("start") {
						databaseMonitorSystemDiskParam.Start = c.String("start")
					}
					if c.IsSet("end") {
						databaseMonitorSystemDiskParam.End = c.String("end")
					}
					if c.IsSet("key-format") {
						databaseMonitorSystemDiskParam.KeyFormat = c.String("key-format")
					}
					if c.IsSet("selector") {
						databaseMonitorSystemDiskParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						databaseMonitorSystemDiskParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseMonitorSystemDiskParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseMonitorSystemDiskParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseMonitorSystemDiskParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseMonitorSystemDiskParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						databaseMonitorSystemDiskParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						databaseMonitorSystemDiskParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						databaseMonitorSystemDiskParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						databaseMonitorSystemDiskParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						databaseMonitorSystemDiskParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						databaseMonitorSystemDiskParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						databaseMonitorSystemDiskParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						databaseMonitorSystemDiskParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseMonitorSystemDiskParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseMonitorSystemDiskParam.GenerateSkeleton {
						databaseMonitorSystemDiskParam.GenerateSkeleton = false
						databaseMonitorSystemDiskParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseMonitorSystemDiskParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseMonitorSystemDiskParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseMonitorSystemDiskParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(databaseMonitorSystemDiskParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Databases {
							if hasTags(&v, databaseMonitorSystemDiskParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", databaseMonitorSystemDiskParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {
										if len(databaseMonitorSystemDiskParam.Selector) == 0 || hasTags(&v, databaseMonitorSystemDiskParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseMonitorSystemDiskParam.SetId(id)
						p := *databaseMonitorSystemDiskParam // copy struct value
						databaseMonitorSystemDiskParam := &p
						go func() {
							err := funcs.DatabaseMonitorSystemDisk(ctx, databaseMonitorSystemDiskParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "monitor-backup-disk",
				Usage:     "Collect backup-disk monitor values(IO)",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "start",
						Usage: "set start-time",
					},
					&cli.StringFlag{
						Name:  "end",
						Usage: "set end-time",
					},
					&cli.StringFlag{
						Name:  "key-format",
						Usage: "[Required] set monitoring value key-format",
						Value: "sakuracloud.database.{{.ID}}.disk2",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseMonitorBackupDiskParam.ParamTemplate = c.String("param-template")
					databaseMonitorBackupDiskParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseMonitorBackupDiskParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewMonitorBackupDiskDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseMonitorBackupDiskParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("start") {
						databaseMonitorBackupDiskParam.Start = c.String("start")
					}
					if c.IsSet("end") {
						databaseMonitorBackupDiskParam.End = c.String("end")
					}
					if c.IsSet("key-format") {
						databaseMonitorBackupDiskParam.KeyFormat = c.String("key-format")
					}
					if c.IsSet("selector") {
						databaseMonitorBackupDiskParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						databaseMonitorBackupDiskParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseMonitorBackupDiskParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseMonitorBackupDiskParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseMonitorBackupDiskParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseMonitorBackupDiskParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						databaseMonitorBackupDiskParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						databaseMonitorBackupDiskParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						databaseMonitorBackupDiskParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						databaseMonitorBackupDiskParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						databaseMonitorBackupDiskParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						databaseMonitorBackupDiskParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						databaseMonitorBackupDiskParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						databaseMonitorBackupDiskParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseMonitorBackupDiskParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseMonitorBackupDiskParam.GenerateSkeleton {
						databaseMonitorBackupDiskParam.GenerateSkeleton = false
						databaseMonitorBackupDiskParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseMonitorBackupDiskParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseMonitorBackupDiskParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseMonitorBackupDiskParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(databaseMonitorBackupDiskParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Databases {
							if hasTags(&v, databaseMonitorBackupDiskParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", databaseMonitorBackupDiskParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {
										if len(databaseMonitorBackupDiskParam.Selector) == 0 || hasTags(&v, databaseMonitorBackupDiskParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseMonitorBackupDiskParam.SetId(id)
						p := *databaseMonitorBackupDiskParam // copy struct value
						databaseMonitorBackupDiskParam := &p
						go func() {
							err := funcs.DatabaseMonitorBackupDisk(ctx, databaseMonitorBackupDiskParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "monitor-system-disk-size",
				Usage:     "Collect system-disk monitor values(usage)",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "start",
						Usage: "set start-time",
					},
					&cli.StringFlag{
						Name:  "end",
						Usage: "set end-time",
					},
					&cli.StringFlag{
						Name:  "key-format",
						Usage: "[Required] set monitoring value key-format",
						Value: "sakuracloud.database.{{.ID}}.disk1",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseMonitorSystemDiskSizeParam.ParamTemplate = c.String("param-template")
					databaseMonitorSystemDiskSizeParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseMonitorSystemDiskSizeParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewMonitorSystemDiskSizeDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseMonitorSystemDiskSizeParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("start") {
						databaseMonitorSystemDiskSizeParam.Start = c.String("start")
					}
					if c.IsSet("end") {
						databaseMonitorSystemDiskSizeParam.End = c.String("end")
					}
					if c.IsSet("key-format") {
						databaseMonitorSystemDiskSizeParam.KeyFormat = c.String("key-format")
					}
					if c.IsSet("selector") {
						databaseMonitorSystemDiskSizeParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						databaseMonitorSystemDiskSizeParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseMonitorSystemDiskSizeParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseMonitorSystemDiskSizeParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseMonitorSystemDiskSizeParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseMonitorSystemDiskSizeParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						databaseMonitorSystemDiskSizeParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						databaseMonitorSystemDiskSizeParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						databaseMonitorSystemDiskSizeParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						databaseMonitorSystemDiskSizeParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						databaseMonitorSystemDiskSizeParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						databaseMonitorSystemDiskSizeParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						databaseMonitorSystemDiskSizeParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						databaseMonitorSystemDiskSizeParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseMonitorSystemDiskSizeParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseMonitorSystemDiskSizeParam.GenerateSkeleton {
						databaseMonitorSystemDiskSizeParam.GenerateSkeleton = false
						databaseMonitorSystemDiskSizeParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseMonitorSystemDiskSizeParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseMonitorSystemDiskSizeParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseMonitorSystemDiskSizeParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(databaseMonitorSystemDiskSizeParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Databases {
							if hasTags(&v, databaseMonitorSystemDiskSizeParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", databaseMonitorSystemDiskSizeParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {
										if len(databaseMonitorSystemDiskSizeParam.Selector) == 0 || hasTags(&v, databaseMonitorSystemDiskSizeParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseMonitorSystemDiskSizeParam.SetId(id)
						p := *databaseMonitorSystemDiskSizeParam // copy struct value
						databaseMonitorSystemDiskSizeParam := &p
						go func() {
							err := funcs.DatabaseMonitorSystemDiskSize(ctx, databaseMonitorSystemDiskSizeParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "monitor-backup-disk-size",
				Usage:     "Collect backup-disk monitor values(usage)",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "start",
						Usage: "set start-time",
					},
					&cli.StringFlag{
						Name:  "end",
						Usage: "set end-time",
					},
					&cli.StringFlag{
						Name:  "key-format",
						Usage: "[Required] set monitoring value key-format",
						Value: "sakuracloud.database.{{.ID}}.disk2",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseMonitorBackupDiskSizeParam.ParamTemplate = c.String("param-template")
					databaseMonitorBackupDiskSizeParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseMonitorBackupDiskSizeParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewMonitorBackupDiskSizeDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseMonitorBackupDiskSizeParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("start") {
						databaseMonitorBackupDiskSizeParam.Start = c.String("start")
					}
					if c.IsSet("end") {
						databaseMonitorBackupDiskSizeParam.End = c.String("end")
					}
					if c.IsSet("key-format") {
						databaseMonitorBackupDiskSizeParam.KeyFormat = c.String("key-format")
					}
					if c.IsSet("selector") {
						databaseMonitorBackupDiskSizeParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						databaseMonitorBackupDiskSizeParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseMonitorBackupDiskSizeParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseMonitorBackupDiskSizeParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseMonitorBackupDiskSizeParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseMonitorBackupDiskSizeParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						databaseMonitorBackupDiskSizeParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						databaseMonitorBackupDiskSizeParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						databaseMonitorBackupDiskSizeParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						databaseMonitorBackupDiskSizeParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						databaseMonitorBackupDiskSizeParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						databaseMonitorBackupDiskSizeParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						databaseMonitorBackupDiskSizeParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						databaseMonitorBackupDiskSizeParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseMonitorBackupDiskSizeParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseMonitorBackupDiskSizeParam.GenerateSkeleton {
						databaseMonitorBackupDiskSizeParam.GenerateSkeleton = false
						databaseMonitorBackupDiskSizeParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseMonitorBackupDiskSizeParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseMonitorBackupDiskSizeParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseMonitorBackupDiskSizeParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(databaseMonitorBackupDiskSizeParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Databases {
							if hasTags(&v, databaseMonitorBackupDiskSizeParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", databaseMonitorBackupDiskSizeParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {
										if len(databaseMonitorBackupDiskSizeParam.Selector) == 0 || hasTags(&v, databaseMonitorBackupDiskSizeParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseMonitorBackupDiskSizeParam.SetId(id)
						p := *databaseMonitorBackupDiskSizeParam // copy struct value
						databaseMonitorBackupDiskSizeParam := &p
						go func() {
							err := funcs.DatabaseMonitorBackupDiskSize(ctx, databaseMonitorBackupDiskSizeParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "logs",
				Usage:     "Logs Database",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "log-name",
						Aliases: []string{"name"},
						Usage:   "set target logfile name",
						Value:   "all",
					},
					&cli.BoolFlag{
						Name:    "follow",
						Aliases: []string{"f"},
						Usage:   "follow log output",
					},
					&cli.Int64Flag{
						Name:  "refresh-interval",
						Usage: "log refresh interval second",
						Value: 3,
					},
					&cli.BoolFlag{
						Name:  "list-log-names",
						Usage: "show log-name list",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					databaseLogsParam.ParamTemplate = c.String("param-template")
					databaseLogsParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(databaseLogsParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewLogsDatabaseParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(databaseLogsParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("log-name") {
						databaseLogsParam.LogName = c.String("log-name")
					}
					if c.IsSet("follow") {
						databaseLogsParam.Follow = c.Bool("follow")
					}
					if c.IsSet("refresh-interval") {
						databaseLogsParam.RefreshInterval = sacloud.ID(c.Int64("refresh-interval"))
					}
					if c.IsSet("list-log-names") {
						databaseLogsParam.ListLogNames = c.Bool("list-log-names")
					}
					if c.IsSet("selector") {
						databaseLogsParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						databaseLogsParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						databaseLogsParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						databaseLogsParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						databaseLogsParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						databaseLogsParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						databaseLogsParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = databaseLogsParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if databaseLogsParam.GenerateSkeleton {
						databaseLogsParam.GenerateSkeleton = false
						databaseLogsParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(databaseLogsParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := databaseLogsParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), databaseLogsParam)

					apiClient := ctx.GetAPIClient().Database
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(databaseLogsParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Databases {
							if hasTags(&v, databaseLogsParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", databaseLogsParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Databases {
										if len(databaseLogsParam.Selector) == 0 || hasTags(&v, databaseLogsParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						databaseLogsParam.SetId(id)
						p := *databaseLogsParam // copy struct value
						databaseLogsParam := &p
						go func() {
							err := funcs.DatabaseLogs(ctx, databaseLogsParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
		},
	}

	// build Category-Resource mapping
	AppendResourceCategoryMap("database", &schema.Category{
		Key:         "appliance",
		DisplayName: "Appliance",
		Order:       40,
	})

	// build Category-Command mapping

	AppendCommandCategoryMap("database", "backup-create", &schema.Category{
		Key:         "backup",
		DisplayName: "Backup Management",
		Order:       30,
	})
	AppendCommandCategoryMap("database", "backup-info", &schema.Category{
		Key:         "backup",
		DisplayName: "Backup Management",
		Order:       30,
	})
	AppendCommandCategoryMap("database", "backup-lock", &schema.Category{
		Key:         "backup",
		DisplayName: "Backup Management",
		Order:       30,
	})
	AppendCommandCategoryMap("database", "backup-remove", &schema.Category{
		Key:         "backup",
		DisplayName: "Backup Management",
		Order:       30,
	})
	AppendCommandCategoryMap("database", "backup-restore", &schema.Category{
		Key:         "backup",
		DisplayName: "Backup Management",
		Order:       30,
	})
	AppendCommandCategoryMap("database", "backup-unlock", &schema.Category{
		Key:         "backup",
		DisplayName: "Backup Management",
		Order:       30,
	})
	AppendCommandCategoryMap("database", "boot", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("database", "clone", &schema.Category{
		Key:         "clone",
		DisplayName: "Clone Instance Management",
		Order:       40,
	})
	AppendCommandCategoryMap("database", "create", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("database", "delete", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("database", "list", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("database", "logs", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitoring",
		Order:       50,
	})
	AppendCommandCategoryMap("database", "monitor-backup-disk", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitoring",
		Order:       50,
	})
	AppendCommandCategoryMap("database", "monitor-backup-disk-size", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitoring",
		Order:       50,
	})
	AppendCommandCategoryMap("database", "monitor-cpu", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitoring",
		Order:       50,
	})
	AppendCommandCategoryMap("database", "monitor-memory", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitoring",
		Order:       50,
	})
	AppendCommandCategoryMap("database", "monitor-nic", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitoring",
		Order:       50,
	})
	AppendCommandCategoryMap("database", "monitor-system-disk", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitoring",
		Order:       50,
	})
	AppendCommandCategoryMap("database", "monitor-system-disk-size", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitoring",
		Order:       50,
	})
	AppendCommandCategoryMap("database", "read", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("database", "replica-create", &schema.Category{
		Key:         "replication",
		DisplayName: "Replica Instance Management",
		Order:       45,
	})
	AppendCommandCategoryMap("database", "reset", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("database", "shutdown", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("database", "shutdown-force", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("database", "update", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("database", "wait-for-boot", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("database", "wait-for-down", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})

	// build Category-Param mapping

	AppendFlagCategoryMap("database", "backup-create", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-create", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-create", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-create", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-create", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-create", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "backup-create", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-create", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-create", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-create", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-create", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-create", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-create", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-create", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "backup-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("database", "backup-lock", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-lock", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-lock", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-lock", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-lock", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-lock", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "backup-lock", "index", &schema.Category{
		Key:         "backup",
		DisplayName: "Backup options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "backup-lock", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-lock", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-lock", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-lock", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-lock", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-lock", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-lock", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-lock", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-remove", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-remove", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-remove", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-remove", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-remove", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-remove", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "backup-remove", "index", &schema.Category{
		Key:         "backup",
		DisplayName: "Backup options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "backup-remove", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-remove", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-remove", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-remove", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-remove", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-remove", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-remove", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-remove", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-restore", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-restore", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-restore", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-restore", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-restore", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-restore", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "backup-restore", "index", &schema.Category{
		Key:         "backup",
		DisplayName: "Backup options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "backup-restore", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-restore", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-restore", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-restore", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-restore", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-restore", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-restore", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-restore", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-unlock", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-unlock", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-unlock", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-unlock", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-unlock", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-unlock", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "backup-unlock", "index", &schema.Category{
		Key:         "backup",
		DisplayName: "Backup options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "backup-unlock", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-unlock", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-unlock", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-unlock", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-unlock", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "backup-unlock", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-unlock", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "backup-unlock", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "boot", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "boot", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "boot", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "boot", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "boot", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "boot", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "boot", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "boot", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("database", "clone", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "clone", "backup-time", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "clone", "backup-weekdays", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "clone", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "clone", "default-route", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "clone", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("database", "clone", "enable-backup", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "clone", "enable-web-ui", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "clone", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "clone", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "clone", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "clone", "icon-id", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("database", "clone", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "clone", "ipaddress1", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "clone", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("database", "clone", "nw-mask-len", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "clone", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "clone", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "clone", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "clone", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "clone", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "clone", "plan", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "clone", "port", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "clone", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "clone", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "clone", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "clone", "replica-user-password", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "clone", "source-networks", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "clone", "switch-id", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "clone", "tags", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("database", "create", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "create", "backup-time", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       10,
	})
	AppendFlagCategoryMap("database", "create", "backup-weekdays", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       10,
	})
	AppendFlagCategoryMap("database", "create", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "create", "database", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       10,
	})
	AppendFlagCategoryMap("database", "create", "default-route", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       20,
	})
	AppendFlagCategoryMap("database", "create", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("database", "create", "enable-backup", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       10,
	})
	AppendFlagCategoryMap("database", "create", "enable-web-ui", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       10,
	})
	AppendFlagCategoryMap("database", "create", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "create", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "create", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "create", "icon-id", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("database", "create", "ipaddress1", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       20,
	})
	AppendFlagCategoryMap("database", "create", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("database", "create", "nw-mask-len", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       20,
	})
	AppendFlagCategoryMap("database", "create", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "create", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "create", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "create", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "create", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "create", "password", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       10,
	})
	AppendFlagCategoryMap("database", "create", "plan", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       10,
	})
	AppendFlagCategoryMap("database", "create", "port", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       20,
	})
	AppendFlagCategoryMap("database", "create", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "create", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "create", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "create", "replica-user-password", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       10,
	})
	AppendFlagCategoryMap("database", "create", "source-networks", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       10,
	})
	AppendFlagCategoryMap("database", "create", "switch-id", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       10,
	})
	AppendFlagCategoryMap("database", "create", "tags", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("database", "create", "username", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       10,
	})
	AppendFlagCategoryMap("database", "delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "delete", "force", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("database", "list", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "list", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "list", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "list", "from", &schema.Category{
		Key:         "limit-offset",
		DisplayName: "Limit/Offset options",
		Order:       2147483597,
	})
	AppendFlagCategoryMap("database", "list", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "list", "id", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("database", "list", "max", &schema.Category{
		Key:         "limit-offset",
		DisplayName: "Limit/Offset options",
		Order:       2147483597,
	})
	AppendFlagCategoryMap("database", "list", "name", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("database", "list", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "list", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "list", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "list", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "list", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "list", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "list", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "list", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "list", "sort", &schema.Category{
		Key:         "sort",
		DisplayName: "Sort options",
		Order:       2147483607,
	})
	AppendFlagCategoryMap("database", "list", "tags", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("database", "logs", "follow", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "logs", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "logs", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "logs", "list-log-names", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "logs", "log-name", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "logs", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "logs", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "logs", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "logs", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "logs", "refresh-interval", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "logs", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk", "end", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk", "key-format", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk", "start", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk-size", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk-size", "end", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk-size", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk-size", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk-size", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk-size", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk-size", "key-format", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk-size", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk-size", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk-size", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk-size", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk-size", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk-size", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk-size", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk-size", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk-size", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("database", "monitor-backup-disk-size", "start", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "monitor-cpu", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-cpu", "end", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "monitor-cpu", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-cpu", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-cpu", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-cpu", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "monitor-cpu", "key-format", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "monitor-cpu", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-cpu", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-cpu", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-cpu", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-cpu", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-cpu", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-cpu", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-cpu", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-cpu", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("database", "monitor-cpu", "start", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "monitor-memory", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-memory", "end", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "monitor-memory", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-memory", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-memory", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-memory", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "monitor-memory", "key-format", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "monitor-memory", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-memory", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-memory", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-memory", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-memory", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-memory", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-memory", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-memory", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-memory", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("database", "monitor-memory", "start", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "monitor-nic", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-nic", "end", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "monitor-nic", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-nic", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-nic", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-nic", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "monitor-nic", "key-format", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "monitor-nic", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-nic", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-nic", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-nic", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-nic", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-nic", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-nic", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-nic", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-nic", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("database", "monitor-nic", "start", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk", "end", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk", "key-format", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk", "start", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk-size", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk-size", "end", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk-size", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk-size", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk-size", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk-size", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk-size", "key-format", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk-size", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk-size", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk-size", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk-size", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk-size", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk-size", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk-size", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk-size", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk-size", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("database", "monitor-system-disk-size", "start", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "read", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "read", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "read", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "read", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "read", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "read", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "read", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "read", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "read", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "read", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "read", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "read", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "read", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "read", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("database", "replica-create", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "replica-create", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "replica-create", "default-route", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "replica-create", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("database", "replica-create", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "replica-create", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "replica-create", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "replica-create", "icon-id", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("database", "replica-create", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "replica-create", "ipaddress1", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "replica-create", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("database", "replica-create", "nw-mask-len", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "replica-create", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "replica-create", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "replica-create", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "replica-create", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "replica-create", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "replica-create", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "replica-create", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "replica-create", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "replica-create", "switch-id", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "replica-create", "tags", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("database", "reset", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "reset", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "reset", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "reset", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "reset", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "reset", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "reset", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "reset", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("database", "shutdown", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "shutdown", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "shutdown", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "shutdown", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "shutdown", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "shutdown", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "shutdown", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "shutdown", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("database", "shutdown-force", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "shutdown-force", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "shutdown-force", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "shutdown-force", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "shutdown-force", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "shutdown-force", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "shutdown-force", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "shutdown-force", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("database", "update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "update", "backup-time", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "update", "backup-weekdays", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "update", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("database", "update", "enable-backup", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "update", "enable-replication", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "update", "enable-web-ui", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "update", "icon-id", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("database", "update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "update", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("database", "update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "update", "password", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "update", "port", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("database", "update", "replica-user-password", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("database", "update", "source-networks", &schema.Category{
		Key:         "database",
		DisplayName: "Database options",
		Order:       1,
	})
	AppendFlagCategoryMap("database", "update", "tags", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("database", "wait-for-boot", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "wait-for-boot", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "wait-for-boot", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "wait-for-boot", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "wait-for-boot", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "wait-for-boot", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "wait-for-boot", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("database", "wait-for-down", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "wait-for-down", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("database", "wait-for-down", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "wait-for-down", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "wait-for-down", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "wait-for-down", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("database", "wait-for-down", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})

	// append command to GlobalContext
	Commands = append(Commands, cliCommand)
}

// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-commands'; DO NOT EDIT

package cli

import (
	"encoding/json"
	"fmt"
	"strings"
	"sync"

	"github.com/imdario/mergo"
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/funcs"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/schema"
	"gopkg.in/urfave/cli.v2"
)

func init() {
	mobileGatewayListParam := params.NewListMobileGatewayParam()
	mobileGatewayCreateParam := params.NewCreateMobileGatewayParam()
	mobileGatewayReadParam := params.NewReadMobileGatewayParam()
	mobileGatewayUpdateParam := params.NewUpdateMobileGatewayParam()
	mobileGatewayDeleteParam := params.NewDeleteMobileGatewayParam()
	mobileGatewayBootParam := params.NewBootMobileGatewayParam()
	mobileGatewayShutdownParam := params.NewShutdownMobileGatewayParam()
	mobileGatewayShutdownForceParam := params.NewShutdownForceMobileGatewayParam()
	mobileGatewayResetParam := params.NewResetMobileGatewayParam()
	mobileGatewayWaitForBootParam := params.NewWaitForBootMobileGatewayParam()
	mobileGatewayWaitForDownParam := params.NewWaitForDownMobileGatewayParam()
	mobileGatewayInterfaceInfoParam := params.NewInterfaceInfoMobileGatewayParam()
	mobileGatewayInterfaceConnectParam := params.NewInterfaceConnectMobileGatewayParam()
	mobileGatewayInterfaceUpdateParam := params.NewInterfaceUpdateMobileGatewayParam()
	mobileGatewayInterfaceDisconnectParam := params.NewInterfaceDisconnectMobileGatewayParam()
	mobileGatewayTrafficControlInfoParam := params.NewTrafficControlInfoMobileGatewayParam()
	mobileGatewayTrafficControlEnableParam := params.NewTrafficControlEnableMobileGatewayParam()
	mobileGatewayTrafficControlUpdateParam := params.NewTrafficControlUpdateMobileGatewayParam()
	mobileGatewayTrafficControlDisableParam := params.NewTrafficControlDisableMobileGatewayParam()
	mobileGatewayStaticRouteInfoParam := params.NewStaticRouteInfoMobileGatewayParam()
	mobileGatewayStaticRouteAddParam := params.NewStaticRouteAddMobileGatewayParam()
	mobileGatewayStaticRouteUpdateParam := params.NewStaticRouteUpdateMobileGatewayParam()
	mobileGatewayStaticRouteDeleteParam := params.NewStaticRouteDeleteMobileGatewayParam()
	mobileGatewaySIMInfoParam := params.NewSIMInfoMobileGatewayParam()
	mobileGatewaySIMAddParam := params.NewSIMAddMobileGatewayParam()
	mobileGatewaySIMUpdateParam := params.NewSIMUpdateMobileGatewayParam()
	mobileGatewaySIMDeleteParam := params.NewSIMDeleteMobileGatewayParam()
	mobileGatewaySIMRouteInfoParam := params.NewSIMRouteInfoMobileGatewayParam()
	mobileGatewaySIMRouteAddParam := params.NewSIMRouteAddMobileGatewayParam()
	mobileGatewaySIMRouteUpdateParam := params.NewSIMRouteUpdateMobileGatewayParam()
	mobileGatewaySIMRouteDeleteParam := params.NewSIMRouteDeleteMobileGatewayParam()
	mobileGatewayDNSUpdateParam := params.NewDNSUpdateMobileGatewayParam()
	mobileGatewayLogsParam := params.NewLogsMobileGatewayParam()

	cliCommand := &cli.Command{
		Name:    "mobile-gateway",
		Aliases: []string{"mgw"},
		Usage:   "A manage commands of MobileGateway",
		Subcommands: []*cli.Command{
			{
				Name:    "list",
				Aliases: []string{"ls", "find", "selector"},
				Usage:   "List MobileGateway",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "name",
						Usage: "set filter by name(s)",
					},
					&cli.Int64SliceFlag{
						Name:  "id",
						Usage: "set filter by id(s)",
					},
					&cli.StringSliceFlag{
						Name:    "tags",
						Aliases: []string{"selector"},
						Usage:   "set filter by tags(AND)",
					},
					&cli.IntFlag{
						Name:    "from",
						Aliases: []string{"offset"},
						Usage:   "set offset",
					},
					&cli.IntFlag{
						Name:    "max",
						Aliases: []string{"limit"},
						Usage:   "set limit",
					},
					&cli.StringSliceFlag{
						Name:  "sort",
						Usage: "set field(s) for sort",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayListParam.ParamTemplate = c.String("param-template")
					mobileGatewayListParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayListParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewListMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayListParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("name") {
						mobileGatewayListParam.Name = c.StringSlice("name")
					}
					if c.IsSet("id") {
						mobileGatewayListParam.Id = toSakuraIDs(c.Int64Slice("id"))
					}
					if c.IsSet("tags") {
						mobileGatewayListParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("from") {
						mobileGatewayListParam.From = c.Int("from")
					}
					if c.IsSet("max") {
						mobileGatewayListParam.Max = c.Int("max")
					}
					if c.IsSet("sort") {
						mobileGatewayListParam.Sort = c.StringSlice("sort")
					}
					if c.IsSet("param-template") {
						mobileGatewayListParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayListParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayListParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayListParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayListParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						mobileGatewayListParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						mobileGatewayListParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						mobileGatewayListParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						mobileGatewayListParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						mobileGatewayListParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						mobileGatewayListParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						mobileGatewayListParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayListParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayListParam.GenerateSkeleton {
						mobileGatewayListParam.GenerateSkeleton = false
						mobileGatewayListParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayListParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayListParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayListParam)

					// Run command with params
					return funcs.MobileGatewayList(ctx, mobileGatewayListParam)

				},
			},
			{
				Name:  "create",
				Usage: "Create MobileGateway",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:  "internet-connection",
						Usage: "connect to internet",
					},
					&cli.StringFlag{
						Name:  "name",
						Usage: "[Required] set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "set resource tags",
					},
					&cli.Int64Flag{
						Name:  "icon-id",
						Usage: "set Icon ID",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayCreateParam.ParamTemplate = c.String("param-template")
					mobileGatewayCreateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayCreateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCreateMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayCreateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("internet-connection") {
						mobileGatewayCreateParam.InternetConnection = c.Bool("internet-connection")
					}
					if c.IsSet("name") {
						mobileGatewayCreateParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						mobileGatewayCreateParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						mobileGatewayCreateParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						mobileGatewayCreateParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						mobileGatewayCreateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewayCreateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayCreateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayCreateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayCreateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayCreateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						mobileGatewayCreateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						mobileGatewayCreateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						mobileGatewayCreateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						mobileGatewayCreateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						mobileGatewayCreateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						mobileGatewayCreateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						mobileGatewayCreateParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayCreateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayCreateParam.GenerateSkeleton {
						mobileGatewayCreateParam.GenerateSkeleton = false
						mobileGatewayCreateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayCreateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayCreateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayCreateParam)

					// confirm
					if !mobileGatewayCreateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("create") {
							return nil
						}
					}

					// Run command with params
					return funcs.MobileGatewayCreate(ctx, mobileGatewayCreateParam)

				},
			},
			{
				Name:      "read",
				Usage:     "Read MobileGateway",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayReadParam.ParamTemplate = c.String("param-template")
					mobileGatewayReadParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayReadParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewReadMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayReadParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobileGatewayReadParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						mobileGatewayReadParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayReadParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayReadParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayReadParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayReadParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						mobileGatewayReadParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						mobileGatewayReadParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						mobileGatewayReadParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						mobileGatewayReadParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						mobileGatewayReadParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						mobileGatewayReadParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						mobileGatewayReadParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						mobileGatewayReadParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayReadParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayReadParam.GenerateSkeleton {
						mobileGatewayReadParam.GenerateSkeleton = false
						mobileGatewayReadParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayReadParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayReadParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayReadParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayReadParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayReadParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayReadParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayReadParam.Selector) == 0 || hasTags(&v, mobileGatewayReadParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayReadParam.SetId(id)
						p := *mobileGatewayReadParam // copy struct value
						mobileGatewayReadParam := &p
						go func() {
							err := funcs.MobileGatewayRead(ctx, mobileGatewayReadParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "update",
				Usage:     "Update MobileGateway",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:  "internet-connection",
						Usage: "connect to internet",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "name",
						Usage: "set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "set resource tags",
					},
					&cli.Int64Flag{
						Name:  "icon-id",
						Usage: "set Icon ID",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayUpdateParam.ParamTemplate = c.String("param-template")
					mobileGatewayUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewUpdateMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("internet-connection") {
						mobileGatewayUpdateParam.InternetConnection = c.Bool("internet-connection")
					}
					if c.IsSet("selector") {
						mobileGatewayUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("name") {
						mobileGatewayUpdateParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						mobileGatewayUpdateParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						mobileGatewayUpdateParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						mobileGatewayUpdateParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						mobileGatewayUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewayUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						mobileGatewayUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						mobileGatewayUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						mobileGatewayUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						mobileGatewayUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						mobileGatewayUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						mobileGatewayUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						mobileGatewayUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						mobileGatewayUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayUpdateParam.GenerateSkeleton {
						mobileGatewayUpdateParam.GenerateSkeleton = false
						mobileGatewayUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayUpdateParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayUpdateParam.Selector) == 0 || hasTags(&v, mobileGatewayUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !mobileGatewayUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayUpdateParam.SetId(id)
						p := *mobileGatewayUpdateParam // copy struct value
						mobileGatewayUpdateParam := &p
						go func() {
							err := funcs.MobileGatewayUpdate(ctx, mobileGatewayUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "delete",
				Aliases:   []string{"rm"},
				Usage:     "Delete MobileGateway",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:    "force",
						Aliases: []string{"f"},
						Usage:   "forced-shutdown flag if mobile-gateway is running",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayDeleteParam.ParamTemplate = c.String("param-template")
					mobileGatewayDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDeleteMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("force") {
						mobileGatewayDeleteParam.Force = c.Bool("force")
					}
					if c.IsSet("selector") {
						mobileGatewayDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobileGatewayDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewayDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						mobileGatewayDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						mobileGatewayDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						mobileGatewayDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						mobileGatewayDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						mobileGatewayDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						mobileGatewayDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						mobileGatewayDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						mobileGatewayDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayDeleteParam.GenerateSkeleton {
						mobileGatewayDeleteParam.GenerateSkeleton = false
						mobileGatewayDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayDeleteParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayDeleteParam.Selector) == 0 || hasTags(&v, mobileGatewayDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !mobileGatewayDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayDeleteParam.SetId(id)
						p := *mobileGatewayDeleteParam // copy struct value
						mobileGatewayDeleteParam := &p
						go func() {
							err := funcs.MobileGatewayDelete(ctx, mobileGatewayDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "boot",
				Aliases:   []string{"power-on"},
				Usage:     "Boot MobileGateway",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayBootParam.ParamTemplate = c.String("param-template")
					mobileGatewayBootParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayBootParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBootMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayBootParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobileGatewayBootParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobileGatewayBootParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewayBootParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayBootParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayBootParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayBootParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayBootParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewayBootParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayBootParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayBootParam.GenerateSkeleton {
						mobileGatewayBootParam.GenerateSkeleton = false
						mobileGatewayBootParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayBootParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayBootParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayBootParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayBootParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayBootParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayBootParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayBootParam.Selector) == 0 || hasTags(&v, mobileGatewayBootParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !mobileGatewayBootParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("boot", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayBootParam.SetId(id)
						p := *mobileGatewayBootParam // copy struct value
						mobileGatewayBootParam := &p
						go func() {
							err := funcs.MobileGatewayBoot(ctx, mobileGatewayBootParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "shutdown",
				Aliases:   []string{"power-off"},
				Usage:     "Shutdown MobileGateway",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayShutdownParam.ParamTemplate = c.String("param-template")
					mobileGatewayShutdownParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayShutdownParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewShutdownMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayShutdownParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobileGatewayShutdownParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobileGatewayShutdownParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewayShutdownParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayShutdownParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayShutdownParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayShutdownParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayShutdownParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewayShutdownParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayShutdownParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayShutdownParam.GenerateSkeleton {
						mobileGatewayShutdownParam.GenerateSkeleton = false
						mobileGatewayShutdownParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayShutdownParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayShutdownParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayShutdownParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayShutdownParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayShutdownParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayShutdownParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayShutdownParam.Selector) == 0 || hasTags(&v, mobileGatewayShutdownParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !mobileGatewayShutdownParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("shutdown", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayShutdownParam.SetId(id)
						p := *mobileGatewayShutdownParam // copy struct value
						mobileGatewayShutdownParam := &p
						go func() {
							err := funcs.MobileGatewayShutdown(ctx, mobileGatewayShutdownParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "shutdown-force",
				Aliases:   []string{"stop"},
				Usage:     "ShutdownForce MobileGateway",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayShutdownForceParam.ParamTemplate = c.String("param-template")
					mobileGatewayShutdownForceParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayShutdownForceParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewShutdownForceMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayShutdownForceParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobileGatewayShutdownForceParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobileGatewayShutdownForceParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewayShutdownForceParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayShutdownForceParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayShutdownForceParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayShutdownForceParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayShutdownForceParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewayShutdownForceParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayShutdownForceParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayShutdownForceParam.GenerateSkeleton {
						mobileGatewayShutdownForceParam.GenerateSkeleton = false
						mobileGatewayShutdownForceParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayShutdownForceParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayShutdownForceParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayShutdownForceParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayShutdownForceParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayShutdownForceParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayShutdownForceParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayShutdownForceParam.Selector) == 0 || hasTags(&v, mobileGatewayShutdownForceParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !mobileGatewayShutdownForceParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("shutdown-force", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayShutdownForceParam.SetId(id)
						p := *mobileGatewayShutdownForceParam // copy struct value
						mobileGatewayShutdownForceParam := &p
						go func() {
							err := funcs.MobileGatewayShutdownForce(ctx, mobileGatewayShutdownForceParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "reset",
				Usage:     "Reset MobileGateway",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayResetParam.ParamTemplate = c.String("param-template")
					mobileGatewayResetParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayResetParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewResetMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayResetParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobileGatewayResetParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobileGatewayResetParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewayResetParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayResetParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayResetParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayResetParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayResetParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewayResetParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayResetParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayResetParam.GenerateSkeleton {
						mobileGatewayResetParam.GenerateSkeleton = false
						mobileGatewayResetParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayResetParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayResetParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayResetParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayResetParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayResetParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayResetParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayResetParam.Selector) == 0 || hasTags(&v, mobileGatewayResetParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !mobileGatewayResetParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("reset", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayResetParam.SetId(id)
						p := *mobileGatewayResetParam // copy struct value
						mobileGatewayResetParam := &p
						go func() {
							err := funcs.MobileGatewayReset(ctx, mobileGatewayResetParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "wait-for-boot",
				Usage:     "Wait until boot is completed",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayWaitForBootParam.ParamTemplate = c.String("param-template")
					mobileGatewayWaitForBootParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayWaitForBootParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewWaitForBootMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayWaitForBootParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobileGatewayWaitForBootParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						mobileGatewayWaitForBootParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayWaitForBootParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayWaitForBootParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayWaitForBootParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayWaitForBootParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewayWaitForBootParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayWaitForBootParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayWaitForBootParam.GenerateSkeleton {
						mobileGatewayWaitForBootParam.GenerateSkeleton = false
						mobileGatewayWaitForBootParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayWaitForBootParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayWaitForBootParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayWaitForBootParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayWaitForBootParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayWaitForBootParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayWaitForBootParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayWaitForBootParam.Selector) == 0 || hasTags(&v, mobileGatewayWaitForBootParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayWaitForBootParam.SetId(id)
						p := *mobileGatewayWaitForBootParam // copy struct value
						mobileGatewayWaitForBootParam := &p
						go func() {
							err := funcs.MobileGatewayWaitForBoot(ctx, mobileGatewayWaitForBootParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "wait-for-down",
				Usage:     "Wait until shutdown is completed",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayWaitForDownParam.ParamTemplate = c.String("param-template")
					mobileGatewayWaitForDownParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayWaitForDownParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewWaitForDownMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayWaitForDownParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobileGatewayWaitForDownParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						mobileGatewayWaitForDownParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayWaitForDownParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayWaitForDownParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayWaitForDownParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayWaitForDownParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewayWaitForDownParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayWaitForDownParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayWaitForDownParam.GenerateSkeleton {
						mobileGatewayWaitForDownParam.GenerateSkeleton = false
						mobileGatewayWaitForDownParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayWaitForDownParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayWaitForDownParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayWaitForDownParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayWaitForDownParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayWaitForDownParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayWaitForDownParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayWaitForDownParam.Selector) == 0 || hasTags(&v, mobileGatewayWaitForDownParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayWaitForDownParam.SetId(id)
						p := *mobileGatewayWaitForDownParam // copy struct value
						mobileGatewayWaitForDownParam := &p
						go func() {
							err := funcs.MobileGatewayWaitForDown(ctx, mobileGatewayWaitForDownParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "interface-info",
				Aliases:   []string{"interface-list"},
				Usage:     "Show information of NIC(s) connected to mobile-gateway",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayInterfaceInfoParam.ParamTemplate = c.String("param-template")
					mobileGatewayInterfaceInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayInterfaceInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewInterfaceInfoMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayInterfaceInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobileGatewayInterfaceInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						mobileGatewayInterfaceInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayInterfaceInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayInterfaceInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayInterfaceInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayInterfaceInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						mobileGatewayInterfaceInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						mobileGatewayInterfaceInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						mobileGatewayInterfaceInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						mobileGatewayInterfaceInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						mobileGatewayInterfaceInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						mobileGatewayInterfaceInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						mobileGatewayInterfaceInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						mobileGatewayInterfaceInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayInterfaceInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayInterfaceInfoParam.GenerateSkeleton {
						mobileGatewayInterfaceInfoParam.GenerateSkeleton = false
						mobileGatewayInterfaceInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayInterfaceInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayInterfaceInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayInterfaceInfoParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayInterfaceInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayInterfaceInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayInterfaceInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayInterfaceInfoParam.Selector) == 0 || hasTags(&v, mobileGatewayInterfaceInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayInterfaceInfoParam.SetId(id)
						p := *mobileGatewayInterfaceInfoParam // copy struct value
						mobileGatewayInterfaceInfoParam := &p
						go func() {
							err := funcs.MobileGatewayInterfaceInfo(ctx, mobileGatewayInterfaceInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "interface-connect",
				Usage:     "Connected to switch",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "ipaddress",
						Aliases: []string{"ip"},
						Usage:   "[Required] set ipaddress",
					},
					&cli.Int64Flag{
						Name:  "switch-id",
						Usage: "[Required] set connect switch ID",
					},
					&cli.IntFlag{
						Name:    "nw-masklen",
						Aliases: []string{"network-masklen"},
						Usage:   "set ipaddress prefix",
						Value:   24,
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayInterfaceConnectParam.ParamTemplate = c.String("param-template")
					mobileGatewayInterfaceConnectParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayInterfaceConnectParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewInterfaceConnectMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayInterfaceConnectParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("ipaddress") {
						mobileGatewayInterfaceConnectParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("switch-id") {
						mobileGatewayInterfaceConnectParam.SwitchId = sacloud.ID(c.Int64("switch-id"))
					}
					if c.IsSet("nw-masklen") {
						mobileGatewayInterfaceConnectParam.NwMasklen = c.Int("nw-masklen")
					}
					if c.IsSet("selector") {
						mobileGatewayInterfaceConnectParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobileGatewayInterfaceConnectParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewayInterfaceConnectParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayInterfaceConnectParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayInterfaceConnectParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayInterfaceConnectParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayInterfaceConnectParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewayInterfaceConnectParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayInterfaceConnectParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayInterfaceConnectParam.GenerateSkeleton {
						mobileGatewayInterfaceConnectParam.GenerateSkeleton = false
						mobileGatewayInterfaceConnectParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayInterfaceConnectParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayInterfaceConnectParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayInterfaceConnectParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayInterfaceConnectParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayInterfaceConnectParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayInterfaceConnectParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayInterfaceConnectParam.Selector) == 0 || hasTags(&v, mobileGatewayInterfaceConnectParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobileGatewayInterfaceConnectParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("interface-connect", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayInterfaceConnectParam.SetId(id)
						p := *mobileGatewayInterfaceConnectParam // copy struct value
						mobileGatewayInterfaceConnectParam := &p
						go func() {
							err := funcs.MobileGatewayInterfaceConnect(ctx, mobileGatewayInterfaceConnectParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "interface-update",
				Usage:     "Update interface",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "ipaddress",
						Aliases: []string{"ip"},
						Usage:   "set ipaddress",
					},
					&cli.IntFlag{
						Name:    "nw-masklen",
						Aliases: []string{"network-masklen"},
						Usage:   "set ipaddress prefix",
						Value:   24,
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayInterfaceUpdateParam.ParamTemplate = c.String("param-template")
					mobileGatewayInterfaceUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayInterfaceUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewInterfaceUpdateMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayInterfaceUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("ipaddress") {
						mobileGatewayInterfaceUpdateParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("nw-masklen") {
						mobileGatewayInterfaceUpdateParam.NwMasklen = c.Int("nw-masklen")
					}
					if c.IsSet("selector") {
						mobileGatewayInterfaceUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobileGatewayInterfaceUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewayInterfaceUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayInterfaceUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayInterfaceUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayInterfaceUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayInterfaceUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewayInterfaceUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayInterfaceUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayInterfaceUpdateParam.GenerateSkeleton {
						mobileGatewayInterfaceUpdateParam.GenerateSkeleton = false
						mobileGatewayInterfaceUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayInterfaceUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayInterfaceUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayInterfaceUpdateParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayInterfaceUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayInterfaceUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayInterfaceUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayInterfaceUpdateParam.Selector) == 0 || hasTags(&v, mobileGatewayInterfaceUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobileGatewayInterfaceUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("interface-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayInterfaceUpdateParam.SetId(id)
						p := *mobileGatewayInterfaceUpdateParam // copy struct value
						mobileGatewayInterfaceUpdateParam := &p
						go func() {
							err := funcs.MobileGatewayInterfaceUpdate(ctx, mobileGatewayInterfaceUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "interface-disconnect",
				Usage:     "Disconnected to switch",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayInterfaceDisconnectParam.ParamTemplate = c.String("param-template")
					mobileGatewayInterfaceDisconnectParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayInterfaceDisconnectParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewInterfaceDisconnectMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayInterfaceDisconnectParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobileGatewayInterfaceDisconnectParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobileGatewayInterfaceDisconnectParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewayInterfaceDisconnectParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayInterfaceDisconnectParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayInterfaceDisconnectParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayInterfaceDisconnectParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayInterfaceDisconnectParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewayInterfaceDisconnectParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayInterfaceDisconnectParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayInterfaceDisconnectParam.GenerateSkeleton {
						mobileGatewayInterfaceDisconnectParam.GenerateSkeleton = false
						mobileGatewayInterfaceDisconnectParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayInterfaceDisconnectParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayInterfaceDisconnectParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayInterfaceDisconnectParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayInterfaceDisconnectParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayInterfaceDisconnectParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayInterfaceDisconnectParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayInterfaceDisconnectParam.Selector) == 0 || hasTags(&v, mobileGatewayInterfaceDisconnectParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobileGatewayInterfaceDisconnectParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("interface-disconnect", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayInterfaceDisconnectParam.SetId(id)
						p := *mobileGatewayInterfaceDisconnectParam // copy struct value
						mobileGatewayInterfaceDisconnectParam := &p
						go func() {
							err := funcs.MobileGatewayInterfaceDisconnect(ctx, mobileGatewayInterfaceDisconnectParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "traffic-control-info",
				Usage:     "Show information of traffic-control",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayTrafficControlInfoParam.ParamTemplate = c.String("param-template")
					mobileGatewayTrafficControlInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayTrafficControlInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewTrafficControlInfoMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayTrafficControlInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobileGatewayTrafficControlInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						mobileGatewayTrafficControlInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayTrafficControlInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayTrafficControlInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayTrafficControlInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayTrafficControlInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						mobileGatewayTrafficControlInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						mobileGatewayTrafficControlInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						mobileGatewayTrafficControlInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						mobileGatewayTrafficControlInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						mobileGatewayTrafficControlInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						mobileGatewayTrafficControlInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						mobileGatewayTrafficControlInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						mobileGatewayTrafficControlInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayTrafficControlInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayTrafficControlInfoParam.GenerateSkeleton {
						mobileGatewayTrafficControlInfoParam.GenerateSkeleton = false
						mobileGatewayTrafficControlInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayTrafficControlInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayTrafficControlInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayTrafficControlInfoParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayTrafficControlInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayTrafficControlInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayTrafficControlInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayTrafficControlInfoParam.Selector) == 0 || hasTags(&v, mobileGatewayTrafficControlInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayTrafficControlInfoParam.SetId(id)
						p := *mobileGatewayTrafficControlInfoParam // copy struct value
						mobileGatewayTrafficControlInfoParam := &p
						go func() {
							err := funcs.MobileGatewayTrafficControlInfo(ctx, mobileGatewayTrafficControlInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "traffic-control-enable",
				Usage:     "Enable traffic-control",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "quota",
						Usage: "[Required] ",
						Value: 512,
					},
					&cli.IntFlag{
						Name: "band-width-limit",
					},
					&cli.BoolFlag{
						Name: "enable-email",
					},
					&cli.StringFlag{
						Name: "slack-webhook-url",
					},
					&cli.BoolFlag{
						Name: "auto-traffic-shaping",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayTrafficControlEnableParam.ParamTemplate = c.String("param-template")
					mobileGatewayTrafficControlEnableParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayTrafficControlEnableParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewTrafficControlEnableMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayTrafficControlEnableParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("quota") {
						mobileGatewayTrafficControlEnableParam.Quota = c.Int("quota")
					}
					if c.IsSet("band-width-limit") {
						mobileGatewayTrafficControlEnableParam.BandWidthLimit = c.Int("band-width-limit")
					}
					if c.IsSet("enable-email") {
						mobileGatewayTrafficControlEnableParam.EnableEmail = c.Bool("enable-email")
					}
					if c.IsSet("slack-webhook-url") {
						mobileGatewayTrafficControlEnableParam.SlackWebhookUrl = c.String("slack-webhook-url")
					}
					if c.IsSet("auto-traffic-shaping") {
						mobileGatewayTrafficControlEnableParam.AutoTrafficShaping = c.Bool("auto-traffic-shaping")
					}
					if c.IsSet("selector") {
						mobileGatewayTrafficControlEnableParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobileGatewayTrafficControlEnableParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewayTrafficControlEnableParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayTrafficControlEnableParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayTrafficControlEnableParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayTrafficControlEnableParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayTrafficControlEnableParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewayTrafficControlEnableParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayTrafficControlEnableParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayTrafficControlEnableParam.GenerateSkeleton {
						mobileGatewayTrafficControlEnableParam.GenerateSkeleton = false
						mobileGatewayTrafficControlEnableParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayTrafficControlEnableParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayTrafficControlEnableParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayTrafficControlEnableParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayTrafficControlEnableParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayTrafficControlEnableParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayTrafficControlEnableParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayTrafficControlEnableParam.Selector) == 0 || hasTags(&v, mobileGatewayTrafficControlEnableParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !mobileGatewayTrafficControlEnableParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("traffic-control-enable", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayTrafficControlEnableParam.SetId(id)
						p := *mobileGatewayTrafficControlEnableParam // copy struct value
						mobileGatewayTrafficControlEnableParam := &p
						go func() {
							err := funcs.MobileGatewayTrafficControlEnable(ctx, mobileGatewayTrafficControlEnableParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "traffic-control-update",
				Usage:     "Update traffic-control config",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name: "quota",
					},
					&cli.IntFlag{
						Name: "band-width-limit",
					},
					&cli.BoolFlag{
						Name: "enable-email",
					},
					&cli.StringFlag{
						Name: "slack-webhook-url",
					},
					&cli.BoolFlag{
						Name: "auto-traffic-shaping",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayTrafficControlUpdateParam.ParamTemplate = c.String("param-template")
					mobileGatewayTrafficControlUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayTrafficControlUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewTrafficControlUpdateMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayTrafficControlUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("quota") {
						mobileGatewayTrafficControlUpdateParam.Quota = c.Int("quota")
					}
					if c.IsSet("band-width-limit") {
						mobileGatewayTrafficControlUpdateParam.BandWidthLimit = c.Int("band-width-limit")
					}
					if c.IsSet("enable-email") {
						mobileGatewayTrafficControlUpdateParam.EnableEmail = c.Bool("enable-email")
					}
					if c.IsSet("slack-webhook-url") {
						mobileGatewayTrafficControlUpdateParam.SlackWebhookUrl = c.String("slack-webhook-url")
					}
					if c.IsSet("auto-traffic-shaping") {
						mobileGatewayTrafficControlUpdateParam.AutoTrafficShaping = c.Bool("auto-traffic-shaping")
					}
					if c.IsSet("selector") {
						mobileGatewayTrafficControlUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobileGatewayTrafficControlUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewayTrafficControlUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayTrafficControlUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayTrafficControlUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayTrafficControlUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayTrafficControlUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewayTrafficControlUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayTrafficControlUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayTrafficControlUpdateParam.GenerateSkeleton {
						mobileGatewayTrafficControlUpdateParam.GenerateSkeleton = false
						mobileGatewayTrafficControlUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayTrafficControlUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayTrafficControlUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayTrafficControlUpdateParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayTrafficControlUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayTrafficControlUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayTrafficControlUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayTrafficControlUpdateParam.Selector) == 0 || hasTags(&v, mobileGatewayTrafficControlUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !mobileGatewayTrafficControlUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("traffic-control-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayTrafficControlUpdateParam.SetId(id)
						p := *mobileGatewayTrafficControlUpdateParam // copy struct value
						mobileGatewayTrafficControlUpdateParam := &p
						go func() {
							err := funcs.MobileGatewayTrafficControlUpdate(ctx, mobileGatewayTrafficControlUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "traffic-control-disable",
				Aliases:   []string{"traffic-control-delete"},
				Usage:     "Disable traffic-control config",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayTrafficControlDisableParam.ParamTemplate = c.String("param-template")
					mobileGatewayTrafficControlDisableParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayTrafficControlDisableParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewTrafficControlDisableMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayTrafficControlDisableParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobileGatewayTrafficControlDisableParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobileGatewayTrafficControlDisableParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewayTrafficControlDisableParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayTrafficControlDisableParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayTrafficControlDisableParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayTrafficControlDisableParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayTrafficControlDisableParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewayTrafficControlDisableParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayTrafficControlDisableParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayTrafficControlDisableParam.GenerateSkeleton {
						mobileGatewayTrafficControlDisableParam.GenerateSkeleton = false
						mobileGatewayTrafficControlDisableParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayTrafficControlDisableParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayTrafficControlDisableParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayTrafficControlDisableParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayTrafficControlDisableParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayTrafficControlDisableParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayTrafficControlDisableParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayTrafficControlDisableParam.Selector) == 0 || hasTags(&v, mobileGatewayTrafficControlDisableParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !mobileGatewayTrafficControlDisableParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("traffic-control-disable", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayTrafficControlDisableParam.SetId(id)
						p := *mobileGatewayTrafficControlDisableParam // copy struct value
						mobileGatewayTrafficControlDisableParam := &p
						go func() {
							err := funcs.MobileGatewayTrafficControlDisable(ctx, mobileGatewayTrafficControlDisableParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-route-info",
				Aliases:   []string{"static-route-list"},
				Usage:     "Show information of static-routes",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayStaticRouteInfoParam.ParamTemplate = c.String("param-template")
					mobileGatewayStaticRouteInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayStaticRouteInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticRouteInfoMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayStaticRouteInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobileGatewayStaticRouteInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						mobileGatewayStaticRouteInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayStaticRouteInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayStaticRouteInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayStaticRouteInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayStaticRouteInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						mobileGatewayStaticRouteInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						mobileGatewayStaticRouteInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						mobileGatewayStaticRouteInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						mobileGatewayStaticRouteInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						mobileGatewayStaticRouteInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						mobileGatewayStaticRouteInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						mobileGatewayStaticRouteInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						mobileGatewayStaticRouteInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayStaticRouteInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayStaticRouteInfoParam.GenerateSkeleton {
						mobileGatewayStaticRouteInfoParam.GenerateSkeleton = false
						mobileGatewayStaticRouteInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayStaticRouteInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayStaticRouteInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayStaticRouteInfoParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayStaticRouteInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayStaticRouteInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayStaticRouteInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayStaticRouteInfoParam.Selector) == 0 || hasTags(&v, mobileGatewayStaticRouteInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayStaticRouteInfoParam.SetId(id)
						p := *mobileGatewayStaticRouteInfoParam // copy struct value
						mobileGatewayStaticRouteInfoParam := &p
						go func() {
							err := funcs.MobileGatewayStaticRouteInfo(ctx, mobileGatewayStaticRouteInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-route-add",
				Usage:     "Add static-route",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "prefix",
						Usage: "[Required] set prefix",
					},
					&cli.StringFlag{
						Name:  "next-hop",
						Usage: "[Required] set next-hop",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayStaticRouteAddParam.ParamTemplate = c.String("param-template")
					mobileGatewayStaticRouteAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayStaticRouteAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticRouteAddMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayStaticRouteAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("prefix") {
						mobileGatewayStaticRouteAddParam.Prefix = c.String("prefix")
					}
					if c.IsSet("next-hop") {
						mobileGatewayStaticRouteAddParam.NextHop = c.String("next-hop")
					}
					if c.IsSet("selector") {
						mobileGatewayStaticRouteAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobileGatewayStaticRouteAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewayStaticRouteAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayStaticRouteAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayStaticRouteAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayStaticRouteAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayStaticRouteAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewayStaticRouteAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayStaticRouteAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayStaticRouteAddParam.GenerateSkeleton {
						mobileGatewayStaticRouteAddParam.GenerateSkeleton = false
						mobileGatewayStaticRouteAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayStaticRouteAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayStaticRouteAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayStaticRouteAddParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayStaticRouteAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayStaticRouteAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayStaticRouteAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayStaticRouteAddParam.Selector) == 0 || hasTags(&v, mobileGatewayStaticRouteAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobileGatewayStaticRouteAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("static-route-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayStaticRouteAddParam.SetId(id)
						p := *mobileGatewayStaticRouteAddParam // copy struct value
						mobileGatewayStaticRouteAddParam := &p
						go func() {
							err := funcs.MobileGatewayStaticRouteAdd(ctx, mobileGatewayStaticRouteAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-route-update",
				Usage:     "Update static-route",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target static-route",
					},
					&cli.StringFlag{
						Name:  "prefix",
						Usage: "set prefix",
					},
					&cli.StringFlag{
						Name:  "next-hop",
						Usage: "set next-hop",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayStaticRouteUpdateParam.ParamTemplate = c.String("param-template")
					mobileGatewayStaticRouteUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayStaticRouteUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticRouteUpdateMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayStaticRouteUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						mobileGatewayStaticRouteUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("prefix") {
						mobileGatewayStaticRouteUpdateParam.Prefix = c.String("prefix")
					}
					if c.IsSet("next-hop") {
						mobileGatewayStaticRouteUpdateParam.NextHop = c.String("next-hop")
					}
					if c.IsSet("selector") {
						mobileGatewayStaticRouteUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobileGatewayStaticRouteUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewayStaticRouteUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayStaticRouteUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayStaticRouteUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayStaticRouteUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayStaticRouteUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewayStaticRouteUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayStaticRouteUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayStaticRouteUpdateParam.GenerateSkeleton {
						mobileGatewayStaticRouteUpdateParam.GenerateSkeleton = false
						mobileGatewayStaticRouteUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayStaticRouteUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayStaticRouteUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayStaticRouteUpdateParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayStaticRouteUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayStaticRouteUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayStaticRouteUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayStaticRouteUpdateParam.Selector) == 0 || hasTags(&v, mobileGatewayStaticRouteUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobileGatewayStaticRouteUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("static-route-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayStaticRouteUpdateParam.SetId(id)
						p := *mobileGatewayStaticRouteUpdateParam // copy struct value
						mobileGatewayStaticRouteUpdateParam := &p
						go func() {
							err := funcs.MobileGatewayStaticRouteUpdate(ctx, mobileGatewayStaticRouteUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-route-delete",
				Usage:     "Delete static-route",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target static-route",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayStaticRouteDeleteParam.ParamTemplate = c.String("param-template")
					mobileGatewayStaticRouteDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayStaticRouteDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticRouteDeleteMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayStaticRouteDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						mobileGatewayStaticRouteDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						mobileGatewayStaticRouteDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobileGatewayStaticRouteDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewayStaticRouteDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayStaticRouteDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayStaticRouteDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayStaticRouteDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayStaticRouteDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewayStaticRouteDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayStaticRouteDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayStaticRouteDeleteParam.GenerateSkeleton {
						mobileGatewayStaticRouteDeleteParam.GenerateSkeleton = false
						mobileGatewayStaticRouteDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayStaticRouteDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayStaticRouteDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayStaticRouteDeleteParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayStaticRouteDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayStaticRouteDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayStaticRouteDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayStaticRouteDeleteParam.Selector) == 0 || hasTags(&v, mobileGatewayStaticRouteDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobileGatewayStaticRouteDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("static-route-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayStaticRouteDeleteParam.SetId(id)
						p := *mobileGatewayStaticRouteDeleteParam // copy struct value
						mobileGatewayStaticRouteDeleteParam := &p
						go func() {
							err := funcs.MobileGatewayStaticRouteDelete(ctx, mobileGatewayStaticRouteDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "sim-info",
				Aliases:   []string{"interface-list"},
				Usage:     "Show information of NIC(s) connected to mobile-gateway",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewaySIMInfoParam.ParamTemplate = c.String("param-template")
					mobileGatewaySIMInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewaySIMInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSIMInfoMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewaySIMInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobileGatewaySIMInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						mobileGatewaySIMInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewaySIMInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewaySIMInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewaySIMInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewaySIMInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						mobileGatewaySIMInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						mobileGatewaySIMInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						mobileGatewaySIMInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						mobileGatewaySIMInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						mobileGatewaySIMInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						mobileGatewaySIMInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						mobileGatewaySIMInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						mobileGatewaySIMInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewaySIMInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewaySIMInfoParam.GenerateSkeleton {
						mobileGatewaySIMInfoParam.GenerateSkeleton = false
						mobileGatewaySIMInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewaySIMInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewaySIMInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewaySIMInfoParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewaySIMInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewaySIMInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewaySIMInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewaySIMInfoParam.Selector) == 0 || hasTags(&v, mobileGatewaySIMInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewaySIMInfoParam.SetId(id)
						p := *mobileGatewaySIMInfoParam // copy struct value
						mobileGatewaySIMInfoParam := &p
						go func() {
							err := funcs.MobileGatewaySIMInfo(ctx, mobileGatewaySIMInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "sim-add",
				Usage:     "Connected to switch",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "ipaddress",
						Aliases: []string{"ip"},
						Usage:   "[Required] set ipaddress",
					},
					&cli.Int64Flag{
						Name:  "sim-id",
						Usage: "[Required] ",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewaySIMAddParam.ParamTemplate = c.String("param-template")
					mobileGatewaySIMAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewaySIMAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSIMAddMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewaySIMAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("ipaddress") {
						mobileGatewaySIMAddParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("sim-id") {
						mobileGatewaySIMAddParam.SIMId = sacloud.ID(c.Int64("sim-id"))
					}
					if c.IsSet("selector") {
						mobileGatewaySIMAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobileGatewaySIMAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewaySIMAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewaySIMAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewaySIMAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewaySIMAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewaySIMAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewaySIMAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewaySIMAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewaySIMAddParam.GenerateSkeleton {
						mobileGatewaySIMAddParam.GenerateSkeleton = false
						mobileGatewaySIMAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewaySIMAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewaySIMAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewaySIMAddParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewaySIMAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewaySIMAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewaySIMAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewaySIMAddParam.Selector) == 0 || hasTags(&v, mobileGatewaySIMAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobileGatewaySIMAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("sim-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewaySIMAddParam.SetId(id)
						p := *mobileGatewaySIMAddParam // copy struct value
						mobileGatewaySIMAddParam := &p
						go func() {
							err := funcs.MobileGatewaySIMAdd(ctx, mobileGatewaySIMAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "sim-update",
				Usage:     "Connected to switch",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "ipaddress",
						Aliases: []string{"ip"},
						Usage:   "set ipaddress",
					},
					&cli.Int64Flag{
						Name:  "sim-id",
						Usage: "[Required] ",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewaySIMUpdateParam.ParamTemplate = c.String("param-template")
					mobileGatewaySIMUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewaySIMUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSIMUpdateMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewaySIMUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("ipaddress") {
						mobileGatewaySIMUpdateParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("sim-id") {
						mobileGatewaySIMUpdateParam.SIMId = sacloud.ID(c.Int64("sim-id"))
					}
					if c.IsSet("selector") {
						mobileGatewaySIMUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobileGatewaySIMUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewaySIMUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewaySIMUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewaySIMUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewaySIMUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewaySIMUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewaySIMUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewaySIMUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewaySIMUpdateParam.GenerateSkeleton {
						mobileGatewaySIMUpdateParam.GenerateSkeleton = false
						mobileGatewaySIMUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewaySIMUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewaySIMUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewaySIMUpdateParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewaySIMUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewaySIMUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewaySIMUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewaySIMUpdateParam.Selector) == 0 || hasTags(&v, mobileGatewaySIMUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobileGatewaySIMUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("sim-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewaySIMUpdateParam.SetId(id)
						p := *mobileGatewaySIMUpdateParam // copy struct value
						mobileGatewaySIMUpdateParam := &p
						go func() {
							err := funcs.MobileGatewaySIMUpdate(ctx, mobileGatewaySIMUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "sim-delete",
				Usage:     "Disconnected to switch",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.Int64Flag{
						Name:  "sim-id",
						Usage: "[Required] ",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewaySIMDeleteParam.ParamTemplate = c.String("param-template")
					mobileGatewaySIMDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewaySIMDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSIMDeleteMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewaySIMDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("sim-id") {
						mobileGatewaySIMDeleteParam.SIMId = sacloud.ID(c.Int64("sim-id"))
					}
					if c.IsSet("selector") {
						mobileGatewaySIMDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobileGatewaySIMDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewaySIMDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewaySIMDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewaySIMDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewaySIMDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewaySIMDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewaySIMDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewaySIMDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewaySIMDeleteParam.GenerateSkeleton {
						mobileGatewaySIMDeleteParam.GenerateSkeleton = false
						mobileGatewaySIMDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewaySIMDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewaySIMDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewaySIMDeleteParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewaySIMDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewaySIMDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewaySIMDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewaySIMDeleteParam.Selector) == 0 || hasTags(&v, mobileGatewaySIMDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobileGatewaySIMDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("sim-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewaySIMDeleteParam.SetId(id)
						p := *mobileGatewaySIMDeleteParam // copy struct value
						mobileGatewaySIMDeleteParam := &p
						go func() {
							err := funcs.MobileGatewaySIMDelete(ctx, mobileGatewaySIMDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "sim-route-info",
				Aliases:   []string{"sim-route-list"},
				Usage:     "Show information of sim-routes",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewaySIMRouteInfoParam.ParamTemplate = c.String("param-template")
					mobileGatewaySIMRouteInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewaySIMRouteInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSIMRouteInfoMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewaySIMRouteInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobileGatewaySIMRouteInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						mobileGatewaySIMRouteInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewaySIMRouteInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewaySIMRouteInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewaySIMRouteInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewaySIMRouteInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						mobileGatewaySIMRouteInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						mobileGatewaySIMRouteInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						mobileGatewaySIMRouteInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						mobileGatewaySIMRouteInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						mobileGatewaySIMRouteInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						mobileGatewaySIMRouteInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						mobileGatewaySIMRouteInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						mobileGatewaySIMRouteInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewaySIMRouteInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewaySIMRouteInfoParam.GenerateSkeleton {
						mobileGatewaySIMRouteInfoParam.GenerateSkeleton = false
						mobileGatewaySIMRouteInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewaySIMRouteInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewaySIMRouteInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewaySIMRouteInfoParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewaySIMRouteInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewaySIMRouteInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewaySIMRouteInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewaySIMRouteInfoParam.Selector) == 0 || hasTags(&v, mobileGatewaySIMRouteInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewaySIMRouteInfoParam.SetId(id)
						p := *mobileGatewaySIMRouteInfoParam // copy struct value
						mobileGatewaySIMRouteInfoParam := &p
						go func() {
							err := funcs.MobileGatewaySIMRouteInfo(ctx, mobileGatewaySIMRouteInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "sim-route-add",
				Usage:     "Add sim-route",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "prefix",
						Usage: "[Required] set prefix",
					},
					&cli.Int64Flag{
						Name:  "sim",
						Usage: "[Required] set sim",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewaySIMRouteAddParam.ParamTemplate = c.String("param-template")
					mobileGatewaySIMRouteAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewaySIMRouteAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSIMRouteAddMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewaySIMRouteAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("prefix") {
						mobileGatewaySIMRouteAddParam.Prefix = c.String("prefix")
					}
					if c.IsSet("sim") {
						mobileGatewaySIMRouteAddParam.SIM = sacloud.ID(c.Int64("sim"))
					}
					if c.IsSet("selector") {
						mobileGatewaySIMRouteAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobileGatewaySIMRouteAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewaySIMRouteAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewaySIMRouteAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewaySIMRouteAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewaySIMRouteAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewaySIMRouteAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewaySIMRouteAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewaySIMRouteAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewaySIMRouteAddParam.GenerateSkeleton {
						mobileGatewaySIMRouteAddParam.GenerateSkeleton = false
						mobileGatewaySIMRouteAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewaySIMRouteAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewaySIMRouteAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewaySIMRouteAddParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewaySIMRouteAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewaySIMRouteAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewaySIMRouteAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewaySIMRouteAddParam.Selector) == 0 || hasTags(&v, mobileGatewaySIMRouteAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobileGatewaySIMRouteAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("sim-route-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewaySIMRouteAddParam.SetId(id)
						p := *mobileGatewaySIMRouteAddParam // copy struct value
						mobileGatewaySIMRouteAddParam := &p
						go func() {
							err := funcs.MobileGatewaySIMRouteAdd(ctx, mobileGatewaySIMRouteAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "sim-route-update",
				Usage:     "Update sim-route",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target sim-route",
					},
					&cli.StringFlag{
						Name:  "prefix",
						Usage: "set prefix",
					},
					&cli.Int64Flag{
						Name:  "sim",
						Usage: "set sim",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewaySIMRouteUpdateParam.ParamTemplate = c.String("param-template")
					mobileGatewaySIMRouteUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewaySIMRouteUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSIMRouteUpdateMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewaySIMRouteUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						mobileGatewaySIMRouteUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("prefix") {
						mobileGatewaySIMRouteUpdateParam.Prefix = c.String("prefix")
					}
					if c.IsSet("sim") {
						mobileGatewaySIMRouteUpdateParam.SIM = sacloud.ID(c.Int64("sim"))
					}
					if c.IsSet("selector") {
						mobileGatewaySIMRouteUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobileGatewaySIMRouteUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewaySIMRouteUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewaySIMRouteUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewaySIMRouteUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewaySIMRouteUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewaySIMRouteUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewaySIMRouteUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewaySIMRouteUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewaySIMRouteUpdateParam.GenerateSkeleton {
						mobileGatewaySIMRouteUpdateParam.GenerateSkeleton = false
						mobileGatewaySIMRouteUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewaySIMRouteUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewaySIMRouteUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewaySIMRouteUpdateParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewaySIMRouteUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewaySIMRouteUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewaySIMRouteUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewaySIMRouteUpdateParam.Selector) == 0 || hasTags(&v, mobileGatewaySIMRouteUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobileGatewaySIMRouteUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("sim-route-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewaySIMRouteUpdateParam.SetId(id)
						p := *mobileGatewaySIMRouteUpdateParam // copy struct value
						mobileGatewaySIMRouteUpdateParam := &p
						go func() {
							err := funcs.MobileGatewaySIMRouteUpdate(ctx, mobileGatewaySIMRouteUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "sim-route-delete",
				Usage:     "Delete sim-route",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target sim-route",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewaySIMRouteDeleteParam.ParamTemplate = c.String("param-template")
					mobileGatewaySIMRouteDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewaySIMRouteDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSIMRouteDeleteMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewaySIMRouteDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						mobileGatewaySIMRouteDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						mobileGatewaySIMRouteDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobileGatewaySIMRouteDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewaySIMRouteDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewaySIMRouteDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewaySIMRouteDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewaySIMRouteDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewaySIMRouteDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewaySIMRouteDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewaySIMRouteDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewaySIMRouteDeleteParam.GenerateSkeleton {
						mobileGatewaySIMRouteDeleteParam.GenerateSkeleton = false
						mobileGatewaySIMRouteDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewaySIMRouteDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewaySIMRouteDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewaySIMRouteDeleteParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewaySIMRouteDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewaySIMRouteDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewaySIMRouteDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewaySIMRouteDeleteParam.Selector) == 0 || hasTags(&v, mobileGatewaySIMRouteDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobileGatewaySIMRouteDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("sim-route-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewaySIMRouteDeleteParam.SetId(id)
						p := *mobileGatewaySIMRouteDeleteParam // copy struct value
						mobileGatewaySIMRouteDeleteParam := &p
						go func() {
							err := funcs.MobileGatewaySIMRouteDelete(ctx, mobileGatewaySIMRouteDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "dns-update",
				Usage:     "Update interface",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "dns-1",
						Usage: "[Required] set DNS server address",
					},
					&cli.StringFlag{
						Name:  "dns-2",
						Usage: "[Required] set DNS server address",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayDNSUpdateParam.ParamTemplate = c.String("param-template")
					mobileGatewayDNSUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayDNSUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDNSUpdateMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayDNSUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("dns-1") {
						mobileGatewayDNSUpdateParam.DNS1 = c.String("dns-1")
					}
					if c.IsSet("dns-2") {
						mobileGatewayDNSUpdateParam.DNS2 = c.String("dns-2")
					}
					if c.IsSet("selector") {
						mobileGatewayDNSUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobileGatewayDNSUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobileGatewayDNSUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayDNSUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayDNSUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayDNSUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayDNSUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewayDNSUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayDNSUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayDNSUpdateParam.GenerateSkeleton {
						mobileGatewayDNSUpdateParam.GenerateSkeleton = false
						mobileGatewayDNSUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayDNSUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayDNSUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayDNSUpdateParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayDNSUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayDNSUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayDNSUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayDNSUpdateParam.Selector) == 0 || hasTags(&v, mobileGatewayDNSUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobileGatewayDNSUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("dns-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayDNSUpdateParam.SetId(id)
						p := *mobileGatewayDNSUpdateParam // copy struct value
						mobileGatewayDNSUpdateParam := &p
						go func() {
							err := funcs.MobileGatewayDNSUpdate(ctx, mobileGatewayDNSUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "logs",
				Usage:     "Logs MobileGateway",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:    "follow",
						Aliases: []string{"f"},
						Usage:   "follow log output",
					},
					&cli.Int64Flag{
						Name:  "refresh-interval",
						Usage: "log refresh interval second",
						Value: 3,
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobileGatewayLogsParam.ParamTemplate = c.String("param-template")
					mobileGatewayLogsParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobileGatewayLogsParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewLogsMobileGatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobileGatewayLogsParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("follow") {
						mobileGatewayLogsParam.Follow = c.Bool("follow")
					}
					if c.IsSet("refresh-interval") {
						mobileGatewayLogsParam.RefreshInterval = c.Int64("refresh-interval")
					}
					if c.IsSet("selector") {
						mobileGatewayLogsParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						mobileGatewayLogsParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobileGatewayLogsParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobileGatewayLogsParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobileGatewayLogsParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobileGatewayLogsParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobileGatewayLogsParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobileGatewayLogsParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobileGatewayLogsParam.GenerateSkeleton {
						mobileGatewayLogsParam.GenerateSkeleton = false
						mobileGatewayLogsParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobileGatewayLogsParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobileGatewayLogsParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobileGatewayLogsParam)

					apiClient := ctx.GetAPIClient().MobileGateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobileGatewayLogsParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.MobileGateways {
							if hasTags(&v, mobileGatewayLogsParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobileGatewayLogsParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.MobileGateways {
										if len(mobileGatewayLogsParam.Selector) == 0 || hasTags(&v, mobileGatewayLogsParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobileGatewayLogsParam.SetId(id)
						p := *mobileGatewayLogsParam // copy struct value
						mobileGatewayLogsParam := &p
						go func() {
							err := funcs.MobileGatewayLogs(ctx, mobileGatewayLogsParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
		},
	}

	// build Category-Resource mapping
	AppendResourceCategoryMap("mobile-gateway", &schema.Category{
		Key:         "appliance",
		DisplayName: "Appliance",
		Order:       40,
	})

	// build Category-Command mapping

	AppendCommandCategoryMap("mobile-gateway", "boot", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("mobile-gateway", "create", &schema.Category{
		Key:         "basic",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("mobile-gateway", "delete", &schema.Category{
		Key:         "basic",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("mobile-gateway", "dns-update", &schema.Category{
		Key:         "dns",
		DisplayName: "DNS Management",
		Order:       70,
	})
	AppendCommandCategoryMap("mobile-gateway", "interface-connect", &schema.Category{
		Key:         "nic",
		DisplayName: "Interface Management",
		Order:       30,
	})
	AppendCommandCategoryMap("mobile-gateway", "interface-disconnect", &schema.Category{
		Key:         "nic",
		DisplayName: "Interface Management",
		Order:       30,
	})
	AppendCommandCategoryMap("mobile-gateway", "interface-info", &schema.Category{
		Key:         "nic",
		DisplayName: "Interface Management",
		Order:       30,
	})
	AppendCommandCategoryMap("mobile-gateway", "interface-update", &schema.Category{
		Key:         "nic",
		DisplayName: "Interface Management",
		Order:       30,
	})
	AppendCommandCategoryMap("mobile-gateway", "list", &schema.Category{
		Key:         "basic",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("mobile-gateway", "logs", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitoring",
		Order:       80,
	})
	AppendCommandCategoryMap("mobile-gateway", "read", &schema.Category{
		Key:         "basic",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("mobile-gateway", "reset", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("mobile-gateway", "shutdown", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("mobile-gateway", "shutdown-force", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("mobile-gateway", "sim-add", &schema.Category{
		Key:         "sim",
		DisplayName: "SIM Management",
		Order:       60,
	})
	AppendCommandCategoryMap("mobile-gateway", "sim-delete", &schema.Category{
		Key:         "sim",
		DisplayName: "SIM Management",
		Order:       60,
	})
	AppendCommandCategoryMap("mobile-gateway", "sim-info", &schema.Category{
		Key:         "sim",
		DisplayName: "SIM Management",
		Order:       60,
	})
	AppendCommandCategoryMap("mobile-gateway", "sim-route-add", &schema.Category{
		Key:         "sim-route",
		DisplayName: "SIM Route Management",
		Order:       65,
	})
	AppendCommandCategoryMap("mobile-gateway", "sim-route-delete", &schema.Category{
		Key:         "sim-route",
		DisplayName: "SIM Route Management",
		Order:       65,
	})
	AppendCommandCategoryMap("mobile-gateway", "sim-route-info", &schema.Category{
		Key:         "sim-route",
		DisplayName: "SIM Route Management",
		Order:       65,
	})
	AppendCommandCategoryMap("mobile-gateway", "sim-route-update", &schema.Category{
		Key:         "sim-route",
		DisplayName: "SIM Route Management",
		Order:       65,
	})
	AppendCommandCategoryMap("mobile-gateway", "sim-update", &schema.Category{
		Key:         "sim",
		DisplayName: "SIM Management",
		Order:       60,
	})
	AppendCommandCategoryMap("mobile-gateway", "static-route-add", &schema.Category{
		Key:         "static-route",
		DisplayName: "StaticRoute Management",
		Order:       50,
	})
	AppendCommandCategoryMap("mobile-gateway", "static-route-delete", &schema.Category{
		Key:         "static-route",
		DisplayName: "StaticRoute Management",
		Order:       50,
	})
	AppendCommandCategoryMap("mobile-gateway", "static-route-info", &schema.Category{
		Key:         "static-route",
		DisplayName: "StaticRoute Management",
		Order:       50,
	})
	AppendCommandCategoryMap("mobile-gateway", "static-route-update", &schema.Category{
		Key:         "static-route",
		DisplayName: "StaticRoute Management",
		Order:       50,
	})
	AppendCommandCategoryMap("mobile-gateway", "traffic-control-disable", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic Control",
		Order:       40,
	})
	AppendCommandCategoryMap("mobile-gateway", "traffic-control-enable", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic Control",
		Order:       40,
	})
	AppendCommandCategoryMap("mobile-gateway", "traffic-control-info", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic Control",
		Order:       40,
	})
	AppendCommandCategoryMap("mobile-gateway", "traffic-control-update", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic Control",
		Order:       40,
	})
	AppendCommandCategoryMap("mobile-gateway", "update", &schema.Category{
		Key:         "basic",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("mobile-gateway", "wait-for-boot", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("mobile-gateway", "wait-for-down", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})

	// build Category-Param mapping

	AppendFlagCategoryMap("mobile-gateway", "boot", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "boot", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "boot", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "boot", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "boot", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "boot", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "boot", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "boot", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "icon-id", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "internet-connection", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "tags", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "force", &schema.Category{
		Key:         "mobile-gateway",
		DisplayName: "Mobile-Gateway options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "dns-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "dns-update", "dns1", &schema.Category{
		Key:         "dns",
		DisplayName: "Dns options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "dns-update", "dns2", &schema.Category{
		Key:         "dns",
		DisplayName: "Dns options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "dns-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "dns-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "dns-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "dns-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "dns-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "dns-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "dns-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-connect", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-connect", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-connect", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-connect", "ipaddress", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-connect", "nw-masklen", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-connect", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-connect", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-connect", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-connect", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-connect", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-connect", "switch-id", &schema.Category{
		Key:         "interface",
		DisplayName: "Interface options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-disconnect", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-disconnect", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-disconnect", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-disconnect", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-disconnect", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-disconnect", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-disconnect", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-disconnect", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-update", "ipaddress", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-update", "nw-masklen", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "from", &schema.Category{
		Key:         "limit-offset",
		DisplayName: "Limit/Offset options",
		Order:       2147483597,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "id", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "max", &schema.Category{
		Key:         "limit-offset",
		DisplayName: "Limit/Offset options",
		Order:       2147483597,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "name", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "sort", &schema.Category{
		Key:         "sort",
		DisplayName: "Sort options",
		Order:       2147483607,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "tags", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "logs", "follow", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "logs", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "logs", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "logs", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "logs", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "logs", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "logs", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "logs", "refresh-interval", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "logs", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "reset", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "reset", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "reset", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "reset", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "reset", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "reset", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "reset", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "reset", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown-force", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown-force", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown-force", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown-force", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown-force", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown-force", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown-force", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown-force", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-add", "ipaddress", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-add", "sim-id", &schema.Category{
		Key:         "interface",
		DisplayName: "Interface options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-delete", "sim-id", &schema.Category{
		Key:         "interface",
		DisplayName: "Interface options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-add", "prefix", &schema.Category{
		Key:         "SIM-Route",
		DisplayName: "SIM-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-add", "sim", &schema.Category{
		Key:         "SIM-Route",
		DisplayName: "SIM-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-delete", "index", &schema.Category{
		Key:         "SIM-Route",
		DisplayName: "SIM-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-update", "index", &schema.Category{
		Key:         "SIM-Route",
		DisplayName: "SIM-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-update", "prefix", &schema.Category{
		Key:         "SIM-Route",
		DisplayName: "SIM-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-update", "sim", &schema.Category{
		Key:         "SIM-Route",
		DisplayName: "SIM-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-update", "ipaddress", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-update", "sim-id", &schema.Category{
		Key:         "interface",
		DisplayName: "Interface options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-add", "next-hop", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-add", "prefix", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-delete", "index", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-update", "index", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-update", "next-hop", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-update", "prefix", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-disable", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-disable", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-disable", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-disable", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-disable", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-disable", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-disable", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-disable", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "auto-traffic-shaping", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic-Control options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "band-width-limit", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic-Control options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "enable-email", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic-Control options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "quota", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic-Control options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "slack-webhook-url", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic-Control options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "auto-traffic-shaping", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic-Control options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "band-width-limit", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic-Control options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "enable-email", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic-Control options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "quota", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic-Control options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "slack-webhook-url", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic-Control options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "icon-id", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "internet-connection", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "tags", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-boot", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-boot", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-boot", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-boot", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-boot", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-boot", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-boot", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-down", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-down", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-down", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-down", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-down", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-down", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-down", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})

	// append command to GlobalContext
	Commands = append(Commands, cliCommand)
}

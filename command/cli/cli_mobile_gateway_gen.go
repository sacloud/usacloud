// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-commands'; DO NOT EDIT

package cli

import (
	"encoding/json"
	"fmt"
	"strings"
	"sync"

	"github.com/imdario/mergo"
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/funcs"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/schema"
	"gopkg.in/urfave/cli.v2"
)

func init() {
	mobilegatewayListParam := params.NewListMobilegatewayParam()
	mobilegatewayCreateParam := params.NewCreateMobilegatewayParam()
	mobilegatewayReadParam := params.NewReadMobilegatewayParam()
	mobilegatewayUpdateParam := params.NewUpdateMobilegatewayParam()
	mobilegatewayDeleteParam := params.NewDeleteMobilegatewayParam()
	mobilegatewayBootParam := params.NewBootMobilegatewayParam()
	mobilegatewayShutdownParam := params.NewShutdownMobilegatewayParam()
	mobilegatewayShutdownForceParam := params.NewShutdownForceMobilegatewayParam()
	mobilegatewayResetParam := params.NewResetMobilegatewayParam()
	mobilegatewayWaitForBootParam := params.NewWaitForBootMobilegatewayParam()
	mobilegatewayWaitForDownParam := params.NewWaitForDownMobilegatewayParam()
	mobilegatewayInterfaceInfoParam := params.NewInterfaceInfoMobilegatewayParam()
	mobilegatewayInterfaceConnectParam := params.NewInterfaceConnectMobilegatewayParam()
	mobilegatewayInterfaceUpdateParam := params.NewInterfaceUpdateMobilegatewayParam()
	mobilegatewayInterfaceDisconnectParam := params.NewInterfaceDisconnectMobilegatewayParam()
	mobilegatewayTrafficControlInfoParam := params.NewTrafficControlInfoMobilegatewayParam()
	mobilegatewayTrafficControlEnableParam := params.NewTrafficControlEnableMobilegatewayParam()
	mobilegatewayTrafficControlUpdateParam := params.NewTrafficControlUpdateMobilegatewayParam()
	mobilegatewayTrafficControlDisableParam := params.NewTrafficControlDisableMobilegatewayParam()
	mobilegatewayStaticRouteInfoParam := params.NewStaticRouteInfoMobilegatewayParam()
	mobilegatewayStaticRouteAddParam := params.NewStaticRouteAddMobilegatewayParam()
	mobilegatewayStaticRouteUpdateParam := params.NewStaticRouteUpdateMobilegatewayParam()
	mobilegatewayStaticRouteDeleteParam := params.NewStaticRouteDeleteMobilegatewayParam()
	mobilegatewaySimInfoParam := params.NewSimInfoMobilegatewayParam()
	mobilegatewaySimAddParam := params.NewSimAddMobilegatewayParam()
	mobilegatewaySimUpdateParam := params.NewSimUpdateMobilegatewayParam()
	mobilegatewaySimDeleteParam := params.NewSimDeleteMobilegatewayParam()
	mobilegatewaySimRouteInfoParam := params.NewSimRouteInfoMobilegatewayParam()
	mobilegatewaySimRouteAddParam := params.NewSimRouteAddMobilegatewayParam()
	mobilegatewaySimRouteUpdateParam := params.NewSimRouteUpdateMobilegatewayParam()
	mobilegatewaySimRouteDeleteParam := params.NewSimRouteDeleteMobilegatewayParam()
	mobilegatewayDnsUpdateParam := params.NewDnsUpdateMobilegatewayParam()
	mobilegatewayLogsParam := params.NewLogsMobilegatewayParam()

	cliCommand := &cli.Command{
		Name:    "mobile-gateway",
		Aliases: []string{"mgw"},
		Usage:   "A manage commands of MobileGateway",
		Subcommands: []*cli.Command{
			{
				Name:    "list",
				Aliases: []string{"ls", "find", "selector"},
				Usage:   "List Mobilegateway",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "name",
						Usage: "set filter by name(s)",
					},
					&cli.Int64SliceFlag{
						Name:  "id",
						Usage: "set filter by id(s)",
					},
					&cli.StringSliceFlag{
						Name:    "tags",
						Aliases: []string{"selector"},
						Usage:   "set filter by tags(AND)",
					},
					&cli.IntFlag{
						Name:    "from",
						Aliases: []string{"offset"},
						Usage:   "set offset",
					},
					&cli.IntFlag{
						Name:    "max",
						Aliases: []string{"limit"},
						Usage:   "set limit",
					},
					&cli.StringSliceFlag{
						Name:  "sort",
						Usage: "set field(s) for sort",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayListParam.ParamTemplate = c.String("param-template")
					mobilegatewayListParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayListParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewListMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayListParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("name") {
						mobilegatewayListParam.Name = c.StringSlice("name")
					}
					if c.IsSet("id") {
						mobilegatewayListParam.Id = toSakuraIDs(c.Int64Slice("id"))
					}
					if c.IsSet("tags") {
						mobilegatewayListParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("from") {
						mobilegatewayListParam.From = c.Int("from")
					}
					if c.IsSet("max") {
						mobilegatewayListParam.Max = c.Int("max")
					}
					if c.IsSet("sort") {
						mobilegatewayListParam.Sort = c.StringSlice("sort")
					}
					if c.IsSet("param-template") {
						mobilegatewayListParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayListParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayListParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayListParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayListParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						mobilegatewayListParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						mobilegatewayListParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						mobilegatewayListParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						mobilegatewayListParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						mobilegatewayListParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						mobilegatewayListParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						mobilegatewayListParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayListParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayListParam.GenerateSkeleton {
						mobilegatewayListParam.GenerateSkeleton = false
						mobilegatewayListParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayListParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayListParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayListParam)

					// Run command with params
					return funcs.MobilegatewayList(ctx, mobilegatewayListParam)

				},
			},
			{
				Name:  "create",
				Usage: "Create Mobilegateway",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:  "internet-connection",
						Usage: "connect to internet",
					},
					&cli.StringFlag{
						Name:  "name",
						Usage: "[Required] set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "set resource tags",
					},
					&cli.Int64Flag{
						Name:  "icon-id",
						Usage: "set Icon ID",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayCreateParam.ParamTemplate = c.String("param-template")
					mobilegatewayCreateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayCreateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCreateMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayCreateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("internet-connection") {
						mobilegatewayCreateParam.InternetConnection = c.Bool("internet-connection")
					}
					if c.IsSet("name") {
						mobilegatewayCreateParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						mobilegatewayCreateParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						mobilegatewayCreateParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						mobilegatewayCreateParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						mobilegatewayCreateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewayCreateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayCreateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayCreateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayCreateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayCreateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						mobilegatewayCreateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						mobilegatewayCreateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						mobilegatewayCreateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						mobilegatewayCreateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						mobilegatewayCreateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						mobilegatewayCreateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						mobilegatewayCreateParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayCreateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayCreateParam.GenerateSkeleton {
						mobilegatewayCreateParam.GenerateSkeleton = false
						mobilegatewayCreateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayCreateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayCreateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayCreateParam)

					// confirm
					if !mobilegatewayCreateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("create") {
							return nil
						}
					}

					// Run command with params
					return funcs.MobilegatewayCreate(ctx, mobilegatewayCreateParam)

				},
			},
			{
				Name:      "read",
				Usage:     "Read Mobilegateway",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayReadParam.ParamTemplate = c.String("param-template")
					mobilegatewayReadParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayReadParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewReadMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayReadParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobilegatewayReadParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						mobilegatewayReadParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayReadParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayReadParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayReadParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayReadParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						mobilegatewayReadParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						mobilegatewayReadParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						mobilegatewayReadParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						mobilegatewayReadParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						mobilegatewayReadParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						mobilegatewayReadParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						mobilegatewayReadParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						mobilegatewayReadParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayReadParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayReadParam.GenerateSkeleton {
						mobilegatewayReadParam.GenerateSkeleton = false
						mobilegatewayReadParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayReadParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayReadParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayReadParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayReadParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayReadParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayReadParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayReadParam.Selector) == 0 || hasTags(&v, mobilegatewayReadParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayReadParam.SetId(id)
						p := *mobilegatewayReadParam // copy struct value
						mobilegatewayReadParam := &p
						go func() {
							err := funcs.MobilegatewayRead(ctx, mobilegatewayReadParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "update",
				Usage:     "Update Mobilegateway",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:  "internet-connection",
						Usage: "connect to internet",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "name",
						Usage: "set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "set resource tags",
					},
					&cli.Int64Flag{
						Name:  "icon-id",
						Usage: "set Icon ID",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayUpdateParam.ParamTemplate = c.String("param-template")
					mobilegatewayUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewUpdateMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("internet-connection") {
						mobilegatewayUpdateParam.InternetConnection = c.Bool("internet-connection")
					}
					if c.IsSet("selector") {
						mobilegatewayUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("name") {
						mobilegatewayUpdateParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						mobilegatewayUpdateParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						mobilegatewayUpdateParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						mobilegatewayUpdateParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						mobilegatewayUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewayUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						mobilegatewayUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						mobilegatewayUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						mobilegatewayUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						mobilegatewayUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						mobilegatewayUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						mobilegatewayUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						mobilegatewayUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						mobilegatewayUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayUpdateParam.GenerateSkeleton {
						mobilegatewayUpdateParam.GenerateSkeleton = false
						mobilegatewayUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayUpdateParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayUpdateParam.Selector) == 0 || hasTags(&v, mobilegatewayUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !mobilegatewayUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayUpdateParam.SetId(id)
						p := *mobilegatewayUpdateParam // copy struct value
						mobilegatewayUpdateParam := &p
						go func() {
							err := funcs.MobilegatewayUpdate(ctx, mobilegatewayUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "delete",
				Aliases:   []string{"rm"},
				Usage:     "Delete Mobilegateway",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:    "force",
						Aliases: []string{"f"},
						Usage:   "forced-shutdown flag if mobile-gateway is running",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayDeleteParam.ParamTemplate = c.String("param-template")
					mobilegatewayDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDeleteMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("force") {
						mobilegatewayDeleteParam.Force = c.Bool("force")
					}
					if c.IsSet("selector") {
						mobilegatewayDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobilegatewayDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewayDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						mobilegatewayDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						mobilegatewayDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						mobilegatewayDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						mobilegatewayDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						mobilegatewayDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						mobilegatewayDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						mobilegatewayDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						mobilegatewayDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayDeleteParam.GenerateSkeleton {
						mobilegatewayDeleteParam.GenerateSkeleton = false
						mobilegatewayDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayDeleteParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayDeleteParam.Selector) == 0 || hasTags(&v, mobilegatewayDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !mobilegatewayDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayDeleteParam.SetId(id)
						p := *mobilegatewayDeleteParam // copy struct value
						mobilegatewayDeleteParam := &p
						go func() {
							err := funcs.MobilegatewayDelete(ctx, mobilegatewayDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "boot",
				Aliases:   []string{"power-on"},
				Usage:     "Boot Mobilegateway",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayBootParam.ParamTemplate = c.String("param-template")
					mobilegatewayBootParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayBootParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBootMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayBootParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobilegatewayBootParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobilegatewayBootParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewayBootParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayBootParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayBootParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayBootParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayBootParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewayBootParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayBootParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayBootParam.GenerateSkeleton {
						mobilegatewayBootParam.GenerateSkeleton = false
						mobilegatewayBootParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayBootParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayBootParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayBootParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayBootParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayBootParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayBootParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayBootParam.Selector) == 0 || hasTags(&v, mobilegatewayBootParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !mobilegatewayBootParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("boot", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayBootParam.SetId(id)
						p := *mobilegatewayBootParam // copy struct value
						mobilegatewayBootParam := &p
						go func() {
							err := funcs.MobilegatewayBoot(ctx, mobilegatewayBootParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "shutdown",
				Aliases:   []string{"power-off"},
				Usage:     "Shutdown Mobilegateway",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayShutdownParam.ParamTemplate = c.String("param-template")
					mobilegatewayShutdownParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayShutdownParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewShutdownMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayShutdownParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobilegatewayShutdownParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobilegatewayShutdownParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewayShutdownParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayShutdownParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayShutdownParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayShutdownParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayShutdownParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewayShutdownParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayShutdownParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayShutdownParam.GenerateSkeleton {
						mobilegatewayShutdownParam.GenerateSkeleton = false
						mobilegatewayShutdownParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayShutdownParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayShutdownParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayShutdownParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayShutdownParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayShutdownParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayShutdownParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayShutdownParam.Selector) == 0 || hasTags(&v, mobilegatewayShutdownParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !mobilegatewayShutdownParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("shutdown", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayShutdownParam.SetId(id)
						p := *mobilegatewayShutdownParam // copy struct value
						mobilegatewayShutdownParam := &p
						go func() {
							err := funcs.MobilegatewayShutdown(ctx, mobilegatewayShutdownParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "shutdown-force",
				Aliases:   []string{"stop"},
				Usage:     "ShutdownForce Mobilegateway",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayShutdownForceParam.ParamTemplate = c.String("param-template")
					mobilegatewayShutdownForceParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayShutdownForceParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewShutdownForceMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayShutdownForceParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobilegatewayShutdownForceParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobilegatewayShutdownForceParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewayShutdownForceParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayShutdownForceParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayShutdownForceParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayShutdownForceParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayShutdownForceParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewayShutdownForceParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayShutdownForceParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayShutdownForceParam.GenerateSkeleton {
						mobilegatewayShutdownForceParam.GenerateSkeleton = false
						mobilegatewayShutdownForceParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayShutdownForceParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayShutdownForceParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayShutdownForceParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayShutdownForceParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayShutdownForceParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayShutdownForceParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayShutdownForceParam.Selector) == 0 || hasTags(&v, mobilegatewayShutdownForceParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !mobilegatewayShutdownForceParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("shutdown-force", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayShutdownForceParam.SetId(id)
						p := *mobilegatewayShutdownForceParam // copy struct value
						mobilegatewayShutdownForceParam := &p
						go func() {
							err := funcs.MobilegatewayShutdownForce(ctx, mobilegatewayShutdownForceParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "reset",
				Usage:     "Reset Mobilegateway",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayResetParam.ParamTemplate = c.String("param-template")
					mobilegatewayResetParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayResetParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewResetMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayResetParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobilegatewayResetParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobilegatewayResetParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewayResetParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayResetParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayResetParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayResetParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayResetParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewayResetParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayResetParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayResetParam.GenerateSkeleton {
						mobilegatewayResetParam.GenerateSkeleton = false
						mobilegatewayResetParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayResetParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayResetParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayResetParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayResetParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayResetParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayResetParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayResetParam.Selector) == 0 || hasTags(&v, mobilegatewayResetParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !mobilegatewayResetParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("reset", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayResetParam.SetId(id)
						p := *mobilegatewayResetParam // copy struct value
						mobilegatewayResetParam := &p
						go func() {
							err := funcs.MobilegatewayReset(ctx, mobilegatewayResetParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "wait-for-boot",
				Usage:     "Wait until boot is completed",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayWaitForBootParam.ParamTemplate = c.String("param-template")
					mobilegatewayWaitForBootParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayWaitForBootParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewWaitForBootMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayWaitForBootParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobilegatewayWaitForBootParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						mobilegatewayWaitForBootParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayWaitForBootParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayWaitForBootParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayWaitForBootParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayWaitForBootParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewayWaitForBootParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayWaitForBootParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayWaitForBootParam.GenerateSkeleton {
						mobilegatewayWaitForBootParam.GenerateSkeleton = false
						mobilegatewayWaitForBootParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayWaitForBootParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayWaitForBootParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayWaitForBootParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayWaitForBootParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayWaitForBootParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayWaitForBootParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayWaitForBootParam.Selector) == 0 || hasTags(&v, mobilegatewayWaitForBootParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayWaitForBootParam.SetId(id)
						p := *mobilegatewayWaitForBootParam // copy struct value
						mobilegatewayWaitForBootParam := &p
						go func() {
							err := funcs.MobilegatewayWaitForBoot(ctx, mobilegatewayWaitForBootParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "wait-for-down",
				Usage:     "Wait until shutdown is completed",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayWaitForDownParam.ParamTemplate = c.String("param-template")
					mobilegatewayWaitForDownParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayWaitForDownParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewWaitForDownMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayWaitForDownParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobilegatewayWaitForDownParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						mobilegatewayWaitForDownParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayWaitForDownParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayWaitForDownParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayWaitForDownParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayWaitForDownParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewayWaitForDownParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayWaitForDownParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayWaitForDownParam.GenerateSkeleton {
						mobilegatewayWaitForDownParam.GenerateSkeleton = false
						mobilegatewayWaitForDownParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayWaitForDownParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayWaitForDownParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayWaitForDownParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayWaitForDownParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayWaitForDownParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayWaitForDownParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayWaitForDownParam.Selector) == 0 || hasTags(&v, mobilegatewayWaitForDownParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayWaitForDownParam.SetId(id)
						p := *mobilegatewayWaitForDownParam // copy struct value
						mobilegatewayWaitForDownParam := &p
						go func() {
							err := funcs.MobilegatewayWaitForDown(ctx, mobilegatewayWaitForDownParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "interface-info",
				Aliases:   []string{"interface-list"},
				Usage:     "Show information of NIC(s) connected to mobile-gateway",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayInterfaceInfoParam.ParamTemplate = c.String("param-template")
					mobilegatewayInterfaceInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayInterfaceInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewInterfaceInfoMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayInterfaceInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobilegatewayInterfaceInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						mobilegatewayInterfaceInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayInterfaceInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayInterfaceInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayInterfaceInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayInterfaceInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						mobilegatewayInterfaceInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						mobilegatewayInterfaceInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						mobilegatewayInterfaceInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						mobilegatewayInterfaceInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						mobilegatewayInterfaceInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						mobilegatewayInterfaceInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						mobilegatewayInterfaceInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						mobilegatewayInterfaceInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayInterfaceInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayInterfaceInfoParam.GenerateSkeleton {
						mobilegatewayInterfaceInfoParam.GenerateSkeleton = false
						mobilegatewayInterfaceInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayInterfaceInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayInterfaceInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayInterfaceInfoParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayInterfaceInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayInterfaceInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayInterfaceInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayInterfaceInfoParam.Selector) == 0 || hasTags(&v, mobilegatewayInterfaceInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayInterfaceInfoParam.SetId(id)
						p := *mobilegatewayInterfaceInfoParam // copy struct value
						mobilegatewayInterfaceInfoParam := &p
						go func() {
							err := funcs.MobilegatewayInterfaceInfo(ctx, mobilegatewayInterfaceInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "interface-connect",
				Usage:     "Connected to switch",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "ipaddress",
						Aliases: []string{"ip"},
						Usage:   "[Required] set ipaddress",
					},
					&cli.Int64Flag{
						Name:  "switch-id",
						Usage: "[Required] set connect switch ID",
					},
					&cli.IntFlag{
						Name:    "nw-masklen",
						Aliases: []string{"network-masklen"},
						Usage:   "set ipaddress prefix",
						Value:   24,
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayInterfaceConnectParam.ParamTemplate = c.String("param-template")
					mobilegatewayInterfaceConnectParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayInterfaceConnectParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewInterfaceConnectMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayInterfaceConnectParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("ipaddress") {
						mobilegatewayInterfaceConnectParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("switch-id") {
						mobilegatewayInterfaceConnectParam.SwitchId = sacloud.ID(c.Int64("switch-id"))
					}
					if c.IsSet("nw-masklen") {
						mobilegatewayInterfaceConnectParam.NwMasklen = c.Int("nw-masklen")
					}
					if c.IsSet("selector") {
						mobilegatewayInterfaceConnectParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobilegatewayInterfaceConnectParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewayInterfaceConnectParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayInterfaceConnectParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayInterfaceConnectParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayInterfaceConnectParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayInterfaceConnectParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewayInterfaceConnectParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayInterfaceConnectParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayInterfaceConnectParam.GenerateSkeleton {
						mobilegatewayInterfaceConnectParam.GenerateSkeleton = false
						mobilegatewayInterfaceConnectParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayInterfaceConnectParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayInterfaceConnectParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayInterfaceConnectParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayInterfaceConnectParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayInterfaceConnectParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayInterfaceConnectParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayInterfaceConnectParam.Selector) == 0 || hasTags(&v, mobilegatewayInterfaceConnectParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobilegatewayInterfaceConnectParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("interface-connect", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayInterfaceConnectParam.SetId(id)
						p := *mobilegatewayInterfaceConnectParam // copy struct value
						mobilegatewayInterfaceConnectParam := &p
						go func() {
							err := funcs.MobilegatewayInterfaceConnect(ctx, mobilegatewayInterfaceConnectParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "interface-update",
				Usage:     "Update interface",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "ipaddress",
						Aliases: []string{"ip"},
						Usage:   "set ipaddress",
					},
					&cli.IntFlag{
						Name:    "nw-masklen",
						Aliases: []string{"network-masklen"},
						Usage:   "set ipaddress prefix",
						Value:   24,
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayInterfaceUpdateParam.ParamTemplate = c.String("param-template")
					mobilegatewayInterfaceUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayInterfaceUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewInterfaceUpdateMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayInterfaceUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("ipaddress") {
						mobilegatewayInterfaceUpdateParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("nw-masklen") {
						mobilegatewayInterfaceUpdateParam.NwMasklen = c.Int("nw-masklen")
					}
					if c.IsSet("selector") {
						mobilegatewayInterfaceUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobilegatewayInterfaceUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewayInterfaceUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayInterfaceUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayInterfaceUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayInterfaceUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayInterfaceUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewayInterfaceUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayInterfaceUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayInterfaceUpdateParam.GenerateSkeleton {
						mobilegatewayInterfaceUpdateParam.GenerateSkeleton = false
						mobilegatewayInterfaceUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayInterfaceUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayInterfaceUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayInterfaceUpdateParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayInterfaceUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayInterfaceUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayInterfaceUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayInterfaceUpdateParam.Selector) == 0 || hasTags(&v, mobilegatewayInterfaceUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobilegatewayInterfaceUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("interface-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayInterfaceUpdateParam.SetId(id)
						p := *mobilegatewayInterfaceUpdateParam // copy struct value
						mobilegatewayInterfaceUpdateParam := &p
						go func() {
							err := funcs.MobilegatewayInterfaceUpdate(ctx, mobilegatewayInterfaceUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "interface-disconnect",
				Usage:     "Disconnected to switch",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayInterfaceDisconnectParam.ParamTemplate = c.String("param-template")
					mobilegatewayInterfaceDisconnectParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayInterfaceDisconnectParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewInterfaceDisconnectMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayInterfaceDisconnectParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobilegatewayInterfaceDisconnectParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobilegatewayInterfaceDisconnectParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewayInterfaceDisconnectParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayInterfaceDisconnectParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayInterfaceDisconnectParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayInterfaceDisconnectParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayInterfaceDisconnectParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewayInterfaceDisconnectParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayInterfaceDisconnectParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayInterfaceDisconnectParam.GenerateSkeleton {
						mobilegatewayInterfaceDisconnectParam.GenerateSkeleton = false
						mobilegatewayInterfaceDisconnectParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayInterfaceDisconnectParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayInterfaceDisconnectParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayInterfaceDisconnectParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayInterfaceDisconnectParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayInterfaceDisconnectParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayInterfaceDisconnectParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayInterfaceDisconnectParam.Selector) == 0 || hasTags(&v, mobilegatewayInterfaceDisconnectParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobilegatewayInterfaceDisconnectParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("interface-disconnect", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayInterfaceDisconnectParam.SetId(id)
						p := *mobilegatewayInterfaceDisconnectParam // copy struct value
						mobilegatewayInterfaceDisconnectParam := &p
						go func() {
							err := funcs.MobilegatewayInterfaceDisconnect(ctx, mobilegatewayInterfaceDisconnectParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "traffic-control-info",
				Usage:     "Show information of traffic-control",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayTrafficControlInfoParam.ParamTemplate = c.String("param-template")
					mobilegatewayTrafficControlInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayTrafficControlInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewTrafficControlInfoMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayTrafficControlInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobilegatewayTrafficControlInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						mobilegatewayTrafficControlInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayTrafficControlInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayTrafficControlInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayTrafficControlInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayTrafficControlInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						mobilegatewayTrafficControlInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						mobilegatewayTrafficControlInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						mobilegatewayTrafficControlInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						mobilegatewayTrafficControlInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						mobilegatewayTrafficControlInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						mobilegatewayTrafficControlInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						mobilegatewayTrafficControlInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						mobilegatewayTrafficControlInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayTrafficControlInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayTrafficControlInfoParam.GenerateSkeleton {
						mobilegatewayTrafficControlInfoParam.GenerateSkeleton = false
						mobilegatewayTrafficControlInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayTrafficControlInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayTrafficControlInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayTrafficControlInfoParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayTrafficControlInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayTrafficControlInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayTrafficControlInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayTrafficControlInfoParam.Selector) == 0 || hasTags(&v, mobilegatewayTrafficControlInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayTrafficControlInfoParam.SetId(id)
						p := *mobilegatewayTrafficControlInfoParam // copy struct value
						mobilegatewayTrafficControlInfoParam := &p
						go func() {
							err := funcs.MobilegatewayTrafficControlInfo(ctx, mobilegatewayTrafficControlInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "traffic-control-enable",
				Usage:     "Enable traffic-control",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "quota",
						Usage: "[Required] ",
						Value: 512,
					},
					&cli.IntFlag{
						Name: "band-width-limit",
					},
					&cli.BoolFlag{
						Name: "enable-email",
					},
					&cli.StringFlag{
						Name: "slack-webhook-url",
					},
					&cli.BoolFlag{
						Name: "auto-traffic-shaping",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayTrafficControlEnableParam.ParamTemplate = c.String("param-template")
					mobilegatewayTrafficControlEnableParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayTrafficControlEnableParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewTrafficControlEnableMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayTrafficControlEnableParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("quota") {
						mobilegatewayTrafficControlEnableParam.Quota = c.Int("quota")
					}
					if c.IsSet("band-width-limit") {
						mobilegatewayTrafficControlEnableParam.BandWidthLimit = c.Int("band-width-limit")
					}
					if c.IsSet("enable-email") {
						mobilegatewayTrafficControlEnableParam.EnableEmail = c.Bool("enable-email")
					}
					if c.IsSet("slack-webhook-url") {
						mobilegatewayTrafficControlEnableParam.SlackWebhookUrl = c.String("slack-webhook-url")
					}
					if c.IsSet("auto-traffic-shaping") {
						mobilegatewayTrafficControlEnableParam.AutoTrafficShaping = c.Bool("auto-traffic-shaping")
					}
					if c.IsSet("selector") {
						mobilegatewayTrafficControlEnableParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobilegatewayTrafficControlEnableParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewayTrafficControlEnableParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayTrafficControlEnableParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayTrafficControlEnableParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayTrafficControlEnableParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayTrafficControlEnableParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewayTrafficControlEnableParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayTrafficControlEnableParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayTrafficControlEnableParam.GenerateSkeleton {
						mobilegatewayTrafficControlEnableParam.GenerateSkeleton = false
						mobilegatewayTrafficControlEnableParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayTrafficControlEnableParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayTrafficControlEnableParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayTrafficControlEnableParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayTrafficControlEnableParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayTrafficControlEnableParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayTrafficControlEnableParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayTrafficControlEnableParam.Selector) == 0 || hasTags(&v, mobilegatewayTrafficControlEnableParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !mobilegatewayTrafficControlEnableParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("traffic-control-enable", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayTrafficControlEnableParam.SetId(id)
						p := *mobilegatewayTrafficControlEnableParam // copy struct value
						mobilegatewayTrafficControlEnableParam := &p
						go func() {
							err := funcs.MobilegatewayTrafficControlEnable(ctx, mobilegatewayTrafficControlEnableParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "traffic-control-update",
				Usage:     "Update traffic-control config",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name: "quota",
					},
					&cli.IntFlag{
						Name: "band-width-limit",
					},
					&cli.BoolFlag{
						Name: "enable-email",
					},
					&cli.StringFlag{
						Name: "slack-webhook-url",
					},
					&cli.BoolFlag{
						Name: "auto-traffic-shaping",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayTrafficControlUpdateParam.ParamTemplate = c.String("param-template")
					mobilegatewayTrafficControlUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayTrafficControlUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewTrafficControlUpdateMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayTrafficControlUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("quota") {
						mobilegatewayTrafficControlUpdateParam.Quota = c.Int("quota")
					}
					if c.IsSet("band-width-limit") {
						mobilegatewayTrafficControlUpdateParam.BandWidthLimit = c.Int("band-width-limit")
					}
					if c.IsSet("enable-email") {
						mobilegatewayTrafficControlUpdateParam.EnableEmail = c.Bool("enable-email")
					}
					if c.IsSet("slack-webhook-url") {
						mobilegatewayTrafficControlUpdateParam.SlackWebhookUrl = c.String("slack-webhook-url")
					}
					if c.IsSet("auto-traffic-shaping") {
						mobilegatewayTrafficControlUpdateParam.AutoTrafficShaping = c.Bool("auto-traffic-shaping")
					}
					if c.IsSet("selector") {
						mobilegatewayTrafficControlUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobilegatewayTrafficControlUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewayTrafficControlUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayTrafficControlUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayTrafficControlUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayTrafficControlUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayTrafficControlUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewayTrafficControlUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayTrafficControlUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayTrafficControlUpdateParam.GenerateSkeleton {
						mobilegatewayTrafficControlUpdateParam.GenerateSkeleton = false
						mobilegatewayTrafficControlUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayTrafficControlUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayTrafficControlUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayTrafficControlUpdateParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayTrafficControlUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayTrafficControlUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayTrafficControlUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayTrafficControlUpdateParam.Selector) == 0 || hasTags(&v, mobilegatewayTrafficControlUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !mobilegatewayTrafficControlUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("traffic-control-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayTrafficControlUpdateParam.SetId(id)
						p := *mobilegatewayTrafficControlUpdateParam // copy struct value
						mobilegatewayTrafficControlUpdateParam := &p
						go func() {
							err := funcs.MobilegatewayTrafficControlUpdate(ctx, mobilegatewayTrafficControlUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "traffic-control-disable",
				Aliases:   []string{"traffic-control-delete"},
				Usage:     "Disable traffic-control config",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayTrafficControlDisableParam.ParamTemplate = c.String("param-template")
					mobilegatewayTrafficControlDisableParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayTrafficControlDisableParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewTrafficControlDisableMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayTrafficControlDisableParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobilegatewayTrafficControlDisableParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobilegatewayTrafficControlDisableParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewayTrafficControlDisableParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayTrafficControlDisableParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayTrafficControlDisableParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayTrafficControlDisableParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayTrafficControlDisableParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewayTrafficControlDisableParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayTrafficControlDisableParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayTrafficControlDisableParam.GenerateSkeleton {
						mobilegatewayTrafficControlDisableParam.GenerateSkeleton = false
						mobilegatewayTrafficControlDisableParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayTrafficControlDisableParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayTrafficControlDisableParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayTrafficControlDisableParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayTrafficControlDisableParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayTrafficControlDisableParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayTrafficControlDisableParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayTrafficControlDisableParam.Selector) == 0 || hasTags(&v, mobilegatewayTrafficControlDisableParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !mobilegatewayTrafficControlDisableParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("traffic-control-disable", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayTrafficControlDisableParam.SetId(id)
						p := *mobilegatewayTrafficControlDisableParam // copy struct value
						mobilegatewayTrafficControlDisableParam := &p
						go func() {
							err := funcs.MobilegatewayTrafficControlDisable(ctx, mobilegatewayTrafficControlDisableParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-route-info",
				Aliases:   []string{"static-route-list"},
				Usage:     "Show information of static-routes",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayStaticRouteInfoParam.ParamTemplate = c.String("param-template")
					mobilegatewayStaticRouteInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayStaticRouteInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticRouteInfoMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayStaticRouteInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobilegatewayStaticRouteInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						mobilegatewayStaticRouteInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayStaticRouteInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayStaticRouteInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayStaticRouteInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayStaticRouteInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						mobilegatewayStaticRouteInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						mobilegatewayStaticRouteInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						mobilegatewayStaticRouteInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						mobilegatewayStaticRouteInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						mobilegatewayStaticRouteInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						mobilegatewayStaticRouteInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						mobilegatewayStaticRouteInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						mobilegatewayStaticRouteInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayStaticRouteInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayStaticRouteInfoParam.GenerateSkeleton {
						mobilegatewayStaticRouteInfoParam.GenerateSkeleton = false
						mobilegatewayStaticRouteInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayStaticRouteInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayStaticRouteInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayStaticRouteInfoParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayStaticRouteInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayStaticRouteInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayStaticRouteInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayStaticRouteInfoParam.Selector) == 0 || hasTags(&v, mobilegatewayStaticRouteInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayStaticRouteInfoParam.SetId(id)
						p := *mobilegatewayStaticRouteInfoParam // copy struct value
						mobilegatewayStaticRouteInfoParam := &p
						go func() {
							err := funcs.MobilegatewayStaticRouteInfo(ctx, mobilegatewayStaticRouteInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-route-add",
				Usage:     "Add static-route",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "prefix",
						Usage: "[Required] set prefix",
					},
					&cli.StringFlag{
						Name:  "next-hop",
						Usage: "[Required] set next-hop",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayStaticRouteAddParam.ParamTemplate = c.String("param-template")
					mobilegatewayStaticRouteAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayStaticRouteAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticRouteAddMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayStaticRouteAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("prefix") {
						mobilegatewayStaticRouteAddParam.Prefix = c.String("prefix")
					}
					if c.IsSet("next-hop") {
						mobilegatewayStaticRouteAddParam.NextHop = c.String("next-hop")
					}
					if c.IsSet("selector") {
						mobilegatewayStaticRouteAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobilegatewayStaticRouteAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewayStaticRouteAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayStaticRouteAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayStaticRouteAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayStaticRouteAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayStaticRouteAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewayStaticRouteAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayStaticRouteAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayStaticRouteAddParam.GenerateSkeleton {
						mobilegatewayStaticRouteAddParam.GenerateSkeleton = false
						mobilegatewayStaticRouteAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayStaticRouteAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayStaticRouteAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayStaticRouteAddParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayStaticRouteAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayStaticRouteAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayStaticRouteAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayStaticRouteAddParam.Selector) == 0 || hasTags(&v, mobilegatewayStaticRouteAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobilegatewayStaticRouteAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("static-route-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayStaticRouteAddParam.SetId(id)
						p := *mobilegatewayStaticRouteAddParam // copy struct value
						mobilegatewayStaticRouteAddParam := &p
						go func() {
							err := funcs.MobilegatewayStaticRouteAdd(ctx, mobilegatewayStaticRouteAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-route-update",
				Usage:     "Update static-route",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target static-route",
					},
					&cli.StringFlag{
						Name:  "prefix",
						Usage: "set prefix",
					},
					&cli.StringFlag{
						Name:  "next-hop",
						Usage: "set next-hop",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayStaticRouteUpdateParam.ParamTemplate = c.String("param-template")
					mobilegatewayStaticRouteUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayStaticRouteUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticRouteUpdateMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayStaticRouteUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						mobilegatewayStaticRouteUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("prefix") {
						mobilegatewayStaticRouteUpdateParam.Prefix = c.String("prefix")
					}
					if c.IsSet("next-hop") {
						mobilegatewayStaticRouteUpdateParam.NextHop = c.String("next-hop")
					}
					if c.IsSet("selector") {
						mobilegatewayStaticRouteUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobilegatewayStaticRouteUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewayStaticRouteUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayStaticRouteUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayStaticRouteUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayStaticRouteUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayStaticRouteUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewayStaticRouteUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayStaticRouteUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayStaticRouteUpdateParam.GenerateSkeleton {
						mobilegatewayStaticRouteUpdateParam.GenerateSkeleton = false
						mobilegatewayStaticRouteUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayStaticRouteUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayStaticRouteUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayStaticRouteUpdateParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayStaticRouteUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayStaticRouteUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayStaticRouteUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayStaticRouteUpdateParam.Selector) == 0 || hasTags(&v, mobilegatewayStaticRouteUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobilegatewayStaticRouteUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("static-route-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayStaticRouteUpdateParam.SetId(id)
						p := *mobilegatewayStaticRouteUpdateParam // copy struct value
						mobilegatewayStaticRouteUpdateParam := &p
						go func() {
							err := funcs.MobilegatewayStaticRouteUpdate(ctx, mobilegatewayStaticRouteUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-route-delete",
				Usage:     "Delete static-route",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target static-route",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayStaticRouteDeleteParam.ParamTemplate = c.String("param-template")
					mobilegatewayStaticRouteDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayStaticRouteDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticRouteDeleteMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayStaticRouteDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						mobilegatewayStaticRouteDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						mobilegatewayStaticRouteDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobilegatewayStaticRouteDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewayStaticRouteDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayStaticRouteDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayStaticRouteDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayStaticRouteDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayStaticRouteDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewayStaticRouteDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayStaticRouteDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayStaticRouteDeleteParam.GenerateSkeleton {
						mobilegatewayStaticRouteDeleteParam.GenerateSkeleton = false
						mobilegatewayStaticRouteDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayStaticRouteDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayStaticRouteDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayStaticRouteDeleteParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayStaticRouteDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayStaticRouteDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayStaticRouteDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayStaticRouteDeleteParam.Selector) == 0 || hasTags(&v, mobilegatewayStaticRouteDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobilegatewayStaticRouteDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("static-route-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayStaticRouteDeleteParam.SetId(id)
						p := *mobilegatewayStaticRouteDeleteParam // copy struct value
						mobilegatewayStaticRouteDeleteParam := &p
						go func() {
							err := funcs.MobilegatewayStaticRouteDelete(ctx, mobilegatewayStaticRouteDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "sim-info",
				Aliases:   []string{"interface-list"},
				Usage:     "Show information of NIC(s) connected to mobile-gateway",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewaySimInfoParam.ParamTemplate = c.String("param-template")
					mobilegatewaySimInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewaySimInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSimInfoMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewaySimInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobilegatewaySimInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						mobilegatewaySimInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewaySimInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewaySimInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewaySimInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewaySimInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						mobilegatewaySimInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						mobilegatewaySimInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						mobilegatewaySimInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						mobilegatewaySimInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						mobilegatewaySimInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						mobilegatewaySimInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						mobilegatewaySimInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						mobilegatewaySimInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewaySimInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewaySimInfoParam.GenerateSkeleton {
						mobilegatewaySimInfoParam.GenerateSkeleton = false
						mobilegatewaySimInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewaySimInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewaySimInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewaySimInfoParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewaySimInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewaySimInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewaySimInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewaySimInfoParam.Selector) == 0 || hasTags(&v, mobilegatewaySimInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewaySimInfoParam.SetId(id)
						p := *mobilegatewaySimInfoParam // copy struct value
						mobilegatewaySimInfoParam := &p
						go func() {
							err := funcs.MobilegatewaySimInfo(ctx, mobilegatewaySimInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "sim-add",
				Usage:     "Connected to switch",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "ipaddress",
						Aliases: []string{"ip"},
						Usage:   "[Required] set ipaddress",
					},
					&cli.Int64Flag{
						Name:  "sim-id",
						Usage: "[Required] ",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewaySimAddParam.ParamTemplate = c.String("param-template")
					mobilegatewaySimAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewaySimAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSimAddMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewaySimAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("ipaddress") {
						mobilegatewaySimAddParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("sim-id") {
						mobilegatewaySimAddParam.SimId = sacloud.ID(c.Int64("sim-id"))
					}
					if c.IsSet("selector") {
						mobilegatewaySimAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobilegatewaySimAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewaySimAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewaySimAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewaySimAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewaySimAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewaySimAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewaySimAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewaySimAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewaySimAddParam.GenerateSkeleton {
						mobilegatewaySimAddParam.GenerateSkeleton = false
						mobilegatewaySimAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewaySimAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewaySimAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewaySimAddParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewaySimAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewaySimAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewaySimAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewaySimAddParam.Selector) == 0 || hasTags(&v, mobilegatewaySimAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobilegatewaySimAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("sim-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewaySimAddParam.SetId(id)
						p := *mobilegatewaySimAddParam // copy struct value
						mobilegatewaySimAddParam := &p
						go func() {
							err := funcs.MobilegatewaySimAdd(ctx, mobilegatewaySimAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "sim-update",
				Usage:     "Connected to switch",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "ipaddress",
						Aliases: []string{"ip"},
						Usage:   "set ipaddress",
					},
					&cli.Int64Flag{
						Name:  "sim-id",
						Usage: "[Required] ",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewaySimUpdateParam.ParamTemplate = c.String("param-template")
					mobilegatewaySimUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewaySimUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSimUpdateMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewaySimUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("ipaddress") {
						mobilegatewaySimUpdateParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("sim-id") {
						mobilegatewaySimUpdateParam.SimId = sacloud.ID(c.Int64("sim-id"))
					}
					if c.IsSet("selector") {
						mobilegatewaySimUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobilegatewaySimUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewaySimUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewaySimUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewaySimUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewaySimUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewaySimUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewaySimUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewaySimUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewaySimUpdateParam.GenerateSkeleton {
						mobilegatewaySimUpdateParam.GenerateSkeleton = false
						mobilegatewaySimUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewaySimUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewaySimUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewaySimUpdateParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewaySimUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewaySimUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewaySimUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewaySimUpdateParam.Selector) == 0 || hasTags(&v, mobilegatewaySimUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobilegatewaySimUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("sim-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewaySimUpdateParam.SetId(id)
						p := *mobilegatewaySimUpdateParam // copy struct value
						mobilegatewaySimUpdateParam := &p
						go func() {
							err := funcs.MobilegatewaySimUpdate(ctx, mobilegatewaySimUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "sim-delete",
				Usage:     "Disconnected to switch",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.Int64Flag{
						Name:  "sim-id",
						Usage: "[Required] ",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewaySimDeleteParam.ParamTemplate = c.String("param-template")
					mobilegatewaySimDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewaySimDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSimDeleteMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewaySimDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("sim-id") {
						mobilegatewaySimDeleteParam.SimId = sacloud.ID(c.Int64("sim-id"))
					}
					if c.IsSet("selector") {
						mobilegatewaySimDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobilegatewaySimDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewaySimDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewaySimDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewaySimDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewaySimDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewaySimDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewaySimDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewaySimDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewaySimDeleteParam.GenerateSkeleton {
						mobilegatewaySimDeleteParam.GenerateSkeleton = false
						mobilegatewaySimDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewaySimDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewaySimDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewaySimDeleteParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewaySimDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewaySimDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewaySimDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewaySimDeleteParam.Selector) == 0 || hasTags(&v, mobilegatewaySimDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobilegatewaySimDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("sim-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewaySimDeleteParam.SetId(id)
						p := *mobilegatewaySimDeleteParam // copy struct value
						mobilegatewaySimDeleteParam := &p
						go func() {
							err := funcs.MobilegatewaySimDelete(ctx, mobilegatewaySimDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "sim-route-info",
				Aliases:   []string{"sim-route-list"},
				Usage:     "Show information of sim-routes",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewaySimRouteInfoParam.ParamTemplate = c.String("param-template")
					mobilegatewaySimRouteInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewaySimRouteInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSimRouteInfoMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewaySimRouteInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						mobilegatewaySimRouteInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						mobilegatewaySimRouteInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewaySimRouteInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewaySimRouteInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewaySimRouteInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewaySimRouteInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						mobilegatewaySimRouteInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						mobilegatewaySimRouteInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						mobilegatewaySimRouteInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						mobilegatewaySimRouteInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						mobilegatewaySimRouteInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						mobilegatewaySimRouteInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						mobilegatewaySimRouteInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						mobilegatewaySimRouteInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewaySimRouteInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewaySimRouteInfoParam.GenerateSkeleton {
						mobilegatewaySimRouteInfoParam.GenerateSkeleton = false
						mobilegatewaySimRouteInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewaySimRouteInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewaySimRouteInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewaySimRouteInfoParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewaySimRouteInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewaySimRouteInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewaySimRouteInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewaySimRouteInfoParam.Selector) == 0 || hasTags(&v, mobilegatewaySimRouteInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewaySimRouteInfoParam.SetId(id)
						p := *mobilegatewaySimRouteInfoParam // copy struct value
						mobilegatewaySimRouteInfoParam := &p
						go func() {
							err := funcs.MobilegatewaySimRouteInfo(ctx, mobilegatewaySimRouteInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "sim-route-add",
				Usage:     "Add sim-route",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "prefix",
						Usage: "[Required] set prefix",
					},
					&cli.Int64Flag{
						Name:  "sim",
						Usage: "[Required] set sim",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewaySimRouteAddParam.ParamTemplate = c.String("param-template")
					mobilegatewaySimRouteAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewaySimRouteAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSimRouteAddMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewaySimRouteAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("prefix") {
						mobilegatewaySimRouteAddParam.Prefix = c.String("prefix")
					}
					if c.IsSet("sim") {
						mobilegatewaySimRouteAddParam.Sim = sacloud.ID(c.Int64("sim"))
					}
					if c.IsSet("selector") {
						mobilegatewaySimRouteAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobilegatewaySimRouteAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewaySimRouteAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewaySimRouteAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewaySimRouteAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewaySimRouteAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewaySimRouteAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewaySimRouteAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewaySimRouteAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewaySimRouteAddParam.GenerateSkeleton {
						mobilegatewaySimRouteAddParam.GenerateSkeleton = false
						mobilegatewaySimRouteAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewaySimRouteAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewaySimRouteAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewaySimRouteAddParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewaySimRouteAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewaySimRouteAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewaySimRouteAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewaySimRouteAddParam.Selector) == 0 || hasTags(&v, mobilegatewaySimRouteAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobilegatewaySimRouteAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("sim-route-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewaySimRouteAddParam.SetId(id)
						p := *mobilegatewaySimRouteAddParam // copy struct value
						mobilegatewaySimRouteAddParam := &p
						go func() {
							err := funcs.MobilegatewaySimRouteAdd(ctx, mobilegatewaySimRouteAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "sim-route-update",
				Usage:     "Update sim-route",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target sim-route",
					},
					&cli.StringFlag{
						Name:  "prefix",
						Usage: "set prefix",
					},
					&cli.Int64Flag{
						Name:  "sim",
						Usage: "set sim",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewaySimRouteUpdateParam.ParamTemplate = c.String("param-template")
					mobilegatewaySimRouteUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewaySimRouteUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSimRouteUpdateMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewaySimRouteUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						mobilegatewaySimRouteUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("prefix") {
						mobilegatewaySimRouteUpdateParam.Prefix = c.String("prefix")
					}
					if c.IsSet("sim") {
						mobilegatewaySimRouteUpdateParam.Sim = sacloud.ID(c.Int64("sim"))
					}
					if c.IsSet("selector") {
						mobilegatewaySimRouteUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobilegatewaySimRouteUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewaySimRouteUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewaySimRouteUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewaySimRouteUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewaySimRouteUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewaySimRouteUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewaySimRouteUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewaySimRouteUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewaySimRouteUpdateParam.GenerateSkeleton {
						mobilegatewaySimRouteUpdateParam.GenerateSkeleton = false
						mobilegatewaySimRouteUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewaySimRouteUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewaySimRouteUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewaySimRouteUpdateParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewaySimRouteUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewaySimRouteUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewaySimRouteUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewaySimRouteUpdateParam.Selector) == 0 || hasTags(&v, mobilegatewaySimRouteUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobilegatewaySimRouteUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("sim-route-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewaySimRouteUpdateParam.SetId(id)
						p := *mobilegatewaySimRouteUpdateParam // copy struct value
						mobilegatewaySimRouteUpdateParam := &p
						go func() {
							err := funcs.MobilegatewaySimRouteUpdate(ctx, mobilegatewaySimRouteUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "sim-route-delete",
				Usage:     "Delete sim-route",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target sim-route",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewaySimRouteDeleteParam.ParamTemplate = c.String("param-template")
					mobilegatewaySimRouteDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewaySimRouteDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSimRouteDeleteMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewaySimRouteDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						mobilegatewaySimRouteDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						mobilegatewaySimRouteDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobilegatewaySimRouteDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewaySimRouteDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewaySimRouteDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewaySimRouteDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewaySimRouteDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewaySimRouteDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewaySimRouteDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewaySimRouteDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewaySimRouteDeleteParam.GenerateSkeleton {
						mobilegatewaySimRouteDeleteParam.GenerateSkeleton = false
						mobilegatewaySimRouteDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewaySimRouteDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewaySimRouteDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewaySimRouteDeleteParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewaySimRouteDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewaySimRouteDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewaySimRouteDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewaySimRouteDeleteParam.Selector) == 0 || hasTags(&v, mobilegatewaySimRouteDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobilegatewaySimRouteDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("sim-route-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewaySimRouteDeleteParam.SetId(id)
						p := *mobilegatewaySimRouteDeleteParam // copy struct value
						mobilegatewaySimRouteDeleteParam := &p
						go func() {
							err := funcs.MobilegatewaySimRouteDelete(ctx, mobilegatewaySimRouteDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "dns-update",
				Usage:     "Update interface",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "dns-1",
						Usage: "[Required] set DNS server address",
					},
					&cli.StringFlag{
						Name:  "dns-2",
						Usage: "[Required] set DNS server address",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayDnsUpdateParam.ParamTemplate = c.String("param-template")
					mobilegatewayDnsUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayDnsUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDnsUpdateMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayDnsUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("dns-1") {
						mobilegatewayDnsUpdateParam.Dns1 = c.String("dns-1")
					}
					if c.IsSet("dns-2") {
						mobilegatewayDnsUpdateParam.Dns2 = c.String("dns-2")
					}
					if c.IsSet("selector") {
						mobilegatewayDnsUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						mobilegatewayDnsUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						mobilegatewayDnsUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayDnsUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayDnsUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayDnsUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayDnsUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewayDnsUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayDnsUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayDnsUpdateParam.GenerateSkeleton {
						mobilegatewayDnsUpdateParam.GenerateSkeleton = false
						mobilegatewayDnsUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayDnsUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayDnsUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayDnsUpdateParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayDnsUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayDnsUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayDnsUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayDnsUpdateParam.Selector) == 0 || hasTags(&v, mobilegatewayDnsUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !mobilegatewayDnsUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("dns-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayDnsUpdateParam.SetId(id)
						p := *mobilegatewayDnsUpdateParam // copy struct value
						mobilegatewayDnsUpdateParam := &p
						go func() {
							err := funcs.MobilegatewayDnsUpdate(ctx, mobilegatewayDnsUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "logs",
				Usage:     "Logs Mobilegateway",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:    "follow",
						Aliases: []string{"f"},
						Usage:   "follow log output",
					},
					&cli.Int64Flag{
						Name:  "refresh-interval",
						Usage: "log refresh interval second",
						Value: 3,
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					mobilegatewayLogsParam.ParamTemplate = c.String("param-template")
					mobilegatewayLogsParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(mobilegatewayLogsParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewLogsMobilegatewayParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(mobilegatewayLogsParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("follow") {
						mobilegatewayLogsParam.Follow = c.Bool("follow")
					}
					if c.IsSet("refresh-interval") {
						mobilegatewayLogsParam.RefreshInterval = c.Int64("refresh-interval")
					}
					if c.IsSet("selector") {
						mobilegatewayLogsParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						mobilegatewayLogsParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						mobilegatewayLogsParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						mobilegatewayLogsParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						mobilegatewayLogsParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						mobilegatewayLogsParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						mobilegatewayLogsParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = mobilegatewayLogsParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if mobilegatewayLogsParam.GenerateSkeleton {
						mobilegatewayLogsParam.GenerateSkeleton = false
						mobilegatewayLogsParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(mobilegatewayLogsParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := mobilegatewayLogsParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), mobilegatewayLogsParam)

					apiClient := ctx.GetAPIClient().Mobilegateway
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(mobilegatewayLogsParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Mobilegateways {
							if hasTags(&v, mobilegatewayLogsParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", mobilegatewayLogsParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Mobilegateways {
										if len(mobilegatewayLogsParam.Selector) == 0 || hasTags(&v, mobilegatewayLogsParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						mobilegatewayLogsParam.SetId(id)
						p := *mobilegatewayLogsParam // copy struct value
						mobilegatewayLogsParam := &p
						go func() {
							err := funcs.MobilegatewayLogs(ctx, mobilegatewayLogsParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
		},
	}

	// build Category-Resource mapping
	AppendResourceCategoryMap("mobile-gateway", &schema.Category{
		Key:         "appliance",
		DisplayName: "Appliance",
		Order:       40,
	})

	// build Category-Command mapping

	AppendCommandCategoryMap("mobile-gateway", "boot", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("mobile-gateway", "create", &schema.Category{
		Key:         "basic",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("mobile-gateway", "delete", &schema.Category{
		Key:         "basic",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("mobile-gateway", "dns-update", &schema.Category{
		Key:         "dns",
		DisplayName: "DNS Management",
		Order:       70,
	})
	AppendCommandCategoryMap("mobile-gateway", "interface-connect", &schema.Category{
		Key:         "nic",
		DisplayName: "Interface Management",
		Order:       30,
	})
	AppendCommandCategoryMap("mobile-gateway", "interface-disconnect", &schema.Category{
		Key:         "nic",
		DisplayName: "Interface Management",
		Order:       30,
	})
	AppendCommandCategoryMap("mobile-gateway", "interface-info", &schema.Category{
		Key:         "nic",
		DisplayName: "Interface Management",
		Order:       30,
	})
	AppendCommandCategoryMap("mobile-gateway", "interface-update", &schema.Category{
		Key:         "nic",
		DisplayName: "Interface Management",
		Order:       30,
	})
	AppendCommandCategoryMap("mobile-gateway", "list", &schema.Category{
		Key:         "basic",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("mobile-gateway", "logs", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitoring",
		Order:       80,
	})
	AppendCommandCategoryMap("mobile-gateway", "read", &schema.Category{
		Key:         "basic",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("mobile-gateway", "reset", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("mobile-gateway", "shutdown", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("mobile-gateway", "shutdown-force", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("mobile-gateway", "sim-add", &schema.Category{
		Key:         "sim",
		DisplayName: "SIM Management",
		Order:       60,
	})
	AppendCommandCategoryMap("mobile-gateway", "sim-delete", &schema.Category{
		Key:         "sim",
		DisplayName: "SIM Management",
		Order:       60,
	})
	AppendCommandCategoryMap("mobile-gateway", "sim-info", &schema.Category{
		Key:         "sim",
		DisplayName: "SIM Management",
		Order:       60,
	})
	AppendCommandCategoryMap("mobile-gateway", "sim-route-add", &schema.Category{
		Key:         "sim-route",
		DisplayName: "SIM Route Management",
		Order:       65,
	})
	AppendCommandCategoryMap("mobile-gateway", "sim-route-delete", &schema.Category{
		Key:         "sim-route",
		DisplayName: "SIM Route Management",
		Order:       65,
	})
	AppendCommandCategoryMap("mobile-gateway", "sim-route-info", &schema.Category{
		Key:         "sim-route",
		DisplayName: "SIM Route Management",
		Order:       65,
	})
	AppendCommandCategoryMap("mobile-gateway", "sim-route-update", &schema.Category{
		Key:         "sim-route",
		DisplayName: "SIM Route Management",
		Order:       65,
	})
	AppendCommandCategoryMap("mobile-gateway", "sim-update", &schema.Category{
		Key:         "sim",
		DisplayName: "SIM Management",
		Order:       60,
	})
	AppendCommandCategoryMap("mobile-gateway", "static-route-add", &schema.Category{
		Key:         "static-route",
		DisplayName: "StaticRoute Management",
		Order:       50,
	})
	AppendCommandCategoryMap("mobile-gateway", "static-route-delete", &schema.Category{
		Key:         "static-route",
		DisplayName: "StaticRoute Management",
		Order:       50,
	})
	AppendCommandCategoryMap("mobile-gateway", "static-route-info", &schema.Category{
		Key:         "static-route",
		DisplayName: "StaticRoute Management",
		Order:       50,
	})
	AppendCommandCategoryMap("mobile-gateway", "static-route-update", &schema.Category{
		Key:         "static-route",
		DisplayName: "StaticRoute Management",
		Order:       50,
	})
	AppendCommandCategoryMap("mobile-gateway", "traffic-control-disable", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic Control",
		Order:       40,
	})
	AppendCommandCategoryMap("mobile-gateway", "traffic-control-enable", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic Control",
		Order:       40,
	})
	AppendCommandCategoryMap("mobile-gateway", "traffic-control-info", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic Control",
		Order:       40,
	})
	AppendCommandCategoryMap("mobile-gateway", "traffic-control-update", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic Control",
		Order:       40,
	})
	AppendCommandCategoryMap("mobile-gateway", "update", &schema.Category{
		Key:         "basic",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("mobile-gateway", "wait-for-boot", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("mobile-gateway", "wait-for-down", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})

	// build Category-Param mapping

	AppendFlagCategoryMap("mobile-gateway", "boot", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "boot", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "boot", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "boot", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "boot", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "boot", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "boot", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "boot", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "icon-id", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "internet-connection", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "create", "tags", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "force", &schema.Category{
		Key:         "mobile-gateway",
		DisplayName: "Mobile-Gateway options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "dns-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "dns-update", "dns1", &schema.Category{
		Key:         "dns",
		DisplayName: "Dns options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "dns-update", "dns2", &schema.Category{
		Key:         "dns",
		DisplayName: "Dns options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "dns-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "dns-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "dns-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "dns-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "dns-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "dns-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "dns-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-connect", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-connect", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-connect", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-connect", "ipaddress", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-connect", "nw-masklen", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-connect", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-connect", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-connect", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-connect", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-connect", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-connect", "switch-id", &schema.Category{
		Key:         "interface",
		DisplayName: "Interface options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-disconnect", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-disconnect", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-disconnect", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-disconnect", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-disconnect", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-disconnect", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-disconnect", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-disconnect", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-update", "ipaddress", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-update", "nw-masklen", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "interface-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "from", &schema.Category{
		Key:         "limit-offset",
		DisplayName: "Limit/Offset options",
		Order:       2147483597,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "id", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "max", &schema.Category{
		Key:         "limit-offset",
		DisplayName: "Limit/Offset options",
		Order:       2147483597,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "name", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "sort", &schema.Category{
		Key:         "sort",
		DisplayName: "Sort options",
		Order:       2147483607,
	})
	AppendFlagCategoryMap("mobile-gateway", "list", "tags", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "logs", "follow", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "logs", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "logs", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "logs", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "logs", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "logs", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "logs", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "logs", "refresh-interval", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "logs", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "read", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "reset", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "reset", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "reset", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "reset", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "reset", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "reset", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "reset", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "reset", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown-force", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown-force", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown-force", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown-force", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown-force", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown-force", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown-force", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "shutdown-force", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-add", "ipaddress", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-add", "sim-id", &schema.Category{
		Key:         "interface",
		DisplayName: "Interface options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-delete", "sim-id", &schema.Category{
		Key:         "interface",
		DisplayName: "Interface options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-add", "prefix", &schema.Category{
		Key:         "SIM-Route",
		DisplayName: "SIM-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-add", "sim", &schema.Category{
		Key:         "SIM-Route",
		DisplayName: "SIM-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-delete", "index", &schema.Category{
		Key:         "SIM-Route",
		DisplayName: "SIM-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-update", "index", &schema.Category{
		Key:         "SIM-Route",
		DisplayName: "SIM-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-update", "prefix", &schema.Category{
		Key:         "SIM-Route",
		DisplayName: "SIM-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-route-update", "sim", &schema.Category{
		Key:         "SIM-Route",
		DisplayName: "SIM-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-update", "ipaddress", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "sim-update", "sim-id", &schema.Category{
		Key:         "interface",
		DisplayName: "Interface options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-add", "next-hop", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-add", "prefix", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-delete", "index", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-update", "index", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-update", "next-hop", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-update", "prefix", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "static-route-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-disable", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-disable", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-disable", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-disable", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-disable", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-disable", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-disable", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-disable", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "auto-traffic-shaping", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic-Control options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "band-width-limit", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic-Control options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "enable-email", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic-Control options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "quota", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic-Control options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-enable", "slack-webhook-url", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic-Control options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "auto-traffic-shaping", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic-Control options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "band-width-limit", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic-Control options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "enable-email", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic-Control options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "quota", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic-Control options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "traffic-control-update", "slack-webhook-url", &schema.Category{
		Key:         "traffic-control",
		DisplayName: "Traffic-Control options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "icon-id", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "internet-connection", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "update", "tags", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-boot", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-boot", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-boot", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-boot", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-boot", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-boot", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-boot", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-down", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-down", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-down", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-down", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-down", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-down", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("mobile-gateway", "wait-for-down", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})

	// append command to GlobalContext
	Commands = append(Commands, cliCommand)
}

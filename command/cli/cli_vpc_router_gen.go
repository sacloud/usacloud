// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-commands'; DO NOT EDIT

package cli

import (
	"encoding/json"
	"fmt"
	"strings"
	"sync"

	"github.com/imdario/mergo"
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/funcs"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/schema"
	"gopkg.in/urfave/cli.v2"
)

func init() {
	vpcRouterListParam := params.NewListVPCRouterParam()
	vpcRouterCreateParam := params.NewCreateVPCRouterParam()
	vpcRouterReadParam := params.NewReadVPCRouterParam()
	vpcRouterUpdateParam := params.NewUpdateVPCRouterParam()
	vpcRouterDeleteParam := params.NewDeleteVPCRouterParam()
	vpcRouterBootParam := params.NewBootVPCRouterParam()
	vpcRouterShutdownParam := params.NewShutdownVPCRouterParam()
	vpcRouterShutdownForceParam := params.NewShutdownForceVPCRouterParam()
	vpcRouterResetParam := params.NewResetVPCRouterParam()
	vpcRouterWaitForBootParam := params.NewWaitForBootVPCRouterParam()
	vpcRouterWaitForDownParam := params.NewWaitForDownVPCRouterParam()
	vpcRouterEnableInternetConnectionParam := params.NewEnableInternetConnectionVPCRouterParam()
	vpcRouterDisableInternetConnectionParam := params.NewDisableInternetConnectionVPCRouterParam()
	vpcRouterInterfaceInfoParam := params.NewInterfaceInfoVPCRouterParam()
	vpcRouterInterfaceConnectParam := params.NewInterfaceConnectVPCRouterParam()
	vpcRouterInterfaceUpdateParam := params.NewInterfaceUpdateVPCRouterParam()
	vpcRouterInterfaceDisconnectParam := params.NewInterfaceDisconnectVPCRouterParam()
	vpcRouterStaticNatInfoParam := params.NewStaticNatInfoVPCRouterParam()
	vpcRouterStaticNatAddParam := params.NewStaticNatAddVPCRouterParam()
	vpcRouterStaticNatUpdateParam := params.NewStaticNatUpdateVPCRouterParam()
	vpcRouterStaticNatDeleteParam := params.NewStaticNatDeleteVPCRouterParam()
	vpcRouterPortForwardingInfoParam := params.NewPortForwardingInfoVPCRouterParam()
	vpcRouterPortForwardingAddParam := params.NewPortForwardingAddVPCRouterParam()
	vpcRouterPortForwardingUpdateParam := params.NewPortForwardingUpdateVPCRouterParam()
	vpcRouterPortForwardingDeleteParam := params.NewPortForwardingDeleteVPCRouterParam()
	vpcRouterFirewallInfoParam := params.NewFirewallInfoVPCRouterParam()
	vpcRouterFirewallAddParam := params.NewFirewallAddVPCRouterParam()
	vpcRouterFirewallUpdateParam := params.NewFirewallUpdateVPCRouterParam()
	vpcRouterFirewallDeleteParam := params.NewFirewallDeleteVPCRouterParam()
	vpcRouterDhcpServerInfoParam := params.NewDhcpServerInfoVPCRouterParam()
	vpcRouterDhcpServerAddParam := params.NewDhcpServerAddVPCRouterParam()
	vpcRouterDhcpServerUpdateParam := params.NewDhcpServerUpdateVPCRouterParam()
	vpcRouterDhcpServerDeleteParam := params.NewDhcpServerDeleteVPCRouterParam()
	vpcRouterDhcpStaticMappingInfoParam := params.NewDhcpStaticMappingInfoVPCRouterParam()
	vpcRouterDhcpStaticMappingAddParam := params.NewDhcpStaticMappingAddVPCRouterParam()
	vpcRouterDhcpStaticMappingUpdateParam := params.NewDhcpStaticMappingUpdateVPCRouterParam()
	vpcRouterDhcpStaticMappingDeleteParam := params.NewDhcpStaticMappingDeleteVPCRouterParam()
	vpcRouterPptpServerInfoParam := params.NewPptpServerInfoVPCRouterParam()
	vpcRouterPptpServerUpdateParam := params.NewPptpServerUpdateVPCRouterParam()
	vpcRouterL2TPServerInfoParam := params.NewL2TPServerInfoVPCRouterParam()
	vpcRouterL2TPServerUpdateParam := params.NewL2TPServerUpdateVPCRouterParam()
	vpcRouterUserInfoParam := params.NewUserInfoVPCRouterParam()
	vpcRouterUserAddParam := params.NewUserAddVPCRouterParam()
	vpcRouterUserUpdateParam := params.NewUserUpdateVPCRouterParam()
	vpcRouterUserDeleteParam := params.NewUserDeleteVPCRouterParam()
	vpcRouterSiteToSiteVPNInfoParam := params.NewSiteToSiteVPNInfoVPCRouterParam()
	vpcRouterSiteToSiteVPNAddParam := params.NewSiteToSiteVPNAddVPCRouterParam()
	vpcRouterSiteToSiteVPNUpdateParam := params.NewSiteToSiteVPNUpdateVPCRouterParam()
	vpcRouterSiteToSiteVPNDeleteParam := params.NewSiteToSiteVPNDeleteVPCRouterParam()
	vpcRouterSiteToSiteVPNPeersParam := params.NewSiteToSiteVPNPeersVPCRouterParam()
	vpcRouterStaticRouteInfoParam := params.NewStaticRouteInfoVPCRouterParam()
	vpcRouterStaticRouteAddParam := params.NewStaticRouteAddVPCRouterParam()
	vpcRouterStaticRouteUpdateParam := params.NewStaticRouteUpdateVPCRouterParam()
	vpcRouterStaticRouteDeleteParam := params.NewStaticRouteDeleteVPCRouterParam()
	vpcRouterMonitorParam := params.NewMonitorVPCRouterParam()
	vpcRouterLogsParam := params.NewLogsVPCRouterParam()

	cliCommand := &cli.Command{
		Name:  "vpc-router",
		Usage: "A manage commands of VPCRouter",
		Subcommands: []*cli.Command{
			{
				Name:    "list",
				Aliases: []string{"ls", "find", "selector"},
				Usage:   "List VPCRouter",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "name",
						Usage: "set filter by name(s)",
					},
					&cli.Int64SliceFlag{
						Name:  "id",
						Usage: "set filter by id(s)",
					},
					&cli.StringSliceFlag{
						Name:    "tags",
						Aliases: []string{"selector"},
						Usage:   "set filter by tags(AND)",
					},
					&cli.IntFlag{
						Name:    "from",
						Aliases: []string{"offset"},
						Usage:   "set offset",
					},
					&cli.IntFlag{
						Name:    "max",
						Aliases: []string{"limit"},
						Usage:   "set limit",
					},
					&cli.StringSliceFlag{
						Name:  "sort",
						Usage: "set field(s) for sort",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterListParam.ParamTemplate = c.String("param-template")
					vpcRouterListParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterListParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewListVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterListParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("name") {
						vpcRouterListParam.Name = c.StringSlice("name")
					}
					if c.IsSet("id") {
						vpcRouterListParam.Id = toSakuraIDs(c.Int64Slice("id"))
					}
					if c.IsSet("tags") {
						vpcRouterListParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("from") {
						vpcRouterListParam.From = c.Int("from")
					}
					if c.IsSet("max") {
						vpcRouterListParam.Max = c.Int("max")
					}
					if c.IsSet("sort") {
						vpcRouterListParam.Sort = c.StringSlice("sort")
					}
					if c.IsSet("param-template") {
						vpcRouterListParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterListParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterListParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterListParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterListParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcRouterListParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcRouterListParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcRouterListParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcRouterListParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcRouterListParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcRouterListParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcRouterListParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterListParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterListParam.GenerateSkeleton {
						vpcRouterListParam.GenerateSkeleton = false
						vpcRouterListParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterListParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterListParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterListParam)

					// Run command with params
					return funcs.VPCRouterList(ctx, vpcRouterListParam)

				},
			},
			{
				Name:  "create",
				Usage: "Create VPCRouter",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "plan",
						Usage: "[Required] set plan[standard/premium/highspec/highspec1600/highspec4000]",
						Value: "standard",
					},
					&cli.Int64Flag{
						Name:  "switch-id",
						Usage: "set connect switch ID",
					},
					&cli.IntFlag{
						Name:    "vrid",
						Aliases: []string{"VRID"},
						Usage:   "[Required] set VRID",
						Value:   1,
					},
					&cli.StringFlag{
						Name:  "vip",
						Usage: "set virtual ipddress()",
					},
					&cli.StringFlag{
						Name:    "ipaddress-1",
						Aliases: []string{"ip1"},
						Usage:   "set ipaddress(#1)",
					},
					&cli.StringFlag{
						Name:    "ipaddress-2",
						Aliases: []string{"ip2"},
						Usage:   "set ipaddress(#2)",
					},
					&cli.BoolFlag{
						Name:  "disable-internet-connection",
						Usage: "disable internet connection from VPCRouter",
						Value: false,
					},
					&cli.BoolFlag{
						Name:  "boot-after-create",
						Usage: "boot after create",
					},
					&cli.StringFlag{
						Name:  "name",
						Usage: "[Required] set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "set resource tags",
					},
					&cli.Int64Flag{
						Name:  "icon-id",
						Usage: "set Icon ID",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterCreateParam.ParamTemplate = c.String("param-template")
					vpcRouterCreateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterCreateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCreateVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterCreateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("plan") {
						vpcRouterCreateParam.Plan = c.String("plan")
					}
					if c.IsSet("switch-id") {
						vpcRouterCreateParam.SwitchId = sacloud.ID(c.Int64("switch-id"))
					}
					if c.IsSet("vrid") {
						vpcRouterCreateParam.Vrid = c.Int("vrid")
					}
					if c.IsSet("vip") {
						vpcRouterCreateParam.Vip = c.String("vip")
					}
					if c.IsSet("ipaddress-1") {
						vpcRouterCreateParam.Ipaddress1 = c.String("ipaddress-1")
					}
					if c.IsSet("ipaddress-2") {
						vpcRouterCreateParam.Ipaddress2 = c.String("ipaddress-2")
					}
					if c.IsSet("disable-internet-connection") {
						vpcRouterCreateParam.DisableInternetConnection = c.Bool("disable-internet-connection")
					}
					if c.IsSet("boot-after-create") {
						vpcRouterCreateParam.BootAfterCreate = c.Bool("boot-after-create")
					}
					if c.IsSet("name") {
						vpcRouterCreateParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						vpcRouterCreateParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						vpcRouterCreateParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						vpcRouterCreateParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						vpcRouterCreateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterCreateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterCreateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterCreateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterCreateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterCreateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcRouterCreateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcRouterCreateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcRouterCreateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcRouterCreateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcRouterCreateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcRouterCreateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcRouterCreateParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterCreateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterCreateParam.GenerateSkeleton {
						vpcRouterCreateParam.GenerateSkeleton = false
						vpcRouterCreateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterCreateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterCreateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterCreateParam)

					// confirm
					if !vpcRouterCreateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("create") {
							return nil
						}
					}

					// Run command with params
					return funcs.VPCRouterCreate(ctx, vpcRouterCreateParam)

				},
			},
			{
				Name:      "read",
				Usage:     "Read VPCRouter",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterReadParam.ParamTemplate = c.String("param-template")
					vpcRouterReadParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterReadParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewReadVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterReadParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcRouterReadParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcRouterReadParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterReadParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterReadParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterReadParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterReadParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcRouterReadParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcRouterReadParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcRouterReadParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcRouterReadParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcRouterReadParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcRouterReadParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcRouterReadParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcRouterReadParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterReadParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterReadParam.GenerateSkeleton {
						vpcRouterReadParam.GenerateSkeleton = false
						vpcRouterReadParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterReadParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterReadParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterReadParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterReadParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterReadParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterReadParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterReadParam.Selector) == 0 || hasTags(&v, vpcRouterReadParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterReadParam.SetId(id)
						p := *vpcRouterReadParam // copy struct value
						vpcRouterReadParam := &p
						go func() {
							err := funcs.VPCRouterRead(ctx, vpcRouterReadParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "update",
				Usage:     "Update VPCRouter",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "syslog-host",
						Usage: "set syslog host IPAddress",
					},
					&cli.BoolFlag{
						Name:  "internet-connection",
						Usage: "set internet connection from VPCRouter",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "name",
						Usage: "set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "set resource tags",
					},
					&cli.Int64Flag{
						Name:  "icon-id",
						Usage: "set Icon ID",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterUpdateParam.ParamTemplate = c.String("param-template")
					vpcRouterUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewUpdateVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("syslog-host") {
						vpcRouterUpdateParam.SyslogHost = c.String("syslog-host")
					}
					if c.IsSet("internet-connection") {
						vpcRouterUpdateParam.InternetConnection = c.Bool("internet-connection")
					}
					if c.IsSet("selector") {
						vpcRouterUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("name") {
						vpcRouterUpdateParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						vpcRouterUpdateParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						vpcRouterUpdateParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						vpcRouterUpdateParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						vpcRouterUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcRouterUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcRouterUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcRouterUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcRouterUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcRouterUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcRouterUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcRouterUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcRouterUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterUpdateParam.GenerateSkeleton {
						vpcRouterUpdateParam.GenerateSkeleton = false
						vpcRouterUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterUpdateParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterUpdateParam.Selector) == 0 || hasTags(&v, vpcRouterUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !vpcRouterUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterUpdateParam.SetId(id)
						p := *vpcRouterUpdateParam // copy struct value
						vpcRouterUpdateParam := &p
						go func() {
							err := funcs.VPCRouterUpdate(ctx, vpcRouterUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "delete",
				Aliases:   []string{"rm"},
				Usage:     "Delete VPCRouter",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:    "force",
						Aliases: []string{"f"},
						Usage:   "forced-shutdown flag if server is running",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterDeleteParam.ParamTemplate = c.String("param-template")
					vpcRouterDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDeleteVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("force") {
						vpcRouterDeleteParam.Force = c.Bool("force")
					}
					if c.IsSet("selector") {
						vpcRouterDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcRouterDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcRouterDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcRouterDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcRouterDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcRouterDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcRouterDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcRouterDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcRouterDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterDeleteParam.GenerateSkeleton {
						vpcRouterDeleteParam.GenerateSkeleton = false
						vpcRouterDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterDeleteParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterDeleteParam.Selector) == 0 || hasTags(&v, vpcRouterDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !vpcRouterDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterDeleteParam.SetId(id)
						p := *vpcRouterDeleteParam // copy struct value
						vpcRouterDeleteParam := &p
						go func() {
							err := funcs.VPCRouterDelete(ctx, vpcRouterDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "boot",
				Aliases:   []string{"power-on"},
				Usage:     "Boot VPCRouter",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterBootParam.ParamTemplate = c.String("param-template")
					vpcRouterBootParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterBootParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBootVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterBootParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcRouterBootParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterBootParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterBootParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterBootParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterBootParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterBootParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterBootParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterBootParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterBootParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterBootParam.GenerateSkeleton {
						vpcRouterBootParam.GenerateSkeleton = false
						vpcRouterBootParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterBootParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterBootParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterBootParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterBootParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterBootParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterBootParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterBootParam.Selector) == 0 || hasTags(&v, vpcRouterBootParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !vpcRouterBootParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("boot", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterBootParam.SetId(id)
						p := *vpcRouterBootParam // copy struct value
						vpcRouterBootParam := &p
						go func() {
							err := funcs.VPCRouterBoot(ctx, vpcRouterBootParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "shutdown",
				Aliases:   []string{"power-off"},
				Usage:     "Shutdown VPCRouter",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterShutdownParam.ParamTemplate = c.String("param-template")
					vpcRouterShutdownParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterShutdownParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewShutdownVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterShutdownParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcRouterShutdownParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterShutdownParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterShutdownParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterShutdownParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterShutdownParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterShutdownParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterShutdownParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterShutdownParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterShutdownParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterShutdownParam.GenerateSkeleton {
						vpcRouterShutdownParam.GenerateSkeleton = false
						vpcRouterShutdownParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterShutdownParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterShutdownParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterShutdownParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterShutdownParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterShutdownParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterShutdownParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterShutdownParam.Selector) == 0 || hasTags(&v, vpcRouterShutdownParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !vpcRouterShutdownParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("shutdown", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterShutdownParam.SetId(id)
						p := *vpcRouterShutdownParam // copy struct value
						vpcRouterShutdownParam := &p
						go func() {
							err := funcs.VPCRouterShutdown(ctx, vpcRouterShutdownParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "shutdown-force",
				Aliases:   []string{"stop"},
				Usage:     "ShutdownForce VPCRouter",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterShutdownForceParam.ParamTemplate = c.String("param-template")
					vpcRouterShutdownForceParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterShutdownForceParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewShutdownForceVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterShutdownForceParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcRouterShutdownForceParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterShutdownForceParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterShutdownForceParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterShutdownForceParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterShutdownForceParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterShutdownForceParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterShutdownForceParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterShutdownForceParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterShutdownForceParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterShutdownForceParam.GenerateSkeleton {
						vpcRouterShutdownForceParam.GenerateSkeleton = false
						vpcRouterShutdownForceParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterShutdownForceParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterShutdownForceParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterShutdownForceParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterShutdownForceParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterShutdownForceParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterShutdownForceParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterShutdownForceParam.Selector) == 0 || hasTags(&v, vpcRouterShutdownForceParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !vpcRouterShutdownForceParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("shutdown-force", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterShutdownForceParam.SetId(id)
						p := *vpcRouterShutdownForceParam // copy struct value
						vpcRouterShutdownForceParam := &p
						go func() {
							err := funcs.VPCRouterShutdownForce(ctx, vpcRouterShutdownForceParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "reset",
				Usage:     "Reset VPCRouter",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterResetParam.ParamTemplate = c.String("param-template")
					vpcRouterResetParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterResetParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewResetVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterResetParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcRouterResetParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterResetParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterResetParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterResetParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterResetParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterResetParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterResetParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterResetParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterResetParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterResetParam.GenerateSkeleton {
						vpcRouterResetParam.GenerateSkeleton = false
						vpcRouterResetParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterResetParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterResetParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterResetParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterResetParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterResetParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterResetParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterResetParam.Selector) == 0 || hasTags(&v, vpcRouterResetParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !vpcRouterResetParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("reset", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterResetParam.SetId(id)
						p := *vpcRouterResetParam // copy struct value
						vpcRouterResetParam := &p
						go func() {
							err := funcs.VPCRouterReset(ctx, vpcRouterResetParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "wait-for-boot",
				Usage:     "Wait until boot is completed",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterWaitForBootParam.ParamTemplate = c.String("param-template")
					vpcRouterWaitForBootParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterWaitForBootParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewWaitForBootVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterWaitForBootParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcRouterWaitForBootParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcRouterWaitForBootParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterWaitForBootParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterWaitForBootParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterWaitForBootParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterWaitForBootParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterWaitForBootParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterWaitForBootParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterWaitForBootParam.GenerateSkeleton {
						vpcRouterWaitForBootParam.GenerateSkeleton = false
						vpcRouterWaitForBootParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterWaitForBootParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterWaitForBootParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterWaitForBootParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterWaitForBootParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterWaitForBootParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterWaitForBootParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterWaitForBootParam.Selector) == 0 || hasTags(&v, vpcRouterWaitForBootParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterWaitForBootParam.SetId(id)
						p := *vpcRouterWaitForBootParam // copy struct value
						vpcRouterWaitForBootParam := &p
						go func() {
							err := funcs.VPCRouterWaitForBoot(ctx, vpcRouterWaitForBootParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "wait-for-down",
				Usage:     "Wait until shutdown is completed",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterWaitForDownParam.ParamTemplate = c.String("param-template")
					vpcRouterWaitForDownParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterWaitForDownParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewWaitForDownVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterWaitForDownParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcRouterWaitForDownParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcRouterWaitForDownParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterWaitForDownParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterWaitForDownParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterWaitForDownParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterWaitForDownParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterWaitForDownParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterWaitForDownParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterWaitForDownParam.GenerateSkeleton {
						vpcRouterWaitForDownParam.GenerateSkeleton = false
						vpcRouterWaitForDownParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterWaitForDownParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterWaitForDownParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterWaitForDownParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterWaitForDownParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterWaitForDownParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterWaitForDownParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterWaitForDownParam.Selector) == 0 || hasTags(&v, vpcRouterWaitForDownParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterWaitForDownParam.SetId(id)
						p := *vpcRouterWaitForDownParam // copy struct value
						vpcRouterWaitForDownParam := &p
						go func() {
							err := funcs.VPCRouterWaitForDown(ctx, vpcRouterWaitForDownParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "enable-internet-connection",
				Usage:     "Enable internet connection from VPCRouter",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterEnableInternetConnectionParam.ParamTemplate = c.String("param-template")
					vpcRouterEnableInternetConnectionParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterEnableInternetConnectionParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewEnableInternetConnectionVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterEnableInternetConnectionParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcRouterEnableInternetConnectionParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterEnableInternetConnectionParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterEnableInternetConnectionParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterEnableInternetConnectionParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterEnableInternetConnectionParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterEnableInternetConnectionParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterEnableInternetConnectionParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterEnableInternetConnectionParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterEnableInternetConnectionParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterEnableInternetConnectionParam.GenerateSkeleton {
						vpcRouterEnableInternetConnectionParam.GenerateSkeleton = false
						vpcRouterEnableInternetConnectionParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterEnableInternetConnectionParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterEnableInternetConnectionParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterEnableInternetConnectionParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterEnableInternetConnectionParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterEnableInternetConnectionParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterEnableInternetConnectionParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterEnableInternetConnectionParam.Selector) == 0 || hasTags(&v, vpcRouterEnableInternetConnectionParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterEnableInternetConnectionParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("enable-internet-connection", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterEnableInternetConnectionParam.SetId(id)
						p := *vpcRouterEnableInternetConnectionParam // copy struct value
						vpcRouterEnableInternetConnectionParam := &p
						go func() {
							err := funcs.VPCRouterEnableInternetConnection(ctx, vpcRouterEnableInternetConnectionParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "disable-internet-connection",
				Usage:     "Enable internet connection from VPCRouter",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterDisableInternetConnectionParam.ParamTemplate = c.String("param-template")
					vpcRouterDisableInternetConnectionParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterDisableInternetConnectionParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDisableInternetConnectionVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterDisableInternetConnectionParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcRouterDisableInternetConnectionParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterDisableInternetConnectionParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterDisableInternetConnectionParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterDisableInternetConnectionParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterDisableInternetConnectionParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterDisableInternetConnectionParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterDisableInternetConnectionParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterDisableInternetConnectionParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterDisableInternetConnectionParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterDisableInternetConnectionParam.GenerateSkeleton {
						vpcRouterDisableInternetConnectionParam.GenerateSkeleton = false
						vpcRouterDisableInternetConnectionParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterDisableInternetConnectionParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterDisableInternetConnectionParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterDisableInternetConnectionParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterDisableInternetConnectionParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterDisableInternetConnectionParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterDisableInternetConnectionParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterDisableInternetConnectionParam.Selector) == 0 || hasTags(&v, vpcRouterDisableInternetConnectionParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterDisableInternetConnectionParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("disable-internet-connection", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterDisableInternetConnectionParam.SetId(id)
						p := *vpcRouterDisableInternetConnectionParam // copy struct value
						vpcRouterDisableInternetConnectionParam := &p
						go func() {
							err := funcs.VPCRouterDisableInternetConnection(ctx, vpcRouterDisableInternetConnectionParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "interface-info",
				Aliases:   []string{"interface-list"},
				Usage:     "Show information of NIC(s) connected to vpc-router",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterInterfaceInfoParam.ParamTemplate = c.String("param-template")
					vpcRouterInterfaceInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterInterfaceInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewInterfaceInfoVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterInterfaceInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcRouterInterfaceInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcRouterInterfaceInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterInterfaceInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterInterfaceInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterInterfaceInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterInterfaceInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcRouterInterfaceInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcRouterInterfaceInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcRouterInterfaceInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcRouterInterfaceInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcRouterInterfaceInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcRouterInterfaceInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcRouterInterfaceInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcRouterInterfaceInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterInterfaceInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterInterfaceInfoParam.GenerateSkeleton {
						vpcRouterInterfaceInfoParam.GenerateSkeleton = false
						vpcRouterInterfaceInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterInterfaceInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterInterfaceInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterInterfaceInfoParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterInterfaceInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterInterfaceInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterInterfaceInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterInterfaceInfoParam.Selector) == 0 || hasTags(&v, vpcRouterInterfaceInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterInterfaceInfoParam.SetId(id)
						p := *vpcRouterInterfaceInfoParam // copy struct value
						vpcRouterInterfaceInfoParam := &p
						go func() {
							err := funcs.VPCRouterInterfaceInfo(ctx, vpcRouterInterfaceInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "interface-connect",
				Usage:     "Connected to switch",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "interface",
						Usage: "[Required] index of target private-interface",
					},
					&cli.StringFlag{
						Name:    "ipaddress",
						Aliases: []string{"ip", "vip"},
						Usage:   "[Required] set (virtual)ipaddress",
					},
					&cli.BoolFlag{
						Name:  "with-reboot",
						Usage: "reboot after connect",
					},
					&cli.StringFlag{
						Name:    "ipaddress-1",
						Aliases: []string{"ip1"},
						Usage:   "set ipaddress(#1)",
					},
					&cli.Int64Flag{
						Name:  "switch-id",
						Usage: "[Required] set connect switch ID",
					},
					&cli.StringFlag{
						Name:    "ipaddress-2",
						Aliases: []string{"ip2"},
						Usage:   "set ipaddress(#2)",
					},
					&cli.IntFlag{
						Name:    "nw-masklen",
						Aliases: []string{"network-masklen"},
						Usage:   "set ipaddress prefix",
						Value:   24,
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterInterfaceConnectParam.ParamTemplate = c.String("param-template")
					vpcRouterInterfaceConnectParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterInterfaceConnectParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewInterfaceConnectVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterInterfaceConnectParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("interface") {
						vpcRouterInterfaceConnectParam.Interface = c.String("interface")
					}
					if c.IsSet("ipaddress") {
						vpcRouterInterfaceConnectParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("with-reboot") {
						vpcRouterInterfaceConnectParam.WithReboot = c.Bool("with-reboot")
					}
					if c.IsSet("ipaddress-1") {
						vpcRouterInterfaceConnectParam.Ipaddress1 = c.String("ipaddress-1")
					}
					if c.IsSet("switch-id") {
						vpcRouterInterfaceConnectParam.SwitchId = sacloud.ID(c.Int64("switch-id"))
					}
					if c.IsSet("ipaddress-2") {
						vpcRouterInterfaceConnectParam.Ipaddress2 = c.String("ipaddress-2")
					}
					if c.IsSet("nw-masklen") {
						vpcRouterInterfaceConnectParam.NwMasklen = c.Int("nw-masklen")
					}
					if c.IsSet("selector") {
						vpcRouterInterfaceConnectParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterInterfaceConnectParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterInterfaceConnectParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterInterfaceConnectParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterInterfaceConnectParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterInterfaceConnectParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterInterfaceConnectParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterInterfaceConnectParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterInterfaceConnectParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterInterfaceConnectParam.GenerateSkeleton {
						vpcRouterInterfaceConnectParam.GenerateSkeleton = false
						vpcRouterInterfaceConnectParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterInterfaceConnectParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterInterfaceConnectParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterInterfaceConnectParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterInterfaceConnectParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterInterfaceConnectParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterInterfaceConnectParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterInterfaceConnectParam.Selector) == 0 || hasTags(&v, vpcRouterInterfaceConnectParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterInterfaceConnectParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("interface-connect", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterInterfaceConnectParam.SetId(id)
						p := *vpcRouterInterfaceConnectParam // copy struct value
						vpcRouterInterfaceConnectParam := &p
						go func() {
							err := funcs.VPCRouterInterfaceConnect(ctx, vpcRouterInterfaceConnectParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "interface-update",
				Usage:     "Update interface",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "interface",
						Usage: "[Required] index of target interface",
					},
					&cli.StringFlag{
						Name:    "ipaddress",
						Aliases: []string{"ip", "vip"},
						Usage:   "set (virtual)ipaddress",
					},
					&cli.BoolFlag{
						Name:  "with-reboot",
						Usage: "reboot after connect",
					},
					&cli.StringFlag{
						Name:    "ipaddress-1",
						Aliases: []string{"ip1"},
						Usage:   "set ipaddress(#1)",
					},
					&cli.Int64Flag{
						Name:  "switch-id",
						Usage: "set connect switch ID",
					},
					&cli.StringFlag{
						Name:    "ipaddress-2",
						Aliases: []string{"ip2"},
						Usage:   "set ipaddress(#2)",
					},
					&cli.StringSliceFlag{
						Name:  "alias",
						Usage: "set ip aliases",
					},
					&cli.IntFlag{
						Name:    "nw-masklen",
						Aliases: []string{"network-masklen"},
						Usage:   "set ipaddress prefix",
						Value:   24,
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterInterfaceUpdateParam.ParamTemplate = c.String("param-template")
					vpcRouterInterfaceUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterInterfaceUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewInterfaceUpdateVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterInterfaceUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("interface") {
						vpcRouterInterfaceUpdateParam.Interface = c.String("interface")
					}
					if c.IsSet("ipaddress") {
						vpcRouterInterfaceUpdateParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("with-reboot") {
						vpcRouterInterfaceUpdateParam.WithReboot = c.Bool("with-reboot")
					}
					if c.IsSet("ipaddress-1") {
						vpcRouterInterfaceUpdateParam.Ipaddress1 = c.String("ipaddress-1")
					}
					if c.IsSet("switch-id") {
						vpcRouterInterfaceUpdateParam.SwitchId = sacloud.ID(c.Int64("switch-id"))
					}
					if c.IsSet("ipaddress-2") {
						vpcRouterInterfaceUpdateParam.Ipaddress2 = c.String("ipaddress-2")
					}
					if c.IsSet("alias") {
						vpcRouterInterfaceUpdateParam.Alias = c.StringSlice("alias")
					}
					if c.IsSet("nw-masklen") {
						vpcRouterInterfaceUpdateParam.NwMasklen = c.Int("nw-masklen")
					}
					if c.IsSet("selector") {
						vpcRouterInterfaceUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterInterfaceUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterInterfaceUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterInterfaceUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterInterfaceUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterInterfaceUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterInterfaceUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterInterfaceUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterInterfaceUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterInterfaceUpdateParam.GenerateSkeleton {
						vpcRouterInterfaceUpdateParam.GenerateSkeleton = false
						vpcRouterInterfaceUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterInterfaceUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterInterfaceUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterInterfaceUpdateParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterInterfaceUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterInterfaceUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterInterfaceUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterInterfaceUpdateParam.Selector) == 0 || hasTags(&v, vpcRouterInterfaceUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterInterfaceUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("interface-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterInterfaceUpdateParam.SetId(id)
						p := *vpcRouterInterfaceUpdateParam // copy struct value
						vpcRouterInterfaceUpdateParam := &p
						go func() {
							err := funcs.VPCRouterInterfaceUpdate(ctx, vpcRouterInterfaceUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "interface-disconnect",
				Usage:     "Disconnected to switch",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "interface",
						Usage: "[Required] index of target private-interface",
					},
					&cli.BoolFlag{
						Name:  "with-reboot",
						Usage: "reboot after connect",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterInterfaceDisconnectParam.ParamTemplate = c.String("param-template")
					vpcRouterInterfaceDisconnectParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterInterfaceDisconnectParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewInterfaceDisconnectVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterInterfaceDisconnectParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("interface") {
						vpcRouterInterfaceDisconnectParam.Interface = c.String("interface")
					}
					if c.IsSet("with-reboot") {
						vpcRouterInterfaceDisconnectParam.WithReboot = c.Bool("with-reboot")
					}
					if c.IsSet("selector") {
						vpcRouterInterfaceDisconnectParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterInterfaceDisconnectParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterInterfaceDisconnectParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterInterfaceDisconnectParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterInterfaceDisconnectParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterInterfaceDisconnectParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterInterfaceDisconnectParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterInterfaceDisconnectParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterInterfaceDisconnectParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterInterfaceDisconnectParam.GenerateSkeleton {
						vpcRouterInterfaceDisconnectParam.GenerateSkeleton = false
						vpcRouterInterfaceDisconnectParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterInterfaceDisconnectParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterInterfaceDisconnectParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterInterfaceDisconnectParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterInterfaceDisconnectParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterInterfaceDisconnectParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterInterfaceDisconnectParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterInterfaceDisconnectParam.Selector) == 0 || hasTags(&v, vpcRouterInterfaceDisconnectParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterInterfaceDisconnectParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("interface-disconnect", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterInterfaceDisconnectParam.SetId(id)
						p := *vpcRouterInterfaceDisconnectParam // copy struct value
						vpcRouterInterfaceDisconnectParam := &p
						go func() {
							err := funcs.VPCRouterInterfaceDisconnect(ctx, vpcRouterInterfaceDisconnectParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-nat-info",
				Aliases:   []string{"static-nat-list"},
				Usage:     "Show information of static NAT settings",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterStaticNatInfoParam.ParamTemplate = c.String("param-template")
					vpcRouterStaticNatInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterStaticNatInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticNatInfoVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterStaticNatInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcRouterStaticNatInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcRouterStaticNatInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterStaticNatInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterStaticNatInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterStaticNatInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterStaticNatInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcRouterStaticNatInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcRouterStaticNatInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcRouterStaticNatInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcRouterStaticNatInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcRouterStaticNatInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcRouterStaticNatInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcRouterStaticNatInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcRouterStaticNatInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterStaticNatInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterStaticNatInfoParam.GenerateSkeleton {
						vpcRouterStaticNatInfoParam.GenerateSkeleton = false
						vpcRouterStaticNatInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterStaticNatInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterStaticNatInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterStaticNatInfoParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterStaticNatInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterStaticNatInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterStaticNatInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterStaticNatInfoParam.Selector) == 0 || hasTags(&v, vpcRouterStaticNatInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterStaticNatInfoParam.SetId(id)
						p := *vpcRouterStaticNatInfoParam // copy struct value
						vpcRouterStaticNatInfoParam := &p
						go func() {
							err := funcs.VPCRouterStaticNatInfo(ctx, vpcRouterStaticNatInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-nat-add",
				Usage:     "Add static NAT",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "global",
						Aliases: []string{"global-ip", "global-address"},
						Usage:   "[Required] set global ipaddress",
					},
					&cli.StringFlag{
						Name:    "private",
						Aliases: []string{"private-ip", "private-address"},
						Usage:   "[Required] set private ipaddress",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set description",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterStaticNatAddParam.ParamTemplate = c.String("param-template")
					vpcRouterStaticNatAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterStaticNatAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticNatAddVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterStaticNatAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("global") {
						vpcRouterStaticNatAddParam.Global = c.String("global")
					}
					if c.IsSet("private") {
						vpcRouterStaticNatAddParam.Private = c.String("private")
					}
					if c.IsSet("description") {
						vpcRouterStaticNatAddParam.Description = c.String("description")
					}
					if c.IsSet("selector") {
						vpcRouterStaticNatAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterStaticNatAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterStaticNatAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterStaticNatAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterStaticNatAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterStaticNatAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterStaticNatAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterStaticNatAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterStaticNatAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterStaticNatAddParam.GenerateSkeleton {
						vpcRouterStaticNatAddParam.GenerateSkeleton = false
						vpcRouterStaticNatAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterStaticNatAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterStaticNatAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterStaticNatAddParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterStaticNatAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterStaticNatAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterStaticNatAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterStaticNatAddParam.Selector) == 0 || hasTags(&v, vpcRouterStaticNatAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterStaticNatAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("static-nat-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterStaticNatAddParam.SetId(id)
						p := *vpcRouterStaticNatAddParam // copy struct value
						vpcRouterStaticNatAddParam := &p
						go func() {
							err := funcs.VPCRouterStaticNatAdd(ctx, vpcRouterStaticNatAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-nat-update",
				Usage:     "Update static NAT",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target static NAT",
					},
					&cli.StringFlag{
						Name:    "global",
						Aliases: []string{"global-ip", "global-address"},
						Usage:   "set global ipaddress",
					},
					&cli.StringFlag{
						Name:    "private",
						Aliases: []string{"private-ip", "private-address"},
						Usage:   "set private ipaddress",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set description",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterStaticNatUpdateParam.ParamTemplate = c.String("param-template")
					vpcRouterStaticNatUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterStaticNatUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticNatUpdateVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterStaticNatUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcRouterStaticNatUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("global") {
						vpcRouterStaticNatUpdateParam.Global = c.String("global")
					}
					if c.IsSet("private") {
						vpcRouterStaticNatUpdateParam.Private = c.String("private")
					}
					if c.IsSet("description") {
						vpcRouterStaticNatUpdateParam.Description = c.String("description")
					}
					if c.IsSet("selector") {
						vpcRouterStaticNatUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterStaticNatUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterStaticNatUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterStaticNatUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterStaticNatUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterStaticNatUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterStaticNatUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterStaticNatUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterStaticNatUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterStaticNatUpdateParam.GenerateSkeleton {
						vpcRouterStaticNatUpdateParam.GenerateSkeleton = false
						vpcRouterStaticNatUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterStaticNatUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterStaticNatUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterStaticNatUpdateParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterStaticNatUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterStaticNatUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterStaticNatUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterStaticNatUpdateParam.Selector) == 0 || hasTags(&v, vpcRouterStaticNatUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterStaticNatUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("static-nat-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterStaticNatUpdateParam.SetId(id)
						p := *vpcRouterStaticNatUpdateParam // copy struct value
						vpcRouterStaticNatUpdateParam := &p
						go func() {
							err := funcs.VPCRouterStaticNatUpdate(ctx, vpcRouterStaticNatUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-nat-delete",
				Usage:     "Delete static NAT",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target static NAT",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterStaticNatDeleteParam.ParamTemplate = c.String("param-template")
					vpcRouterStaticNatDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterStaticNatDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticNatDeleteVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterStaticNatDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcRouterStaticNatDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						vpcRouterStaticNatDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterStaticNatDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterStaticNatDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterStaticNatDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterStaticNatDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterStaticNatDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterStaticNatDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterStaticNatDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterStaticNatDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterStaticNatDeleteParam.GenerateSkeleton {
						vpcRouterStaticNatDeleteParam.GenerateSkeleton = false
						vpcRouterStaticNatDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterStaticNatDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterStaticNatDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterStaticNatDeleteParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterStaticNatDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterStaticNatDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterStaticNatDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterStaticNatDeleteParam.Selector) == 0 || hasTags(&v, vpcRouterStaticNatDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterStaticNatDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("static-nat-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterStaticNatDeleteParam.SetId(id)
						p := *vpcRouterStaticNatDeleteParam // copy struct value
						vpcRouterStaticNatDeleteParam := &p
						go func() {
							err := funcs.VPCRouterStaticNatDelete(ctx, vpcRouterStaticNatDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "port-forwarding-info",
				Aliases:   []string{"port-forwarding-list"},
				Usage:     "Show information of port-forwarding settings",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterPortForwardingInfoParam.ParamTemplate = c.String("param-template")
					vpcRouterPortForwardingInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterPortForwardingInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewPortForwardingInfoVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterPortForwardingInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcRouterPortForwardingInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcRouterPortForwardingInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterPortForwardingInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterPortForwardingInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterPortForwardingInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterPortForwardingInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcRouterPortForwardingInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcRouterPortForwardingInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcRouterPortForwardingInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcRouterPortForwardingInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcRouterPortForwardingInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcRouterPortForwardingInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcRouterPortForwardingInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcRouterPortForwardingInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterPortForwardingInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterPortForwardingInfoParam.GenerateSkeleton {
						vpcRouterPortForwardingInfoParam.GenerateSkeleton = false
						vpcRouterPortForwardingInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterPortForwardingInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterPortForwardingInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterPortForwardingInfoParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterPortForwardingInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterPortForwardingInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterPortForwardingInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterPortForwardingInfoParam.Selector) == 0 || hasTags(&v, vpcRouterPortForwardingInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterPortForwardingInfoParam.SetId(id)
						p := *vpcRouterPortForwardingInfoParam // copy struct value
						vpcRouterPortForwardingInfoParam := &p
						go func() {
							err := funcs.VPCRouterPortForwardingInfo(ctx, vpcRouterPortForwardingInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "port-forwarding-add",
				Usage:     "Add port forwarding",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "protocol",
						Usage: "[Required] set target protocol",
					},
					&cli.IntFlag{
						Name:  "global-port",
						Usage: "[Required] set global ipaddress",
					},
					&cli.StringFlag{
						Name:    "private-ipaddress",
						Aliases: []string{"private-ip", "private-address"},
						Usage:   "[Required] set private ipaddress",
					},
					&cli.IntFlag{
						Name:  "private-port",
						Usage: "[Required] set private ipaddress",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set description",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterPortForwardingAddParam.ParamTemplate = c.String("param-template")
					vpcRouterPortForwardingAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterPortForwardingAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewPortForwardingAddVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterPortForwardingAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("protocol") {
						vpcRouterPortForwardingAddParam.Protocol = c.String("protocol")
					}
					if c.IsSet("global-port") {
						vpcRouterPortForwardingAddParam.GlobalPort = c.Int("global-port")
					}
					if c.IsSet("private-ipaddress") {
						vpcRouterPortForwardingAddParam.PrivateIpaddress = c.String("private-ipaddress")
					}
					if c.IsSet("private-port") {
						vpcRouterPortForwardingAddParam.PrivatePort = c.Int("private-port")
					}
					if c.IsSet("description") {
						vpcRouterPortForwardingAddParam.Description = c.String("description")
					}
					if c.IsSet("selector") {
						vpcRouterPortForwardingAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterPortForwardingAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterPortForwardingAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterPortForwardingAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterPortForwardingAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterPortForwardingAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterPortForwardingAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterPortForwardingAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterPortForwardingAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterPortForwardingAddParam.GenerateSkeleton {
						vpcRouterPortForwardingAddParam.GenerateSkeleton = false
						vpcRouterPortForwardingAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterPortForwardingAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterPortForwardingAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterPortForwardingAddParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterPortForwardingAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterPortForwardingAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterPortForwardingAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterPortForwardingAddParam.Selector) == 0 || hasTags(&v, vpcRouterPortForwardingAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterPortForwardingAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("port-forwarding-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterPortForwardingAddParam.SetId(id)
						p := *vpcRouterPortForwardingAddParam // copy struct value
						vpcRouterPortForwardingAddParam := &p
						go func() {
							err := funcs.VPCRouterPortForwardingAdd(ctx, vpcRouterPortForwardingAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "port-forwarding-update",
				Usage:     "Update port forwarding",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target PortForward",
					},
					&cli.StringFlag{
						Name:  "protocol",
						Usage: "set target protocol",
					},
					&cli.IntFlag{
						Name:  "global-port",
						Usage: "set global ipaddress",
					},
					&cli.StringFlag{
						Name:    "private-ipaddress",
						Aliases: []string{"private-ip", "private-address"},
						Usage:   "set private ipaddress",
					},
					&cli.IntFlag{
						Name:  "private-port",
						Usage: "set private ipaddress",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set description",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterPortForwardingUpdateParam.ParamTemplate = c.String("param-template")
					vpcRouterPortForwardingUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterPortForwardingUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewPortForwardingUpdateVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterPortForwardingUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcRouterPortForwardingUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("protocol") {
						vpcRouterPortForwardingUpdateParam.Protocol = c.String("protocol")
					}
					if c.IsSet("global-port") {
						vpcRouterPortForwardingUpdateParam.GlobalPort = c.Int("global-port")
					}
					if c.IsSet("private-ipaddress") {
						vpcRouterPortForwardingUpdateParam.PrivateIpaddress = c.String("private-ipaddress")
					}
					if c.IsSet("private-port") {
						vpcRouterPortForwardingUpdateParam.PrivatePort = c.Int("private-port")
					}
					if c.IsSet("description") {
						vpcRouterPortForwardingUpdateParam.Description = c.String("description")
					}
					if c.IsSet("selector") {
						vpcRouterPortForwardingUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterPortForwardingUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterPortForwardingUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterPortForwardingUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterPortForwardingUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterPortForwardingUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterPortForwardingUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterPortForwardingUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterPortForwardingUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterPortForwardingUpdateParam.GenerateSkeleton {
						vpcRouterPortForwardingUpdateParam.GenerateSkeleton = false
						vpcRouterPortForwardingUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterPortForwardingUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterPortForwardingUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterPortForwardingUpdateParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterPortForwardingUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterPortForwardingUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterPortForwardingUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterPortForwardingUpdateParam.Selector) == 0 || hasTags(&v, vpcRouterPortForwardingUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterPortForwardingUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("port-forwarding-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterPortForwardingUpdateParam.SetId(id)
						p := *vpcRouterPortForwardingUpdateParam // copy struct value
						vpcRouterPortForwardingUpdateParam := &p
						go func() {
							err := funcs.VPCRouterPortForwardingUpdate(ctx, vpcRouterPortForwardingUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "port-forwarding-delete",
				Usage:     "Delete port forwarding",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target PortForward",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterPortForwardingDeleteParam.ParamTemplate = c.String("param-template")
					vpcRouterPortForwardingDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterPortForwardingDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewPortForwardingDeleteVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterPortForwardingDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcRouterPortForwardingDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						vpcRouterPortForwardingDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterPortForwardingDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterPortForwardingDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterPortForwardingDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterPortForwardingDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterPortForwardingDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterPortForwardingDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterPortForwardingDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterPortForwardingDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterPortForwardingDeleteParam.GenerateSkeleton {
						vpcRouterPortForwardingDeleteParam.GenerateSkeleton = false
						vpcRouterPortForwardingDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterPortForwardingDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterPortForwardingDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterPortForwardingDeleteParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterPortForwardingDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterPortForwardingDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterPortForwardingDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterPortForwardingDeleteParam.Selector) == 0 || hasTags(&v, vpcRouterPortForwardingDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterPortForwardingDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("port-forwarding-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterPortForwardingDeleteParam.SetId(id)
						p := *vpcRouterPortForwardingDeleteParam // copy struct value
						vpcRouterPortForwardingDeleteParam := &p
						go func() {
							err := funcs.VPCRouterPortForwardingDelete(ctx, vpcRouterPortForwardingDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "firewall-info",
				Aliases:   []string{"firewall-list"},
				Usage:     "Show information of firewall rules",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "interface",
						Usage: "set target NIC index",
						Value: 0,
					},
					&cli.StringFlag{
						Name:  "direction",
						Usage: "[Required] set target direction[send/receive]",
						Value: "receive",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterFirewallInfoParam.ParamTemplate = c.String("param-template")
					vpcRouterFirewallInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterFirewallInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewFirewallInfoVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterFirewallInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("interface") {
						vpcRouterFirewallInfoParam.Interface = c.Int("interface")
					}
					if c.IsSet("direction") {
						vpcRouterFirewallInfoParam.Direction = c.String("direction")
					}
					if c.IsSet("selector") {
						vpcRouterFirewallInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcRouterFirewallInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterFirewallInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterFirewallInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterFirewallInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterFirewallInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcRouterFirewallInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcRouterFirewallInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcRouterFirewallInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcRouterFirewallInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcRouterFirewallInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcRouterFirewallInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcRouterFirewallInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcRouterFirewallInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterFirewallInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterFirewallInfoParam.GenerateSkeleton {
						vpcRouterFirewallInfoParam.GenerateSkeleton = false
						vpcRouterFirewallInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterFirewallInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterFirewallInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterFirewallInfoParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterFirewallInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterFirewallInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterFirewallInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterFirewallInfoParam.Selector) == 0 || hasTags(&v, vpcRouterFirewallInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterFirewallInfoParam.SetId(id)
						p := *vpcRouterFirewallInfoParam // copy struct value
						vpcRouterFirewallInfoParam := &p
						go func() {
							err := funcs.VPCRouterFirewallInfo(ctx, vpcRouterFirewallInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "firewall-add",
				Usage:     "Add firewall rule",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "interface",
						Usage: "set target NIC index",
						Value: 0,
					},
					&cli.StringFlag{
						Name:  "direction",
						Usage: "[Required] set target direction[send/receive]",
						Value: "receive",
					},
					&cli.StringFlag{
						Name:  "protocol",
						Usage: "[Required] set target protocol",
					},
					&cli.StringFlag{
						Name:  "source-network",
						Usage: "set source ipaddress or network address",
					},
					&cli.IntFlag{
						Name:  "source-port",
						Usage: "set source port",
					},
					&cli.StringFlag{
						Name:    "destination-network",
						Aliases: []string{"dest-network"},
						Usage:   "set destination ipaddress or network address",
					},
					&cli.IntFlag{
						Name:    "destination-port",
						Aliases: []string{"dest-port"},
						Usage:   "set destination port",
					},
					&cli.StringFlag{
						Name:  "action",
						Usage: "[Required] set action[allow/deny]",
						Value: "deny",
					},
					&cli.BoolFlag{
						Name:  "enable-logging",
						Usage: "enable logging",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set description",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterFirewallAddParam.ParamTemplate = c.String("param-template")
					vpcRouterFirewallAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterFirewallAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewFirewallAddVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterFirewallAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("interface") {
						vpcRouterFirewallAddParam.Interface = c.Int("interface")
					}
					if c.IsSet("direction") {
						vpcRouterFirewallAddParam.Direction = c.String("direction")
					}
					if c.IsSet("protocol") {
						vpcRouterFirewallAddParam.Protocol = c.String("protocol")
					}
					if c.IsSet("source-network") {
						vpcRouterFirewallAddParam.SourceNetwork = c.String("source-network")
					}
					if c.IsSet("source-port") {
						vpcRouterFirewallAddParam.SourcePort = c.Int("source-port")
					}
					if c.IsSet("destination-network") {
						vpcRouterFirewallAddParam.DestinationNetwork = c.String("destination-network")
					}
					if c.IsSet("destination-port") {
						vpcRouterFirewallAddParam.DestinationPort = c.Int("destination-port")
					}
					if c.IsSet("action") {
						vpcRouterFirewallAddParam.Action = c.String("action")
					}
					if c.IsSet("enable-logging") {
						vpcRouterFirewallAddParam.EnableLogging = c.Bool("enable-logging")
					}
					if c.IsSet("description") {
						vpcRouterFirewallAddParam.Description = c.String("description")
					}
					if c.IsSet("selector") {
						vpcRouterFirewallAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterFirewallAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterFirewallAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterFirewallAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterFirewallAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterFirewallAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterFirewallAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterFirewallAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterFirewallAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterFirewallAddParam.GenerateSkeleton {
						vpcRouterFirewallAddParam.GenerateSkeleton = false
						vpcRouterFirewallAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterFirewallAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterFirewallAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterFirewallAddParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterFirewallAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterFirewallAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterFirewallAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterFirewallAddParam.Selector) == 0 || hasTags(&v, vpcRouterFirewallAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterFirewallAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("firewall-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterFirewallAddParam.SetId(id)
						p := *vpcRouterFirewallAddParam // copy struct value
						vpcRouterFirewallAddParam := &p
						go func() {
							err := funcs.VPCRouterFirewallAdd(ctx, vpcRouterFirewallAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "firewall-update",
				Usage:     "Update firewall rule",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "interface",
						Usage: "set target NIC index",
						Value: 0,
					},
					&cli.StringFlag{
						Name:  "direction",
						Usage: "[Required] set target direction[send/receive]",
						Value: "receive",
					},
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target Firewall rule",
					},
					&cli.StringFlag{
						Name:  "protocol",
						Usage: "set target protocol",
					},
					&cli.StringFlag{
						Name:  "source-network",
						Usage: "set source ipaddress or network address",
					},
					&cli.IntFlag{
						Name:  "source-port",
						Usage: "set source port",
					},
					&cli.StringFlag{
						Name:    "destination-network",
						Aliases: []string{"dest-network"},
						Usage:   "set destination ipaddress or network address",
					},
					&cli.IntFlag{
						Name:    "destination-port",
						Aliases: []string{"dest-port"},
						Usage:   "set destination port",
					},
					&cli.StringFlag{
						Name:  "action",
						Usage: "set action[allow/deny]",
						Value: "deny",
					},
					&cli.BoolFlag{
						Name:  "enable-logging",
						Usage: "enable logging",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set description",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterFirewallUpdateParam.ParamTemplate = c.String("param-template")
					vpcRouterFirewallUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterFirewallUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewFirewallUpdateVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterFirewallUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("interface") {
						vpcRouterFirewallUpdateParam.Interface = c.Int("interface")
					}
					if c.IsSet("direction") {
						vpcRouterFirewallUpdateParam.Direction = c.String("direction")
					}
					if c.IsSet("index") {
						vpcRouterFirewallUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("protocol") {
						vpcRouterFirewallUpdateParam.Protocol = c.String("protocol")
					}
					if c.IsSet("source-network") {
						vpcRouterFirewallUpdateParam.SourceNetwork = c.String("source-network")
					}
					if c.IsSet("source-port") {
						vpcRouterFirewallUpdateParam.SourcePort = c.Int("source-port")
					}
					if c.IsSet("destination-network") {
						vpcRouterFirewallUpdateParam.DestinationNetwork = c.String("destination-network")
					}
					if c.IsSet("destination-port") {
						vpcRouterFirewallUpdateParam.DestinationPort = c.Int("destination-port")
					}
					if c.IsSet("action") {
						vpcRouterFirewallUpdateParam.Action = c.String("action")
					}
					if c.IsSet("enable-logging") {
						vpcRouterFirewallUpdateParam.EnableLogging = c.Bool("enable-logging")
					}
					if c.IsSet("description") {
						vpcRouterFirewallUpdateParam.Description = c.String("description")
					}
					if c.IsSet("selector") {
						vpcRouterFirewallUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterFirewallUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterFirewallUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterFirewallUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterFirewallUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterFirewallUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterFirewallUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterFirewallUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterFirewallUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterFirewallUpdateParam.GenerateSkeleton {
						vpcRouterFirewallUpdateParam.GenerateSkeleton = false
						vpcRouterFirewallUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterFirewallUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterFirewallUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterFirewallUpdateParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterFirewallUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterFirewallUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterFirewallUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterFirewallUpdateParam.Selector) == 0 || hasTags(&v, vpcRouterFirewallUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterFirewallUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("firewall-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterFirewallUpdateParam.SetId(id)
						p := *vpcRouterFirewallUpdateParam // copy struct value
						vpcRouterFirewallUpdateParam := &p
						go func() {
							err := funcs.VPCRouterFirewallUpdate(ctx, vpcRouterFirewallUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "firewall-delete",
				Usage:     "Delete firewall rule",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "interface",
						Usage: "set target NIC index",
						Value: 0,
					},
					&cli.StringFlag{
						Name:  "direction",
						Usage: "[Required] set target direction[send/receive]",
						Value: "receive",
					},
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target Firewall rule",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterFirewallDeleteParam.ParamTemplate = c.String("param-template")
					vpcRouterFirewallDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterFirewallDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewFirewallDeleteVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterFirewallDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("interface") {
						vpcRouterFirewallDeleteParam.Interface = c.Int("interface")
					}
					if c.IsSet("direction") {
						vpcRouterFirewallDeleteParam.Direction = c.String("direction")
					}
					if c.IsSet("index") {
						vpcRouterFirewallDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						vpcRouterFirewallDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterFirewallDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterFirewallDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterFirewallDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterFirewallDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterFirewallDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterFirewallDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterFirewallDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterFirewallDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterFirewallDeleteParam.GenerateSkeleton {
						vpcRouterFirewallDeleteParam.GenerateSkeleton = false
						vpcRouterFirewallDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterFirewallDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterFirewallDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterFirewallDeleteParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterFirewallDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterFirewallDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterFirewallDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterFirewallDeleteParam.Selector) == 0 || hasTags(&v, vpcRouterFirewallDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterFirewallDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("firewall-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterFirewallDeleteParam.SetId(id)
						p := *vpcRouterFirewallDeleteParam // copy struct value
						vpcRouterFirewallDeleteParam := &p
						go func() {
							err := funcs.VPCRouterFirewallDelete(ctx, vpcRouterFirewallDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "dhcp-server-info",
				Aliases:   []string{"dhcp-server-list"},
				Usage:     "Show information of DHCP servers",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterDhcpServerInfoParam.ParamTemplate = c.String("param-template")
					vpcRouterDhcpServerInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterDhcpServerInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDhcpServerInfoVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterDhcpServerInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcRouterDhcpServerInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcRouterDhcpServerInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterDhcpServerInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterDhcpServerInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterDhcpServerInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterDhcpServerInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcRouterDhcpServerInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcRouterDhcpServerInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcRouterDhcpServerInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcRouterDhcpServerInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcRouterDhcpServerInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcRouterDhcpServerInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcRouterDhcpServerInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcRouterDhcpServerInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterDhcpServerInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterDhcpServerInfoParam.GenerateSkeleton {
						vpcRouterDhcpServerInfoParam.GenerateSkeleton = false
						vpcRouterDhcpServerInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterDhcpServerInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterDhcpServerInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterDhcpServerInfoParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterDhcpServerInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterDhcpServerInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterDhcpServerInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterDhcpServerInfoParam.Selector) == 0 || hasTags(&v, vpcRouterDhcpServerInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterDhcpServerInfoParam.SetId(id)
						p := *vpcRouterDhcpServerInfoParam // copy struct value
						vpcRouterDhcpServerInfoParam := &p
						go func() {
							err := funcs.VPCRouterDhcpServerInfo(ctx, vpcRouterDhcpServerInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "dhcp-server-add",
				Usage:     "Add DHCP server",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "interface",
						Usage: "[Required] set target NIC(private NIC index)",
					},
					&cli.StringFlag{
						Name:  "range-start",
						Usage: "[Required] set DHCP IPAddress Range(start)",
					},
					&cli.StringFlag{
						Name:    "range-stop",
						Aliases: []string{"range-end"},
						Usage:   "[Required] set DHCP IPAddress Range(stop)",
					},
					&cli.StringSliceFlag{
						Name:  "dns-servers",
						Usage: "set DNS Server IPAddress",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterDhcpServerAddParam.ParamTemplate = c.String("param-template")
					vpcRouterDhcpServerAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterDhcpServerAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDhcpServerAddVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterDhcpServerAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("interface") {
						vpcRouterDhcpServerAddParam.Interface = c.Int("interface")
					}
					if c.IsSet("range-start") {
						vpcRouterDhcpServerAddParam.RangeStart = c.String("range-start")
					}
					if c.IsSet("range-stop") {
						vpcRouterDhcpServerAddParam.RangeStop = c.String("range-stop")
					}
					if c.IsSet("dns-servers") {
						vpcRouterDhcpServerAddParam.DNSServers = c.StringSlice("dns-servers")
					}
					if c.IsSet("selector") {
						vpcRouterDhcpServerAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterDhcpServerAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterDhcpServerAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterDhcpServerAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterDhcpServerAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterDhcpServerAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterDhcpServerAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterDhcpServerAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterDhcpServerAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterDhcpServerAddParam.GenerateSkeleton {
						vpcRouterDhcpServerAddParam.GenerateSkeleton = false
						vpcRouterDhcpServerAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterDhcpServerAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterDhcpServerAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterDhcpServerAddParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterDhcpServerAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterDhcpServerAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterDhcpServerAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterDhcpServerAddParam.Selector) == 0 || hasTags(&v, vpcRouterDhcpServerAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterDhcpServerAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("dhcp-server-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterDhcpServerAddParam.SetId(id)
						p := *vpcRouterDhcpServerAddParam // copy struct value
						vpcRouterDhcpServerAddParam := &p
						go func() {
							err := funcs.VPCRouterDhcpServerAdd(ctx, vpcRouterDhcpServerAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "dhcp-server-update",
				Usage:     "Update DHCP server",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "interface",
						Usage: "[Required] set target NIC(private NIC index)",
					},
					&cli.StringFlag{
						Name:  "range-start",
						Usage: "set DHCP IPAddress Range(start)",
					},
					&cli.StringFlag{
						Name:    "range-stop",
						Aliases: []string{"range-end"},
						Usage:   "set DHCP IPAddress Range(stop)",
					},
					&cli.StringSliceFlag{
						Name:  "dns-servers",
						Usage: "set DNS Server IPAddress",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterDhcpServerUpdateParam.ParamTemplate = c.String("param-template")
					vpcRouterDhcpServerUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterDhcpServerUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDhcpServerUpdateVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterDhcpServerUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("interface") {
						vpcRouterDhcpServerUpdateParam.Interface = c.Int("interface")
					}
					if c.IsSet("range-start") {
						vpcRouterDhcpServerUpdateParam.RangeStart = c.String("range-start")
					}
					if c.IsSet("range-stop") {
						vpcRouterDhcpServerUpdateParam.RangeStop = c.String("range-stop")
					}
					if c.IsSet("dns-servers") {
						vpcRouterDhcpServerUpdateParam.DNSServers = c.StringSlice("dns-servers")
					}
					if c.IsSet("selector") {
						vpcRouterDhcpServerUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterDhcpServerUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterDhcpServerUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterDhcpServerUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterDhcpServerUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterDhcpServerUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterDhcpServerUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterDhcpServerUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterDhcpServerUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterDhcpServerUpdateParam.GenerateSkeleton {
						vpcRouterDhcpServerUpdateParam.GenerateSkeleton = false
						vpcRouterDhcpServerUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterDhcpServerUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterDhcpServerUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterDhcpServerUpdateParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterDhcpServerUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterDhcpServerUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterDhcpServerUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterDhcpServerUpdateParam.Selector) == 0 || hasTags(&v, vpcRouterDhcpServerUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterDhcpServerUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("dhcp-server-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterDhcpServerUpdateParam.SetId(id)
						p := *vpcRouterDhcpServerUpdateParam // copy struct value
						vpcRouterDhcpServerUpdateParam := &p
						go func() {
							err := funcs.VPCRouterDhcpServerUpdate(ctx, vpcRouterDhcpServerUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "dhcp-server-delete",
				Usage:     "Delete DHCP server",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "interface",
						Usage: "[Required] set target NIC(private NIC index)",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterDhcpServerDeleteParam.ParamTemplate = c.String("param-template")
					vpcRouterDhcpServerDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterDhcpServerDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDhcpServerDeleteVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterDhcpServerDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("interface") {
						vpcRouterDhcpServerDeleteParam.Interface = c.Int("interface")
					}
					if c.IsSet("selector") {
						vpcRouterDhcpServerDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterDhcpServerDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterDhcpServerDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterDhcpServerDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterDhcpServerDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterDhcpServerDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterDhcpServerDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterDhcpServerDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterDhcpServerDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterDhcpServerDeleteParam.GenerateSkeleton {
						vpcRouterDhcpServerDeleteParam.GenerateSkeleton = false
						vpcRouterDhcpServerDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterDhcpServerDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterDhcpServerDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterDhcpServerDeleteParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterDhcpServerDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterDhcpServerDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterDhcpServerDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterDhcpServerDeleteParam.Selector) == 0 || hasTags(&v, vpcRouterDhcpServerDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterDhcpServerDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("dhcp-server-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterDhcpServerDeleteParam.SetId(id)
						p := *vpcRouterDhcpServerDeleteParam // copy struct value
						vpcRouterDhcpServerDeleteParam := &p
						go func() {
							err := funcs.VPCRouterDhcpServerDelete(ctx, vpcRouterDhcpServerDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "dhcp-static-mapping-info",
				Aliases:   []string{"dhcp-static-mapping-list"},
				Usage:     "Show information of DHCP static mapping",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterDhcpStaticMappingInfoParam.ParamTemplate = c.String("param-template")
					vpcRouterDhcpStaticMappingInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterDhcpStaticMappingInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDhcpStaticMappingInfoVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterDhcpStaticMappingInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcRouterDhcpStaticMappingInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcRouterDhcpStaticMappingInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterDhcpStaticMappingInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterDhcpStaticMappingInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterDhcpStaticMappingInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterDhcpStaticMappingInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcRouterDhcpStaticMappingInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcRouterDhcpStaticMappingInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcRouterDhcpStaticMappingInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcRouterDhcpStaticMappingInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcRouterDhcpStaticMappingInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcRouterDhcpStaticMappingInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcRouterDhcpStaticMappingInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcRouterDhcpStaticMappingInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterDhcpStaticMappingInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterDhcpStaticMappingInfoParam.GenerateSkeleton {
						vpcRouterDhcpStaticMappingInfoParam.GenerateSkeleton = false
						vpcRouterDhcpStaticMappingInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterDhcpStaticMappingInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterDhcpStaticMappingInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterDhcpStaticMappingInfoParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterDhcpStaticMappingInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterDhcpStaticMappingInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterDhcpStaticMappingInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterDhcpStaticMappingInfoParam.Selector) == 0 || hasTags(&v, vpcRouterDhcpStaticMappingInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterDhcpStaticMappingInfoParam.SetId(id)
						p := *vpcRouterDhcpStaticMappingInfoParam // copy struct value
						vpcRouterDhcpStaticMappingInfoParam := &p
						go func() {
							err := funcs.VPCRouterDhcpStaticMappingInfo(ctx, vpcRouterDhcpStaticMappingInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "dhcp-static-mapping-add",
				Usage:     "Add DHCP static mapping",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "macaddress",
						Aliases: []string{"mac"},
						Usage:   "[Required] set mac address",
					},
					&cli.StringFlag{
						Name:    "ipaddress",
						Aliases: []string{"ip"},
						Usage:   "[Required] set ipaddress",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterDhcpStaticMappingAddParam.ParamTemplate = c.String("param-template")
					vpcRouterDhcpStaticMappingAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterDhcpStaticMappingAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDhcpStaticMappingAddVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterDhcpStaticMappingAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("macaddress") {
						vpcRouterDhcpStaticMappingAddParam.Macaddress = c.String("macaddress")
					}
					if c.IsSet("ipaddress") {
						vpcRouterDhcpStaticMappingAddParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("selector") {
						vpcRouterDhcpStaticMappingAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterDhcpStaticMappingAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterDhcpStaticMappingAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterDhcpStaticMappingAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterDhcpStaticMappingAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterDhcpStaticMappingAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterDhcpStaticMappingAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterDhcpStaticMappingAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterDhcpStaticMappingAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterDhcpStaticMappingAddParam.GenerateSkeleton {
						vpcRouterDhcpStaticMappingAddParam.GenerateSkeleton = false
						vpcRouterDhcpStaticMappingAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterDhcpStaticMappingAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterDhcpStaticMappingAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterDhcpStaticMappingAddParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterDhcpStaticMappingAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterDhcpStaticMappingAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterDhcpStaticMappingAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterDhcpStaticMappingAddParam.Selector) == 0 || hasTags(&v, vpcRouterDhcpStaticMappingAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterDhcpStaticMappingAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("dhcp-static-mapping-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterDhcpStaticMappingAddParam.SetId(id)
						p := *vpcRouterDhcpStaticMappingAddParam // copy struct value
						vpcRouterDhcpStaticMappingAddParam := &p
						go func() {
							err := funcs.VPCRouterDhcpStaticMappingAdd(ctx, vpcRouterDhcpStaticMappingAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "dhcp-static-mapping-update",
				Usage:     "Update DHCP static mapping",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target DHCP static mapping",
					},
					&cli.StringFlag{
						Name:    "macaddress",
						Aliases: []string{"mac"},
						Usage:   "set mac address",
					},
					&cli.StringFlag{
						Name:    "ipaddress",
						Aliases: []string{"ip"},
						Usage:   "set ipaddress",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterDhcpStaticMappingUpdateParam.ParamTemplate = c.String("param-template")
					vpcRouterDhcpStaticMappingUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterDhcpStaticMappingUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDhcpStaticMappingUpdateVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterDhcpStaticMappingUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcRouterDhcpStaticMappingUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("macaddress") {
						vpcRouterDhcpStaticMappingUpdateParam.Macaddress = c.String("macaddress")
					}
					if c.IsSet("ipaddress") {
						vpcRouterDhcpStaticMappingUpdateParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("selector") {
						vpcRouterDhcpStaticMappingUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterDhcpStaticMappingUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterDhcpStaticMappingUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterDhcpStaticMappingUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterDhcpStaticMappingUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterDhcpStaticMappingUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterDhcpStaticMappingUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterDhcpStaticMappingUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterDhcpStaticMappingUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterDhcpStaticMappingUpdateParam.GenerateSkeleton {
						vpcRouterDhcpStaticMappingUpdateParam.GenerateSkeleton = false
						vpcRouterDhcpStaticMappingUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterDhcpStaticMappingUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterDhcpStaticMappingUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterDhcpStaticMappingUpdateParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterDhcpStaticMappingUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterDhcpStaticMappingUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterDhcpStaticMappingUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterDhcpStaticMappingUpdateParam.Selector) == 0 || hasTags(&v, vpcRouterDhcpStaticMappingUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterDhcpStaticMappingUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("dhcp-static-mapping-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterDhcpStaticMappingUpdateParam.SetId(id)
						p := *vpcRouterDhcpStaticMappingUpdateParam // copy struct value
						vpcRouterDhcpStaticMappingUpdateParam := &p
						go func() {
							err := funcs.VPCRouterDhcpStaticMappingUpdate(ctx, vpcRouterDhcpStaticMappingUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "dhcp-static-mapping-delete",
				Usage:     "Delete DHCP static mapping",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target DHCP static mapping",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterDhcpStaticMappingDeleteParam.ParamTemplate = c.String("param-template")
					vpcRouterDhcpStaticMappingDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterDhcpStaticMappingDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDhcpStaticMappingDeleteVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterDhcpStaticMappingDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcRouterDhcpStaticMappingDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						vpcRouterDhcpStaticMappingDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterDhcpStaticMappingDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterDhcpStaticMappingDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterDhcpStaticMappingDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterDhcpStaticMappingDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterDhcpStaticMappingDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterDhcpStaticMappingDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterDhcpStaticMappingDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterDhcpStaticMappingDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterDhcpStaticMappingDeleteParam.GenerateSkeleton {
						vpcRouterDhcpStaticMappingDeleteParam.GenerateSkeleton = false
						vpcRouterDhcpStaticMappingDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterDhcpStaticMappingDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterDhcpStaticMappingDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterDhcpStaticMappingDeleteParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterDhcpStaticMappingDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterDhcpStaticMappingDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterDhcpStaticMappingDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterDhcpStaticMappingDeleteParam.Selector) == 0 || hasTags(&v, vpcRouterDhcpStaticMappingDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterDhcpStaticMappingDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("dhcp-static-mapping-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterDhcpStaticMappingDeleteParam.SetId(id)
						p := *vpcRouterDhcpStaticMappingDeleteParam // copy struct value
						vpcRouterDhcpStaticMappingDeleteParam := &p
						go func() {
							err := funcs.VPCRouterDhcpStaticMappingDelete(ctx, vpcRouterDhcpStaticMappingDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "pptp-server-info",
				Usage:     "Show information of PPTP server",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterPptpServerInfoParam.ParamTemplate = c.String("param-template")
					vpcRouterPptpServerInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterPptpServerInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewPptpServerInfoVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterPptpServerInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcRouterPptpServerInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcRouterPptpServerInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterPptpServerInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterPptpServerInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterPptpServerInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterPptpServerInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcRouterPptpServerInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcRouterPptpServerInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcRouterPptpServerInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcRouterPptpServerInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcRouterPptpServerInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcRouterPptpServerInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcRouterPptpServerInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcRouterPptpServerInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterPptpServerInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterPptpServerInfoParam.GenerateSkeleton {
						vpcRouterPptpServerInfoParam.GenerateSkeleton = false
						vpcRouterPptpServerInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterPptpServerInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterPptpServerInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterPptpServerInfoParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterPptpServerInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterPptpServerInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterPptpServerInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterPptpServerInfoParam.Selector) == 0 || hasTags(&v, vpcRouterPptpServerInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterPptpServerInfoParam.SetId(id)
						p := *vpcRouterPptpServerInfoParam // copy struct value
						vpcRouterPptpServerInfoParam := &p
						go func() {
							err := funcs.VPCRouterPptpServerInfo(ctx, vpcRouterPptpServerInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "pptp-server-update",
				Usage:     "Update PPTP server setting",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:  "disabled",
						Usage: "enable/disable PPTP server",
					},
					&cli.StringFlag{
						Name:  "range-start",
						Usage: "set IPAddress Range(start)",
					},
					&cli.StringFlag{
						Name:    "range-stop",
						Aliases: []string{"range-end"},
						Usage:   "set IPAddress Range(stop)",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterPptpServerUpdateParam.ParamTemplate = c.String("param-template")
					vpcRouterPptpServerUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterPptpServerUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewPptpServerUpdateVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterPptpServerUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("disabled") {
						vpcRouterPptpServerUpdateParam.Disabled = c.Bool("disabled")
					}
					if c.IsSet("range-start") {
						vpcRouterPptpServerUpdateParam.RangeStart = c.String("range-start")
					}
					if c.IsSet("range-stop") {
						vpcRouterPptpServerUpdateParam.RangeStop = c.String("range-stop")
					}
					if c.IsSet("selector") {
						vpcRouterPptpServerUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterPptpServerUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterPptpServerUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterPptpServerUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterPptpServerUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterPptpServerUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterPptpServerUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterPptpServerUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterPptpServerUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterPptpServerUpdateParam.GenerateSkeleton {
						vpcRouterPptpServerUpdateParam.GenerateSkeleton = false
						vpcRouterPptpServerUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterPptpServerUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterPptpServerUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterPptpServerUpdateParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterPptpServerUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterPptpServerUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterPptpServerUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterPptpServerUpdateParam.Selector) == 0 || hasTags(&v, vpcRouterPptpServerUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterPptpServerUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("pptp-server-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterPptpServerUpdateParam.SetId(id)
						p := *vpcRouterPptpServerUpdateParam // copy struct value
						vpcRouterPptpServerUpdateParam := &p
						go func() {
							err := funcs.VPCRouterPptpServerUpdate(ctx, vpcRouterPptpServerUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "l2tp-server-info",
				Usage:     "Show information of L2TP/IPSec server",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterL2TPServerInfoParam.ParamTemplate = c.String("param-template")
					vpcRouterL2TPServerInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterL2TPServerInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewL2TPServerInfoVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterL2TPServerInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcRouterL2TPServerInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcRouterL2TPServerInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterL2TPServerInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterL2TPServerInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterL2TPServerInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterL2TPServerInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcRouterL2TPServerInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcRouterL2TPServerInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcRouterL2TPServerInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcRouterL2TPServerInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcRouterL2TPServerInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcRouterL2TPServerInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcRouterL2TPServerInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcRouterL2TPServerInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterL2TPServerInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterL2TPServerInfoParam.GenerateSkeleton {
						vpcRouterL2TPServerInfoParam.GenerateSkeleton = false
						vpcRouterL2TPServerInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterL2TPServerInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterL2TPServerInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterL2TPServerInfoParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterL2TPServerInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterL2TPServerInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterL2TPServerInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterL2TPServerInfoParam.Selector) == 0 || hasTags(&v, vpcRouterL2TPServerInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterL2TPServerInfoParam.SetId(id)
						p := *vpcRouterL2TPServerInfoParam // copy struct value
						vpcRouterL2TPServerInfoParam := &p
						go func() {
							err := funcs.VPCRouterL2TPServerInfo(ctx, vpcRouterL2TPServerInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "l2tp-server-update",
				Usage:     "Update L2TP/IPSec server setting",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:  "disabled",
						Usage: "enable/disable PPTP server",
					},
					&cli.StringFlag{
						Name:  "range-start",
						Usage: "set IPAddress Range(start)",
					},
					&cli.StringFlag{
						Name:    "range-stop",
						Aliases: []string{"range-end"},
						Usage:   "set IPAddress Range(stop)",
					},
					&cli.StringFlag{
						Name:  "pre-shared-secret",
						Usage: "set PreSharedSecret",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterL2TPServerUpdateParam.ParamTemplate = c.String("param-template")
					vpcRouterL2TPServerUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterL2TPServerUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewL2TPServerUpdateVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterL2TPServerUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("disabled") {
						vpcRouterL2TPServerUpdateParam.Disabled = c.Bool("disabled")
					}
					if c.IsSet("range-start") {
						vpcRouterL2TPServerUpdateParam.RangeStart = c.String("range-start")
					}
					if c.IsSet("range-stop") {
						vpcRouterL2TPServerUpdateParam.RangeStop = c.String("range-stop")
					}
					if c.IsSet("pre-shared-secret") {
						vpcRouterL2TPServerUpdateParam.PreSharedSecret = c.String("pre-shared-secret")
					}
					if c.IsSet("selector") {
						vpcRouterL2TPServerUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterL2TPServerUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterL2TPServerUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterL2TPServerUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterL2TPServerUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterL2TPServerUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterL2TPServerUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterL2TPServerUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterL2TPServerUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterL2TPServerUpdateParam.GenerateSkeleton {
						vpcRouterL2TPServerUpdateParam.GenerateSkeleton = false
						vpcRouterL2TPServerUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterL2TPServerUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterL2TPServerUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterL2TPServerUpdateParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterL2TPServerUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterL2TPServerUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterL2TPServerUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterL2TPServerUpdateParam.Selector) == 0 || hasTags(&v, vpcRouterL2TPServerUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterL2TPServerUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("l2tp-server-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterL2TPServerUpdateParam.SetId(id)
						p := *vpcRouterL2TPServerUpdateParam // copy struct value
						vpcRouterL2TPServerUpdateParam := &p
						go func() {
							err := funcs.VPCRouterL2TPServerUpdate(ctx, vpcRouterL2TPServerUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "user-info",
				Aliases:   []string{"user-list"},
				Usage:     "Show information of remote-access users",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterUserInfoParam.ParamTemplate = c.String("param-template")
					vpcRouterUserInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterUserInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewUserInfoVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterUserInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcRouterUserInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcRouterUserInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterUserInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterUserInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterUserInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterUserInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcRouterUserInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcRouterUserInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcRouterUserInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcRouterUserInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcRouterUserInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcRouterUserInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcRouterUserInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcRouterUserInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterUserInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterUserInfoParam.GenerateSkeleton {
						vpcRouterUserInfoParam.GenerateSkeleton = false
						vpcRouterUserInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterUserInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterUserInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterUserInfoParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterUserInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterUserInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterUserInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterUserInfoParam.Selector) == 0 || hasTags(&v, vpcRouterUserInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterUserInfoParam.SetId(id)
						p := *vpcRouterUserInfoParam // copy struct value
						vpcRouterUserInfoParam := &p
						go func() {
							err := funcs.VPCRouterUserInfo(ctx, vpcRouterUserInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "user-add",
				Usage:     "Add remote-access user",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "username",
						Aliases: []string{"user"},
						Usage:   "[Required] set remote-access username",
					},
					&cli.StringFlag{
						Name:    "password",
						Aliases: []string{"pass"},
						Usage:   "[Required] set remote-access password",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterUserAddParam.ParamTemplate = c.String("param-template")
					vpcRouterUserAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterUserAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewUserAddVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterUserAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("username") {
						vpcRouterUserAddParam.Username = c.String("username")
					}
					if c.IsSet("password") {
						vpcRouterUserAddParam.Password = c.String("password")
					}
					if c.IsSet("selector") {
						vpcRouterUserAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterUserAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterUserAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterUserAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterUserAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterUserAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterUserAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterUserAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterUserAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterUserAddParam.GenerateSkeleton {
						vpcRouterUserAddParam.GenerateSkeleton = false
						vpcRouterUserAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterUserAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterUserAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterUserAddParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterUserAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterUserAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterUserAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterUserAddParam.Selector) == 0 || hasTags(&v, vpcRouterUserAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterUserAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("user-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterUserAddParam.SetId(id)
						p := *vpcRouterUserAddParam // copy struct value
						vpcRouterUserAddParam := &p
						go func() {
							err := funcs.VPCRouterUserAdd(ctx, vpcRouterUserAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "user-update",
				Usage:     "Update remote-access user",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target remote-access user",
					},
					&cli.StringFlag{
						Name:    "username",
						Aliases: []string{"user"},
						Usage:   "set remote-access username",
					},
					&cli.StringFlag{
						Name:    "password",
						Aliases: []string{"pass"},
						Usage:   "set remote-access password",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterUserUpdateParam.ParamTemplate = c.String("param-template")
					vpcRouterUserUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterUserUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewUserUpdateVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterUserUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcRouterUserUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("username") {
						vpcRouterUserUpdateParam.Username = c.String("username")
					}
					if c.IsSet("password") {
						vpcRouterUserUpdateParam.Password = c.String("password")
					}
					if c.IsSet("selector") {
						vpcRouterUserUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterUserUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterUserUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterUserUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterUserUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterUserUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterUserUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterUserUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterUserUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterUserUpdateParam.GenerateSkeleton {
						vpcRouterUserUpdateParam.GenerateSkeleton = false
						vpcRouterUserUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterUserUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterUserUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterUserUpdateParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterUserUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterUserUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterUserUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterUserUpdateParam.Selector) == 0 || hasTags(&v, vpcRouterUserUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterUserUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("user-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterUserUpdateParam.SetId(id)
						p := *vpcRouterUserUpdateParam // copy struct value
						vpcRouterUserUpdateParam := &p
						go func() {
							err := funcs.VPCRouterUserUpdate(ctx, vpcRouterUserUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "user-delete",
				Usage:     "Delete remote-access user",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target remote-access user",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterUserDeleteParam.ParamTemplate = c.String("param-template")
					vpcRouterUserDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterUserDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewUserDeleteVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterUserDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcRouterUserDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						vpcRouterUserDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterUserDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterUserDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterUserDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterUserDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterUserDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterUserDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterUserDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterUserDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterUserDeleteParam.GenerateSkeleton {
						vpcRouterUserDeleteParam.GenerateSkeleton = false
						vpcRouterUserDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterUserDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterUserDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterUserDeleteParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterUserDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterUserDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterUserDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterUserDeleteParam.Selector) == 0 || hasTags(&v, vpcRouterUserDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterUserDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("user-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterUserDeleteParam.SetId(id)
						p := *vpcRouterUserDeleteParam // copy struct value
						vpcRouterUserDeleteParam := &p
						go func() {
							err := funcs.VPCRouterUserDelete(ctx, vpcRouterUserDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "site-to-site-vpn-info",
				Aliases:   []string{"site-to-site-vpn-list"},
				Usage:     "Show information of site-to-site IPSec VPN settings",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterSiteToSiteVPNInfoParam.ParamTemplate = c.String("param-template")
					vpcRouterSiteToSiteVPNInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterSiteToSiteVPNInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSiteToSiteVPNInfoVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterSiteToSiteVPNInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcRouterSiteToSiteVPNInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcRouterSiteToSiteVPNInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterSiteToSiteVPNInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterSiteToSiteVPNInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterSiteToSiteVPNInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterSiteToSiteVPNInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcRouterSiteToSiteVPNInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcRouterSiteToSiteVPNInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcRouterSiteToSiteVPNInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcRouterSiteToSiteVPNInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcRouterSiteToSiteVPNInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcRouterSiteToSiteVPNInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcRouterSiteToSiteVPNInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcRouterSiteToSiteVPNInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterSiteToSiteVPNInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterSiteToSiteVPNInfoParam.GenerateSkeleton {
						vpcRouterSiteToSiteVPNInfoParam.GenerateSkeleton = false
						vpcRouterSiteToSiteVPNInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterSiteToSiteVPNInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterSiteToSiteVPNInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterSiteToSiteVPNInfoParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterSiteToSiteVPNInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterSiteToSiteVPNInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterSiteToSiteVPNInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterSiteToSiteVPNInfoParam.Selector) == 0 || hasTags(&v, vpcRouterSiteToSiteVPNInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterSiteToSiteVPNInfoParam.SetId(id)
						p := *vpcRouterSiteToSiteVPNInfoParam // copy struct value
						vpcRouterSiteToSiteVPNInfoParam := &p
						go func() {
							err := funcs.VPCRouterSiteToSiteVPNInfo(ctx, vpcRouterSiteToSiteVPNInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "site-to-site-vpn-add",
				Usage:     "Add site-to-site IPSec VPN setting",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "peer",
						Usage: "[Required] set peer address",
					},
					&cli.StringFlag{
						Name:  "remote-id",
						Usage: "[Required] set remote-id",
					},
					&cli.StringFlag{
						Name:  "pre-shared-secret",
						Usage: "[Required] set pre-shared-secret",
					},
					&cli.StringSliceFlag{
						Name:  "routes",
						Usage: "[Required] set route list",
					},
					&cli.StringSliceFlag{
						Name:  "local-prefix",
						Usage: "[Required] set local prefix list",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterSiteToSiteVPNAddParam.ParamTemplate = c.String("param-template")
					vpcRouterSiteToSiteVPNAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterSiteToSiteVPNAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSiteToSiteVPNAddVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterSiteToSiteVPNAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("peer") {
						vpcRouterSiteToSiteVPNAddParam.Peer = c.String("peer")
					}
					if c.IsSet("remote-id") {
						vpcRouterSiteToSiteVPNAddParam.RemoteId = c.String("remote-id")
					}
					if c.IsSet("pre-shared-secret") {
						vpcRouterSiteToSiteVPNAddParam.PreSharedSecret = c.String("pre-shared-secret")
					}
					if c.IsSet("routes") {
						vpcRouterSiteToSiteVPNAddParam.Routes = c.StringSlice("routes")
					}
					if c.IsSet("local-prefix") {
						vpcRouterSiteToSiteVPNAddParam.LocalPrefix = c.StringSlice("local-prefix")
					}
					if c.IsSet("selector") {
						vpcRouterSiteToSiteVPNAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterSiteToSiteVPNAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterSiteToSiteVPNAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterSiteToSiteVPNAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterSiteToSiteVPNAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterSiteToSiteVPNAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterSiteToSiteVPNAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterSiteToSiteVPNAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterSiteToSiteVPNAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterSiteToSiteVPNAddParam.GenerateSkeleton {
						vpcRouterSiteToSiteVPNAddParam.GenerateSkeleton = false
						vpcRouterSiteToSiteVPNAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterSiteToSiteVPNAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterSiteToSiteVPNAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterSiteToSiteVPNAddParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterSiteToSiteVPNAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterSiteToSiteVPNAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterSiteToSiteVPNAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterSiteToSiteVPNAddParam.Selector) == 0 || hasTags(&v, vpcRouterSiteToSiteVPNAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterSiteToSiteVPNAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("site-to-site-vpn-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterSiteToSiteVPNAddParam.SetId(id)
						p := *vpcRouterSiteToSiteVPNAddParam // copy struct value
						vpcRouterSiteToSiteVPNAddParam := &p
						go func() {
							err := funcs.VPCRouterSiteToSiteVPNAdd(ctx, vpcRouterSiteToSiteVPNAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "site-to-site-vpn-update",
				Usage:     "Update site-to-site IPSec VPN setting",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target remote-access user",
					},
					&cli.StringFlag{
						Name:  "peer",
						Usage: "set peer address",
					},
					&cli.StringFlag{
						Name:  "remote-id",
						Usage: "set remote-id",
					},
					&cli.StringFlag{
						Name:  "pre-shared-secret",
						Usage: "set pre-shared-secret",
					},
					&cli.StringSliceFlag{
						Name:  "routes",
						Usage: "set route list",
					},
					&cli.StringSliceFlag{
						Name:  "local-prefix",
						Usage: "set local prefix list",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterSiteToSiteVPNUpdateParam.ParamTemplate = c.String("param-template")
					vpcRouterSiteToSiteVPNUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterSiteToSiteVPNUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSiteToSiteVPNUpdateVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterSiteToSiteVPNUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcRouterSiteToSiteVPNUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("peer") {
						vpcRouterSiteToSiteVPNUpdateParam.Peer = c.String("peer")
					}
					if c.IsSet("remote-id") {
						vpcRouterSiteToSiteVPNUpdateParam.RemoteId = c.String("remote-id")
					}
					if c.IsSet("pre-shared-secret") {
						vpcRouterSiteToSiteVPNUpdateParam.PreSharedSecret = c.String("pre-shared-secret")
					}
					if c.IsSet("routes") {
						vpcRouterSiteToSiteVPNUpdateParam.Routes = c.StringSlice("routes")
					}
					if c.IsSet("local-prefix") {
						vpcRouterSiteToSiteVPNUpdateParam.LocalPrefix = c.StringSlice("local-prefix")
					}
					if c.IsSet("selector") {
						vpcRouterSiteToSiteVPNUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterSiteToSiteVPNUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterSiteToSiteVPNUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterSiteToSiteVPNUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterSiteToSiteVPNUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterSiteToSiteVPNUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterSiteToSiteVPNUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterSiteToSiteVPNUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterSiteToSiteVPNUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterSiteToSiteVPNUpdateParam.GenerateSkeleton {
						vpcRouterSiteToSiteVPNUpdateParam.GenerateSkeleton = false
						vpcRouterSiteToSiteVPNUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterSiteToSiteVPNUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterSiteToSiteVPNUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterSiteToSiteVPNUpdateParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterSiteToSiteVPNUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterSiteToSiteVPNUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterSiteToSiteVPNUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterSiteToSiteVPNUpdateParam.Selector) == 0 || hasTags(&v, vpcRouterSiteToSiteVPNUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterSiteToSiteVPNUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("site-to-site-vpn-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterSiteToSiteVPNUpdateParam.SetId(id)
						p := *vpcRouterSiteToSiteVPNUpdateParam // copy struct value
						vpcRouterSiteToSiteVPNUpdateParam := &p
						go func() {
							err := funcs.VPCRouterSiteToSiteVPNUpdate(ctx, vpcRouterSiteToSiteVPNUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "site-to-site-vpn-delete",
				Usage:     "Delete site-to-site IPSec VPN setting",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target remote-access user",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterSiteToSiteVPNDeleteParam.ParamTemplate = c.String("param-template")
					vpcRouterSiteToSiteVPNDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterSiteToSiteVPNDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSiteToSiteVPNDeleteVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterSiteToSiteVPNDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcRouterSiteToSiteVPNDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						vpcRouterSiteToSiteVPNDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterSiteToSiteVPNDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterSiteToSiteVPNDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterSiteToSiteVPNDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterSiteToSiteVPNDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterSiteToSiteVPNDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterSiteToSiteVPNDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterSiteToSiteVPNDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterSiteToSiteVPNDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterSiteToSiteVPNDeleteParam.GenerateSkeleton {
						vpcRouterSiteToSiteVPNDeleteParam.GenerateSkeleton = false
						vpcRouterSiteToSiteVPNDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterSiteToSiteVPNDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterSiteToSiteVPNDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterSiteToSiteVPNDeleteParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterSiteToSiteVPNDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterSiteToSiteVPNDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterSiteToSiteVPNDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterSiteToSiteVPNDeleteParam.Selector) == 0 || hasTags(&v, vpcRouterSiteToSiteVPNDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterSiteToSiteVPNDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("site-to-site-vpn-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterSiteToSiteVPNDeleteParam.SetId(id)
						p := *vpcRouterSiteToSiteVPNDeleteParam // copy struct value
						vpcRouterSiteToSiteVPNDeleteParam := &p
						go func() {
							err := funcs.VPCRouterSiteToSiteVPNDelete(ctx, vpcRouterSiteToSiteVPNDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "site-to-site-vpn-peers",
				Usage:     "Show status of site-to-site IPSec VPN peers",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterSiteToSiteVPNPeersParam.ParamTemplate = c.String("param-template")
					vpcRouterSiteToSiteVPNPeersParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterSiteToSiteVPNPeersParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSiteToSiteVPNPeersVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterSiteToSiteVPNPeersParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcRouterSiteToSiteVPNPeersParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcRouterSiteToSiteVPNPeersParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterSiteToSiteVPNPeersParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterSiteToSiteVPNPeersParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterSiteToSiteVPNPeersParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterSiteToSiteVPNPeersParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcRouterSiteToSiteVPNPeersParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcRouterSiteToSiteVPNPeersParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcRouterSiteToSiteVPNPeersParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcRouterSiteToSiteVPNPeersParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcRouterSiteToSiteVPNPeersParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcRouterSiteToSiteVPNPeersParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcRouterSiteToSiteVPNPeersParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcRouterSiteToSiteVPNPeersParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterSiteToSiteVPNPeersParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterSiteToSiteVPNPeersParam.GenerateSkeleton {
						vpcRouterSiteToSiteVPNPeersParam.GenerateSkeleton = false
						vpcRouterSiteToSiteVPNPeersParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterSiteToSiteVPNPeersParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterSiteToSiteVPNPeersParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterSiteToSiteVPNPeersParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterSiteToSiteVPNPeersParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterSiteToSiteVPNPeersParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterSiteToSiteVPNPeersParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterSiteToSiteVPNPeersParam.Selector) == 0 || hasTags(&v, vpcRouterSiteToSiteVPNPeersParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterSiteToSiteVPNPeersParam.SetId(id)
						p := *vpcRouterSiteToSiteVPNPeersParam // copy struct value
						vpcRouterSiteToSiteVPNPeersParam := &p
						go func() {
							err := funcs.VPCRouterSiteToSiteVPNPeers(ctx, vpcRouterSiteToSiteVPNPeersParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-route-info",
				Aliases:   []string{"static-route-list"},
				Usage:     "Show information of static-routes",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterStaticRouteInfoParam.ParamTemplate = c.String("param-template")
					vpcRouterStaticRouteInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterStaticRouteInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticRouteInfoVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterStaticRouteInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcRouterStaticRouteInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcRouterStaticRouteInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterStaticRouteInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterStaticRouteInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterStaticRouteInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterStaticRouteInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcRouterStaticRouteInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcRouterStaticRouteInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcRouterStaticRouteInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcRouterStaticRouteInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcRouterStaticRouteInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcRouterStaticRouteInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcRouterStaticRouteInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcRouterStaticRouteInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterStaticRouteInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterStaticRouteInfoParam.GenerateSkeleton {
						vpcRouterStaticRouteInfoParam.GenerateSkeleton = false
						vpcRouterStaticRouteInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterStaticRouteInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterStaticRouteInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterStaticRouteInfoParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterStaticRouteInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterStaticRouteInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterStaticRouteInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterStaticRouteInfoParam.Selector) == 0 || hasTags(&v, vpcRouterStaticRouteInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterStaticRouteInfoParam.SetId(id)
						p := *vpcRouterStaticRouteInfoParam // copy struct value
						vpcRouterStaticRouteInfoParam := &p
						go func() {
							err := funcs.VPCRouterStaticRouteInfo(ctx, vpcRouterStaticRouteInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-route-add",
				Usage:     "Add static-route",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "prefix",
						Usage: "[Required] set prefix",
					},
					&cli.StringFlag{
						Name:  "next-hop",
						Usage: "[Required] set next-hop",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterStaticRouteAddParam.ParamTemplate = c.String("param-template")
					vpcRouterStaticRouteAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterStaticRouteAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticRouteAddVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterStaticRouteAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("prefix") {
						vpcRouterStaticRouteAddParam.Prefix = c.String("prefix")
					}
					if c.IsSet("next-hop") {
						vpcRouterStaticRouteAddParam.NextHop = c.String("next-hop")
					}
					if c.IsSet("selector") {
						vpcRouterStaticRouteAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterStaticRouteAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterStaticRouteAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterStaticRouteAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterStaticRouteAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterStaticRouteAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterStaticRouteAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterStaticRouteAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterStaticRouteAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterStaticRouteAddParam.GenerateSkeleton {
						vpcRouterStaticRouteAddParam.GenerateSkeleton = false
						vpcRouterStaticRouteAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterStaticRouteAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterStaticRouteAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterStaticRouteAddParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterStaticRouteAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterStaticRouteAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterStaticRouteAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterStaticRouteAddParam.Selector) == 0 || hasTags(&v, vpcRouterStaticRouteAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterStaticRouteAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("static-route-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterStaticRouteAddParam.SetId(id)
						p := *vpcRouterStaticRouteAddParam // copy struct value
						vpcRouterStaticRouteAddParam := &p
						go func() {
							err := funcs.VPCRouterStaticRouteAdd(ctx, vpcRouterStaticRouteAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-route-update",
				Usage:     "Update static-route",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target static-route",
					},
					&cli.StringFlag{
						Name:  "prefix",
						Usage: "set prefix",
					},
					&cli.StringFlag{
						Name:  "next-hop",
						Usage: "set next-hop",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterStaticRouteUpdateParam.ParamTemplate = c.String("param-template")
					vpcRouterStaticRouteUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterStaticRouteUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticRouteUpdateVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterStaticRouteUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcRouterStaticRouteUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("prefix") {
						vpcRouterStaticRouteUpdateParam.Prefix = c.String("prefix")
					}
					if c.IsSet("next-hop") {
						vpcRouterStaticRouteUpdateParam.NextHop = c.String("next-hop")
					}
					if c.IsSet("selector") {
						vpcRouterStaticRouteUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterStaticRouteUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterStaticRouteUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterStaticRouteUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterStaticRouteUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterStaticRouteUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterStaticRouteUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterStaticRouteUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterStaticRouteUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterStaticRouteUpdateParam.GenerateSkeleton {
						vpcRouterStaticRouteUpdateParam.GenerateSkeleton = false
						vpcRouterStaticRouteUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterStaticRouteUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterStaticRouteUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterStaticRouteUpdateParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterStaticRouteUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterStaticRouteUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterStaticRouteUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterStaticRouteUpdateParam.Selector) == 0 || hasTags(&v, vpcRouterStaticRouteUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterStaticRouteUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("static-route-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterStaticRouteUpdateParam.SetId(id)
						p := *vpcRouterStaticRouteUpdateParam // copy struct value
						vpcRouterStaticRouteUpdateParam := &p
						go func() {
							err := funcs.VPCRouterStaticRouteUpdate(ctx, vpcRouterStaticRouteUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-route-delete",
				Usage:     "Delete static-route",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target static-route",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterStaticRouteDeleteParam.ParamTemplate = c.String("param-template")
					vpcRouterStaticRouteDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterStaticRouteDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticRouteDeleteVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterStaticRouteDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcRouterStaticRouteDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						vpcRouterStaticRouteDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcRouterStaticRouteDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcRouterStaticRouteDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterStaticRouteDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterStaticRouteDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterStaticRouteDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterStaticRouteDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterStaticRouteDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterStaticRouteDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterStaticRouteDeleteParam.GenerateSkeleton {
						vpcRouterStaticRouteDeleteParam.GenerateSkeleton = false
						vpcRouterStaticRouteDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterStaticRouteDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterStaticRouteDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterStaticRouteDeleteParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterStaticRouteDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterStaticRouteDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterStaticRouteDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterStaticRouteDeleteParam.Selector) == 0 || hasTags(&v, vpcRouterStaticRouteDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcRouterStaticRouteDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("static-route-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterStaticRouteDeleteParam.SetId(id)
						p := *vpcRouterStaticRouteDeleteParam // copy struct value
						vpcRouterStaticRouteDeleteParam := &p
						go func() {
							err := funcs.VPCRouterStaticRouteDelete(ctx, vpcRouterStaticRouteDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "monitor",
				Usage:     "Monitor VPCRouter",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "interface",
						Usage: "[Required] index of target interface",
						Value: "0",
					},
					&cli.StringFlag{
						Name:  "start",
						Usage: "set start-time",
					},
					&cli.StringFlag{
						Name:  "end",
						Usage: "set end-time",
					},
					&cli.StringFlag{
						Name:  "key-format",
						Usage: "[Required] set monitoring value key-format",
						Value: "sakuracloud.vpcrouter.{{.ID}}.nic.{{.Index}}",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterMonitorParam.ParamTemplate = c.String("param-template")
					vpcRouterMonitorParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterMonitorParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewMonitorVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterMonitorParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("interface") {
						vpcRouterMonitorParam.Interface = c.String("interface")
					}
					if c.IsSet("start") {
						vpcRouterMonitorParam.Start = c.String("start")
					}
					if c.IsSet("end") {
						vpcRouterMonitorParam.End = c.String("end")
					}
					if c.IsSet("key-format") {
						vpcRouterMonitorParam.KeyFormat = c.String("key-format")
					}
					if c.IsSet("selector") {
						vpcRouterMonitorParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcRouterMonitorParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterMonitorParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterMonitorParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterMonitorParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterMonitorParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcRouterMonitorParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcRouterMonitorParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcRouterMonitorParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcRouterMonitorParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcRouterMonitorParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcRouterMonitorParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcRouterMonitorParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcRouterMonitorParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterMonitorParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterMonitorParam.GenerateSkeleton {
						vpcRouterMonitorParam.GenerateSkeleton = false
						vpcRouterMonitorParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterMonitorParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterMonitorParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterMonitorParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterMonitorParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterMonitorParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterMonitorParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterMonitorParam.Selector) == 0 || hasTags(&v, vpcRouterMonitorParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterMonitorParam.SetId(id)
						p := *vpcRouterMonitorParam // copy struct value
						vpcRouterMonitorParam := &p
						go func() {
							err := funcs.VPCRouterMonitor(ctx, vpcRouterMonitorParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "logs",
				Usage:     "Logs VPCRouter",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "log-name",
						Aliases: []string{"name"},
						Usage:   "set target logfile name",
						Value:   "all",
					},
					&cli.BoolFlag{
						Name:    "follow",
						Aliases: []string{"f"},
						Usage:   "follow log output",
					},
					&cli.Int64Flag{
						Name:  "refresh-interval",
						Usage: "log refresh interval second",
						Value: 3,
					},
					&cli.BoolFlag{
						Name:  "list-log-names",
						Usage: "show log-name list",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcRouterLogsParam.ParamTemplate = c.String("param-template")
					vpcRouterLogsParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcRouterLogsParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewLogsVPCRouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcRouterLogsParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("log-name") {
						vpcRouterLogsParam.LogName = c.String("log-name")
					}
					if c.IsSet("follow") {
						vpcRouterLogsParam.Follow = c.Bool("follow")
					}
					if c.IsSet("refresh-interval") {
						vpcRouterLogsParam.RefreshInterval = c.Int64("refresh-interval")
					}
					if c.IsSet("list-log-names") {
						vpcRouterLogsParam.ListLogNames = c.Bool("list-log-names")
					}
					if c.IsSet("selector") {
						vpcRouterLogsParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcRouterLogsParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcRouterLogsParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcRouterLogsParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcRouterLogsParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcRouterLogsParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcRouterLogsParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcRouterLogsParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcRouterLogsParam.GenerateSkeleton {
						vpcRouterLogsParam.GenerateSkeleton = false
						vpcRouterLogsParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcRouterLogsParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcRouterLogsParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcRouterLogsParam)

					apiClient := ctx.GetAPIClient().VPCRouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcRouterLogsParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.VPCRouters {
							if hasTags(&v, vpcRouterLogsParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcRouterLogsParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.VPCRouters {
										if len(vpcRouterLogsParam.Selector) == 0 || hasTags(&v, vpcRouterLogsParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcRouterLogsParam.SetId(id)
						p := *vpcRouterLogsParam // copy struct value
						vpcRouterLogsParam := &p
						go func() {
							err := funcs.VPCRouterLogs(ctx, vpcRouterLogsParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
		},
	}

	// build Category-Resource mapping
	AppendResourceCategoryMap("vpc-router", &schema.Category{
		Key:         "appliance",
		DisplayName: "Appliance",
		Order:       40,
	})

	// build Category-Command mapping

	AppendCommandCategoryMap("vpc-router", "boot", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("vpc-router", "create", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("vpc-router", "delete", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("vpc-router", "dhcp-server-add", &schema.Category{
		Key:         "dhcp-server",
		DisplayName: "DHCP Server Management",
		Order:       60,
	})
	AppendCommandCategoryMap("vpc-router", "dhcp-server-delete", &schema.Category{
		Key:         "dhcp-server",
		DisplayName: "DHCP Server Management",
		Order:       60,
	})
	AppendCommandCategoryMap("vpc-router", "dhcp-server-info", &schema.Category{
		Key:         "dhcp-server",
		DisplayName: "DHCP Server Management",
		Order:       60,
	})
	AppendCommandCategoryMap("vpc-router", "dhcp-server-update", &schema.Category{
		Key:         "dhcp-server",
		DisplayName: "DHCP Server Management",
		Order:       60,
	})
	AppendCommandCategoryMap("vpc-router", "dhcp-static-mapping-add", &schema.Category{
		Key:         "dhcp-static-mapping",
		DisplayName: "DHCP Static Map Setting Management",
		Order:       65,
	})
	AppendCommandCategoryMap("vpc-router", "dhcp-static-mapping-delete", &schema.Category{
		Key:         "dhcp-static-mapping",
		DisplayName: "DHCP Static Map Setting Management",
		Order:       65,
	})
	AppendCommandCategoryMap("vpc-router", "dhcp-static-mapping-info", &schema.Category{
		Key:         "dhcp-static-mapping",
		DisplayName: "DHCP Static Map Setting Management",
		Order:       65,
	})
	AppendCommandCategoryMap("vpc-router", "dhcp-static-mapping-update", &schema.Category{
		Key:         "dhcp-static-mapping",
		DisplayName: "DHCP Static Map Setting Management",
		Order:       65,
	})
	AppendCommandCategoryMap("vpc-router", "disable-internet-connection", &schema.Category{
		Key:         "nic",
		DisplayName: "Network Interface Management",
		Order:       30,
	})
	AppendCommandCategoryMap("vpc-router", "enable-internet-connection", &schema.Category{
		Key:         "nic",
		DisplayName: "Network Interface Management",
		Order:       30,
	})
	AppendCommandCategoryMap("vpc-router", "firewall-add", &schema.Category{
		Key:         "fw",
		DisplayName: "Firewall Setting Management",
		Order:       50,
	})
	AppendCommandCategoryMap("vpc-router", "firewall-delete", &schema.Category{
		Key:         "fw",
		DisplayName: "Firewall Setting Management",
		Order:       50,
	})
	AppendCommandCategoryMap("vpc-router", "firewall-info", &schema.Category{
		Key:         "fw",
		DisplayName: "Firewall Setting Management",
		Order:       50,
	})
	AppendCommandCategoryMap("vpc-router", "firewall-update", &schema.Category{
		Key:         "fw",
		DisplayName: "Firewall Setting Management",
		Order:       50,
	})
	AppendCommandCategoryMap("vpc-router", "interface-connect", &schema.Category{
		Key:         "nic",
		DisplayName: "Network Interface Management",
		Order:       30,
	})
	AppendCommandCategoryMap("vpc-router", "interface-disconnect", &schema.Category{
		Key:         "nic",
		DisplayName: "Network Interface Management",
		Order:       30,
	})
	AppendCommandCategoryMap("vpc-router", "interface-info", &schema.Category{
		Key:         "nic",
		DisplayName: "Network Interface Management",
		Order:       30,
	})
	AppendCommandCategoryMap("vpc-router", "interface-update", &schema.Category{
		Key:         "nic",
		DisplayName: "Network Interface Management",
		Order:       30,
	})
	AppendCommandCategoryMap("vpc-router", "l2tp-server-info", &schema.Category{
		Key:         "remote-access",
		DisplayName: "RemoteAccess(VPN) Setting Management",
		Order:       70,
	})
	AppendCommandCategoryMap("vpc-router", "l2tp-server-update", &schema.Category{
		Key:         "remote-access",
		DisplayName: "RemoteAccess(VPN) Setting Management",
		Order:       70,
	})
	AppendCommandCategoryMap("vpc-router", "list", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("vpc-router", "logs", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitoring",
		Order:       500,
	})
	AppendCommandCategoryMap("vpc-router", "monitor", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitoring",
		Order:       500,
	})
	AppendCommandCategoryMap("vpc-router", "port-forwarding-add", &schema.Category{
		Key:         "rnat",
		DisplayName: "Port Forward Setting Management",
		Order:       45,
	})
	AppendCommandCategoryMap("vpc-router", "port-forwarding-delete", &schema.Category{
		Key:         "rnat",
		DisplayName: "Port Forward Setting Management",
		Order:       45,
	})
	AppendCommandCategoryMap("vpc-router", "port-forwarding-info", &schema.Category{
		Key:         "rnat",
		DisplayName: "Port Forward Setting Management",
		Order:       45,
	})
	AppendCommandCategoryMap("vpc-router", "port-forwarding-update", &schema.Category{
		Key:         "rnat",
		DisplayName: "Port Forward Setting Management",
		Order:       45,
	})
	AppendCommandCategoryMap("vpc-router", "pptp-server-info", &schema.Category{
		Key:         "remote-access",
		DisplayName: "RemoteAccess(VPN) Setting Management",
		Order:       70,
	})
	AppendCommandCategoryMap("vpc-router", "pptp-server-update", &schema.Category{
		Key:         "remote-access",
		DisplayName: "RemoteAccess(VPN) Setting Management",
		Order:       70,
	})
	AppendCommandCategoryMap("vpc-router", "read", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("vpc-router", "reset", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("vpc-router", "shutdown", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("vpc-router", "shutdown-force", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("vpc-router", "site-to-site-vpn-add", &schema.Category{
		Key:         "s2s",
		DisplayName: "Site to Site IPSec VPN Management",
		Order:       80,
	})
	AppendCommandCategoryMap("vpc-router", "site-to-site-vpn-delete", &schema.Category{
		Key:         "s2s",
		DisplayName: "Site to Site IPSec VPN Management",
		Order:       80,
	})
	AppendCommandCategoryMap("vpc-router", "site-to-site-vpn-info", &schema.Category{
		Key:         "s2s",
		DisplayName: "Site to Site IPSec VPN Management",
		Order:       80,
	})
	AppendCommandCategoryMap("vpc-router", "site-to-site-vpn-peers", &schema.Category{
		Key:         "s2s",
		DisplayName: "Site to Site IPSec VPN Management",
		Order:       80,
	})
	AppendCommandCategoryMap("vpc-router", "site-to-site-vpn-update", &schema.Category{
		Key:         "s2s",
		DisplayName: "Site to Site IPSec VPN Management",
		Order:       80,
	})
	AppendCommandCategoryMap("vpc-router", "static-nat-add", &schema.Category{
		Key:         "snat",
		DisplayName: "Static NAT Setting Management",
		Order:       40,
	})
	AppendCommandCategoryMap("vpc-router", "static-nat-delete", &schema.Category{
		Key:         "snat",
		DisplayName: "Static NAT Setting Management",
		Order:       40,
	})
	AppendCommandCategoryMap("vpc-router", "static-nat-info", &schema.Category{
		Key:         "snat",
		DisplayName: "Static NAT Setting Management",
		Order:       40,
	})
	AppendCommandCategoryMap("vpc-router", "static-nat-update", &schema.Category{
		Key:         "snat",
		DisplayName: "Static NAT Setting Management",
		Order:       40,
	})
	AppendCommandCategoryMap("vpc-router", "static-route-add", &schema.Category{
		Key:         "routing",
		DisplayName: "Static Route Management",
		Order:       90,
	})
	AppendCommandCategoryMap("vpc-router", "static-route-delete", &schema.Category{
		Key:         "routing",
		DisplayName: "Static Route Management",
		Order:       90,
	})
	AppendCommandCategoryMap("vpc-router", "static-route-info", &schema.Category{
		Key:         "routing",
		DisplayName: "Static Route Management",
		Order:       90,
	})
	AppendCommandCategoryMap("vpc-router", "static-route-update", &schema.Category{
		Key:         "routing",
		DisplayName: "Static Route Management",
		Order:       90,
	})
	AppendCommandCategoryMap("vpc-router", "update", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("vpc-router", "user-add", &schema.Category{
		Key:         "remote-access",
		DisplayName: "RemoteAccess(VPN) Setting Management",
		Order:       70,
	})
	AppendCommandCategoryMap("vpc-router", "user-delete", &schema.Category{
		Key:         "remote-access",
		DisplayName: "RemoteAccess(VPN) Setting Management",
		Order:       70,
	})
	AppendCommandCategoryMap("vpc-router", "user-info", &schema.Category{
		Key:         "remote-access",
		DisplayName: "RemoteAccess(VPN) Setting Management",
		Order:       70,
	})
	AppendCommandCategoryMap("vpc-router", "user-update", &schema.Category{
		Key:         "remote-access",
		DisplayName: "RemoteAccess(VPN) Setting Management",
		Order:       70,
	})
	AppendCommandCategoryMap("vpc-router", "wait-for-boot", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("vpc-router", "wait-for-down", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})

	// build Category-Param mapping

	AppendFlagCategoryMap("vpc-router", "boot", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "boot", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "boot", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "boot", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "boot", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "boot", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "boot", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "boot", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "create", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "create", "boot-after-create", &schema.Category{
		Key:         "operation",
		DisplayName: "Operation options",
		Order:       30,
	})
	AppendFlagCategoryMap("vpc-router", "create", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "create", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("vpc-router", "create", "disable-internet-connection", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       20,
	})
	AppendFlagCategoryMap("vpc-router", "create", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "create", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "create", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "create", "icon-id", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("vpc-router", "create", "ipaddress1", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       20,
	})
	AppendFlagCategoryMap("vpc-router", "create", "ipaddress2", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       20,
	})
	AppendFlagCategoryMap("vpc-router", "create", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("vpc-router", "create", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "create", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "create", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "create", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "create", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "create", "plan", &schema.Category{
		Key:         "router",
		DisplayName: "VPCRouter options",
		Order:       10,
	})
	AppendFlagCategoryMap("vpc-router", "create", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "create", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "create", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "create", "switch-id", &schema.Category{
		Key:         "router",
		DisplayName: "VPCRouter options",
		Order:       10,
	})
	AppendFlagCategoryMap("vpc-router", "create", "tags", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("vpc-router", "create", "vip", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       20,
	})
	AppendFlagCategoryMap("vpc-router", "create", "vrid", &schema.Category{
		Key:         "router",
		DisplayName: "VPCRouter options",
		Order:       10,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "force", &schema.Category{
		Key:         "router",
		DisplayName: "VPCRouter options",
		Order:       10,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "dns-servers", &schema.Category{
		Key:         "DHCP-Server",
		DisplayName: "DHCP-Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "interface", &schema.Category{
		Key:         "DHCP-Server",
		DisplayName: "DHCP-Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "range-start", &schema.Category{
		Key:         "DHCP-Server",
		DisplayName: "DHCP-Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "range-stop", &schema.Category{
		Key:         "DHCP-Server",
		DisplayName: "DHCP-Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-delete", "interface", &schema.Category{
		Key:         "DHCP-Server",
		DisplayName: "DHCP-Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "dns-servers", &schema.Category{
		Key:         "DHCP-Server",
		DisplayName: "DHCP-Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "interface", &schema.Category{
		Key:         "DHCP-Server",
		DisplayName: "DHCP-Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "range-start", &schema.Category{
		Key:         "DHCP-Server",
		DisplayName: "DHCP-Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "range-stop", &schema.Category{
		Key:         "DHCP-Server",
		DisplayName: "DHCP-Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-add", "ipaddress", &schema.Category{
		Key:         "DHCP-Static-Mapping",
		DisplayName: "DHCP-Static-Mapping options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-add", "macaddress", &schema.Category{
		Key:         "DHCP-Static-Mapping",
		DisplayName: "DHCP-Static-Mapping options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-delete", "index", &schema.Category{
		Key:         "DHCP-Static-Mapping",
		DisplayName: "DHCP-Static-Mapping options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-update", "index", &schema.Category{
		Key:         "DHCP-Static-Mapping",
		DisplayName: "DHCP-Static-Mapping options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-update", "ipaddress", &schema.Category{
		Key:         "DHCP-Static-Mapping",
		DisplayName: "DHCP-Static-Mapping options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-update", "macaddress", &schema.Category{
		Key:         "DHCP-Static-Mapping",
		DisplayName: "DHCP-Static-Mapping options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "disable-internet-connection", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "disable-internet-connection", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "disable-internet-connection", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "disable-internet-connection", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "disable-internet-connection", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "disable-internet-connection", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "disable-internet-connection", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "disable-internet-connection", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "enable-internet-connection", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "enable-internet-connection", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "enable-internet-connection", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "enable-internet-connection", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "enable-internet-connection", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "enable-internet-connection", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "enable-internet-connection", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "enable-internet-connection", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "action", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "description", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "destination-network", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "destination-port", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "direction", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "enable-logging", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "interface", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "protocol", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "source-network", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "source-port", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-delete", "direction", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-delete", "index", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-delete", "interface", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "direction", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "interface", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "action", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "description", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "destination-network", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "destination-port", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "direction", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "enable-logging", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "index", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "interface", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "protocol", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "source-network", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "source-port", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "interface", &schema.Category{
		Key:         "interface",
		DisplayName: "Interface options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "ipaddress", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "ipaddress1", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "ipaddress2", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "nw-masklen", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "switch-id", &schema.Category{
		Key:         "interface",
		DisplayName: "Interface options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "with-reboot", &schema.Category{
		Key:         "operation",
		DisplayName: "Operation options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-disconnect", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-disconnect", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-disconnect", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "interface-disconnect", "interface", &schema.Category{
		Key:         "interface",
		DisplayName: "Interface options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-disconnect", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-disconnect", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-disconnect", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-disconnect", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-disconnect", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "interface-disconnect", "with-reboot", &schema.Category{
		Key:         "operation",
		DisplayName: "Operation options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "alias", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "interface", &schema.Category{
		Key:         "interface",
		DisplayName: "Interface options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "ipaddress", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "ipaddress1", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "ipaddress2", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "nw-masklen", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "switch-id", &schema.Category{
		Key:         "interface",
		DisplayName: "Interface options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "with-reboot", &schema.Category{
		Key:         "operation",
		DisplayName: "Operation options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "disabled", &schema.Category{
		Key:         "L2TP-IPSec",
		DisplayName: "L2TP-IPSec options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "pre-shared-secret", &schema.Category{
		Key:         "L2TP-IPSec",
		DisplayName: "L2TP-IPSec options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "range-start", &schema.Category{
		Key:         "L2TP-IPSec",
		DisplayName: "L2TP-IPSec options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "range-stop", &schema.Category{
		Key:         "L2TP-IPSec",
		DisplayName: "L2TP-IPSec options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "list", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "list", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "list", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "list", "from", &schema.Category{
		Key:         "limit-offset",
		DisplayName: "Limit/Offset options",
		Order:       2147483597,
	})
	AppendFlagCategoryMap("vpc-router", "list", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "list", "id", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "list", "max", &schema.Category{
		Key:         "limit-offset",
		DisplayName: "Limit/Offset options",
		Order:       2147483597,
	})
	AppendFlagCategoryMap("vpc-router", "list", "name", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "list", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "list", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "list", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "list", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "list", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "list", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "list", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "list", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "list", "sort", &schema.Category{
		Key:         "sort",
		DisplayName: "Sort options",
		Order:       2147483607,
	})
	AppendFlagCategoryMap("vpc-router", "list", "tags", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "logs", "follow", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "logs", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "logs", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "logs", "list-log-names", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "logs", "log-name", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "logs", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "logs", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "logs", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "logs", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "logs", "refresh-interval", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "logs", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "end", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "interface", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "key-format", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "start", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "description", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "global-port", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "private-ipaddress", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "private-port", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "protocol", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-delete", "index", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "description", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "global-port", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "index", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "private-ipaddress", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "private-port", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "protocol", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-update", "disabled", &schema.Category{
		Key:         "PPTP",
		DisplayName: "PPTP options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-update", "range-start", &schema.Category{
		Key:         "PPTP",
		DisplayName: "PPTP options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-update", "range-stop", &schema.Category{
		Key:         "PPTP",
		DisplayName: "PPTP options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "read", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "read", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "read", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "read", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "read", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "read", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "read", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "read", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "read", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "read", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "read", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "read", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "read", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "read", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "reset", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "reset", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "reset", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "reset", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "reset", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "reset", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "reset", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "reset", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown-force", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown-force", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown-force", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown-force", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown-force", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown-force", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown-force", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown-force", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "local-prefix", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "peer", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "pre-shared-secret", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "remote-id", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "routes", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-delete", "index", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "index", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "local-prefix", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "peer", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "pre-shared-secret", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "remote-id", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "routes", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-add", "description", &schema.Category{
		Key:         "Static-NAT",
		DisplayName: "Static-NAT options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-add", "global", &schema.Category{
		Key:         "Static-NAT",
		DisplayName: "Static-NAT options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-add", "private", &schema.Category{
		Key:         "Static-NAT",
		DisplayName: "Static-NAT options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-delete", "index", &schema.Category{
		Key:         "Static-NAT",
		DisplayName: "Static-NAT options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "description", &schema.Category{
		Key:         "Static-NAT",
		DisplayName: "Static-NAT options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "global", &schema.Category{
		Key:         "Static-NAT",
		DisplayName: "Static-NAT options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "index", &schema.Category{
		Key:         "Static-NAT",
		DisplayName: "Static-NAT options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "private", &schema.Category{
		Key:         "Static-NAT",
		DisplayName: "Static-NAT options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-add", "next-hop", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-add", "prefix", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-delete", "index", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-update", "index", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-update", "next-hop", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-update", "prefix", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "update", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("vpc-router", "update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "update", "icon-id", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("vpc-router", "update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "update", "internet-connection", &schema.Category{
		Key:         "router",
		DisplayName: "VPCRouter options",
		Order:       10,
	})
	AppendFlagCategoryMap("vpc-router", "update", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("vpc-router", "update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "update", "syslog-host", &schema.Category{
		Key:         "router",
		DisplayName: "VPCRouter options",
		Order:       10,
	})
	AppendFlagCategoryMap("vpc-router", "update", "tags", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("vpc-router", "user-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "user-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-add", "password", &schema.Category{
		Key:         "user",
		DisplayName: "User options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "user-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "user-add", "username", &schema.Category{
		Key:         "user",
		DisplayName: "User options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "user-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "user-delete", "index", &schema.Category{
		Key:         "user",
		DisplayName: "User options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "user-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "user-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "user-update", "index", &schema.Category{
		Key:         "user",
		DisplayName: "User options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "user-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-update", "password", &schema.Category{
		Key:         "user",
		DisplayName: "User options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "user-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "user-update", "username", &schema.Category{
		Key:         "user",
		DisplayName: "User options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-boot", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-boot", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-boot", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-boot", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-boot", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-boot", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-boot", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-down", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-down", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-down", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-down", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-down", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-down", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-down", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})

	// append command to GlobalContext
	Commands = append(Commands, cliCommand)
}

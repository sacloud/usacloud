// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-commands'; DO NOT EDIT

package cli

import (
	"encoding/json"
	"fmt"
	"strings"
	"sync"

	"github.com/imdario/mergo"
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/funcs"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/schema"
	"gopkg.in/urfave/cli.v2"
)

func init() {
	vpcrouterListParam := params.NewListVpcrouterParam()
	vpcrouterCreateParam := params.NewCreateVpcrouterParam()
	vpcrouterReadParam := params.NewReadVpcrouterParam()
	vpcrouterUpdateParam := params.NewUpdateVpcrouterParam()
	vpcrouterDeleteParam := params.NewDeleteVpcrouterParam()
	vpcrouterBootParam := params.NewBootVpcrouterParam()
	vpcrouterShutdownParam := params.NewShutdownVpcrouterParam()
	vpcrouterShutdownForceParam := params.NewShutdownForceVpcrouterParam()
	vpcrouterResetParam := params.NewResetVpcrouterParam()
	vpcrouterWaitForBootParam := params.NewWaitForBootVpcrouterParam()
	vpcrouterWaitForDownParam := params.NewWaitForDownVpcrouterParam()
	vpcrouterEnableInternetConnectionParam := params.NewEnableInternetConnectionVpcrouterParam()
	vpcrouterDisableInternetConnectionParam := params.NewDisableInternetConnectionVpcrouterParam()
	vpcrouterInterfaceInfoParam := params.NewInterfaceInfoVpcrouterParam()
	vpcrouterInterfaceConnectParam := params.NewInterfaceConnectVpcrouterParam()
	vpcrouterInterfaceUpdateParam := params.NewInterfaceUpdateVpcrouterParam()
	vpcrouterInterfaceDisconnectParam := params.NewInterfaceDisconnectVpcrouterParam()
	vpcrouterStaticNatInfoParam := params.NewStaticNatInfoVpcrouterParam()
	vpcrouterStaticNatAddParam := params.NewStaticNatAddVpcrouterParam()
	vpcrouterStaticNatUpdateParam := params.NewStaticNatUpdateVpcrouterParam()
	vpcrouterStaticNatDeleteParam := params.NewStaticNatDeleteVpcrouterParam()
	vpcrouterPortForwardingInfoParam := params.NewPortForwardingInfoVpcrouterParam()
	vpcrouterPortForwardingAddParam := params.NewPortForwardingAddVpcrouterParam()
	vpcrouterPortForwardingUpdateParam := params.NewPortForwardingUpdateVpcrouterParam()
	vpcrouterPortForwardingDeleteParam := params.NewPortForwardingDeleteVpcrouterParam()
	vpcrouterFirewallInfoParam := params.NewFirewallInfoVpcrouterParam()
	vpcrouterFirewallAddParam := params.NewFirewallAddVpcrouterParam()
	vpcrouterFirewallUpdateParam := params.NewFirewallUpdateVpcrouterParam()
	vpcrouterFirewallDeleteParam := params.NewFirewallDeleteVpcrouterParam()
	vpcrouterDhcpServerInfoParam := params.NewDhcpServerInfoVpcrouterParam()
	vpcrouterDhcpServerAddParam := params.NewDhcpServerAddVpcrouterParam()
	vpcrouterDhcpServerUpdateParam := params.NewDhcpServerUpdateVpcrouterParam()
	vpcrouterDhcpServerDeleteParam := params.NewDhcpServerDeleteVpcrouterParam()
	vpcrouterDhcpStaticMappingInfoParam := params.NewDhcpStaticMappingInfoVpcrouterParam()
	vpcrouterDhcpStaticMappingAddParam := params.NewDhcpStaticMappingAddVpcrouterParam()
	vpcrouterDhcpStaticMappingUpdateParam := params.NewDhcpStaticMappingUpdateVpcrouterParam()
	vpcrouterDhcpStaticMappingDeleteParam := params.NewDhcpStaticMappingDeleteVpcrouterParam()
	vpcrouterPptpServerInfoParam := params.NewPptpServerInfoVpcrouterParam()
	vpcrouterPptpServerUpdateParam := params.NewPptpServerUpdateVpcrouterParam()
	vpcrouterL2tpServerInfoParam := params.NewL2tpServerInfoVpcrouterParam()
	vpcrouterL2tpServerUpdateParam := params.NewL2tpServerUpdateVpcrouterParam()
	vpcrouterUserInfoParam := params.NewUserInfoVpcrouterParam()
	vpcrouterUserAddParam := params.NewUserAddVpcrouterParam()
	vpcrouterUserUpdateParam := params.NewUserUpdateVpcrouterParam()
	vpcrouterUserDeleteParam := params.NewUserDeleteVpcrouterParam()
	vpcrouterSiteToSiteVpnInfoParam := params.NewSiteToSiteVpnInfoVpcrouterParam()
	vpcrouterSiteToSiteVpnAddParam := params.NewSiteToSiteVpnAddVpcrouterParam()
	vpcrouterSiteToSiteVpnUpdateParam := params.NewSiteToSiteVpnUpdateVpcrouterParam()
	vpcrouterSiteToSiteVpnDeleteParam := params.NewSiteToSiteVpnDeleteVpcrouterParam()
	vpcrouterSiteToSiteVpnPeersParam := params.NewSiteToSiteVpnPeersVpcrouterParam()
	vpcrouterStaticRouteInfoParam := params.NewStaticRouteInfoVpcrouterParam()
	vpcrouterStaticRouteAddParam := params.NewStaticRouteAddVpcrouterParam()
	vpcrouterStaticRouteUpdateParam := params.NewStaticRouteUpdateVpcrouterParam()
	vpcrouterStaticRouteDeleteParam := params.NewStaticRouteDeleteVpcrouterParam()
	vpcrouterMonitorParam := params.NewMonitorVpcrouterParam()
	vpcrouterLogsParam := params.NewLogsVpcrouterParam()

	cliCommand := &cli.Command{
		Name:  "vpc-router",
		Usage: "A manage commands of VPCRouter",
		Subcommands: []*cli.Command{
			{
				Name:    "list",
				Aliases: []string{"ls", "find", "selector"},
				Usage:   "List Vpcrouter",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "name",
						Usage: "set filter by name(s)",
					},
					&cli.Int64SliceFlag{
						Name:  "id",
						Usage: "set filter by id(s)",
					},
					&cli.StringSliceFlag{
						Name:    "tags",
						Aliases: []string{"selector"},
						Usage:   "set filter by tags(AND)",
					},
					&cli.IntFlag{
						Name:    "from",
						Aliases: []string{"offset"},
						Usage:   "set offset",
					},
					&cli.IntFlag{
						Name:    "max",
						Aliases: []string{"limit"},
						Usage:   "set limit",
					},
					&cli.StringSliceFlag{
						Name:  "sort",
						Usage: "set field(s) for sort",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterListParam.ParamTemplate = c.String("param-template")
					vpcrouterListParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterListParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewListVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterListParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("name") {
						vpcrouterListParam.Name = c.StringSlice("name")
					}
					if c.IsSet("id") {
						vpcrouterListParam.Id = toSakuraIDs(c.Int64Slice("id"))
					}
					if c.IsSet("tags") {
						vpcrouterListParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("from") {
						vpcrouterListParam.From = c.Int("from")
					}
					if c.IsSet("max") {
						vpcrouterListParam.Max = c.Int("max")
					}
					if c.IsSet("sort") {
						vpcrouterListParam.Sort = c.StringSlice("sort")
					}
					if c.IsSet("param-template") {
						vpcrouterListParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterListParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterListParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterListParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterListParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcrouterListParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcrouterListParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcrouterListParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcrouterListParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcrouterListParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcrouterListParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcrouterListParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterListParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterListParam.GenerateSkeleton {
						vpcrouterListParam.GenerateSkeleton = false
						vpcrouterListParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterListParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterListParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterListParam)

					// Run command with params
					return funcs.VpcrouterList(ctx, vpcrouterListParam)

				},
			},
			{
				Name:  "create",
				Usage: "Create Vpcrouter",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "plan",
						Usage: "[Required] set plan[standard/premium/highspec/highspec1600/highspec4000]",
						Value: "standard",
					},
					&cli.Int64Flag{
						Name:  "switch-id",
						Usage: "set connect switch ID",
					},
					&cli.IntFlag{
						Name:    "vrid",
						Aliases: []string{"VRID"},
						Usage:   "[Required] set VRID",
						Value:   1,
					},
					&cli.StringFlag{
						Name:  "vip",
						Usage: "set virtual ipddress()",
					},
					&cli.StringFlag{
						Name:    "ipaddress-1",
						Aliases: []string{"ip1"},
						Usage:   "set ipaddress(#1)",
					},
					&cli.StringFlag{
						Name:    "ipaddress-2",
						Aliases: []string{"ip2"},
						Usage:   "set ipaddress(#2)",
					},
					&cli.BoolFlag{
						Name:  "disable-internet-connection",
						Usage: "disable internet connection from VPCRouter",
						Value: false,
					},
					&cli.BoolFlag{
						Name:  "boot-after-create",
						Usage: "boot after create",
					},
					&cli.StringFlag{
						Name:  "name",
						Usage: "[Required] set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "set resource tags",
					},
					&cli.Int64Flag{
						Name:  "icon-id",
						Usage: "set Icon ID",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterCreateParam.ParamTemplate = c.String("param-template")
					vpcrouterCreateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterCreateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCreateVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterCreateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("plan") {
						vpcrouterCreateParam.Plan = c.String("plan")
					}
					if c.IsSet("switch-id") {
						vpcrouterCreateParam.SwitchId = sacloud.ID(c.Int64("switch-id"))
					}
					if c.IsSet("vrid") {
						vpcrouterCreateParam.Vrid = c.Int("vrid")
					}
					if c.IsSet("vip") {
						vpcrouterCreateParam.Vip = c.String("vip")
					}
					if c.IsSet("ipaddress-1") {
						vpcrouterCreateParam.Ipaddress1 = c.String("ipaddress-1")
					}
					if c.IsSet("ipaddress-2") {
						vpcrouterCreateParam.Ipaddress2 = c.String("ipaddress-2")
					}
					if c.IsSet("disable-internet-connection") {
						vpcrouterCreateParam.DisableInternetConnection = c.Bool("disable-internet-connection")
					}
					if c.IsSet("boot-after-create") {
						vpcrouterCreateParam.BootAfterCreate = c.Bool("boot-after-create")
					}
					if c.IsSet("name") {
						vpcrouterCreateParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						vpcrouterCreateParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						vpcrouterCreateParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						vpcrouterCreateParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						vpcrouterCreateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterCreateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterCreateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterCreateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterCreateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterCreateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcrouterCreateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcrouterCreateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcrouterCreateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcrouterCreateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcrouterCreateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcrouterCreateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcrouterCreateParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterCreateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterCreateParam.GenerateSkeleton {
						vpcrouterCreateParam.GenerateSkeleton = false
						vpcrouterCreateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterCreateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterCreateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterCreateParam)

					// confirm
					if !vpcrouterCreateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("create") {
							return nil
						}
					}

					// Run command with params
					return funcs.VpcrouterCreate(ctx, vpcrouterCreateParam)

				},
			},
			{
				Name:      "read",
				Usage:     "Read Vpcrouter",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterReadParam.ParamTemplate = c.String("param-template")
					vpcrouterReadParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterReadParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewReadVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterReadParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcrouterReadParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcrouterReadParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterReadParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterReadParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterReadParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterReadParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcrouterReadParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcrouterReadParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcrouterReadParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcrouterReadParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcrouterReadParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcrouterReadParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcrouterReadParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcrouterReadParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterReadParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterReadParam.GenerateSkeleton {
						vpcrouterReadParam.GenerateSkeleton = false
						vpcrouterReadParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterReadParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterReadParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterReadParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterReadParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterReadParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterReadParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterReadParam.Selector) == 0 || hasTags(&v, vpcrouterReadParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterReadParam.SetId(id)
						p := *vpcrouterReadParam // copy struct value
						vpcrouterReadParam := &p
						go func() {
							err := funcs.VpcrouterRead(ctx, vpcrouterReadParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "update",
				Usage:     "Update Vpcrouter",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "syslog-host",
						Usage: "set syslog host IPAddress",
					},
					&cli.BoolFlag{
						Name:  "internet-connection",
						Usage: "set internet connection from VPCRouter",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "name",
						Usage: "set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "set resource tags",
					},
					&cli.Int64Flag{
						Name:  "icon-id",
						Usage: "set Icon ID",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterUpdateParam.ParamTemplate = c.String("param-template")
					vpcrouterUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewUpdateVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("syslog-host") {
						vpcrouterUpdateParam.SyslogHost = c.String("syslog-host")
					}
					if c.IsSet("internet-connection") {
						vpcrouterUpdateParam.InternetConnection = c.Bool("internet-connection")
					}
					if c.IsSet("selector") {
						vpcrouterUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("name") {
						vpcrouterUpdateParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						vpcrouterUpdateParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						vpcrouterUpdateParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						vpcrouterUpdateParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						vpcrouterUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcrouterUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcrouterUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcrouterUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcrouterUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcrouterUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcrouterUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcrouterUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcrouterUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterUpdateParam.GenerateSkeleton {
						vpcrouterUpdateParam.GenerateSkeleton = false
						vpcrouterUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterUpdateParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterUpdateParam.Selector) == 0 || hasTags(&v, vpcrouterUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !vpcrouterUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterUpdateParam.SetId(id)
						p := *vpcrouterUpdateParam // copy struct value
						vpcrouterUpdateParam := &p
						go func() {
							err := funcs.VpcrouterUpdate(ctx, vpcrouterUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "delete",
				Aliases:   []string{"rm"},
				Usage:     "Delete Vpcrouter",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:    "force",
						Aliases: []string{"f"},
						Usage:   "forced-shutdown flag if server is running",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterDeleteParam.ParamTemplate = c.String("param-template")
					vpcrouterDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDeleteVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("force") {
						vpcrouterDeleteParam.Force = c.Bool("force")
					}
					if c.IsSet("selector") {
						vpcrouterDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcrouterDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcrouterDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcrouterDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcrouterDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcrouterDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcrouterDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcrouterDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcrouterDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterDeleteParam.GenerateSkeleton {
						vpcrouterDeleteParam.GenerateSkeleton = false
						vpcrouterDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterDeleteParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterDeleteParam.Selector) == 0 || hasTags(&v, vpcrouterDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !vpcrouterDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterDeleteParam.SetId(id)
						p := *vpcrouterDeleteParam // copy struct value
						vpcrouterDeleteParam := &p
						go func() {
							err := funcs.VpcrouterDelete(ctx, vpcrouterDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "boot",
				Aliases:   []string{"power-on"},
				Usage:     "Boot Vpcrouter",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterBootParam.ParamTemplate = c.String("param-template")
					vpcrouterBootParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterBootParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewBootVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterBootParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcrouterBootParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterBootParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterBootParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterBootParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterBootParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterBootParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterBootParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterBootParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterBootParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterBootParam.GenerateSkeleton {
						vpcrouterBootParam.GenerateSkeleton = false
						vpcrouterBootParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterBootParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterBootParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterBootParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterBootParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterBootParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterBootParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterBootParam.Selector) == 0 || hasTags(&v, vpcrouterBootParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !vpcrouterBootParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("boot", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterBootParam.SetId(id)
						p := *vpcrouterBootParam // copy struct value
						vpcrouterBootParam := &p
						go func() {
							err := funcs.VpcrouterBoot(ctx, vpcrouterBootParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "shutdown",
				Aliases:   []string{"power-off"},
				Usage:     "Shutdown Vpcrouter",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterShutdownParam.ParamTemplate = c.String("param-template")
					vpcrouterShutdownParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterShutdownParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewShutdownVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterShutdownParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcrouterShutdownParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterShutdownParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterShutdownParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterShutdownParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterShutdownParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterShutdownParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterShutdownParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterShutdownParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterShutdownParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterShutdownParam.GenerateSkeleton {
						vpcrouterShutdownParam.GenerateSkeleton = false
						vpcrouterShutdownParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterShutdownParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterShutdownParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterShutdownParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterShutdownParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterShutdownParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterShutdownParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterShutdownParam.Selector) == 0 || hasTags(&v, vpcrouterShutdownParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !vpcrouterShutdownParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("shutdown", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterShutdownParam.SetId(id)
						p := *vpcrouterShutdownParam // copy struct value
						vpcrouterShutdownParam := &p
						go func() {
							err := funcs.VpcrouterShutdown(ctx, vpcrouterShutdownParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "shutdown-force",
				Aliases:   []string{"stop"},
				Usage:     "ShutdownForce Vpcrouter",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterShutdownForceParam.ParamTemplate = c.String("param-template")
					vpcrouterShutdownForceParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterShutdownForceParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewShutdownForceVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterShutdownForceParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcrouterShutdownForceParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterShutdownForceParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterShutdownForceParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterShutdownForceParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterShutdownForceParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterShutdownForceParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterShutdownForceParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterShutdownForceParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterShutdownForceParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterShutdownForceParam.GenerateSkeleton {
						vpcrouterShutdownForceParam.GenerateSkeleton = false
						vpcrouterShutdownForceParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterShutdownForceParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterShutdownForceParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterShutdownForceParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterShutdownForceParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterShutdownForceParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterShutdownForceParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterShutdownForceParam.Selector) == 0 || hasTags(&v, vpcrouterShutdownForceParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !vpcrouterShutdownForceParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("shutdown-force", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterShutdownForceParam.SetId(id)
						p := *vpcrouterShutdownForceParam // copy struct value
						vpcrouterShutdownForceParam := &p
						go func() {
							err := funcs.VpcrouterShutdownForce(ctx, vpcrouterShutdownForceParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "reset",
				Usage:     "Reset Vpcrouter",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterResetParam.ParamTemplate = c.String("param-template")
					vpcrouterResetParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterResetParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewResetVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterResetParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcrouterResetParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterResetParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterResetParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterResetParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterResetParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterResetParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterResetParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterResetParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterResetParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterResetParam.GenerateSkeleton {
						vpcrouterResetParam.GenerateSkeleton = false
						vpcrouterResetParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterResetParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterResetParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterResetParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterResetParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterResetParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterResetParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterResetParam.Selector) == 0 || hasTags(&v, vpcrouterResetParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !vpcrouterResetParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("reset", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterResetParam.SetId(id)
						p := *vpcrouterResetParam // copy struct value
						vpcrouterResetParam := &p
						go func() {
							err := funcs.VpcrouterReset(ctx, vpcrouterResetParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "wait-for-boot",
				Usage:     "Wait until boot is completed",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterWaitForBootParam.ParamTemplate = c.String("param-template")
					vpcrouterWaitForBootParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterWaitForBootParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewWaitForBootVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterWaitForBootParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcrouterWaitForBootParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcrouterWaitForBootParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterWaitForBootParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterWaitForBootParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterWaitForBootParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterWaitForBootParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterWaitForBootParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterWaitForBootParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterWaitForBootParam.GenerateSkeleton {
						vpcrouterWaitForBootParam.GenerateSkeleton = false
						vpcrouterWaitForBootParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterWaitForBootParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterWaitForBootParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterWaitForBootParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterWaitForBootParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterWaitForBootParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterWaitForBootParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterWaitForBootParam.Selector) == 0 || hasTags(&v, vpcrouterWaitForBootParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterWaitForBootParam.SetId(id)
						p := *vpcrouterWaitForBootParam // copy struct value
						vpcrouterWaitForBootParam := &p
						go func() {
							err := funcs.VpcrouterWaitForBoot(ctx, vpcrouterWaitForBootParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "wait-for-down",
				Usage:     "Wait until shutdown is completed",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterWaitForDownParam.ParamTemplate = c.String("param-template")
					vpcrouterWaitForDownParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterWaitForDownParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewWaitForDownVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterWaitForDownParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcrouterWaitForDownParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcrouterWaitForDownParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterWaitForDownParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterWaitForDownParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterWaitForDownParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterWaitForDownParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterWaitForDownParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterWaitForDownParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterWaitForDownParam.GenerateSkeleton {
						vpcrouterWaitForDownParam.GenerateSkeleton = false
						vpcrouterWaitForDownParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterWaitForDownParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterWaitForDownParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterWaitForDownParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterWaitForDownParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterWaitForDownParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterWaitForDownParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterWaitForDownParam.Selector) == 0 || hasTags(&v, vpcrouterWaitForDownParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterWaitForDownParam.SetId(id)
						p := *vpcrouterWaitForDownParam // copy struct value
						vpcrouterWaitForDownParam := &p
						go func() {
							err := funcs.VpcrouterWaitForDown(ctx, vpcrouterWaitForDownParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "enable-internet-connection",
				Usage:     "Enable internet connection from VPCRouter",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterEnableInternetConnectionParam.ParamTemplate = c.String("param-template")
					vpcrouterEnableInternetConnectionParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterEnableInternetConnectionParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewEnableInternetConnectionVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterEnableInternetConnectionParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcrouterEnableInternetConnectionParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterEnableInternetConnectionParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterEnableInternetConnectionParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterEnableInternetConnectionParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterEnableInternetConnectionParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterEnableInternetConnectionParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterEnableInternetConnectionParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterEnableInternetConnectionParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterEnableInternetConnectionParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterEnableInternetConnectionParam.GenerateSkeleton {
						vpcrouterEnableInternetConnectionParam.GenerateSkeleton = false
						vpcrouterEnableInternetConnectionParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterEnableInternetConnectionParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterEnableInternetConnectionParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterEnableInternetConnectionParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterEnableInternetConnectionParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterEnableInternetConnectionParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterEnableInternetConnectionParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterEnableInternetConnectionParam.Selector) == 0 || hasTags(&v, vpcrouterEnableInternetConnectionParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterEnableInternetConnectionParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("enable-internet-connection", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterEnableInternetConnectionParam.SetId(id)
						p := *vpcrouterEnableInternetConnectionParam // copy struct value
						vpcrouterEnableInternetConnectionParam := &p
						go func() {
							err := funcs.VpcrouterEnableInternetConnection(ctx, vpcrouterEnableInternetConnectionParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "disable-internet-connection",
				Usage:     "Enable internet connection from VPCRouter",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterDisableInternetConnectionParam.ParamTemplate = c.String("param-template")
					vpcrouterDisableInternetConnectionParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterDisableInternetConnectionParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDisableInternetConnectionVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterDisableInternetConnectionParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcrouterDisableInternetConnectionParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterDisableInternetConnectionParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterDisableInternetConnectionParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterDisableInternetConnectionParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterDisableInternetConnectionParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterDisableInternetConnectionParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterDisableInternetConnectionParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterDisableInternetConnectionParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterDisableInternetConnectionParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterDisableInternetConnectionParam.GenerateSkeleton {
						vpcrouterDisableInternetConnectionParam.GenerateSkeleton = false
						vpcrouterDisableInternetConnectionParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterDisableInternetConnectionParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterDisableInternetConnectionParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterDisableInternetConnectionParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterDisableInternetConnectionParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterDisableInternetConnectionParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterDisableInternetConnectionParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterDisableInternetConnectionParam.Selector) == 0 || hasTags(&v, vpcrouterDisableInternetConnectionParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterDisableInternetConnectionParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("disable-internet-connection", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterDisableInternetConnectionParam.SetId(id)
						p := *vpcrouterDisableInternetConnectionParam // copy struct value
						vpcrouterDisableInternetConnectionParam := &p
						go func() {
							err := funcs.VpcrouterDisableInternetConnection(ctx, vpcrouterDisableInternetConnectionParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "interface-info",
				Aliases:   []string{"interface-list"},
				Usage:     "Show information of NIC(s) connected to vpc-router",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterInterfaceInfoParam.ParamTemplate = c.String("param-template")
					vpcrouterInterfaceInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterInterfaceInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewInterfaceInfoVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterInterfaceInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcrouterInterfaceInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcrouterInterfaceInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterInterfaceInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterInterfaceInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterInterfaceInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterInterfaceInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcrouterInterfaceInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcrouterInterfaceInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcrouterInterfaceInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcrouterInterfaceInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcrouterInterfaceInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcrouterInterfaceInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcrouterInterfaceInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcrouterInterfaceInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterInterfaceInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterInterfaceInfoParam.GenerateSkeleton {
						vpcrouterInterfaceInfoParam.GenerateSkeleton = false
						vpcrouterInterfaceInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterInterfaceInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterInterfaceInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterInterfaceInfoParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterInterfaceInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterInterfaceInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterInterfaceInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterInterfaceInfoParam.Selector) == 0 || hasTags(&v, vpcrouterInterfaceInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterInterfaceInfoParam.SetId(id)
						p := *vpcrouterInterfaceInfoParam // copy struct value
						vpcrouterInterfaceInfoParam := &p
						go func() {
							err := funcs.VpcrouterInterfaceInfo(ctx, vpcrouterInterfaceInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "interface-connect",
				Usage:     "Connected to switch",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "interface",
						Usage: "[Required] index of target private-interface",
					},
					&cli.StringFlag{
						Name:    "ipaddress",
						Aliases: []string{"ip", "vip"},
						Usage:   "[Required] set (virtual)ipaddress",
					},
					&cli.BoolFlag{
						Name:  "with-reboot",
						Usage: "reboot after connect",
					},
					&cli.StringFlag{
						Name:    "ipaddress-1",
						Aliases: []string{"ip1"},
						Usage:   "set ipaddress(#1)",
					},
					&cli.Int64Flag{
						Name:  "switch-id",
						Usage: "[Required] set connect switch ID",
					},
					&cli.StringFlag{
						Name:    "ipaddress-2",
						Aliases: []string{"ip2"},
						Usage:   "set ipaddress(#2)",
					},
					&cli.IntFlag{
						Name:    "nw-masklen",
						Aliases: []string{"network-masklen"},
						Usage:   "set ipaddress prefix",
						Value:   24,
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterInterfaceConnectParam.ParamTemplate = c.String("param-template")
					vpcrouterInterfaceConnectParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterInterfaceConnectParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewInterfaceConnectVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterInterfaceConnectParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("interface") {
						vpcrouterInterfaceConnectParam.Interface = c.String("interface")
					}
					if c.IsSet("ipaddress") {
						vpcrouterInterfaceConnectParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("with-reboot") {
						vpcrouterInterfaceConnectParam.WithReboot = c.Bool("with-reboot")
					}
					if c.IsSet("ipaddress-1") {
						vpcrouterInterfaceConnectParam.Ipaddress1 = c.String("ipaddress-1")
					}
					if c.IsSet("switch-id") {
						vpcrouterInterfaceConnectParam.SwitchId = sacloud.ID(c.Int64("switch-id"))
					}
					if c.IsSet("ipaddress-2") {
						vpcrouterInterfaceConnectParam.Ipaddress2 = c.String("ipaddress-2")
					}
					if c.IsSet("nw-masklen") {
						vpcrouterInterfaceConnectParam.NwMasklen = c.Int("nw-masklen")
					}
					if c.IsSet("selector") {
						vpcrouterInterfaceConnectParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterInterfaceConnectParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterInterfaceConnectParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterInterfaceConnectParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterInterfaceConnectParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterInterfaceConnectParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterInterfaceConnectParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterInterfaceConnectParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterInterfaceConnectParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterInterfaceConnectParam.GenerateSkeleton {
						vpcrouterInterfaceConnectParam.GenerateSkeleton = false
						vpcrouterInterfaceConnectParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterInterfaceConnectParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterInterfaceConnectParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterInterfaceConnectParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterInterfaceConnectParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterInterfaceConnectParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterInterfaceConnectParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterInterfaceConnectParam.Selector) == 0 || hasTags(&v, vpcrouterInterfaceConnectParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterInterfaceConnectParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("interface-connect", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterInterfaceConnectParam.SetId(id)
						p := *vpcrouterInterfaceConnectParam // copy struct value
						vpcrouterInterfaceConnectParam := &p
						go func() {
							err := funcs.VpcrouterInterfaceConnect(ctx, vpcrouterInterfaceConnectParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "interface-update",
				Usage:     "Update interface",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "interface",
						Usage: "[Required] index of target interface",
					},
					&cli.StringFlag{
						Name:    "ipaddress",
						Aliases: []string{"ip", "vip"},
						Usage:   "set (virtual)ipaddress",
					},
					&cli.BoolFlag{
						Name:  "with-reboot",
						Usage: "reboot after connect",
					},
					&cli.StringFlag{
						Name:    "ipaddress-1",
						Aliases: []string{"ip1"},
						Usage:   "set ipaddress(#1)",
					},
					&cli.Int64Flag{
						Name:  "switch-id",
						Usage: "set connect switch ID",
					},
					&cli.StringFlag{
						Name:    "ipaddress-2",
						Aliases: []string{"ip2"},
						Usage:   "set ipaddress(#2)",
					},
					&cli.StringSliceFlag{
						Name:  "alias",
						Usage: "set ip aliases",
					},
					&cli.IntFlag{
						Name:    "nw-masklen",
						Aliases: []string{"network-masklen"},
						Usage:   "set ipaddress prefix",
						Value:   24,
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterInterfaceUpdateParam.ParamTemplate = c.String("param-template")
					vpcrouterInterfaceUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterInterfaceUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewInterfaceUpdateVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterInterfaceUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("interface") {
						vpcrouterInterfaceUpdateParam.Interface = c.String("interface")
					}
					if c.IsSet("ipaddress") {
						vpcrouterInterfaceUpdateParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("with-reboot") {
						vpcrouterInterfaceUpdateParam.WithReboot = c.Bool("with-reboot")
					}
					if c.IsSet("ipaddress-1") {
						vpcrouterInterfaceUpdateParam.Ipaddress1 = c.String("ipaddress-1")
					}
					if c.IsSet("switch-id") {
						vpcrouterInterfaceUpdateParam.SwitchId = sacloud.ID(c.Int64("switch-id"))
					}
					if c.IsSet("ipaddress-2") {
						vpcrouterInterfaceUpdateParam.Ipaddress2 = c.String("ipaddress-2")
					}
					if c.IsSet("alias") {
						vpcrouterInterfaceUpdateParam.Alias = c.StringSlice("alias")
					}
					if c.IsSet("nw-masklen") {
						vpcrouterInterfaceUpdateParam.NwMasklen = c.Int("nw-masklen")
					}
					if c.IsSet("selector") {
						vpcrouterInterfaceUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterInterfaceUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterInterfaceUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterInterfaceUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterInterfaceUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterInterfaceUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterInterfaceUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterInterfaceUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterInterfaceUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterInterfaceUpdateParam.GenerateSkeleton {
						vpcrouterInterfaceUpdateParam.GenerateSkeleton = false
						vpcrouterInterfaceUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterInterfaceUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterInterfaceUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterInterfaceUpdateParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterInterfaceUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterInterfaceUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterInterfaceUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterInterfaceUpdateParam.Selector) == 0 || hasTags(&v, vpcrouterInterfaceUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterInterfaceUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("interface-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterInterfaceUpdateParam.SetId(id)
						p := *vpcrouterInterfaceUpdateParam // copy struct value
						vpcrouterInterfaceUpdateParam := &p
						go func() {
							err := funcs.VpcrouterInterfaceUpdate(ctx, vpcrouterInterfaceUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "interface-disconnect",
				Usage:     "Disconnected to switch",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "interface",
						Usage: "[Required] index of target private-interface",
					},
					&cli.BoolFlag{
						Name:  "with-reboot",
						Usage: "reboot after connect",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterInterfaceDisconnectParam.ParamTemplate = c.String("param-template")
					vpcrouterInterfaceDisconnectParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterInterfaceDisconnectParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewInterfaceDisconnectVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterInterfaceDisconnectParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("interface") {
						vpcrouterInterfaceDisconnectParam.Interface = c.String("interface")
					}
					if c.IsSet("with-reboot") {
						vpcrouterInterfaceDisconnectParam.WithReboot = c.Bool("with-reboot")
					}
					if c.IsSet("selector") {
						vpcrouterInterfaceDisconnectParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterInterfaceDisconnectParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterInterfaceDisconnectParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterInterfaceDisconnectParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterInterfaceDisconnectParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterInterfaceDisconnectParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterInterfaceDisconnectParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterInterfaceDisconnectParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterInterfaceDisconnectParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterInterfaceDisconnectParam.GenerateSkeleton {
						vpcrouterInterfaceDisconnectParam.GenerateSkeleton = false
						vpcrouterInterfaceDisconnectParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterInterfaceDisconnectParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterInterfaceDisconnectParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterInterfaceDisconnectParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterInterfaceDisconnectParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterInterfaceDisconnectParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterInterfaceDisconnectParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterInterfaceDisconnectParam.Selector) == 0 || hasTags(&v, vpcrouterInterfaceDisconnectParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterInterfaceDisconnectParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("interface-disconnect", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterInterfaceDisconnectParam.SetId(id)
						p := *vpcrouterInterfaceDisconnectParam // copy struct value
						vpcrouterInterfaceDisconnectParam := &p
						go func() {
							err := funcs.VpcrouterInterfaceDisconnect(ctx, vpcrouterInterfaceDisconnectParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-nat-info",
				Aliases:   []string{"static-nat-list"},
				Usage:     "Show information of static NAT settings",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterStaticNatInfoParam.ParamTemplate = c.String("param-template")
					vpcrouterStaticNatInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterStaticNatInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticNatInfoVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterStaticNatInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcrouterStaticNatInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcrouterStaticNatInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterStaticNatInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterStaticNatInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterStaticNatInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterStaticNatInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcrouterStaticNatInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcrouterStaticNatInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcrouterStaticNatInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcrouterStaticNatInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcrouterStaticNatInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcrouterStaticNatInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcrouterStaticNatInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcrouterStaticNatInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterStaticNatInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterStaticNatInfoParam.GenerateSkeleton {
						vpcrouterStaticNatInfoParam.GenerateSkeleton = false
						vpcrouterStaticNatInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterStaticNatInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterStaticNatInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterStaticNatInfoParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterStaticNatInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterStaticNatInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterStaticNatInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterStaticNatInfoParam.Selector) == 0 || hasTags(&v, vpcrouterStaticNatInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterStaticNatInfoParam.SetId(id)
						p := *vpcrouterStaticNatInfoParam // copy struct value
						vpcrouterStaticNatInfoParam := &p
						go func() {
							err := funcs.VpcrouterStaticNatInfo(ctx, vpcrouterStaticNatInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-nat-add",
				Usage:     "Add static NAT",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "global",
						Aliases: []string{"global-ip", "global-address"},
						Usage:   "[Required] set global ipaddress",
					},
					&cli.StringFlag{
						Name:    "private",
						Aliases: []string{"private-ip", "private-address"},
						Usage:   "[Required] set private ipaddress",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set description",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterStaticNatAddParam.ParamTemplate = c.String("param-template")
					vpcrouterStaticNatAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterStaticNatAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticNatAddVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterStaticNatAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("global") {
						vpcrouterStaticNatAddParam.Global = c.String("global")
					}
					if c.IsSet("private") {
						vpcrouterStaticNatAddParam.Private = c.String("private")
					}
					if c.IsSet("description") {
						vpcrouterStaticNatAddParam.Description = c.String("description")
					}
					if c.IsSet("selector") {
						vpcrouterStaticNatAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterStaticNatAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterStaticNatAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterStaticNatAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterStaticNatAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterStaticNatAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterStaticNatAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterStaticNatAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterStaticNatAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterStaticNatAddParam.GenerateSkeleton {
						vpcrouterStaticNatAddParam.GenerateSkeleton = false
						vpcrouterStaticNatAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterStaticNatAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterStaticNatAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterStaticNatAddParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterStaticNatAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterStaticNatAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterStaticNatAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterStaticNatAddParam.Selector) == 0 || hasTags(&v, vpcrouterStaticNatAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterStaticNatAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("static-nat-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterStaticNatAddParam.SetId(id)
						p := *vpcrouterStaticNatAddParam // copy struct value
						vpcrouterStaticNatAddParam := &p
						go func() {
							err := funcs.VpcrouterStaticNatAdd(ctx, vpcrouterStaticNatAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-nat-update",
				Usage:     "Update static NAT",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target static NAT",
					},
					&cli.StringFlag{
						Name:    "global",
						Aliases: []string{"global-ip", "global-address"},
						Usage:   "set global ipaddress",
					},
					&cli.StringFlag{
						Name:    "private",
						Aliases: []string{"private-ip", "private-address"},
						Usage:   "set private ipaddress",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set description",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterStaticNatUpdateParam.ParamTemplate = c.String("param-template")
					vpcrouterStaticNatUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterStaticNatUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticNatUpdateVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterStaticNatUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcrouterStaticNatUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("global") {
						vpcrouterStaticNatUpdateParam.Global = c.String("global")
					}
					if c.IsSet("private") {
						vpcrouterStaticNatUpdateParam.Private = c.String("private")
					}
					if c.IsSet("description") {
						vpcrouterStaticNatUpdateParam.Description = c.String("description")
					}
					if c.IsSet("selector") {
						vpcrouterStaticNatUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterStaticNatUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterStaticNatUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterStaticNatUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterStaticNatUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterStaticNatUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterStaticNatUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterStaticNatUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterStaticNatUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterStaticNatUpdateParam.GenerateSkeleton {
						vpcrouterStaticNatUpdateParam.GenerateSkeleton = false
						vpcrouterStaticNatUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterStaticNatUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterStaticNatUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterStaticNatUpdateParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterStaticNatUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterStaticNatUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterStaticNatUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterStaticNatUpdateParam.Selector) == 0 || hasTags(&v, vpcrouterStaticNatUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterStaticNatUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("static-nat-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterStaticNatUpdateParam.SetId(id)
						p := *vpcrouterStaticNatUpdateParam // copy struct value
						vpcrouterStaticNatUpdateParam := &p
						go func() {
							err := funcs.VpcrouterStaticNatUpdate(ctx, vpcrouterStaticNatUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-nat-delete",
				Usage:     "Delete static NAT",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target static NAT",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterStaticNatDeleteParam.ParamTemplate = c.String("param-template")
					vpcrouterStaticNatDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterStaticNatDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticNatDeleteVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterStaticNatDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcrouterStaticNatDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						vpcrouterStaticNatDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterStaticNatDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterStaticNatDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterStaticNatDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterStaticNatDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterStaticNatDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterStaticNatDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterStaticNatDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterStaticNatDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterStaticNatDeleteParam.GenerateSkeleton {
						vpcrouterStaticNatDeleteParam.GenerateSkeleton = false
						vpcrouterStaticNatDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterStaticNatDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterStaticNatDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterStaticNatDeleteParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterStaticNatDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterStaticNatDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterStaticNatDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterStaticNatDeleteParam.Selector) == 0 || hasTags(&v, vpcrouterStaticNatDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterStaticNatDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("static-nat-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterStaticNatDeleteParam.SetId(id)
						p := *vpcrouterStaticNatDeleteParam // copy struct value
						vpcrouterStaticNatDeleteParam := &p
						go func() {
							err := funcs.VpcrouterStaticNatDelete(ctx, vpcrouterStaticNatDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "port-forwarding-info",
				Aliases:   []string{"port-forwarding-list"},
				Usage:     "Show information of port-forwarding settings",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterPortForwardingInfoParam.ParamTemplate = c.String("param-template")
					vpcrouterPortForwardingInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterPortForwardingInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewPortForwardingInfoVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterPortForwardingInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcrouterPortForwardingInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcrouterPortForwardingInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterPortForwardingInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterPortForwardingInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterPortForwardingInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterPortForwardingInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcrouterPortForwardingInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcrouterPortForwardingInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcrouterPortForwardingInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcrouterPortForwardingInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcrouterPortForwardingInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcrouterPortForwardingInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcrouterPortForwardingInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcrouterPortForwardingInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterPortForwardingInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterPortForwardingInfoParam.GenerateSkeleton {
						vpcrouterPortForwardingInfoParam.GenerateSkeleton = false
						vpcrouterPortForwardingInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterPortForwardingInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterPortForwardingInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterPortForwardingInfoParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterPortForwardingInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterPortForwardingInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterPortForwardingInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterPortForwardingInfoParam.Selector) == 0 || hasTags(&v, vpcrouterPortForwardingInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterPortForwardingInfoParam.SetId(id)
						p := *vpcrouterPortForwardingInfoParam // copy struct value
						vpcrouterPortForwardingInfoParam := &p
						go func() {
							err := funcs.VpcrouterPortForwardingInfo(ctx, vpcrouterPortForwardingInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "port-forwarding-add",
				Usage:     "Add port forwarding",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "protocol",
						Usage: "[Required] set target protocol",
					},
					&cli.IntFlag{
						Name:  "global-port",
						Usage: "[Required] set global ipaddress",
					},
					&cli.StringFlag{
						Name:    "private-ipaddress",
						Aliases: []string{"private-ip", "private-address"},
						Usage:   "[Required] set private ipaddress",
					},
					&cli.IntFlag{
						Name:  "private-port",
						Usage: "[Required] set private ipaddress",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set description",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterPortForwardingAddParam.ParamTemplate = c.String("param-template")
					vpcrouterPortForwardingAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterPortForwardingAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewPortForwardingAddVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterPortForwardingAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("protocol") {
						vpcrouterPortForwardingAddParam.Protocol = c.String("protocol")
					}
					if c.IsSet("global-port") {
						vpcrouterPortForwardingAddParam.GlobalPort = c.Int("global-port")
					}
					if c.IsSet("private-ipaddress") {
						vpcrouterPortForwardingAddParam.PrivateIpaddress = c.String("private-ipaddress")
					}
					if c.IsSet("private-port") {
						vpcrouterPortForwardingAddParam.PrivatePort = c.Int("private-port")
					}
					if c.IsSet("description") {
						vpcrouterPortForwardingAddParam.Description = c.String("description")
					}
					if c.IsSet("selector") {
						vpcrouterPortForwardingAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterPortForwardingAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterPortForwardingAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterPortForwardingAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterPortForwardingAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterPortForwardingAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterPortForwardingAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterPortForwardingAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterPortForwardingAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterPortForwardingAddParam.GenerateSkeleton {
						vpcrouterPortForwardingAddParam.GenerateSkeleton = false
						vpcrouterPortForwardingAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterPortForwardingAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterPortForwardingAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterPortForwardingAddParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterPortForwardingAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterPortForwardingAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterPortForwardingAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterPortForwardingAddParam.Selector) == 0 || hasTags(&v, vpcrouterPortForwardingAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterPortForwardingAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("port-forwarding-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterPortForwardingAddParam.SetId(id)
						p := *vpcrouterPortForwardingAddParam // copy struct value
						vpcrouterPortForwardingAddParam := &p
						go func() {
							err := funcs.VpcrouterPortForwardingAdd(ctx, vpcrouterPortForwardingAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "port-forwarding-update",
				Usage:     "Update port forwarding",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target PortForward",
					},
					&cli.StringFlag{
						Name:  "protocol",
						Usage: "set target protocol",
					},
					&cli.IntFlag{
						Name:  "global-port",
						Usage: "set global ipaddress",
					},
					&cli.StringFlag{
						Name:    "private-ipaddress",
						Aliases: []string{"private-ip", "private-address"},
						Usage:   "set private ipaddress",
					},
					&cli.IntFlag{
						Name:  "private-port",
						Usage: "set private ipaddress",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set description",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterPortForwardingUpdateParam.ParamTemplate = c.String("param-template")
					vpcrouterPortForwardingUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterPortForwardingUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewPortForwardingUpdateVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterPortForwardingUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcrouterPortForwardingUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("protocol") {
						vpcrouterPortForwardingUpdateParam.Protocol = c.String("protocol")
					}
					if c.IsSet("global-port") {
						vpcrouterPortForwardingUpdateParam.GlobalPort = c.Int("global-port")
					}
					if c.IsSet("private-ipaddress") {
						vpcrouterPortForwardingUpdateParam.PrivateIpaddress = c.String("private-ipaddress")
					}
					if c.IsSet("private-port") {
						vpcrouterPortForwardingUpdateParam.PrivatePort = c.Int("private-port")
					}
					if c.IsSet("description") {
						vpcrouterPortForwardingUpdateParam.Description = c.String("description")
					}
					if c.IsSet("selector") {
						vpcrouterPortForwardingUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterPortForwardingUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterPortForwardingUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterPortForwardingUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterPortForwardingUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterPortForwardingUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterPortForwardingUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterPortForwardingUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterPortForwardingUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterPortForwardingUpdateParam.GenerateSkeleton {
						vpcrouterPortForwardingUpdateParam.GenerateSkeleton = false
						vpcrouterPortForwardingUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterPortForwardingUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterPortForwardingUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterPortForwardingUpdateParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterPortForwardingUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterPortForwardingUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterPortForwardingUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterPortForwardingUpdateParam.Selector) == 0 || hasTags(&v, vpcrouterPortForwardingUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterPortForwardingUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("port-forwarding-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterPortForwardingUpdateParam.SetId(id)
						p := *vpcrouterPortForwardingUpdateParam // copy struct value
						vpcrouterPortForwardingUpdateParam := &p
						go func() {
							err := funcs.VpcrouterPortForwardingUpdate(ctx, vpcrouterPortForwardingUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "port-forwarding-delete",
				Usage:     "Delete port forwarding",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target PortForward",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterPortForwardingDeleteParam.ParamTemplate = c.String("param-template")
					vpcrouterPortForwardingDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterPortForwardingDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewPortForwardingDeleteVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterPortForwardingDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcrouterPortForwardingDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						vpcrouterPortForwardingDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterPortForwardingDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterPortForwardingDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterPortForwardingDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterPortForwardingDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterPortForwardingDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterPortForwardingDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterPortForwardingDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterPortForwardingDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterPortForwardingDeleteParam.GenerateSkeleton {
						vpcrouterPortForwardingDeleteParam.GenerateSkeleton = false
						vpcrouterPortForwardingDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterPortForwardingDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterPortForwardingDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterPortForwardingDeleteParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterPortForwardingDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterPortForwardingDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterPortForwardingDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterPortForwardingDeleteParam.Selector) == 0 || hasTags(&v, vpcrouterPortForwardingDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterPortForwardingDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("port-forwarding-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterPortForwardingDeleteParam.SetId(id)
						p := *vpcrouterPortForwardingDeleteParam // copy struct value
						vpcrouterPortForwardingDeleteParam := &p
						go func() {
							err := funcs.VpcrouterPortForwardingDelete(ctx, vpcrouterPortForwardingDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "firewall-info",
				Aliases:   []string{"firewall-list"},
				Usage:     "Show information of firewall rules",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "interface",
						Usage: "set target NIC index",
						Value: 0,
					},
					&cli.StringFlag{
						Name:  "direction",
						Usage: "[Required] set target direction[send/receive]",
						Value: "receive",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterFirewallInfoParam.ParamTemplate = c.String("param-template")
					vpcrouterFirewallInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterFirewallInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewFirewallInfoVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterFirewallInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("interface") {
						vpcrouterFirewallInfoParam.Interface = c.Int("interface")
					}
					if c.IsSet("direction") {
						vpcrouterFirewallInfoParam.Direction = c.String("direction")
					}
					if c.IsSet("selector") {
						vpcrouterFirewallInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcrouterFirewallInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterFirewallInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterFirewallInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterFirewallInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterFirewallInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcrouterFirewallInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcrouterFirewallInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcrouterFirewallInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcrouterFirewallInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcrouterFirewallInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcrouterFirewallInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcrouterFirewallInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcrouterFirewallInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterFirewallInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterFirewallInfoParam.GenerateSkeleton {
						vpcrouterFirewallInfoParam.GenerateSkeleton = false
						vpcrouterFirewallInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterFirewallInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterFirewallInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterFirewallInfoParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterFirewallInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterFirewallInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterFirewallInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterFirewallInfoParam.Selector) == 0 || hasTags(&v, vpcrouterFirewallInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterFirewallInfoParam.SetId(id)
						p := *vpcrouterFirewallInfoParam // copy struct value
						vpcrouterFirewallInfoParam := &p
						go func() {
							err := funcs.VpcrouterFirewallInfo(ctx, vpcrouterFirewallInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "firewall-add",
				Usage:     "Add firewall rule",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "interface",
						Usage: "set target NIC index",
						Value: 0,
					},
					&cli.StringFlag{
						Name:  "direction",
						Usage: "[Required] set target direction[send/receive]",
						Value: "receive",
					},
					&cli.StringFlag{
						Name:  "protocol",
						Usage: "[Required] set target protocol",
					},
					&cli.StringFlag{
						Name:  "source-network",
						Usage: "set source ipaddress or network address",
					},
					&cli.IntFlag{
						Name:  "source-port",
						Usage: "set source port",
					},
					&cli.StringFlag{
						Name:    "destination-network",
						Aliases: []string{"dest-network"},
						Usage:   "set destination ipaddress or network address",
					},
					&cli.IntFlag{
						Name:    "destination-port",
						Aliases: []string{"dest-port"},
						Usage:   "set destination port",
					},
					&cli.StringFlag{
						Name:  "action",
						Usage: "[Required] set action[allow/deny]",
						Value: "deny",
					},
					&cli.BoolFlag{
						Name:  "enable-logging",
						Usage: "enable logging",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set description",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterFirewallAddParam.ParamTemplate = c.String("param-template")
					vpcrouterFirewallAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterFirewallAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewFirewallAddVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterFirewallAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("interface") {
						vpcrouterFirewallAddParam.Interface = c.Int("interface")
					}
					if c.IsSet("direction") {
						vpcrouterFirewallAddParam.Direction = c.String("direction")
					}
					if c.IsSet("protocol") {
						vpcrouterFirewallAddParam.Protocol = c.String("protocol")
					}
					if c.IsSet("source-network") {
						vpcrouterFirewallAddParam.SourceNetwork = c.String("source-network")
					}
					if c.IsSet("source-port") {
						vpcrouterFirewallAddParam.SourcePort = c.Int("source-port")
					}
					if c.IsSet("destination-network") {
						vpcrouterFirewallAddParam.DestinationNetwork = c.String("destination-network")
					}
					if c.IsSet("destination-port") {
						vpcrouterFirewallAddParam.DestinationPort = c.Int("destination-port")
					}
					if c.IsSet("action") {
						vpcrouterFirewallAddParam.Action = c.String("action")
					}
					if c.IsSet("enable-logging") {
						vpcrouterFirewallAddParam.EnableLogging = c.Bool("enable-logging")
					}
					if c.IsSet("description") {
						vpcrouterFirewallAddParam.Description = c.String("description")
					}
					if c.IsSet("selector") {
						vpcrouterFirewallAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterFirewallAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterFirewallAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterFirewallAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterFirewallAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterFirewallAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterFirewallAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterFirewallAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterFirewallAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterFirewallAddParam.GenerateSkeleton {
						vpcrouterFirewallAddParam.GenerateSkeleton = false
						vpcrouterFirewallAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterFirewallAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterFirewallAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterFirewallAddParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterFirewallAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterFirewallAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterFirewallAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterFirewallAddParam.Selector) == 0 || hasTags(&v, vpcrouterFirewallAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterFirewallAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("firewall-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterFirewallAddParam.SetId(id)
						p := *vpcrouterFirewallAddParam // copy struct value
						vpcrouterFirewallAddParam := &p
						go func() {
							err := funcs.VpcrouterFirewallAdd(ctx, vpcrouterFirewallAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "firewall-update",
				Usage:     "Update firewall rule",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "interface",
						Usage: "set target NIC index",
						Value: 0,
					},
					&cli.StringFlag{
						Name:  "direction",
						Usage: "[Required] set target direction[send/receive]",
						Value: "receive",
					},
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target Firewall rule",
					},
					&cli.StringFlag{
						Name:  "protocol",
						Usage: "set target protocol",
					},
					&cli.StringFlag{
						Name:  "source-network",
						Usage: "set source ipaddress or network address",
					},
					&cli.IntFlag{
						Name:  "source-port",
						Usage: "set source port",
					},
					&cli.StringFlag{
						Name:    "destination-network",
						Aliases: []string{"dest-network"},
						Usage:   "set destination ipaddress or network address",
					},
					&cli.IntFlag{
						Name:    "destination-port",
						Aliases: []string{"dest-port"},
						Usage:   "set destination port",
					},
					&cli.StringFlag{
						Name:  "action",
						Usage: "set action[allow/deny]",
						Value: "deny",
					},
					&cli.BoolFlag{
						Name:  "enable-logging",
						Usage: "enable logging",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set description",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterFirewallUpdateParam.ParamTemplate = c.String("param-template")
					vpcrouterFirewallUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterFirewallUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewFirewallUpdateVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterFirewallUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("interface") {
						vpcrouterFirewallUpdateParam.Interface = c.Int("interface")
					}
					if c.IsSet("direction") {
						vpcrouterFirewallUpdateParam.Direction = c.String("direction")
					}
					if c.IsSet("index") {
						vpcrouterFirewallUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("protocol") {
						vpcrouterFirewallUpdateParam.Protocol = c.String("protocol")
					}
					if c.IsSet("source-network") {
						vpcrouterFirewallUpdateParam.SourceNetwork = c.String("source-network")
					}
					if c.IsSet("source-port") {
						vpcrouterFirewallUpdateParam.SourcePort = c.Int("source-port")
					}
					if c.IsSet("destination-network") {
						vpcrouterFirewallUpdateParam.DestinationNetwork = c.String("destination-network")
					}
					if c.IsSet("destination-port") {
						vpcrouterFirewallUpdateParam.DestinationPort = c.Int("destination-port")
					}
					if c.IsSet("action") {
						vpcrouterFirewallUpdateParam.Action = c.String("action")
					}
					if c.IsSet("enable-logging") {
						vpcrouterFirewallUpdateParam.EnableLogging = c.Bool("enable-logging")
					}
					if c.IsSet("description") {
						vpcrouterFirewallUpdateParam.Description = c.String("description")
					}
					if c.IsSet("selector") {
						vpcrouterFirewallUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterFirewallUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterFirewallUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterFirewallUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterFirewallUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterFirewallUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterFirewallUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterFirewallUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterFirewallUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterFirewallUpdateParam.GenerateSkeleton {
						vpcrouterFirewallUpdateParam.GenerateSkeleton = false
						vpcrouterFirewallUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterFirewallUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterFirewallUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterFirewallUpdateParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterFirewallUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterFirewallUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterFirewallUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterFirewallUpdateParam.Selector) == 0 || hasTags(&v, vpcrouterFirewallUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterFirewallUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("firewall-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterFirewallUpdateParam.SetId(id)
						p := *vpcrouterFirewallUpdateParam // copy struct value
						vpcrouterFirewallUpdateParam := &p
						go func() {
							err := funcs.VpcrouterFirewallUpdate(ctx, vpcrouterFirewallUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "firewall-delete",
				Usage:     "Delete firewall rule",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "interface",
						Usage: "set target NIC index",
						Value: 0,
					},
					&cli.StringFlag{
						Name:  "direction",
						Usage: "[Required] set target direction[send/receive]",
						Value: "receive",
					},
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target Firewall rule",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterFirewallDeleteParam.ParamTemplate = c.String("param-template")
					vpcrouterFirewallDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterFirewallDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewFirewallDeleteVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterFirewallDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("interface") {
						vpcrouterFirewallDeleteParam.Interface = c.Int("interface")
					}
					if c.IsSet("direction") {
						vpcrouterFirewallDeleteParam.Direction = c.String("direction")
					}
					if c.IsSet("index") {
						vpcrouterFirewallDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						vpcrouterFirewallDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterFirewallDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterFirewallDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterFirewallDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterFirewallDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterFirewallDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterFirewallDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterFirewallDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterFirewallDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterFirewallDeleteParam.GenerateSkeleton {
						vpcrouterFirewallDeleteParam.GenerateSkeleton = false
						vpcrouterFirewallDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterFirewallDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterFirewallDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterFirewallDeleteParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterFirewallDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterFirewallDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterFirewallDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterFirewallDeleteParam.Selector) == 0 || hasTags(&v, vpcrouterFirewallDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterFirewallDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("firewall-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterFirewallDeleteParam.SetId(id)
						p := *vpcrouterFirewallDeleteParam // copy struct value
						vpcrouterFirewallDeleteParam := &p
						go func() {
							err := funcs.VpcrouterFirewallDelete(ctx, vpcrouterFirewallDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "dhcp-server-info",
				Aliases:   []string{"dhcp-server-list"},
				Usage:     "Show information of DHCP servers",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterDhcpServerInfoParam.ParamTemplate = c.String("param-template")
					vpcrouterDhcpServerInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterDhcpServerInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDhcpServerInfoVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterDhcpServerInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcrouterDhcpServerInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcrouterDhcpServerInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterDhcpServerInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterDhcpServerInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterDhcpServerInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterDhcpServerInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcrouterDhcpServerInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcrouterDhcpServerInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcrouterDhcpServerInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcrouterDhcpServerInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcrouterDhcpServerInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcrouterDhcpServerInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcrouterDhcpServerInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcrouterDhcpServerInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterDhcpServerInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterDhcpServerInfoParam.GenerateSkeleton {
						vpcrouterDhcpServerInfoParam.GenerateSkeleton = false
						vpcrouterDhcpServerInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterDhcpServerInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterDhcpServerInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterDhcpServerInfoParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterDhcpServerInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterDhcpServerInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterDhcpServerInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterDhcpServerInfoParam.Selector) == 0 || hasTags(&v, vpcrouterDhcpServerInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterDhcpServerInfoParam.SetId(id)
						p := *vpcrouterDhcpServerInfoParam // copy struct value
						vpcrouterDhcpServerInfoParam := &p
						go func() {
							err := funcs.VpcrouterDhcpServerInfo(ctx, vpcrouterDhcpServerInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "dhcp-server-add",
				Usage:     "Add DHCP server",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "interface",
						Usage: "[Required] set target NIC(private NIC index)",
					},
					&cli.StringFlag{
						Name:  "range-start",
						Usage: "[Required] set DHCP IPAddress Range(start)",
					},
					&cli.StringFlag{
						Name:    "range-stop",
						Aliases: []string{"range-end"},
						Usage:   "[Required] set DHCP IPAddress Range(stop)",
					},
					&cli.StringSliceFlag{
						Name:  "dns-servers",
						Usage: "set DNS Server IPAddress",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterDhcpServerAddParam.ParamTemplate = c.String("param-template")
					vpcrouterDhcpServerAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterDhcpServerAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDhcpServerAddVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterDhcpServerAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("interface") {
						vpcrouterDhcpServerAddParam.Interface = c.Int("interface")
					}
					if c.IsSet("range-start") {
						vpcrouterDhcpServerAddParam.RangeStart = c.String("range-start")
					}
					if c.IsSet("range-stop") {
						vpcrouterDhcpServerAddParam.RangeStop = c.String("range-stop")
					}
					if c.IsSet("dns-servers") {
						vpcrouterDhcpServerAddParam.DnsServers = c.StringSlice("dns-servers")
					}
					if c.IsSet("selector") {
						vpcrouterDhcpServerAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterDhcpServerAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterDhcpServerAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterDhcpServerAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterDhcpServerAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterDhcpServerAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterDhcpServerAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterDhcpServerAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterDhcpServerAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterDhcpServerAddParam.GenerateSkeleton {
						vpcrouterDhcpServerAddParam.GenerateSkeleton = false
						vpcrouterDhcpServerAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterDhcpServerAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterDhcpServerAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterDhcpServerAddParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterDhcpServerAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterDhcpServerAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterDhcpServerAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterDhcpServerAddParam.Selector) == 0 || hasTags(&v, vpcrouterDhcpServerAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterDhcpServerAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("dhcp-server-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterDhcpServerAddParam.SetId(id)
						p := *vpcrouterDhcpServerAddParam // copy struct value
						vpcrouterDhcpServerAddParam := &p
						go func() {
							err := funcs.VpcrouterDhcpServerAdd(ctx, vpcrouterDhcpServerAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "dhcp-server-update",
				Usage:     "Update DHCP server",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "interface",
						Usage: "[Required] set target NIC(private NIC index)",
					},
					&cli.StringFlag{
						Name:  "range-start",
						Usage: "set DHCP IPAddress Range(start)",
					},
					&cli.StringFlag{
						Name:    "range-stop",
						Aliases: []string{"range-end"},
						Usage:   "set DHCP IPAddress Range(stop)",
					},
					&cli.StringSliceFlag{
						Name:  "dns-servers",
						Usage: "set DNS Server IPAddress",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterDhcpServerUpdateParam.ParamTemplate = c.String("param-template")
					vpcrouterDhcpServerUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterDhcpServerUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDhcpServerUpdateVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterDhcpServerUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("interface") {
						vpcrouterDhcpServerUpdateParam.Interface = c.Int("interface")
					}
					if c.IsSet("range-start") {
						vpcrouterDhcpServerUpdateParam.RangeStart = c.String("range-start")
					}
					if c.IsSet("range-stop") {
						vpcrouterDhcpServerUpdateParam.RangeStop = c.String("range-stop")
					}
					if c.IsSet("dns-servers") {
						vpcrouterDhcpServerUpdateParam.DnsServers = c.StringSlice("dns-servers")
					}
					if c.IsSet("selector") {
						vpcrouterDhcpServerUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterDhcpServerUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterDhcpServerUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterDhcpServerUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterDhcpServerUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterDhcpServerUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterDhcpServerUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterDhcpServerUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterDhcpServerUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterDhcpServerUpdateParam.GenerateSkeleton {
						vpcrouterDhcpServerUpdateParam.GenerateSkeleton = false
						vpcrouterDhcpServerUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterDhcpServerUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterDhcpServerUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterDhcpServerUpdateParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterDhcpServerUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterDhcpServerUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterDhcpServerUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterDhcpServerUpdateParam.Selector) == 0 || hasTags(&v, vpcrouterDhcpServerUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterDhcpServerUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("dhcp-server-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterDhcpServerUpdateParam.SetId(id)
						p := *vpcrouterDhcpServerUpdateParam // copy struct value
						vpcrouterDhcpServerUpdateParam := &p
						go func() {
							err := funcs.VpcrouterDhcpServerUpdate(ctx, vpcrouterDhcpServerUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "dhcp-server-delete",
				Usage:     "Delete DHCP server",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "interface",
						Usage: "[Required] set target NIC(private NIC index)",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterDhcpServerDeleteParam.ParamTemplate = c.String("param-template")
					vpcrouterDhcpServerDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterDhcpServerDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDhcpServerDeleteVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterDhcpServerDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("interface") {
						vpcrouterDhcpServerDeleteParam.Interface = c.Int("interface")
					}
					if c.IsSet("selector") {
						vpcrouterDhcpServerDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterDhcpServerDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterDhcpServerDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterDhcpServerDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterDhcpServerDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterDhcpServerDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterDhcpServerDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterDhcpServerDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterDhcpServerDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterDhcpServerDeleteParam.GenerateSkeleton {
						vpcrouterDhcpServerDeleteParam.GenerateSkeleton = false
						vpcrouterDhcpServerDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterDhcpServerDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterDhcpServerDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterDhcpServerDeleteParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterDhcpServerDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterDhcpServerDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterDhcpServerDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterDhcpServerDeleteParam.Selector) == 0 || hasTags(&v, vpcrouterDhcpServerDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterDhcpServerDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("dhcp-server-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterDhcpServerDeleteParam.SetId(id)
						p := *vpcrouterDhcpServerDeleteParam // copy struct value
						vpcrouterDhcpServerDeleteParam := &p
						go func() {
							err := funcs.VpcrouterDhcpServerDelete(ctx, vpcrouterDhcpServerDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "dhcp-static-mapping-info",
				Aliases:   []string{"dhcp-static-mapping-list"},
				Usage:     "Show information of DHCP static mapping",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterDhcpStaticMappingInfoParam.ParamTemplate = c.String("param-template")
					vpcrouterDhcpStaticMappingInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterDhcpStaticMappingInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDhcpStaticMappingInfoVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterDhcpStaticMappingInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcrouterDhcpStaticMappingInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcrouterDhcpStaticMappingInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterDhcpStaticMappingInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterDhcpStaticMappingInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterDhcpStaticMappingInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterDhcpStaticMappingInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcrouterDhcpStaticMappingInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcrouterDhcpStaticMappingInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcrouterDhcpStaticMappingInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcrouterDhcpStaticMappingInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcrouterDhcpStaticMappingInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcrouterDhcpStaticMappingInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcrouterDhcpStaticMappingInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcrouterDhcpStaticMappingInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterDhcpStaticMappingInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterDhcpStaticMappingInfoParam.GenerateSkeleton {
						vpcrouterDhcpStaticMappingInfoParam.GenerateSkeleton = false
						vpcrouterDhcpStaticMappingInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterDhcpStaticMappingInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterDhcpStaticMappingInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterDhcpStaticMappingInfoParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterDhcpStaticMappingInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterDhcpStaticMappingInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterDhcpStaticMappingInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterDhcpStaticMappingInfoParam.Selector) == 0 || hasTags(&v, vpcrouterDhcpStaticMappingInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterDhcpStaticMappingInfoParam.SetId(id)
						p := *vpcrouterDhcpStaticMappingInfoParam // copy struct value
						vpcrouterDhcpStaticMappingInfoParam := &p
						go func() {
							err := funcs.VpcrouterDhcpStaticMappingInfo(ctx, vpcrouterDhcpStaticMappingInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "dhcp-static-mapping-add",
				Usage:     "Add DHCP static mapping",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "macaddress",
						Aliases: []string{"mac"},
						Usage:   "[Required] set mac address",
					},
					&cli.StringFlag{
						Name:    "ipaddress",
						Aliases: []string{"ip"},
						Usage:   "[Required] set ipaddress",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterDhcpStaticMappingAddParam.ParamTemplate = c.String("param-template")
					vpcrouterDhcpStaticMappingAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterDhcpStaticMappingAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDhcpStaticMappingAddVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterDhcpStaticMappingAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("macaddress") {
						vpcrouterDhcpStaticMappingAddParam.Macaddress = c.String("macaddress")
					}
					if c.IsSet("ipaddress") {
						vpcrouterDhcpStaticMappingAddParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("selector") {
						vpcrouterDhcpStaticMappingAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterDhcpStaticMappingAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterDhcpStaticMappingAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterDhcpStaticMappingAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterDhcpStaticMappingAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterDhcpStaticMappingAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterDhcpStaticMappingAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterDhcpStaticMappingAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterDhcpStaticMappingAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterDhcpStaticMappingAddParam.GenerateSkeleton {
						vpcrouterDhcpStaticMappingAddParam.GenerateSkeleton = false
						vpcrouterDhcpStaticMappingAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterDhcpStaticMappingAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterDhcpStaticMappingAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterDhcpStaticMappingAddParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterDhcpStaticMappingAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterDhcpStaticMappingAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterDhcpStaticMappingAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterDhcpStaticMappingAddParam.Selector) == 0 || hasTags(&v, vpcrouterDhcpStaticMappingAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterDhcpStaticMappingAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("dhcp-static-mapping-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterDhcpStaticMappingAddParam.SetId(id)
						p := *vpcrouterDhcpStaticMappingAddParam // copy struct value
						vpcrouterDhcpStaticMappingAddParam := &p
						go func() {
							err := funcs.VpcrouterDhcpStaticMappingAdd(ctx, vpcrouterDhcpStaticMappingAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "dhcp-static-mapping-update",
				Usage:     "Update DHCP static mapping",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target DHCP static mapping",
					},
					&cli.StringFlag{
						Name:    "macaddress",
						Aliases: []string{"mac"},
						Usage:   "set mac address",
					},
					&cli.StringFlag{
						Name:    "ipaddress",
						Aliases: []string{"ip"},
						Usage:   "set ipaddress",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterDhcpStaticMappingUpdateParam.ParamTemplate = c.String("param-template")
					vpcrouterDhcpStaticMappingUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterDhcpStaticMappingUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDhcpStaticMappingUpdateVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterDhcpStaticMappingUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcrouterDhcpStaticMappingUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("macaddress") {
						vpcrouterDhcpStaticMappingUpdateParam.Macaddress = c.String("macaddress")
					}
					if c.IsSet("ipaddress") {
						vpcrouterDhcpStaticMappingUpdateParam.Ipaddress = c.String("ipaddress")
					}
					if c.IsSet("selector") {
						vpcrouterDhcpStaticMappingUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterDhcpStaticMappingUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterDhcpStaticMappingUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterDhcpStaticMappingUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterDhcpStaticMappingUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterDhcpStaticMappingUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterDhcpStaticMappingUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterDhcpStaticMappingUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterDhcpStaticMappingUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterDhcpStaticMappingUpdateParam.GenerateSkeleton {
						vpcrouterDhcpStaticMappingUpdateParam.GenerateSkeleton = false
						vpcrouterDhcpStaticMappingUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterDhcpStaticMappingUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterDhcpStaticMappingUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterDhcpStaticMappingUpdateParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterDhcpStaticMappingUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterDhcpStaticMappingUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterDhcpStaticMappingUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterDhcpStaticMappingUpdateParam.Selector) == 0 || hasTags(&v, vpcrouterDhcpStaticMappingUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterDhcpStaticMappingUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("dhcp-static-mapping-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterDhcpStaticMappingUpdateParam.SetId(id)
						p := *vpcrouterDhcpStaticMappingUpdateParam // copy struct value
						vpcrouterDhcpStaticMappingUpdateParam := &p
						go func() {
							err := funcs.VpcrouterDhcpStaticMappingUpdate(ctx, vpcrouterDhcpStaticMappingUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "dhcp-static-mapping-delete",
				Usage:     "Delete DHCP static mapping",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target DHCP static mapping",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterDhcpStaticMappingDeleteParam.ParamTemplate = c.String("param-template")
					vpcrouterDhcpStaticMappingDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterDhcpStaticMappingDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDhcpStaticMappingDeleteVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterDhcpStaticMappingDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcrouterDhcpStaticMappingDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						vpcrouterDhcpStaticMappingDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterDhcpStaticMappingDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterDhcpStaticMappingDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterDhcpStaticMappingDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterDhcpStaticMappingDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterDhcpStaticMappingDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterDhcpStaticMappingDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterDhcpStaticMappingDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterDhcpStaticMappingDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterDhcpStaticMappingDeleteParam.GenerateSkeleton {
						vpcrouterDhcpStaticMappingDeleteParam.GenerateSkeleton = false
						vpcrouterDhcpStaticMappingDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterDhcpStaticMappingDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterDhcpStaticMappingDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterDhcpStaticMappingDeleteParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterDhcpStaticMappingDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterDhcpStaticMappingDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterDhcpStaticMappingDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterDhcpStaticMappingDeleteParam.Selector) == 0 || hasTags(&v, vpcrouterDhcpStaticMappingDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterDhcpStaticMappingDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("dhcp-static-mapping-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterDhcpStaticMappingDeleteParam.SetId(id)
						p := *vpcrouterDhcpStaticMappingDeleteParam // copy struct value
						vpcrouterDhcpStaticMappingDeleteParam := &p
						go func() {
							err := funcs.VpcrouterDhcpStaticMappingDelete(ctx, vpcrouterDhcpStaticMappingDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "pptp-server-info",
				Usage:     "Show information of PPTP server",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterPptpServerInfoParam.ParamTemplate = c.String("param-template")
					vpcrouterPptpServerInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterPptpServerInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewPptpServerInfoVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterPptpServerInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcrouterPptpServerInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcrouterPptpServerInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterPptpServerInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterPptpServerInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterPptpServerInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterPptpServerInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcrouterPptpServerInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcrouterPptpServerInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcrouterPptpServerInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcrouterPptpServerInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcrouterPptpServerInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcrouterPptpServerInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcrouterPptpServerInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcrouterPptpServerInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterPptpServerInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterPptpServerInfoParam.GenerateSkeleton {
						vpcrouterPptpServerInfoParam.GenerateSkeleton = false
						vpcrouterPptpServerInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterPptpServerInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterPptpServerInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterPptpServerInfoParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterPptpServerInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterPptpServerInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterPptpServerInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterPptpServerInfoParam.Selector) == 0 || hasTags(&v, vpcrouterPptpServerInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterPptpServerInfoParam.SetId(id)
						p := *vpcrouterPptpServerInfoParam // copy struct value
						vpcrouterPptpServerInfoParam := &p
						go func() {
							err := funcs.VpcrouterPptpServerInfo(ctx, vpcrouterPptpServerInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "pptp-server-update",
				Usage:     "Update PPTP server setting",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:  "disabled",
						Usage: "enable/disable PPTP server",
					},
					&cli.StringFlag{
						Name:  "range-start",
						Usage: "set IPAddress Range(start)",
					},
					&cli.StringFlag{
						Name:    "range-stop",
						Aliases: []string{"range-end"},
						Usage:   "set IPAddress Range(stop)",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterPptpServerUpdateParam.ParamTemplate = c.String("param-template")
					vpcrouterPptpServerUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterPptpServerUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewPptpServerUpdateVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterPptpServerUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("disabled") {
						vpcrouterPptpServerUpdateParam.Disabled = c.Bool("disabled")
					}
					if c.IsSet("range-start") {
						vpcrouterPptpServerUpdateParam.RangeStart = c.String("range-start")
					}
					if c.IsSet("range-stop") {
						vpcrouterPptpServerUpdateParam.RangeStop = c.String("range-stop")
					}
					if c.IsSet("selector") {
						vpcrouterPptpServerUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterPptpServerUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterPptpServerUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterPptpServerUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterPptpServerUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterPptpServerUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterPptpServerUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterPptpServerUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterPptpServerUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterPptpServerUpdateParam.GenerateSkeleton {
						vpcrouterPptpServerUpdateParam.GenerateSkeleton = false
						vpcrouterPptpServerUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterPptpServerUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterPptpServerUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterPptpServerUpdateParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterPptpServerUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterPptpServerUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterPptpServerUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterPptpServerUpdateParam.Selector) == 0 || hasTags(&v, vpcrouterPptpServerUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterPptpServerUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("pptp-server-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterPptpServerUpdateParam.SetId(id)
						p := *vpcrouterPptpServerUpdateParam // copy struct value
						vpcrouterPptpServerUpdateParam := &p
						go func() {
							err := funcs.VpcrouterPptpServerUpdate(ctx, vpcrouterPptpServerUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "l2tp-server-info",
				Usage:     "Show information of L2TP/IPSec server",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterL2tpServerInfoParam.ParamTemplate = c.String("param-template")
					vpcrouterL2tpServerInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterL2tpServerInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewL2tpServerInfoVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterL2tpServerInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcrouterL2tpServerInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcrouterL2tpServerInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterL2tpServerInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterL2tpServerInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterL2tpServerInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterL2tpServerInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcrouterL2tpServerInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcrouterL2tpServerInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcrouterL2tpServerInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcrouterL2tpServerInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcrouterL2tpServerInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcrouterL2tpServerInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcrouterL2tpServerInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcrouterL2tpServerInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterL2tpServerInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterL2tpServerInfoParam.GenerateSkeleton {
						vpcrouterL2tpServerInfoParam.GenerateSkeleton = false
						vpcrouterL2tpServerInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterL2tpServerInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterL2tpServerInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterL2tpServerInfoParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterL2tpServerInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterL2tpServerInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterL2tpServerInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterL2tpServerInfoParam.Selector) == 0 || hasTags(&v, vpcrouterL2tpServerInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterL2tpServerInfoParam.SetId(id)
						p := *vpcrouterL2tpServerInfoParam // copy struct value
						vpcrouterL2tpServerInfoParam := &p
						go func() {
							err := funcs.VpcrouterL2tpServerInfo(ctx, vpcrouterL2tpServerInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "l2tp-server-update",
				Usage:     "Update L2TP/IPSec server setting",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:  "disabled",
						Usage: "enable/disable PPTP server",
					},
					&cli.StringFlag{
						Name:  "range-start",
						Usage: "set IPAddress Range(start)",
					},
					&cli.StringFlag{
						Name:    "range-stop",
						Aliases: []string{"range-end"},
						Usage:   "set IPAddress Range(stop)",
					},
					&cli.StringFlag{
						Name:  "pre-shared-secret",
						Usage: "set PreSharedSecret",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterL2tpServerUpdateParam.ParamTemplate = c.String("param-template")
					vpcrouterL2tpServerUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterL2tpServerUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewL2tpServerUpdateVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterL2tpServerUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("disabled") {
						vpcrouterL2tpServerUpdateParam.Disabled = c.Bool("disabled")
					}
					if c.IsSet("range-start") {
						vpcrouterL2tpServerUpdateParam.RangeStart = c.String("range-start")
					}
					if c.IsSet("range-stop") {
						vpcrouterL2tpServerUpdateParam.RangeStop = c.String("range-stop")
					}
					if c.IsSet("pre-shared-secret") {
						vpcrouterL2tpServerUpdateParam.PreSharedSecret = c.String("pre-shared-secret")
					}
					if c.IsSet("selector") {
						vpcrouterL2tpServerUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterL2tpServerUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterL2tpServerUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterL2tpServerUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterL2tpServerUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterL2tpServerUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterL2tpServerUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterL2tpServerUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterL2tpServerUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterL2tpServerUpdateParam.GenerateSkeleton {
						vpcrouterL2tpServerUpdateParam.GenerateSkeleton = false
						vpcrouterL2tpServerUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterL2tpServerUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterL2tpServerUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterL2tpServerUpdateParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterL2tpServerUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterL2tpServerUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterL2tpServerUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterL2tpServerUpdateParam.Selector) == 0 || hasTags(&v, vpcrouterL2tpServerUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterL2tpServerUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("l-2tp-server-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterL2tpServerUpdateParam.SetId(id)
						p := *vpcrouterL2tpServerUpdateParam // copy struct value
						vpcrouterL2tpServerUpdateParam := &p
						go func() {
							err := funcs.VpcrouterL2tpServerUpdate(ctx, vpcrouterL2tpServerUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "user-info",
				Aliases:   []string{"user-list"},
				Usage:     "Show information of remote-access users",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterUserInfoParam.ParamTemplate = c.String("param-template")
					vpcrouterUserInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterUserInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewUserInfoVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterUserInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcrouterUserInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcrouterUserInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterUserInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterUserInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterUserInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterUserInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcrouterUserInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcrouterUserInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcrouterUserInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcrouterUserInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcrouterUserInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcrouterUserInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcrouterUserInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcrouterUserInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterUserInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterUserInfoParam.GenerateSkeleton {
						vpcrouterUserInfoParam.GenerateSkeleton = false
						vpcrouterUserInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterUserInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterUserInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterUserInfoParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterUserInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterUserInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterUserInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterUserInfoParam.Selector) == 0 || hasTags(&v, vpcrouterUserInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterUserInfoParam.SetId(id)
						p := *vpcrouterUserInfoParam // copy struct value
						vpcrouterUserInfoParam := &p
						go func() {
							err := funcs.VpcrouterUserInfo(ctx, vpcrouterUserInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "user-add",
				Usage:     "Add remote-access user",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "username",
						Aliases: []string{"user"},
						Usage:   "[Required] set remote-access username",
					},
					&cli.StringFlag{
						Name:    "password",
						Aliases: []string{"pass"},
						Usage:   "[Required] set remote-access password",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterUserAddParam.ParamTemplate = c.String("param-template")
					vpcrouterUserAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterUserAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewUserAddVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterUserAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("username") {
						vpcrouterUserAddParam.Username = c.String("username")
					}
					if c.IsSet("password") {
						vpcrouterUserAddParam.Password = c.String("password")
					}
					if c.IsSet("selector") {
						vpcrouterUserAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterUserAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterUserAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterUserAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterUserAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterUserAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterUserAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterUserAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterUserAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterUserAddParam.GenerateSkeleton {
						vpcrouterUserAddParam.GenerateSkeleton = false
						vpcrouterUserAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterUserAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterUserAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterUserAddParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterUserAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterUserAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterUserAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterUserAddParam.Selector) == 0 || hasTags(&v, vpcrouterUserAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterUserAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("user-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterUserAddParam.SetId(id)
						p := *vpcrouterUserAddParam // copy struct value
						vpcrouterUserAddParam := &p
						go func() {
							err := funcs.VpcrouterUserAdd(ctx, vpcrouterUserAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "user-update",
				Usage:     "Update remote-access user",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target remote-access user",
					},
					&cli.StringFlag{
						Name:    "username",
						Aliases: []string{"user"},
						Usage:   "set remote-access username",
					},
					&cli.StringFlag{
						Name:    "password",
						Aliases: []string{"pass"},
						Usage:   "set remote-access password",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterUserUpdateParam.ParamTemplate = c.String("param-template")
					vpcrouterUserUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterUserUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewUserUpdateVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterUserUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcrouterUserUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("username") {
						vpcrouterUserUpdateParam.Username = c.String("username")
					}
					if c.IsSet("password") {
						vpcrouterUserUpdateParam.Password = c.String("password")
					}
					if c.IsSet("selector") {
						vpcrouterUserUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterUserUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterUserUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterUserUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterUserUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterUserUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterUserUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterUserUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterUserUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterUserUpdateParam.GenerateSkeleton {
						vpcrouterUserUpdateParam.GenerateSkeleton = false
						vpcrouterUserUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterUserUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterUserUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterUserUpdateParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterUserUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterUserUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterUserUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterUserUpdateParam.Selector) == 0 || hasTags(&v, vpcrouterUserUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterUserUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("user-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterUserUpdateParam.SetId(id)
						p := *vpcrouterUserUpdateParam // copy struct value
						vpcrouterUserUpdateParam := &p
						go func() {
							err := funcs.VpcrouterUserUpdate(ctx, vpcrouterUserUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "user-delete",
				Usage:     "Delete remote-access user",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target remote-access user",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterUserDeleteParam.ParamTemplate = c.String("param-template")
					vpcrouterUserDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterUserDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewUserDeleteVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterUserDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcrouterUserDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						vpcrouterUserDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterUserDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterUserDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterUserDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterUserDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterUserDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterUserDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterUserDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterUserDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterUserDeleteParam.GenerateSkeleton {
						vpcrouterUserDeleteParam.GenerateSkeleton = false
						vpcrouterUserDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterUserDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterUserDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterUserDeleteParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterUserDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterUserDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterUserDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterUserDeleteParam.Selector) == 0 || hasTags(&v, vpcrouterUserDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterUserDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("user-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterUserDeleteParam.SetId(id)
						p := *vpcrouterUserDeleteParam // copy struct value
						vpcrouterUserDeleteParam := &p
						go func() {
							err := funcs.VpcrouterUserDelete(ctx, vpcrouterUserDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "site-to-site-vpn-info",
				Aliases:   []string{"site-to-site-vpn-list"},
				Usage:     "Show information of site-to-site IPSec VPN settings",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterSiteToSiteVpnInfoParam.ParamTemplate = c.String("param-template")
					vpcrouterSiteToSiteVpnInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterSiteToSiteVpnInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSiteToSiteVpnInfoVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterSiteToSiteVpnInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcrouterSiteToSiteVpnInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcrouterSiteToSiteVpnInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterSiteToSiteVpnInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterSiteToSiteVpnInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterSiteToSiteVpnInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterSiteToSiteVpnInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcrouterSiteToSiteVpnInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcrouterSiteToSiteVpnInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcrouterSiteToSiteVpnInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcrouterSiteToSiteVpnInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcrouterSiteToSiteVpnInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcrouterSiteToSiteVpnInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcrouterSiteToSiteVpnInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcrouterSiteToSiteVpnInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterSiteToSiteVpnInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterSiteToSiteVpnInfoParam.GenerateSkeleton {
						vpcrouterSiteToSiteVpnInfoParam.GenerateSkeleton = false
						vpcrouterSiteToSiteVpnInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterSiteToSiteVpnInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterSiteToSiteVpnInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterSiteToSiteVpnInfoParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterSiteToSiteVpnInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterSiteToSiteVpnInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterSiteToSiteVpnInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterSiteToSiteVpnInfoParam.Selector) == 0 || hasTags(&v, vpcrouterSiteToSiteVpnInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterSiteToSiteVpnInfoParam.SetId(id)
						p := *vpcrouterSiteToSiteVpnInfoParam // copy struct value
						vpcrouterSiteToSiteVpnInfoParam := &p
						go func() {
							err := funcs.VpcrouterSiteToSiteVpnInfo(ctx, vpcrouterSiteToSiteVpnInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "site-to-site-vpn-add",
				Usage:     "Add site-to-site IPSec VPN setting",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "peer",
						Usage: "[Required] set peer address",
					},
					&cli.StringFlag{
						Name:  "remote-id",
						Usage: "[Required] set remote-id",
					},
					&cli.StringFlag{
						Name:  "pre-shared-secret",
						Usage: "[Required] set pre-shared-secret",
					},
					&cli.StringSliceFlag{
						Name:  "routes",
						Usage: "[Required] set route list",
					},
					&cli.StringSliceFlag{
						Name:  "local-prefix",
						Usage: "[Required] set local prefix list",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterSiteToSiteVpnAddParam.ParamTemplate = c.String("param-template")
					vpcrouterSiteToSiteVpnAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterSiteToSiteVpnAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSiteToSiteVpnAddVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterSiteToSiteVpnAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("peer") {
						vpcrouterSiteToSiteVpnAddParam.Peer = c.String("peer")
					}
					if c.IsSet("remote-id") {
						vpcrouterSiteToSiteVpnAddParam.RemoteId = c.String("remote-id")
					}
					if c.IsSet("pre-shared-secret") {
						vpcrouterSiteToSiteVpnAddParam.PreSharedSecret = c.String("pre-shared-secret")
					}
					if c.IsSet("routes") {
						vpcrouterSiteToSiteVpnAddParam.Routes = c.StringSlice("routes")
					}
					if c.IsSet("local-prefix") {
						vpcrouterSiteToSiteVpnAddParam.LocalPrefix = c.StringSlice("local-prefix")
					}
					if c.IsSet("selector") {
						vpcrouterSiteToSiteVpnAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterSiteToSiteVpnAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterSiteToSiteVpnAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterSiteToSiteVpnAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterSiteToSiteVpnAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterSiteToSiteVpnAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterSiteToSiteVpnAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterSiteToSiteVpnAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterSiteToSiteVpnAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterSiteToSiteVpnAddParam.GenerateSkeleton {
						vpcrouterSiteToSiteVpnAddParam.GenerateSkeleton = false
						vpcrouterSiteToSiteVpnAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterSiteToSiteVpnAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterSiteToSiteVpnAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterSiteToSiteVpnAddParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterSiteToSiteVpnAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterSiteToSiteVpnAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterSiteToSiteVpnAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterSiteToSiteVpnAddParam.Selector) == 0 || hasTags(&v, vpcrouterSiteToSiteVpnAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterSiteToSiteVpnAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("site-to-site-vpn-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterSiteToSiteVpnAddParam.SetId(id)
						p := *vpcrouterSiteToSiteVpnAddParam // copy struct value
						vpcrouterSiteToSiteVpnAddParam := &p
						go func() {
							err := funcs.VpcrouterSiteToSiteVpnAdd(ctx, vpcrouterSiteToSiteVpnAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "site-to-site-vpn-update",
				Usage:     "Update site-to-site IPSec VPN setting",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target remote-access user",
					},
					&cli.StringFlag{
						Name:  "peer",
						Usage: "set peer address",
					},
					&cli.StringFlag{
						Name:  "remote-id",
						Usage: "set remote-id",
					},
					&cli.StringFlag{
						Name:  "pre-shared-secret",
						Usage: "set pre-shared-secret",
					},
					&cli.StringSliceFlag{
						Name:  "routes",
						Usage: "set route list",
					},
					&cli.StringSliceFlag{
						Name:  "local-prefix",
						Usage: "set local prefix list",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterSiteToSiteVpnUpdateParam.ParamTemplate = c.String("param-template")
					vpcrouterSiteToSiteVpnUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterSiteToSiteVpnUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSiteToSiteVpnUpdateVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterSiteToSiteVpnUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcrouterSiteToSiteVpnUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("peer") {
						vpcrouterSiteToSiteVpnUpdateParam.Peer = c.String("peer")
					}
					if c.IsSet("remote-id") {
						vpcrouterSiteToSiteVpnUpdateParam.RemoteId = c.String("remote-id")
					}
					if c.IsSet("pre-shared-secret") {
						vpcrouterSiteToSiteVpnUpdateParam.PreSharedSecret = c.String("pre-shared-secret")
					}
					if c.IsSet("routes") {
						vpcrouterSiteToSiteVpnUpdateParam.Routes = c.StringSlice("routes")
					}
					if c.IsSet("local-prefix") {
						vpcrouterSiteToSiteVpnUpdateParam.LocalPrefix = c.StringSlice("local-prefix")
					}
					if c.IsSet("selector") {
						vpcrouterSiteToSiteVpnUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterSiteToSiteVpnUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterSiteToSiteVpnUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterSiteToSiteVpnUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterSiteToSiteVpnUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterSiteToSiteVpnUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterSiteToSiteVpnUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterSiteToSiteVpnUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterSiteToSiteVpnUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterSiteToSiteVpnUpdateParam.GenerateSkeleton {
						vpcrouterSiteToSiteVpnUpdateParam.GenerateSkeleton = false
						vpcrouterSiteToSiteVpnUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterSiteToSiteVpnUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterSiteToSiteVpnUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterSiteToSiteVpnUpdateParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterSiteToSiteVpnUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterSiteToSiteVpnUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterSiteToSiteVpnUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterSiteToSiteVpnUpdateParam.Selector) == 0 || hasTags(&v, vpcrouterSiteToSiteVpnUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterSiteToSiteVpnUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("site-to-site-vpn-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterSiteToSiteVpnUpdateParam.SetId(id)
						p := *vpcrouterSiteToSiteVpnUpdateParam // copy struct value
						vpcrouterSiteToSiteVpnUpdateParam := &p
						go func() {
							err := funcs.VpcrouterSiteToSiteVpnUpdate(ctx, vpcrouterSiteToSiteVpnUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "site-to-site-vpn-delete",
				Usage:     "Delete site-to-site IPSec VPN setting",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target remote-access user",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterSiteToSiteVpnDeleteParam.ParamTemplate = c.String("param-template")
					vpcrouterSiteToSiteVpnDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterSiteToSiteVpnDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSiteToSiteVpnDeleteVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterSiteToSiteVpnDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcrouterSiteToSiteVpnDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						vpcrouterSiteToSiteVpnDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterSiteToSiteVpnDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterSiteToSiteVpnDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterSiteToSiteVpnDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterSiteToSiteVpnDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterSiteToSiteVpnDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterSiteToSiteVpnDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterSiteToSiteVpnDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterSiteToSiteVpnDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterSiteToSiteVpnDeleteParam.GenerateSkeleton {
						vpcrouterSiteToSiteVpnDeleteParam.GenerateSkeleton = false
						vpcrouterSiteToSiteVpnDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterSiteToSiteVpnDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterSiteToSiteVpnDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterSiteToSiteVpnDeleteParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterSiteToSiteVpnDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterSiteToSiteVpnDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterSiteToSiteVpnDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterSiteToSiteVpnDeleteParam.Selector) == 0 || hasTags(&v, vpcrouterSiteToSiteVpnDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterSiteToSiteVpnDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("site-to-site-vpn-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterSiteToSiteVpnDeleteParam.SetId(id)
						p := *vpcrouterSiteToSiteVpnDeleteParam // copy struct value
						vpcrouterSiteToSiteVpnDeleteParam := &p
						go func() {
							err := funcs.VpcrouterSiteToSiteVpnDelete(ctx, vpcrouterSiteToSiteVpnDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "site-to-site-vpn-peers",
				Usage:     "Show status of site-to-site IPSec VPN peers",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterSiteToSiteVpnPeersParam.ParamTemplate = c.String("param-template")
					vpcrouterSiteToSiteVpnPeersParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterSiteToSiteVpnPeersParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewSiteToSiteVpnPeersVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterSiteToSiteVpnPeersParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcrouterSiteToSiteVpnPeersParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcrouterSiteToSiteVpnPeersParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterSiteToSiteVpnPeersParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterSiteToSiteVpnPeersParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterSiteToSiteVpnPeersParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterSiteToSiteVpnPeersParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcrouterSiteToSiteVpnPeersParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcrouterSiteToSiteVpnPeersParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcrouterSiteToSiteVpnPeersParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcrouterSiteToSiteVpnPeersParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcrouterSiteToSiteVpnPeersParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcrouterSiteToSiteVpnPeersParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcrouterSiteToSiteVpnPeersParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcrouterSiteToSiteVpnPeersParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterSiteToSiteVpnPeersParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterSiteToSiteVpnPeersParam.GenerateSkeleton {
						vpcrouterSiteToSiteVpnPeersParam.GenerateSkeleton = false
						vpcrouterSiteToSiteVpnPeersParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterSiteToSiteVpnPeersParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterSiteToSiteVpnPeersParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterSiteToSiteVpnPeersParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterSiteToSiteVpnPeersParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterSiteToSiteVpnPeersParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterSiteToSiteVpnPeersParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterSiteToSiteVpnPeersParam.Selector) == 0 || hasTags(&v, vpcrouterSiteToSiteVpnPeersParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterSiteToSiteVpnPeersParam.SetId(id)
						p := *vpcrouterSiteToSiteVpnPeersParam // copy struct value
						vpcrouterSiteToSiteVpnPeersParam := &p
						go func() {
							err := funcs.VpcrouterSiteToSiteVpnPeers(ctx, vpcrouterSiteToSiteVpnPeersParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-route-info",
				Aliases:   []string{"static-route-list"},
				Usage:     "Show information of static-routes",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterStaticRouteInfoParam.ParamTemplate = c.String("param-template")
					vpcrouterStaticRouteInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterStaticRouteInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticRouteInfoVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterStaticRouteInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						vpcrouterStaticRouteInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcrouterStaticRouteInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterStaticRouteInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterStaticRouteInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterStaticRouteInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterStaticRouteInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcrouterStaticRouteInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcrouterStaticRouteInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcrouterStaticRouteInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcrouterStaticRouteInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcrouterStaticRouteInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcrouterStaticRouteInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcrouterStaticRouteInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcrouterStaticRouteInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterStaticRouteInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterStaticRouteInfoParam.GenerateSkeleton {
						vpcrouterStaticRouteInfoParam.GenerateSkeleton = false
						vpcrouterStaticRouteInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterStaticRouteInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterStaticRouteInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterStaticRouteInfoParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterStaticRouteInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterStaticRouteInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterStaticRouteInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterStaticRouteInfoParam.Selector) == 0 || hasTags(&v, vpcrouterStaticRouteInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterStaticRouteInfoParam.SetId(id)
						p := *vpcrouterStaticRouteInfoParam // copy struct value
						vpcrouterStaticRouteInfoParam := &p
						go func() {
							err := funcs.VpcrouterStaticRouteInfo(ctx, vpcrouterStaticRouteInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-route-add",
				Usage:     "Add static-route",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "prefix",
						Usage: "[Required] set prefix",
					},
					&cli.StringFlag{
						Name:  "next-hop",
						Usage: "[Required] set next-hop",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterStaticRouteAddParam.ParamTemplate = c.String("param-template")
					vpcrouterStaticRouteAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterStaticRouteAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticRouteAddVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterStaticRouteAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("prefix") {
						vpcrouterStaticRouteAddParam.Prefix = c.String("prefix")
					}
					if c.IsSet("next-hop") {
						vpcrouterStaticRouteAddParam.NextHop = c.String("next-hop")
					}
					if c.IsSet("selector") {
						vpcrouterStaticRouteAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterStaticRouteAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterStaticRouteAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterStaticRouteAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterStaticRouteAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterStaticRouteAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterStaticRouteAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterStaticRouteAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterStaticRouteAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterStaticRouteAddParam.GenerateSkeleton {
						vpcrouterStaticRouteAddParam.GenerateSkeleton = false
						vpcrouterStaticRouteAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterStaticRouteAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterStaticRouteAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterStaticRouteAddParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterStaticRouteAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterStaticRouteAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterStaticRouteAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterStaticRouteAddParam.Selector) == 0 || hasTags(&v, vpcrouterStaticRouteAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterStaticRouteAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("static-route-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterStaticRouteAddParam.SetId(id)
						p := *vpcrouterStaticRouteAddParam // copy struct value
						vpcrouterStaticRouteAddParam := &p
						go func() {
							err := funcs.VpcrouterStaticRouteAdd(ctx, vpcrouterStaticRouteAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-route-update",
				Usage:     "Update static-route",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target static-route",
					},
					&cli.StringFlag{
						Name:  "prefix",
						Usage: "set prefix",
					},
					&cli.StringFlag{
						Name:  "next-hop",
						Usage: "set next-hop",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterStaticRouteUpdateParam.ParamTemplate = c.String("param-template")
					vpcrouterStaticRouteUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterStaticRouteUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticRouteUpdateVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterStaticRouteUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcrouterStaticRouteUpdateParam.Index = c.Int("index")
					}
					if c.IsSet("prefix") {
						vpcrouterStaticRouteUpdateParam.Prefix = c.String("prefix")
					}
					if c.IsSet("next-hop") {
						vpcrouterStaticRouteUpdateParam.NextHop = c.String("next-hop")
					}
					if c.IsSet("selector") {
						vpcrouterStaticRouteUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterStaticRouteUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterStaticRouteUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterStaticRouteUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterStaticRouteUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterStaticRouteUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterStaticRouteUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterStaticRouteUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterStaticRouteUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterStaticRouteUpdateParam.GenerateSkeleton {
						vpcrouterStaticRouteUpdateParam.GenerateSkeleton = false
						vpcrouterStaticRouteUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterStaticRouteUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterStaticRouteUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterStaticRouteUpdateParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterStaticRouteUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterStaticRouteUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterStaticRouteUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterStaticRouteUpdateParam.Selector) == 0 || hasTags(&v, vpcrouterStaticRouteUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterStaticRouteUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("static-route-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterStaticRouteUpdateParam.SetId(id)
						p := *vpcrouterStaticRouteUpdateParam // copy struct value
						vpcrouterStaticRouteUpdateParam := &p
						go func() {
							err := funcs.VpcrouterStaticRouteUpdate(ctx, vpcrouterStaticRouteUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "static-route-delete",
				Usage:     "Delete static-route",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:  "index",
						Usage: "[Required] index of target static-route",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterStaticRouteDeleteParam.ParamTemplate = c.String("param-template")
					vpcrouterStaticRouteDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterStaticRouteDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewStaticRouteDeleteVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterStaticRouteDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("index") {
						vpcrouterStaticRouteDeleteParam.Index = c.Int("index")
					}
					if c.IsSet("selector") {
						vpcrouterStaticRouteDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						vpcrouterStaticRouteDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						vpcrouterStaticRouteDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterStaticRouteDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterStaticRouteDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterStaticRouteDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterStaticRouteDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterStaticRouteDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterStaticRouteDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterStaticRouteDeleteParam.GenerateSkeleton {
						vpcrouterStaticRouteDeleteParam.GenerateSkeleton = false
						vpcrouterStaticRouteDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterStaticRouteDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterStaticRouteDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterStaticRouteDeleteParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterStaticRouteDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterStaticRouteDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterStaticRouteDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterStaticRouteDeleteParam.Selector) == 0 || hasTags(&v, vpcrouterStaticRouteDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !vpcrouterStaticRouteDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("static-route-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterStaticRouteDeleteParam.SetId(id)
						p := *vpcrouterStaticRouteDeleteParam // copy struct value
						vpcrouterStaticRouteDeleteParam := &p
						go func() {
							err := funcs.VpcrouterStaticRouteDelete(ctx, vpcrouterStaticRouteDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "monitor",
				Usage:     "Monitor Vpcrouter",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "interface",
						Usage: "[Required] index of target interface",
						Value: "0",
					},
					&cli.StringFlag{
						Name:  "start",
						Usage: "set start-time",
					},
					&cli.StringFlag{
						Name:  "end",
						Usage: "set end-time",
					},
					&cli.StringFlag{
						Name:  "key-format",
						Usage: "[Required] set monitoring value key-format",
						Value: "sakuracloud.vpcrouter.{{.ID}}.nic.{{.Index}}",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterMonitorParam.ParamTemplate = c.String("param-template")
					vpcrouterMonitorParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterMonitorParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewMonitorVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterMonitorParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("interface") {
						vpcrouterMonitorParam.Interface = c.String("interface")
					}
					if c.IsSet("start") {
						vpcrouterMonitorParam.Start = c.String("start")
					}
					if c.IsSet("end") {
						vpcrouterMonitorParam.End = c.String("end")
					}
					if c.IsSet("key-format") {
						vpcrouterMonitorParam.KeyFormat = c.String("key-format")
					}
					if c.IsSet("selector") {
						vpcrouterMonitorParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcrouterMonitorParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterMonitorParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterMonitorParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterMonitorParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterMonitorParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						vpcrouterMonitorParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						vpcrouterMonitorParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						vpcrouterMonitorParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						vpcrouterMonitorParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						vpcrouterMonitorParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						vpcrouterMonitorParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						vpcrouterMonitorParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						vpcrouterMonitorParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterMonitorParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterMonitorParam.GenerateSkeleton {
						vpcrouterMonitorParam.GenerateSkeleton = false
						vpcrouterMonitorParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterMonitorParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterMonitorParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterMonitorParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterMonitorParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterMonitorParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterMonitorParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterMonitorParam.Selector) == 0 || hasTags(&v, vpcrouterMonitorParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterMonitorParam.SetId(id)
						p := *vpcrouterMonitorParam // copy struct value
						vpcrouterMonitorParam := &p
						go func() {
							err := funcs.VpcrouterMonitor(ctx, vpcrouterMonitorParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "logs",
				Usage:     "Logs Vpcrouter",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:    "log-name",
						Aliases: []string{"name"},
						Usage:   "set target logfile name",
						Value:   "all",
					},
					&cli.BoolFlag{
						Name:    "follow",
						Aliases: []string{"f"},
						Usage:   "follow log output",
					},
					&cli.Int64Flag{
						Name:  "refresh-interval",
						Usage: "log refresh interval second",
						Value: 3,
					},
					&cli.BoolFlag{
						Name:  "list-log-names",
						Usage: "show log-name list",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					vpcrouterLogsParam.ParamTemplate = c.String("param-template")
					vpcrouterLogsParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(vpcrouterLogsParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewLogsVpcrouterParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(vpcrouterLogsParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("log-name") {
						vpcrouterLogsParam.LogName = c.String("log-name")
					}
					if c.IsSet("follow") {
						vpcrouterLogsParam.Follow = c.Bool("follow")
					}
					if c.IsSet("refresh-interval") {
						vpcrouterLogsParam.RefreshInterval = c.Int64("refresh-interval")
					}
					if c.IsSet("list-log-names") {
						vpcrouterLogsParam.ListLogNames = c.Bool("list-log-names")
					}
					if c.IsSet("selector") {
						vpcrouterLogsParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						vpcrouterLogsParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						vpcrouterLogsParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						vpcrouterLogsParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						vpcrouterLogsParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						vpcrouterLogsParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("id") {
						vpcrouterLogsParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = vpcrouterLogsParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if vpcrouterLogsParam.GenerateSkeleton {
						vpcrouterLogsParam.GenerateSkeleton = false
						vpcrouterLogsParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(vpcrouterLogsParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := vpcrouterLogsParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), vpcrouterLogsParam)

					apiClient := ctx.GetAPIClient().Vpcrouter
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(vpcrouterLogsParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.Vpcrouters {
							if hasTags(&v, vpcrouterLogsParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", vpcrouterLogsParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.Vpcrouters {
										if len(vpcrouterLogsParam.Selector) == 0 || hasTags(&v, vpcrouterLogsParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						vpcrouterLogsParam.SetId(id)
						p := *vpcrouterLogsParam // copy struct value
						vpcrouterLogsParam := &p
						go func() {
							err := funcs.VpcrouterLogs(ctx, vpcrouterLogsParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
		},
	}

	// build Category-Resource mapping
	AppendResourceCategoryMap("vpc-router", &schema.Category{
		Key:         "appliance",
		DisplayName: "Appliance",
		Order:       40,
	})

	// build Category-Command mapping

	AppendCommandCategoryMap("vpc-router", "boot", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("vpc-router", "create", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("vpc-router", "delete", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("vpc-router", "dhcp-server-add", &schema.Category{
		Key:         "dhcp-server",
		DisplayName: "DHCP Server Management",
		Order:       60,
	})
	AppendCommandCategoryMap("vpc-router", "dhcp-server-delete", &schema.Category{
		Key:         "dhcp-server",
		DisplayName: "DHCP Server Management",
		Order:       60,
	})
	AppendCommandCategoryMap("vpc-router", "dhcp-server-info", &schema.Category{
		Key:         "dhcp-server",
		DisplayName: "DHCP Server Management",
		Order:       60,
	})
	AppendCommandCategoryMap("vpc-router", "dhcp-server-update", &schema.Category{
		Key:         "dhcp-server",
		DisplayName: "DHCP Server Management",
		Order:       60,
	})
	AppendCommandCategoryMap("vpc-router", "dhcp-static-mapping-add", &schema.Category{
		Key:         "dhcp-static-mapping",
		DisplayName: "DHCP Static Map Setting Management",
		Order:       65,
	})
	AppendCommandCategoryMap("vpc-router", "dhcp-static-mapping-delete", &schema.Category{
		Key:         "dhcp-static-mapping",
		DisplayName: "DHCP Static Map Setting Management",
		Order:       65,
	})
	AppendCommandCategoryMap("vpc-router", "dhcp-static-mapping-info", &schema.Category{
		Key:         "dhcp-static-mapping",
		DisplayName: "DHCP Static Map Setting Management",
		Order:       65,
	})
	AppendCommandCategoryMap("vpc-router", "dhcp-static-mapping-update", &schema.Category{
		Key:         "dhcp-static-mapping",
		DisplayName: "DHCP Static Map Setting Management",
		Order:       65,
	})
	AppendCommandCategoryMap("vpc-router", "disable-internet-connection", &schema.Category{
		Key:         "nic",
		DisplayName: "Network Interface Management",
		Order:       30,
	})
	AppendCommandCategoryMap("vpc-router", "enable-internet-connection", &schema.Category{
		Key:         "nic",
		DisplayName: "Network Interface Management",
		Order:       30,
	})
	AppendCommandCategoryMap("vpc-router", "firewall-add", &schema.Category{
		Key:         "fw",
		DisplayName: "Firewall Setting Management",
		Order:       50,
	})
	AppendCommandCategoryMap("vpc-router", "firewall-delete", &schema.Category{
		Key:         "fw",
		DisplayName: "Firewall Setting Management",
		Order:       50,
	})
	AppendCommandCategoryMap("vpc-router", "firewall-info", &schema.Category{
		Key:         "fw",
		DisplayName: "Firewall Setting Management",
		Order:       50,
	})
	AppendCommandCategoryMap("vpc-router", "firewall-update", &schema.Category{
		Key:         "fw",
		DisplayName: "Firewall Setting Management",
		Order:       50,
	})
	AppendCommandCategoryMap("vpc-router", "interface-connect", &schema.Category{
		Key:         "nic",
		DisplayName: "Network Interface Management",
		Order:       30,
	})
	AppendCommandCategoryMap("vpc-router", "interface-disconnect", &schema.Category{
		Key:         "nic",
		DisplayName: "Network Interface Management",
		Order:       30,
	})
	AppendCommandCategoryMap("vpc-router", "interface-info", &schema.Category{
		Key:         "nic",
		DisplayName: "Network Interface Management",
		Order:       30,
	})
	AppendCommandCategoryMap("vpc-router", "interface-update", &schema.Category{
		Key:         "nic",
		DisplayName: "Network Interface Management",
		Order:       30,
	})
	AppendCommandCategoryMap("vpc-router", "l2tp-server-info", &schema.Category{
		Key:         "remote-access",
		DisplayName: "RemoteAccess(VPN) Setting Management",
		Order:       70,
	})
	AppendCommandCategoryMap("vpc-router", "l2tp-server-update", &schema.Category{
		Key:         "remote-access",
		DisplayName: "RemoteAccess(VPN) Setting Management",
		Order:       70,
	})
	AppendCommandCategoryMap("vpc-router", "list", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("vpc-router", "logs", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitoring",
		Order:       500,
	})
	AppendCommandCategoryMap("vpc-router", "monitor", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitoring",
		Order:       500,
	})
	AppendCommandCategoryMap("vpc-router", "port-forwarding-add", &schema.Category{
		Key:         "rnat",
		DisplayName: "Port Forward Setting Management",
		Order:       45,
	})
	AppendCommandCategoryMap("vpc-router", "port-forwarding-delete", &schema.Category{
		Key:         "rnat",
		DisplayName: "Port Forward Setting Management",
		Order:       45,
	})
	AppendCommandCategoryMap("vpc-router", "port-forwarding-info", &schema.Category{
		Key:         "rnat",
		DisplayName: "Port Forward Setting Management",
		Order:       45,
	})
	AppendCommandCategoryMap("vpc-router", "port-forwarding-update", &schema.Category{
		Key:         "rnat",
		DisplayName: "Port Forward Setting Management",
		Order:       45,
	})
	AppendCommandCategoryMap("vpc-router", "pptp-server-info", &schema.Category{
		Key:         "remote-access",
		DisplayName: "RemoteAccess(VPN) Setting Management",
		Order:       70,
	})
	AppendCommandCategoryMap("vpc-router", "pptp-server-update", &schema.Category{
		Key:         "remote-access",
		DisplayName: "RemoteAccess(VPN) Setting Management",
		Order:       70,
	})
	AppendCommandCategoryMap("vpc-router", "read", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("vpc-router", "reset", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("vpc-router", "shutdown", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("vpc-router", "shutdown-force", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("vpc-router", "site-to-site-vpn-add", &schema.Category{
		Key:         "s2s",
		DisplayName: "Site to Site IPSec VPN Management",
		Order:       80,
	})
	AppendCommandCategoryMap("vpc-router", "site-to-site-vpn-delete", &schema.Category{
		Key:         "s2s",
		DisplayName: "Site to Site IPSec VPN Management",
		Order:       80,
	})
	AppendCommandCategoryMap("vpc-router", "site-to-site-vpn-info", &schema.Category{
		Key:         "s2s",
		DisplayName: "Site to Site IPSec VPN Management",
		Order:       80,
	})
	AppendCommandCategoryMap("vpc-router", "site-to-site-vpn-peers", &schema.Category{
		Key:         "s2s",
		DisplayName: "Site to Site IPSec VPN Management",
		Order:       80,
	})
	AppendCommandCategoryMap("vpc-router", "site-to-site-vpn-update", &schema.Category{
		Key:         "s2s",
		DisplayName: "Site to Site IPSec VPN Management",
		Order:       80,
	})
	AppendCommandCategoryMap("vpc-router", "static-nat-add", &schema.Category{
		Key:         "snat",
		DisplayName: "Static NAT Setting Management",
		Order:       40,
	})
	AppendCommandCategoryMap("vpc-router", "static-nat-delete", &schema.Category{
		Key:         "snat",
		DisplayName: "Static NAT Setting Management",
		Order:       40,
	})
	AppendCommandCategoryMap("vpc-router", "static-nat-info", &schema.Category{
		Key:         "snat",
		DisplayName: "Static NAT Setting Management",
		Order:       40,
	})
	AppendCommandCategoryMap("vpc-router", "static-nat-update", &schema.Category{
		Key:         "snat",
		DisplayName: "Static NAT Setting Management",
		Order:       40,
	})
	AppendCommandCategoryMap("vpc-router", "static-route-add", &schema.Category{
		Key:         "routing",
		DisplayName: "Static Route Management",
		Order:       90,
	})
	AppendCommandCategoryMap("vpc-router", "static-route-delete", &schema.Category{
		Key:         "routing",
		DisplayName: "Static Route Management",
		Order:       90,
	})
	AppendCommandCategoryMap("vpc-router", "static-route-info", &schema.Category{
		Key:         "routing",
		DisplayName: "Static Route Management",
		Order:       90,
	})
	AppendCommandCategoryMap("vpc-router", "static-route-update", &schema.Category{
		Key:         "routing",
		DisplayName: "Static Route Management",
		Order:       90,
	})
	AppendCommandCategoryMap("vpc-router", "update", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("vpc-router", "user-add", &schema.Category{
		Key:         "remote-access",
		DisplayName: "RemoteAccess(VPN) Setting Management",
		Order:       70,
	})
	AppendCommandCategoryMap("vpc-router", "user-delete", &schema.Category{
		Key:         "remote-access",
		DisplayName: "RemoteAccess(VPN) Setting Management",
		Order:       70,
	})
	AppendCommandCategoryMap("vpc-router", "user-info", &schema.Category{
		Key:         "remote-access",
		DisplayName: "RemoteAccess(VPN) Setting Management",
		Order:       70,
	})
	AppendCommandCategoryMap("vpc-router", "user-update", &schema.Category{
		Key:         "remote-access",
		DisplayName: "RemoteAccess(VPN) Setting Management",
		Order:       70,
	})
	AppendCommandCategoryMap("vpc-router", "wait-for-boot", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})
	AppendCommandCategoryMap("vpc-router", "wait-for-down", &schema.Category{
		Key:         "power",
		DisplayName: "Power Management",
		Order:       20,
	})

	// build Category-Param mapping

	AppendFlagCategoryMap("vpc-router", "boot", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "boot", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "boot", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "boot", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "boot", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "boot", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "boot", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "boot", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "create", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "create", "boot-after-create", &schema.Category{
		Key:         "operation",
		DisplayName: "Operation options",
		Order:       30,
	})
	AppendFlagCategoryMap("vpc-router", "create", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "create", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("vpc-router", "create", "disable-internet-connection", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       20,
	})
	AppendFlagCategoryMap("vpc-router", "create", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "create", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "create", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "create", "icon-id", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("vpc-router", "create", "ipaddress1", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       20,
	})
	AppendFlagCategoryMap("vpc-router", "create", "ipaddress2", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       20,
	})
	AppendFlagCategoryMap("vpc-router", "create", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("vpc-router", "create", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "create", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "create", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "create", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "create", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "create", "plan", &schema.Category{
		Key:         "router",
		DisplayName: "VPCRouter options",
		Order:       10,
	})
	AppendFlagCategoryMap("vpc-router", "create", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "create", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "create", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "create", "switch-id", &schema.Category{
		Key:         "router",
		DisplayName: "VPCRouter options",
		Order:       10,
	})
	AppendFlagCategoryMap("vpc-router", "create", "tags", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("vpc-router", "create", "vip", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       20,
	})
	AppendFlagCategoryMap("vpc-router", "create", "vrid", &schema.Category{
		Key:         "router",
		DisplayName: "VPCRouter options",
		Order:       10,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "force", &schema.Category{
		Key:         "router",
		DisplayName: "VPCRouter options",
		Order:       10,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "dns-servers", &schema.Category{
		Key:         "DHCP-Server",
		DisplayName: "DHCP-Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "interface", &schema.Category{
		Key:         "DHCP-Server",
		DisplayName: "DHCP-Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "range-start", &schema.Category{
		Key:         "DHCP-Server",
		DisplayName: "DHCP-Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "range-stop", &schema.Category{
		Key:         "DHCP-Server",
		DisplayName: "DHCP-Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-delete", "interface", &schema.Category{
		Key:         "DHCP-Server",
		DisplayName: "DHCP-Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "dns-servers", &schema.Category{
		Key:         "DHCP-Server",
		DisplayName: "DHCP-Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "interface", &schema.Category{
		Key:         "DHCP-Server",
		DisplayName: "DHCP-Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "range-start", &schema.Category{
		Key:         "DHCP-Server",
		DisplayName: "DHCP-Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "range-stop", &schema.Category{
		Key:         "DHCP-Server",
		DisplayName: "DHCP-Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-server-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-add", "ipaddress", &schema.Category{
		Key:         "DHCP-Static-Mapping",
		DisplayName: "DHCP-Static-Mapping options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-add", "macaddress", &schema.Category{
		Key:         "DHCP-Static-Mapping",
		DisplayName: "DHCP-Static-Mapping options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-delete", "index", &schema.Category{
		Key:         "DHCP-Static-Mapping",
		DisplayName: "DHCP-Static-Mapping options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-update", "index", &schema.Category{
		Key:         "DHCP-Static-Mapping",
		DisplayName: "DHCP-Static-Mapping options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-update", "ipaddress", &schema.Category{
		Key:         "DHCP-Static-Mapping",
		DisplayName: "DHCP-Static-Mapping options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-update", "macaddress", &schema.Category{
		Key:         "DHCP-Static-Mapping",
		DisplayName: "DHCP-Static-Mapping options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "dhcp-static-mapping-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "disable-internet-connection", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "disable-internet-connection", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "disable-internet-connection", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "disable-internet-connection", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "disable-internet-connection", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "disable-internet-connection", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "disable-internet-connection", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "disable-internet-connection", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "enable-internet-connection", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "enable-internet-connection", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "enable-internet-connection", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "enable-internet-connection", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "enable-internet-connection", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "enable-internet-connection", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "enable-internet-connection", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "enable-internet-connection", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "action", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "description", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "destination-network", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "destination-port", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "direction", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "enable-logging", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "interface", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "protocol", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "source-network", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-add", "source-port", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-delete", "direction", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-delete", "index", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-delete", "interface", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "direction", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "interface", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "action", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "description", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "destination-network", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "destination-port", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "direction", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "enable-logging", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "index", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "interface", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "protocol", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "source-network", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "firewall-update", "source-port", &schema.Category{
		Key:         "Firewall",
		DisplayName: "Firewall options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "interface", &schema.Category{
		Key:         "interface",
		DisplayName: "Interface options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "ipaddress", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "ipaddress1", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "ipaddress2", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "nw-masklen", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "switch-id", &schema.Category{
		Key:         "interface",
		DisplayName: "Interface options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-connect", "with-reboot", &schema.Category{
		Key:         "operation",
		DisplayName: "Operation options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-disconnect", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-disconnect", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-disconnect", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "interface-disconnect", "interface", &schema.Category{
		Key:         "interface",
		DisplayName: "Interface options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-disconnect", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-disconnect", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-disconnect", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-disconnect", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-disconnect", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "interface-disconnect", "with-reboot", &schema.Category{
		Key:         "operation",
		DisplayName: "Operation options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "interface-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "alias", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "interface", &schema.Category{
		Key:         "interface",
		DisplayName: "Interface options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "ipaddress", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "ipaddress1", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "ipaddress2", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "nw-masklen", &schema.Category{
		Key:         "network",
		DisplayName: "Network options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "switch-id", &schema.Category{
		Key:         "interface",
		DisplayName: "Interface options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "interface-update", "with-reboot", &schema.Category{
		Key:         "operation",
		DisplayName: "Operation options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "disabled", &schema.Category{
		Key:         "L2TP-IPSec",
		DisplayName: "L2TP-IPSec options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "pre-shared-secret", &schema.Category{
		Key:         "L2TP-IPSec",
		DisplayName: "L2TP-IPSec options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "range-start", &schema.Category{
		Key:         "L2TP-IPSec",
		DisplayName: "L2TP-IPSec options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "range-stop", &schema.Category{
		Key:         "L2TP-IPSec",
		DisplayName: "L2TP-IPSec options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "l2tp-server-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "list", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "list", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "list", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "list", "from", &schema.Category{
		Key:         "limit-offset",
		DisplayName: "Limit/Offset options",
		Order:       2147483597,
	})
	AppendFlagCategoryMap("vpc-router", "list", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "list", "id", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "list", "max", &schema.Category{
		Key:         "limit-offset",
		DisplayName: "Limit/Offset options",
		Order:       2147483597,
	})
	AppendFlagCategoryMap("vpc-router", "list", "name", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "list", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "list", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "list", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "list", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "list", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "list", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "list", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "list", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "list", "sort", &schema.Category{
		Key:         "sort",
		DisplayName: "Sort options",
		Order:       2147483607,
	})
	AppendFlagCategoryMap("vpc-router", "list", "tags", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "logs", "follow", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "logs", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "logs", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "logs", "list-log-names", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "logs", "log-name", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "logs", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "logs", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "logs", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "logs", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "logs", "refresh-interval", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "logs", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "end", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "interface", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "key-format", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "monitor", "start", &schema.Category{
		Key:         "monitor",
		DisplayName: "Monitor options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "description", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "global-port", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "private-ipaddress", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "private-port", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "protocol", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-delete", "index", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "description", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "global-port", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "index", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "private-ipaddress", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "private-port", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "protocol", &schema.Category{
		Key:         "Port-Forwarding",
		DisplayName: "Port-Forwarding options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "port-forwarding-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-update", "disabled", &schema.Category{
		Key:         "PPTP",
		DisplayName: "PPTP options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-update", "range-start", &schema.Category{
		Key:         "PPTP",
		DisplayName: "PPTP options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-update", "range-stop", &schema.Category{
		Key:         "PPTP",
		DisplayName: "PPTP options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "pptp-server-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "read", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "read", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "read", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "read", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "read", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "read", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "read", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "read", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "read", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "read", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "read", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "read", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "read", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "read", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "reset", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "reset", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "reset", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "reset", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "reset", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "reset", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "reset", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "reset", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown-force", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown-force", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown-force", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown-force", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown-force", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown-force", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown-force", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "shutdown-force", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "local-prefix", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "peer", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "pre-shared-secret", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "remote-id", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "routes", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-delete", "index", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-peers", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "index", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "local-prefix", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "peer", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "pre-shared-secret", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "remote-id", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "routes", &schema.Category{
		Key:         "Site-To-Site IPSec VPN",
		DisplayName: "Site-To-Site IPSec VPN options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "site-to-site-vpn-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-add", "description", &schema.Category{
		Key:         "Static-NAT",
		DisplayName: "Static-NAT options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-add", "global", &schema.Category{
		Key:         "Static-NAT",
		DisplayName: "Static-NAT options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-add", "private", &schema.Category{
		Key:         "Static-NAT",
		DisplayName: "Static-NAT options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-delete", "index", &schema.Category{
		Key:         "Static-NAT",
		DisplayName: "Static-NAT options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "description", &schema.Category{
		Key:         "Static-NAT",
		DisplayName: "Static-NAT options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "global", &schema.Category{
		Key:         "Static-NAT",
		DisplayName: "Static-NAT options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "index", &schema.Category{
		Key:         "Static-NAT",
		DisplayName: "Static-NAT options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "private", &schema.Category{
		Key:         "Static-NAT",
		DisplayName: "Static-NAT options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-nat-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-add", "next-hop", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-add", "prefix", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-delete", "index", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-update", "index", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-update", "next-hop", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-update", "prefix", &schema.Category{
		Key:         "Static-Route",
		DisplayName: "Static-Route options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "static-route-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "update", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("vpc-router", "update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "update", "icon-id", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("vpc-router", "update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "update", "internet-connection", &schema.Category{
		Key:         "router",
		DisplayName: "VPCRouter options",
		Order:       10,
	})
	AppendFlagCategoryMap("vpc-router", "update", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("vpc-router", "update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "update", "syslog-host", &schema.Category{
		Key:         "router",
		DisplayName: "VPCRouter options",
		Order:       10,
	})
	AppendFlagCategoryMap("vpc-router", "update", "tags", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("vpc-router", "user-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "user-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-add", "password", &schema.Category{
		Key:         "user",
		DisplayName: "User options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "user-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "user-add", "username", &schema.Category{
		Key:         "user",
		DisplayName: "User options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "user-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "user-delete", "index", &schema.Category{
		Key:         "user",
		DisplayName: "User options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "user-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("vpc-router", "user-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "user-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "user-update", "index", &schema.Category{
		Key:         "user",
		DisplayName: "User options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "user-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "user-update", "password", &schema.Category{
		Key:         "user",
		DisplayName: "User options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "user-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "user-update", "username", &schema.Category{
		Key:         "user",
		DisplayName: "User options",
		Order:       1,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-boot", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-boot", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-boot", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-boot", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-boot", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-boot", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-boot", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-down", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-down", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-down", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-down", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-down", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-down", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("vpc-router", "wait-for-down", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})

	// append command to GlobalContext
	Commands = append(Commands, cliCommand)
}

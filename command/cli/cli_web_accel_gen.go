// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-commands'; DO NOT EDIT

package cli

import (
	"encoding/json"
	"fmt"
	"strings"
	"sync"

	"github.com/imdario/mergo"
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/funcs"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/schema"
	"gopkg.in/urfave/cli.v2"
)

func init() {
	webAccelListParam := params.NewListWebAccelParam()
	webAccelReadParam := params.NewReadWebAccelParam()
	webAccelCertificateInfoParam := params.NewCertificateInfoWebAccelParam()
	webAccelCertificateNewParam := params.NewCertificateNewWebAccelParam()
	webAccelCertificateUpdateParam := params.NewCertificateUpdateWebAccelParam()
	webAccelDeleteCacheParam := params.NewDeleteCacheWebAccelParam()

	cliCommand := &cli.Command{
		Name:  "web-accel",
		Usage: "A manage commands of WebAccel",
		Subcommands: []*cli.Command{
			{
				Name:    "list",
				Aliases: []string{"ls", "find", "selector"},
				Usage:   "List WebAccel",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					webAccelListParam.ParamTemplate = c.String("param-template")
					webAccelListParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(webAccelListParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewListWebAccelParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(webAccelListParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("param-template") {
						webAccelListParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						webAccelListParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						webAccelListParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						webAccelListParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						webAccelListParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						webAccelListParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						webAccelListParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						webAccelListParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						webAccelListParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						webAccelListParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						webAccelListParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						webAccelListParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = webAccelListParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if webAccelListParam.GenerateSkeleton {
						webAccelListParam.GenerateSkeleton = false
						webAccelListParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(webAccelListParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := webAccelListParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), webAccelListParam)

					// Run command with params
					return funcs.WebAccelList(ctx, webAccelListParam)

				},
			},
			{
				Name:      "read",
				Usage:     "Read WebAccel",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					webAccelReadParam.ParamTemplate = c.String("param-template")
					webAccelReadParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(webAccelReadParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewReadWebAccelParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(webAccelReadParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						webAccelReadParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						webAccelReadParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						webAccelReadParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						webAccelReadParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						webAccelReadParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						webAccelReadParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						webAccelReadParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						webAccelReadParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						webAccelReadParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						webAccelReadParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						webAccelReadParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						webAccelReadParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						webAccelReadParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						webAccelReadParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = webAccelReadParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if webAccelReadParam.GenerateSkeleton {
						webAccelReadParam.GenerateSkeleton = false
						webAccelReadParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(webAccelReadParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := webAccelReadParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), webAccelReadParam)

					apiClient := ctx.GetAPIClient().WebAccel
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(webAccelReadParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.WebAccelSites {
							if hasTags(&v, webAccelReadParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", webAccelReadParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.WebAccelSites {
										if len(webAccelReadParam.Selector) == 0 || hasTags(&v, webAccelReadParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						webAccelReadParam.SetId(id)
						p := *webAccelReadParam // copy struct value
						webAccelReadParam := &p
						go func() {
							err := funcs.WebAccelRead(ctx, webAccelReadParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "certificate-info",
				Aliases:   []string{"cert-info"},
				Usage:     "CertificateInfo WebAccel",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					webAccelCertificateInfoParam.ParamTemplate = c.String("param-template")
					webAccelCertificateInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(webAccelCertificateInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCertificateInfoWebAccelParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(webAccelCertificateInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						webAccelCertificateInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						webAccelCertificateInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						webAccelCertificateInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						webAccelCertificateInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						webAccelCertificateInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						webAccelCertificateInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						webAccelCertificateInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						webAccelCertificateInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						webAccelCertificateInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						webAccelCertificateInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						webAccelCertificateInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						webAccelCertificateInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						webAccelCertificateInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						webAccelCertificateInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = webAccelCertificateInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if webAccelCertificateInfoParam.GenerateSkeleton {
						webAccelCertificateInfoParam.GenerateSkeleton = false
						webAccelCertificateInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(webAccelCertificateInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := webAccelCertificateInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), webAccelCertificateInfoParam)

					apiClient := ctx.GetAPIClient().WebAccel
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(webAccelCertificateInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.WebAccelSites {
							if hasTags(&v, webAccelCertificateInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", webAccelCertificateInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.WebAccelSites {
										if len(webAccelCertificateInfoParam.Selector) == 0 || hasTags(&v, webAccelCertificateInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						webAccelCertificateInfoParam.SetId(id)
						p := *webAccelCertificateInfoParam // copy struct value
						webAccelCertificateInfoParam := &p
						go func() {
							err := funcs.WebAccelCertificateInfo(ctx, webAccelCertificateInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "certificate-new",
				Aliases:   []string{"cert-new", "cert-create", "certificate-create"},
				Usage:     "CertificateNew WebAccel",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "cert",
						Usage: "set certificate(from file)",
					},
					&cli.StringFlag{
						Name:  "key",
						Usage: "set private key(from file)",
					},
					&cli.StringFlag{
						Name:  "cert-content",
						Usage: "set certificate(from text)",
					},
					&cli.StringFlag{
						Name:  "key-content",
						Usage: "set private key(from text)",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					webAccelCertificateNewParam.ParamTemplate = c.String("param-template")
					webAccelCertificateNewParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(webAccelCertificateNewParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCertificateNewWebAccelParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(webAccelCertificateNewParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("cert") {
						webAccelCertificateNewParam.Cert = c.String("cert")
					}
					if c.IsSet("key") {
						webAccelCertificateNewParam.Key = c.String("key")
					}
					if c.IsSet("cert-content") {
						webAccelCertificateNewParam.CertContent = c.String("cert-content")
					}
					if c.IsSet("key-content") {
						webAccelCertificateNewParam.KeyContent = c.String("key-content")
					}
					if c.IsSet("selector") {
						webAccelCertificateNewParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						webAccelCertificateNewParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						webAccelCertificateNewParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						webAccelCertificateNewParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						webAccelCertificateNewParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						webAccelCertificateNewParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						webAccelCertificateNewParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						webAccelCertificateNewParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						webAccelCertificateNewParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						webAccelCertificateNewParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						webAccelCertificateNewParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						webAccelCertificateNewParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						webAccelCertificateNewParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						webAccelCertificateNewParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						webAccelCertificateNewParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = webAccelCertificateNewParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if webAccelCertificateNewParam.GenerateSkeleton {
						webAccelCertificateNewParam.GenerateSkeleton = false
						webAccelCertificateNewParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(webAccelCertificateNewParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := webAccelCertificateNewParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), webAccelCertificateNewParam)

					apiClient := ctx.GetAPIClient().WebAccel
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(webAccelCertificateNewParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.WebAccelSites {
							if hasTags(&v, webAccelCertificateNewParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", webAccelCertificateNewParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.WebAccelSites {
										if len(webAccelCertificateNewParam.Selector) == 0 || hasTags(&v, webAccelCertificateNewParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !webAccelCertificateNewParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("certificate-new", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						webAccelCertificateNewParam.SetId(id)
						p := *webAccelCertificateNewParam // copy struct value
						webAccelCertificateNewParam := &p
						go func() {
							err := funcs.WebAccelCertificateNew(ctx, webAccelCertificateNewParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "certificate-update",
				Aliases:   []string{"cert-update"},
				Usage:     "CertificateUpdate WebAccel",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "cert",
						Usage: "set certificate(from file)",
					},
					&cli.StringFlag{
						Name:  "key",
						Usage: "set private key(from file)",
					},
					&cli.StringFlag{
						Name:  "cert-content",
						Usage: "set certificate(from text)",
					},
					&cli.StringFlag{
						Name:  "key-content",
						Usage: "set private key(from text)",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					webAccelCertificateUpdateParam.ParamTemplate = c.String("param-template")
					webAccelCertificateUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(webAccelCertificateUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCertificateUpdateWebAccelParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(webAccelCertificateUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("cert") {
						webAccelCertificateUpdateParam.Cert = c.String("cert")
					}
					if c.IsSet("key") {
						webAccelCertificateUpdateParam.Key = c.String("key")
					}
					if c.IsSet("cert-content") {
						webAccelCertificateUpdateParam.CertContent = c.String("cert-content")
					}
					if c.IsSet("key-content") {
						webAccelCertificateUpdateParam.KeyContent = c.String("key-content")
					}
					if c.IsSet("selector") {
						webAccelCertificateUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						webAccelCertificateUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						webAccelCertificateUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						webAccelCertificateUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						webAccelCertificateUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						webAccelCertificateUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						webAccelCertificateUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						webAccelCertificateUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						webAccelCertificateUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						webAccelCertificateUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						webAccelCertificateUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						webAccelCertificateUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						webAccelCertificateUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						webAccelCertificateUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						webAccelCertificateUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = webAccelCertificateUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if webAccelCertificateUpdateParam.GenerateSkeleton {
						webAccelCertificateUpdateParam.GenerateSkeleton = false
						webAccelCertificateUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(webAccelCertificateUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := webAccelCertificateUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), webAccelCertificateUpdateParam)

					apiClient := ctx.GetAPIClient().WebAccel
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(webAccelCertificateUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.WebAccelSites {
							if hasTags(&v, webAccelCertificateUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", webAccelCertificateUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.WebAccelSites {
										if len(webAccelCertificateUpdateParam.Selector) == 0 || hasTags(&v, webAccelCertificateUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !webAccelCertificateUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("certificate-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						webAccelCertificateUpdateParam.SetId(id)
						p := *webAccelCertificateUpdateParam // copy struct value
						webAccelCertificateUpdateParam := &p
						go func() {
							err := funcs.WebAccelCertificateUpdate(ctx, webAccelCertificateUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "delete-cache",
				Aliases:   []string{"purge"},
				Usage:     "DeleteCache WebAccel",
				ArgsUsage: "[URLs]...",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					webAccelDeleteCacheParam.ParamTemplate = c.String("param-template")
					webAccelDeleteCacheParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(webAccelDeleteCacheParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDeleteCacheWebAccelParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(webAccelDeleteCacheParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("assumeyes") {
						webAccelDeleteCacheParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						webAccelDeleteCacheParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						webAccelDeleteCacheParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						webAccelDeleteCacheParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						webAccelDeleteCacheParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						webAccelDeleteCacheParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						webAccelDeleteCacheParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						webAccelDeleteCacheParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						webAccelDeleteCacheParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						webAccelDeleteCacheParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						webAccelDeleteCacheParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						webAccelDeleteCacheParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						webAccelDeleteCacheParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = webAccelDeleteCacheParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if webAccelDeleteCacheParam.GenerateSkeleton {
						webAccelDeleteCacheParam.GenerateSkeleton = false
						webAccelDeleteCacheParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(webAccelDeleteCacheParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := webAccelDeleteCacheParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), webAccelDeleteCacheParam)

					// confirm
					if !webAccelDeleteCacheParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete-cache") {
							return nil
						}
					}

					// Run command with params
					return funcs.WebAccelDeleteCache(ctx, webAccelDeleteCacheParam)

				},
			},
		},
	}

	// build Category-Resource mapping
	AppendResourceCategoryMap("web-accel", &schema.Category{
		Key:         "saas",
		DisplayName: "Other services",
		Order:       80,
	})

	// build Category-Command mapping

	AppendCommandCategoryMap("web-accel", "certificate-info", &schema.Category{
		Key:         "certificate",
		DisplayName: "Certificate Management",
		Order:       20,
	})
	AppendCommandCategoryMap("web-accel", "certificate-new", &schema.Category{
		Key:         "certificate",
		DisplayName: "Certificate Management",
		Order:       20,
	})
	AppendCommandCategoryMap("web-accel", "certificate-update", &schema.Category{
		Key:         "certificate",
		DisplayName: "Certificate Management",
		Order:       20,
	})
	AppendCommandCategoryMap("web-accel", "delete-cache", &schema.Category{
		Key:         "cache",
		DisplayName: "Cache Management",
		Order:       30,
	})
	AppendCommandCategoryMap("web-accel", "list", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("web-accel", "read", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})

	// build Category-Param mapping

	AppendFlagCategoryMap("web-accel", "certificate-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "cert", &schema.Category{
		Key:         "cert",
		DisplayName: "Cert options",
		Order:       1,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "cert-content", &schema.Category{
		Key:         "cert",
		DisplayName: "Cert options",
		Order:       1,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "key", &schema.Category{
		Key:         "cert",
		DisplayName: "Cert options",
		Order:       1,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "key-content", &schema.Category{
		Key:         "cert",
		DisplayName: "Cert options",
		Order:       1,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "cert", &schema.Category{
		Key:         "cert",
		DisplayName: "Cert options",
		Order:       1,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "cert-content", &schema.Category{
		Key:         "cert",
		DisplayName: "Cert options",
		Order:       1,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "key", &schema.Category{
		Key:         "cert",
		DisplayName: "Cert options",
		Order:       1,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "key-content", &schema.Category{
		Key:         "cert",
		DisplayName: "Cert options",
		Order:       1,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "list", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "list", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "list", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "list", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "list", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "list", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "list", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "list", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "list", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "list", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "list", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "list", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "read", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "read", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "read", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "read", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "read", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("web-accel", "read", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "read", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "read", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "read", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "read", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "read", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "read", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "read", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "read", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})

	// append command to GlobalContext
	Commands = append(Commands, cliCommand)
}

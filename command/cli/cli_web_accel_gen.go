// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-commands'; DO NOT EDIT

package cli

import (
	"encoding/json"
	"fmt"
	"strings"
	"sync"

	"github.com/imdario/mergo"
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/funcs"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/schema"
	"gopkg.in/urfave/cli.v2"
)

func init() {
	webaccelListParam := params.NewListWebaccelParam()
	webaccelReadParam := params.NewReadWebaccelParam()
	webaccelCertificateInfoParam := params.NewCertificateInfoWebaccelParam()
	webaccelCertificateNewParam := params.NewCertificateNewWebaccelParam()
	webaccelCertificateUpdateParam := params.NewCertificateUpdateWebaccelParam()
	webaccelDeleteCacheParam := params.NewDeleteCacheWebaccelParam()

	cliCommand := &cli.Command{
		Name:  "web-accel",
		Usage: "A manage commands of WebAccel",
		Subcommands: []*cli.Command{
			{
				Name:    "list",
				Aliases: []string{"ls", "find", "selector"},
				Usage:   "List Webaccel",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					webaccelListParam.ParamTemplate = c.String("param-template")
					webaccelListParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(webaccelListParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewListWebaccelParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(webaccelListParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("param-template") {
						webaccelListParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						webaccelListParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						webaccelListParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						webaccelListParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						webaccelListParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						webaccelListParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						webaccelListParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						webaccelListParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						webaccelListParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						webaccelListParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						webaccelListParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						webaccelListParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = webaccelListParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if webaccelListParam.GenerateSkeleton {
						webaccelListParam.GenerateSkeleton = false
						webaccelListParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(webaccelListParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := webaccelListParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), webaccelListParam)

					// Run command with params
					return funcs.WebaccelList(ctx, webaccelListParam)

				},
			},
			{
				Name:      "read",
				Usage:     "Read Webaccel",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					webaccelReadParam.ParamTemplate = c.String("param-template")
					webaccelReadParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(webaccelReadParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewReadWebaccelParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(webaccelReadParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						webaccelReadParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						webaccelReadParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						webaccelReadParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						webaccelReadParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						webaccelReadParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						webaccelReadParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						webaccelReadParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						webaccelReadParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						webaccelReadParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						webaccelReadParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						webaccelReadParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						webaccelReadParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						webaccelReadParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						webaccelReadParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = webaccelReadParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if webaccelReadParam.GenerateSkeleton {
						webaccelReadParam.GenerateSkeleton = false
						webaccelReadParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(webaccelReadParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := webaccelReadParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), webaccelReadParam)

					apiClient := ctx.GetAPIClient().Webaccel
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(webaccelReadParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.WebAccelSites {
							if hasTags(&v, webaccelReadParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", webaccelReadParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.WebAccelSites {
										if len(webaccelReadParam.Selector) == 0 || hasTags(&v, webaccelReadParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						webaccelReadParam.SetId(id)
						p := *webaccelReadParam // copy struct value
						webaccelReadParam := &p
						go func() {
							err := funcs.WebaccelRead(ctx, webaccelReadParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "certificate-info",
				Aliases:   []string{"cert-info"},
				Usage:     "CertificateInfo Webaccel",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					webaccelCertificateInfoParam.ParamTemplate = c.String("param-template")
					webaccelCertificateInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(webaccelCertificateInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCertificateInfoWebaccelParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(webaccelCertificateInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						webaccelCertificateInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						webaccelCertificateInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						webaccelCertificateInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						webaccelCertificateInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						webaccelCertificateInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						webaccelCertificateInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						webaccelCertificateInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						webaccelCertificateInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						webaccelCertificateInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						webaccelCertificateInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						webaccelCertificateInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						webaccelCertificateInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						webaccelCertificateInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						webaccelCertificateInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = webaccelCertificateInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if webaccelCertificateInfoParam.GenerateSkeleton {
						webaccelCertificateInfoParam.GenerateSkeleton = false
						webaccelCertificateInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(webaccelCertificateInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := webaccelCertificateInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), webaccelCertificateInfoParam)

					apiClient := ctx.GetAPIClient().Webaccel
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(webaccelCertificateInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.WebAccelSites {
							if hasTags(&v, webaccelCertificateInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", webaccelCertificateInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.WebAccelSites {
										if len(webaccelCertificateInfoParam.Selector) == 0 || hasTags(&v, webaccelCertificateInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						webaccelCertificateInfoParam.SetId(id)
						p := *webaccelCertificateInfoParam // copy struct value
						webaccelCertificateInfoParam := &p
						go func() {
							err := funcs.WebaccelCertificateInfo(ctx, webaccelCertificateInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "certificate-new",
				Aliases:   []string{"cert-new", "cert-create", "certificate-create"},
				Usage:     "CertificateNew Webaccel",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "cert",
						Usage: "set certificate(from file)",
					},
					&cli.StringFlag{
						Name:  "key",
						Usage: "set private key(from file)",
					},
					&cli.StringFlag{
						Name:  "cert-content",
						Usage: "set certificate(from text)",
					},
					&cli.StringFlag{
						Name:  "key-content",
						Usage: "set private key(from text)",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					webaccelCertificateNewParam.ParamTemplate = c.String("param-template")
					webaccelCertificateNewParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(webaccelCertificateNewParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCertificateNewWebaccelParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(webaccelCertificateNewParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("cert") {
						webaccelCertificateNewParam.Cert = c.String("cert")
					}
					if c.IsSet("key") {
						webaccelCertificateNewParam.Key = c.String("key")
					}
					if c.IsSet("cert-content") {
						webaccelCertificateNewParam.CertContent = c.String("cert-content")
					}
					if c.IsSet("key-content") {
						webaccelCertificateNewParam.KeyContent = c.String("key-content")
					}
					if c.IsSet("selector") {
						webaccelCertificateNewParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						webaccelCertificateNewParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						webaccelCertificateNewParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						webaccelCertificateNewParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						webaccelCertificateNewParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						webaccelCertificateNewParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						webaccelCertificateNewParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						webaccelCertificateNewParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						webaccelCertificateNewParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						webaccelCertificateNewParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						webaccelCertificateNewParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						webaccelCertificateNewParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						webaccelCertificateNewParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						webaccelCertificateNewParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						webaccelCertificateNewParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = webaccelCertificateNewParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if webaccelCertificateNewParam.GenerateSkeleton {
						webaccelCertificateNewParam.GenerateSkeleton = false
						webaccelCertificateNewParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(webaccelCertificateNewParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := webaccelCertificateNewParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), webaccelCertificateNewParam)

					apiClient := ctx.GetAPIClient().Webaccel
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(webaccelCertificateNewParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.WebAccelSites {
							if hasTags(&v, webaccelCertificateNewParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", webaccelCertificateNewParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.WebAccelSites {
										if len(webaccelCertificateNewParam.Selector) == 0 || hasTags(&v, webaccelCertificateNewParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !webaccelCertificateNewParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("certificate-new", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						webaccelCertificateNewParam.SetId(id)
						p := *webaccelCertificateNewParam // copy struct value
						webaccelCertificateNewParam := &p
						go func() {
							err := funcs.WebaccelCertificateNew(ctx, webaccelCertificateNewParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "certificate-update",
				Aliases:   []string{"cert-update"},
				Usage:     "CertificateUpdate Webaccel",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "cert",
						Usage: "set certificate(from file)",
					},
					&cli.StringFlag{
						Name:  "key",
						Usage: "set private key(from file)",
					},
					&cli.StringFlag{
						Name:  "cert-content",
						Usage: "set certificate(from text)",
					},
					&cli.StringFlag{
						Name:  "key-content",
						Usage: "set private key(from text)",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					webaccelCertificateUpdateParam.ParamTemplate = c.String("param-template")
					webaccelCertificateUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(webaccelCertificateUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCertificateUpdateWebaccelParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(webaccelCertificateUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("cert") {
						webaccelCertificateUpdateParam.Cert = c.String("cert")
					}
					if c.IsSet("key") {
						webaccelCertificateUpdateParam.Key = c.String("key")
					}
					if c.IsSet("cert-content") {
						webaccelCertificateUpdateParam.CertContent = c.String("cert-content")
					}
					if c.IsSet("key-content") {
						webaccelCertificateUpdateParam.KeyContent = c.String("key-content")
					}
					if c.IsSet("selector") {
						webaccelCertificateUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						webaccelCertificateUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						webaccelCertificateUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						webaccelCertificateUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						webaccelCertificateUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						webaccelCertificateUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						webaccelCertificateUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						webaccelCertificateUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						webaccelCertificateUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						webaccelCertificateUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						webaccelCertificateUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						webaccelCertificateUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						webaccelCertificateUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						webaccelCertificateUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						webaccelCertificateUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = webaccelCertificateUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if webaccelCertificateUpdateParam.GenerateSkeleton {
						webaccelCertificateUpdateParam.GenerateSkeleton = false
						webaccelCertificateUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(webaccelCertificateUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := webaccelCertificateUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), webaccelCertificateUpdateParam)

					apiClient := ctx.GetAPIClient().Webaccel
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(webaccelCertificateUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.WebAccelSites {
							if hasTags(&v, webaccelCertificateUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", webaccelCertificateUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.WebAccelSites {
										if len(webaccelCertificateUpdateParam.Selector) == 0 || hasTags(&v, webaccelCertificateUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !webaccelCertificateUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("certificate-update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						webaccelCertificateUpdateParam.SetId(id)
						p := *webaccelCertificateUpdateParam // copy struct value
						webaccelCertificateUpdateParam := &p
						go func() {
							err := funcs.WebaccelCertificateUpdate(ctx, webaccelCertificateUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "delete-cache",
				Aliases:   []string{"purge"},
				Usage:     "DeleteCache Webaccel",
				ArgsUsage: "[URLs]...",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					webaccelDeleteCacheParam.ParamTemplate = c.String("param-template")
					webaccelDeleteCacheParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(webaccelDeleteCacheParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDeleteCacheWebaccelParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(webaccelDeleteCacheParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("assumeyes") {
						webaccelDeleteCacheParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						webaccelDeleteCacheParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						webaccelDeleteCacheParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						webaccelDeleteCacheParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						webaccelDeleteCacheParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						webaccelDeleteCacheParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						webaccelDeleteCacheParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						webaccelDeleteCacheParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						webaccelDeleteCacheParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						webaccelDeleteCacheParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						webaccelDeleteCacheParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						webaccelDeleteCacheParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						webaccelDeleteCacheParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = webaccelDeleteCacheParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if webaccelDeleteCacheParam.GenerateSkeleton {
						webaccelDeleteCacheParam.GenerateSkeleton = false
						webaccelDeleteCacheParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(webaccelDeleteCacheParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := webaccelDeleteCacheParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), webaccelDeleteCacheParam)

					// confirm
					if !webaccelDeleteCacheParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete-cache") {
							return nil
						}
					}

					// Run command with params
					return funcs.WebaccelDeleteCache(ctx, webaccelDeleteCacheParam)

				},
			},
		},
	}

	// build Category-Resource mapping
	AppendResourceCategoryMap("web-accel", &schema.Category{
		Key:         "saas",
		DisplayName: "Other services",
		Order:       80,
	})

	// build Category-Command mapping

	AppendCommandCategoryMap("web-accel", "certificate-info", &schema.Category{
		Key:         "certificate",
		DisplayName: "Certificate Management",
		Order:       20,
	})
	AppendCommandCategoryMap("web-accel", "certificate-new", &schema.Category{
		Key:         "certificate",
		DisplayName: "Certificate Management",
		Order:       20,
	})
	AppendCommandCategoryMap("web-accel", "certificate-update", &schema.Category{
		Key:         "certificate",
		DisplayName: "Certificate Management",
		Order:       20,
	})
	AppendCommandCategoryMap("web-accel", "delete-cache", &schema.Category{
		Key:         "cache",
		DisplayName: "Cache Management",
		Order:       30,
	})
	AppendCommandCategoryMap("web-accel", "list", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("web-accel", "read", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})

	// build Category-Param mapping

	AppendFlagCategoryMap("web-accel", "certificate-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "cert", &schema.Category{
		Key:         "cert",
		DisplayName: "Cert options",
		Order:       1,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "cert-content", &schema.Category{
		Key:         "cert",
		DisplayName: "Cert options",
		Order:       1,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "key", &schema.Category{
		Key:         "cert",
		DisplayName: "Cert options",
		Order:       1,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "key-content", &schema.Category{
		Key:         "cert",
		DisplayName: "Cert options",
		Order:       1,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-new", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "cert", &schema.Category{
		Key:         "cert",
		DisplayName: "Cert options",
		Order:       1,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "cert-content", &schema.Category{
		Key:         "cert",
		DisplayName: "Cert options",
		Order:       1,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "key", &schema.Category{
		Key:         "cert",
		DisplayName: "Cert options",
		Order:       1,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "key-content", &schema.Category{
		Key:         "cert",
		DisplayName: "Cert options",
		Order:       1,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "certificate-update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "delete-cache", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "list", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "list", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "list", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "list", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "list", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "list", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "list", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "list", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "list", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "list", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "list", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "list", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "read", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "read", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "read", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "read", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "read", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("web-accel", "read", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "read", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "read", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "read", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "read", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("web-accel", "read", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "read", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "read", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("web-accel", "read", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})

	// append command to GlobalContext
	Commands = append(Commands, cliCommand)
}

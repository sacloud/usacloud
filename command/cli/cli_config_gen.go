// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-commands'; DO NOT EDIT

package cli

import (
	"encoding/json"
	"fmt"

	"github.com/imdario/mergo"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/funcs"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/schema"
	"gopkg.in/urfave/cli.v2"
)

func init() {
	configCurrentParam := params.NewCurrentConfigParam()
	configDeleteParam := params.NewDeleteConfigParam()
	configEditParam := params.NewEditConfigParam()
	configListParam := params.NewListConfigParam()
	configMigrateParam := params.NewMigrateConfigParam()
	configShowParam := params.NewShowConfigParam()
	configUseParam := params.NewUseConfigParam()

	cliCommand := &cli.Command{
		Name:    "config",
		Aliases: []string{"profile"},
		Usage:   "A manage command of APIKey settings",
		Action: func(c *cli.Context) error {
			comm := c.App.Command("edit")
			if comm != nil {
				return comm.Action(c)
			}
			return cli.ShowSubcommandHelp(c)
		},
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:  "token",
				Usage: "API Token of SakuraCloud",
			},
			&cli.StringFlag{
				Name:  "secret",
				Usage: "API Secret of SakuraCloud",
			},
			&cli.StringFlag{
				Name:  "zone",
				Usage: "Target zone of SakuraCloud",
			},
			&cli.StringFlag{
				Name:  "default-output-type",
				Usage: "Default output format type",
			},
			&cli.StringFlag{
				Name:  "param-template",
				Usage: "Set input parameter from string(JSON)",
			},
			&cli.StringFlag{
				Name:  "parameters",
				Usage: "Set input parameters from JSON string",
			},
			&cli.StringFlag{
				Name:  "param-template-file",
				Usage: "Set input parameter from file",
			},
			&cli.StringFlag{
				Name:  "parameter-file",
				Usage: "Set input parameters from file",
			},
			&cli.BoolFlag{
				Name:  "generate-skeleton",
				Usage: "Output skelton of parameter JSON",
			},
		},
		Subcommands: []*cli.Command{
			{
				Name:  "current",
				Usage: "Current Config",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
				},
				Action: func(c *cli.Context) error {

					configCurrentParam.ParamTemplate = c.String("param-template")
					configCurrentParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(configCurrentParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCurrentConfigParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(configCurrentParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("param-template") {
						configCurrentParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						configCurrentParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						configCurrentParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						configCurrentParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						configCurrentParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}

					var outputTypeHolder interface{} = configCurrentParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if configCurrentParam.GenerateSkeleton {
						configCurrentParam.GenerateSkeleton = false
						configCurrentParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(configCurrentParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := configCurrentParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), configCurrentParam)

					// Run command with params
					return funcs.ConfigCurrent(ctx, configCurrentParam)

				},
			},
			{
				Name:    "delete",
				Aliases: []string{"rm"},
				Usage:   "Delete Config",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
				},
				Action: func(c *cli.Context) error {

					configDeleteParam.ParamTemplate = c.String("param-template")
					configDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(configDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDeleteConfigParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(configDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("assumeyes") {
						configDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						configDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						configDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						configDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						configDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						configDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}

					var outputTypeHolder interface{} = configDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if configDeleteParam.GenerateSkeleton {
						configDeleteParam.GenerateSkeleton = false
						configDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(configDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := configDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), configDeleteParam)

					// confirm
					if !configDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete") {
							return nil
						}
					}

					// Run command with params
					return funcs.ConfigDelete(ctx, configDeleteParam)

				},
			},
			{
				Name:  "edit",
				Usage: "Edit Config (default)",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "token",
						Usage: "API Token of SakuraCloud",
					},
					&cli.StringFlag{
						Name:  "secret",
						Usage: "API Secret of SakuraCloud",
					},
					&cli.StringFlag{
						Name:  "zone",
						Usage: "Target zone of SakuraCloud",
					},
					&cli.StringFlag{
						Name:  "default-output-type",
						Usage: "Default output format type",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
				},
				Action: func(c *cli.Context) error {

					configEditParam.ParamTemplate = c.String("param-template")
					configEditParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(configEditParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewEditConfigParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(configEditParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("token") {
						configEditParam.Token = c.String("token")
					}
					if c.IsSet("secret") {
						configEditParam.Secret = c.String("secret")
					}
					if c.IsSet("zone") {
						configEditParam.Zone = c.String("zone")
					}
					if c.IsSet("default-output-type") {
						configEditParam.DefaultOutputType = c.String("default-output-type")
					}
					if c.IsSet("param-template") {
						configEditParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						configEditParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						configEditParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						configEditParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						configEditParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}

					var outputTypeHolder interface{} = configEditParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if configEditParam.GenerateSkeleton {
						configEditParam.GenerateSkeleton = false
						configEditParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(configEditParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := configEditParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), configEditParam)

					// Run command with params
					return funcs.ConfigEdit(ctx, configEditParam)

				},
			},
			{
				Name:    "list",
				Aliases: []string{"ls"},
				Usage:   "List Config",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
				},
				Action: func(c *cli.Context) error {

					configListParam.ParamTemplate = c.String("param-template")
					configListParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(configListParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewListConfigParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(configListParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("param-template") {
						configListParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						configListParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						configListParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						configListParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						configListParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}

					var outputTypeHolder interface{} = configListParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if configListParam.GenerateSkeleton {
						configListParam.GenerateSkeleton = false
						configListParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(configListParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := configListParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), configListParam)

					// Run command with params
					return funcs.ConfigList(ctx, configListParam)

				},
			},
			{
				Name:  "migrate",
				Usage: "Migrate Config",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
				},
				Action: func(c *cli.Context) error {

					configMigrateParam.ParamTemplate = c.String("param-template")
					configMigrateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(configMigrateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewMigrateConfigParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(configMigrateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("param-template") {
						configMigrateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						configMigrateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						configMigrateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						configMigrateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						configMigrateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}

					var outputTypeHolder interface{} = configMigrateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if configMigrateParam.GenerateSkeleton {
						configMigrateParam.GenerateSkeleton = false
						configMigrateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(configMigrateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := configMigrateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), configMigrateParam)

					// Run command with params
					return funcs.ConfigMigrate(ctx, configMigrateParam)

				},
			},
			{
				Name:  "show",
				Usage: "Show Config",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
				},
				Action: func(c *cli.Context) error {

					configShowParam.ParamTemplate = c.String("param-template")
					configShowParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(configShowParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewShowConfigParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(configShowParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("param-template") {
						configShowParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						configShowParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						configShowParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						configShowParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						configShowParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}

					var outputTypeHolder interface{} = configShowParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if configShowParam.GenerateSkeleton {
						configShowParam.GenerateSkeleton = false
						configShowParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(configShowParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := configShowParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), configShowParam)

					// Run command with params
					return funcs.ConfigShow(ctx, configShowParam)

				},
			},
			{
				Name:  "use",
				Usage: "Use Config",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
				},
				Action: func(c *cli.Context) error {

					configUseParam.ParamTemplate = c.String("param-template")
					configUseParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(configUseParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewUseConfigParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(configUseParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("param-template") {
						configUseParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						configUseParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						configUseParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						configUseParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						configUseParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}

					var outputTypeHolder interface{} = configUseParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if configUseParam.GenerateSkeleton {
						configUseParam.GenerateSkeleton = false
						configUseParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(configUseParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := configUseParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), configUseParam)

					// Run command with params
					return funcs.ConfigUse(ctx, configUseParam)

				},
			},
		},
	}

	// build Category-Resource mapping
	AppendResourceCategoryMap("config", &schema.Category{
		Key:         "config",
		DisplayName: "Configuration",
		Order:       3,
	})

	// build Category-Command mapping

	AppendCommandCategoryMap("config", "current", &schema.Category{
		Key:         "default",
		DisplayName: "",
		Order:       2147483647,
	})
	AppendCommandCategoryMap("config", "delete", &schema.Category{
		Key:         "default",
		DisplayName: "",
		Order:       2147483647,
	})
	AppendCommandCategoryMap("config", "edit", &schema.Category{
		Key:         "default",
		DisplayName: "",
		Order:       2147483647,
	})
	AppendCommandCategoryMap("config", "list", &schema.Category{
		Key:         "default",
		DisplayName: "",
		Order:       2147483647,
	})
	AppendCommandCategoryMap("config", "migrate", &schema.Category{
		Key:         "default",
		DisplayName: "",
		Order:       2147483647,
	})
	AppendCommandCategoryMap("config", "show", &schema.Category{
		Key:         "default",
		DisplayName: "",
		Order:       2147483647,
	})
	AppendCommandCategoryMap("config", "use", &schema.Category{
		Key:         "default",
		DisplayName: "",
		Order:       2147483647,
	})

	// build Category-Param mapping

	AppendFlagCategoryMap("config", "current", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "current", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "current", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "current", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "current", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "edit", "default-output-type", &schema.Category{
		Key:         "config",
		DisplayName: "Config options",
		Order:       1,
	})
	AppendFlagCategoryMap("config", "edit", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "edit", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "edit", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "edit", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "edit", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "edit", "secret", &schema.Category{
		Key:         "config",
		DisplayName: "Config options",
		Order:       1,
	})
	AppendFlagCategoryMap("config", "edit", "token", &schema.Category{
		Key:         "config",
		DisplayName: "Config options",
		Order:       1,
	})
	AppendFlagCategoryMap("config", "edit", "zone", &schema.Category{
		Key:         "config",
		DisplayName: "Config options",
		Order:       1,
	})
	AppendFlagCategoryMap("config", "list", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "list", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "list", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "list", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "list", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "migrate", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "migrate", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "migrate", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "migrate", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "migrate", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "show", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "show", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "show", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "show", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "show", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "use", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "use", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "use", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "use", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("config", "use", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})

	// append command to GlobalContext
	Commands = append(Commands, cliCommand)
}

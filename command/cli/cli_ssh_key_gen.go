// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-commands'; DO NOT EDIT

package cli

import (
	"encoding/json"
	"fmt"
	"strings"
	"sync"

	"github.com/imdario/mergo"
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/funcs"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/schema"
	"gopkg.in/urfave/cli.v2"
)

func init() {
	sshKeyListParam := params.NewListSSHKeyParam()
	sshKeyCreateParam := params.NewCreateSSHKeyParam()
	sshKeyReadParam := params.NewReadSSHKeyParam()
	sshKeyUpdateParam := params.NewUpdateSSHKeyParam()
	sshKeyDeleteParam := params.NewDeleteSSHKeyParam()
	sshKeyGenerateParam := params.NewGenerateSSHKeyParam()

	cliCommand := &cli.Command{
		Name:  "ssh-key",
		Usage: "A manage commands of SSHKey",
		Subcommands: []*cli.Command{
			{
				Name:    "list",
				Aliases: []string{"ls", "find"},
				Usage:   "List SSHKey",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "name",
						Usage: "set filter by name(s)",
					},
					&cli.Int64SliceFlag{
						Name:  "id",
						Usage: "set filter by id(s)",
					},
					&cli.IntFlag{
						Name:    "from",
						Aliases: []string{"offset"},
						Usage:   "set offset",
					},
					&cli.IntFlag{
						Name:    "max",
						Aliases: []string{"limit"},
						Usage:   "set limit",
					},
					&cli.StringSliceFlag{
						Name:  "sort",
						Usage: "set field(s) for sort",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					sshKeyListParam.ParamTemplate = c.String("param-template")
					sshKeyListParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(sshKeyListParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewListSSHKeyParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(sshKeyListParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("name") {
						sshKeyListParam.Name = c.StringSlice("name")
					}
					if c.IsSet("id") {
						sshKeyListParam.Id = toSakuraIDs(c.Int64Slice("id"))
					}
					if c.IsSet("from") {
						sshKeyListParam.From = c.Int("from")
					}
					if c.IsSet("max") {
						sshKeyListParam.Max = c.Int("max")
					}
					if c.IsSet("sort") {
						sshKeyListParam.Sort = c.StringSlice("sort")
					}
					if c.IsSet("param-template") {
						sshKeyListParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						sshKeyListParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						sshKeyListParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						sshKeyListParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						sshKeyListParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						sshKeyListParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						sshKeyListParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						sshKeyListParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						sshKeyListParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						sshKeyListParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						sshKeyListParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						sshKeyListParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = sshKeyListParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if sshKeyListParam.GenerateSkeleton {
						sshKeyListParam.GenerateSkeleton = false
						sshKeyListParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(sshKeyListParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := sshKeyListParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), sshKeyListParam)

					// Run command with params
					return funcs.SSHKeyList(ctx, sshKeyListParam)

				},
			},
			{
				Name:  "create",
				Usage: "Create SSHKey",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "public-key",
						Usage: "set public-key from file",
					},
					&cli.StringFlag{
						Name:  "name",
						Usage: "[Required] set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "public-key-content",
						Usage: "set public-key",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					sshKeyCreateParam.ParamTemplate = c.String("param-template")
					sshKeyCreateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(sshKeyCreateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCreateSSHKeyParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(sshKeyCreateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("public-key") {
						sshKeyCreateParam.PublicKey = c.String("public-key")
					}
					if c.IsSet("name") {
						sshKeyCreateParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						sshKeyCreateParam.Description = c.String("description")
					}
					if c.IsSet("assumeyes") {
						sshKeyCreateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("public-key-content") {
						sshKeyCreateParam.PublicKeyContent = c.String("public-key-content")
					}
					if c.IsSet("param-template") {
						sshKeyCreateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						sshKeyCreateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						sshKeyCreateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						sshKeyCreateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						sshKeyCreateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						sshKeyCreateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						sshKeyCreateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						sshKeyCreateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						sshKeyCreateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						sshKeyCreateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						sshKeyCreateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						sshKeyCreateParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = sshKeyCreateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if sshKeyCreateParam.GenerateSkeleton {
						sshKeyCreateParam.GenerateSkeleton = false
						sshKeyCreateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(sshKeyCreateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := sshKeyCreateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), sshKeyCreateParam)

					// confirm
					if !sshKeyCreateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("create") {
							return nil
						}
					}

					// Run command with params
					return funcs.SSHKeyCreate(ctx, sshKeyCreateParam)

				},
			},
			{
				Name:      "read",
				Usage:     "Read SSHKey",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					sshKeyReadParam.ParamTemplate = c.String("param-template")
					sshKeyReadParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(sshKeyReadParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewReadSSHKeyParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(sshKeyReadParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("param-template") {
						sshKeyReadParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						sshKeyReadParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						sshKeyReadParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						sshKeyReadParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						sshKeyReadParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						sshKeyReadParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						sshKeyReadParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						sshKeyReadParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						sshKeyReadParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						sshKeyReadParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						sshKeyReadParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						sshKeyReadParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						sshKeyReadParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = sshKeyReadParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if sshKeyReadParam.GenerateSkeleton {
						sshKeyReadParam.GenerateSkeleton = false
						sshKeyReadParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(sshKeyReadParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := sshKeyReadParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), sshKeyReadParam)

					apiClient := ctx.GetAPIClient().SSHKey
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						return fmt.Errorf("ID or Name argument is required")

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.SSHKeys {

										ids = append(ids, v.GetID())

									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						sshKeyReadParam.SetId(id)
						p := *sshKeyReadParam // copy struct value
						sshKeyReadParam := &p
						go func() {
							err := funcs.SSHKeyRead(ctx, sshKeyReadParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "update",
				Usage:     "Update SSHKey",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "name",
						Usage: "set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					sshKeyUpdateParam.ParamTemplate = c.String("param-template")
					sshKeyUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(sshKeyUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewUpdateSSHKeyParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(sshKeyUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("name") {
						sshKeyUpdateParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						sshKeyUpdateParam.Description = c.String("description")
					}
					if c.IsSet("assumeyes") {
						sshKeyUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						sshKeyUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						sshKeyUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						sshKeyUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						sshKeyUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						sshKeyUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						sshKeyUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						sshKeyUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						sshKeyUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						sshKeyUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						sshKeyUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						sshKeyUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						sshKeyUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						sshKeyUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = sshKeyUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if sshKeyUpdateParam.GenerateSkeleton {
						sshKeyUpdateParam.GenerateSkeleton = false
						sshKeyUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(sshKeyUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := sshKeyUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), sshKeyUpdateParam)

					apiClient := ctx.GetAPIClient().SSHKey
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						return fmt.Errorf("ID or Name argument is required")

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.SSHKeys {

										ids = append(ids, v.GetID())

									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !sshKeyUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						sshKeyUpdateParam.SetId(id)
						p := *sshKeyUpdateParam // copy struct value
						sshKeyUpdateParam := &p
						go func() {
							err := funcs.SSHKeyUpdate(ctx, sshKeyUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "delete",
				Aliases:   []string{"rm"},
				Usage:     "Delete SSHKey",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					sshKeyDeleteParam.ParamTemplate = c.String("param-template")
					sshKeyDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(sshKeyDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDeleteSSHKeyParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(sshKeyDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("assumeyes") {
						sshKeyDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						sshKeyDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						sshKeyDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						sshKeyDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						sshKeyDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						sshKeyDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						sshKeyDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						sshKeyDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						sshKeyDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						sshKeyDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						sshKeyDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						sshKeyDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						sshKeyDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						sshKeyDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = sshKeyDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if sshKeyDeleteParam.GenerateSkeleton {
						sshKeyDeleteParam.GenerateSkeleton = false
						sshKeyDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(sshKeyDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := sshKeyDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), sshKeyDeleteParam)

					apiClient := ctx.GetAPIClient().SSHKey
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						return fmt.Errorf("ID or Name argument is required")

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.SSHKeys {

										ids = append(ids, v.GetID())

									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !sshKeyDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						sshKeyDeleteParam.SetId(id)
						p := *sshKeyDeleteParam // copy struct value
						sshKeyDeleteParam := &p
						go func() {
							err := funcs.SSHKeyDelete(ctx, sshKeyDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:    "generate",
				Aliases: []string{"gen"},
				Usage:   "Generate SSHKey",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "pass-phrase",
						Usage: "set ssh-key pass phrase",
					},
					&cli.StringFlag{
						Name:  "name",
						Usage: "[Required] set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringFlag{
						Name:    "private-key-output",
						Aliases: []string{"file"},
						Usage:   "set ssh-key privatekey output path",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					sshKeyGenerateParam.ParamTemplate = c.String("param-template")
					sshKeyGenerateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(sshKeyGenerateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewGenerateSSHKeyParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(sshKeyGenerateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("pass-phrase") {
						sshKeyGenerateParam.PassPhrase = c.String("pass-phrase")
					}
					if c.IsSet("name") {
						sshKeyGenerateParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						sshKeyGenerateParam.Description = c.String("description")
					}
					if c.IsSet("assumeyes") {
						sshKeyGenerateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						sshKeyGenerateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						sshKeyGenerateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						sshKeyGenerateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						sshKeyGenerateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						sshKeyGenerateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						sshKeyGenerateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("private-key-output") {
						sshKeyGenerateParam.PrivateKeyOutput = c.String("private-key-output")
					}
					if c.IsSet("column") {
						sshKeyGenerateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						sshKeyGenerateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						sshKeyGenerateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						sshKeyGenerateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						sshKeyGenerateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						sshKeyGenerateParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = sshKeyGenerateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if sshKeyGenerateParam.GenerateSkeleton {
						sshKeyGenerateParam.GenerateSkeleton = false
						sshKeyGenerateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(sshKeyGenerateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := sshKeyGenerateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), sshKeyGenerateParam)

					// confirm
					if !sshKeyGenerateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("generate") {
							return nil
						}
					}

					// Run command with params
					return funcs.SSHKeyGenerate(ctx, sshKeyGenerateParam)

				},
			},
		},
	}

	// build Category-Resource mapping
	AppendResourceCategoryMap("ssh-key", &schema.Category{
		Key:         "commonitem",
		DisplayName: "Common items",
		Order:       60,
	})

	// build Category-Command mapping

	AppendCommandCategoryMap("ssh-key", "create", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       1,
	})
	AppendCommandCategoryMap("ssh-key", "delete", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       1,
	})
	AppendCommandCategoryMap("ssh-key", "generate", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       1,
	})
	AppendCommandCategoryMap("ssh-key", "list", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       1,
	})
	AppendCommandCategoryMap("ssh-key", "read", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       1,
	})
	AppendCommandCategoryMap("ssh-key", "update", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       1,
	})

	// build Category-Param mapping

	AppendFlagCategoryMap("ssh-key", "create", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "create", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "create", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("ssh-key", "create", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "create", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "create", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "create", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("ssh-key", "create", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "create", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "create", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "create", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "create", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "create", "public-key", &schema.Category{
		Key:         "upload",
		DisplayName: "Upload options",
		Order:       1,
	})
	AppendFlagCategoryMap("ssh-key", "create", "public-key-content", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "create", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "create", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "create", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("ssh-key", "delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "generate", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "generate", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "generate", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("ssh-key", "generate", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "generate", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "generate", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "generate", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("ssh-key", "generate", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "generate", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "generate", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "generate", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "generate", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "generate", "pass-phrase", &schema.Category{
		Key:         "generate",
		DisplayName: "Generate options",
		Order:       1,
	})
	AppendFlagCategoryMap("ssh-key", "generate", "private-key-output", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "generate", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "generate", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "generate", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "list", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "list", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "list", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "list", "from", &schema.Category{
		Key:         "limit-offset",
		DisplayName: "Limit/Offset options",
		Order:       2147483597,
	})
	AppendFlagCategoryMap("ssh-key", "list", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "list", "id", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("ssh-key", "list", "max", &schema.Category{
		Key:         "limit-offset",
		DisplayName: "Limit/Offset options",
		Order:       2147483597,
	})
	AppendFlagCategoryMap("ssh-key", "list", "name", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("ssh-key", "list", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "list", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "list", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "list", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "list", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "list", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "list", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "list", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "list", "sort", &schema.Category{
		Key:         "sort",
		DisplayName: "Sort options",
		Order:       2147483607,
	})
	AppendFlagCategoryMap("ssh-key", "read", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "read", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "read", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "read", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "read", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("ssh-key", "read", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "read", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "read", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "read", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "read", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "read", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "read", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "read", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "update", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("ssh-key", "update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("ssh-key", "update", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("ssh-key", "update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("ssh-key", "update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("ssh-key", "update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})

	// append command to GlobalContext
	Commands = append(Commands, cliCommand)
}

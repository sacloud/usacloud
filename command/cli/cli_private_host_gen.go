// Copyright 2017-2020 The Usacloud Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-commands'; DO NOT EDIT

package cli

import (
	"encoding/json"
	"fmt"
	"strings"
	"sync"

	"github.com/imdario/mergo"
	"github.com/sacloud/libsacloud/sacloud"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/funcs"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/schema"
	"gopkg.in/urfave/cli.v2"
)

func init() {
	privateHostListParam := params.NewListPrivateHostParam()
	privateHostCreateParam := params.NewCreatePrivateHostParam()
	privateHostReadParam := params.NewReadPrivateHostParam()
	privateHostUpdateParam := params.NewUpdatePrivateHostParam()
	privateHostDeleteParam := params.NewDeletePrivateHostParam()
	privateHostServerInfoParam := params.NewServerInfoPrivateHostParam()
	privateHostServerAddParam := params.NewServerAddPrivateHostParam()
	privateHostServerDeleteParam := params.NewServerDeletePrivateHostParam()

	cliCommand := &cli.Command{
		Name:  "private-host",
		Usage: "A manage commands of PrivateHost",
		Subcommands: []*cli.Command{
			{
				Name:    "list",
				Aliases: []string{"ls", "find", "selector"},
				Usage:   "List PrivateHost",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "name",
						Usage: "set filter by name(s)",
					},
					&cli.Int64SliceFlag{
						Name:  "id",
						Usage: "set filter by id(s)",
					},
					&cli.StringSliceFlag{
						Name:    "tags",
						Aliases: []string{"selector"},
						Usage:   "set filter by tags(AND)",
					},
					&cli.IntFlag{
						Name:    "from",
						Aliases: []string{"offset"},
						Usage:   "set offset",
					},
					&cli.IntFlag{
						Name:    "max",
						Aliases: []string{"limit"},
						Usage:   "set limit",
					},
					&cli.StringSliceFlag{
						Name:  "sort",
						Usage: "set field(s) for sort",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					privateHostListParam.ParamTemplate = c.String("param-template")
					privateHostListParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(privateHostListParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewListPrivateHostParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(privateHostListParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("name") {
						privateHostListParam.Name = c.StringSlice("name")
					}
					if c.IsSet("id") {
						privateHostListParam.Id = toSakuraIDs(c.Int64Slice("id"))
					}
					if c.IsSet("tags") {
						privateHostListParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("from") {
						privateHostListParam.From = c.Int("from")
					}
					if c.IsSet("max") {
						privateHostListParam.Max = c.Int("max")
					}
					if c.IsSet("sort") {
						privateHostListParam.Sort = c.StringSlice("sort")
					}
					if c.IsSet("param-template") {
						privateHostListParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						privateHostListParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						privateHostListParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						privateHostListParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						privateHostListParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						privateHostListParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						privateHostListParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						privateHostListParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						privateHostListParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						privateHostListParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						privateHostListParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						privateHostListParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = privateHostListParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if privateHostListParam.GenerateSkeleton {
						privateHostListParam.GenerateSkeleton = false
						privateHostListParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(privateHostListParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := privateHostListParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), privateHostListParam)

					// Run command with params
					return funcs.PrivateHostList(ctx, privateHostListParam)

				},
			},
			{
				Name:  "create",
				Usage: "Create PrivateHost",
				Flags: []cli.Flag{
					&cli.StringFlag{
						Name:  "name",
						Usage: "[Required] set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "set resource tags",
					},
					&cli.Int64Flag{
						Name:  "icon-id",
						Usage: "set Icon ID",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					privateHostCreateParam.ParamTemplate = c.String("param-template")
					privateHostCreateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(privateHostCreateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewCreatePrivateHostParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(privateHostCreateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("name") {
						privateHostCreateParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						privateHostCreateParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						privateHostCreateParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						privateHostCreateParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						privateHostCreateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						privateHostCreateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						privateHostCreateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						privateHostCreateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						privateHostCreateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						privateHostCreateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						privateHostCreateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						privateHostCreateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						privateHostCreateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						privateHostCreateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						privateHostCreateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						privateHostCreateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						privateHostCreateParam.QueryFile = c.String("query-file")
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = privateHostCreateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if privateHostCreateParam.GenerateSkeleton {
						privateHostCreateParam.GenerateSkeleton = false
						privateHostCreateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(privateHostCreateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := privateHostCreateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), privateHostCreateParam)

					// confirm
					if !privateHostCreateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("create") {
							return nil
						}
					}

					// Run command with params
					return funcs.PrivateHostCreate(ctx, privateHostCreateParam)

				},
			},
			{
				Name:      "read",
				Usage:     "Read PrivateHost",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					privateHostReadParam.ParamTemplate = c.String("param-template")
					privateHostReadParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(privateHostReadParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewReadPrivateHostParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(privateHostReadParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						privateHostReadParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						privateHostReadParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						privateHostReadParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						privateHostReadParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						privateHostReadParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						privateHostReadParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						privateHostReadParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						privateHostReadParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						privateHostReadParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						privateHostReadParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						privateHostReadParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						privateHostReadParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						privateHostReadParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						privateHostReadParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = privateHostReadParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if privateHostReadParam.GenerateSkeleton {
						privateHostReadParam.GenerateSkeleton = false
						privateHostReadParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(privateHostReadParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := privateHostReadParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), privateHostReadParam)

					apiClient := ctx.GetAPIClient().PrivateHost
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(privateHostReadParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.PrivateHosts {
							if hasTags(&v, privateHostReadParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", privateHostReadParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.PrivateHosts {
										if len(privateHostReadParam.Selector) == 0 || hasTags(&v, privateHostReadParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						privateHostReadParam.SetId(id)
						p := *privateHostReadParam // copy struct value
						privateHostReadParam := &p
						go func() {
							err := funcs.PrivateHostRead(ctx, privateHostReadParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "update",
				Usage:     "Update PrivateHost",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "name",
						Usage: "set resource display name",
					},
					&cli.StringFlag{
						Name:    "description",
						Aliases: []string{"desc"},
						Usage:   "set resource description",
					},
					&cli.StringSliceFlag{
						Name:  "tags",
						Usage: "set resource tags",
					},
					&cli.Int64Flag{
						Name:  "icon-id",
						Usage: "set Icon ID",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					privateHostUpdateParam.ParamTemplate = c.String("param-template")
					privateHostUpdateParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(privateHostUpdateParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewUpdatePrivateHostParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(privateHostUpdateParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						privateHostUpdateParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("name") {
						privateHostUpdateParam.Name = c.String("name")
					}
					if c.IsSet("description") {
						privateHostUpdateParam.Description = c.String("description")
					}
					if c.IsSet("tags") {
						privateHostUpdateParam.Tags = c.StringSlice("tags")
					}
					if c.IsSet("icon-id") {
						privateHostUpdateParam.IconId = sacloud.ID(c.Int64("icon-id"))
					}
					if c.IsSet("assumeyes") {
						privateHostUpdateParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						privateHostUpdateParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						privateHostUpdateParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						privateHostUpdateParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						privateHostUpdateParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						privateHostUpdateParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						privateHostUpdateParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						privateHostUpdateParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						privateHostUpdateParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						privateHostUpdateParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						privateHostUpdateParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						privateHostUpdateParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						privateHostUpdateParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						privateHostUpdateParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = privateHostUpdateParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if privateHostUpdateParam.GenerateSkeleton {
						privateHostUpdateParam.GenerateSkeleton = false
						privateHostUpdateParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(privateHostUpdateParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := privateHostUpdateParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), privateHostUpdateParam)

					apiClient := ctx.GetAPIClient().PrivateHost
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(privateHostUpdateParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.PrivateHosts {
							if hasTags(&v, privateHostUpdateParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", privateHostUpdateParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.PrivateHosts {
										if len(privateHostUpdateParam.Selector) == 0 || hasTags(&v, privateHostUpdateParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !privateHostUpdateParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("update", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						privateHostUpdateParam.SetId(id)
						p := *privateHostUpdateParam // copy struct value
						privateHostUpdateParam := &p
						go func() {
							err := funcs.PrivateHostUpdate(ctx, privateHostUpdateParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "delete",
				Aliases:   []string{"rm"},
				Usage:     "Delete PrivateHost",
				ArgsUsage: "<ID or Name(allow multiple target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					privateHostDeleteParam.ParamTemplate = c.String("param-template")
					privateHostDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(privateHostDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewDeletePrivateHostParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(privateHostDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						privateHostDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						privateHostDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						privateHostDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						privateHostDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						privateHostDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						privateHostDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						privateHostDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						privateHostDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						privateHostDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						privateHostDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						privateHostDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						privateHostDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						privateHostDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						privateHostDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						privateHostDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = privateHostDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if privateHostDeleteParam.GenerateSkeleton {
						privateHostDeleteParam.GenerateSkeleton = false
						privateHostDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(privateHostDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := privateHostDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), privateHostDeleteParam)

					apiClient := ctx.GetAPIClient().PrivateHost
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(privateHostDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.PrivateHosts {
							if hasTags(&v, privateHostDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", privateHostDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.PrivateHosts {
										if len(privateHostDeleteParam.Selector) == 0 || hasTags(&v, privateHostDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					// confirm
					if !privateHostDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						privateHostDeleteParam.SetId(id)
						p := *privateHostDeleteParam // copy struct value
						privateHostDeleteParam := &p
						go func() {
							err := funcs.PrivateHostDelete(ctx, privateHostDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "server-info",
				Aliases:   []string{"server-list"},
				Usage:     "ServerInfo PrivateHost",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					privateHostServerInfoParam.ParamTemplate = c.String("param-template")
					privateHostServerInfoParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(privateHostServerInfoParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewServerInfoPrivateHostParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(privateHostServerInfoParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("selector") {
						privateHostServerInfoParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("param-template") {
						privateHostServerInfoParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						privateHostServerInfoParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						privateHostServerInfoParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						privateHostServerInfoParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						privateHostServerInfoParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						privateHostServerInfoParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						privateHostServerInfoParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						privateHostServerInfoParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						privateHostServerInfoParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						privateHostServerInfoParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						privateHostServerInfoParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						privateHostServerInfoParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						privateHostServerInfoParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = privateHostServerInfoParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if privateHostServerInfoParam.GenerateSkeleton {
						privateHostServerInfoParam.GenerateSkeleton = false
						privateHostServerInfoParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(privateHostServerInfoParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := privateHostServerInfoParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), privateHostServerInfoParam)

					apiClient := ctx.GetAPIClient().PrivateHost
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(privateHostServerInfoParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.PrivateHosts {
							if hasTags(&v, privateHostServerInfoParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", privateHostServerInfoParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.PrivateHosts {
										if len(privateHostServerInfoParam.Selector) == 0 || hasTags(&v, privateHostServerInfoParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						privateHostServerInfoParam.SetId(id)
						p := *privateHostServerInfoParam // copy struct value
						privateHostServerInfoParam := &p
						go func() {
							err := funcs.PrivateHostServerInfo(ctx, privateHostServerInfoParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "server-add",
				Usage:     "ServerAdd PrivateHost",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.Int64Flag{
						Name:  "server-id",
						Usage: "[Required] set server ID",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					privateHostServerAddParam.ParamTemplate = c.String("param-template")
					privateHostServerAddParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(privateHostServerAddParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewServerAddPrivateHostParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(privateHostServerAddParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("server-id") {
						privateHostServerAddParam.ServerId = sacloud.ID(c.Int64("server-id"))
					}
					if c.IsSet("selector") {
						privateHostServerAddParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						privateHostServerAddParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						privateHostServerAddParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						privateHostServerAddParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						privateHostServerAddParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						privateHostServerAddParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						privateHostServerAddParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						privateHostServerAddParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						privateHostServerAddParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						privateHostServerAddParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						privateHostServerAddParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						privateHostServerAddParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						privateHostServerAddParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						privateHostServerAddParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						privateHostServerAddParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = privateHostServerAddParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if privateHostServerAddParam.GenerateSkeleton {
						privateHostServerAddParam.GenerateSkeleton = false
						privateHostServerAddParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(privateHostServerAddParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := privateHostServerAddParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), privateHostServerAddParam)

					apiClient := ctx.GetAPIClient().PrivateHost
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(privateHostServerAddParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.PrivateHosts {
							if hasTags(&v, privateHostServerAddParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", privateHostServerAddParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.PrivateHosts {
										if len(privateHostServerAddParam.Selector) == 0 || hasTags(&v, privateHostServerAddParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !privateHostServerAddParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("server-add", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						privateHostServerAddParam.SetId(id)
						p := *privateHostServerAddParam // copy struct value
						privateHostServerAddParam := &p
						go func() {
							err := funcs.PrivateHostServerAdd(ctx, privateHostServerAddParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
			{
				Name:      "server-delete",
				Usage:     "ServerDelete PrivateHost",
				ArgsUsage: "<ID or Name(only single target)>",
				Flags: []cli.Flag{
					&cli.Int64Flag{
						Name:  "server-id",
						Usage: "[Required] set server ID",
					},
					&cli.StringSliceFlag{
						Name:  "selector",
						Usage: "Set target filter by tag",
					},
					&cli.BoolFlag{
						Name:    "assumeyes",
						Aliases: []string{"y"},
						Usage:   "Assume that the answer to any question which would be asked is yes",
					},
					&cli.StringFlag{
						Name:  "param-template",
						Usage: "Set input parameter from string(JSON)",
					},
					&cli.StringFlag{
						Name:  "parameters",
						Usage: "Set input parameters from JSON string",
					},
					&cli.StringFlag{
						Name:  "param-template-file",
						Usage: "Set input parameter from file",
					},
					&cli.StringFlag{
						Name:  "parameter-file",
						Usage: "Set input parameters from file",
					},
					&cli.BoolFlag{
						Name:  "generate-skeleton",
						Usage: "Output skelton of parameter JSON",
					},
					&cli.StringFlag{
						Name:    "output-type",
						Aliases: []string{"out", "o"},
						Usage:   "Output type [table/json/csv/tsv]",
					},
					&cli.StringSliceFlag{
						Name:    "column",
						Aliases: []string{"col"},
						Usage:   "Output columns(using when '--output-type' is in [csv/tsv] only)",
					},
					&cli.BoolFlag{
						Name:    "quiet",
						Aliases: []string{"q"},
						Usage:   "Only display IDs",
					},
					&cli.StringFlag{
						Name:    "format",
						Aliases: []string{"fmt"},
						Usage:   "Output format(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "format-file",
						Usage: "Output format from file(see text/template package document for detail)",
					},
					&cli.StringFlag{
						Name:  "query",
						Usage: "JMESPath query(using when '--output-type' is json only)",
					},
					&cli.StringFlag{
						Name:  "query-file",
						Usage: "JMESPath query from file(using when '--output-type' is json only)",
					},
					&cli.Int64Flag{
						Name:   "id",
						Usage:  "Set target ID",
						Hidden: true,
					},
				},
				Action: func(c *cli.Context) error {

					if err := checkConfigVersion(); err != nil {
						return err
					}
					if err := applyConfigFromFile(c); err != nil {
						return err
					}

					privateHostServerDeleteParam.ParamTemplate = c.String("param-template")
					privateHostServerDeleteParam.ParamTemplateFile = c.String("param-template-file")
					strInput, err := command.GetParamTemplateValue(privateHostServerDeleteParam)
					if err != nil {
						return err
					}
					if strInput != "" {
						p := params.NewServerDeletePrivateHostParam()
						err := json.Unmarshal([]byte(strInput), p)
						if err != nil {
							return fmt.Errorf("Failed to parse JSON: %s", err)
						}
						mergo.Merge(privateHostServerDeleteParam, p, mergo.WithOverride)
					}

					// Set option values
					if c.IsSet("server-id") {
						privateHostServerDeleteParam.ServerId = sacloud.ID(c.Int64("server-id"))
					}
					if c.IsSet("selector") {
						privateHostServerDeleteParam.Selector = c.StringSlice("selector")
					}
					if c.IsSet("assumeyes") {
						privateHostServerDeleteParam.Assumeyes = c.Bool("assumeyes")
					}
					if c.IsSet("param-template") {
						privateHostServerDeleteParam.ParamTemplate = c.String("param-template")
					}
					if c.IsSet("parameters") {
						privateHostServerDeleteParam.Parameters = c.String("parameters")
					}
					if c.IsSet("param-template-file") {
						privateHostServerDeleteParam.ParamTemplateFile = c.String("param-template-file")
					}
					if c.IsSet("parameter-file") {
						privateHostServerDeleteParam.ParameterFile = c.String("parameter-file")
					}
					if c.IsSet("generate-skeleton") {
						privateHostServerDeleteParam.GenerateSkeleton = c.Bool("generate-skeleton")
					}
					if c.IsSet("output-type") {
						privateHostServerDeleteParam.OutputType = c.String("output-type")
					}
					if c.IsSet("column") {
						privateHostServerDeleteParam.Column = c.StringSlice("column")
					}
					if c.IsSet("quiet") {
						privateHostServerDeleteParam.Quiet = c.Bool("quiet")
					}
					if c.IsSet("format") {
						privateHostServerDeleteParam.Format = c.String("format")
					}
					if c.IsSet("format-file") {
						privateHostServerDeleteParam.FormatFile = c.String("format-file")
					}
					if c.IsSet("query") {
						privateHostServerDeleteParam.Query = c.String("query")
					}
					if c.IsSet("query-file") {
						privateHostServerDeleteParam.QueryFile = c.String("query-file")
					}
					if c.IsSet("id") {
						privateHostServerDeleteParam.Id = sacloud.ID(c.Int64("id"))
					}

					// Validate global params
					if errors := command.GlobalOption.Validate(false); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					var outputTypeHolder interface{} = privateHostServerDeleteParam
					if v, ok := outputTypeHolder.(command.OutputTypeHolder); ok {
						if v.GetOutputType() == "" {
							v.SetOutputType(command.GlobalOption.DefaultOutputType)
						}
					}

					// Experiment warning
					printWarning("")

					// Generate skeleton
					if privateHostServerDeleteParam.GenerateSkeleton {
						privateHostServerDeleteParam.GenerateSkeleton = false
						privateHostServerDeleteParam.FillValueToSkeleton()
						d, err := json.MarshalIndent(privateHostServerDeleteParam, "", "\t")
						if err != nil {
							return fmt.Errorf("Failed to Marshal JSON: %s", err)
						}
						fmt.Fprintln(command.GlobalOption.Out, string(d))
						return nil
					}

					// Validate specific for each command params
					if errors := privateHostServerDeleteParam.Validate(); len(errors) > 0 {
						return command.FlattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := command.NewContext(c, c.Args().Slice(), privateHostServerDeleteParam)

					apiClient := ctx.GetAPIClient().PrivateHost
					ids := []sacloud.ID{}

					if c.NArg() == 0 {

						if len(privateHostServerDeleteParam.Selector) == 0 {
							return fmt.Errorf("ID or Name argument or --selector option is required")
						}
						apiClient.Reset()
						res, err := apiClient.Find()
						if err != nil {
							return fmt.Errorf("Find ID is failed: %s", err)
						}
						for _, v := range res.PrivateHosts {
							if hasTags(&v, privateHostServerDeleteParam.Selector) {
								ids = append(ids, v.GetID())
							}
						}
						if len(ids) == 0 {
							return fmt.Errorf("Find ID is failed: Not Found[with search param tags=%s]", privateHostServerDeleteParam.Selector)
						}

					} else {

						for _, arg := range c.Args().Slice() {

							for _, a := range strings.Split(arg, "\n") {
								idOrName := a
								if id, ok := toSakuraID(idOrName); ok {
									ids = append(ids, id)
								} else {
									apiClient.Reset()
									apiClient.SetFilterBy("Name", idOrName)
									res, err := apiClient.Find()
									if err != nil {
										return fmt.Errorf("Find ID is failed: %s", err)
									}
									if res.Count == 0 {
										return fmt.Errorf("Find ID is failed: Not Found[with search param %q]", idOrName)
									}
									for _, v := range res.PrivateHosts {
										if len(privateHostServerDeleteParam.Selector) == 0 || hasTags(&v, privateHostServerDeleteParam.Selector) {
											ids = append(ids, v.GetID())
										}
									}
								}
							}

						}

					}

					ids = command.UniqIDs(ids)
					if len(ids) == 0 {
						return fmt.Errorf("Target resource is not found")
					}

					if len(ids) != 1 {
						return fmt.Errorf("Can't run with multiple targets: %v", ids)
					}

					// confirm
					if !privateHostServerDeleteParam.Assumeyes {
						if !isTerminal() {
							return fmt.Errorf("When using redirect/pipe, specify --assumeyes(-y) option")
						}
						if !command.ConfirmContinue("server-delete", ids...) {
							return nil
						}
					}

					wg := sync.WaitGroup{}
					errs := []error{}

					for _, id := range ids {
						wg.Add(1)
						privateHostServerDeleteParam.SetId(id)
						p := *privateHostServerDeleteParam // copy struct value
						privateHostServerDeleteParam := &p
						go func() {
							err := funcs.PrivateHostServerDelete(ctx, privateHostServerDeleteParam)
							if err != nil {
								errs = append(errs, err)
							}
							wg.Done()
						}()
					}
					wg.Wait()
					return command.FlattenErrors(errs)

				},
			},
		},
	}

	// build Category-Resource mapping
	AppendResourceCategoryMap("private-host", &schema.Category{
		Key:         "computing",
		DisplayName: "Computing",
		Order:       10,
	})

	// build Category-Command mapping

	AppendCommandCategoryMap("private-host", "create", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("private-host", "delete", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("private-host", "list", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("private-host", "read", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})
	AppendCommandCategoryMap("private-host", "server-add", &schema.Category{
		Key:         "servers",
		DisplayName: "Server Management",
		Order:       20,
	})
	AppendCommandCategoryMap("private-host", "server-delete", &schema.Category{
		Key:         "servers",
		DisplayName: "Server Management",
		Order:       20,
	})
	AppendCommandCategoryMap("private-host", "server-info", &schema.Category{
		Key:         "servers",
		DisplayName: "Server Management",
		Order:       20,
	})
	AppendCommandCategoryMap("private-host", "update", &schema.Category{
		Key:         "basics",
		DisplayName: "Basics",
		Order:       10,
	})

	// build Category-Param mapping

	AppendFlagCategoryMap("private-host", "create", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "create", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "create", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("private-host", "create", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "create", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "create", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "create", "icon-id", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("private-host", "create", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("private-host", "create", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "create", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "create", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "create", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "create", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "create", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "create", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "create", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "create", "tags", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("private-host", "delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("private-host", "delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("private-host", "list", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "list", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "list", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "list", "from", &schema.Category{
		Key:         "limit-offset",
		DisplayName: "Limit/Offset options",
		Order:       2147483597,
	})
	AppendFlagCategoryMap("private-host", "list", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "list", "id", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("private-host", "list", "max", &schema.Category{
		Key:         "limit-offset",
		DisplayName: "Limit/Offset options",
		Order:       2147483597,
	})
	AppendFlagCategoryMap("private-host", "list", "name", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("private-host", "list", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "list", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "list", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "list", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "list", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "list", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "list", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "list", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "list", "sort", &schema.Category{
		Key:         "sort",
		DisplayName: "Sort options",
		Order:       2147483607,
	})
	AppendFlagCategoryMap("private-host", "list", "tags", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("private-host", "read", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "read", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "read", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "read", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "read", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("private-host", "read", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "read", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "read", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "read", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "read", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "read", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "read", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "read", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "read", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("private-host", "server-add", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "server-add", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "server-add", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "server-add", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "server-add", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "server-add", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("private-host", "server-add", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "server-add", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "server-add", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "server-add", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "server-add", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "server-add", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "server-add", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "server-add", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "server-add", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("private-host", "server-add", "server-id", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("private-host", "server-delete", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "server-delete", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "server-delete", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "server-delete", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "server-delete", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "server-delete", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("private-host", "server-delete", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "server-delete", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "server-delete", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "server-delete", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "server-delete", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "server-delete", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "server-delete", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "server-delete", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "server-delete", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("private-host", "server-delete", "server-id", &schema.Category{
		Key:         "server",
		DisplayName: "Server options",
		Order:       1,
	})
	AppendFlagCategoryMap("private-host", "server-info", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "server-info", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "server-info", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "server-info", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "server-info", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("private-host", "server-info", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "server-info", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "server-info", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "server-info", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "server-info", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "server-info", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "server-info", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "server-info", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "server-info", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("private-host", "update", "assumeyes", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "update", "column", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "update", "description", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("private-host", "update", "format", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "update", "format-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "update", "generate-skeleton", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "update", "icon-id", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("private-host", "update", "id", &schema.Category{
		Key:         "default",
		DisplayName: "Other options",
		Order:       2147483647,
	})
	AppendFlagCategoryMap("private-host", "update", "name", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})
	AppendFlagCategoryMap("private-host", "update", "output-type", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "update", "param-template", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "update", "param-template-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "update", "parameter-file", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "update", "parameters", &schema.Category{
		Key:         "Input",
		DisplayName: "Input options",
		Order:       2147483627,
	})
	AppendFlagCategoryMap("private-host", "update", "query", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "update", "query-file", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "update", "quiet", &schema.Category{
		Key:         "output",
		DisplayName: "Output options",
		Order:       2147483637,
	})
	AppendFlagCategoryMap("private-host", "update", "selector", &schema.Category{
		Key:         "filter",
		DisplayName: "Filter options",
		Order:       2147483587,
	})
	AppendFlagCategoryMap("private-host", "update", "tags", &schema.Category{
		Key:         "common",
		DisplayName: "Common options",
		Order:       2147483617,
	})

	// append command to GlobalContext
	Commands = append(Commands, cliCommand)
}

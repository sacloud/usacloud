// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-completion'; DO NOT EDIT

package completion

import (
	"fmt"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/schema"
)

func ServerListCompleteFlags(ctx command.Context, params *params.ListServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "name":
		param := define.Resources["Server"].Commands["list"].BuildedParams().Get("name")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["list"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "tags", "selector":
		param := define.Resources["Server"].Commands["list"].BuildedParams().Get("tags")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "from", "offset":
		param := define.Resources["Server"].Commands["list"].BuildedParams().Get("from")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "max", "limit":
		param := define.Resources["Server"].Commands["list"].BuildedParams().Get("max")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "sort":
		param := define.Resources["Server"].Commands["list"].BuildedParams().Get("sort")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerBuildCompleteFlags(ctx command.Context, params *params.BuildServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "core":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("core")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "memory":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("memory")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "disk-mode":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("disk-mode")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "os-type":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("os-type")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "disk-plan":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("disk-plan")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "disk-connection":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("disk-connection")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "disk-size":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("disk-size")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "source-archive-id":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("source-archive-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "source-disk-id":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("source-disk-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "distant-from":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("distant-from")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "disk-id":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("disk-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "iso-image-id":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("iso-image-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "network-mode":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("network-mode")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "interface-driver":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("interface-driver")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "packet-filter-id":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("packet-filter-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "switch-id":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("switch-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "hostname":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("hostname")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "password":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("password")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "disable-password-auth", "disable-pw-auth":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("disable-password-auth")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ipaddress", "ip":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("ipaddress")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "nw-masklen", "network-masklen":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("nw-masklen")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "default-route", "gateway":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("default-route")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "startup-scripts", "notes":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("startup-scripts")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "startup-script-ids", "note-ids":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("startup-script-ids")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "startup-scripts-ephemeral":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("startup-scripts-ephemeral")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ssh-key-mode":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("ssh-key-mode")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ssh-key-name":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("ssh-key-name")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ssh-key-ids":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("ssh-key-ids")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ssh-key-pass-phrase":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("ssh-key-pass-phrase")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ssh-key-description":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("ssh-key-description")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ssh-key-private-key-output":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("ssh-key-private-key-output")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ssh-key-public-keys":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("ssh-key-public-keys")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ssh-key-public-key-files":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("ssh-key-public-key-files")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ssh-key-ephemeral":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("ssh-key-ephemeral")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "name":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("name")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "description", "desc":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("description")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "tags":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("tags")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "icon-id":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("icon-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "us-keyboard":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("us-keyboard")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "disable-boot-after-create":
		param := define.Resources["Server"].Commands["build"].BuildedParams().Get("disable-boot-after-create")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerReadCompleteFlags(ctx command.Context, params *params.ReadServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["Server"].Commands["read"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["read"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerUpdateCompleteFlags(ctx command.Context, params *params.UpdateServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "interface-driver":
		param := define.Resources["Server"].Commands["update"].BuildedParams().Get("interface-driver")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Server"].Commands["update"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "name":
		param := define.Resources["Server"].Commands["update"].BuildedParams().Get("name")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "description", "desc":
		param := define.Resources["Server"].Commands["update"].BuildedParams().Get("description")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "tags":
		param := define.Resources["Server"].Commands["update"].BuildedParams().Get("tags")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "icon-id":
		param := define.Resources["Server"].Commands["update"].BuildedParams().Get("icon-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["update"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerDeleteCompleteFlags(ctx command.Context, params *params.DeleteServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "force", "f":
		param := define.Resources["Server"].Commands["delete"].BuildedParams().Get("force")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "without-disk":
		param := define.Resources["Server"].Commands["delete"].BuildedParams().Get("without-disk")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Server"].Commands["delete"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["delete"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerPlanChangeCompleteFlags(ctx command.Context, params *params.PlanChangeServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "core":
		param := define.Resources["Server"].Commands["plan-change"].BuildedParams().Get("core")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "memory":
		param := define.Resources["Server"].Commands["plan-change"].BuildedParams().Get("memory")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Server"].Commands["plan-change"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["plan-change"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerBootCompleteFlags(ctx command.Context, params *params.BootServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["Server"].Commands["boot"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["boot"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerShutdownCompleteFlags(ctx command.Context, params *params.ShutdownServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["Server"].Commands["shutdown"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["shutdown"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerShutdownForceCompleteFlags(ctx command.Context, params *params.ShutdownForceServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["Server"].Commands["shutdown-force"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["shutdown-force"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerResetCompleteFlags(ctx command.Context, params *params.ResetServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["Server"].Commands["reset"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["reset"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerWaitForBootCompleteFlags(ctx command.Context, params *params.WaitForBootServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["Server"].Commands["wait-for-boot"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["wait-for-boot"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerWaitForDownCompleteFlags(ctx command.Context, params *params.WaitForDownServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["Server"].Commands["wait-for-down"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["wait-for-down"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerSshCompleteFlags(ctx command.Context, params *params.SshServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "key", "i":
		param := define.Resources["Server"].Commands["ssh"].BuildedParams().Get("key")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "user", "l":
		param := define.Resources["Server"].Commands["ssh"].BuildedParams().Get("user")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "port", "p":
		param := define.Resources["Server"].Commands["ssh"].BuildedParams().Get("port")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "password":
		param := define.Resources["Server"].Commands["ssh"].BuildedParams().Get("password")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Server"].Commands["ssh"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["ssh"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerSshExecCompleteFlags(ctx command.Context, params *params.SshExecServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "key", "i":
		param := define.Resources["Server"].Commands["ssh-exec"].BuildedParams().Get("key")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "user", "l":
		param := define.Resources["Server"].Commands["ssh-exec"].BuildedParams().Get("user")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "port", "p":
		param := define.Resources["Server"].Commands["ssh-exec"].BuildedParams().Get("port")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "password":
		param := define.Resources["Server"].Commands["ssh-exec"].BuildedParams().Get("password")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["ssh-exec"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerScpCompleteFlags(ctx command.Context, params *params.ScpServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "key", "i":
		param := define.Resources["Server"].Commands["scp"].BuildedParams().Get("key")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "recursive", "r":
		param := define.Resources["Server"].Commands["scp"].BuildedParams().Get("recursive")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "user", "l":
		param := define.Resources["Server"].Commands["scp"].BuildedParams().Get("user")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "port", "p":
		param := define.Resources["Server"].Commands["scp"].BuildedParams().Get("port")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "password":
		param := define.Resources["Server"].Commands["scp"].BuildedParams().Get("password")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerVncCompleteFlags(ctx command.Context, params *params.VncServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "wait-for-boot":
		param := define.Resources["Server"].Commands["vnc"].BuildedParams().Get("wait-for-boot")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Server"].Commands["vnc"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["vnc"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerVncInfoCompleteFlags(ctx command.Context, params *params.VncInfoServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "wait-for-boot":
		param := define.Resources["Server"].Commands["vnc-info"].BuildedParams().Get("wait-for-boot")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Server"].Commands["vnc-info"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["vnc-info"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerVncSendCompleteFlags(ctx command.Context, params *params.VncSendServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "command", "c":
		param := define.Resources["Server"].Commands["vnc-send"].BuildedParams().Get("command")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "command-file", "f":
		param := define.Resources["Server"].Commands["vnc-send"].BuildedParams().Get("command-file")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "use-us-keyboard":
		param := define.Resources["Server"].Commands["vnc-send"].BuildedParams().Get("use-us-keyboard")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "debug", "d":
		param := define.Resources["Server"].Commands["vnc-send"].BuildedParams().Get("debug")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "wait-for-boot":
		param := define.Resources["Server"].Commands["vnc-send"].BuildedParams().Get("wait-for-boot")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Server"].Commands["vnc-send"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["vnc-send"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerVncSnapshotCompleteFlags(ctx command.Context, params *params.VncSnapshotServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "wait-for-boot":
		param := define.Resources["Server"].Commands["vnc-snapshot"].BuildedParams().Get("wait-for-boot")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-path", "o":
		param := define.Resources["Server"].Commands["vnc-snapshot"].BuildedParams().Get("output-path")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Server"].Commands["vnc-snapshot"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["vnc-snapshot"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerDiskInfoCompleteFlags(ctx command.Context, params *params.DiskInfoServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["Server"].Commands["disk-info"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["disk-info"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerDiskConnectCompleteFlags(ctx command.Context, params *params.DiskConnectServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "disk-id":
		param := define.Resources["Server"].Commands["disk-connect"].BuildedParams().Get("disk-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Server"].Commands["disk-connect"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["disk-connect"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerDiskDisconnectCompleteFlags(ctx command.Context, params *params.DiskDisconnectServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "disk-id":
		param := define.Resources["Server"].Commands["disk-disconnect"].BuildedParams().Get("disk-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Server"].Commands["disk-disconnect"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["disk-disconnect"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerInterfaceInfoCompleteFlags(ctx command.Context, params *params.InterfaceInfoServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["Server"].Commands["interface-info"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["interface-info"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerInterfaceAddForInternetCompleteFlags(ctx command.Context, params *params.InterfaceAddForInternetServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "without-disk-edit":
		param := define.Resources["Server"].Commands["interface-add-for-internet"].BuildedParams().Get("without-disk-edit")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Server"].Commands["interface-add-for-internet"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["interface-add-for-internet"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerInterfaceAddForRouterCompleteFlags(ctx command.Context, params *params.InterfaceAddForRouterServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "switch-id":
		param := define.Resources["Server"].Commands["interface-add-for-router"].BuildedParams().Get("switch-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "without-disk-edit":
		param := define.Resources["Server"].Commands["interface-add-for-router"].BuildedParams().Get("without-disk-edit")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ipaddress", "ip":
		param := define.Resources["Server"].Commands["interface-add-for-router"].BuildedParams().Get("ipaddress")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "default-route", "gateway":
		param := define.Resources["Server"].Commands["interface-add-for-router"].BuildedParams().Get("default-route")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "nw-masklen", "network-masklen":
		param := define.Resources["Server"].Commands["interface-add-for-router"].BuildedParams().Get("nw-masklen")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Server"].Commands["interface-add-for-router"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["interface-add-for-router"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerInterfaceAddForSwitchCompleteFlags(ctx command.Context, params *params.InterfaceAddForSwitchServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "switch-id":
		param := define.Resources["Server"].Commands["interface-add-for-switch"].BuildedParams().Get("switch-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "without-disk-edit":
		param := define.Resources["Server"].Commands["interface-add-for-switch"].BuildedParams().Get("without-disk-edit")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "ipaddress", "ip":
		param := define.Resources["Server"].Commands["interface-add-for-switch"].BuildedParams().Get("ipaddress")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "default-route", "gateway":
		param := define.Resources["Server"].Commands["interface-add-for-switch"].BuildedParams().Get("default-route")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "nw-masklen", "network-masklen":
		param := define.Resources["Server"].Commands["interface-add-for-switch"].BuildedParams().Get("nw-masklen")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Server"].Commands["interface-add-for-switch"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["interface-add-for-switch"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerInterfaceAddDisconnectedCompleteFlags(ctx command.Context, params *params.InterfaceAddDisconnectedServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["Server"].Commands["interface-add-disconnected"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["interface-add-disconnected"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerIsoInfoCompleteFlags(ctx command.Context, params *params.IsoInfoServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["Server"].Commands["iso-info"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["iso-info"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerIsoInsertCompleteFlags(ctx command.Context, params *params.IsoInsertServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "iso-image-id":
		param := define.Resources["Server"].Commands["iso-insert"].BuildedParams().Get("iso-image-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "size":
		param := define.Resources["Server"].Commands["iso-insert"].BuildedParams().Get("size")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "iso-file":
		param := define.Resources["Server"].Commands["iso-insert"].BuildedParams().Get("iso-file")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "name":
		param := define.Resources["Server"].Commands["iso-insert"].BuildedParams().Get("name")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "description", "desc":
		param := define.Resources["Server"].Commands["iso-insert"].BuildedParams().Get("description")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "tags":
		param := define.Resources["Server"].Commands["iso-insert"].BuildedParams().Get("tags")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "icon-id":
		param := define.Resources["Server"].Commands["iso-insert"].BuildedParams().Get("icon-id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Server"].Commands["iso-insert"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["iso-insert"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerIsoEjectCompleteFlags(ctx command.Context, params *params.IsoEjectServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "selector":
		param := define.Resources["Server"].Commands["iso-eject"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["iso-eject"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerMonitorCpuCompleteFlags(ctx command.Context, params *params.MonitorCpuServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "start":
		param := define.Resources["Server"].Commands["monitor-cpu"].BuildedParams().Get("start")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "end":
		param := define.Resources["Server"].Commands["monitor-cpu"].BuildedParams().Get("end")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "key-format":
		param := define.Resources["Server"].Commands["monitor-cpu"].BuildedParams().Get("key-format")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Server"].Commands["monitor-cpu"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["monitor-cpu"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerMonitorNicCompleteFlags(ctx command.Context, params *params.MonitorNicServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "start":
		param := define.Resources["Server"].Commands["monitor-nic"].BuildedParams().Get("start")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "end":
		param := define.Resources["Server"].Commands["monitor-nic"].BuildedParams().Get("end")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "index":
		param := define.Resources["Server"].Commands["monitor-nic"].BuildedParams().Get("index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "key-format":
		param := define.Resources["Server"].Commands["monitor-nic"].BuildedParams().Get("key-format")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Server"].Commands["monitor-nic"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["monitor-nic"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerMonitorDiskCompleteFlags(ctx command.Context, params *params.MonitorDiskServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "start":
		param := define.Resources["Server"].Commands["monitor-disk"].BuildedParams().Get("start")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "end":
		param := define.Resources["Server"].Commands["monitor-disk"].BuildedParams().Get("end")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "index":
		param := define.Resources["Server"].Commands["monitor-disk"].BuildedParams().Get("index")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "key-format":
		param := define.Resources["Server"].Commands["monitor-disk"].BuildedParams().Get("key-format")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "selector":
		param := define.Resources["Server"].Commands["monitor-disk"].BuildedParams().Get("selector")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "id":
		param := define.Resources["Server"].Commands["monitor-disk"].BuildedParams().Get("id")
		if param != nil {
			comp = param.Param.CompleteFunc
		}
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerMaintenanceInfoCompleteFlags(ctx command.Context, params *params.MaintenanceInfoServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

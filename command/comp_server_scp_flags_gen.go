// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-completion'; DO NOT EDIT

package command

import (
	"fmt"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/schema"
)

func ServerScpCompleteFlags(ctx Context, params *ScpServerParam, flagName string, currentValue string) {
	var comp schema.SchemaCompletionFunc

	switch flagName {
	case "key", "i":
		comp = define.Resources["Server"].Commands["scp"].Params["key"].CompleteFunc
	case "password":
		comp = define.Resources["Server"].Commands["scp"].Params["password"].CompleteFunc
	case "port", "p":
		comp = define.Resources["Server"].Commands["scp"].Params["port"].CompleteFunc
	case "quiet", "q":
		comp = define.Resources["Server"].Commands["scp"].Params["quiet"].CompleteFunc
	case "recursive", "r":
		comp = define.Resources["Server"].Commands["scp"].Params["recursive"].CompleteFunc
	case "user", "l":
		comp = define.Resources["Server"].Commands["scp"].Params["user"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

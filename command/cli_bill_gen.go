// Code generated by 'github.com/sacloud/usacloud/tools/gen-cli-commands'; DO NOT EDIT

package command

import (
	"gopkg.in/urfave/cli.v2"
)

func init() {
	csvParam := NewCsvBillParam()
	listParam := NewListBillParam()

	cliCommand := &cli.Command{
		Name:  "bill",
		Usage: "A manage commands of Bill",
		Subcommands: []*cli.Command{
			{
				Name:      "csv",
				Usage:     "Csv Bill",
				ArgsUsage: "[ResourceID]",
				Flags: []cli.Flag{
					&cli.Int64Flag{
						Name:        "id",
						Usage:       "[Required] set bill ID",
						Destination: &csvParam.Id,
					},
					&cli.BoolFlag{
						Name:        "no-header",
						Usage:       "set output header flag",
						Destination: &csvParam.NoHeader,
					},
					&cli.StringFlag{
						Name:        "bill-output",
						Aliases:     []string{"file"},
						Usage:       "set bill-detail output path",
						Destination: &csvParam.BillOutput,
					},
				},
				Action: func(c *cli.Context) error {

					// Validate global params
					if errors := GlobalOption.Validate(false); len(errors) > 0 {
						return flattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					// id is can set from option or args(first)
					if c.NArg() > 0 {
						c.Set("id", c.Args().First())
					}

					// Validate specific for each command params
					if errors := csvParam.Validate(); len(errors) > 0 {
						return flattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := NewContext(c, c.Args().Slice(), csvParam)

					// Run command with params
					return BillCsv(ctx, csvParam)
				},
			},
			{
				Name:    "list",
				Aliases: []string{"l", "ls", "find"},
				Usage:   "List Bill",
				Flags: []cli.Flag{
					&cli.IntFlag{
						Name:        "year",
						Usage:       "set year",
						Destination: &listParam.Year,
					},
					&cli.IntFlag{
						Name:        "month",
						Usage:       "set month",
						Destination: &listParam.Month,
					},
				},
				Action: func(c *cli.Context) error {

					// Validate global params
					if errors := GlobalOption.Validate(false); len(errors) > 0 {
						return flattenErrorsWithPrefix(errors, "GlobalOptions")
					}

					// Validate specific for each command params
					if errors := listParam.Validate(); len(errors) > 0 {
						return flattenErrorsWithPrefix(errors, "Options")
					}

					// create command context
					ctx := NewContext(c, c.Args().Slice(), listParam)

					// Run command with params
					return BillList(ctx, listParam)
				},
			},
		},
	}

	Commands = append(Commands, cliCommand)
}

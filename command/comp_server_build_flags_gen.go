// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-completion'; DO NOT EDIT

package command

import (
	"fmt"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/schema"
)

func ServerBuildCompleteFlags(ctx Context, params *BuildServerParam, flagName string, currentValue string) {
	var comp schema.SchemaCompletionFunc

	switch flagName {
	case "core":
		comp = define.Resources["Server"].Commands["build"].Params["core"].CompleteFunc
	case "memory":
		comp = define.Resources["Server"].Commands["build"].Params["memory"].CompleteFunc
	case "disk-mode":
		comp = define.Resources["Server"].Commands["build"].Params["disk-mode"].CompleteFunc
	case "os-type":
		comp = define.Resources["Server"].Commands["build"].Params["os-type"].CompleteFunc
	case "disk-plan":
		comp = define.Resources["Server"].Commands["build"].Params["disk-plan"].CompleteFunc
	case "disk-connection":
		comp = define.Resources["Server"].Commands["build"].Params["disk-connection"].CompleteFunc
	case "disk-size":
		comp = define.Resources["Server"].Commands["build"].Params["disk-size"].CompleteFunc
	case "source-archive-id":
		comp = define.Resources["Server"].Commands["build"].Params["source-archive-id"].CompleteFunc
	case "source-disk-id":
		comp = define.Resources["Server"].Commands["build"].Params["source-disk-id"].CompleteFunc
	case "distant-from":
		comp = define.Resources["Server"].Commands["build"].Params["distant-from"].CompleteFunc
	case "disk-id":
		comp = define.Resources["Server"].Commands["build"].Params["disk-id"].CompleteFunc
	case "iso-image-id":
		comp = define.Resources["Server"].Commands["build"].Params["iso-image-id"].CompleteFunc
	case "network-mode":
		comp = define.Resources["Server"].Commands["build"].Params["network-mode"].CompleteFunc
	case "use-nic-virtio":
		comp = define.Resources["Server"].Commands["build"].Params["use-nic-virtio"].CompleteFunc
	case "packet-filter-id":
		comp = define.Resources["Server"].Commands["build"].Params["packet-filter-id"].CompleteFunc
	case "switch-id":
		comp = define.Resources["Server"].Commands["build"].Params["switch-id"].CompleteFunc
	case "hostname":
		comp = define.Resources["Server"].Commands["build"].Params["hostname"].CompleteFunc
	case "password":
		comp = define.Resources["Server"].Commands["build"].Params["password"].CompleteFunc
	case "disable-password-auth", "disable-pw-auth":
		comp = define.Resources["Server"].Commands["build"].Params["disable-password-auth"].CompleteFunc
	case "ipaddress", "ip":
		comp = define.Resources["Server"].Commands["build"].Params["ipaddress"].CompleteFunc
	case "nw-masklen", "network-masklen":
		comp = define.Resources["Server"].Commands["build"].Params["nw-masklen"].CompleteFunc
	case "default-route", "gateway":
		comp = define.Resources["Server"].Commands["build"].Params["default-route"].CompleteFunc
	case "startup-scripts", "notes":
		comp = define.Resources["Server"].Commands["build"].Params["startup-scripts"].CompleteFunc
	case "startup-script-ids", "note-ids":
		comp = define.Resources["Server"].Commands["build"].Params["startup-script-ids"].CompleteFunc
	case "startup-scripts-ephemeral":
		comp = define.Resources["Server"].Commands["build"].Params["startup-scripts-ephemeral"].CompleteFunc
	case "ssh-key-mode":
		comp = define.Resources["Server"].Commands["build"].Params["ssh-key-mode"].CompleteFunc
	case "ssh-key-name":
		comp = define.Resources["Server"].Commands["build"].Params["ssh-key-name"].CompleteFunc
	case "ssh-key-ids":
		comp = define.Resources["Server"].Commands["build"].Params["ssh-key-ids"].CompleteFunc
	case "ssh-key-pass-phrase":
		comp = define.Resources["Server"].Commands["build"].Params["ssh-key-pass-phrase"].CompleteFunc
	case "ssh-key-description":
		comp = define.Resources["Server"].Commands["build"].Params["ssh-key-description"].CompleteFunc
	case "ssh-key-private-key-output":
		comp = define.Resources["Server"].Commands["build"].Params["ssh-key-private-key-output"].CompleteFunc
	case "ssh-key-public-keys":
		comp = define.Resources["Server"].Commands["build"].Params["ssh-key-public-keys"].CompleteFunc
	case "ssh-key-public-key-files":
		comp = define.Resources["Server"].Commands["build"].Params["ssh-key-public-key-files"].CompleteFunc
	case "ssh-key-ephemeral":
		comp = define.Resources["Server"].Commands["build"].Params["ssh-key-ephemeral"].CompleteFunc
	case "name":
		comp = define.Resources["Server"].Commands["build"].Params["name"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["Server"].Commands["build"].Params["description"].CompleteFunc
	case "tags":
		comp = define.Resources["Server"].Commands["build"].Params["tags"].CompleteFunc
	case "icon-id":
		comp = define.Resources["Server"].Commands["build"].Params["icon-id"].CompleteFunc
	case "us-keyboard":
		comp = define.Resources["Server"].Commands["build"].Params["us-keyboard"].CompleteFunc
	case "disable-boot-after-create":
		comp = define.Resources["Server"].Commands["build"].Params["disable-boot-after-create"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}
